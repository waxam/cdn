{"version":3,"file":"grafitto-filter.umd.js","sources":["grafitto-filter.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport {\n  addDebouncer,\n  dom,\n  flush\n} from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport { Templatizer } from \"@polymer/polymer/lib/legacy/templatizer-behavior.js\";\nimport { OptionalMutableDataBehavior } from \"@polymer/polymer/lib/legacy/mutable-data-behavior.js\";\n\n/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n/**\n`grafitto-filter` is a Polymer reusable web component providing a solution for filtering a list of items before displaying them.\nThis component also supports use of custom filter functions using the `f` property. \n\nInstall:\n```bash\nbower install --save grafitto/grafitto-filter\n```\n\n`array`:\n```javascript\nvar array = [\"one\", \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\"];\n```\n```html\n<grafitto-filter item=[[array]] like=\"o\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item}}</div>\n      </template>\n    </iron-list>\n  </template> </grafitto-filter>\n```\n_Note_: When a simple array is provided, the `where` attribute is ignored and filtering done on the array items themselves.\nAlso an array of numbers behave like an array of strings when filtering.\n\n### Arrays of Objects   \n`data`:\n```javascript\nvar data = [\n  {\n    name:\"John\",\n    home: \"Thika\"\n  },\n  {\n    name: \"Doe\",\n    home: \"Nairobi\"\n  }\n]\n```\nExample using `dom-repeat`:\n\n```html\n<grafitto-filter items='[[data]]' where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <template is=\"dom-repeat\" items=[[vitu]] as=\"item\">\n      <div>{{item.name}}</div>\n    </template>\n  </template>\n</grafitto-filter>\n```\n\nExample using `iron-list`:\n\n```html\n<grafitto-filter items=[[data]] where=\"name\" like=\"Doe\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\nJust incase you are wondering, `vitu` means `items` in Swahili :-)\n\n_Note_: When a simple array E.g `[\"one\",\"two\",\"three\",\"four\"]` is provided, the `where` attribute is ignored and filtering done on the array items themselves.\n\n`grafitto-filter` also supports complex objects. consider:\n\n\n```javascript\nvar complexObj = [\n  {\n    name: {\n      first: \"Thomas\",\n      second: \"Kimtu\"\n    },\n    home: \"Thika\"\n  },\n  {\n    name: {\n      first: \"John\",\n      second: \"Doe\"\n    },\n    home: \"Othaya\"\n  },\n  {\n    name: {\n      first: \"Clement\",\n      second: \"Wainaina\"\n    },\n    home: \"Nakuru\"\n  }\n]\n``` \n\nHere is an example using the `complexObj` object above\n\n```html\n<grafitto-filter items=[[complexObj]] where=\"name.first\" like=\"tho\" as=\"vitu\">\n  <template>\n    <iron-list items=[[vitu]] as=\"item\">\n      <template>\n        <div>{{item.name.first}} {{item.name.second}}, {{item.home}}</div>\n      </template>\n    </iron-list>\n  </template>\n</grafitto-filter>\n```\n\nYou can also use your custom function to filter the items provided.\nThe function receives a single `item` of the items provided and should return a `boolean` \n\n```html\n<dom-module id=\"your-element\">\n  <template>\n    <grafitto-filter items=[[data]] id=\"filter\" as=\"vitu\">\n      <template>\n        <iron-list items=[[vitu]] as=\"item\">\n          <template>\n            <div>{{item.name}}, {{item.home}}</div>\n          </template>\n        </iron-list>\n      </template>\n    </grafitto-filter>\n    <script>\n      Polymer({\n        is: \"your-element\",\n        properties: {\n          data: {\n            type: Array,\n            value: [\n                    {\n                      \"name\":\"John\",\n                      \"home\": \"Thika\"\n                    },\n                    {\n                      \"name\": \"Doe\",\n                      \"home\": \"Nairobi\"\n                    }\n                  ]\n          }\n        },\n        ready: function(){\n          this.$.filter.f = function(item){\n            return item.name == \"Doe\";\n          };\n        }\n       //Then you can call filter() function to trigger filter\n      })\n    </script>\n  </template>\n</dom-module>\n```\n\n### Rule of thumb   \n`like` is taken as a regular expression so remember to escape any characters that you don't want interpreted\nby the regular expression engine.\n\n@element grafitto-filter\n@demo demo/index.html\n*/\nlet GrafittoFilter = Polymer({\n  _template: html`\n    <div id=\"dom\"><slot></slot></div>\n  `,\n\n  is: \"grafitto-filter\",\n  behaviors: [Templatizer, OptionalMutableDataBehavior],\n  properties: {\n    /**\n     * These are the items to be filtered\n     */\n    items: {\n      type: Array,\n      value: []\n    },\n    /**\n     * Filter regular expression string\n     */\n    like: {\n      type: String,\n      value: \"\"\n    },\n    /**\n     * The filter-by field of your items array of objects\n     */\n    where: {\n      type: String,\n      value: \"name\"\n    },\n    /**\n     * Enable case sensitivity when filtering\n     */\n    caseSensitive: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * How the filtered items will be passed to the light-DOM. Default `items`\n     */\n    as: {\n      type: String,\n      value: \"items\"\n    },\n    /**\n     * Filtered items\n     */\n    filtered: {\n      type: Array,\n      computed: \"_computeFiltered(items, where, like, caseSensitive)\",\n      observer: \"_onFilter\"\n    },\n    /**\n     * Custom filter function, if this is provided then 'where' and 'like' are ignored\n     */\n    f: {\n      type: Function,\n      notify: true\n    }\n  },\n\n  observers: [\"_populateUserTemplate(filtered)\"],\n\n  /**\n   * Filters the items using the f function provided. Recommended when f function is provided\n   */\n  filter: function() {\n    //This forces _computeFiltered function to do its job :-)\n    this.where = \"\";\n  },\n\n  /**\n   * This filters the items provided\n   *\n   * @param {array} items These are the items to be filtered.\n   * @param {string} where The filterby string.\n   * @param {string} like The filter string.\n   * @param {boolean} capital This is a flag to determine whether filter should be case sensitive or not.\n   * @return array} Filter results.\n   */\n  _computeFiltered: function(items, where, like, caseSensitive) {\n    var regex = null;\n    if (caseSensitive) {\n      regex = new RegExp(like);\n    } else {\n      regex = new RegExp(like, \"i\");\n    }\n\n    var filtered = [];\n    if (this.f) {\n      var customFunction = this.f.bind(this);\n      filtered = items.filter(customFunction);\n    } else {\n      //Save a reference to this object\n      var decompose = this._decomposeWhere.bind(this);\n      //Filter by `like`\n      filtered = items.filter(function(item) {\n        //This is when a complex object is provided\n        if (typeof item == \"object\") {\n          //Decompose where incase it is represented in . notation for complex objects\n          var decomposed = decompose(where, item);\n          //Check if the items specified are defined\n          if (typeof decomposed == \"undefined\" && where != \"\") {\n            //Do what I know best\n            console.warn(\n              \"grafitto-filter was unable to find a property in '\" + where + \"'\"\n            );\n          }\n          return regex.test(decomposed);\n        }\n\n        //When a simple object of strings is provided\n        if (typeof item == \"string\") {\n          return regex.test(item);\n        }\n        //When a simple object of numbers is provided\n        if (typeof item == \"number\") {\n          return regex.test(item.toString());\n        }\n      });\n    }\n    return filtered;\n  },\n\n  /**\n   * Populates user template, only template dom-repeate is supported for now\n   *@param {array} filtered the filtered array to be displayed\n   */\n  _populateUserTemplate: function(filtered) {\n    // set after template is stamped\n    if (this.ctor) {\n      // use this so filtered items can be updated after the fact\n      this.__clone[this.as] = filtered;\n      // bail so we don't get a double template error\n      return;\n    }\n    // find the template, just the 1st time though\n    this._userTemplate = this.querySelector(\"template\");\n    // if we didn't find one we need to tell devs that this is a problem\n    if (!this._userTemplate) {\n      console.warn(\n        \"grafitto-filter requires a template to be provided in light-dom\"\n      );\n    }\n    // process template variable areas\n    this.templatize(this._userTemplate);\n    // stamp it from template into an object\n    this.__clone = this.stamp(null);\n    // set filtered to whatever it is to start\n    this.__clone[this.as] = filtered;\n    // stamp this into itself...weird I know\n    dom(this).appendChild(this.__clone.root);\n  },\n\n  /**\n   * This decomposes `where` property to object attributes using . notation\n   */\n  _decomposeWhere: function(where, item) {\n    return where.split(\".\").reduce(function(a, b) {\n      return a && a[b];\n    }, item);\n  },\n\n  /**\n   * The `filter` event is fired whenever filtering is done before populating the dom.\n   *\n   * @event filter\n   */\n  _onFilter: function() {\n    this.fire(\"filter\");\n  }\n});\nexport { GrafittoFilter };\n"],"names":["GrafittoFilter","Polymer","_template","html","is","behaviors","Templatizer","OptionalMutableDataBehavior","properties","items","type","Array","value","like","String","where","caseSensitive","Boolean","reflectToAttribute","as","filtered","computed","observer","f","Function","notify","observers","filter","_computeFiltered","regex","RegExp","this","customFunction","bind","decompose","_decomposeWhere","item","_typeof","decomposed","console","warn","test","toString","_populateUserTemplate","ctor","__clone","_userTemplate","querySelector","templatize","stamp","dom","appendChild","root","split","reduce","a","b","_onFilter","fire"],"mappings":"gnCAsLIA,EAAiBC,UAAQ,CAC3BC,UAAWC,YAIXC,GAAI,kBACJC,UAAW,CAACC,cAAaC,+BACzBC,WAAY,CAIVC,MAAO,CACLC,KAAMC,MACNC,MAAO,IAKTC,KAAM,CACJH,KAAMI,OACNF,MAAO,IAKTG,MAAO,CACLL,KAAMI,OACNF,MAAO,QAKTI,cAAe,CACbN,KAAMO,QACNL,OAAO,EACPM,oBAAoB,GAKtBC,GAAI,CACFT,KAAMI,OACNF,MAAO,SAKTQ,SAAU,CACRV,KAAMC,MACNU,SAAU,sDACVC,SAAU,aAKZC,EAAG,CACDb,KAAMc,SACNC,QAAQ,IAIZC,UAAW,CAAC,mCAKZC,OAAQ,gBAEDZ,MAAQ,IAYfa,iBAAkB,SAASnB,EAAOM,EAAOF,EAAMG,OACzCa,EAAQ,KAEVA,EADEb,EACM,IAAIc,OAAOjB,GAEX,IAAIiB,OAAOjB,EAAM,SAGvBO,EAAW,MACXW,KAAKR,EAAG,KACNS,EAAiBD,KAAKR,EAAEU,KAAKF,MACjCX,EAAWX,EAAMkB,OAAOK,OACnB,KAEDE,EAAYH,KAAKI,gBAAgBF,KAAKF,MAE1CX,EAAWX,EAAMkB,OAAO,SAASS,MAEZ,UAAfC,EAAOD,GAAkB,KAEvBE,EAAaJ,EAAUnB,EAAOqB,eAET,IAAdE,GAAsC,IAATvB,GAEtCwB,QAAQC,KACN,qDAAuDzB,EAAQ,KAG5Dc,EAAMY,KAAKH,SAID,iBAARF,EACFP,EAAMY,KAAKL,GAGD,iBAARA,EACFP,EAAMY,KAAKL,EAAKM,4BAItBtB,GAOTuB,sBAAuB,SAASvB,GAE1BW,KAAKa,UAEFC,QAAQd,KAAKZ,IAAMC,QAKrB0B,cAAgBf,KAAKgB,cAAc,YAEnChB,KAAKe,eACRP,QAAQC,KACN,wEAICQ,WAAWjB,KAAKe,oBAEhBD,QAAUd,KAAKkB,MAAM,WAErBJ,QAAQd,KAAKZ,IAAMC,EAExB8B,MAAInB,MAAMoB,YAAYpB,KAAKc,QAAQO,QAMrCjB,gBAAiB,SAASpB,EAAOqB,UACxBrB,EAAMsC,MAAM,KAAKC,OAAO,SAASC,EAAGC,UAClCD,GAAKA,EAAEC,IACbpB,IAQLqB,UAAW,gBACJC,KAAK"}