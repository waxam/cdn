{"version":3,"file":"lrn-vocab.umd.js","sources":["lrn-vocab.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { FlattenedNodesObserver } from \"@polymer/polymer/lib/utils/flattened-nodes-observer.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"@lrnwebcomponents/simple-modal/simple-modal.js\";\n/**\n`lrn-vocab`\nVocabulary term with visual treatment and semantic meaning.\n\n@demo demo/index.html\n*/\nlet LrnVocab = Polymer({\n  _template: html`\n    <custom-style>\n      <style is=\"custom-style\">\n        :host {\n          display: inline-flex;\n          --lrn-vocab-border: 1px dashed #ccc;\n        }\n        paper-button {\n          text-transform: none;\n          padding: 0;\n          margin: 0;\n          position: relative;\n          top: 0px;\n          border-radius: 0;\n          border-bottom: var(--lrn-vocab-border);\n          background: #f5f5f5;\n          @apply --lrn-vocab-button;\n        }\n        paper-button:hover {\n          background: #bbdefb;\n          border-bottom: 1px dashed #2196f3;\n          @apply --lrn-vocab-button-hover;\n        }\n      </style>\n    </custom-style>\n    <paper-button id=\"button\" noink on-tap=\"openDialog\">[[term]]</paper-button>\n  `,\n\n  is: \"lrn-vocab\",\n\n  behaviors: [HAXBehaviors.PropertiesBehaviors, SchemaBehaviors.Schema],\n\n  properties: {\n    /**\n     * Term to highlight / display\n     */\n    term: {\n      type: String,\n      reflectToAttribute: true\n    }\n  },\n  /**\n   * Request the singleton dialog open\n   */\n  openDialog: function(e) {\n    let children = FlattenedNodesObserver.getFlattenedNodes(this).filter(\n      n => n.nodeType === Node.ELEMENT_NODE\n    );\n    let c = document.createElement(\"div\");\n    for (var child in children) {\n      c.appendChild(children[child].cloneNode(true));\n    }\n    const evt = new CustomEvent(\"simple-modal-show\", {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        title: this.term,\n        elements: {\n          content: c\n        },\n        invokedBy: this.$.button\n      }\n    });\n    this.dispatchEvent(evt);\n  },\n  /**\n   * Attached life cycle\n   */\n  attached: function() {\n    window.simpleModal.requestAvailability();\n    // Establish hax properties if they exist\n    let props = {\n      canScale: false,\n      canPosition: false,\n      canEditSource: false,\n      gizmo: {\n        title: \"Vocab\",\n        description: \"Vocabulary term\",\n        icon: \"image:details\",\n        color: \"red\",\n        groups: [\"Vocab\"],\n        handles: [\n          {\n            type: \"inline\",\n            text: \"term\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"term\",\n            title: \"Term\",\n            description: \"The word or words to make clickable for more detail.\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\",\n            required: true\n          }\n        ],\n        configure: [\n          {\n            property: \"term\",\n            title: \"Term\",\n            description: \"The word or words to make clickable for more detail.\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\",\n            required: true\n          },\n          {\n            slot: \"\",\n            title: \"Contents\",\n            description: \"Contents to display in the pop up.\",\n            inputMethod: \"code-editor\",\n            required: true\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n  }\n});\nexport { LrnVocab };\n"],"names":["LrnVocab","Polymer","_template","html","is","behaviors","HAXBehaviors","PropertiesBehaviors","SchemaBehaviors","Schema","properties","term","type","String","reflectToAttribute","openDialog","e","children","FlattenedNodesObserver","getFlattenedNodes","this","filter","n","nodeType","Node","ELEMENT_NODE","c","document","createElement","child","appendChild","cloneNode","evt","CustomEvent","bubbles","cancelable","detail","title","elements","content","invokedBy","$","button","dispatchEvent","attached","window","simpleModal","requestAvailability","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","text","meta","author","settings","quick","property","inputMethod","required","configure","slot","advanced"],"mappings":"03DAiBIA,EAAWC,UAAQ,CACrBC,UAAWC,YA4BXC,GAAI,YAEJC,UAAW,CAACC,aAAaC,oBAAqBC,gBAAgBC,QAE9DC,WAAY,CAIVC,KAAM,CACJC,KAAMC,OACNC,oBAAoB,IAMxBC,WAAY,SAASC,OACfC,EAAWC,yBAAuBC,kBAAkBC,MAAMC,OAC5D,SAAAC,UAAKA,EAAEC,WAAaC,KAAKC,eAEvBC,EAAIC,SAASC,cAAc,WAC1B,IAAIC,KAASZ,EAChBS,EAAEI,YAAYb,EAASY,GAAOE,WAAU,QAEpCC,EAAM,IAAIC,YAAY,oBAAqB,CAC/CC,SAAS,EACTC,YAAY,EACZC,OAAQ,CACNC,MAAOjB,KAAKT,KACZ2B,SAAU,CACRC,QAASb,GAEXc,UAAWpB,KAAKqB,EAAEC,eAGjBC,cAAcX,IAKrBY,SAAU,WACRC,OAAOC,YAAYC,2BAqDdC,iBAnDO,CACVC,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLf,MAAO,QACPgB,YAAa,kBACbC,KAAM,gBACNC,MAAO,MACPC,OAAQ,CAAC,SACTC,QAAS,CACP,CACE7C,KAAM,SACN8C,KAAM,SAGVC,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,OACV1B,MAAO,OACPgB,YAAa,uDACbW,YAAa,YACbV,KAAM,eACNW,UAAU,IAGdC,UAAW,CACT,CACEH,SAAU,OACV1B,MAAO,OACPgB,YAAa,uDACbW,YAAa,YACbV,KAAM,eACNW,UAAU,GAEZ,CACEE,KAAM,GACN9B,MAAO,WACPgB,YAAa,qCACbW,YAAa,cACbC,UAAU,IAGdG,SAAU"}