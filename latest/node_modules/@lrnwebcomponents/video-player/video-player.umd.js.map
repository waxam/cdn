{"version":3,"file":"video-player.umd.js","sources":["video-player.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport \"@lrnwebcomponents/materializecss-styles/materializecss-styles.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"@lrnwebcomponents/a11y-behaviors/a11y-behaviors.js\";\nimport \"@lrnwebcomponents/media-behaviors/media-behaviors.js\";\nimport \"@lrnwebcomponents/simple-colors/simple-colors.js\";\nimport \"@lrnwebcomponents/a11y-media-player/a11y-media-player.js\";\n\n/**\n`video-player`\nA simple responsive video player with ridiculously powerful backing\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n - video source - url / link to the video file\n\n <video-player \n  accent-color$=\"[[accentColor]]\"                 // Optional accent color for controls, \n                                                  // using the following materialize colors: \n                                                  // red, pink, purple, deep-purple, indigo, blue, \n                                                  // light blue, cyan, teal, green, light green, lime, \n                                                  // yellow, amber, orange, deep-orange, and brown. \n                                                  // Default is null. \n  dark$=\"[[dark]]\"                                // Is the color scheme dark? Default is light. \n  dark-transcript$=\"[[darkTranscript]]\"           // Use dark theme on transcript? Default is false, even when player is dark.   \n  disable-interactive$=\"[[disableInteractive]]\"   // Disable interactive cues?\n  height$=\"[[height]]\"                            // The height of player\n  hide-timestamps$=\"[[hideTimestamps]]\"           // Hide cue timestamps?\n  lang$=\"[[lang]]\"                                // The language of the media\n  media-title$=\"[[mediaTitle]]\"                   // The title of the media\n  source$=\"[[source]]\"                            // The source URL of the media\n  sticky-corner$=\"[[stickyCorner]]\"               // When user scrolls a playing video off-screen, \n                                                      which corner will it stick to? Values are: \n                                                      top-right (default), top-left, bottom-left, bottom-right, \n                                                      and none (to turn sticky off)\n  thumbnail-src$=\"[[thumbnailSrc]]\"               // Optional thumbanil/cover image url\n  width$=\"[[width]]\">                              // The width of the media             \n  <div slot=\"caption\">Optional caption info.</div>\n</video-player>\n\n*/\nlet VideoPlayer = Polymer({\n  _template: html`\n    <custom-style>\n      <style>\n        :host {\n          display: block;\n          margin: 0 0 15px;\n        }\n        .video-caption {\n          font-style: italic;\n          margin: 0;\n          padding: 8px;\n          @apply --video-player-caption-theme;\n        }\n      </style>\n    </custom-style>\n\n    <template is=\"dom-if\" if=\"[[isA11yMedia]]\" restamp=\"\">\n      <a11y-media-player\n        accent-color\\$=\"[[accentColor]]\"\n        dark\\$=\"[[dark]]\"\n        dark-transcript\\$=\"[[darkTranscript]]\"\n        disable-interactive\\$=\"[[disableInteractive]]\"\n        hide-timestamps\\$=\"[[hideTimestamps]]\"\n        lang\\$=\"[[lang]]\"\n        media-type\\$=\"[[sourceType]]\"\n        preload\\$=\"[[preload]]\"\n        media-title\\$=\"[[mediaTitle]]\"\n        stand-alone\\$=\"[[__standAlone]]\"\n        sticky-corner\\$=\"[[stickyCorner]]\"\n        thumbnail-src\\$=\"[[thumbnailSrc]]\"\n        crossorigin\\$=\"[[crossorigin]]\"\n        youtube-id\\$=\"[[youtubeId]]\"\n      >\n        <slot name=\"source\"></slot> <slot name=\"track\"></slot>\n        <template id=\"sources\" is=\"dom-repeat\" items=\"[[sourceData]]\" as=\"sd\">\n          <source src\\$=\"[[sd.src]]\" type\\$=\"[[sd.type]]\" />\n        </template>\n        <template id=\"tracks\" is=\"dom-repeat\" items=\"[[tracks]]\" as=\"track\">\n          <track\n            src\\$=\"[[track.src]]\"\n            kind\\$=\"[[track.kind]]\"\n            label\\$=\"[[track.label]]\"\n            srclang\\$=\"[[track.lang]]\"\n          />\n        </template>\n        <slot name=\"caption\"></slot>\n      </a11y-media-player>\n    </template>\n    <template is=\"dom-if\" if=\"[[!isA11yMedia]]\">\n      <template is=\"dom-if\" if=\"[[sandboxed]]\">\n        <div class=\"responsive-video-container\" lang\\$=\"[[lang]]\">\n          <webview\n            resource\\$=\"[[schemaResourceID]]-video\"\n            src\\$=\"[[sourceData.0.src]]\"\n            width\\$=\"[[width]]\"\n            height\\$=\"[[height]]\"\n            frameborder=\"0\"\n          ></webview>\n        </div>\n      </template>\n      <template is=\"dom-if\" if=\"[[!sandboxed]]\">\n        <template is=\"dom-if\" if=\"[[iframed]]\">\n          <div class=\"responsive-video-container\" lang\\$=\"[[lang]]\">\n            <iframe\n              resource\\$=\"[[schemaResourceID]]-video\"\n              src\\$=\"[[sourceData.0.src]]\"\n              width\\$=\"[[width]]\"\n              height\\$=\"[[height]]\"\n              frameborder=\"0\"\n              webkitallowfullscreen=\"\"\n              mozallowfullscreen=\"\"\n              allowfullscreen=\"\"\n            ></iframe>\n          </div>\n        </template>\n      </template>\n      <div id=\"videocaption\" class\\$=\"video-caption\">\n        <p>\n          [[mediaTitle]]\n          <span class=\"media-type print-only\">(embedded media)</span>\n        </p>\n        <slot name=\"caption\"></slot>\n      </div>\n    </template>\n  `,\n\n  is: \"video-player\",\n\n  behaviors: [\n    HAXBehaviors.PropertiesBehaviors,\n    MaterializeCSSBehaviors.ColorBehaviors,\n    SchemaBehaviors.Schema,\n    A11yBehaviors.A11y,\n    MediaBehaviors.Video\n  ],\n\n  properties: {\n    /**\n     * Optional accent color for controls,\n     * using the following materialize colors:\n     * red, pink, purple, deep-purple, indigo, blue,\n     * light blue, cyan, teal, green, light green, lime,\n     * yellow, amber, orange, deep-orange, and brown.\n     * Default is null.\n     */\n    accentColor: {\n      type: String,\n      value: null,\n      reflectToAttribute: true\n    },\n    /**\n     * Enables darker player.\n     */\n    dark: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * Use dark theme on transcript? Default is false, even when player is dark.\n     */\n    darkTranscript: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * disable interactive mode that makes the transcript clickable\n     */\n    disableInteractive: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * The height of the media player.\n     */\n    height: {\n      type: String,\n      value: null\n    },\n    /**\n     * show cue's start and end time\n     */\n    hideTimestamps: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Computed if this should be in an iframe or not.\n     */\n    iframed: {\n      type: Boolean,\n      computed: \"_computeIframed(sourceData, sandboxed)\"\n    },\n    /**\n     * Computed if this should be in a11y-media-player.\n     */\n    isA11yMedia: {\n      type: Boolean,\n      computed: \"_computeA11yMedia(sourceType, sandboxed)\"\n    },\n    /**\n     * The language of the media\n     */\n    lang: {\n      type: String,\n      value: \"en\"\n    },\n    /**\n     * Simple caption for the video\n     */\n    mediaTitle: {\n      type: String\n    },\n    /**\n     * What to preload for a11y-media-player: auto, metadata (default), or none.\n     */\n    preload: {\n      type: String,\n      value: \"metadata\"\n    },\n    /* *\n       * Responsive video, calculated from not-responsive.\n       * /\n      responsive: {\n        type: Boolean,\n        reflectToAttribute: true,\n        value: true,\n      },*/\n    /**\n     * Compute if this is a sandboxed system or not\n     */\n    sandboxed: {\n      type: Boolean,\n      computed: \"_computeSandboxed(sourceData)\"\n    },\n    /**\n     * Source of the video\n     */\n    source: {\n      type: String,\n      value: null\n    },\n    /**\n     * Source of the video\n     */\n    sources: {\n      type: Array,\n      value: []\n    },\n    /**\n     * List of source objects\n     */\n    sourceData: {\n      type: Array,\n      computed: \"_getSourceData(source,sources,tracks)\",\n      reflectToAttribute: true\n    },\n    /**\n     * The type of source, i.e. \"local\", \"vimeo\", \"youtube\", etc.\n     */\n    sourceType: {\n      type: String,\n      computed: \"_computeSourceType(sourceData)\"\n    },\n    /**\n     * The type of source, i.e. \"local\", \"vimeo\", \"youtube\", etc.\n     */\n    youtubeId: {\n      type: String,\n      computed: \"_computeYoutubeId(source,sourceType)\"\n    },\n    /**\n     * The type of source, i.e. \"local\", \"vimeo\", \"youtube\", etc.\n     */\n    isYoutube: {\n      type: Boolean,\n      computed: \"_computeYoutube(sourceType)\"\n    },\n    /**\n     * When playing but scrolled off screen, to which corner does it stick:\n     * top-left, top-right, bottom-left, bottom-right, or none?\n     * Default is \"top-right\". \"None\" disables stickiness.\n     */\n    stickyCorner: {\n      type: String,\n      value: \"top-right\",\n      reflectToAttribute: true\n    },\n    /**\n     * Array of text tracks\n     * [{\n     *  \"src\": \"path/to/track.vtt\",\n     *  \"label\": \"English\",\n     *  \"srclang\": \"en\",\n     *  \"kind\": \"subtitles\",\n     * }]\n     */\n    tracks: {\n      type: Array,\n      value: []\n    },\n    /**\n     * Source of optional thumbnail image\n     */\n    thumbnailSrc: {\n      type: String,\n      value: null,\n      reflectToAttribute: true\n    },\n    /* *\n       * Calculate vimeo color based on accent color.\n       * /\n      vimeoColor: {\n        type: String,\n        computed: getVimeoColor(dark,accentColor),\n      }, \n      */\n    /**\n     * The width of the media player.\n     */\n    width: {\n      type: String,\n      value: null\n    },\n    /**\n     * Cross origin flag for transcripts to load\n     */\n    crossorigin: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  /**\n   * Attached.\n   */\n  attached: function() {\n    // Establish hax properties if they exist\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Video player\",\n        description:\n          \"This can present video in a highly accessible manner regardless of source.\",\n        icon: \"av:play-circle-filled\",\n        color: \"red\",\n        groups: [\"Video\", \"Media\"],\n        handles: [\n          {\n            type: \"video\",\n            source: \"source\",\n            title: \"caption\",\n            caption: \"caption\",\n            description: \"caption\",\n            color: \"primaryColor\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          /*{\n            'property': 'responsive',\n            'title': 'Responsive',\n            'description': 'The video automatically fills the available area.',\n            'inputMethod': 'boolean',\n            'icon': 'image:photo-size-select-small',\n          },*/\n          {\n            property: \"accentColor\",\n            title: \"Accent color\",\n            description: \"Select the accent color for the player.\",\n            inputMethod: \"colorpicker\",\n            icon: \"editor:format-color-fill\"\n          },\n          {\n            property: \"dark\",\n            title: \"Dark theme\",\n            description: \"Enable dark theme for the player.\",\n            inputMethod: \"boolean\",\n            icon: \"invert-colors\"\n          }\n        ],\n        configure: [\n          {\n            property: \"source\",\n            title: \"Source\",\n            description: \"The URL for this video.\",\n            inputMethod: \"textfield\",\n            icon: \"link\",\n            required: true,\n            validationType: \"url\"\n          },\n          {\n            property: \"track\",\n            title: \"Closed captions\",\n            description: \"The URL for the captions file.\",\n            inputMethod: \"textfield\",\n            icon: \"link\",\n            required: true,\n            validationType: \"url\"\n          },\n          {\n            property: \"thumbnailSrc\",\n            title: \"Thumbnail image\",\n            description: \"Optional. The URL for a thumbnail/poster image.\",\n            inputMethod: \"textfield\",\n            icon: \"link\",\n            required: true,\n            validationType: \"url\"\n          },\n          {\n            property: \"mediaTitle\",\n            title: \"Title\",\n            description: \"Simple title for under video\",\n            inputMethod: \"textfield\",\n            icon: \"av:video-label\",\n            required: false,\n            validationType: \"text\"\n          },\n          {\n            property: \"accentColor\",\n            title: \"Accent color\",\n            description: \"Select the accent color for the player.\",\n            inputMethod: \"colorpicker\",\n            icon: \"editor:format-color-fill\"\n          },\n          {\n            property: \"dark\",\n            title: \"Dark theme\",\n            description: \"Enable dark theme for the player.\",\n            inputMethod: \"boolean\",\n            icon: \"invert-colors\"\n          }\n        ],\n        advanced: [\n          {\n            property: \"darkTranscript\",\n            title: \"Dark theme for transcript\",\n            description: \"Enable dark theme for the transcript.\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"hideTimestamps\",\n            title: \"Hide timestamps\",\n            description: \"Hide the time stamps on the transcript.\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"preload\",\n            title: \"Preload source(s).\",\n            description:\n              \"How the sources should be preloaded, i.e. auto, metadata (default), or none.\",\n            inputMethod: \"select\",\n            options: {\n              preload: \"Preload all media\",\n              metadata: \"Preload media metadata only\",\n              none: \"Don't preload anything\"\n            }\n          },\n          {\n            property: \"stickyCorner\",\n            title: \"Sticky Corner\",\n            description:\n              \"Set the corner where a video plays when scrolled out of range, or choose none to disable sticky video.\",\n            inputMethod: \"select\",\n            options: {\n              none: \"none\",\n              \"top-left\": \"top-left\",\n              \"top-right\": \"top-right\",\n              \"bottom-left\": \"bottom-left\",\n              \"bottom-right\": \"bottom-right\"\n            }\n          },\n          {\n            property: \"sources\",\n            title: \"Other sources\",\n            description: \"List of other sources\",\n            inputMethod: \"array\",\n            properties: [\n              {\n                property: \"src\",\n                title: \"Source\",\n                description: \"The URL for this video.\",\n                inputMethod: \"textfield\"\n              },\n              {\n                property: \"type\",\n                title: \"Type\",\n                description: \"Media type data\",\n                inputMethod: \"select\",\n                options: {\n                  \"audio/aac\": \"acc audio\",\n                  \"audio/flac\": \"flac audio\",\n                  \"audio/mp3\": \"mp3 audio\",\n                  \"video/mp4\": \"mp4 video\",\n                  \"video/mov\": \"mov video\",\n                  \"audio/ogg\": \"ogg audio\",\n                  \"video/ogg\": \"ogg video\",\n                  \"audio/wav\": \"wav audio\",\n                  \"audio/webm\": \"webm audio\",\n                  \"video/webm\": \"webm video\"\n                }\n              }\n            ]\n          },\n          {\n            property: \"tracks\",\n            title: \"Track list\",\n            description: \"Tracks of different languages of closed captions\",\n            inputMethod: \"array\",\n            properties: [\n              {\n                property: \"kind\",\n                title: \"Kind\",\n                description: \"Kind of track\",\n                inputMethod: \"select\",\n                options: {\n                  subtitles:\n                    \"subtitles\" /*,\n                  Future Features\n                  'description': 'description',\n                  'thumbnails': 'thumbnails',\n                  'interactive': 'interactive',\n                  'annotation': 'annotation'*/\n                }\n              },\n              {\n                property: \"label\",\n                title: \"Label\",\n                description:\n                  'The human-readable name for this track, eg. \"English Subtitles\"',\n                inputMethod: \"textfield\"\n              },\n              {\n                property: \"src\",\n                title: \"Source\",\n                description: \"Source of the track\",\n                inputMethod: \"textfield\"\n              },\n              {\n                property: \"srclang\",\n                title:\n                  'Two letter, language code, eg. \"en\" for English, \"de\" for German, \"es\" for Spanish, etc.',\n                description: \"Label\",\n                inputMethod: \"textfield\"\n              }\n            ]\n          }\n        ]\n      }\n    };\n    this.setHaxProperties(props);\n  },\n\n  /**\n   * Get Youtube ID\n   */\n  _computeYoutubeId: function(source, sourceType) {\n    if (source !== undefined && sourceType === \"youtube\") {\n      return this._computeSRC(source).replace(\n        /(https?:\\/\\/)?(www.)?youtube(-nocookie)?.com\\/embed\\//,\n        \"\"\n      );\n    }\n    return false;\n  },\n\n  /**\n   * Determine if it is youtube\n   */\n  _computeYoutube: function(sourceType) {\n    return sourceType === \"youtube\";\n  },\n\n  /**\n   * Determine if it is compatible with a11y-media-player\n   */\n  _computeA11yMedia: function(sourceType, sandboxed) {\n    if (!sandboxed && (sourceType == \"youtube\" || sourceType == \"local\")) {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Compute iframed status\n   */\n  _computeIframed: function(sourceData, sandboxed) {\n    // make sure we take into account sandboxing as well\n    // so that we can manage the state effectively\n    if (\n      sourceData.length > 0 &&\n      sourceData[0] !== undefined &&\n      this._sourceIsIframe(sourceData[0].src) &&\n      !sandboxed\n    ) {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Gets source and added to sources list\n   */\n  _getSourceData: function(source, sources, tracks) {\n    let root = this,\n      slotted = dom(root).querySelector(\"track\");\n    let temp = sources.slice();\n    for (let i = 0; i < temp.length; i++) {\n      temp[i].type =\n        temp[i].type !== undefined && temp[i].type !== null\n          ? temp[i].type\n          : this._computeMediaType(temp[i].src);\n      temp[i].src = this._computeSRC(temp[i].src);\n    }\n    if (source !== null) {\n      let src = this._computeSRC(source);\n      this.sourceType = this._computeSourceType(src);\n      if (this.sourceType !== \"youtube\")\n        temp.unshift({ src: src, type: this._computeMediaType(src) });\n    }\n    this.__standAlone =\n      tracks === undefined ||\n      tracks === null ||\n      (tracks.length === 0 && slotted === null);\n    return temp;\n  },\n\n  /**\n   * Compute media type based on source, i.e. 'audio/wav' for '.wav'\n   */\n  _computeMediaType: function(source) {\n    let audio = [\"aac\", \"flac\", \"mp3\", \"oga\", \"wav\"],\n      video = [\"mov\", \"mp4\", \"ogv\", \"webm\"],\n      type = \"\",\n      findType = function(text, data) {\n        for (let i = 0; i < data.length; i++) {\n          if (\n            type === \"\" &&\n            source !== null &&\n            source.toLowerCase().indexOf(\".\" + data[i]) > -1\n          )\n            type = text + \"/\" + data[i];\n        }\n      };\n    findType(\"audio\", audio);\n    findType(\"video\", video);\n    return type;\n  },\n\n  /**\n   * Compute sandboxed status\n   */\n  _computeSandboxed: function(sourceData) {\n    // we have something that would require an iframe\n    // see if we have a local system that would want to sandbox instead\n    if (\n      sourceData.length > 0 &&\n      sourceData[0] !== undefined &&\n      this._sourceIsIframe(sourceData[0].src)\n    ) {\n      // fake the creation of a webview element to see if it's valid\n      // or not.\n      let test = document.createElement(\"webview\");\n      // if this function exists it means that our deploy target\n      // is in a sandboxed environment and is not able to run iframe\n      // content with any real stability. This is beyond edge case but\n      // as this is an incredibly useful tag we want to make sure it\n      // can mutate to work in chromium and android environments\n      // which support such sandboxing\n      if (typeof test.reload === \"function\") {\n        return true;\n      }\n    }\n    return false;\n  },\n\n  /**\n   * Compute video type based on source\n   */\n  _computeSourceType: function(sourceData) {\n    let root = this,\n      slotted = dom(root).querySelector(\"source\");\n    if (\n      sourceData.length > 0 &&\n      sourceData[0] !== undefined &&\n      typeof sourceData[0].src !== typeof undefined\n    ) {\n      return root.getVideoType(sourceData[0].src);\n    } else if (slotted !== null) {\n      let src = root._computeSRC(slotted.getAttribute(\"src\"));\n      return root.getVideoType(src);\n    } else {\n      return null;\n    }\n  },\n\n  /**\n   * Compute src from type / source combo.\n   * Type is set by source so this ensures a waterfall\n   * of valid values.\n   */\n  _computeSRC: function(source) {\n    if (source !== null && typeof source !== undefined) {\n      let type =\n        this.sourceType !== undefined\n          ? this.sourceType\n          : this.getVideoType(source);\n      // ensure that this is a valid url / cleaned up a bit\n      source = this.cleanVideoSource(source, type);\n      if (type == \"vimeo\") {\n        if (this.vimeoTitle) {\n          source += \"?title=1\";\n        } else {\n          source += \"?title=0\";\n        }\n        if (this.vimeoByline) {\n          source += \"&byline=1\";\n        } else {\n          source += \"&byline=0\";\n        }\n        if (this.vimeoPortrait) {\n          source += \"&portrait=1\";\n        } else {\n          source += \"&portrait=0\";\n        }\n        if (typeof this.videoColor !== typeof undefined) {\n          source += \"&color=\" + this.videoColor;\n        }\n      } else if (type == \"dailymotion\") {\n        source += \"&ui-start-screen-info=false\";\n        source += \"&ui-logo=false\";\n        source += \"&sharing-enable=false\";\n        source += \"&endscreen-enable=false\";\n        if (typeof this.videoColor !== typeof undefined) {\n          source += \"&ui-highlight=\" + this.videoColor;\n        }\n      }\n    }\n    return source;\n  }\n});\nexport { VideoPlayer };\n"],"names":["VideoPlayer","Polymer","_template","html","is","behaviors","HAXBehaviors","PropertiesBehaviors","MaterializeCSSBehaviors","ColorBehaviors","SchemaBehaviors","Schema","A11yBehaviors","A11y","MediaBehaviors","Video","properties","accentColor","type","String","value","reflectToAttribute","dark","Boolean","darkTranscript","disableInteractive","height","hideTimestamps","iframed","computed","isA11yMedia","lang","mediaTitle","preload","sandboxed","source","sources","Array","sourceData","sourceType","youtubeId","isYoutube","stickyCorner","tracks","thumbnailSrc","width","crossorigin","attached","setHaxProperties","canScale","canPosition","canEditSource","gizmo","title","description","icon","color","groups","handles","caption","meta","author","settings","quick","property","inputMethod","configure","required","validationType","advanced","options","metadata","none","subtitles","_computeYoutubeId","undefined","this","_computeSRC","replace","_computeYoutube","_computeA11yMedia","_computeIframed","length","_sourceIsIframe","src","_getSourceData","slotted","dom","querySelector","temp","slice","i","_computeMediaType","_computeSourceType","unshift","__standAlone","findType","text","data","toLowerCase","indexOf","_computeSandboxed","document","createElement","reload","_typeof","getVideoType","getAttribute","cleanVideoSource","vimeoTitle","vimeoByline","vimeoPortrait","videoColor"],"mappings":"wsOA4CIA,EAAcC,UAAQ,CACxBC,UAAWC,YAsFXC,GAAI,eAEJC,UAAW,CACTC,aAAaC,oBACbC,wBAAwBC,eACxBC,gBAAgBC,OAChBC,cAAcC,KACdC,eAAeC,OAGjBC,WAAY,CASVC,YAAa,CACXC,KAAMC,OACNC,MAAO,KACPC,oBAAoB,GAKtBC,KAAM,CACJJ,KAAMK,QACNH,OAAO,EACPC,oBAAoB,GAKtBG,eAAgB,CACdN,KAAMK,QACNH,OAAO,GAKTK,mBAAoB,CAClBP,KAAMK,QACNH,OAAO,GAKTM,OAAQ,CACNR,KAAMC,OACNC,MAAO,MAKTO,eAAgB,CACdT,KAAMK,QACNH,OAAO,GAKTQ,QAAS,CACPV,KAAMK,QACNM,SAAU,0CAKZC,YAAa,CACXZ,KAAMK,QACNM,SAAU,4CAKZE,KAAM,CACJb,KAAMC,OACNC,MAAO,MAKTY,WAAY,CACVd,KAAMC,QAKRc,QAAS,CACPf,KAAMC,OACNC,MAAO,YAaTc,UAAW,CACThB,KAAMK,QACNM,SAAU,iCAKZM,OAAQ,CACNjB,KAAMC,OACNC,MAAO,MAKTgB,QAAS,CACPlB,KAAMmB,MACNjB,MAAO,IAKTkB,WAAY,CACVpB,KAAMmB,MACNR,SAAU,wCACVR,oBAAoB,GAKtBkB,WAAY,CACVrB,KAAMC,OACNU,SAAU,kCAKZW,UAAW,CACTtB,KAAMC,OACNU,SAAU,wCAKZY,UAAW,CACTvB,KAAMK,QACNM,SAAU,+BAOZa,aAAc,CACZxB,KAAMC,OACNC,MAAO,YACPC,oBAAoB,GAWtBsB,OAAQ,CACNzB,KAAMmB,MACNjB,MAAO,IAKTwB,aAAc,CACZ1B,KAAMC,OACNC,MAAO,KACPC,oBAAoB,GAatBwB,MAAO,CACL3B,KAAMC,OACNC,MAAO,MAKT0B,YAAa,CACX5B,KAAMK,QACNH,OAAO,IAOX2B,SAAU,gBA4NHC,iBA1NO,CACVC,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLC,MAAO,eACPC,YACE,6EACFC,KAAM,wBACNC,MAAO,MACPC,OAAQ,CAAC,QAAS,SAClBC,QAAS,CACP,CACExC,KAAM,QACNiB,OAAQ,SACRkB,MAAO,UACPM,QAAS,UACTL,YAAa,UACbE,MAAO,iBAGXI,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,EASHC,SAAU,cACVX,MAAO,eACPC,YAAa,0CACbW,YAAa,cACbV,KAAM,4BAER,CACES,SAAU,OACVX,MAAO,aACPC,YAAa,oCACbW,YAAa,UACbV,KAAM,kBAGVW,UAAW,CACT,CACEF,SAAU,SACVX,MAAO,SACPC,YAAa,0BACbW,YAAa,YACbV,KAAM,OACNY,UAAU,EACVC,eAAgB,OAElB,CACEJ,SAAU,QACVX,MAAO,kBACPC,YAAa,iCACbW,YAAa,YACbV,KAAM,OACNY,UAAU,EACVC,eAAgB,OAElB,CACEJ,SAAU,eACVX,MAAO,kBACPC,YAAa,kDACbW,YAAa,YACbV,KAAM,OACNY,UAAU,EACVC,eAAgB,OAElB,CACEJ,SAAU,aACVX,MAAO,QACPC,YAAa,+BACbW,YAAa,YACbV,KAAM,iBACNY,UAAU,EACVC,eAAgB,QAElB,CACEJ,SAAU,cACVX,MAAO,eACPC,YAAa,0CACbW,YAAa,cACbV,KAAM,4BAER,CACES,SAAU,OACVX,MAAO,aACPC,YAAa,oCACbW,YAAa,UACbV,KAAM,kBAGVc,SAAU,CACR,CACEL,SAAU,iBACVX,MAAO,4BACPC,YAAa,wCACbW,YAAa,WAEf,CACED,SAAU,iBACVX,MAAO,kBACPC,YAAa,0CACbW,YAAa,WAEf,CACED,SAAU,UACVX,MAAO,qBACPC,YACE,+EACFW,YAAa,SACbK,QAAS,CACPrC,QAAS,oBACTsC,SAAU,8BACVC,KAAM,2BAGV,CACER,SAAU,eACVX,MAAO,gBACPC,YACE,yGACFW,YAAa,SACbK,QAAS,CACPE,KAAM,kBACM,uBACC,0BACE,6BACC,iBAGpB,CACER,SAAU,UACVX,MAAO,gBACPC,YAAa,wBACbW,YAAa,QACbjD,WAAY,CACV,CACEgD,SAAU,MACVX,MAAO,SACPC,YAAa,0BACbW,YAAa,aAEf,CACED,SAAU,OACVX,MAAO,OACPC,YAAa,kBACbW,YAAa,SACbK,QAAS,aACM,yBACC,yBACD,wBACA,wBACA,wBA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"}