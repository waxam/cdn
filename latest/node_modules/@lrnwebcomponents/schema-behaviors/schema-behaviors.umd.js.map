{"version":3,"file":"schema-behaviors.umd.js","sources":["schema-behaviors.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\n// ensure SchemaBehaviors exists\nwindow.SchemaBehaviors = window.SchemaBehaviors || {};\n/**\n * `SchemaBehaviors`\n *\n * makes it easier to wire custom elements for\n * schematic metadata by allowing prefixes to be defined in an object\n * structure. This makes it easier to add and remove them then working\n * against the attribute directly. It also helps with generating\n * resource IDs automatically if they don't already exist on the element.\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @polymer\n * @polymerBehavior SchemaBehaviors.Schema\n */\nwindow.SchemaBehaviors.Schema = {\n  properties: {\n    /**\n     * Unique Resource ID, generated when schemaMap processes.\n     */\n    schemaResourceID: {\n      type: String,\n      value: \"\"\n    },\n    /**\n     * Schema Map for this element.\n     */\n    schemaMap: {\n      type: Object,\n      value: {\n        prefix: {\n          oer: \"http://oerschema.org/\",\n          schema: \"http://schema.org/\",\n          dc: \"http://purl.org/dc/terms/\",\n          foaf: \"http://xmlns.com/foaf/0.1/\",\n          cc: \"http://creativecommons.org/ns#\",\n          bib: \"http://bib.schema.org\"\n        }\n      },\n      observer: \"_schemaMapChanged\"\n    }\n  },\n  /**\n   * Generate a uinque ID\n   */\n  generateResourceID: function() {\n    function idPart() {\n      return Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    }\n    return (\n      \"#\" +\n      idPart() +\n      idPart() +\n      \"-\" +\n      idPart() +\n      \"-\" +\n      idPart() +\n      \"-\" +\n      idPart()\n    );\n  },\n  /**\n   * Notice the schema map has changed, reprocess attributes.\n   */\n  _schemaMapChanged: function(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined) {\n      // use this to tie into schemaResourceID build\n      this.schemaResourceID = this.getAttribute(\"resource\");\n      // if it still doesn't have one then we have to check\n      if (this.schemaResourceID == \"\" || this.schemaResourceID == null) {\n        this.schemaResourceID = this.generateResourceID();\n        this.setAttribute(\"resource\", this.schemaResourceID);\n      }\n      let prefixes = newValue.prefix;\n      let prefix = \"\";\n      // build prefix string\n      for (var property in prefixes) {\n        if (prefixes.hasOwnProperty(property)) {\n          prefix += property + \":\" + prefixes[property] + \" \";\n        }\n      }\n      // set prefix on the main element itself\n      if (prefix != \"\") {\n        this.setAttribute(\"prefix\", prefix);\n      }\n    }\n  }\n};\n"],"names":["window","SchemaBehaviors","Schema","properties","schemaResourceID","type","String","value","schemaMap","Object","prefix","oer","schema","dc","foaf","cc","bib","observer","generateResourceID","idPart","Math","floor","random","toString","substring","_schemaMapChanged","newValue","oldValue","_typeof","this","getAttribute","setAttribute","prefixes","property","hasOwnProperty"],"mappings":"4XAKAA,OAAOC,gBAAkBD,OAAOC,iBAAmB,GAgBnDD,OAAOC,gBAAgBC,OAAS,CAC9BC,WAAY,CAIVC,iBAAkB,CAChBC,KAAMC,OACNC,MAAO,IAKTC,UAAW,CACTH,KAAMI,OACNF,MAAO,CACLG,OAAQ,CACNC,IAAK,wBACLC,OAAQ,qBACRC,GAAI,4BACJC,KAAM,6BACNC,GAAI,iCACJC,IAAK,0BAGTC,SAAU,sBAMdC,mBAAoB,oBACTC,WACAC,KAAKC,MAA4B,OAArB,EAAID,KAAKE,WACzBC,SAAS,IACTC,UAAU,SAGb,IACAL,IACAA,IACA,IACAA,IACA,IACAA,IACA,IACAA,KAMJM,kBAAmB,SAASC,EAAUC,oBAChCC,EAAOF,GAA+B,MAEnCtB,iBAAmByB,KAAKC,aAAa,YAEb,IAAzBD,KAAKzB,kBAAmD,MAAzByB,KAAKzB,wBACjCA,iBAAmByB,KAAKX,0BACxBa,aAAa,WAAYF,KAAKzB,uBAEjC4B,EAAWN,EAAShB,OACpBA,EAAS,OAER,IAAIuB,KAAYD,EACfA,EAASE,eAAeD,KAC1BvB,GAAUuB,EAAW,IAAMD,EAASC,GAAY,KAItC,IAAVvB,QACGqB,aAAa,SAAUrB"}