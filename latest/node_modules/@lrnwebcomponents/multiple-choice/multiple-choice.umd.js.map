{"version":3,"file":"multiple-choice.umd.js","sources":["multiple-choice.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/paper-checkbox/paper-checkbox.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/paper-toast/paper-toast.js\";\nimport \"@lrnwebcomponents/materializecss-styles/materializecss-styles.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\n/**\n`multiple-choice`\nAsk the user a question from a set of possible answers.\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n\n*/\nlet MultipleChoice = Polymer({\n  _template: html`\n    <style include=\"materializecss-styles\">\n      :host {\n        display: block;\n        padding: 16px 16px 54px 16px;\n      }\n      h3 {\n        margin: 8px;\n      }\n      ul {\n        list-style: none;\n        padding: 0;\n        margin: 0;\n      }\n      ul li {\n        padding: 8px;\n      }\n      paper-checkbox {\n        padding: 8px;\n      }\n      iron-icon {\n        display: inline-flex;\n      }\n    </style>\n    <meta property=\"oer:assessing\" content\\$=\"[[relatedResource]]\" />\n    <h3 hidden\\$=\"[[hideTitle]]\"><span property=\"oer:name\">[[title]]</span></h3>\n    <div>[[question]]</div>\n    <ul>\n      <template is=\"dom-repeat\" items=\"[[displayedAnswers]]\" as=\"answer\">\n        <li>\n          <paper-checkbox\n            disabled\\$=\"[[disabled]]\"\n            property=\"oer:answer\"\n            checked=\"{{answer.userGuess}}\"\n            >[[answer.label]]</paper-checkbox\n          >\n        </li>\n      </template>\n    </ul>\n    <div hidden\\$=\"[[hideButtons]]\">\n      <paper-button disabled\\$=\"[[disabled]]\" raised=\"\" on-tap=\"_verifyAnswers\"\n        >[[checkLabel]]</paper-button\n      >\n      <paper-button disabled\\$=\"[[disabled]]\" raised=\"\" on-tap=\"_resetAnswers\"\n        >[[resetLabel]]</paper-button\n      >\n    </div>\n    <paper-toast\n      id=\"toast\"\n      duration=\"6000\"\n      class\\$=\"fit-bottom [[__toastColor]]\"\n    >\n      [[__toastText]]\n      <iron-icon icon=\"[[__toastIcon]]\" style=\"margin-left:16px;\"></iron-icon>\n    </paper-toast>\n  `,\n\n  is: \"multiple-choice\",\n\n  hostAttributes: {\n    typeof: \"oer:Assessment\"\n  },\n\n  behaviors: [\n    HAXBehaviors.PropertiesBehaviors,\n    MaterializeCSSBehaviors.ColorBehaviors,\n    SchemaBehaviors.Schema\n  ],\n\n  observers: [\"_valueChanged(displayedAnswers.*)\"],\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String,\n      value: \"\"\n    },\n    /**\n     * Support disabling interaction with the entire board\n     */\n    disabled: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Text of the label to check your answer\n     */\n    checkLabel: {\n      type: String,\n      value: \"Check answer\"\n    },\n    /**\n     * Text of the reset button\n     */\n    resetLabel: {\n      type: String,\n      value: \"Reset\"\n    },\n    /**\n     * Related Resource ID\n     */\n    relatedResource: {\n      type: String\n    },\n    /**\n     * Flag to hide the title\n     */\n    hideTitle: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Question to ask\n     */\n    question: {\n      type: String,\n      value: \"\"\n    },\n    /**\n     * Array of possible answers\n     */\n    answers: {\n      type: Array,\n      value: [],\n      notify: true\n    },\n    /**\n     * Displayed Answer set.\n     */\n    displayedAnswers: {\n      type: Array,\n      computed: \"_computeDisplayedAnswers(answers, randomize)\",\n      notify: true\n    },\n    /**\n     * Correct answer text to display\n     */\n    correctText: {\n      type: String,\n      value: \"Great job!\"\n    },\n    /**\n     * Incorrect answer text to display\n     */\n    incorrectText: {\n      type: String,\n      value: \"Better luck next time!\"\n    },\n    /**\n     * Randomize the display of the answers\n     */\n    randomize: {\n      type: Boolean,\n      value: false,\n      reflectToAttribute: true\n    },\n    /**\n     * flag to hide buttons\n     */\n    hideButtons: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  /**\n   * Notice an answer has changed and update the DOM.\n   */\n  _valueChanged: function(e) {\n    for (var i in e.base) {\n      for (var j in e.base[i]) {\n        this.notifyPath(\"displayedAnswers.\" + i + \".\" + j);\n      }\n    }\n  },\n\n  /**\n   * Reset user answers and shuffle the board again.\n   */\n  _resetAnswers: function(e) {\n    this.$.toast.hide();\n    // loop and force all answers to false\n    for (var i in this.displayedAnswers) {\n      if (this.displayedAnswers[i].userGuess) {\n        this.displayedAnswers[i].userGuess = false;\n      }\n    }\n    setTimeout(() => {\n      const answers = this.answers;\n      this.set(\"answers\", []);\n      this.set(\"answers\", answers);\n    }, 100);\n  },\n\n  /**\n   * Return if the current answers are correct\n   */\n  checkAnswers: function() {\n    let gotRight = true;\n    // see that they got them all right\n    for (var i in this.displayedAnswers) {\n      if (\n        gotRight != false &&\n        this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = true;\n      } else if (\n        this.displayedAnswers[i].correct &&\n        !this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      } else if (\n        !this.displayedAnswers[i].correct &&\n        this.displayedAnswers[i].userGuess\n      ) {\n        gotRight = false;\n      }\n    }\n    return gotRight;\n  },\n\n  /**\n   * Verify the answers of the user based on their saying\n   * that they want to see how they did.\n   */\n  _verifyAnswers: function(e) {\n    let gotRight = this.checkAnswers();\n    // see if they got this correct based on their answers\n    if (gotRight) {\n      this.$.toast.hide();\n      this.__toastColor = \"green darken-4\";\n      this.__toastIcon = \"thumb-up\";\n      this.__toastText = this.correctText;\n      this.$.toast.show();\n    } else {\n      this.$.toast.hide();\n      this.__toastColor = \"red darken-4\";\n      this.__toastIcon = \"thumb-down\";\n      this.__toastText = this.incorrectText;\n      this.$.toast.show();\n    }\n  },\n\n  /**\n   * Figure out the order of the answers which will be displayed\n   */\n  _computeDisplayedAnswers: function(answers, randomize) {\n    if (\n      typeof answers !== typeof undefined &&\n      answers != null &&\n      answers.length > 0 &&\n      randomize\n    ) {\n      let random = answers;\n      var currentIndex = random.length,\n        temporaryValue,\n        randomIndex;\n      // While there remain elements to shuffle...\n      while (0 !== currentIndex) {\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        // And swap it with the current element.\n        temporaryValue = random[currentIndex];\n        random[currentIndex] = random[randomIndex];\n        random[randomIndex] = temporaryValue;\n      }\n      // @todo apply a random sort to the answers array\n      return random;\n    } else {\n      return answers;\n    }\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    this.$.toast.fitInto = this;\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Multiple choice\",\n        description: \"Multiple choice self check\",\n        icon: \"icons:list\",\n        color: \"purple\",\n        groups: [\"Instructional\"],\n        handles: [],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\",\n            icon: \"icons:help\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"hideTitle\",\n            title: \"Hide title\",\n            description: \"Whether or not to display the title\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"question\",\n            title: \"Question\",\n            description: \"Question for users to respond to.\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"randomize\",\n            title: \"Randomize\",\n            description: \"Randomize the answers dynamically\",\n            inputMethod: \"boolean\"\n          },\n          {\n            property: \"answers\",\n            title: \"Answer set\",\n            description: \"Answers in a multiple choice\",\n            inputMethod: \"array\",\n            properties: [\n              {\n                property: \"correct\",\n                title: \"Correct\",\n                description: \"If this is correct or not\",\n                inputMethod: \"boolean\"\n              },\n              {\n                property: \"label\",\n                title: \"Answer\",\n                description: \"Possible answer to the question\",\n                inputMethod: \"textfield\",\n                required: true\n              }\n            ]\n          },\n          {\n            property: \"correctText\",\n            title: \"Correct feedback\",\n            description: \"Feedback when they get it right\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"incorrectText\",\n            title: \"Incorrect feedback\",\n            description: \"Feedback when they get it wrong\",\n            inputMethod: \"textfield\"\n          }\n        ],\n        advanced: [\n          {\n            property: \"checkLabel\",\n            title: \"Check answers label\",\n            description: \"Label for getting solution feedback\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"resetLabel\",\n            title: \"Reset label\",\n            description: \"label for the reset button\",\n            inputMethod: \"textfield\"\n          }\n        ]\n      },\n      saveOptions: {\n        unsetAttributes: [\"displayed-answers\"]\n      }\n    };\n    this.setHaxProperties(props);\n  }\n});\nexport { MultipleChoice };\n"],"names":["MultipleChoice","Polymer","_template","html","is","hostAttributes","typeof","behaviors","HAXBehaviors","PropertiesBehaviors","MaterializeCSSBehaviors","ColorBehaviors","SchemaBehaviors","Schema","observers","properties","title","type","String","value","disabled","Boolean","checkLabel","resetLabel","relatedResource","hideTitle","question","answers","Array","notify","displayedAnswers","computed","correctText","incorrectText","randomize","reflectToAttribute","hideButtons","_valueChanged","e","i","base","j","notifyPath","_resetAnswers","$","toast","hide","this","userGuess","setTimeout","_this","set","checkAnswers","gotRight","correct","_verifyAnswers","__toastColor","__toastIcon","__toastText","show","_computeDisplayedAnswers","_typeof","length","temporaryValue","randomIndex","random","currentIndex","Math","floor","attached","fitInto","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","meta","author","settings","quick","property","inputMethod","configure","required","advanced","saveOptions","unsetAttributes"],"mappings":"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"}