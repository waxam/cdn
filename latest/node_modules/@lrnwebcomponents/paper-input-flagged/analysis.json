{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "paper-input-flagged.js",
      "properties": [
        {
          "name": "focused",
          "type": "boolean | null | undefined",
          "description": "If true, the element currently has focus.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/iron-behaviors/iron-control-state.js",
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "IronControlState"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 43
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_oldTabIndex",
          "type": "(?string | undefined)",
          "description": "Value of the `tabindex` attribute before `disabled` was activated.\n`null` means the attribute was not present.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-behaviors/iron-control-state.js",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 49,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "IronControlState"
        },
        {
          "name": "_boundFocusBlurHandler",
          "type": "Function | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-behaviors/iron-control-state.js",
            "start": {
              "line": 51,
              "column": 4
            },
            "end": {
              "line": 56,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "IronControlState"
        },
        {
          "name": "keyEventTarget",
          "type": "?EventTarget",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 273,
              "column": 4
            },
            "end": {
              "line": 278,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "stopKeyboardEventPropagation",
          "type": "boolean | null | undefined",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 284,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 63
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_boundKeyHandlers",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 286,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]",
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_imperativeKeyBindings",
          "type": "Object | null | undefined",
          "description": "own properties of everything on the \"prototype\".",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 295,
              "column": 4
            },
            "end": {
              "line": 300,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{}",
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "keyBindings",
          "type": "!Object",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 310,
              "column": 2
            },
            "end": {
              "line": 310,
              "column": 55
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "value",
          "type": "string | null | undefined",
          "description": "value",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "invalid",
          "type": "boolean | null | undefined",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 56
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "allowedPattern",
          "type": "string | null | undefined",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 34
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "type",
          "type": "string | null | undefined",
          "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "list",
          "type": "string | null | undefined",
          "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "pattern",
          "type": "string | null | undefined",
          "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "required",
          "type": "boolean | null | undefined",
          "description": "Set to true to mark the input as required. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `required` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 43
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "errorMessage",
          "type": "string | null | undefined",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "charCounter",
          "type": "boolean | null | undefined",
          "description": "Set to true to show a character counter.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 46
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "noLabelFloat",
          "type": "boolean | null | undefined",
          "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "alwaysFloatLabel",
          "type": "boolean | null | undefined",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 51
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autoValidate",
          "type": "boolean | null | undefined",
          "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "validator",
          "type": "string | null | undefined",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autocomplete",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 46
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"off\"",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autofocus",
          "type": "boolean | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 173,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 61
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_autofocusChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "inputmode",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "minlength",
          "type": "number | null | undefined",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 188,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "maxlength",
          "type": "number | null | undefined",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "min",
          "type": "string | null | undefined",
          "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 203,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "max",
          "type": "string | null | undefined",
          "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "step",
          "type": "string | null | undefined",
          "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 218,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "placeholder",
          "type": "string | null | undefined",
          "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 234,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "readonly",
          "type": "boolean | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 241,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 43
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "size",
          "type": "number | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autocapitalize",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 256,
              "column": 49
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"none\"",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autocorrect",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 45
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"off\"",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autosave",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 270,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "results",
          "type": "number | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 277,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "accept",
          "type": "string | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 284,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "multiple",
          "type": "boolean | null | undefined",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 291,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_ariaDescribedBy",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 294,
              "column": 4
            },
            "end": {
              "line": 294,
              "column": 47
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_ariaLabelledBy",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 297,
              "column": 4
            },
            "end": {
              "line": 297,
              "column": 46
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_inputId",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 300,
              "column": 4
            },
            "end": {
              "line": 300,
              "column": 39
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\"",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "hostAttributes",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 313,
              "column": 2
            },
            "end": {
              "line": 313,
              "column": 31
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "inputElement",
          "type": "!HTMLElement",
          "description": "Returns a reference to the input element.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 319,
              "column": 2
            },
            "end": {
              "line": 331,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_focusableElement",
          "type": "!HTMLElement",
          "description": "Returns a reference to the focusable element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 337,
              "column": 2
            },
            "end": {
              "line": 339,
              "column": 3
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "icon",
          "type": "string | null | undefined",
          "description": "Icon based on status",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "status",
          "type": "string | null | undefined",
          "description": "Status based on test for flagged words",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "flaggedInput",
          "type": "Array | null | undefined",
          "description": "Input to trap and offer feedback about.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "defaultValue": "[{\"match\":null,\"message\":\"Alt data is required for everything except decoration images.\",\"status\":\"notice\"},{\"match\":\"image\",\"message\":\"Screenreaders will say the word image, don't put it in the descriptive text\",\"status\":\"error\"},{\"match\":\"photo\",\"message\":\"Screenreaders will say the word image, don't put photo in the descriptive text\",\"status\":\"error\"},{\"match\":\"picture\",\"message\":\"Screenreaders will say the word image, don't put picture in the descriptive text\",\"status\":\"error\"},{\"match\":3,\"message\":\"Description not effective enough. This should be at least a sentance about what the image is.\",\"status\":\"error\"},{\"match\":10,\"message\":\"Make sure your alt text is descriptive enough for those that can't see the media.\",\"status\":\"warning\"}]"
        },
        {
          "name": "inputSuccess",
          "type": "Object | null | undefined",
          "description": "Passed tests / success data.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "defaultValue": "{\"message\":\"You passed our simple accessibility checks.\",\"status\":\"info\"}"
        }
      ],
      "methods": [
        {
          "name": "ready",
          "description": "Created life cycle",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 160,
              "column": 2
            },
            "end": {
              "line": 163,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_focusBlurHandler",
          "description": "Forward focus to inputElement. Overriden from IronControlState.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 394,
              "column": 2
            },
            "end": {
              "line": 401,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-behaviors/iron-control-state.js",
            "start": {
              "line": 75,
              "column": 2
            },
            "end": {
              "line": 94,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "disabled"
            },
            {
              "name": "old"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronControlState"
        },
        {
          "name": "_changedControlState",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-behaviors/iron-control-state.js",
            "start": {
              "line": 96,
              "column": 2
            },
            "end": {
              "line": 101,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronControlState"
        },
        {
          "name": "registered",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 313,
              "column": 2
            },
            "end": {
              "line": 315,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "attached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 348,
              "column": 2
            },
            "end": {
              "line": 358,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "detached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 321,
              "column": 2
            },
            "end": {
              "line": 323,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "addOwnKeyBinding",
          "description": "Can be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 333,
              "column": 2
            },
            "end": {
              "line": 337,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString",
              "type": "string"
            },
            {
              "name": "handlerName",
              "type": "string"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "removeOwnKeyBindings",
          "description": "When called, will remove all imperatively-added key bindings.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 346,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "keyboardEventMatchesKeys",
          "description": "Returns true if a keyboard event matches `eventString`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 355,
              "column": 2
            },
            "end": {
              "line": 363,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "KeyboardEvent"
            },
            {
              "name": "eventString",
              "type": "string"
            }
          ],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_collectKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 365,
              "column": 2
            },
            "end": {
              "line": 375,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_prepKeyBindings",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 377,
              "column": 2
            },
            "end": {
              "line": 399,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_addKeyBinding",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 401,
              "column": 2
            },
            "end": {
              "line": 408,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "eventString"
            },
            {
              "name": "handlerName"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_resetKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 416,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_listenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 418,
              "column": 2
            },
            "end": {
              "line": 431,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_unlistenKeyEventListeners",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 433,
              "column": 2
            },
            "end": {
              "line": 448,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_onKeyBindingEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 450,
              "column": 2
            },
            "end": {
              "line": 471,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyBindings"
            },
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "_triggerKeyHandler",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 473,
              "column": 2
            },
            "end": {
              "line": 482,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "keyCombo"
            },
            {
              "name": "handlerName"
            },
            {
              "name": "keyboardEvent"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "created",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 341,
              "column": 2
            },
            "end": {
              "line": 346,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_appendStringWithSpace",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 360,
              "column": 2
            },
            "end": {
              "line": 367,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            },
            {
              "name": "more"
            }
          ],
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_onAddonAttached",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 369,
              "column": 2
            },
            "end": {
              "line": 380,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "validate",
          "description": "Validates the input element and sets an error style if needed.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 387,
              "column": 2
            },
            "end": {
              "line": 389,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "boolean"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_onShiftTabDown",
          "description": "Handler that is called when a shift+tab keypress is detected by the menu.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 408,
              "column": 2
            },
            "end": {
              "line": 416,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "CustomEvent",
              "description": "A key combination event."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_handleAutoValidate",
          "description": "If `autoValidate` is true, then validates the element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 421,
              "column": 2
            },
            "end": {
              "line": 424,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "updateValueAndPreserveCaret",
          "description": "Restores the cursor to its original position after updating the value.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 430,
              "column": 2
            },
            "end": {
              "line": 446,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newValue",
              "type": "string",
              "description": "The value that should be saved."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_computeAlwaysFloatLabel",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 448,
              "column": 2
            },
            "end": {
              "line": 450,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "alwaysFloatLabel"
            },
            {
              "name": "placeholder"
            }
          ],
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_updateAriaLabelledBy",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 452,
              "column": 2
            },
            "end": {
              "line": 466,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_generateInputId",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 468,
              "column": 2
            },
            "end": {
              "line": 472,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_onChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 474,
              "column": 2
            },
            "end": {
              "line": 485,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "_autofocusChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 487,
              "column": 2
            },
            "end": {
              "line": 511,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "testStatus",
          "description": "testStatus based on current input",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 168,
              "column": 2
            },
            "end": {
              "line": 190,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "test"
            },
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_iconFromStatus",
          "description": "Compute icon from status",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 195,
              "column": 2
            },
            "end": {
              "line": 211,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "status"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 32
        },
        "end": {
          "line": 212,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "PaperInputFlagged",
      "attributes": [
        {
          "name": "focused",
          "description": "If true, the element currently has focus.",
          "sourceRange": {
            "file": "../@polymer/iron-behaviors/iron-control-state.js",
            "start": {
              "line": 25,
              "column": 4
            },
            "end": {
              "line": 31,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IronControlState"
        },
        {
          "name": "disabled",
          "description": "Set to true to disable this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nboth the `<paper-input-container>`'s and the input's `disabled` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 66,
              "column": 4
            },
            "end": {
              "line": 66,
              "column": 43
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "key-event-target",
          "description": "The EventTarget that will be firing relevant KeyboardEvents. Set it to\n`null` to disable the listeners.",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 273,
              "column": 4
            },
            "end": {
              "line": 278,
              "column": 5
            }
          },
          "metadata": {},
          "type": "?EventTarget",
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "stop-keyboard-event-propagation",
          "description": "If true, this property will cause the implementing element to\nautomatically stop propagation on any handled KeyboardEvents.",
          "sourceRange": {
            "file": "../@polymer/iron-a11y-keys-behavior/iron-a11y-keys-behavior.js",
            "start": {
              "line": 284,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 63
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "IronA11yKeysBehavior"
        },
        {
          "name": "label",
          "description": "The label for this input. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\n`<label>`'s content and `hidden` property, e.g.\n`<label hidden$=\"[[!label]]\">[[label]]</label>` in your `template`",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 50,
              "column": 25
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "value",
          "description": "value",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 4
            },
            "end": {
              "line": 100,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "invalid",
          "description": "Returns true if the value is invalid. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to both the\n`<paper-input-container>`'s and the input's `invalid` property.\n\nIf `autoValidate` is true, the `invalid` attribute is managed\nautomatically, which can clobber attempts to manage it manually.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 76,
              "column": 4
            },
            "end": {
              "line": 76,
              "column": 56
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "allowed-pattern",
          "description": "Set this to specify the pattern allowed by `preventInvalidInput`. If\nyou're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `allowedPattern`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 84,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 34
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "type",
          "description": "The type of the input. The supported types are the\n[native input's\ntypes](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#Form_<input>_types).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the (Polymer 1) `<input is=\"iron-input\">`'s or\n(Polymer 2)\n`<iron-input>`'s `type` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 95,
              "column": 4
            },
            "end": {
              "line": 95,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "list",
          "description": "The datalist of the input (if any). This should match the id of an\nexisting `<datalist>`. If you're using PaperInputBehavior to implement\nyour own paper-input-like element, bind this to the `<input\nis=\"iron-input\">`'s `list` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 103,
              "column": 4
            },
            "end": {
              "line": 103,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "pattern",
          "description": "A pattern to validate the `input` with. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `pattern` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 110,
              "column": 4
            },
            "end": {
              "line": 110,
              "column": 27
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "required",
          "description": "Set to true to mark the input as required. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<input is=\"iron-input\">`'s `required` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 117,
              "column": 4
            },
            "end": {
              "line": 117,
              "column": 43
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "error-message",
          "description": "The error message to display when the input is invalid. If you're using\nPaperInputBehavior to implement your own paper-input-like element,\nbind this to the `<paper-input-error>`'s content, if using.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 124,
              "column": 4
            },
            "end": {
              "line": 124,
              "column": 32
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "char-counter",
          "description": "Set to true to show a character counter.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 129,
              "column": 4
            },
            "end": {
              "line": 129,
              "column": 46
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "no-label-float",
          "description": "Set to true to disable the floating label. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `noLabelFloat` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 136,
              "column": 4
            },
            "end": {
              "line": 136,
              "column": 47
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "always-float-label",
          "description": "Set to true to always float the label. If you're using PaperInputBehavior\nto implement your own paper-input-like element, bind this to the\n`<paper-input-container>`'s `alwaysFloatLabel` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 143,
              "column": 4
            },
            "end": {
              "line": 143,
              "column": 51
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "auto-validate",
          "description": "Set to true to auto-validate the input value. If you're using\nPaperInputBehavior to implement your own paper-input-like element, bind\nthis to the `<paper-input-container>`'s `autoValidate` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 150,
              "column": 4
            },
            "end": {
              "line": 150,
              "column": 47
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "validator",
          "description": "Name of the validator to use. If you're using PaperInputBehavior to\nimplement your own paper-input-like element, bind this to\nthe `<input is=\"iron-input\">`'s `validator` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 157,
              "column": 4
            },
            "end": {
              "line": 157,
              "column": 29
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autocomplete",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocomplete`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 166,
              "column": 4
            },
            "end": {
              "line": 166,
              "column": 46
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autofocus",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autofocus`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 173,
              "column": 4
            },
            "end": {
              "line": 173,
              "column": 61
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "inputmode",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `inputmode`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 180,
              "column": 4
            },
            "end": {
              "line": 180,
              "column": 29
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "minlength",
          "description": "The minimum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `minlength`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 188,
              "column": 4
            },
            "end": {
              "line": 188,
              "column": 29
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "maxlength",
          "description": "The maximum length of the input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `maxlength`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 196,
              "column": 4
            },
            "end": {
              "line": 196,
              "column": 29
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "min",
          "description": "The minimum (numeric or date-time) input value.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `min` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 203,
              "column": 4
            },
            "end": {
              "line": 203,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "max",
          "description": "The maximum (numeric or date-time) input value.\nCan be a String (e.g. `\"2000-01-01\"`) or a Number (e.g. `2`).\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `max` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 211,
              "column": 4
            },
            "end": {
              "line": 211,
              "column": 23
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "step",
          "description": "Limits the numeric or date-time increments.\nIf you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `step` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 218,
              "column": 4
            },
            "end": {
              "line": 218,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "name",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `name` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 224,
              "column": 4
            },
            "end": {
              "line": 224,
              "column": 24
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "placeholder",
          "description": "A placeholder string in addition to the label. If this is set, the label\nwill always float.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 230,
              "column": 4
            },
            "end": {
              "line": 234,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "readonly",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `readonly`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 241,
              "column": 4
            },
            "end": {
              "line": 241,
              "column": 43
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "size",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `size` property.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 247,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 24
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autocapitalize",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocapitalize`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 256,
              "column": 49
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autocorrect",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autocorrect`\nproperty.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 263,
              "column": 45
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "autosave",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `autosave`\nproperty, used with type=search.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 270,
              "column": 4
            },
            "end": {
              "line": 270,
              "column": 28
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "results",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `results` property,\nused with type=search.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 277,
              "column": 4
            },
            "end": {
              "line": 277,
              "column": 27
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "accept",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the `<input is=\"iron-input\">`'s `accept` property,\nused with type=file.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 284,
              "column": 4
            },
            "end": {
              "line": 284,
              "column": 26
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "multiple",
          "description": "If you're using PaperInputBehavior to implement your own paper-input-like\nelement, bind this to the`<input is=\"iron-input\">`'s `multiple` property,\nused with type=file.",
          "sourceRange": {
            "file": "../@polymer/paper-input/paper-input-behavior.js",
            "start": {
              "line": 291,
              "column": 4
            },
            "end": {
              "line": 291,
              "column": 29
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "name": "icon",
          "description": "Icon based on status",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 4
            },
            "end": {
              "line": 84,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "status",
          "description": "Status based on test for flagged words",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 4
            },
            "end": {
              "line": 92,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "flagged-input",
          "description": "Input to trap and offer feedback about.",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 4
            },
            "end": {
              "line": 144,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "input-success",
          "description": "Passed tests / success data.",
          "sourceRange": {
            "start": {
              "line": 148,
              "column": 4
            },
            "end": {
              "line": 154,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "focused-changed",
          "description": "Fired when the `focused` property changes.",
          "metadata": {},
          "inheritedFrom": "IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "disabled-changed",
          "description": "Fired when the `disabled` property changes.",
          "metadata": {},
          "inheritedFrom": "IronControlState"
        },
        {
          "type": "CustomEvent",
          "name": "change",
          "description": "Fired when the input changes due to user interaction.",
          "metadata": {},
          "inheritedFrom": "PaperInputBehavior"
        },
        {
          "type": "CustomEvent",
          "name": "value-changed",
          "description": "Fired when the `value` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "invalid-changed",
          "description": "Fired when the `invalid` property changes.",
          "metadata": {},
          "inheritedFrom": "PaperInputBehavior"
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "paper-input-flagged"
    }
  ]
}
