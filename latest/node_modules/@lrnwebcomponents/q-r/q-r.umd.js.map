{"version":3,"file":"q-r.umd.js","sources":["q-r.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { pathFromUrl } from \"@polymer/polymer/lib/utils/resolve-url.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/es-global-bridge/es-global-bridge.js\";\n\n/**\n * `q-r`\n * `Polymer wrapper for a qr code.`\n *\n * @demo demo/index.html\n */\nlet QR = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n      #link {\n        visibility: hidden;\n        opacity: 0;\n      }\n    </style>\n    <qr-code\n      id=\"qr\"\n      data$=\"[[data]]\"\n      modulesize$=\"[[modulesize]]\"\n      margin$=\"[[margin]]\"\n      format$=\"[[format]]\"\n    ></qr-code>\n    <a href$=\"[[data]]\" id=\"link\">[[title]]</a>\n  `,\n\n  is: \"q-r\",\n  behaviors: [HAXBehaviors.PropertiesBehaviors],\n\n  properties: {\n    /**\n     * Data to code via QR code\n     */\n    data: {\n      type: String\n    },\n    /**\n     * Alternate title for the data\n     */\n    title: {\n      type: String\n    },\n    /**\n     * module size of the square\n     */\n    modulesize: {\n      type: Number,\n      value: 4\n    },\n    /**\n     * Margin on the square\n     */\n    margin: {\n      type: Number,\n      value: 2\n    },\n    /**\n     * format to output\n     */\n    format: {\n      type: String,\n      value: \"png\"\n    }\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"QR Code\",\n        description: \"A code to scan from a smartphone.\",\n        icon: \"hardware:developer-board\",\n        color: \"grey\",\n        groups: [\"QR\"],\n        handles: [\n          {\n            type: \"video\",\n            source: \"data\",\n            title: \"title\"\n          },\n          {\n            type: \"image\",\n            source: \"data\",\n            title: \"title\"\n          },\n          {\n            type: \"link\",\n            source: \"data\",\n            title: \"title\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"data\",\n            title: \"QR data\",\n            description: \"Source of the data for the QR code.\",\n            inputMethod: \"textfield\",\n            icon: \"hardware:developer-board\"\n          },\n          {\n            property: \"title\",\n            title: \"Alternate title\",\n            description:\n              \"An alternate title to go to the source of the QR code.\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"modulesize\",\n            title: \"Size\",\n            description: \"Size of the QR code\",\n            inputMethod: \"textfield\",\n            icon: \"image:photo-size-select-small\"\n          },\n          {\n            property: \"margin\",\n            title: \"Margin\",\n            description: \"Wrapper to the code.\",\n            inputMethod: \"textfield\",\n            icon: \"icons:settings-overscan\"\n          },\n          {\n            property: \"format\",\n            title: \"Output format\",\n            description: \"Format to put it out.\",\n            inputMethod: \"select\",\n            options: {\n              png: \"PNG\",\n              html: \"HTML\",\n              svg: \"SVG\"\n            },\n            icon: \"editor:bubble-chart\"\n          }\n        ],\n        configure: [\n          {\n            property: \"data\",\n            title: \"QR data\",\n            description: \"Source of the data for the QR code.\",\n            inputMethod: \"textfield\",\n            icon: \"hardware:developer-board\"\n          },\n          {\n            property: \"title\",\n            title: \"Alternate title\",\n            description:\n              \"An alternate title to go to the source of the QR code.\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"modulesize\",\n            title: \"Size\",\n            description: \"Size of the QR code\",\n            inputMethod: \"number\",\n            icon: \"image:photo-size-select-small\"\n          },\n          {\n            property: \"margin\",\n            title: \"Margin\",\n            description: \"Wrapper to the code.\",\n            inputMethod: \"number\",\n            icon: \"icons:settings-overscan\"\n          },\n          {\n            property: \"format\",\n            title: \"Output format\",\n            description: \"Format to put it out.\",\n            inputMethod: \"select\",\n            options: {\n              png: \"PNG\",\n              html: \"HTML\",\n              svg: \"SVG\"\n            },\n            icon: \"editor:bubble-chart\"\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n  }\n});\n\nclass QRCodeElement extends HTMLElement {\n  constructor() {\n    super();\n    // method bindings\n    this._defineProperty = this._defineProperty.bind(this);\n    // Shadow DOM\n    this.attachShadow({ mode: \"open\" });\n    // Define Properties\n    Object.keys(QRCodeElement.defaultAttributes).map(this._defineProperty);\n    const name = \"qr\";\n    const basePath = pathFromUrl(import.meta.url);\n    const location = `${basePath}lib/qr.js`;\n    window.addEventListener(\n      `es-bridge-${name}-loaded`,\n      this._qrLoaded.bind(this)\n    );\n    window.ESGlobalBridge.requestAvailability();\n    window.ESGlobalBridge.instance.load(name, location);\n  }\n  _qrLoaded() {\n    // q-r library has loaded, now try to generate\n    this.generate();\n  }\n  static get defaultAttributes() {\n    return {\n      data: null,\n      format: \"png\",\n      modulesize: 5,\n      margin: 4\n    };\n  }\n  static get observedAttributes() {\n    return Object.keys(QRCodeElement.defaultAttributes);\n  }\n  // LifeCycle Callbacks\n  //\n  attributeChangedCallback(attributeName, oldValue, newValue) {\n    let fn = this[attributeName + \"Changed\"];\n    if (fn && typeof fn === \"function\") {\n      fn.call(this, oldValue, newValue);\n    }\n    if (window.ESGlobalBridge.imports[\"qr\"]) {\n      this.generate();\n    }\n  }\n  // Methods\n  //\n  _defineProperty(attributeName) {\n    Object.defineProperty(this, attributeName, {\n      get: () => {\n        let value = this.getAttribute(attributeName);\n        return value === null\n          ? QRCodeElement.defaultAttributes[attributeName]\n          : value;\n      },\n      set: value => {\n        this.setAttribute(attributeName, value);\n      }\n    });\n  }\n  getOptions() {\n    let { modulesize, margin } = this;\n    return {\n      modulesize: modulesize !== null ? parseInt(modulesize) : modulesize,\n      margin: margin !== null ? parseInt(margin) : margin\n    };\n  }\n  generate() {\n    if (this.data !== null) {\n      if (this.format === \"png\") {\n        this.generatePNG();\n      } else if (this.format === \"html\") {\n        this.generateHTML();\n      } else if (this.format === \"svg\") {\n        this.generateSVG();\n      } else {\n        this.shadowRoot.innerHTML =\n          \"<div>qr-code: \" + this.format + \" not supported!</div>\";\n      }\n    } else {\n      this.shadowRoot.innerHTML = \"<div>qr-code: no data!</div>\";\n    }\n  }\n  generatePNG() {\n    try {\n      let img = document.createElement(\"img\");\n      img.src = window.QRCode.generatePNG(this.data, this.getOptions());\n      this.clear();\n      this.shadowRoot.appendChild(img);\n    } catch (e) {\n      this.shadowRoot.innerHTML = \"<div>qr-code: no canvas support!</div>\";\n    }\n  }\n  generateHTML() {\n    let div = window.QRCode.generateHTML(this.data, this.getOptions());\n    this.clear();\n    this.shadowRoot.appendChild(div);\n  }\n  generateSVG() {\n    let div = window.QRCode.generateSVG(this.data, this.getOptions());\n    this.clear();\n    this.shadowRoot.appendChild(div);\n  }\n  clear() {\n    while (this.shadowRoot.lastChild) {\n      this.shadowRoot.removeChild(this.shadowRoot.lastChild);\n    }\n  }\n}\nwindow.customElements.define(\"qr-code\", QRCodeElement);\nexport { QRCodeElement };\nexport { QR };\n"],"names":["QR","Polymer","_template","html","is","behaviors","HAXBehaviors","PropertiesBehaviors","properties","data","type","String","title","modulesize","Number","value","margin","format","attached","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","source","meta","author","settings","quick","property","inputMethod","options","png","svg","configure","advanced","QRCodeElement","_defineProperty","_this","bind","attachShadow","mode","Object","keys","defaultAttributes","map","basePath","pathFromUrl","location","window","addEventListener","_qrLoaded","ESGlobalBridge","requestAvailability","instance","load","HTMLElement","generate","attributeName","oldValue","newValue","fn","this","call","imports","defineProperty","get","_this2","getAttribute","set","setAttribute","parseInt","generatePNG","generateHTML","generateSVG","shadowRoot","innerHTML","img","document","createElement","src","QRCode","getOptions","clear","appendChild","e","div","lastChild","removeChild","customElements","define"],"mappings":"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"}