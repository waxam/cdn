{"version":3,"file":"simple-drawer.umd.js","sources":["simple-drawer.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@lrnwebcomponents/simple-colors/simple-colors.js\";\nimport \"@polymer/app-layout/app-drawer/app-drawer.js\";\nimport \"@polymer/neon-animation/neon-animation.js\";\nimport \"@polymer/paper-button/paper-button.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/iron-icon/iron-icon.js\";\n// register globally so we can make sure there is only one\nwindow.simpleDrawer = window.simpleDrawer || {};\n// request if this exists. This helps invoke the element existing in the dom\n// as well as that there is only one of them. That way we can ensure everything\n// is rendered through the same drawer\nwindow.simpleDrawer.requestAvailability = () => {\n  if (!window.simpleDrawer.instance) {\n    window.simpleDrawer.instance = document.createElement(\"simple-drawer\");\n    document.body.appendChild(window.simpleDrawer.instance);\n  }\n  return window.simpleDrawer.instance;\n};\n/**\n * `simple-drawer`\n * `a singleton drawer element`\n *\n * @microcopy - language worth noting:\n *  -\n *\n * @customElement\n * @polymer\n * @demo demo/index.html\n */\nclass SimpleDrawer extends PolymerElement {\n  \n  // render function\n  static get template() {\n    return html`\n<style>:host {\n  display: block;\n  z-index: 1000;\n}\n:host([hidden]) {\n  display: none;\n}\n\napp-drawer {\n  --app-drawer-width: var(--simple-drawer-width, 256px);\n  --app-drawer-content-container: {\n    padding: 0;\n    overflow-y: scroll;\n    position: fixed;\n    color: var(--simple-drawer-color, #222222);\n    background-color: var(--simple-drawer-background-color, #FFFFFF);\n  }\n}\n:host ::slotted(*) {\n  font-size: 14px;\n  @apply --simple-drawer-content;\n}\n\n.content {\n  text-align: left;\n  padding: 8px 24px;\n  @apply --simple-drawer-content-container;\n}\n\n.top ::slotted(*) {\n  font-size: 24px;\n  margin: 0;\n  padding: 0 15px;\n  height: 40px;\n  line-height: 48px;\n}\n\n#close {\n  position: absolute;\n  right: 8px;\n  top: 8px;\n  padding: 4px;\n  margin: 0;\n  text-transform: none;\n  float: right;\n  font-size: 12px;\n  color: var(--simple-drawer-header-color, #ffffff);\n  background-color: transparent;\n  min-width: unset;\n}\n\n#close iron-icon {\n  display: inline-block;\n  width: 16px;\n  height: 16px;\n  margin-right: 2px;\n}\n\n.top {\n  font-size: 24px;\n  margin: 0 0 8px 0;\n  padding: 0 16px;\n  height: 40px;\n  line-height: 48px;\n  display: flex;\n  text-align: left;\n  justify-content: space-between;\n  background-color: var(--simple-drawer-header-background, #20427b);\n  color: var(--simple-drawer-header-color, #ffffff);\n  @apply --simple-drawer-header;\n}\n\n.top h2 {\n  flex: auto;\n  color: var(--simple-drawer-header-color, #ffffff);\n  font-size: 24px;\n  padding: 0;\n  line-height: 32px;\n  margin: 8px;\n  @apply --simple-drawer-heading;\n}</style>\n<style is=\"custom-style\" include=\"simple-colors\"></style>\n<app-drawer tabindex=\"0\" id=\"drawer\" opened=\"{{opened}}\" align=\"[[align]]\" role=\"dialog\">\n  <div class=\"wrapper\">\n    <div class=\"top\">\n      <h2 hidden$=\"[[!title]]\">[[title]]</h2>\n      <slot name=\"header\"></slot>\n    </div>\n    <div class=\"content\">\n      <slot name=\"content\"></slot>\n    </div>\n    <paper-button id=\"close\" on-tap=\"close\">\n      <iron-icon icon=\"[[closeIcon]]\"></iron-icon> [[closeLabel]]\n    </paper-button>\n  </div>\n</app-drawer>`;\n  }\n\n  // properties available to the custom element for data binding\n  static get properties() {\n    return {\n  /**\n   * heading / label of the modal\n   */\n  \"title\": {\n    \"name\": \"title\",\n    \"type\": String,\n    \"value\": \"\"\n  },\n  /**\n   * alignment of the drawer\n   */\n  \"align\": {\n    \"name\": \"align\",\n    \"type\": String,\n    \"value\": \"left\"\n  },\n  /**\n   * open state\n   */\n  \"opened\": {\n    \"name\": \"opened\",\n    \"type\": Boolean,\n    \"value\": false,\n    \"reflectToAttribute\": true,\n    \"observer\": \"_openedChanged\"\n  },\n  /**\n   * Close label\n   */\n  \"closeLabel\": {\n    \"name\": \"closeLabel\",\n    \"type\": String,\n    \"value\": \"Close\"\n  },\n  /**\n   * Close icon\n   */\n  \"closeIcon\": {\n    \"name\": \"closeIcon\",\n    \"type\": String,\n    \"value\": \"cancel\"\n  },\n  /**\n   * The element that invoked this. This way we can track our way back accessibly\n   */\n  \"invokedBy\": {\n    \"name\": \"invokedBy\",\n    \"type\": Object\n  }\n}\n;\n  }\n\n  /**\n   * Store the tag name to make it easier to obtain directly.\n   * @notice function name must be here for tooling to operate correctly\n   */\n  static get tag() {\n    return \"simple-drawer\";\n  }\n  /**\n   * life cycle, element is afixed to the DOM\n   */\n  connectedCallback() {\n    super.connectedCallback();\n    window.addEventListener(\"simple-drawer-hide\", this.close.bind(this));\n    window.addEventListener(\"simple-drawer-show\", this.showEvent.bind(this));\n  }\n  /**\n   * Ensure everything is visible in what's been expanded.\n   */\n  _resizeContent(e) {\n    // fake a resize event to make contents happy\n    async.microTask.run(() => {\n      window.dispatchEvent(new Event(\"resize\"));\n    });\n  }\n  /**\n   * show event call to open the drawer and display it's content\n   */\n  showEvent(e) {\n    // if we're already opened and we get told to open again....\n    // swap out the contents\n    if (this.opened) {\n      // wipe the slot of our drawer\n      while (dom(this).firstChild !== null) {\n        dom(this).removeChild(dom(this).firstChild);\n      }\n      setTimeout(() => {\n        this.show(\n          e.detail.title,\n          e.detail.elements,\n          e.detail.invokedBy,\n          e.detail.align,\n          e.detail.clone\n        );\n      }, 100);\n    } else {\n      this.show(\n        e.detail.title,\n        e.detail.elements,\n        e.detail.invokedBy,\n        e.detail.align,\n        e.detail.size,\n        e.detail.clone\n      );\n    }\n  }\n  /**\n   * Show the drawer and display the material\n   */\n  show(\n    title,\n    elements,\n    invokedBy,\n    align = \"left\",\n    size = \"256px\",\n    clone = false\n  ) {\n    this.set(\"invokedBy\", invokedBy);\n    this.title = title;\n    this.align = align;\n    this.updateStyles({ \"--simple-drawer-width\": size });\n    let element;\n    // append element areas into the appropriate slots\n    // ensuring they are set if it wasn't previously\n    let slots = [\"header\", \"content\"];\n    for (var i in slots) {\n      if (elements[slots[i]]) {\n        if (clone) {\n          element = elements[slots[i]].cloneNode(true);\n        } else {\n          element = elements[slots[i]];\n        }\n        element.setAttribute(\"slot\", slots[i]);\n        dom(this).appendChild(element);\n      }\n    }\n    // minor delay to help the above happen prior to opening\n    setTimeout(() => {\n      this.opened = true;\n      this._resizeContent();\n    }, 100);\n  }\n  /**\n   * check state and if we should clean up on close.\n   * This keeps the DOM tiddy and allows animation to happen gracefully.\n   */\n  animationEnded(e) {\n    // wipe the slot of our drawer\n    this.title = \"\";\n    while (dom(this).firstChild !== null) {\n      dom(this).removeChild(dom(this).firstChild);\n    }\n    if (this.invokedBy) {\n      async.microTask.run(() => {\n        setTimeout(() => {\n          this.invokedBy.focus();\n        }, 500);\n      });\n    }\n  }\n  /**\n   * Close the drawer and do some clean up\n   */\n  close() {\n    this.$.drawer.close();\n  }\n  // Observer opened for changes\n  _openedChanged(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined && !newValue) {\n      this.animationEnded();\n      const evt = new CustomEvent(\"simple-drawer-closed\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          opened: false,\n          invokedBy: this.invokedBy\n        }\n      });\n      this.dispatchEvent(evt);\n    } else if (newValue) {\n      const evt = new CustomEvent(\"simple-drawer-opened\", {\n        bubbles: true,\n        cancelable: true,\n        detail: {\n          opened: true,\n          invokedBy: this.invokedBy\n        }\n      });\n      this.dispatchEvent(evt);\n    }\n  }\n  /**\n   * life cycle, element is removed from the DOM\n   */\n  disconnectedCallback() {\n    super.disconnectedCallback();\n    window.removeEventListener(\"simple-drawer-hide\", this.close.bind(this));\n    window.removeEventListener(\"simple-drawer-show\", this.showEvent.bind(this));\n  }\n}\nwindow.customElements.define(SimpleDrawer.tag, SimpleDrawer);\nexport { SimpleDrawer };\n"],"names":["window","simpleDrawer","requestAvailability","instance","document","createElement","body","appendChild","SimpleDrawer","PolymerElement","html","String","Boolean","Object","addEventListener","this","close","bind","showEvent","e","async","run","dispatchEvent","Event","opened","dom","firstChild","removeChild","setTimeout","_this","show","detail","title","elements","invokedBy","align","clone","size","element","set","updateStyles","slots","i","cloneNode","setAttribute","_this2","_resizeContent","_this3","focus","$","drawer","newValue","oldValue","_typeof","evt","CustomEvent","bubbles","cancelable","animationEnded","removeEventListener","customElements","define","tag"],"mappings":"+3IAcAA,OAAOC,aAAeD,OAAOC,cAAgB,GAI7CD,OAAOC,aAAaC,oBAAsB,kBACnCF,OAAOC,aAAaE,WACvBH,OAAOC,aAAaE,SAAWC,SAASC,cAAc,iBACtDD,SAASE,KAAKC,YAAYP,OAAOC,aAAaE,WAEzCH,OAAOC,aAAaE,cAavBK,gaAAqBC,+DAIhBC,qDAqGA,OAIA,MACC,aACAC,aACC,UAKF,MACC,aACAA,aACC,eAKD,MACA,cACAC,eACC,sBACa,WACV,6BAKA,MACJ,kBACAD,aACC,mBAKE,MACH,iBACAA,aACC,oBAKE,MACH,iBACAE,2CAWD,uHAOPb,OAAOc,iBAAiB,qBAAsBC,KAAKC,MAAMC,KAAKF,OAC9Df,OAAOc,iBAAiB,qBAAsBC,KAAKG,UAAUD,KAAKF,8CAKrDI,GAEbC,YAAgBC,IAAI,WAClBrB,OAAOsB,cAAc,IAAIC,MAAM,+CAMzBJ,iBAGJJ,KAAKS,OAAQ,MAEiB,OAAzBC,MAAIV,MAAMW,YACfD,MAAIV,MAAMY,YAAYF,MAAIV,MAAMW,YAElCE,WAAW,WACTC,EAAKC,KACHX,EAAEY,OAAOC,MACTb,EAAEY,OAAOE,SACTd,EAAEY,OAAOG,UACTf,EAAEY,OAAOI,MACThB,EAAEY,OAAOK,QAEV,eAEEN,KACHX,EAAEY,OAAOC,MACTb,EAAEY,OAAOE,SACTd,EAAEY,OAAOG,UACTf,EAAEY,OAAOI,MACThB,EAAEY,OAAOM,KACTlB,EAAEY,OAAOK,oCAQbJ,EACAC,EACAC,OASII,SARJH,yDAAQ,OACRE,yDAAO,QACPD,+DAEKG,IAAI,YAAaL,QACjBF,MAAQA,OACRG,MAAQA,OACRK,aAAa,yBAA2BH,QAIzCI,EAAQ,CAAC,SAAU,eAClB,IAAIC,KAAKD,EACRR,EAASQ,EAAMC,OAEfJ,EADEF,EACQH,EAASQ,EAAMC,IAAIC,WAAU,GAE7BV,EAASQ,EAAMC,KAEnBE,aAAa,OAAQH,EAAMC,IACnCjB,MAAIV,MAAMR,YAAY+B,IAI1BV,WAAW,WACTiB,EAAKrB,QAAS,EACdqB,EAAKC,kBACJ,4CAMU3B,uBAERa,MAAQ,GACmB,OAAzBP,MAAIV,MAAMW,YACfD,MAAIV,MAAMY,YAAYF,MAAIV,MAAMW,YAE9BX,KAAKmB,WACPd,YAAgBC,IAAI,WAClBO,WAAW,WACTmB,EAAKb,UAAUc,SACd,4CAQFC,EAAEC,OAAOlC,+CAGDmC,EAAUC,oBACnBC,EAAOF,IAAkCA,GAWtC,GAAIA,EAAU,KACbG,EAAM,IAAIC,YAAY,uBAAwB,CAClDC,SAAS,EACTC,YAAY,EACZ1B,OAAQ,CACNP,QAAQ,EACRU,UAAWnB,KAAKmB,kBAGfZ,cAAcgC,QApBkC,MAChDI,qBACCJ,EAAM,IAAIC,YAAY,uBAAwB,CAClDC,SAAS,EACTC,YAAY,EACZ1B,OAAQ,CACNP,QAAQ,EACRU,UAAWnB,KAAKmB,kBAGfZ,cAAcgC,4GAkBrBtD,OAAO2D,oBAAoB,qBAAsB5C,KAAKC,MAAMC,KAAKF,OACjEf,OAAO2D,oBAAoB,qBAAsB5C,KAAKG,UAAUD,KAAKF,4CAGzEf,OAAO4D,eAAeC,OAAOrD,EAAasD,IAAKtD"}