{"version":3,"file":"image-compare-slider.umd.js","sources":["image-compare-slider.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@lrnwebcomponents/materializecss-styles/materializecss-styles.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"@polymer/iron-image/iron-image.js\";\nimport \"@polymer/paper-slider/paper-slider.js\";\n/**\n`image-compare-slider`\nLayers images over each other with a slider interface to compare them\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n -\n\n*/\nlet ImageCompareSlider = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n      }\n      :host .container {\n        position: relative;\n      }\n      :host .container > * {\n        left: 0;\n        position: absolute;\n      }\n      :host .container > div {\n        top: 0;\n        padding: 0;\n      }\n      :host #top {\n        overflow-x: hidden;\n      }\n    </style>\n    <h2>[[title]]</h2>\n    <div class=\"container\" style\\$=\"[[styles.container]]\">\n      <div id=\"bottom\">\n        <iron-image\n          src\\$=\"[[bottomSrc]]\"\n          sizing\\$=\"[[sizing]]\"\n          style\\$=\"[[styles.image]]\"\n        ></iron-image>\n      </div>\n      <div id=\"top\" style\\$=\"[[styles.top]]\">\n        <iron-image\n          src\\$=\"[[topSrc]]\"\n          sizing\\$=\"[[sizing]]\"\n          style\\$=\"[[styles.image]]\"\n        ></iron-image>\n      </div>\n    </div>\n    <paper-slider\n      id=\"slider\"\n      value=\"50\"\n      class=\"max-width-no-padding\"\n      style\\$=\"[[styles.slider]]\"\n    ></paper-slider>\n  `,\n\n  is: \"image-compare-slider\",\n  behaviors: [\n    HAXBehaviors.PropertiesBehaviors,\n    MaterializeCSSBehaviors.ColorBehaviors,\n    SchemaBehaviors.Schema\n  ],\n  observers: [\"_setStyles(width,height,sliderPercent)\"],\n\n  properties: {\n    /**\n     * Title\n     */\n    title: {\n      type: String\n    },\n    /**\n     * src for top image\n     */\n    topSrc: {\n      type: String\n    },\n    /**\n     * src for top image\n     */\n    bottomSrc: {\n      type: String\n    },\n    /**\n     * crop or contain\n     */\n    sizing: {\n      type: String,\n      value: \"contain\"\n    },\n    /**\n     * width of images\n     */\n    width: {\n      type: Number,\n      value: 400\n    },\n    /**\n     * height of images\n     */\n    height: {\n      type: Number,\n      value: 300\n    },\n    /**\n     * height of images\n     */\n    height: {\n      type: Number,\n      value: 300\n    },\n    /**\n     * percent position of slider\n     */\n    sliderPercent: {\n      type: Number,\n      value: 50\n    },\n    /**\n     * calculated styles\n     */\n    styles: {\n      type: Object,\n      value: {\n        image: \"width: 400px; height: 300px;\",\n        slider: \"width: 430px; margin: 0 -15px;\",\n        container: \"width: 400px; margin-bottom: 315px;\",\n        top: \"width: 50%;\"\n      }\n    }\n  },\n\n  ready: function() {\n    let root = this,\n      slider = this.$.slider;\n    slider.addEventListener(\"immediate-value-changed\", function(e) {\n      root.sliderPercent = slider.immediateValue;\n    });\n  },\n\n  _setStyles: function(width, height, sliderPercent) {\n    let w = this.width,\n      h = this.height,\n      sw = w + 30,\n      cmb = h + 15;\n    this.styles = {\n      image: \"width: \" + w + \"px; height: \" + h + \"px;\",\n      slider: \"width: \" + sw + \"px; margin: 0 -15px;\",\n      container: \"width: \" + w + \"px; margin-bottom: \" + cmb + \"px;\",\n      top: \"width: \" + this.sliderPercent + \"%;\"\n    };\n  },\n\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Image comparison\",\n        description:\n          \"Simple element to allow one image to swipe over top of the other.\",\n        icon: \"image:compare\",\n        color: \"orange\",\n        groups: [\"Image\", \"Media\"],\n        handles: [\n          {\n            type: \"image\",\n            source: \"bottomSrc\",\n            source2: \"topSrc\",\n            title: \"title\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        configure: [\n          {\n            property: \"title\",\n            title: \"Title\",\n            description: \"The title of the element\",\n            inputMethod: \"textfield\"\n          },\n          {\n            property: \"bottomSrc\",\n            title: \"Bottom image\",\n            description: \"The base image to swipe over\",\n            inputMethod: \"textfield\",\n            validationType: \"url\"\n          },\n          {\n            property: \"topSrc\",\n            title: \"Top image\",\n            description: \"The top image that swipes over\",\n            inputMethod: \"textfield\",\n            validationType: \"url\"\n          }\n        ],\n        advanced: []\n      }\n    };\n    this.setHaxProperties(props);\n  }\n});\nexport { ImageCompareSlider };\n"],"names":["ImageCompareSlider","Polymer","_template","html","is","behaviors","HAXBehaviors","PropertiesBehaviors","MaterializeCSSBehaviors","ColorBehaviors","SchemaBehaviors","Schema","observers","properties","title","type","String","topSrc","bottomSrc","sizing","value","width","Number","height","Object","image","slider","container","top","ready","root","this","$","addEventListener","e","sliderPercent","immediateValue","_setStyles","w","h","sw","cmb","styles","attached","setHaxProperties","canScale","canPosition","canEditSource","gizmo","description","icon","color","groups","handles","source","source2","meta","author","settings","quick","property","inputMethod","configure","validationType","advanced"],"mappings":"4lGAiBIA,EAAqBC,UAAQ,CAC/BC,UAAWC,YA6CXC,GAAI,uBACJC,UAAW,CACTC,aAAaC,oBACbC,wBAAwBC,eACxBC,gBAAgBC,QAElBC,UAAW,CAAC,0CAEZC,eAIEC,MAAO,CACLC,KAAMC,QAKRC,OAAQ,CACNF,KAAMC,QAKRE,UAAW,CACTH,KAAMC,QAKRG,OAAQ,CACNJ,KAAMC,OACNI,MAAO,WAKTC,MAAO,CACLN,KAAMO,OACNF,MAAO,KAKTG,OAAQ,CACNR,KAAMO,OACNF,MAAO,mBAKD,CACNL,KAAMO,OACNF,MAAO,0BAKM,CACbL,KAAMO,OACNF,MAAO,kBAKD,CACNL,KAAMS,OACNJ,MAAO,CACLK,MAAO,+BACPC,OAAQ,iCACRC,UAAW,sCACXC,IAAK,oBAKXC,MAAO,eACDC,EAAOC,KACTL,EAASK,KAAKC,EAAEN,OAClBA,EAAOO,iBAAiB,0BAA2B,SAASC,GAC1DJ,EAAKK,cAAgBT,EAAOU,kBAIhCC,WAAY,SAAShB,EAAOE,EAAQY,OAC9BG,EAAIP,KAAKV,MACXkB,EAAIR,KAAKR,OACTiB,EAAKF,EAAI,GACTG,EAAMF,EAAI,QACPG,OAAS,CACZjB,MAAO,UAAYa,EAAI,eAAiBC,EAAI,MAC5Cb,OAAQ,UAAYc,EAAK,uBACzBb,UAAW,UAAYW,EAAI,sBAAwBG,EAAM,MACzDb,IAAK,UAAYG,KAAKI,cAAgB,OAO1CQ,SAAU,gBA4DHC,iBA1DO,CACVC,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLlC,MAAO,mBACPmC,YACE,oEACFC,KAAM,gBACNC,MAAO,SACPC,OAAQ,CAAC,QAAS,SAClBC,QAAS,CACP,CACEtC,KAAM,QACNuC,OAAQ,YACRC,QAAS,SACTzC,MAAO,UAGX0C,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,QACV9C,MAAO,QACPmC,YAAa,2BACbY,YAAa,YACbX,KAAM,iBAGVY,UAAW,CACT,CACEF,SAAU,QACV9C,MAAO,QACPmC,YAAa,2BACbY,YAAa,aAEf,CACED,SAAU,YACV9C,MAAO,eACPmC,YAAa,+BACbY,YAAa,YACbE,eAAgB,OAElB,CACEH,SAAU,SACV9C,MAAO,YACPmC,YAAa,iCACbY,YAAa,YACbE,eAAgB,QAGpBC,SAAU"}