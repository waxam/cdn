{"version":3,"file":"wikipedia-query.umd.js","sources":["wikipedia-query.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nimport \"@lrnwebcomponents/schema-behaviors/schema-behaviors.js\";\nimport \"@lrnwebcomponents/citation-element/citation-element.js\";\n/**\n * `wikipedia-query`\n * `Query and present information from wikipedia.`\n *\n * @demo demo/index.html\n */\nlet WikipediaQuery = Polymer({\n  _template: html`\n    <custom-style>\n      <style>\n        :host {\n          display: block;\n          --wikipedia-query-body-height: 160px;\n        }\n        #result {\n          height: var(--wikipedia-query-body-height);\n          overflow: scroll;\n          border: 1px grey solid;\n          padding: 8px 16px;\n        }\n        citation-element {\n          background-color: #f8f8f8;\n          padding: 16px 8px;\n          font-size: 12px;\n        }\n      </style>\n    </custom-style>\n    <iron-ajax\n      auto\n      url$=\"https://en.wikipedia.org/w/api.php?origin=*&amp;action=query&amp;titles=[[search]]&amp;prop=extracts&amp;format=json\"\n      handle-as=\"json\"\n      on-response=\"handleResponse\"\n      debounce-duration=\"100\"\n      last-response=\"{{searchResponse}}\"\n    ></iron-ajax>\n    <h3 hidden$=\"[[!showTitle]]\">[[search]] Wikipedia article</h3>\n    <div id=\"result\" hidden$=\"[[!__rendercontent]]\"></div>\n    <citation-element\n      hidden$=\"[[!__rendercontent]]\"\n      creator=\"{Wikipedia contributors}\"\n      scope=\"sibling\"\n      license=\"by-sa\"\n      title=\"[[search]] --- {Wikipedia}{,} The Free Encyclopedia\"\n      source=\"https://en.wikipedia.org/w/index.php?title=[[search]]\"\n      date=\"[[__now]]\"\n    ></citation-element>\n  `,\n\n  is: \"wikipedia-query\",\n  behaviors: [HAXBehaviors.PropertiesBehaviors, SchemaBehaviors.Schema],\n  properties: {\n    /**\n     * ShowTitle\n     */\n    showTitle: {\n      type: Boolean,\n      value: true\n    },\n    /**\n     * Search string.\n     */\n    search: {\n      type: String,\n      value: \"Polymer (library)\"\n    },\n    /**\n     * Render the response as..\n     */\n    renderAs: {\n      type: String,\n      value: \"content\",\n      observer: \"_renderAsUpdated\"\n    },\n    /**\n     * Response to parse.\n     */\n    searchResponse: {\n      type: Object\n    }\n  },\n\n  /**\n   * attached\n   */\n  attached: function() {\n    let date = new Date(Date.now());\n    this.__now =\n      date.getDate() + \"/\" + date.getMonth() + \"/\" + date.getFullYear();\n    // Establish hax properties if they exist\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"Wikipedia article\",\n        description:\n          \"This can display a wikipedia article in context in a variety of formats.\",\n        icon: \"book\",\n        color: \"green\",\n        groups: [\"Content\", \"Creative Commons\"],\n        handles: [\n          {\n            type: \"content\",\n            title: \"search\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [\n          {\n            property: \"search\",\n            title: \"Search term\",\n            description: \"Word to search wikipedia for.\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\",\n            required: true\n          },\n          {\n            property: \"showTitle\",\n            title: \"Show title\",\n            description: \"Whether or not to render the title of the article.\",\n            inputMethod: \"boolean\",\n            icon: \"editor:title\"\n          }\n        ],\n        configure: [\n          {\n            property: \"search\",\n            title: \"Search term\",\n            description: \"Word to search wikipedia for.\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\",\n            required: true\n          }\n        ]\n      },\n      saveOptions: {\n        wipeSlot: true\n      }\n    };\n    this.setHaxProperties(props);\n  },\n\n  /**\n   * Convert renderas into a variable.\n   */\n  _renderAsUpdated: function(newValue, oldValue) {\n    if (typeof newValue !== typeof undefined) {\n      this._resetRenderMethods();\n      this[\"__render\" + newValue] = true;\n    }\n  },\n\n  /**\n   * Validate input method.\n   */\n  _validRenderMethods: function() {\n    var methods = [\"content\"];\n    return methods;\n  },\n\n  /**\n   * Reset all our meta attributes.\n   */\n  _resetRenderMethods: function() {\n    let methods = this._validRenderMethods();\n    for (var i = 0; i < methods.length; i++) {\n      this[\"__render\" + methods[i]] = false;\n    }\n  },\n\n  /**\n   * Process response from wikipedia.\n   */\n  handleResponse: function(response) {\n    // the key of pages is a number so need to look for it\n    if (typeof this.searchResponse !== typeof undefined) {\n      for (var key in this.searchResponse.query.pages) {\n        // skip anything that's prototype object\n        if (!this.searchResponse.query.pages.hasOwnProperty(key)) continue;\n        // load object response\n        var obj = this.searchResponse.query.pages[key];\n        let html = obj.extract;\n        html = html.replace(/<script[\\s\\S]*?>/gi, \"&lt;script&gt;\");\n        html = html.replace(/<\\/script>/gi, \"&lt;/script&gt;\");\n        html = html.replace(/<style[\\s\\S]*?>/gi, \"&lt;style&gt;\");\n        html = html.replace(/<\\/style>/gi, \"&lt;/style&gt;\");\n        // need to innerHTML this or it won't set\n        this.$.result.innerHTML = html;\n      }\n    }\n  }\n});\nexport { WikipediaQuery };\n"],"names":["WikipediaQuery","Polymer","_template","html","is","behaviors","HAXBehaviors","PropertiesBehaviors","SchemaBehaviors","Schema","properties","showTitle","type","Boolean","value","search","String","renderAs","observer","searchResponse","Object","attached","date","Date","now","__now","getDate","getMonth","getFullYear","setHaxProperties","canScale","canPosition","canEditSource","gizmo","title","description","icon","color","groups","handles","meta","author","settings","quick","property","inputMethod","required","configure","saveOptions","wipeSlot","_renderAsUpdated","newValue","oldValue","_typeof","_resetRenderMethods","_validRenderMethods","methods","this","i","length","handleResponse","response","key","query","pages","hasOwnProperty","extract","replace","$","result","innerHTML"],"mappings":"81EAWIA,EAAiBC,UAAQ,CAC3BC,UAAWC,YAyCXC,GAAI,kBACJC,UAAW,CAACC,aAAaC,oBAAqBC,gBAAgBC,QAC9DC,WAAY,CAIVC,UAAW,CACTC,KAAMC,QACNC,OAAO,GAKTC,OAAQ,CACNH,KAAMI,OACNF,MAAO,qBAKTG,SAAU,CACRL,KAAMI,OACNF,MAAO,UACPI,SAAU,oBAKZC,eAAgB,CACdP,KAAMQ,SAOVC,SAAU,eACJC,EAAO,IAAIC,KAAKA,KAAKC,YACpBC,MACHH,EAAKI,UAAY,IAAMJ,EAAKK,WAAa,IAAML,EAAKM,mBAwDjDC,iBAtDO,CACVC,UAAU,EACVC,aAAa,EACbC,eAAe,EACfC,MAAO,CACLC,MAAO,oBACPC,YACE,2EACFC,KAAM,OACNC,MAAO,QACPC,OAAQ,CAAC,UAAW,oBACpBC,QAAS,CACP,CACE3B,KAAM,UACNsB,MAAO,WAGXM,KAAM,CACJC,OAAQ,qBAGZC,SAAU,CACRC,MAAO,CACL,CACEC,SAAU,SACVV,MAAO,cACPC,YAAa,gCACbU,YAAa,YACbT,KAAM,eACNU,UAAU,GAEZ,CACEF,SAAU,YACVV,MAAO,aACPC,YAAa,qDACbU,YAAa,UACbT,KAAM,iBAGVW,UAAW,CACT,CACEH,SAAU,SACVV,MAAO,cACPC,YAAa,gCACbU,YAAa,YACbT,KAAM,eACNU,UAAU,KAIhBE,YAAa,CACXC,UAAU,MAShBC,iBAAkB,SAASC,EAAUC,iBAC/BC,EAAOF,UACJG,2BACA,WAAaH,IAAY,IAOlCI,oBAAqB,iBACL,CAAC,YAOjBD,oBAAqB,mBACfE,EAAUC,KAAKF,sBACVG,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,SAC7B,WAAaF,EAAQE,KAAM,GAOpCE,eAAgB,SAASC,oBAEnBR,EAAOI,KAAKtC,oBACT,IAAI2C,KAAOL,KAAKtC,eAAe4C,MAAMC,SAEnCP,KAAKtC,eAAe4C,MAAMC,MAAMC,eAAeH,QAGhD3D,EADMsD,KAAKtC,eAAe4C,MAAMC,MAAMF,GAC3BI,QAIf/D,GADAA,GADAA,GADAA,EAAOA,EAAKgE,QAAQ,qBAAsB,mBAC9BA,QAAQ,eAAgB,oBACxBA,QAAQ,oBAAqB,kBAC7BA,QAAQ,cAAe,uBAE9BC,EAAEC,OAAOC,UAAYnE"}