{"version":3,"file":"simple-search.umd.js","sources":["lib/simple-search-content.js","simple-search.umd.js"],"sourcesContent":["/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\n\nexport { SimpleSearchContent };\n/**\n * `simple-search-content`\n * `Content that can be searched with simple-search`\n *\n *\n * @microcopy - the mental model for this element\n *\n * ```<simple-search-content\n *   content=\"[[content]]\"                // inline content to be searched\n * </simple-search-content>```\n *\n * CSS Variables for matched content:\n * ```color: var(--simple-search-match-text-color, #000);\n * background-color: var(--simple-search-match-background-color, #f0f0f0);\n * border-color: var(--simple-search-match-border-color, #ddd);\n * @apply --simple-search-match;```\n *\n * @polymer\n * @customElement\n * @demo demo/index.html\n */\nclass SimpleSearchContent extends PolymerElement {\n  static get is() {\n    return \"simple-search-content\";\n  }\n\n  static get properties() {\n    return {\n      /**\n       * Original content. For example: \"The quick brown fox jumps over the lazy dog.\"\n       */\n      content: {\n        type: String,\n        value: null\n      }\n    };\n  }\n\n  // render function\n  static get template() {\n    return html`\n      <style>\n        :host #content {\n          @apply --simple-search-content;\n        }\n        :host #content[match-number] {\n          color: var(--simple-search-match-text-color, #000);\n          background-color: var(--simple-search-match-bg-color, #f0f0f0);\n          border: 1px solid;\n          border-color: var(--simple-search-match-border-color, #ddd);\n          padding: 0.16px 4px;\n          border-radius: 0.16px;\n          font-weight: bold;\n          @apply --simple-search-match;\n        }\n      </style>\n      <span id=\"content\">\n        <template is=\"dom-repeat\" items=\"[[_searchedContent]]\">\n          <span\n            match-number\\$=\"[[item.matchNumber]]\"\n            tabindex\\$=\"[[_getTabIndex(item.matchNumber)]]\"\n            >[[item.text]]</span\n          >\n        </template>\n      </span>\n    `;\n  }\n\n  /**\n   * associates simple-search-content with a simple-search\n   *\n   * @param {object} the simple-search element\n   */\n  enableSearch(searchObject) {\n    let root = this,\n      content = [{ matched: false, text: root.content }];\n    if (content[0].text === null) content[0].text = root.innerHTML;\n    // set rendered content to default unsearched content\n    this.setContent(content);\n    // listen for changes to search\n    searchObject.addEventListener(\"simple-search\", function() {\n      // set rendered content to default unsearched content to clear old results\n      this.setContent(content);\n      // set rendered content to default search results\n      this.setContent(searchObject.findMatches(content));\n    });\n\n    // listen for navigation through results\n    searchObject.addEventListener(\"goto-result\", e => {\n      this.focus(e.detail);\n    });\n  }\n  /**\n   * sets array of content to be rendered\n   *\n   * @param {array} an array of searchable content\n   */\n  setContent(newContent) {\n    this._searchedContent = newContent;\n  }\n\n  /**\n   * sets focus on a matched result based on match number\n   *\n   * @param {number} the number of a search result\n   */\n  focus(matchNumber) {\n    let result = this.$.content.querySelector(\n      '[match-number=\"' + matchNumber + '\"]'\n    );\n    if (result !== undefined && result !== null) result.focus();\n  }\n  /**\n   * gets tab index based on whether item is a match that can be focused on\n   *\n   * @param {number} the number of a search result\n   */\n  _getTabIndex(matchNumber) {\n    return matchNumber !== undefined && matchNumber !== null ? \"1\" : \"\";\n  }\n}\ncustomElements.define(SimpleSearchContent.is, SimpleSearchContent);\n","/**\n * Copyright 2018 The Pennsylvania State University\n * @license Apache-2.0, see License.md for full text.\n */\nimport { html, PolymerElement } from \"@polymer/polymer/polymer-element.js\";\nimport \"@polymer/iron-icons/iron-icons.js\";\nimport \"@polymer/paper-input/paper-input.js\";\nimport \"@polymer/paper-tooltip/paper-tooltip.js\";\nimport \"./lib/simple-search-content.js\";\n\nexport { SimpleSearch };\n/**\n * `simple-search`\n * `A button used in simple-search`\n *\n *\n * @microcopy - the mental model for this element\n *\n * ```<simple-search\n *   case-sensitive$=\"[[caseSensitive]]\"     // is search case sensitive?\n *   controls$=\"[[controls]]\">\n * </simple-search>```\n *\n *   The searchTerms property provides an array of search terms entered in to the input.\n *   The findMatches function returns an array of parsed results.\n *   For example if I searched for the with\n *   `findMatches(\"The quick brown fox jumps over the lazy dog.\")`,\n *   the array would be:\n *   ``[\n *     {\n *       \"matched\": true,\n *       \"matchNumber\": 1,\n *       \"text\": \"The\"\n *     },{\n *       \"matched\": false,\n *       \"text\": \" quick brown fox jumps over \"\n *     },{\n *       \"matched\": true,\n *       \"matchNumber\": 2,\n *       \"text\": \"the\"\n *     },{\n *       \"matched\": false,\n *       \"text\": \" lazy dog.\"\n *     }\n *   ]```\n *   or `findMatches(\"The quick brown fox jumps over the lazy dog.\",true)`,\n *   the array would be:\n *   ```[\n *     {\n *       \"matched\": false,\n *       \"text\": \"The quick brown fox jumps over \"\n *     },{\n *       \"matched\": true,\n *       \"matchNumber\": 1,\n *       \"text\": \"the\"\n *     },{\n *       \"matched\": false,\n *       \"text\": \" lazy dog.\"\n *     }\n *   ]```\n *\n *   CSS Variables:\n *   For the input field...\n *   ```--paper-input-container-input-color: var(--simple-search-input-color, #111);\n *   --paper-input-container-focus-color: var(--simple-search-input-placeholder-color, #000);\n *   --paper-input-container-color: var(--simple-search-input-line-color, #fff);\n *   @apply --simple-search-container;```\n *\n *   For buttons:\n *   ```color: var(--simple-search-button-color, #111);\n *   background-color: var(--simple-search-button-bg-color, #eee);\n *   border-color: var(--simple-search-button-border-color, #ccc);\n *   @apply --simple-search-button;`\n *\n *   For buttons on hover:\n *   ```color: var(--simple-search-button-hover-color, #000);\n *   background-color: var(--simple-search-button-hover-bg-color, #fff);\n *   border-color: var(--simple-search-button-hover-border-color, #ddd);\n *   @apply --simple-search-button-hover;```\n *\n *   For disabled buttons:\n *   ```color: var(--simple-search-button-disabled-color, #666);\n *   background-color: var(--simple-search-button-disabled-bg-color, #ccc);\n *   border-color: var(--simple-search-button-disabled-border-color, #aaa);\n *   @apply --simple-search-button-disabled;```\n *\n * @polymer\n * @customElement\n * @demo demo/index.html\n *\n */\nclass SimpleSearch extends PolymerElement {\n  static get is() {\n    return \"simple-search\";\n  }\n\n  static get properties() {\n    return {\n      /**\n       * always float the label\n       */\n      alwaysFloatLabel: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * Is the search case-sensitive\n       */\n      caseSensitive: {\n        type: Boolean,\n        value: null\n      },\n      /**\n       * The id of the container element that the navigation buttons control\n       */\n      controls: {\n        type: String,\n        value: null\n      },\n      /**\n       * is the previous next button disabled\n       */\n      nextButtonDisabled: {\n        type: Boolean,\n        computed:\n          \"_isNavButtonDisabled(resultPointer,resultCount,resultsSpan,1)\"\n      },\n      /**\n       * label for next result icon\n       */\n      nextButtonIcon: {\n        type: String,\n        value: \"arrow-forward\"\n      },\n      /**\n       * label for next result button\n       */\n      nextButtonLabel: {\n        type: String,\n        value: \"next result\"\n      },\n      /**\n       * never float the label\n       */\n      noLabelFloat: {\n        type: Boolean,\n        value: false\n      },\n      /**\n       * are there any results to navigate?\n       */\n      noResults: {\n        type: Boolean,\n        computed: \"_hasNoResults(resultCount)\"\n      },\n      /**\n       * is there an active search?\n       */\n      noSearch: {\n        type: Boolean,\n        computed: \"_hasNoSearch(searchTerms)\"\n      },\n      /**\n       * is the previous result button disabled\n       */\n      prevButtonDisabled: {\n        type: Boolean,\n        computed:\n          \"_isNavButtonDisabled(resultPointer,resultCount,resultsSpan,-1)\"\n      },\n      /**\n       * label for previous result icon\n       */\n      prevButtonIcon: {\n        type: String,\n        value: \"arrow-back\"\n      },\n      /**\n       * label for previous result button\n       */\n      prevButtonLabel: {\n        type: String,\n        value: \"previous result\"\n      },\n      /**\n       * Number of results.\n       */\n\n      resultCount: {\n        type: Number,\n        value: 0\n      },\n      /**\n       * Which result are we currently on?\n       */\n      resultPointer: {\n        type: Number,\n        value: 0\n      },\n      /**\n       * Number of results.\n       */\n      resultsSpan: {\n        type: String,\n        computed: \"_getResultsSpan(noSearch,resultPointer,resultCount)\"\n      },\n      /**\n       * label for search icon\n       */\n      searchInputIcon: {\n        type: String,\n        value: \"search\"\n      },\n      /**\n       * label for search input\n       */\n      searchInputLabel: {\n        type: String,\n        value: \"search\"\n      },\n      /**\n       * an array of search terms\n       */\n      searchTerms: {\n        type: Array,\n        value: []\n      },\n      /**\n       * The container element that the navigation buttons control\n       */\n      target: {\n        type: Object,\n        value: null\n      }\n    };\n  }\n\n  // render function\n  static get template() {\n    return html`\n      <style is=\"custom-style\">\n        :host {\n          display: flex;\n          align-items: flex-end;\n          justify-content: space-between;\n          width: 100%;\n        }\n        :host #input {\n          flex-grow: 2;\n          margin-right: 4px;\n          --paper-input-container-input-color: var(\n            --simple-search-input-text-color,\n            #000\n          );\n          --paper-input-container-focus-color: var(\n            --simple-search-input-line-color,\n            #000\n          );\n          --paper-input-container-color: var(\n            --simple-search-input-placeholder-color,\n            #222\n          );\n          color: var(--simple-search-input-placeholder-color, #222);\n          @apply --simple-search-container;\n        }\n        :host #xofy {\n          margin: 8px;\n        }\n        :host button {\n          margin: 8px 0 8px;\n          color: var(--simple-search-button-color, #111);\n          background-color: var(--simple-search-button-bg-color, #eee);\n          border-color: var(--simple-search-button-border-color, #ccc);\n          @apply --simple-search-button;\n        }\n        :host button:not([disabled]):focus,\n        :host button:not([disabled]):hover {\n          cursor: pointer;\n          color: var(--simple-search-button-hover-color, #000);\n          background-color: var(--simple-search-button-hover-bg-color, #fff);\n          border-color: var(--simple-search-button-hover-border-color, #ddd);\n          @apply --simple-search-button-hover;\n        }\n        :host button[disabled] {\n          cursor: not-allowed;\n          color: var(--simple-search-button-disabled-color, #999);\n          background-color: var(--simple-search-button-disabled-bg-color, #eee);\n          border-color: var(--simple-search-button-disabled-border-color, #ccc);\n          @apply --simple-search-button-disabled;\n        }\n        :host button:not([controls]) {\n          display: none;\n        }\n        :host [shrink-hide] {\n          display: none;\n        }\n      </style>\n      <paper-input\n        id=\"input\"\n        always-float-label\\$=\"[[alwaysFloatLabel]]\"\n        label=\"[[searchInputLabel]]\"\n        no-label-float\\$=\"[[noLabelFloat]]\"\n        on-change=\"_handleChange\"\n      >\n        <iron-icon icon=\"[[searchInputIcon]]\" slot=\"prefix\"></iron-icon>\n      </paper-input>\n      <div id=\"xofy\" shrink-hide\\$=\"[[noSearch]]\"></div>\n      <div shrink-hide\\$=\"[[noResults]]\">\n        <button\n          id=\"prev\"\n          aria-label=\"[[prevButtonLabel]]\"\n          aria-role=\"button\"\n          controls\\$=\"[[controls]]\"\n          disabled\\$=\"[[prevButtonDisabled]]\"\n          on-tap=\"_navigateResults\"\n          tabindex=\"0\"\n        >\n          <iron-icon icon=\"[[prevButtonIcon]]\"></iron-icon>\n        </button>\n        <paper-tooltip for=\"prev\">[[prevButtonLabel]]</paper-tooltip>\n        <button\n          id=\"next\"\n          aria-label=\"[[nextButtonLabel]]\"\n          aria-role=\"button\"\n          controls\\$=\"[[controls]]\"\n          disabled\\$=\"[[nextButtonDisabled]]\"\n          on-tap=\"_navigateResults\"\n          tabindex=\"0\"\n        >\n          <iron-icon icon\\$=\"[[nextButtonIcon]]\"></iron-icon>\n        </button>\n        <paper-tooltip for=\"next\">[[nextButtonLabel]]</paper-tooltip>\n      </div>\n    `;\n  }\n\n  ready() {\n    super.ready();\n    let root = this,\n      search = root.$.input;\n    root._getSearchText(search.value);\n  }\n\n  /**\n   * are there any results to navigate?\n   */\n  _handleChange(e) {\n    let root = this;\n    root._getSearchText(root.$.input.value);\n    root.resultCount = 0;\n    root.resultPointer = 0;\n    root.dispatchEvent(\n      new CustomEvent(\"simple-search\", { detail: { search: root, content: e } })\n    );\n  }\n\n  /**\n   * are there any results to navigate?\n   *\n   * @param {number} total number of results\n   * @returns {boolean} whether or not there are results\n   */\n  _hasNoResults(resultCount) {\n    return resultCount < 1;\n  }\n\n  /**\n   * are there any results to navigate?\n   *\n   * @param {array} array of search terms\n   * @returns {boolean} whether or not there are search terms\n   */\n  _hasNoSearch(searchTerms) {\n    return searchTerms.length < 1;\n  }\n\n  /**\n   * get results span text\n   *\n   * @param {boolean} whether or not there are search terms\n   * @param {number} the current search result's position\n   * @param {number} the total number of search results\n   * @returns {string} \"y results\" or \"x/y\" text\n   */\n  _getResultsSpan(noSearch, resultPointer, resultCount) {\n    let html = \"\";\n    if (resultCount > 0 && resultPointer > 0) {\n      html = resultPointer + \"/\" + resultCount;\n    } else {\n      html = \" \" + resultCount;\n    }\n    this.$.xofy.innerHTML = html;\n    return this.$.xofy.innerHTML;\n  }\n\n  /**\n   * navigate results\n   */\n  _navigateResults(e) {\n    let root = this,\n      increment = e.currentTarget.id === \"next\" ? 1 : -1;\n    if (\n      this.resultPointer + increment > 0 &&\n      this.resultPointer + increment <= this.resultCount\n    ) {\n      this.resultPointer += increment;\n      this.dispatchEvent(\n        new CustomEvent(\"goto-result\", { detail: this.resultPointer })\n      );\n    }\n  }\n\n  /**\n   * navigate results\n   */\n  _isNavButtonDisabled(pointer, count, span, inc) {\n    return span == \"\" || pointer + inc <= 0 || pointer + inc > count;\n  }\n\n  /**\n   * gets the tab-index of cues based on whether or not interactive cues are disabled\n   *\n   * @param {string} a string of search text\n   */\n  _getSearchText(find) {\n    let temp = new Array();\n    if (find !== undefined && find !== null) {\n      temp = find.split(/[\\\"\\']/gm);\n      for (let i = 0; i < temp.length; i++) {\n        temp[i] = temp[i].trim();\n        if (temp[i] === \"\") temp.splice(i, 1);\n      }\n    }\n    this.set(\"searchTerms\", []);\n    this.set(\"searchTerms\", temp.slice(0));\n  }\n\n  /**\n   * search a string of content for any terms and return an array of results.\n   * For example if I searched for the with\n   * `findMatches(\"The quick brown fox jumps over the lazy dog.\")`,\n   * the array would be:\n   * ```[\n   *   {\n   *     \"matched\": true,\n   *     \"matchNumber\": 1,\n   *     \"text\": \"The\",\n   *     \"searchObject\": root\n   *   },{\n   *     \"matched\": false,\n   *     \"text\": \" quick brown fox jumps over \",\n   *     \"searchObject\": root\n   *   },{\n   *     \"matched\": true,\n   *     \"matchNumber\": 2,\n   *     \"text\": \"the\",\n   *     \"searchObject\": root\n   *   },{\n   *     \"matched\": false,\n   *     \"text\": \" lazy dog.\",\n   *     \"searchObject\": root\n   *   }\n   * ]```\n   *\n   * or `findMatches(\"The quick brown fox jumps over the lazy dog.\",true)`,\n   * the array would be:\n   * ```[\n   *   {\n   *     \"matched\": false,\n   *     \"text\": \"The quick brown fox jumps over \",\n   *     \"searchObject\": root\n   *   },{\n   *     \"matched\": true,\n   *     \"matchNumber\": 1,\n   *     \"text\": \"the\",\n   *     \"searchObject\": root\n   *   },{\n   *     \"matched\": false,\n   *     \"text\": \" lazy dog.\",\n   *     \"searchObject\": root\n   *   }\n   * ]```\n   *\n   * @param {array} an array of search terms\n   * @returns {array} an array of search results\n   */\n  findMatches(content) {\n    let root = this,\n      terms = root.searchTerms,\n      modifier = this.caseSensitive ? \"gm\" : \"gim\",\n      results = content.slice(0),\n      updateResults = function(find) {\n        for (let i = 0; i < results.length; i++) {\n          if (results[i].matched === false) {\n            let regex = new RegExp(\"\\\\b\" + find + \"\\\\b\", modifier),\n              text = results[i].text,\n              start = text.search(regex),\n              end = start + find.length;\n            if (start > -1) {\n              root.resultCount += 1;\n              let pre = text.slice(0, start),\n                match = text.slice(start, end),\n                post = text.slice(end, text.length),\n                update = results.splice(\n                  i,\n                  1,\n                  {\n                    matched: false,\n                    text: pre,\n                    searchObject: root\n                  },\n                  {\n                    matched: true,\n                    matchNumber: root.resultCount,\n                    text: match,\n                    searchObject: root\n                  },\n                  {\n                    matched: false,\n                    text: post,\n                    searchObject: root\n                  }\n                );\n            }\n          }\n        }\n      };\n    for (let i = 0; i < terms.length; i++) {\n      updateResults(terms[i]);\n    }\n    root.resultPointer = 0;\n    return results;\n  }\n}\ncustomElements.define(SimpleSearch.is, SimpleSearch);\n"],"names":["SimpleSearchContent","PolymerElement","searchObject","content","matched","text","this","innerHTML","setContent","addEventListener","findMatches","e","_this","focus","detail","newContent","_searchedContent","matchNumber","result","$","querySelector","type","String","value","html","customElements","define","is","SimpleSearch","search","input","_getSearchText","resultCount","resultPointer","dispatchEvent","CustomEvent","searchTerms","length","noSearch","xofy","increment","currentTarget","id","pointer","count","span","inc","find","temp","Array","split","i","trim","splice","set","slice","root","terms","modifier","caseSensitive","results","updateResults","regex","RegExp","start","end","pre","match","post","alwaysFloatLabel","Boolean","controls","nextButtonDisabled","computed","nextButtonIcon","nextButtonLabel","noLabelFloat","noResults","prevButtonDisabled","prevButtonIcon","prevButtonLabel","Number","resultsSpan","searchInputIcon","searchInputLabel","target","Object"],"mappings":"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"}