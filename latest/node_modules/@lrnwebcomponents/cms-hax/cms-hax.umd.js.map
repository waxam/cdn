{"version":3,"file":"cms-hax.umd.js","sources":["lib/cms-token.js","lib/cms-block.js","lib/cms-views.js","lib/cms-entity.js","cms-hax.umd.js"],"sourcesContent":["import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/paper-spinner/paper-spinner.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nvar $_documentContainer = document.createElement(\"div\");\n$_documentContainer.setAttribute(\"style\", \"display: none;\");\n\n$_documentContainer.innerHTML = `<dom-module id=\"cms-token\">\n    <template strip-whitespace=\"\">\n        <style>\n            :host {\n                display: inline;\n                min-width: 112px;\n                min-height: 112px;\n                transition: .6s all ease;\n                background-color: transparent;\n            }\n\n            paper-spinner {\n                transition: .6s all ease;\n                position: absolute;\n                visibility: hidden;\n                display: none;\n                opacity: 0;\n                height: 0;\n                width: 0;\n            }\n\n            #replacementcontent {\n                transition: .6s all ease;\n                visibility: visible;\n                opacity: 1;\n                height: auto;\n                width: auto;\n            }\n\n            :host([loading]) {\n                text-align: center;\n            }\n\n            :host([loading]) paper-spinner {\n                visibility: visible;\n                opacity: 1;\n                position: relative;\n                height: 80px;\n                width: 80px;\n                padding: 16px;\n                display: flex;\n            }\n\n            :host([loading]) #replacementcontent {\n                opacity: 0;\n                visibility: hidden;\n                height: 0;\n                width: 0;\n            }\n        </style>\n        <iron-ajax id=\"tokenrequest\" method=\"GET\" params=\"[[bodyData]]\" url=\"[[tokenEndPoint]]\" handle-as=\"json\" last-response=\"{{tokenData}}\"></iron-ajax>\n        <paper-spinner active=\"[[loading]]\"></paper-spinner>\n        <span id=\"replacementcontent\">\n            <slot></slot>\n        </span>\n    </template>\n\n    \n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer);\n/**\n`cms-token`\nRender and process a shortcode / token from a content management system.\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n - cms - Content management system, while writen against Drupal should be\n         abstract enough to work with just about anything.\n - token - a snippet / shortcode of logic to unpack and turn into something\n           more complex. Usually of the form [actual:thing:here] or\n           [[action|thing=stuff|here=place]] style. Either way, it's a\n           snippet which will get sent to a backend and dynamically replaced.\n*/\nPolymer({\n  is: \"cms-token\",\n  behaviors: [HAXBehaviors.PropertiesBehaviors],\n  properties: {\n    /**\n     * Loading state\n     */\n    loading: {\n      type: Boolean,\n      reflectToAttribute: true,\n      value: false\n    },\n    /**\n     * Token changed (somehow) do the token processing.\n     */\n    token: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * Token end point updated, change the way we do processing.\n     */\n    tokenEndPoint: {\n      type: String\n    },\n    /**\n     * Body data which is just token with some encapsulation.\n     */\n    bodyData: {\n      type: Object,\n      computed: \"_generateBodyData(token, _clickInvoked)\",\n      observer: \"_tokenChanged\"\n    },\n    /**\n     * internal tracking for edit button being clicked in HAX presentation\n     */\n    _clickInvoked: {\n      type: String,\n      value: false\n    },\n    /**\n     * Token data from the end point.\n     */\n    tokenData: {\n      type: String,\n      observer: \"_handleTokenResponse\"\n    },\n    /**\n     * Prefix for the token to be processed\n     */\n    tokenPrefix: {\n      type: String,\n      value: \"[\"\n    },\n    /**\n     * Suffix for the token to be processed\n     */\n    tokenSuffix: {\n      type: String,\n      value: \"]\"\n    },\n    /**\n     *\n     */\n    _displayMode: {\n      type: String,\n      value: \"full\",\n      observer: \"_displayModeChanged\"\n    }\n  },\n  /**\n   * Display mode value updated.\n   */\n  _displayModeChanged: function(newValue, oldValue) {\n    if (\n      typeof newValue !== typeof undefined &&\n      newValue != \"\" &&\n      typeof this.token !== typeof undefined\n    ) {\n      // @todo need more sanity checks then this to get default and replace better\n      this.token = this.token.replace(oldValue, newValue);\n    }\n  },\n  /**\n   * Generate body data.\n   */\n  _generateBodyData: function(token, $editingState) {\n    if (token !== null && token !== \"\") {\n      let tokenPrefix = this.tokenPrefix;\n      let tokenSuffix = this.tokenSuffix;\n      return {\n        token: `${tokenPrefix}${token}${tokenSuffix}`,\n        cachedResponse: $editingState\n      };\n    }\n  },\n  /**\n   * Handle the response from the token processing endpoint\n   */\n  _handleTokenResponse: function(newValue, oldValue) {\n    if (newValue !== null && typeof newValue.content !== typeof undefined) {\n      // store the text and url callbacks in the event we're in an editing mode\n      if (document.getElementById(\"cmstokenidtolockonto\") != null) {\n        document\n          .getElementById(\"cmstokenidtolockonto\")\n          .setAttribute(\"href\", newValue.editEndpoint);\n        document.getElementById(\"cmstokenidtolockonto\").innerHTML =\n          newValue.editText;\n        document\n          .getElementById(\"cmstokenidtolockonto\")\n          .addEventListener(\"click\", this.__tokenClicked.bind(this));\n      }\n      // wipe our own slot here\n      this.wipeSlot(dom(this));\n      // now inject the content we got\n      async.microTask.run(() => {\n        let template = document.createElement(\"template\");\n        template.innerHTML = newValue.content;\n        dom(this).appendChild(document.importNode(template.content, true));\n        this.loading = false;\n      });\n    }\n  },\n  /**\n   * wipe out the slot\n   */\n  wipeSlot: function(element) {\n    while (element.firstChild !== null) {\n      element.removeChild(element.firstChild);\n    }\n  },\n  /**\n   * Token end point changed\n   */\n  _tokenChanged: function(newValue, oldValue) {\n    // ensure we have something and are not loading currently\n    if (\n      typeof newValue !== typeof undefined &&\n      newValue !== \"\" &&\n      !this.loading\n    ) {\n      // support going from a null element to a real one\n      if (\n        typeof this.tokenEndPoint === typeof undefined &&\n        typeof window.cmstokenEndPoint !== typeof undefined\n      ) {\n        this.tokenEndPoint = window.cmstokenEndPoint;\n      }\n      if (this.tokenEndPoint) {\n        this.loading = true;\n        async.microTask.run(() => {\n          this.$.tokenrequest.generateRequest();\n        });\n      }\n    }\n  },\n  /**\n   * Window visibility callback to monitor when we are being seen\n   */\n  _windowVisibilityChanged: function(e) {\n    // ensure we aren't already loading\n    if (!this.loading && this._clickInvoked) {\n      // generate request which will kick off \"loading\" state\n      this.$.tokenrequest.generateRequest();\n      // kill our clickInvoked handler so we aren't generating requests until the\n      // user clicks to edit the thing again\n      this._clickInvoked = false;\n    }\n  },\n  /**\n   * Notice a click on our edit button and set a flag.\n   */\n  __tokenClicked: function(e) {\n    // set flag so we know to generate a new request when we come back into focus\n    this._clickInvoked = true;\n  },\n  /**\n   * Detatched life cycle.\n   */\n  detached: function() {\n    // remove event listener for clean up\n    document.removeEventListener(\n      \"visibilitychange\",\n      this._windowVisibilityChanged.bind(this)\n    );\n  },\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    // notice visibilty change\n    document.addEventListener(\n      \"visibilitychange\",\n      this._windowVisibilityChanged.bind(this)\n    );\n    if (\n      typeof this.token !== typeof undefined &&\n      this.token !== null &&\n      this.token !== \"\"\n    ) {\n      let slot = dom(this).getEffectiveChildNodes();\n      // only kick off request if there's nothing in it\n      // if it has something in it that means we did some\n      // remote rendering ahead of time\n      if (slot.length === 0 && !this.loading) {\n        // support for autoloading the token data needed for the request from globals\n        if (\n          typeof this.tokenEndPoint === typeof undefined &&\n          typeof window.cmstokenEndPoint !== typeof undefined\n        ) {\n          this.tokenEndPoint = window.cmstokenEndPoint;\n        }\n        if (this.tokenEndPoint) {\n          this.loading = true;\n          async.microTask.run(() => {\n            this.$.tokenrequest.generateRequest();\n          });\n        }\n      }\n    }\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"CMS Token\",\n        description: \"CMS token rendered on the backend\",\n        icon: \"icons:code\",\n        color: \"light-blue\",\n        groups: [\"CMS\"],\n        handles: [\n          {\n            type: \"cmstoken\",\n            token: \"token\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [],\n        configure: [\n          {\n            property: \"token\",\n            title: \"Token\",\n            description: \"Token from our CMS\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      },\n      saveOptions: {\n        wipeSlot: true,\n        unsetAttributes: [\n          \"loading\",\n          \"token-data\",\n          \"body-data\",\n          \"token-end-point\"\n        ]\n      }\n    };\n    this.setHaxProperties(props);\n  },\n  /**\n   * Implements getHaxJSONSchema post processing callback.\n   */\n  postProcessgetHaxJSONSchema: function(schema) {\n    let href = \"\";\n    let slot = \"Edit\";\n    // if we have values populate them\n    if (typeof this.tokenData !== typeof undefined) {\n      href = this.tokenData.editEndpoint;\n      slot = this.tokenData.editText;\n      for (var i in this.tokenData.schema) {\n        schema.properties[i] = this.tokenData.schema[i];\n      }\n    }\n    schema.properties[\"__editThis\"] = {\n      type: \"string\",\n      component: {\n        name: \"a\",\n        properties: {\n          id: \"cmstokenidtolockonto\",\n          href: href,\n          target: \"_blank\"\n        },\n        slot: slot\n      }\n    };\n    return schema;\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/paper-spinner/paper-spinner.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nvar $_documentContainer = document.createElement(\"div\");\n$_documentContainer.setAttribute(\"style\", \"display: none;\");\n\n$_documentContainer.innerHTML = `<dom-module id=\"cms-block\">\n  <template strip-whitespace=\"\">\n    <style>\n      :host {\n        display: block;\n        min-width: 112px;\n        min-height: 112px;\n        transition: .6s all ease;\n        background-color: transparent;\n      }\n      paper-spinner {\n        visibility: hidden;\n        opacity: 0;\n        height: 80px;\n        width: 80px;\n        padding: 16px;\n      }\n      #replacementcontent {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) {\n        text-align: center;\n      }\n      :host([loading]) paper-spinner {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) #replacementcontent {\n        opacity: 0;\n        visibility: hidden;\n      }\n    </style>\n    <iron-ajax id=\"blockrequest\" method=\"GET\" params=\"[[bodyData]]\" url=\"[[blockEndPoint]]\" handle-as=\"json\" last-response=\"{{blockData}}\"></iron-ajax>\n    <paper-spinner active=\"[[loading]]\"></paper-spinner>\n    <span id=\"replacementcontent\"><slot></slot></span>\n  </template>\n\n  \n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer);\n/**\n`cms-block`\nRender and process a  / block from a content management system.\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n -\n\n*/\nPolymer({\n  is: \"cms-block\",\n  behaviors: [HAXBehaviors.PropertiesBehaviors],\n  properties: {\n    /**\n     * Loading state\n     */\n    loading: {\n      type: Boolean,\n      reflectToAttribute: true,\n      value: false\n    },\n    /**\n     * Module supplying the block\n     */\n    blockModule: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * A delta value relative to the module\n     */\n    blockDelta: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * block end point updated, change the way we do processing.\n     */\n    blockEndPoint: {\n      type: String\n    },\n    /**\n     * Body data which is just block with some encapsulation.\n     */\n    bodyData: {\n      type: Object,\n      computed: \"_generateBodyData(blockModule, blockDelta)\",\n      observer: \"_blockChanged\"\n    },\n    /**\n     * block data from the end point.\n     */\n    blockData: {\n      type: String,\n      observer: \"_handleblockResponse\"\n    },\n    /**\n     * Prefix for the block to be processed\n     */\n    blockPrefix: {\n      type: String,\n      observer: \"[\"\n    },\n    /**\n     * Suffix for the block to be processed\n     */\n    blockSuffix: {\n      type: String,\n      observer: \"]\"\n    }\n  },\n  /**\n   * Generate body data.\n   */\n  _generateBodyData: function(blockModule, blockDelta) {\n    if (\n      blockModule !== null &&\n      blockModule !== \"\" &&\n      blockDelta !== null &&\n      blockDelta !== \"\"\n    ) {\n      return {\n        module: `${blockModule}`,\n        delta: `${blockDelta}`\n      };\n    }\n  },\n  /**\n   * Handle the response from the block processing endpoint\n   */\n  _handleblockResponse: function(newValue, oldValue) {\n    if (newValue !== null && typeof newValue.content !== typeof undefined) {\n      // store the text and url callbacks\n      if (document.getElementById(\"cmstokenidtolockonto\") != null) {\n        document\n          .getElementById(\"cmstokenidtolockonto\")\n          .setAttribute(\"href\", newValue.editEndpoint);\n        document.getElementById(\"cmstokenidtolockonto\").innerHTML =\n          newValue.editText;\n      }\n      // wipe our own slot here\n      this.wipeSlot(dom(this));\n      // now inject the content we got\n      async.microTask.run(() => {\n        let frag = document.createElement(\"span\");\n        frag.innerHTML = newValue.content;\n        let newNode = frag.cloneNode(true);\n        dom(this).appendChild(newNode);\n        setTimeout(() => {\n          this.loading = false;\n        }, 600);\n      });\n    }\n  },\n  /**\n   * wipe out the slot\n   */\n  wipeSlot: function(element) {\n    while (element.firstChild !== null) {\n      element.removeChild(element.firstChild);\n    }\n  },\n  /**\n   * block end point changed\n   */\n  _blockChanged: function(newValue, oldValue) {\n    // ensure we have something and are not loading currently\n    if (\n      typeof newValue !== typeof undefined &&\n      newValue !== \"\" &&\n      !this.loading\n    ) {\n      // support going from a null element to a real one\n      if (\n        typeof this.blockEndPoint === typeof undefined &&\n        typeof window.cmsblockEndPoint !== typeof undefined\n      ) {\n        this.blockEndPoint = window.cmsblockEndPoint;\n      }\n      if (this.blockEndPoint) {\n        this.loading = true;\n        async.microTask.run(() => {\n          this.$.blockrequest.generateRequest();\n        });\n      }\n    }\n  },\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    if (\n      typeof this.blockModule !== typeof undefined &&\n      this.blockModule !== null &&\n      this.blockModule !== \"\"\n    ) {\n      let slot = dom(this).getEffectiveChildNodes();\n      // only kick off request if there's nothing in it\n      // if it has something in it that means we did some\n      // remote rendering ahead of time\n      if (slot.length === 0 && !this.loading) {\n        // support for autoloading the block data needed for the request from globals\n        if (\n          typeof this.blockEndPoint === typeof undefined &&\n          typeof window.cmsblockEndPoint !== typeof undefined\n        ) {\n          this.blockEndPoint = window.cmsblockEndPoint;\n        }\n        if (this.blockEndPoint) {\n          this.loading = true;\n          async.microTask.run(() => {\n            this.$.blockrequest.generateRequest();\n          });\n        }\n      }\n    }\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"CMS Block\",\n        description: \"CMS block rendered on the backend\",\n        icon: \"image:crop-square\",\n        color: \"light-blue\",\n        groups: [\"CMS\"],\n        handles: [\n          {\n            type: \"cmsblock\",\n            block: \"block\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [],\n        configure: [\n          {\n            property: \"blockModule\",\n            title: \"Module\",\n            description: \"Module to load from our CMS\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"blockDelta\",\n            title: \"Delta\",\n            description: \"Delta of the block to load from our CMS\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      },\n      saveOptions: {\n        wipeSlot: true,\n        unsetAttributes: [\n          \"loading\",\n          \"block-data\",\n          \"body-data\",\n          \"block-end-point\"\n        ]\n      }\n    };\n    this.setHaxProperties(props);\n  },\n  /**\n   * Implements getHaxJSONSchema post processing callback.\n   */\n  postProcessgetHaxJSONSchema: function(schema) {\n    schema.properties[\"__editThis\"] = {\n      type: \"string\",\n      component: {\n        name: \"a\",\n        properties: {\n          id: \"cmstokenidtolockonto\",\n          href: \"\",\n          target: \"_blank\"\n        },\n        slot: \"Edit this block\"\n      }\n    };\n    return schema;\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/paper-spinner/paper-spinner.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nvar $_documentContainer = document.createElement(\"div\");\n$_documentContainer.setAttribute(\"style\", \"display: none;\");\n\n$_documentContainer.innerHTML = `<dom-module id=\"cms-views\">\n  <template strip-whitespace=\"\">\n    <style>\n      :host {\n        display: block;\n        min-width: 112px;\n        min-height: 112px;\n        transition: .6s all ease;\n        background-color: transparent;\n      }\n      paper-spinner {\n        visibility: hidden;\n        opacity: 0;\n        height: 80px;\n        width: 80px;\n        padding: 16px;\n      }\n      #replacementcontent {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) {\n        text-align: center;\n      }\n      :host([loading]) paper-spinner {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) #replacementcontent {\n        opacity: 0;\n        visibility: hidden;\n      }\n    </style>\n    <iron-ajax id=\"viewsrequest\" method=\"GET\" params=\"[[bodyData]]\" url=\"[[viewsEndPoint]]\" handle-as=\"json\" last-response=\"{{viewsData}}\"></iron-ajax>\n    <paper-spinner active=\"[[loading]]\"></paper-spinner>\n    <span id=\"replacementcontent\"><slot></slot></span>\n  </template>\n\n  \n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer);\n/**\n`cms-views`\nRender and process a  / views from a content management system.\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n -\n\n*/\nPolymer({\n  is: \"cms-views\",\n  behaviors: [HAXBehaviors.PropertiesBehaviors],\n  properties: {\n    /**\n     * Loading state\n     */\n    loading: {\n      type: Boolean,\n      reflectToAttribute: true,\n      value: false\n    },\n    /**\n     * Name of the views to render\n     */\n    viewsName: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * Display from the views\n     */\n    viewsDisplay: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * views end point updated, change the way we do processing.\n     */\n    viewsEndPoint: {\n      type: String\n    },\n    /**\n     * Body data which is just views with some encapsulation.\n     */\n    bodyData: {\n      type: Object,\n      computed: \"_generateBodyData(viewsName, viewsDisplay)\",\n      observer: \"_viewsChanged\"\n    },\n    /**\n     * views data from the end point.\n     */\n    viewsData: {\n      type: String,\n      observer: \"_handleviewsResponse\"\n    },\n    /**\n     * Prefix for the views to be processed\n     */\n    viewsPrefix: {\n      type: String,\n      observer: \"[\"\n    },\n    /**\n     * Suffix for the views to be processed\n     */\n    viewsSuffix: {\n      type: String,\n      observer: \"]\"\n    }\n  },\n  /**\n   * Generate body data.\n   */\n  _generateBodyData: function(name, display) {\n    if (name !== null && name !== \"\") {\n      return {\n        name: `${name}`,\n        display: `${display}`\n      };\n    }\n  },\n  /**\n   * Handle the response from the views processing endpoint\n   */\n  _handleviewsResponse: function(newValue, oldValue) {\n    if (newValue !== null && typeof newValue.content !== typeof undefined) {\n      // store the text and url callbacks\n      if (document.getElementById(\"cmstokenidtolockonto\") != null) {\n        document\n          .getElementById(\"cmstokenidtolockonto\")\n          .setAttribute(\"href\", newValue.editEndpoint);\n        document.getElementById(\"cmstokenidtolockonto\").innerHTML =\n          newValue.editText;\n      }\n      // wipe our own slot here\n      this.wipeSlot(dom(this));\n      // now inject the content we got\n      async.microTask.run(() => {\n        let frag = document.createElement(\"span\");\n        frag.innerHTML = newValue.content;\n        let newNode = frag.cloneNode(true);\n        dom(this).appendChild(newNode);\n        setTimeout(() => {\n          this.loading = false;\n        }, 600);\n      });\n    }\n  },\n  /**\n   * wipe out the slot\n   */\n  wipeSlot: function(element) {\n    while (element.firstChild !== null) {\n      element.removeChild(element.firstChild);\n    }\n  },\n  /**\n   * views end point changed\n   */\n  _viewsChanged: function(newValue, oldValue) {\n    // ensure we have something and are not loading currently\n    if (\n      typeof newValue !== typeof undefined &&\n      newValue !== \"\" &&\n      !this.loading\n    ) {\n      // support going from a null element to a real one\n      if (\n        typeof this.viewsEndPoint === typeof undefined &&\n        typeof window.cmsviewsEndPoint !== typeof undefined\n      ) {\n        this.viewsEndPoint = window.cmsviewsEndPoint;\n      }\n      if (this.viewsEndPoint) {\n        this.loading = true;\n        async.microTask.run(() => {\n          this.$.viewsrequest.generateRequest();\n        });\n      }\n    }\n  },\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    if (\n      typeof this.viewsName !== typeof undefined &&\n      this.viewsName !== null &&\n      this.viewsName !== \"\"\n    ) {\n      let slot = dom(this).getEffectiveChildNodes();\n      // only kick off request if there's nothing in it\n      // if it has something in it that means we did some\n      // remote rendering ahead of time\n      if (slot.length === 0 && !this.loading) {\n        // support for autoloading the views data needed for the request from globals\n        if (\n          typeof this.viewsEndPoint === typeof undefined &&\n          typeof window.cmsviewsEndPoint !== typeof undefined\n        ) {\n          this.viewsEndPoint = window.cmsviewsEndPoint;\n        }\n        if (this.viewsEndPoint) {\n          this.loading = true;\n          async.microTask.run(() => {\n            this.$.viewsrequest.generateRequest();\n          });\n        }\n      }\n    }\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"CMS View\",\n        description: \"CMS views rendered on the backend\",\n        icon: \"icons:view-module\",\n        color: \"light-blue\",\n        groups: [\"CMS\"],\n        handles: [\n          {\n            type: \"cmsviews\",\n            views: \"views\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [],\n        configure: [\n          {\n            property: \"viewsName\",\n            title: \"Name\",\n            description: \"Name of the view from our CMS\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"viewsDisplay\",\n            title: \"Display\",\n            description: \"Display within that view from our CMS\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      },\n      saveOptions: {\n        wipeSlot: true,\n        unsetAttributes: [\n          \"loading\",\n          \"views-data\",\n          \"body-data\",\n          \"views-end-point\"\n        ]\n      }\n    };\n    this.setHaxProperties(props);\n  },\n  /**\n   * Implements getHaxJSONSchema post processing callback.\n   */\n  postProcessgetHaxJSONSchema: function(schema) {\n    schema.properties[\"__editThis\"] = {\n      type: \"string\",\n      component: {\n        name: \"a\",\n        properties: {\n          id: \"cmstokenidtolockonto\",\n          href: \"\",\n          target: \"_blank\"\n        },\n        slot: \"Edit this view\"\n      }\n    };\n    return schema;\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport * as async from \"@polymer/polymer/lib/utils/async.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/paper-spinner/paper-spinner.js\";\nimport \"@lrnwebcomponents/hax-body-behaviors/lib/HAXWiring.js\";\nvar $_documentContainer = document.createElement(\"div\");\n$_documentContainer.setAttribute(\"style\", \"display: none;\");\n\n$_documentContainer.innerHTML = `<dom-module id=\"cms-entity\">\n  <template strip-whitespace=\"\">\n    <style>\n      :host {\n        display: block;\n        min-width: 112px;\n        min-height: 112px;\n        transition: .6s all ease;\n        background-color: transparent;\n      }\n      paper-spinner {\n        visibility: hidden;\n        opacity: 0;\n        height: 80px;\n        width: 80px;\n        padding: 16px;\n      }\n      #replacementcontent {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) {\n        text-align: center;\n      }\n      :host([loading]) paper-spinner {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) #replacementcontent {\n        opacity: 0;\n        visibility: hidden;\n      }\n    </style>\n    <iron-ajax id=\"entityrequest\" method=\"GET\" params=\"[[bodyData]]\" url=\"[[entityEndPoint]]\" handle-as=\"json\" last-response=\"{{entityData}}\"></iron-ajax>\n    <paper-spinner active=\"[[loading]]\"></paper-spinner>\n    <span id=\"replacementcontent\"><slot></slot></span>\n  </template>\n\n  \n</dom-module>`;\n\ndocument.head.appendChild($_documentContainer);\n/**\n`cms-entity`\nRender and process a  / entity from a content management system.\n\n@demo demo/index.html\n\n@microcopy - the mental model for this element\n -\n -\n\n*/\nPolymer({\n  is: \"cms-entity\",\n  behaviors: [HAXBehaviors.PropertiesBehaviors],\n  properties: {\n    /**\n     * Loading state\n     */\n    loading: {\n      type: Boolean,\n      reflectToAttribute: true,\n      value: false\n    },\n    /**\n     * Type of entity to load\n     */\n    entityType: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * ID of the item to load\n     */\n    entityId: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * Display mode of the entity\n     */\n    entityDisplayMode: {\n      type: String,\n      reflectToAttribute: true\n    },\n    /**\n     * entity end point updated, change the way we do processing.\n     */\n    entityEndPoint: {\n      type: String\n    },\n    /**\n     * Body data which is just entity with some encapsulation.\n     */\n    bodyData: {\n      type: Object,\n      computed: \"_generateBodyData(entityType, entityId, entityDisplayMode)\",\n      observer: \"_entityChanged\"\n    },\n    /**\n     * entity data from the end point.\n     */\n    entityData: {\n      type: String,\n      observer: \"_handleEntityResponse\"\n    },\n    /**\n     * Prefix for the entity to be processed\n     */\n    entityPrefix: {\n      type: String,\n      observer: \"[\"\n    },\n    /**\n     * Suffix for the entity to be processed\n     */\n    entitySuffix: {\n      type: String,\n      observer: \"]\"\n    }\n  },\n  /**\n   * Generate body data.\n   */\n  _generateBodyData: function(entityType, entityId, entityDisplayMode) {\n    if (\n      entityType !== null &&\n      entityType !== \"\" &&\n      entityId !== null &&\n      entityId !== \"\"\n    ) {\n      return {\n        type: `${entityType}`,\n        id: `${entityId}`,\n        display_mode: `${entityDisplayMode}`\n      };\n    }\n  },\n  /**\n   * Handle the response from the entity processing endpoint\n   */\n  _handleEntityResponse: function(newValue, oldValue) {\n    if (newValue !== null && typeof newValue.content !== typeof undefined) {\n      // store the text and url callbacks\n      if (document.getElementById(\"cmstokenidtolockonto\") != null) {\n        document\n          .getElementById(\"cmstokenidtolockonto\")\n          .setAttribute(\"href\", newValue.editEndpoint);\n        document.getElementById(\"cmstokenidtolockonto\").innerHTML =\n          newValue.editText;\n      }\n      // wipe our own slot here\n      this.wipeSlot(dom(this));\n      // now inject the content we got\n      async.microTask.run(() => {\n        let frag = document.createElement(\"span\");\n        frag.innerHTML = newValue.content;\n        let newNode = frag.cloneNode(true);\n        dom(this).appendChild(newNode);\n        setTimeout(() => {\n          this.loading = false;\n        }, 600);\n      });\n    }\n  },\n  /**\n   * wipe out the slot\n   */\n  wipeSlot: function(element) {\n    while (element.firstChild !== null) {\n      element.removeChild(element.firstChild);\n    }\n  },\n  /**\n   * entity end point changed\n   */\n  _entityChanged: function(newValue, oldValue) {\n    // ensure we have something and are not loading currently\n    if (\n      typeof newValue !== typeof undefined &&\n      newValue !== \"\" &&\n      !this.loading\n    ) {\n      // support going from a null element to a real one\n      if (\n        typeof this.entityEndPoint === typeof undefined &&\n        typeof window.cmsentityEndPoint !== typeof undefined\n      ) {\n        this.entityEndPoint = window.cmsentityEndPoint;\n      }\n      if (this.entityEndPoint) {\n        this.loading = true;\n        async.microTask.run(() => {\n          this.$.entityrequest.generateRequest();\n        });\n      }\n    }\n  },\n  /**\n   * Attached to the DOM, now fire.\n   */\n  attached: function() {\n    if (\n      typeof this.entity !== typeof undefined &&\n      this.entity !== null &&\n      this.entity !== \"\"\n    ) {\n      let slot = dom(this).getEffectiveChildNodes();\n      // only kick off request if there's nothing in it\n      // if it has something in it that means we did some\n      // remote rendering ahead of time\n      if (slot.length === 0 && !this.loading) {\n        // support for autoloading the entity data needed for the request from globals\n        if (\n          typeof this.entityEndPoint === typeof undefined &&\n          typeof window.cmsentityEndPoint !== typeof undefined\n        ) {\n          this.entityEndPoint = window.cmsentityEndPoint;\n        }\n        if (this.entityEndPoint) {\n          this.loading = true;\n          async.microTask.run(() => {\n            this.$.entityrequest.generateRequest();\n          });\n        }\n      }\n    }\n    // Establish hax property binding\n    let props = {\n      canScale: true,\n      canPosition: true,\n      canEditSource: false,\n      gizmo: {\n        title: \"CMS Entity\",\n        description: \"CMS entity rendered on the backend\",\n        icon: \"places:spa\",\n        color: \"light-blue\",\n        groups: [\"CMS\"],\n        handles: [\n          {\n            type: \"cmsentity\",\n            entity: \"entity\"\n          }\n        ],\n        meta: {\n          author: \"LRNWebComponents\"\n        }\n      },\n      settings: {\n        quick: [],\n        configure: [\n          {\n            property: \"entityType\",\n            title: \"Type\",\n            description: \"type from our CMS\",\n            inputMethod: \"select\",\n            options: {\n              node: \"Node\",\n              user: \"User\",\n              file: \"File\"\n            },\n            icon: \"editor:title\"\n          },\n          {\n            property: \"entityID\",\n            title: \"ID\",\n            description: \"id from our CMS\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          },\n          {\n            property: \"entityDisplayMode\",\n            title: \"Display mode\",\n            description: \"display mode from our CMS\",\n            inputMethod: \"textfield\",\n            icon: \"editor:title\"\n          }\n        ],\n        advanced: []\n      },\n      saveOptions: {\n        wipeSlot: true,\n        unsetAttributes: [\n          \"loading\",\n          \"entity-data\",\n          \"body-data\",\n          \"entity-end-point\"\n        ]\n      }\n    };\n    this.setHaxProperties(props);\n  },\n  /**\n   * Implements getHaxJSONSchema post processing callback.\n   */\n  postProcessgetHaxJSONSchema: function(schema) {\n    schema.properties[\"__editThis\"] = {\n      type: \"string\",\n      component: {\n        name: \"a\",\n        properties: {\n          id: \"cmstokenidtolockonto\",\n          href: \"\",\n          target: \"_blank\"\n        },\n        slot: \"Edit this content\"\n      }\n    };\n    return schema;\n  }\n});\n","import { html, Polymer } from \"@polymer/polymer/polymer-legacy.js\";\nimport { dom } from \"@polymer/polymer/lib/legacy/polymer.dom.js\";\nimport { FlattenedNodesObserver } from \"@polymer/polymer/lib/utils/flattened-nodes-observer.js\";\nimport \"@polymer/iron-ajax/iron-ajax.js\";\nimport \"@polymer/paper-toast/paper-toast.js\";\nimport \"@lrnwebcomponents/hax-body/lib/hax-store.js\";\nimport \"@lrnwebcomponents/hax-body/hax-body.js\";\nimport \"@lrnwebcomponents/hax-body/lib/hax-autoloader.js\";\nimport \"@lrnwebcomponents/hax-body/lib/hax-manager.js\";\nimport \"@lrnwebcomponents/hax-body/lib/hax-panel.js\";\nimport \"@lrnwebcomponents/hax-body/lib/hax-app-picker.js\";\nimport \"@lrnwebcomponents/hax-body/lib/hax-export-dialog.js\";\nimport \"./lib/cms-token.js\";\nimport \"./lib/cms-block.js\";\nimport \"./lib/cms-views.js\";\nimport \"./lib/cms-entity.js\";\n/**\n`cms-hax`\nA LRN polymer app\n\n@demo ../../demo/index.html\n\n@microcopy - the mental model for this app\n -\n -\n\n*/\nlet CmsHax = Polymer({\n  _template: html`\n    <style>\n      :host {\n        display: block;\n        font-size: 16px;\n        box-sizing: content-box;\n      }\n    </style>\n    <iron-ajax\n      id=\"pageupdateajax\"\n      url=\"[[endPoint]]\"\n      method=\"[[method]]\"\n      body=\"[[updatePageData]]\"\n      content-type=\"application/json\"\n      handle-as=\"json\"\n      on-response=\"_handleUpdateResponse\"\n    ></iron-ajax>\n    <paper-toast id=\"toast\" horizontal-align=\"left\"></paper-toast>\n    <hax-store\n      hidden=\"\"\n      app-store=\"[[appStoreConnection]]\"\n      valid-tag-list=\"[[allowedTags]]\"\n    ></hax-store>\n    <hax-autoloader id=\"loader\" hidden=\"\"></hax-autoloader>\n    <hax-panel\n      id=\"panel\"\n      hide-export-button=\"{{hideExportButton}}\"\n      hide-panel-ops=\"[[hidePanelOps]]\"\n      hide-preferences-button=\"[[hidePreferencesButton]]\"\n      align=\"[[align]]\"\n    ></hax-panel>\n    <hax-body id=\"body\" context-offset-left=\"[[bodyOffsetLeft]]\"></hax-body>\n    <hax-manager></hax-manager>\n    <hax-app-picker></hax-app-picker>\n    <hax-export-dialog></hax-export-dialog>\n    <cms-token></cms-token>\n    <cms-views></cms-views>\n    <cms-block></cms-block>\n    <cms-entity></cms-entity>\n  `,\n\n  is: \"cms-hax\",\n\n  properties: {\n    /**\n     * Default the panel to open\n     */\n    openDefault: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Hide the export button, showing it is good for developers\n     * or those doing QA testing of new elements.\n     */\n    hideExportButton: {\n      type: Boolean,\n      value: true\n    },\n    /**\n     * Hide the panel operations (save and cancel),\n     */\n    hidePanelOps: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Hide preferences button\n     */\n    hidePreferencesButton: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Direction to align the hax edit panel\n     */\n    align: {\n      type: String,\n      value: \"right\"\n    },\n    /**\n     * allowed Tags, usually as dictated by the input filtering\n     * layer of the backend system that HAX is riding on.\n     * While not fullproof, this at least will enforce front-end\n     * filtering to match what actually is going to be allowed\n     * to be saved in the first place.\n     */\n    allowedTags: {\n      type: Array\n    },\n    /**\n     * Location to save content to.\n     */\n    endPoint: {\n      type: String\n    },\n    /**\n     * Method to save content.\n     */\n    method: {\n      type: String,\n      value: \"PUT\"\n    },\n    /**\n     * Page data, body of text as a string.\n     */\n    updatePageData: {\n      type: String\n    },\n    /**\n     * Connection object for talking to an app store.\n     */\n    appStoreConnection: {\n      type: Object\n    },\n    /**\n     * Offset from the left of the body field\n     */\n    bodyOffsetLeft: {\n      type: Number,\n      value: -164\n    },\n    /**\n     * State of the panel\n     */\n    editMode: {\n      type: Boolean,\n      reflectToAttribute: true\n    },\n    /**\n     * syncBody\n     */\n    syncBody: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag\n     */\n    bodyValue: {\n      type: String,\n      value: \"\"\n    },\n    /**\n     * Flag to hide the toast.\n     */\n    hideMessage: {\n      type: Boolean,\n      value: false\n    },\n    /**\n     * Optional URL to redirect to once we save.\n     */\n    redirectLocation: {\n      type: String\n    },\n    /**\n     * Option to redirect once we save successfully\n     */\n    redirectOnSave: {\n      type: Boolean,\n      computed: \"_computeRedirectOnSave(redirectLocation)\"\n    },\n    /**\n     * Reference to activeBody.\n     */\n    activeHaxBody: {\n      type: Object,\n      observer: \"_activeHaxBodyUpdated\"\n    },\n    __imported: {\n      type: Boolean,\n      value: false\n    }\n  },\n\n  /**\n   * Ensure we've imported our content on initial setup\n   */\n  _activeHaxBodyUpdated: function(newValue, oldValue) {\n    // ensure we import our content once we get an initial registration of active body\n    if (newValue != null && !this.__imported) {\n      this.__imported = true;\n      // see what's inside of this, in a template tag\n      let children = this.queryEffectiveChildren(\"template\");\n      // convert this template content into the real thing\n      // this helps with correctly preserving everything on the way down\n      if (typeof children !== typeof undefined) {\n        newValue.importContent(children.innerHTML);\n      }\n    }\n  },\n\n  /**\n   * Calculate if we have anywhere to redirect to.\n   */\n  _computeRedirectOnSave: function(redirectLocation) {\n    if (typeof redirectLocation !== typeof undefined) {\n      return true;\n    }\n    return false;\n  },\n\n  /**\n   * Created life cycle\n   */\n  created: function() {\n    document.body.addEventListener(\n      \"hax-store-property-updated\",\n      this._haxStorePropertyUpdated.bind(this)\n    );\n  },\n\n  /**\n   * Attached to the DOM; now we can fire event to the store that\n   * we exist and are the thing being edited.\n   */\n  attached: function() {\n    this.__lock = false;\n    document.body.addEventListener(\"hax-save\", this._saveFired.bind(this));\n    // open things by default and set state for edit mode\n    if (this.openDefault) {\n      window.HaxStore.write(\"editMode\", true, this);\n    }\n    // notice ANY change to body and bubble up, only when we are attached though\n    if (this.syncBody) {\n      FlattenedNodesObserver(this.$.body, info => {\n        if (!this.__lock) {\n          this.__lock = true;\n          this.fire(\n            \"hax-body-content-changed\",\n            window.HaxStore.instance.activeHaxBody.haxToContent()\n          );\n          setTimeout(() => {\n            this.__lock = false;\n          }, 100);\n        }\n      });\n    }\n  },\n\n  /**\n   * Store updated, sync.\n   */\n  _haxStorePropertyUpdated: function(e) {\n    if (\n      e.detail &&\n      typeof e.detail.value !== typeof undefined &&\n      e.detail.property\n    ) {\n      if (typeof e.detail.value === \"object\") {\n        this.set(e.detail.property, null);\n      }\n      this.set(e.detail.property, e.detail.value);\n      this.notifyPath(e.detail.property);\n    }\n  },\n\n  /**\n   * _saveFired\n   */\n  _saveFired: function(e) {\n    // generate sanitized content\n    this.updatePageData = window.HaxStore.instance.activeHaxBody.haxToContent();\n    // send the request\n    this.$.pageupdateajax.generateRequest();\n  },\n\n  /**\n   * _handleUpdateResponse\n   */\n  _handleUpdateResponse: function(e) {\n    if (!this.hideMessage) {\n      this.$.toast.show(\"Saved!\");\n      // support auto redirecting on save if that's been requested\n      // in the integration point\n      if (this.redirectOnSave) {\n        setTimeout(() => {\n          // toggle so state is correct when we go to save\n          this.$.panel.toggle();\n          // trigger redirect\n          window.location = this.redirectLocation;\n        }, 1000);\n      }\n    }\n  }\n});\nexport { CmsHax };\n"],"names":["$_documentContainer","document","createElement","setAttribute","innerHTML","head","appendChild","is","behaviors","HAXBehaviors","PropertiesBehaviors","properties","loading","type","Boolean","reflectToAttribute","value","token","String","tokenEndPoint","bodyData","Object","computed","observer","_clickInvoked","tokenData","tokenPrefix","tokenSuffix","_displayMode","_displayModeChanged","newValue","oldValue","_typeof","this","replace","_generateBodyData","$editingState","cachedResponse","_handleTokenResponse","content","getElementById","editEndpoint","editText","addEventListener","__tokenClicked","bind","wipeSlot","dom","async","run","template","_this","importNode","element","firstChild","removeChild","_tokenChanged","window","cmstokenEndPoint","_this2","$","tokenrequest","generateRequest","_windowVisibilityChanged","e","detached","removeEventListener","attached","getEffectiveChildNodes","length","_this3","setHaxProperties","canScale","canPosition","canEditSource","gizmo","title","description","icon","color","groups","handles","meta","author","settings","quick","configure","property","inputMethod","advanced","saveOptions","unsetAttributes","postProcessgetHaxJSONSchema","schema","href","slot","i","component","name","id","target","blockModule","blockDelta","blockEndPoint","blockData","blockPrefix","blockSuffix","module","delta","_handleblockResponse","frag","newNode","cloneNode","setTimeout","_blockChanged","cmsblockEndPoint","blockrequest","block","viewsName","viewsDisplay","viewsEndPoint","viewsData","viewsPrefix","viewsSuffix","display","_handleviewsResponse","_viewsChanged","cmsviewsEndPoint","viewsrequest","views","entityType","entityId","entityDisplayMode","entityEndPoint","entityData","entityPrefix","entitySuffix","display_mode","_handleEntityResponse","_entityChanged","cmsentityEndPoint","entityrequest","entity","options","node","user","file","CmsHax","Polymer","_template","html","openDefault","hideExportButton","hidePanelOps","hidePreferencesButton","align","allowedTags","Array","endPoint","method","updatePageData","appStoreConnection","bodyOffsetLeft","Number","editMode","syncBody","bodyValue","hideMessage","redirectLocation","redirectOnSave","activeHaxBody","__imported","_activeHaxBodyUpdated","children","queryEffectiveChildren","importContent","_computeRedirectOnSave","created","body","_haxStorePropertyUpdated","__lock","_saveFired","HaxStore","write","FlattenedNodesObserver","info","fire","instance","haxToContent","detail","set","notifyPath","pageupdateajax","_handleUpdateResponse","toast","show","panel","toggle","location"],"mappings":"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"}