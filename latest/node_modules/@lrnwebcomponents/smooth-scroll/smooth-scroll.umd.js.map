{"version":3,"file":"smooth-scroll.umd.js","sources":["smooth-scroll.umd.js"],"sourcesContent":["import { Polymer } from \"@polymer/polymer/polymer-legacy.js\";\n/**\n`smooth-scroll`\n\n@demo demo/index.html\nSmooth scroll an element\n\n@microcopy - this is element provides methods to be called for smooth scrolling\n - scroll()\n*/\nlet SmoothScroll = Polymer({\n  is: \"smooth-scroll\",\n  properties: {},\n  /**\n   * Smooth scroll an elment into view\n   * @target {Node} DOM node object\n   * @options {object}\n   *           - align (top, center, bottom)\n   *           - delay\n   *           - duration\n   *           - scrollElement\n   */\n  scroll: function(target, options) {\n    // define default options\n    const defaultOptions = {\n      align: \"top\",\n      delay: 0,\n      duration: 300,\n      scrollElement: window\n    };\n    // combine default and user defined options\n    const _options = Object.assign({}, defaultOptions, options);\n    // get the bound client\n    const targetPosition = target.getBoundingClientRect();\n    // get the scroll Element position\n    const scrollElementPosition = _options.scrollElement.getBoundingClientRect();\n    // get the height of the scroll Element\n    const scrollElementHeight =\n      _options.scrollElement.getBoundingClientRect().bottom -\n      _options.scrollElement.getBoundingClientRect().top;\n    // get the height of the element target\n    const targetHeight = targetPosition.bottom - targetPosition.top;\n    // get the offset of the scroll Element\n    const startPosition = _options.scrollElement.scrollTop;\n    // get the distance between the top of the scroll and the top of the bounding rectangles\n    let distance =\n      target.getBoundingClientRect().top -\n      _options.scrollElement.getBoundingClientRect().top;\n    /**\n     * @todo weird trick to position the scroll over the target\n     * I'm still not sure why this works :)\n     */\n    distance = distance - scrollElementHeight / 2;\n\n    // see where the user wants to align the scroll\n    switch (_options.align) {\n      case \"center\":\n        distance = distance + targetHeight / 2;\n        break;\n      case \"bottom\":\n        distance = distance + targetHeight;\n        break;\n      default:\n        break;\n    }\n\n    // record start time\n    let startTime = null;\n\n    // internal animation function\n    function animation(currentTime) {\n      if (startTime === null) startTime = currentTime;\n      let timeElapsed = currentTime - startTime;\n      let run = ease(timeElapsed, startPosition, distance, _options.duration);\n      _options.scrollElement.scrollTop = run;\n      if (timeElapsed < _options.duration) requestAnimationFrame(animation);\n    }\n\n    // define a ease-in-out\n    function ease(t, b, c, d) {\n      if ((t /= d / 2) < 1) return (c / 2) * t * t + b;\n      return (-c / 2) * (--t * (t - 2) - 1) + b;\n    }\n\n    // start animation\n    requestAnimationFrame(animation);\n  }\n});\nexport { SmoothScroll };\n"],"names":["SmoothScroll","Polymer","is","properties","scroll","target","options","defaultOptions","align","delay","duration","scrollElement","window","_options","Object","assign","targetPosition","getBoundingClientRect","scrollElementHeight","bottom","top","targetHeight","startPosition","scrollTop","distance","startTime","requestAnimationFrame","animation","currentTime","t","b","c","d","timeElapsed","run"],"mappings":"2SAUIA,EAAeC,UAAQ,CACzBC,GAAI,gBACJC,WAAY,GAUZC,OAAQ,SAASC,EAAQC,OAEjBC,EAAiB,CACrBC,MAAO,MACPC,MAAO,EACPC,SAAU,IACVC,cAAeC,QAGXC,EAAWC,OAAOC,OAAO,GAAIR,EAAgBD,GAE7CU,EAAiBX,EAAOY,wBAIxBC,GAFwBL,EAASF,cAAcM,wBAGnDJ,EAASF,cAAcM,wBAAwBE,OAC/CN,EAASF,cAAcM,wBAAwBG,KAE3CC,EAAeL,EAAeG,OAASH,EAAeI,IAEtDE,EAAgBT,EAASF,cAAcY,UAEzCC,EACFnB,EAAOY,wBAAwBG,IAC/BP,EAASF,cAAcM,wBAAwBG,WAKjDI,GAAsBN,EAAsB,EAGpCL,EAASL,WACV,SACHgB,GAAsBH,EAAe,YAElC,SACHG,GAAsBH,MAOtBI,EAAY,KAkBhBC,+BAfSC,EAAUC,GACC,OAAdH,IAAoBA,EAAYG,OAQxBC,EAAGC,EAAGC,EAAGC,EAPjBC,EAAcL,EAAcH,EAC5BS,GAMQL,EANGI,EAMAH,EANaR,EAMVS,EANyBP,EAMtBQ,EANgCnB,EAASH,UAOzDmB,GAAKG,EAAI,GAAK,EAAWD,EAAI,EAAKF,EAAIA,EAAIC,GACtCC,EAAI,KAAQF,GAAKA,EAAI,GAAK,GAAKC,GAPxCjB,EAASF,cAAcY,UAAYW,EAC/BD,EAAcpB,EAASH,UAAUgB,sBAAsBC"}