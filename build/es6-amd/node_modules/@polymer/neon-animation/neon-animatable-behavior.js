define(["exports","../polymer/polymer-legacy.js"],(function(_exports,_polymerLegacy){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.NeonAnimatableBehavior=void 0;
/**
  @license
  Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at
  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
  part of the polymer project is also subject to an additional IP rights grant
  found at http://polymer.github.io/PATENTS.txt
  */
const NeonAnimatableBehavior={properties:{animationConfig:{type:Object},entryAnimation:{observer:"_entryAnimationChanged",type:String},exitAnimation:{observer:"_exitAnimationChanged",type:String}},_entryAnimationChanged:function(){this.animationConfig=this.animationConfig||{},this.animationConfig.entry=[{name:this.entryAnimation,node:this}]},_exitAnimationChanged:function(){this.animationConfig=this.animationConfig||{},this.animationConfig.exit=[{name:this.exitAnimation,node:this}]},_copyProperties:function(config1,config2){for(var property in config2)config1[property]=config2[property]},_cloneConfig:function(config){var clone={isClone:!0};return this._copyProperties(clone,config),clone},_getAnimationConfigRecursive:function(type,map,allConfigs){var thisConfig;if(this.animationConfig)if(this.animationConfig.value&&"function"==typeof this.animationConfig.value)this._warn(this._logf("playAnimation","Please put 'animationConfig' inside of your components 'properties' object instead of outside of it."));else if(thisConfig=type?this.animationConfig[type]:this.animationConfig,Array.isArray(thisConfig)||(thisConfig=[thisConfig]),thisConfig)for(var config,index=0;config=thisConfig[index];index++)if(config.animatable)config.animatable._getAnimationConfigRecursive(config.type||type,map,allConfigs);else if(config.id){var cachedConfig=map[config.id];cachedConfig?(cachedConfig.isClone||(map[config.id]=this._cloneConfig(cachedConfig),cachedConfig=map[config.id]),this._copyProperties(cachedConfig,config)):map[config.id]=config}else allConfigs.push(config)},getAnimationConfig:function(type){var map={},allConfigs=[];for(var key in this._getAnimationConfigRecursive(type,map,allConfigs),map)allConfigs.push(map[key]);return allConfigs}};_exports.NeonAnimatableBehavior=NeonAnimatableBehavior}));