define(["exports","../utils/boot.js","../mixins/property-effects.js","../mixins/mutable-data.js","../mixins/gesture-event-listeners.js","../utils/settings.js","../utils/wrap.js","../utils/hide-template-controls.js"],(function(e,t,i,s,r,n,l,o){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.DomBind=void 0;
/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
const h=(0,r.GestureEventListeners)((0,s.OptionalMutableData)((0,i.PropertyEffects)(HTMLElement)));class DomBind extends h{static get observedAttributes(){return["mutable-data"]}constructor(){if(super(),n.strictTemplatePolicy)throw new Error("strictTemplatePolicy: dom-bind not allowed");this.root=null,this.$=null,this.__children=null}attributeChangedCallback(e,t,i,s){this.mutableData=!0}connectedCallback(){(0,o.hideElementsGlobally)()||(this.style.display="none"),this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){(0,l.wrap)((0,l.wrap)(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let e=0;e<this.__children.length;e++)this.root.appendChild(this.__children[e])}render(){let e;if(!this.__children){if(e=e||this.querySelector("template"),!e){let t=new MutationObserver(()=>{if(e=this.querySelector("template"),!e)throw new Error("dom-bind requires a <template> child");t.disconnect(),this.render()});return void t.observe(this,{childList:!0})}this.root=this._stampTemplate(e),this.$=this.root.$,this.__children=[];for(let e=this.root.firstChild;e;e=e.nextSibling)this.__children[this.__children.length]=e;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}}e.DomBind=DomBind,customElements.define("dom-bind",DomBind)}));