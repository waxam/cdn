define(["exports","./boot.js"],(function(_exports,_boot){
/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
function isPath(path){return path.indexOf(".")>=0}function isAncestor(base,path){return 0===base.indexOf(path+".")}function isDescendant(base,path){return 0===path.indexOf(base+".")}function normalize(path){if(Array.isArray(path)){let parts=[];for(let i=0;i<path.length;i++){let args=path[i].toString().split(".");for(let j=0;j<args.length;j++)parts.push(args[j])}return parts.join(".")}return path}function split(path){return Array.isArray(path)?normalize(path).split("."):path.toString().split(".")}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.isPath=isPath,_exports.root=function root(path){let dotIndex=path.indexOf(".");if(-1===dotIndex)return path;return path.slice(0,dotIndex)},_exports.isAncestor=isAncestor,_exports.isDescendant=isDescendant,_exports.translate=function translate(base,newBase,path){return newBase+path.slice(base.length)},_exports.matches=function matches(base,path){return base===path||isAncestor(base,path)||isDescendant(base,path)},_exports.normalize=normalize,_exports.split=split,_exports.get=function get(root,path,info){let prop=root,parts=split(path);for(let i=0;i<parts.length;i++){if(!prop)return;let part=parts[i];prop=prop[part]}info&&(info.path=parts.join("."));return prop},_exports.set=function set(root,path,value){let prop=root,parts=split(path),last=parts[parts.length-1];if(parts.length>1){for(let i=0;i<parts.length-1;i++){let part=parts[i];if(prop=prop[part],!prop)return}prop[last]=value}else prop[path]=value;return parts.join(".")},_exports.isDeep=void 0;const isDeep=isPath;_exports.isDeep=isDeep}));