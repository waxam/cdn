define(["exports","./boot.js"],function(_exports,_boot){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.microTask=_exports.idlePeriod=_exports.animationFrame=_exports.timeOut=void 0;let microtaskCurrHandle=0,microtaskLastHandle=0,microtaskCallbacks=[],microtaskNodeContent=0,microtaskNode=document.createTextNode("");new window.MutationObserver(function microtaskFlush(){const len=microtaskCallbacks.length;for(let i=0;i<len;i++){let cb=microtaskCallbacks[i];if(cb)try{cb()}catch(e){setTimeout(()=>{throw e})}}microtaskCallbacks.splice(0,len),microtaskLastHandle+=len}).observe(microtaskNode,{characterData:!0});const timeOut={after:delay=>({run:fn=>window.setTimeout(fn,delay),cancel(handle){window.clearTimeout(handle)}}),run:(fn,delay)=>window.setTimeout(fn,delay),cancel(handle){window.clearTimeout(handle)}};_exports.timeOut=timeOut;const animationFrame={run:fn=>window.requestAnimationFrame(fn),cancel(handle){window.cancelAnimationFrame(handle)}};_exports.animationFrame=animationFrame;const idlePeriod={run:fn=>window.requestIdleCallback?window.requestIdleCallback(fn):window.setTimeout(fn,16),cancel(handle){window.cancelIdleCallback?window.cancelIdleCallback(handle):window.clearTimeout(handle)}};_exports.idlePeriod=idlePeriod;const microTask={run:callback=>(microtaskNode.textContent=microtaskNodeContent++,microtaskCallbacks.push(callback),microtaskCurrHandle++),cancel(handle){const idx=handle-microtaskLastHandle;if(idx>=0){if(!microtaskCallbacks[idx])throw new Error("invalid async handle: "+handle);microtaskCallbacks[idx]=null}}};_exports.microTask=microTask});