define(["exports","./boot.js"],(function(e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.microTask=e.idlePeriod=e.animationFrame=e.timeOut=void 0;
/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
let t=0,o=0,i=[],a=0,c=document.createTextNode("");new window.MutationObserver((function microtaskFlush(){const e=i.length;for(let t=0;t<e;t++){let e=i[t];if(e)try{e()}catch(n){setTimeout(()=>{throw n})}}i.splice(0,e),o+=e})).observe(c,{characterData:!0});const r={after:e=>({run:n=>window.setTimeout(n,e),cancel(e){window.clearTimeout(e)}}),run:(e,n)=>window.setTimeout(e,n),cancel(e){window.clearTimeout(e)}};e.timeOut=r;const l={run:e=>window.requestAnimationFrame(e),cancel(e){window.cancelAnimationFrame(e)}};e.animationFrame=l;const w={run:e=>window.requestIdleCallback?window.requestIdleCallback(e):window.setTimeout(e,16),cancel(e){window.cancelIdleCallback?window.cancelIdleCallback(e):window.clearTimeout(e)}};e.idlePeriod=w;const d={run:e=>(c.textContent=a++,i.push(e),t++),cancel(e){const n=e-o;if(n>=0){if(!i[n])throw new Error("invalid async handle: "+e);i[n]=null}}};e.microTask=d}));