define(["exports","./boot.js"],(function(e,t){"use strict";
/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
function newSplice(e,t,n){return{index:e,removed:t,addedCount:n}}Object.defineProperty(e,"__esModule",{value:!0}),e.calculateSplices=function calculateSplices(e,t){return function calcSplices(e,t,n,r,u,l){let i,c=0,s=0,o=Math.min(n-t,l-u);0==t&&0==u&&(c=function sharedPrefix(e,t,n){for(let r=0;r<n;r++)if(!equals(e[r],t[r]))return r;return n}(e,r,o));n==e.length&&l==r.length&&(s=function sharedSuffix(e,t,n){let r=e.length,u=t.length,l=0;for(;l<n&&equals(e[--r],t[--u]);)l++;return l}(e,r,o-c));if(u+=c,l-=s,(n-=s)-(t+=c)==0&&l-u==0)return[];if(t==n){for(i=newSplice(t,[],0);u<l;)i.removed.push(r[u++]);return[i]}if(u==l)return[newSplice(t,[],n-t)];let f=function spliceOperationsFromEditDistances(e){let t=e.length-1,n=e[0].length-1,r=e[t][n],u=[];for(;t>0||n>0;){if(0==t){u.push(2),n--;continue}if(0==n){u.push(3),t--;continue}let l,i=e[t-1][n-1],c=e[t-1][n],s=e[t][n-1];l=c<s?c<i?c:i:s<i?s:i,l==i?(i==r?u.push(0):(u.push(1),r=i),t--,n--):l==c?(u.push(3),t--,r=c):(u.push(2),n--,r=s)}return u.reverse(),u}(function calcEditDistances(e,t,n,r,u,l){let i=l-u+1,c=n-t+1,s=new Array(i);for(let o=0;o<i;o++)s[o]=new Array(c),s[o][0]=o;for(let o=0;o<c;o++)s[0][o]=o;for(let o=1;o<i;o++)for(let n=1;n<c;n++)if(equals(e[t+n-1],r[u+o-1]))s[o][n]=s[o-1][n-1];else{let e=s[o-1][n]+1,t=s[o][n-1]+1;s[o][n]=e<t?e:t}return s}(e,t,n,r,u,l));i=void 0;let a=[],h=t,p=u;for(let d=0;d<f.length;d++)switch(f[d]){case 0:i&&(a.push(i),i=void 0),h++,p++;break;case 1:i||(i=newSplice(h,[],0)),i.addedCount++,h++,i.removed.push(r[p]),p++;break;case 2:i||(i=newSplice(h,[],0)),i.addedCount++,h++;break;case 3:i||(i=newSplice(h,[],0)),i.removed.push(r[p]),p++}i&&a.push(i);return a}(e,0,e.length,t,0,t.length)};function equals(e,t){return e===t}}));