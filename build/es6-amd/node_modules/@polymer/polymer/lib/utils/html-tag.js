define(["exports","./boot.js"],(function(_exports,_boot){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.htmlLiteral=_exports.html=void 0;
/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
class LiteralString{constructor(string){this.value=string.toString()}toString(){return this.value}}function literalValue(value){if(value instanceof LiteralString)return value.value;throw new Error(`non-literal value passed to Polymer's htmlLiteral function: ${value}`)}_exports.html=function html(strings,...values){const template=document.createElement("template");return template.innerHTML=values.reduce((acc,v,idx)=>acc+function htmlValue(value){if(value instanceof HTMLTemplateElement)return value.innerHTML;if(value instanceof LiteralString)return literalValue(value);throw new Error(`non-template value passed to Polymer's html function: ${value}`)}(v)+strings[idx+1],strings[0]),template};_exports.htmlLiteral=function(strings,...values){return new LiteralString(values.reduce((acc,v,idx)=>acc+literalValue(v)+strings[idx+1],strings[0]))}}));