define(["exports","../utils/mixin.js"],(function(_exports,_mixin){
/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
function mutablePropertyChange(inst,property,value,old,mutableData){let isObject;mutableData&&(isObject="object"==typeof value&&null!==value,isObject&&(old=inst.__dataTemp[property]));let shouldChange=old!==value&&(old==old||value==value);return isObject&&shouldChange&&(inst.__dataTemp[property]=value),shouldChange}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.OptionalMutableData=_exports.MutableData=void 0;const MutableData=(0,_mixin.dedupingMixin)(superClass=>class MutableData extends superClass{_shouldPropertyChange(property,value,old){return mutablePropertyChange(this,property,value,old,!0)}});_exports.MutableData=MutableData;const OptionalMutableData=(0,_mixin.dedupingMixin)(superClass=>class OptionalMutableData extends superClass{static get properties(){return{mutableData:Boolean}}_shouldPropertyChange(property,value,old){return mutablePropertyChange(this,property,value,old,this.mutableData)}});_exports.OptionalMutableData=OptionalMutableData,MutableData._mutablePropertyChange=mutablePropertyChange}));