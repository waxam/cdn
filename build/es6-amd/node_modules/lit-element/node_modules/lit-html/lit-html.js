define(["exports", "./lib/default-template-processor.js", "./lib/template-result.js", "./lib/directive.js", "./lib/dom.js", "./lib/part.js", "./lib/parts.js", "./lib/render.js", "./lib/template-factory.js", "./lib/template-instance.js", "./lib/template.js"], function (_exports, _defaultTemplateProcessor, _templateResult, _directive, _dom, _part, _parts, _render, _templateFactory, _templateInstance, _template) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "DefaultTemplateProcessor", {
    enumerable: true,
    get: function () {
      return _defaultTemplateProcessor.DefaultTemplateProcessor;
    }
  });
  Object.defineProperty(_exports, "defaultTemplateProcessor", {
    enumerable: true,
    get: function () {
      return _defaultTemplateProcessor.defaultTemplateProcessor;
    }
  });
  Object.defineProperty(_exports, "SVGTemplateResult", {
    enumerable: true,
    get: function () {
      return _templateResult.SVGTemplateResult;
    }
  });
  Object.defineProperty(_exports, "TemplateResult", {
    enumerable: true,
    get: function () {
      return _templateResult.TemplateResult;
    }
  });
  Object.defineProperty(_exports, "directive", {
    enumerable: true,
    get: function () {
      return _directive.directive;
    }
  });
  Object.defineProperty(_exports, "isDirective", {
    enumerable: true,
    get: function () {
      return _directive.isDirective;
    }
  });
  Object.defineProperty(_exports, "removeNodes", {
    enumerable: true,
    get: function () {
      return _dom.removeNodes;
    }
  });
  Object.defineProperty(_exports, "reparentNodes", {
    enumerable: true,
    get: function () {
      return _dom.reparentNodes;
    }
  });
  Object.defineProperty(_exports, "noChange", {
    enumerable: true,
    get: function () {
      return _part.noChange;
    }
  });
  Object.defineProperty(_exports, "nothing", {
    enumerable: true,
    get: function () {
      return _part.nothing;
    }
  });
  Object.defineProperty(_exports, "AttributeCommitter", {
    enumerable: true,
    get: function () {
      return _parts.AttributeCommitter;
    }
  });
  Object.defineProperty(_exports, "AttributePart", {
    enumerable: true,
    get: function () {
      return _parts.AttributePart;
    }
  });
  Object.defineProperty(_exports, "BooleanAttributePart", {
    enumerable: true,
    get: function () {
      return _parts.BooleanAttributePart;
    }
  });
  Object.defineProperty(_exports, "EventPart", {
    enumerable: true,
    get: function () {
      return _parts.EventPart;
    }
  });
  Object.defineProperty(_exports, "isIterable", {
    enumerable: true,
    get: function () {
      return _parts.isIterable;
    }
  });
  Object.defineProperty(_exports, "isPrimitive", {
    enumerable: true,
    get: function () {
      return _parts.isPrimitive;
    }
  });
  Object.defineProperty(_exports, "NodePart", {
    enumerable: true,
    get: function () {
      return _parts.NodePart;
    }
  });
  Object.defineProperty(_exports, "PropertyCommitter", {
    enumerable: true,
    get: function () {
      return _parts.PropertyCommitter;
    }
  });
  Object.defineProperty(_exports, "PropertyPart", {
    enumerable: true,
    get: function () {
      return _parts.PropertyPart;
    }
  });
  Object.defineProperty(_exports, "parts", {
    enumerable: true,
    get: function () {
      return _render.parts;
    }
  });
  Object.defineProperty(_exports, "render", {
    enumerable: true,
    get: function () {
      return _render.render;
    }
  });
  Object.defineProperty(_exports, "templateCaches", {
    enumerable: true,
    get: function () {
      return _templateFactory.templateCaches;
    }
  });
  Object.defineProperty(_exports, "templateFactory", {
    enumerable: true,
    get: function () {
      return _templateFactory.templateFactory;
    }
  });
  Object.defineProperty(_exports, "TemplateInstance", {
    enumerable: true,
    get: function () {
      return _templateInstance.TemplateInstance;
    }
  });
  Object.defineProperty(_exports, "createMarker", {
    enumerable: true,
    get: function () {
      return _template.createMarker;
    }
  });
  Object.defineProperty(_exports, "isTemplatePartActive", {
    enumerable: true,
    get: function () {
      return _template.isTemplatePartActive;
    }
  });
  Object.defineProperty(_exports, "Template", {
    enumerable: true,
    get: function () {
      return _template.Template;
    }
  });
  _exports.svg = _exports.html = void 0;

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */

  /**
   *
   * Main lit-html module.
   *
   * Main exports:
   *
   * -  [[html]]
   * -  [[svg]]
   * -  [[render]]
   *
   * @module lit-html
   * @preferred
   */

  /**
   * Do not remove this comment; it keeps typedoc from misplacing the module
   * docs.
   */
  // TODO(justinfagnani): remove line when we get NodePart moving methods
  // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for lit-html usage.
  // TODO(justinfagnani): inject version number at build time
  if (typeof window !== 'undefined') {
    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.2.1');
  }
  /**
   * Interprets a template literal as an HTML template that can efficiently
   * render to and update a container.
   */


  const html = (strings, ...values) => new _templateResult.TemplateResult(strings, values, 'html', _defaultTemplateProcessor.defaultTemplateProcessor);
  /**
   * Interprets a template literal as an SVG template that can efficiently
   * render to and update a container.
   */


  _exports.html = html;

  const svg = (strings, ...values) => new _templateResult.SVGTemplateResult(strings, values, 'svg', _defaultTemplateProcessor.defaultTemplateProcessor);

  _exports.svg = svg;
});