define(["exports", "../lib/dom.js", "../lib/parts.js", "../lit-html.js"], function (_exports, _dom, _parts, _litHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.unsafeSVG = void 0;

  /**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // For each part, remember the value that was last rendered to the part by the
  // unsafeSVG directive, and the DocumentFragment that was last set as a value.
  // The DocumentFragment is used as a unique key to check if the last value
  // rendered to the part was with unsafeSVG. If not, we'll always re-render the
  // value passed to unsafeSVG.
  const previousValues = new WeakMap();
  /**
   * Renders the result as SVG, rather than text.
   *
   * Note, this is unsafe to use with any user-provided input that hasn't been
   * sanitized or escaped, as it may lead to cross-site-scripting
   * vulnerabilities.
   */

  const unsafeSVG = (0, _litHtml.directive)(value => part => {
    if (!(part instanceof _litHtml.NodePart)) {
      throw new Error('unsafeSVG can only be used in text bindings');
    }

    const previousValue = previousValues.get(part);

    if (previousValue !== undefined && (0, _parts.isPrimitive)(value) && value === previousValue.value && part.value === previousValue.fragment) {
      return;
    }

    const template = document.createElement('template');
    template.innerHTML = `<svg>${value}</svg>`;
    const content = template.content;
    const svgElement = content.firstChild;
    content.removeChild(svgElement);
    (0, _dom.reparentNodes)(content, svgElement.firstChild);
    const fragment = document.importNode(content, true);
    part.setValue(fragment);
    previousValues.set(part, {
      value,
      fragment
    });
  });
  _exports.unsafeSVG = unsafeSVG;
});