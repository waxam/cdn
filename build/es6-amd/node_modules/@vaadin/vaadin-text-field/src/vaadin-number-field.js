define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/elements/custom-style.js","./vaadin-text-field.js","../../../@polymer/polymer/lib/elements/dom-module.js"],function(_exports,_polymerElement,_customStyle,_vaadinTextField,_domModule){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.NumberFieldElement=void 0;/**
@license
Copyright (c) 2017 Vaadin Ltd.
This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
*/const $_documentContainer=document.createElement("template");$_documentContainer.innerHTML=`<dom-module id="vaadin-number-field-template">
  <template>
    <style>
      :host([readonly]) {
        pointer-events: none;
      }

      [part="decrease-button"]::before {
        content: "âˆ’";
      }

      [part="increase-button"]::before {
        content: "+";
      }

      [part="decrease-button"],
      [part="increase-button"] {
        -webkit-user-select: none;
        -moz-user-select: none;
        -ms-user-select: none;
        user-select: none;
      }

      /* Hide the native arrow icons */
      [part="value"]::-webkit-outer-spin-button,
      [part="value"]::-webkit-inner-spin-button {
        -webkit-appearance: none;
        margin: 0;
      }

      [part="value"] {
        /* Older Firefox versions (v47.0) requires !important */
        -moz-appearance: textfield !important;
      }
    </style>

    <div disabled\$="[[!_allowed(-1, value, min, max, step)]]" part="decrease-button" on-click="_decreaseValue" on-touchend="_decreaseButtonTouchend" hidden\$="[[!hasControls]]">
    </div>

    <div disabled\$="[[!_allowed(1, value, min, max, step)]]" part="increase-button" on-click="_increaseValue" on-touchend="_increaseButtonTouchend" hidden\$="[[!hasControls]]">
    </div>
  </template>

  
</dom-module>`;document.head.appendChild($_documentContainer.content);let memoizedTemplate;/**
* `<vaadin-number-field>` is a Polymer 2 element for number field control in forms.
*
* ```html
* <vaadin-number-field label="Number">
* </vaadin-number-field>
* ```
*
* @memberof Vaadin
* @extends Vaadin.TextFieldElement
* @demo demo/index.html
*/class NumberFieldElement extends _vaadinTextField.TextFieldElement{static get is(){return"vaadin-number-field"}static get version(){return"2.3.7"}static get properties(){return{/**
      * Set to true to display value increase/decrease controls.
      */hasControls:{type:Boolean,value:!1,reflectToAttribute:!0},/**
      * The minimum value of the field.
      */min:{type:Number,reflectToAttribue:!0},/**
       * The maximum value of the field.
       */max:{type:Number,reflectToAttribue:!0,observer:"_maxChanged"},/**
       * Specifies the allowed number intervals of the field.
       */step:{type:Number,reflectToAttribue:!0,value:1}}}static get observers(){return["_stepOrMinChanged(step, min)"]}ready(){super.ready();this.__previousValidInput=this.value||"";this.inputElement.type="number";this.inputElement.addEventListener("keydown",this.__onKeyDown.bind(this));this.inputElement.addEventListener("change",this.__onInputChange.bind(this))}_decreaseButtonTouchend(e){// Cancel the following click and focus events
e.preventDefault();this._decreaseValue()}_increaseButtonTouchend(e){// Cancel the following click and focus events
e.preventDefault();this._increaseValue()}static get template(){if(!memoizedTemplate){// Clone the superclass template
memoizedTemplate=super.template.cloneNode(!0);// Retrieve this element's dom-module template
const thisTemplate=_domModule.DomModule.import(this.is+"-template","template"),decreaseButton=thisTemplate.content.querySelector("[part=\"decrease-button\"]"),increaseButton=thisTemplate.content.querySelector("[part=\"increase-button\"]"),styles=thisTemplate.content.querySelector("style"),inputField=memoizedTemplate.content.querySelector("[part=\"input-field\"]"),prefixSlot=memoizedTemplate.content.querySelector("[name=\"prefix\"]");inputField.insertBefore(decreaseButton,prefixSlot);inputField.appendChild(increaseButton);memoizedTemplate.content.appendChild(styles)}return memoizedTemplate}_decreaseValue(){this._incrementValue(-1)}_increaseValue(){this._incrementValue(1)}_incrementValue(incr){if(this.disabled){return}let value=parseFloat(this.value);if(!this.value){if(0==this.min&&0>incr||0==this.max&&0<incr||0==this.max&&0==this.min){incr=0;value=0}else if((null==this.max||0<=this.max)&&(null==this.min||0>=this.min)){value=0}else if(0<this.min){value=this.min;if(0>this.max&&0>incr){value=this.max}incr=0}else if(0>this.max){value=this.max;if(0>incr){incr=0}else{// FIXME(yuriy): find a proper solution to make correct step back
if(this._getIncrement(1,value-this.step)>this.max){value-=2*this.step}else{value-=this.step}}}}else if(value<this.min){incr=0;value=this.min}else if(value>this.max){incr=0;value=this.max}const newValue=this._getIncrement(incr,value);if(!this.value||0==incr||this._incrementIsInsideTheLimits(incr,value)){this._setValue(newValue)}}_setValue(value){this.value=this.inputElement.value=parseFloat(value).toFixed(this.__decimals);this.dispatchEvent(new CustomEvent("change",{bubbles:!0}))}_getIncrement(incr,currentValue){let step=this.step||1,min=this.min||0;// To avoid problems with decimal math, multiplying to operate with integers.
const multiplier=Math.max(this._getMultiplier(currentValue),this._getMultiplier(step),this._getMultiplier(min));step*=multiplier;currentValue*=multiplier;min*=multiplier;const margin=(currentValue-min)%step;if(0<incr){return(currentValue-margin+step)/multiplier}else if(0>incr){return(currentValue-(margin||step))/multiplier}else{return currentValue/multiplier}}_getMultiplier(number){if(!isNaN(number)){let multiplier=1;// Increase the multiplier until the float point will disappear
while(Math.floor(number*multiplier)!==number*multiplier){multiplier=10*multiplier}return multiplier}}_incrementIsInsideTheLimits(incr,value){if(0>incr){return null==this.min||this._getIncrement(incr,value)>=this.min}else if(0<incr){return null==this.max||this._getIncrement(incr,value)<=this.max}else{return this._getIncrement(incr,value)<=this.max&&this._getIncrement(incr,value)>=this.min}}_allowed(sign){const incr=sign*(this.step||1),value=parseFloat(this.value);return!this.value||!this.disabled&&this._incrementIsInsideTheLimits(incr,value)}_maxChanged(){this.inputElement.max=this.max}_valueChanged(newVal,oldVal){// Validate value to be numeric
if(newVal&&isNaN(parseFloat(newVal).toFixed(this.__decimals))){this.value=""}else if("string"!==typeof this.value){this.value=this.value+""}super._valueChanged(this.value,oldVal)}__onKeyDown(e){if(38==e.keyCode){e.preventDefault();this._increaseValue()}else if(40==e.keyCode){e.preventDefault();this._decreaseValue()}}__onInputChange(){this.checkValidity()}_stepOrMinChanged(step,min){this.inputElement.step=step;this.inputElement.min=this.min;const countDecimalPlaces=number=>{return number?(Math.abs(number)+"").replace(/^\d*\.?(.*)?$/,"$1").length:0};// Compute number of dedimals to display in input based on provided step
this.__decimals=Math.max(countDecimalPlaces(step),countDecimalPlaces(min))}checkValidity(){// text-field mixin does not check against `min` and `max`
if(this.min!==void 0||this.max!==void 0||this.step){this.invalid=!this.inputElement.checkValidity()}return super.checkValidity()}}_exports.NumberFieldElement=NumberFieldElement;window.customElements.define(NumberFieldElement.is,NumberFieldElement)});