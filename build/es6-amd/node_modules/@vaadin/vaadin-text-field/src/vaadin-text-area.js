define(["exports","../../../@polymer/polymer/polymer-element.js","./vaadin-text-field-mixin.js","../../vaadin-element-mixin/vaadin-element-mixin.js","../../../@polymer/polymer/lib/utils/html-tag.js","../../vaadin-themable-mixin/vaadin-themable-mixin.js"],function(_exports,_polymerElement,_vaadinTextFieldMixin,_vaadinElementMixin,_htmlTag,_vaadinThemableMixin){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.TextAreaElement=void 0;class TextAreaElement extends((0,_vaadinElementMixin.ElementMixin)((0,_vaadinTextFieldMixin.TextFieldMixin)((0,_vaadinThemableMixin.ThemableMixin)(_polymerElement.PolymerElement)))){static get template(){return _htmlTag.html`
    <style include="vaadin-text-field-shared-styles">
      .vaadin-text-area-container {
        flex: auto;
        max-height: inherit; /* MSIE 11 */
        min-height: inherit; /* MSIE 11 */
      }

      /* The label and the error message should neither grow nor shrink. */
      [part="label"],
      [part="error-message"] {
        flex: none;
      }

      [part="input-field"] {
        overflow: auto;
        -webkit-overflow-scrolling: touch;
      }

      [part="value"] {
        resize: none;
      }

      [part="value"],
      [part="input-field"] ::slotted(*) {
        align-self: flex-start;
      }

      @keyframes vaadin-text-area-appear {
        to {
          opacity: 1;
        }
      }

      :host {
        animation: 1ms vaadin-text-area-appear;
      }
    </style>

    <div class="vaadin-text-area-container">

      <label part="label" on-click="focus" id="[[_labelId]]">[[label]]</label>

      <div part="input-field">

        <slot name="prefix"></slot>

        <slot name="textarea">
          <textarea part="value"></textarea>
        </slot>

        <div part="clear-button" id="clearButton" role="button" aria-label="Clear"></div>
        <slot name="suffix"></slot>

      </div>

      <div part="error-message" id="[[_errorId]]" aria-live="assertive" aria-hidden\$="[[_getErrorMessageAriaHidden(invalid, errorMessage, _errorId)]]">[[errorMessage]]</div>

    </div>
`}static get is(){return"vaadin-text-area"}static get version(){return"2.3.7"}static get observers(){return["_textAreaValueChanged(value)"]}ready(){super.ready(),this._updateHeight(),this.addEventListener("animationend",this._onAnimationEnd)}_onAnimationEnd(e){0===e.animationName.indexOf("vaadin-text-area-appear")&&this._updateHeight()}get _slottedTagName(){return"textarea"}_textAreaValueChanged(value){this._updateHeight()}_updateHeight(){const inputField=this.root.querySelector("[part=input-field]"),scrollTop=inputField.scrollTop,input=this.inputElement,inputWidth=getComputedStyle(input).width,valueLength=this.value?this.value.length:0;this._oldValueLength>=valueLength&&(input.style.maxWidth=inputWidth,input.style.height="auto",inputField.style.display="block"),this._oldValueLength=valueLength;const inputHeight=input.scrollHeight;inputHeight>input.clientHeight&&(input.style.height=inputHeight+"px"),input.style.removeProperty("max-width"),inputField.style.removeProperty("display"),inputField.scrollTop=scrollTop,this.__previousInputHeight&&this.__previousInputHeight!==inputHeight&&this.dispatchEvent(new CustomEvent("iron-resize",{bubbles:!0})),this.__previousInputHeight=inputHeight}}_exports.TextAreaElement=TextAreaElement,customElements.define(TextAreaElement.is,TextAreaElement)});