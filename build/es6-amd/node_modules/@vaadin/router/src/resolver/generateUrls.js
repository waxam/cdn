define(["exports", "./resolver.js", "../utils.js"], function (_exports, _resolver, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _resolver = babelHelpers.interopRequireDefault(_resolver);

  /**
   * Universal Router (https://www.kriasoft.com/universal-router/)
   *
   * Copyright (c) 2015-present Kriasoft.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE.txt file in the root directory of this source tree.
   */
  const {
    pathToRegexp
  } = _resolver.default;
  const cache = new Map();

  function cacheRoutes(routesByName, route, routes) {
    const name = route.name || route.component;

    if (name) {
      if (routesByName.has(name)) {
        routesByName.get(name).push(route);
      } else {
        routesByName.set(name, [route]);
      }
    }

    if (Array.isArray(routes)) {
      for (let i = 0; i < routes.length; i++) {
        const childRoute = routes[i];
        childRoute.parent = route;
        cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);
      }
    }
  }

  function getRouteByName(routesByName, routeName) {
    const routes = routesByName.get(routeName);

    if (routes && routes.length > 1) {
      throw new Error(`Duplicate route with name "${routeName}".` + ` Try seting unique 'name' route properties.`);
    }

    return routes && routes[0];
  }

  function getRoutePath(route) {
    let path = route.path;
    path = Array.isArray(path) ? path[0] : path;
    return path !== undefined ? path : '';
  }

  function generateUrls(router, options = {}) {
    if (!(router instanceof _resolver.default)) {
      throw new TypeError('An instance of Resolver is expected');
    }

    const routesByName = new Map();
    return (routeName, params) => {
      let route = getRouteByName(routesByName, routeName);

      if (!route) {
        routesByName.clear(); // clear cache

        cacheRoutes(routesByName, router.root, router.root.__children);
        route = getRouteByName(routesByName, routeName);

        if (!route) {
          throw new Error(`Route "${routeName}" not found`);
        }
      }

      let regexp = cache.get(route.fullPath);

      if (!regexp) {
        let fullPath = getRoutePath(route);
        let rt = route.parent;

        while (rt) {
          const path = getRoutePath(rt);

          if (path) {
            fullPath = path.replace(/\/$/, '') + '/' + fullPath.replace(/^\//, '');
          }

          rt = rt.parent;
        }

        const tokens = pathToRegexp.parse(fullPath);
        const toPath = pathToRegexp.tokensToFunction(tokens);
        const keys = Object.create(null);

        for (let i = 0; i < tokens.length; i++) {
          if (!(0, _utils.isString)(tokens[i])) {
            keys[tokens[i].name] = true;
          }
        }

        regexp = {
          toPath,
          keys
        };
        cache.set(fullPath, regexp);
        route.fullPath = fullPath;
      }

      let url = regexp.toPath(params, options) || '/';

      if (options.stringifyQueryParams && params) {
        const queryParams = {};
        const keys = Object.keys(params);

        for (let i = 0; i < keys.length; i++) {
          const key = keys[i];

          if (!regexp.keys[key]) {
            queryParams[key] = params[key];
          }
        }

        const query = options.stringifyQueryParams(queryParams);

        if (query) {
          url += query.charAt(0) === '?' ? query : `?${query}`;
        }
      }

      return url;
    };
  }

  var _default = generateUrls;
  _exports.default = _default;
});