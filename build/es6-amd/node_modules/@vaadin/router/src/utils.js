define(["exports"],function(_exports){function toArray(objectOrArray){return objectOrArray=objectOrArray||[],Array.isArray(objectOrArray)?objectOrArray:[objectOrArray]}function log(msg){return`[Vaadin.Router] ${msg}`}Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.toArray=toArray,_exports.log=log,_exports.logValue=function logValue(value){if("object"!=typeof value)return String(value);const stringType=Object.prototype.toString.call(value).match(/ (.*)\]$/)[1];return"Object"===stringType||"Array"===stringType?`${stringType} ${JSON.stringify(value)}`:stringType},_exports.ensureRoute=ensureRoute,_exports.ensureRoutes=function ensureRoutes(routes){toArray(routes).forEach(route=>ensureRoute(route))},_exports.loadBundle=function loadBundle(bundle){return isString(bundle)?loadScript(bundle):Promise.race(bundleKeys.filter(key=>key in bundle).map(key=>loadScript(bundle[key],key)))},_exports.fireRouterEvent=function fireRouterEvent(type,detail){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${type}`,{cancelable:"go"===type,detail:detail}))},_exports.isObject=isObject,_exports.isFunction=isFunction,_exports.isString=isString,_exports.getNotFoundError=function getNotFoundError(context){const error=new Error(log(`Page not found (${context.pathname})`));return error.context=context,error.code=404,error},_exports.notFoundResult=void 0;const MODULE="module",NOMODULE="nomodule",bundleKeys=[MODULE,NOMODULE];function ensureBundle(src){if(!src.match(/.+\.[m]?js$/))throw new Error(log(`Unsupported type for bundle "${src}": .js or .mjs expected.`))}function ensureRoute(route){if(!route||!isString(route.path))throw new Error(log('Expected route config to be an object with a "path" string property, or an array of such objects'));const bundle=route.bundle,stringKeys=["component","redirect","bundle"];if(!(isFunction(route.action)||Array.isArray(route.children)||isFunction(route.children)||isObject(bundle)||stringKeys.some(key=>isString(route[key]))))throw new Error(log(`Expected route config "${route.path}" to include either "${stringKeys.join('", "')}" `+'or "action" function but none found.'));if(bundle)if(isString(bundle))ensureBundle(bundle);else{if(!bundleKeys.some(key=>key in bundle))throw new Error(log('Expected route bundle to include either "'+NOMODULE+'" or "'+MODULE+'" keys, or both'));bundleKeys.forEach(key=>key in bundle&&ensureBundle(bundle[key]))}route.redirect&&["bundle","component"].forEach(overriddenProp=>{overriddenProp in route&&console.warn(log(`Route config "${route.path}" has both "redirect" and "${overriddenProp}" properties, `+`and "redirect" will always override the latter. Did you mean to only use "${overriddenProp}"?`))})}function loadScript(src,key){let script=document.head.querySelector('script[src="'+src+'"][async]');return script||((script=document.createElement("script")).setAttribute("src",src),key===MODULE?script.setAttribute("type",MODULE):key===NOMODULE&&script.setAttribute(NOMODULE,""),script.async=!0),new Promise((resolve,reject)=>{script.onreadystatechange=script.onload=e=>{script.__dynamicImportLoaded=!0,resolve(e)},script.onerror=e=>{script.parentNode&&script.parentNode.removeChild(script),reject(e)},null===script.parentNode?document.head.appendChild(script):script.__dynamicImportLoaded&&resolve()})}function isObject(o){return"object"==typeof o&&!!o}function isFunction(f){return"function"==typeof f}function isString(s){return"string"==typeof s}const notFoundResult=new class NotFoundResult{};_exports.notFoundResult=notFoundResult});