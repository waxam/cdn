define(["exports"],(function(e){"use strict";function toArray(e){return e=e||[],Array.isArray(e)?e:[e]}function log(e){return`[Vaadin.Router] ${e}`}Object.defineProperty(e,"__esModule",{value:!0}),e.toArray=toArray,e.log=log,e.logValue=function logValue(e){if("object"!=typeof e)return String(e);const t=Object.prototype.toString.call(e).match(/ (.*)\]$/)[1];return"Object"===t||"Array"===t?`${t} ${JSON.stringify(e)}`:t},e.ensureRoute=ensureRoute,e.ensureRoutes=function ensureRoutes(e){toArray(e).forEach(e=>ensureRoute(e))},e.loadBundle=function loadBundle(e){return isString(e)?loadScript(e):Promise.race(t.filter(t=>t in e).map(t=>loadScript(e[t],t)))},e.fireRouterEvent=function fireRouterEvent(e,t){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${e}`,{cancelable:"go"===e,detail:t}))},e.isObject=isObject,e.isFunction=isFunction,e.isString=isString,e.getNotFoundError=function getNotFoundError(e){const t=new Error(log(`Page not found (${e.pathname})`));return t.context=e,t.code=404,t},e.notFoundResult=void 0;const t=["module","nomodule"];function ensureBundle(e){if(!e.match(/.+\.[m]?js$/))throw new Error(log(`Unsupported type for bundle "${e}": .js or .mjs expected.`))}function ensureRoute(e){if(!e||!isString(e.path))throw new Error(log('Expected route config to be an object with a "path" string property, or an array of such objects'));const o=e.bundle,n=["component","redirect","bundle"];if(!(isFunction(e.action)||Array.isArray(e.children)||isFunction(e.children)||isObject(o)||n.some(t=>isString(e[t]))))throw new Error(log(`Expected route config "${e.path}" to include either "${n.join('", "')}" `+'or "action" function but none found.'));if(o)if(isString(o))ensureBundle(o);else{if(!t.some(e=>e in o))throw new Error(log('Expected route bundle to include either "nomodule" or "module" keys, or both'));t.forEach(e=>e in o&&ensureBundle(o[e]))}e.redirect&&["bundle","component"].forEach(t=>{t in e&&console.warn(log(`Route config "${e.path}" has both "redirect" and "${t}" properties, `+`and "redirect" will always override the latter. Did you mean to only use "${t}"?`))})}function loadScript(e,t){let o=document.head.querySelector('script[src="'+e+'"][async]');return o||(o=document.createElement("script"),o.setAttribute("src",e),"module"===t?o.setAttribute("type","module"):"nomodule"===t&&o.setAttribute("nomodule",""),o.async=!0),new Promise((e,t)=>{o.onreadystatechange=o.onload=t=>{o.__dynamicImportLoaded=!0,e(t)},o.onerror=e=>{o.parentNode&&o.parentNode.removeChild(o),t(e)},null===o.parentNode?document.head.appendChild(o):o.__dynamicImportLoaded&&e()})}function isObject(e){return"object"==typeof e&&!!e}function isFunction(e){return"function"==typeof e}function isString(e){return"string"==typeof e}const o=new class NotFoundResult{};e.notFoundResult=o}));