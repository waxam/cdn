define(["exports", "../../@polymer/polymer/lib/utils/async.js", "../../@polymer/polymer/lib/utils/debounce.js", "../../@polymer/polymer/lib/utils/flush.js", "./vaadin-dir-mixin.js", "../vaadin-usage-statistics/vaadin-usage-statistics.js"], function (_exports, _async, _debounce, _flush, _vaadinDirMixin, _vaadinUsageStatistics) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElementMixin = void 0;

  if (!window.Vaadin) {
    window['Vaadin'] = {};
  }
  /**
   * Array of Vaadin custom element classes that have been finalized.
   */


  window['Vaadin'].registrations = window.Vaadin.registrations || []; // Use the hack to prevent polymer-modulizer from converting to exports

  window['Vaadin'].developmentModeCallback = window.Vaadin.developmentModeCallback || {};

  window['Vaadin'].developmentModeCallback['vaadin-usage-statistics'] = function () {
    if (_vaadinUsageStatistics.usageStatistics) {
      (0, _vaadinUsageStatistics.usageStatistics)();
    }
  };

  let statsJob;
  const registered = new Set();
  /**
   * @polymerMixin
   */

  const ElementMixin = superClass => class VaadinElementMixin extends (0, _vaadinDirMixin.DirMixin)(superClass) {
    /** @protected */
    static finalize() {
      super.finalize();
      const {
        is
      } = this; // Registers a class prototype for telemetry purposes.

      if (is && !registered.has(is)) {
        window.Vaadin.registrations.push(this);
        registered.add(is);

        if (window.Vaadin.developmentModeCallback) {
          statsJob = _debounce.Debouncer.debounce(statsJob, _async.idlePeriod, () => {
            window.Vaadin.developmentModeCallback['vaadin-usage-statistics']();
          });
          (0, _flush.enqueueDebouncer)(statsJob);
        }
      }
    }

    constructor() {
      super();

      if (document.doctype === null) {
        console.warn('Vaadin components require the "standards mode" declaration. Please add <!DOCTYPE html> to the HTML document.');
      }
    }

  };

  _exports.ElementMixin = ElementMixin;
});