define(["../src/apply-shim.js","../src/template-map.js","../src/style-util.js","../src/apply-shim-utils.js","../src/common-utils.js","../src/custom-style-interface.js","../src/style-settings.js"],(function(e,t,s,l,a,i,r){
/**
  @license
  Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
  The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
  The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
  Code distributed by Google as part of the polymer project is also
  subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
  */
"use strict";e=babelHelpers.interopRequireDefault(e),t=babelHelpers.interopRequireDefault(t),l=babelHelpers.interopRequireWildcard(l);const n=new e.default;class ApplyShimInterface{constructor(){this.customStyleInterface=null,n.invalidCallback=l.invalidate}ensure(){this.customStyleInterface||window.ShadyCSS.CustomStyleInterface&&(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface.transformCallback=e=>{n.transformCustomStyle(e)},this.customStyleInterface.validateCallback=()=>{requestAnimationFrame(()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()})})}prepareTemplate(e,l){if(this.ensure(),(0,s.elementHasBuiltCss)(e))return;t.default[l]=e;let a=n.transformTemplate(e,l);e._styleAst=a}flushCustomStyles(){if(this.ensure(),!this.customStyleInterface)return;let e=this.customStyleInterface.processStyles();if(this.customStyleInterface.enqueued){for(let t=0;t<e.length;t++){let s=e[t],l=this.customStyleInterface.getStyleForCustomStyle(s);l&&n.transformCustomStyle(l)}this.customStyleInterface.enqueued=!1}}styleSubtree(e,t){if(this.ensure(),t&&(0,a.updateNativeProperties)(e,t),e.shadowRoot){this.styleElement(e);let t=e.shadowRoot.children||e.shadowRoot.childNodes;for(let e=0;e<t.length;e++)this.styleSubtree(t[e])}else{let t=e.children||e.childNodes;for(let e=0;e<t.length;e++)this.styleSubtree(t[e])}}styleElement(e){this.ensure();let{is:a}=(0,s.getIsExtends)(e),i=t.default[a];if((!i||!(0,s.elementHasBuiltCss)(i))&&i&&!l.templateIsValid(i)){l.templateIsValidating(i)||(this.prepareTemplate(i,a),l.startValidatingTemplate(i));let t=e.shadowRoot;if(t){let e=t.querySelector("style");e&&(e.__cssRules=i._styleAst,e.textContent=(0,s.toCssText)(i._styleAst))}}}styleDocument(e){this.ensure(),this.styleSubtree(document.body,e)}}if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const e=new ApplyShimInterface;let t=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(t,s,l){e.flushCustomStyles(),e.prepareTemplate(t,s)},prepareTemplateStyles(e,t,s){window.ShadyCSS.prepareTemplate(e,t,s)},prepareTemplateDom(e,t){},styleSubtree(t,s){e.flushCustomStyles(),e.styleSubtree(t,s)},styleElement(t){e.flushCustomStyles(),e.styleElement(t)},styleDocument(t){e.flushCustomStyles(),e.styleDocument(t)},getComputedStyleValue:(e,t)=>(0,a.getComputedStyleValue)(e,t),flushCustomStyles(){e.flushCustomStyles()},nativeCss:r.nativeCssVariables,nativeShadow:r.nativeShadow,cssBuild:r.cssBuild,disableRuntime:r.disableRuntime},t&&(window.ShadyCSS.CustomStyleInterface=t)}window.ShadyCSS.ApplyShim=n}));