define(["exports","meta","../../lit-element/lit-element.js","../es-global-bridge/es-global-bridge.js"],function(_exports,meta,_litElement,_esGlobalBridge){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.UndoManagerCommand=_exports.UndoManager=void 0,meta=babelHelpers.interopRequireWildcard(meta);class UndoManager extends _litElement.LitElement{static get tag(){return"undo-manager"}render(){return _litElement.html`
      <slot></slot>
    `}static get properties(){return{...super.properties,canUndo:{type:Boolean,attribute:"can-undo"},canRedo:{type:Boolean,attribute:"can-redo"},isDirty:{type:Boolean,attribute:"is-dirty"},target:{type:Object}}}constructor(){super(),this.blocked=!1,this.observer=null;const location=`${this.pathFromUrl(decodeURIComponent(meta.url))}../../undo.js/undo.js`;window.addEventListener("es-bridge-undojs-loaded",this._undoLoaded.bind(this)),window.ESGlobalBridge.requestAvailability(),window.ESGlobalBridge.instance.load("undojs",location)}pathFromUrl(url){return url.substring(0,url.lastIndexOf("/")+1)}_undoLoaded(e){this.stack=new Undo.Stack,this.stack.changed=e=>{this.canRedo=this.stack.canRedo(),this.canUndo=this.stack.canUndo(),this.isDirty=this.stack.dirty()},this.stack.changed(),window.removeEventListener("undo-js-loaded",this._undoLoaded.bind(this))}connectedCallback(){this.observer=new MutationObserver(mutations=>{setTimeout(()=>{if(this.blocked)return void(this.blocked=!1);const newValue=this.innerHTML;this.stack&&newValue!=this.startValue&&(this.stack.execute(new UndoManagerCommand(this,this.startValue,newValue)),this.startValue=newValue)},50)}),this.observer.observe(this,{attributes:!0,childList:!0,subtree:!0}),super.connectedCallback()}disconnectedCallback(){this.observer.disconnect(),super.disconnectedCallback()}firstUpdated(changedProperties){super.firstUpdated&&super.firstUpdated(changedProperties),this.startValue=this.innerHTML}updated(changedProperties){super.updated&&super.updated(changedProperties),changedProperties.forEach((oldValue,propName)=>{"canUndo"==propName&&this.dispatchEvent(new CustomEvent("can-undo-changed",{detail:{value:this[propName]}})),"canRedo"==propName&&this.dispatchEvent(new CustomEvent("can-redo-changed",{detail:{value:this[propName]}})),"isDirty"==propName&&this.dispatchEvent(new CustomEvent("is-dirty-changed",{detail:{value:this[propName]}}))})}undo(){return this.stack.undo()}redo(){return this.stack.redo()}commands(){return this.stack.commands}stackPosition(){return this.stack.stackPosition}savePosition(){return this.stack.savePosition}save(){this.stack.save()}}_exports.UndoManager=UndoManager,customElements.define("undo-manager",UndoManager);class UndoManagerCommand{constructor(el,oldValue,newValue){this.el=el,this.oldValue=oldValue,this.newValue=newValue}execute(){}undo(){this.el.blocked=!0,this.el.innerHTML=this.oldValue}redo(){this.el.blocked=!0,this.el.innerHTML=this.newValue}}_exports.UndoManagerCommand=UndoManagerCommand});