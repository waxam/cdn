define(["exports","../hax-body-behaviors/lib/HAXWiring.js","./lib/UserActionBroker.js"],function(_exports,_HAXWiring,_UserActionBroker){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.UserAction=void 0;class UserAction extends HTMLElement{get html(){return"\n<style></style>\n<slot></slot>"}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"User action",description:"track user actions and allow them to talk to xAPI stores easily",icon:"icons:touch-app",color:"green",groups:["Action"],handles:[{type:"inline",text:""}],meta:{author:"btopro",owner:"The Pennsylvania State University"}},settings:{quick:[],configure:[{attribute:"track",title:"Track when the user: ",description:"What event to react to",inputMethod:"select",options:{visibility:"Can see this",keypress:"Presses a key here",click:"Clicks this"},required:!0,icon:"icons:android"},{attribute:"every",title:"Track every event",description:"Default behavior is just to track the first occurance",inputMethod:"boolean",required:!1,icon:"icons:android"},{slot:"",title:"Content",description:"Content that can emit events",inputMethod:"code-editor",required:!1,icon:"icons:android"}],advanced:[]}}}static get properties(){let props={track:{name:"track",type:"String",value:"visibility"},every:{name:"every",type:"Boolean",value:!1},visiblelimit:{name:"visiblelimit",type:"Number",value:.5}};return super.properties&&(props=Object.assign(props,super.properties)),props}static get tag(){return"user-action"}constructor(delayRender=!1){super(),this.tag=UserAction.tag;let obj=UserAction.properties;for(let p in obj)if(obj.hasOwnProperty(p))if(this.hasAttribute(p)){let val=this.getAttribute(p);"Boolean"===obj[p].type&&(val=!0),this[p]=val}else this[p]=obj[p].value;this.UserActionBroker=new _UserActionBroker.UserActionBroker}connectedCallback(){this.__ready=!0,this.HAXWiring=new _HAXWiring.HAXWiring,this.HAXWiring.setup(UserAction.haxProperties,UserAction.tag,this)}static get observedAttributes(){return["track"]}attributeChangedCallback(attr,oldValue,newValue){if("track"===attr&&newValue)switch(newValue){case"visibility":this.observer=new IntersectionObserver(this.handleIntersectionCallback.bind(this),{root:document.rootElement,rootMargin:"0px",threshold:[0,.25,.5,.75,1]}),this.observer.observe(this);break;default:this.addEventListener(newValue,this.userActionEvent.bind(this))}}handleIntersectionCallback(entries){for(let entry of entries)Number(entry.intersectionRatio).toFixed(2)>=this.visiblelimit&&this.__ready&&this.userActionEvent({detail:"visible"})}userActionEvent(e){this.fired&&!this.every||!this.UserActionBroker.valid(this.track)?this.UserActionBroker.valid(this.track)||console.warn(this.track+" was not valid"):(this.UserActionBroker.fireAction(this.track,e,this),this.fired=!0)}}_exports.UserAction=UserAction,window.customElements.define(UserAction.tag,UserAction)});