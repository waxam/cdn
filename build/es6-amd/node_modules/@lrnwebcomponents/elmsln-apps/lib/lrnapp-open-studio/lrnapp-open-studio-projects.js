define(["exports","../../../../@polymer/polymer/polymer-element.js","../../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../lrnsys-button/lrnsys-button.js","../../../../@polymer/polymer/lib/elements/dom-if.js","../../../../@polymer/polymer/lib/elements/dom-repeat.js","../../../materializecss-styles/materializecss-styles.js","../lrnapp-studio-submission/lrnapp-studio-submission-display.js"],(function(e,t,s,i,n,r,o,a){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LrnappOpenStudioProjects=void 0;class LrnappOpenStudioProjects extends t.PolymerElement{static get template(){return t.html`
      <style include="materializecss-styles"></style>
      <style>
        :host {
          display: block;
          align-content: center;
        }
        #loading {
          width: 100%;
          z-index: 1000;
          opacity: 0.8;
          text-align: center;
          align-content: center;
          justify-content: center;
          height: 100vh;
          position: absolute;
          background-color: white;
        }
        h1.empty-title,
        h1.project-title {
          font-size: 2em;
        }
        h2.assignment-title {
          font-size: 1.5em;
          font-weight: bold;
          width: 100%;
          border-bottom: solid 1px grey;
        }
        .project-steps {
          display: flex;
          align-items: center;
        }
        .project-step {
          overflow: hidden;
          text-overflow: ellipsis;
          word-break: break-all;
          word-wrap: break-word;
        }
      </style>
      <template is="dom-if" if="[[!showSubmissions]]">
        <h1 class="empty-title black-text">
          Please select an Author and Project in order to review their portfolio
        </h1>
      </template>
      <template is="dom-if" if="[[showSubmissions]]">
        <h1 class="project-title black-text">
          [[activeProject.attributes.title]]
        </h1>
        <div class="project-steps">
          <template
            is="dom-repeat"
            items="[[activeProject.attributes.steps]]"
            as="assignment"
          >
            <lrnsys-button
              icon\$="[[_getSubmissionIcon(assignment.id)]]"
              icon-class\$="[[_getSubmissionClass(assignment.id)]]"
              on-click="_scrollToTarget"
              label="[[assignment.title]]"
              data-assignment-id\$="[[assignment.id]]"
              class="project-step"
              hover-class="blue white-text"
              raised=""
              hidden\$="[[!assignment.title]]"
            ></lrnsys-button>
          </template>
        </div>
        <template is="dom-repeat" items="[[renderSubmissions]]" as="submission">
          <a
            name="[[submission.relationships.assignment.title]]"
            class\$="assignment-[[submission.relationships.assignment.id]]"
            ><h2 class="assignment-title">
              [[submission.relationships.assignment.title]]
            </h2></a
          >
          <lrnapp-studio-submission-display
            submission="[[submission]]"
            class="ferpa-protect"
          ></lrnapp-studio-submission-display>
        </template>
      </template>
    `}static get tag(){return"lrnapp-open-studio-projects"}static get properties(){return{elmslnCourse:{type:String},elmslnSection:{type:String},basePath:{type:String},csrfToken:{type:String},endPoint:{type:String},projects:{type:Array,notify:!0},submissions:{type:Array,notify:!0},renderSubmissions:{type:Array,notify:!0,computed:"_renderSubmissionsCompute(submissions, activeProject, activeAuthorId)"},activeProjectId:{type:String,reflectToAttribute:!0,value:null},activeProject:{type:Object,computed:"_activeProjectCompute(activeProjectId, projects)"},activeAuthorId:{type:String,reflectToAttribute:!0,value:null},showSubmissions:{type:Boolean,computed:"_showSubmissions(activeProjectId, activeAuthorId)",value:!1},sourcePath:{type:String,notify:!0},basePath:{type:String,notify:!0}}}_renderSubmissionsCompute(e,t,s){if(!e||!t||!s)return null;let i=[];const n=t.attributes.steps.map(e=>e.id);return i=e.filter(e=>n.includes(e.relationships.assignment.id)),i.sort((function(e,s){for(var i=0;i<t.attributes.steps.length;i++){if(t.attributes.steps[i].id==e.relationships.assignment.id)return-1;if(t.attributes.steps[i].id==s.relationships.assignment.id)return 1}return 0})),i}_activeProjectCompute(e,t){let s=null;return t&&(s=t.find(t=>t.id===e)),s}_showSubmissions(e,t){return!(!e||!t)}_getSubmissionIcon(e){for(var t=0;t<this.renderSubmissions.length;t++)if(this.renderSubmissions[t].relationships.assignment.id==e)return"check";return"assignment"}_getSubmissionClass(e){for(var t=0;t<this.renderSubmissions.length;t++)if(this.renderSubmissions[t].relationships.assignment.id==e)return"green-text text-darken-2";return"grey-text"}_scrollToTarget(e){var t=(0,s.dom)(e).localTarget.getAttribute("data-assignment-id");this.shadowRoot.querySelector(".assignment-"+t)&&this.shadowRoot.querySelector(".assignment-"+t).scrollIntoView({block:"end",behavior:"smooth"})}_handleResponse(e){this.$.loading.hidden=!0}_toArray(e){return null==e?[]:Object.keys(e).map((function(t){return e[t]}))}}e.LrnappOpenStudioProjects=LrnappOpenStudioProjects,window.customElements.define(LrnappOpenStudioProjects.tag,LrnappOpenStudioProjects)}));