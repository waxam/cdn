define(["exports","../../../../@polymer/polymer/polymer-element.js","../../../../@polymer/iron-icons/iron-icons.js","../../../../@polymer/iron-icons/hardware-icons.js","../../../../@polymer/iron-ajax/iron-ajax.js","../../../../@polymer/polymer/lib/elements/dom-repeat.js","../../../../@polymer/paper-icon-button/paper-icon-button.js","../../../../@polymer/paper-styles/color.js","../../../paper-search/lib/paper-search-bar.js","../../../../@polymer/paper-tooltip/paper-tooltip.js","../../../../@polymer/paper-slider/paper-slider.js","../../../../@polymer/app-layout/app-layout.js","../../../../@polymer/app-layout/app-drawer/app-drawer.js","../../../../@polymer/app-layout/app-header/app-header.js","../../../../@polymer/app-layout/app-toolbar/app-toolbar.js","../../../../@polymer/app-layout/app-scroll-effects/app-scroll-effects.js","../../../../@polymer/app-route/app-location.js","../../../../@polymer/app-route/app-route.js","../../../materializecss-styles/materializecss-styles.js","../../../lrndesign-stepper/lrndesign-stepper.js","../../../lrnsys-progress/lrnsys-progress.js","../../../elmsln-loading/elmsln-loading.js","../../../page-scroll-position/page-scroll-position.js","../../../hax-body/hax-body.js","../../../material-progress/material-progress.js","../../../lrndesign-mapmenu/lrndesign-mapmenu.js"],function(_exports,_polymerElement,_ironIcons,_hardwareIcons,_ironAjax,_domRepeat,_paperIconButton,_color,_paperSearchBar,_paperTooltip,_paperSlider,_appLayout,_appDrawer,_appHeader,_appToolbar,_appScrollEffects,_appLocation,_appRoute,_materializecssStyles,_lrndesignStepper,_lrnsysProgress,_elmslnLoading,_pageScrollPosition,_haxBody,_materialProgress,_lrndesignMapmenu){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.LrnappBookProgressDashboard=void 0;/**
`lrnapp-book-progress-dashboard`
A LRN element

* @demo demo/index.html

@microcopy
  progress - the amount the student has moved through the active item(s)
  active item - pages of content the user is engaging with
  stats

*/class LrnappBookProgressDashboard extends _polymerElement.PolymerElement{static get template(){return _polymerElement.html`
      <style include="materializecss-styles">
        :host {
          display: block;
        }
        paper-progress {
          --paper-progress-active-color: var(--paper-blue-300, blue);
          --paper-progress-secondary-color: var(--paper-yellow-300, yellow);
          --paper-progress-container-color: var(--paper-green-300, green);
          height: 1.5em;
          display: inline-block;
          vertical-align: text-top;
        }
        lrndesign-avatar {
          display: inline-block;
        }
        lrnsys-progress-circle {
          font-size: 4em;
        }
        .progress-icon {
          height: 2.5em;
          width: 2.5em;
          padding: 0.25em;
          display: inline-block;
          color: white;
          background-color: var(--paper-gray-300, gray);
          border-radius: 50%;
        }
        .progress-row {
          display: block;
          width: 100%;
        }
        .progress-left,
        .progress-right {
          padding: 1em;
          display: inline-block;
          height: 10em;
          vertical-align: text-top;
        }
        material-progress-histo {
          width: 100%;
          @apply (--paper-font-body2);
        }
        material-progress-bars {
          width: 100%;
          @apply (--paper-font-body2);
        }
        material-progress-bars > .bar > span {
          text-align: end;
          font-size: 0.9em;
          @apply (--layout-flex);
        }
        .bar {
          background-color: var(--paper-deep-orange-500);
        }
        .bar.run {
          background-color: var(--paper-purple-500);
        }
        .bar.hello {
          background-color: var(--paper-cyan-500);
        }
        .bar.world {
          background-color: var(--paper-orange-500);
        }
      </style>
      <iron-ajax
        id="dataajax"
        url="[[sourcePath]]"
        params="[[requestParams]]"
        handle-as="json"
        on-response="handleDataResponse"
        last-response="{{readTimeData}}"
      ></iron-ajax>

      <div id="bodyloading" class="loading">
        <elmsln-loading color="grey-text" size="large"></elmsln-loading>
        <h3 class="loading-text">Loading content..</h3>
      </div>
      <div>
        <material-progress-bars max="128" bar-height="22" animated="">
          <div class="bar" data-value="21">
            <iron-icon icon="av:video-library"></iron-icon>
          </div>
          <div class="bar run" data-value="13">
            <iron-icon icon="maps:directions-run"></iron-icon>
          </div>
          <div class="bar hello" data-value="50">
            <iron-icon icon="maps:directions-bike"></iron-icon>
            <span>Hello</span>
          </div>
          <div class="bar world" data-value="30"><span>World</span></div>
        </material-progress-bars>
        <material-progress-histo bar-height="22" animated="">
          <div class="bar" data-value="21">
            <iron-icon icon="maps:directions-walk"></iron-icon>
          </div>
          <div class="bar run" data-value="13">
            <iron-icon icon="maps:directions-run"></iron-icon>
          </div>
          <div class="bar hello" data-value="50">
            <iron-icon icon="maps:directions-bike"></iron-icon>
            <span>Hello</span>
          </div>
          <div class="bar world" data-value="30"><span>World</span></div>
        </material-progress-histo>
        <template is="dom-repeat" items="[[dashboardItems]]" as="item">
          <div class="progress-row">
            <div class="progress-left">
              <lrnsys-progress-circle
                status="disabled"
                class="flex"
                icon="[[item.meta.icon]]"
              ></lrnsys-progress-circle>
            </div>
            <div class="progress-right">
              <h3 class="progress-item-title">[[item.attributes.title]]</h3>
              <div class="description-content">
                <div>
                  <lrn-icon icon="network" class="progress-icon"></lrn-icon>
                  <paper-progress
                    value="70"
                    secondary-progress="80"
                  ></paper-progress>
                </div>
                <div>
                  <lrndesign-avatar
                    src="[[userData.user.avatar]]"
                    label="[[userData.user.display_name]]"
                  ></lrndesign-avatar>
                  <paper-progress
                    value="70"
                    secondary-progress="80"
                  ></paper-progress>
                </div>
              </div>
            </div>
          </div>
        </template>
      </div>
    `}static get tag(){return"lrnapp-book-progress-dashboard"}static get properties(){return{/**
       * Data about the active route; this includes item type and id.
       */routeData:{type:Object,observer:"_routeDataChanged"},/**
       * Params for the request for outline/book to load.
       */requestParams:{type:Object,value:{node:null}},/**
       * Path to get data into the UI
       */sourcePath:{type:String},/**
       * Read time data
       */readTimeData:{type:Object,value:[]},/**
       * User data.
       */userData:{type:Object,value:[]},/**
       * If this is visible; useful for toggling / activating.
       */showProgress:{type:Boolean,value:!1,reflectToAttribute:!0,observer:"_showProgressChanged"}}}/**
   * Notice route data has changed.
   */_routeDataChanged(newValue,oldValue){if(typeof newValue!==typeof void 0){this.requestParams[newValue.type]=newValue.id;// if we're visible kick off the call
if(this.progressChanged){this.$.dataajax.generateRequest()}}}/**
   * Showing element state has changed
   */_showProgressChanged(newValue,oldValue){// ensure we are visible
if(newValue&&typeof this.routeData!==typeof void 0){this.$.dataajax.generateRequest()}}/**
   * Response data.
   */handleDataResponse(obj){let response=obj.detail.response.data;// show the info
this.$.bodyloading.hidden=!0;// split the data into two sets
this.userData=response.userdata;this.dashboardItems=this._toArray(response.items)}/**
   * Simple way to convert from object to array.
   */_toArray(obj){if(null==obj){return[]}return Object.keys(obj).map(function(key){return obj[key]})}}_exports.LrnappBookProgressDashboard=LrnappBookProgressDashboard;window.customElements.define(LrnappBookProgressDashboard.tag,LrnappBookProgressDashboard)});