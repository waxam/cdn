define(["exports", "../../../../lit-element/lit-element.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-item/paper-item.js", "../../../elmsln-loading/elmsln-loading.js", "./lrnapp-block-recent-comments-comment.js", "../../../materializecss-styles/lib/colors.js"], function (_exports, _litElement, _ironAjax, _paperItem, _elmslnLoading, _lrnappBlockRecentCommentsComment, _colors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappBlockRecentComments = void 0;

  class LrnappBlockRecentComments extends _litElement.LitElement {
    /**
     * LitElement constructable styles enhancement
     */
    static get styles() {
      return [_colors.materialCssStyles, _litElement.css`
        :host {
          display: block;
        }
      `];
    }

    constructor() {
      super();
      this.response = {
        data: {}
      };
    }

    render() {
      return _litElement.html`
      <div id="loading">
        <h3>Loading..</h3>
        <elmsln-loading color="grey-text" size="large"></elmsln-loading>
      </div>
      <iron-ajax
        auto=""
        url="${this.sourcePath}"
        handle-as="json"
        @last-response-changed="${this.responseChangedEvent}"
        @response="${this.handleResponse}"
      ></iron-ajax>
      ${this.response ? this._toArray(this.response.data).map(comment => _litElement.html`
              <lrnapp-block-recent-comments-comment
                .comment-user="${comment.relationships.author.data}"
                comment-title="${comment.attributes.subject}"
                action-view="${this._getViewLink(comment.relationships.node.data.id)}"
                date-updated="${comment.attributes.changed}"
                class="ferpa-protect"
              >
                ${comment.attributes.body}
              </lrnapp-block-recent-comments-comment>
            `) : ""}
    `;
    }

    responseChangedEvent(e) {
      this.response = e.detail.value;
    }

    static get tag() {
      return "lrnapp-block-recent-comments";
    }

    static get properties() {
      return {
        elmslnCourse: {
          type: String,
          attribute: "elmsln-course"
        },
        elmslnSection: {
          type: String,
          attribute: "elmsln-section"
        },
        basePath: {
          type: String,
          attribute: "base-path"
        },
        csrfToken: {
          type: String,
          attribute: "csrf-token"
        },
        endPoint: {
          type: String,
          attribute: "end-point"
        },
        sourcePath: {
          type: String,
          attribute: "source-path"
        },
        response: {
          type: Object
        }
      };
    }

    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (propName == "response") {
          // notify
          this.dispatchEvent(new CustomEvent("response-changed", {
            detail: {
              value: this[propName]
            }
          }));
        }

        if (propName == "sourcePath") {
          // notify
          this.dispatchEvent(new CustomEvent("source-path-changed", {
            detail: {
              value: this[propName]
            }
          }));
        }
      });
    }

    handleResponse(e) {
      this.shadowRoot.querySelector("#loading").hidden = true;
    }

    _getViewLink(nid) {
      return this.basePath + "lrnapp-studio-submission/submissions/" + nid;
    }

    _toArray(obj) {
      if (obj == null) {
        return [];
      }

      return Object.keys(obj).map(function (key) {
        return obj[key];
      });
    }

  }

  _exports.LrnappBlockRecentComments = LrnappBlockRecentComments;
  window.customElements.define(LrnappBlockRecentComments.tag, LrnappBlockRecentComments);
});