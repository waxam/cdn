define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MapMenuBuilder = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  class MapMenuBuilder extends _litElement.LitElement {
    /**
     * LitElement constructable styles enhancement
     */
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }
      `];
    }

    constructor() {
      super();
      this.items = [];
      new Promise((res, rej) => _require.default(["./map-menu-submenu.js"], res, rej));
      new Promise((res, rej) => _require.default(["./map-menu-item.js"], res, rej));
    }
    /**
     * LitElement life cycle - render
     */


    render() {
      return (0, _litElement.html)`
      ${this.items ? this.items.map(item => (0, _litElement.html)`
              ${item.children.length > 0 ? (0, _litElement.html)`
                    <map-menu-submenu
                      title="${item.title}"
                      id="${item.id}"
                      url="${item.slug}"
                      icon="${item.metadata && item.metadata.icon ? item.metadata.icon : ""}"
                      open="${item.metadata && item.metadata.active ? item.metadata.active : false}"
                      avatar-label="${item.metadata && item.metadata.avatarLabel ? item.metadata.avatarLabel : ""}"
                      selected="${this.selected}"
                    >
                      <map-menu-builder
                        .items="${item.children}"
                        selected="${this.selected}"
                      ></map-menu-builder>
                    </map-menu-submenu>
                  ` : (0, _litElement.html)`
                    <map-menu-item
                      title="${item.title}"
                      id="${item.id}"
                      url="${item.slug}"
                      icon="${item.metadata && item.metadata.icon ? item.metadata.icon : ""}"
                      track-icon="${item.metadata && item.metadata.accessData && item.metadata.accessData.trackIcon ? item.metadata.accessData.trackIcon : ""}"
                      active-path="${this.activePath}"
                      selected="${this.selected}"
                    ></map-menu-item>
                  `}
            `) : ""}
    `;
    }

    static get tag() {
      return "map-menu-builder";
    }

    static get properties() {
      return {
        items: {
          type: Array
        },
        selected: {
          type: String
        }
      };
    }

    createRenderRoot() {
      return this;
    }

  }

  _exports.MapMenuBuilder = MapMenuBuilder;
  window.customElements.define(MapMenuBuilder.tag, MapMenuBuilder);
});