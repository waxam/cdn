define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../@polymer/polymer/lib/elements/dom-if.js"], function (_exports, _require, _polymerElement, _domRepeat, _domIf) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MapMenuBuilder = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  class MapMenuBuilder extends _polymerElement.PolymerElement {
    constructor() {
      super();
      new Promise((res, rej) => _require.default(["./map-menu-submenu.js"], res, rej));
      new Promise((res, rej) => _require.default(["./map-menu-item.js"], res, rej));
      new Promise((res, rej) => _require.default(["./map-menu-header.js"], res, rej));
    }

    static get template() {
      return _polymerElement.html`
      <style>
        :host {
          display: block;
        }
      </style>

      <template id="domRepeat" is="dom-repeat" items="[[items]]" as="item">
        <template is="dom-if" if="[[__hasChildren(item)]]">
          <map-menu-submenu
            title="[[item.title]]"
            id="[[item.id]]"
            url="[[item.location]]"
            icon="[[item.metadata.icon]]"
            open="[[item.metadata.active]]"
            avatar-label="[[item.metadata.avatarLabel]]"
            selected="[[selected]]"
          >
            <map-menu-builder
              items="[[item.children]]"
              selected="[[selected]]"
            ></map-menu-builder>
          </map-menu-submenu>
        </template>
        <template is="dom-if" if="[[!__hasChildren(item)]]">
          <map-menu-item
            title="[[item.title]]"
            id="[[item.id]]"
            url="[[item.location]]"
            icon="[[item.metadata.icon]]"
            track-icon="[[item.metadata.accessData.trackIcon]]"
            active-path="[[activePath]]"
            selected="[[selected]]"
          ></map-menu-item>
        </template>
      </template>
    `;
    }

    static get tag() {
      return "map-menu-builder";
    }

    static get properties() {
      return {
        items: {
          type: Array,
          value: []
        },
        selected: {
          type: String
        }
      };
    }
    /**
     * Determine if a menu item has children
     */


    __hasChildren(item) {
      return item.children.length > 0;
    }
    /**
     * Determine if children are active or self
     * is active
     */


    _hasActiveChildren() {}

  }

  _exports.MapMenuBuilder = MapMenuBuilder;
  window.customElements.define(MapMenuBuilder.tag, MapMenuBuilder);
});