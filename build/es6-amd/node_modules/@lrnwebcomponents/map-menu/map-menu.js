define(["exports","../../lit-element/lit-element.js","../smooth-scroll/smooth-scroll.js","./lib/map-menu-builder.js","./lib/map-menu-container.js","../../@polymer/polymer/lib/elements/custom-style.js"],(function(_exports,_litElement,_smoothScroll,_mapMenuBuilder,_mapMenuContainer,_customStyle){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.MapMenu=void 0;
/**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
class MapMenu extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          --map-menu-active-color: rgba(0, 0, 0, 0.1);
          --map-menu-size: 1;
          --map-menu-font-size: 16px;
          display: block;
          overflow-y: scroll;
          position: relative;
          height: 100%;
          transition: 0.1s linear all;
          opacity: 1;
          background-color: transparent;
        }
        #activeindicator {
          background: var(--map-menu-active-color);
          transition: all 0.1s ease-in-out;
          position: absolute;
        }

        map-menu-container {
          padding: var(--map-menu-container-padding, 0);
        }

        /* turn default active color if indicator is on */
        :host([active-indicator]) map-menu-builder {
          --map-menu-active-color: transparent;
        }
      `]}constructor(){super(),this.disabled=!1,this.title="Content outline",this.data=null,this.items=[],this.autoScroll=!1,this.activeIndicator=!1,this.addEventListener("link-clicked",this.__linkClickedHandler.bind(this)),this.addEventListener("toggle-updated",this.__toggleUpdated.bind(this)),this.addEventListener("active-item",this.__activeItemHandler.bind(this)),this.addEventListener("map-meu-item-hidden-check",this._mapMeuItemHiddenCheckHandler.bind(this))}render(){return _litElement.html`
      <custom-style>
        <style>
          #itemslist {
            @apply --map-menu-items-list;
          }
          #activeindicator {
            @apply --map-menu-active-indicator;
          }
          map-menu-container {
            @apply --map-menu-container;
          }
        </style>
      </custom-style>
      <div id="itemslist">
        <map-menu-container>
          <div id="activeindicator"></div>
          <map-menu-builder
            id="builder"
            .items="${this.items}"
            .selected="${this.selected}"
          ></map-menu-builder>
        </map-menu-container>
      </div>
    `}static get tag(){return"map-menu"}static get properties(){return{disabled:{type:Boolean,reflect:!0},title:{type:String},data:{type:Array},manifest:{type:Object},items:{type:Array},selected:{type:String},activeItem:{type:Object},autoScroll:{type:Boolean},activeIndicator:{type:Boolean,reflect:!0,attribute:"active-indicator"}}}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"data"==propName&&this._dataChanged(this[propName]),"manifest"==propName&&this._manifestChanged(this[propName]),"activeItem"==propName&&this.refreshActiveChildren(this[propName],oldValue),["manifest","items","selected"].includes(propName)&&this.dispatchEvent(new CustomEvent(`${propName}-changed`,{detail:{value:this[propName]}}))})}__activeItemHandler(e){this.activeItem=e.detail}_mapMeuItemHiddenCheckHandler(e){const action=e.detail.action,hiddenChild=e.detail.hiddenChild;"closed"===action&&!0===hiddenChild?this.__updateActiveIndicator(this.activeItem,!0):this.__updateActiveIndicator(this.activeItem,!1)}refreshActiveChildren(newValue,oldValue){newValue&&(newValue.setAttribute("active","active"),this.activeIndicator&&this.__updateActiveIndicator(newValue),this.autoScroll&&_smoothScroll.SmoothScroll.scroll(newValue,{duration:100,scrollElement:this})),oldValue&&(oldValue.removeAttribute("active"),this.__updateActiveIndicator(newValue))}_manifestChanged(newValue){newValue&&(this.data=newValue.items)}firstUpdated(changedProperties){this.activeItem&&this.refreshActiveChildren(this.activeItem,!1)}_dataChanged(data){const items=[];data&&(data.forEach(element=>{element.parent||items.push(element)}),items.forEach((item,i)=>{this._setChildren(item,data)}),this.items=[...items])}_setChildren(item,data){const children=data.filter(d=>item.id===d.parent);item.children=children,item.children.length>0&&item.children.forEach(child=>{this._setChildren(child,data)})}__hasChildren(item){return item.children.length>0}__linkClickedHandler(e){this.selected=e.detail.id,this.dispatchEvent(new CustomEvent("selected",{bubbles:!0,cancelable:!0,composed:!0,detail:e.detail.id}))}__toggleUpdated(e){const action=e.detail.opened?"opened":"closed",target=e.path[0];void 0!==this.activeItem&&(this.__updateActiveIndicator(this.activeItem,!1),this.activeItem.dispatchEvent(new CustomEvent("map-menu-item-hidden-check",{bubbles:!0,cancelable:!0,composed:!0,detail:Object.assign({},{action:action,target:target})})))}__isInViewport(element){const scrollParent=this.__getScrollParent(element);if(!scrollParent)return!1;var elementTop=element.offsetTop,elementBottom=elementTop+element.offsetHeight,viewportTop=scrollParent.offsetTop,viewportBottom=viewportTop+scrollParent.offsetHeight;return elementBottom>viewportTop&&elementTop<viewportBottom}__getScrollParent(node){return null==node?null:node.scrollHeight>node.clientHeight?node:this.__getScrollParent(node.parentNode)}__updateActiveIndicator(element,hidden=!1){setTimeout(()=>{const activeindicator=this.shadowRoot.querySelector("#activeindicator"),left=element.offsetLeft,top=element.offsetTop,width=element.offsetWidth,height=hidden?0:element.offsetHeight;activeindicator.setAttribute("style",`width:${width}px;height:${height}px;top:${top}px;left:${left}px`)},200)}__parentsHidden(node){const parent=node.parentNode;return null==parent?null:"MAP-MENU-SUBMENU"===parent.tagName&&!parent.opened||"MAP-MENU"!==parent.tagName&&this.__parentsHidden(parent)}}_exports.MapMenu=MapMenu,window.customElements.define(MapMenu.tag,MapMenu)}));