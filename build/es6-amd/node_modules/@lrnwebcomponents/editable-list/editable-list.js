define(["exports","require","../../lit-element/lit-element.js","../simple-modal/simple-modal.js"],function(_exports,_require,_litElement,_simpleModal){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.EditableList=void 0,_require=babelHelpers.interopRequireWildcard(_require);class EditableList extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }

        #list {
          height: 100%;
        }
      `]}render(){return _litElement.html`
      <div id="list">
        ${this.items.map(item=>_litElement.html`
            <editable-list-item
              ?edit-mode="${item.metadata.canEdit}"
              ?can-edit="${item.metadata.canEdit}"
              ?can-delete="${item.metadata.canDelete}"
              value="${item.title}"
            ></editable-list-item>
          `)}
      </div>
    `}static get properties(){return{...super.properties,editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"},items:{type:Array,reflect:!1},activeElement:{type:Object}}}static get tag(){return"editable-list"}constructor(){super(),this.editMode=!1,this.items=[],window.SimpleModal.requestAvailability(),new Promise((res,rej)=>_require.default(["./lib/editable-list-item.js"],res,rej)),setTimeout(()=>{this.shadowRoot.querySelector("#list").addEventListener("editable-list-item-delete",this.triggerDeleteModal.bind(this))},0)}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"items"==propName&&this._itemsChanged(this[propName],oldValue),"editMode"==propName&&(this._editModeChanged(this[propName],oldValue),this.dispatchEvent(new CustomEvent("edit-mode-changed",{detail:{value:this[propName]}})))})}triggerDeleteModal(e){this.activeElement=e.detail.element;let c=document.createElement("div");c.innerHTML=`<div>Are you sure you want to delete <strong>${e.detail.element.value}</strong>?</div>`;let button1=document.createElement("paper-button");button1.raised=!0,button1.addEventListener("click",this._deleteItemConfirm.bind(this)),button1.appendChild(document.createTextNode("Delete"));let button2=document.createElement("paper-button");button2.raised=!0,button2.setAttribute("dialog-dismiss","dialog-dismiss"),button2.appendChild(document.createTextNode("cancel"));let b=document.createElement("div");b.appendChild(button1),b.appendChild(button2);const evt=new CustomEvent("simple-modal-show",{bubbles:!0,cancelable:!0,composed:!0,detail:{title:`Delete ${e.detail.element.value}`,elements:{content:c,buttons:b},invokedBy:e.detail.element.shadowRoot.querySelector("#delete"),clone:!1}});this.dispatchEvent(evt)}_deleteItemConfirm(e){const evt=new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,composed:!0,detail:{}});this.dispatchEvent(evt)}_editModeChanged(newValue,oldValue){if(void 0!==newValue)for(var i in this._itemsChanged(this.items),this.items)if(this.items[i].metadata){let tmp=this.items[i].metadata;tmp.canEdit=newValue,this.items[i].metadata={...tmp}}}_itemsChanged(newValue,oldValue){void 0!==newValue&&"string"==typeof newValue&&(this.items=[...JSON.parse(newValue)])}}_exports.EditableList=EditableList,window.customElements.define(EditableList.tag,EditableList)});