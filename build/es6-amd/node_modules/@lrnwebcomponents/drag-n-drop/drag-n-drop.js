define(["exports"],function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.DragNDrop=void 0;class DragNDrop extends HTMLElement{get html(){return'\n<style>\n:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([editing]) .items ::slotted(.hold) {\n  border: solid 5px #ccc;\n}\n\n:host([editing]) .items ::slotted([data-droppable]) {\n  margin: 10px;\n  border: solid 3px salmon;\n  background: white;\n}\n\n:host([editing]) .items ::slotted(.hovered) {\n  background: #f4f4f4;\n  border-style: dashed;\n}\n        </style>\n<div class="items">\n  <slot></slot>\n</div>'}static get properties(){return{...super.properties,editing:{name:"editing",type:Boolean}}}static get tag(){return"drag-n-drop"}constructor(delayRender=!1){super(),this.__dragging={},this.tag=DragNDrop.tag;let obj=DragNDrop.properties;for(let p in obj)obj.hasOwnProperty(p)&&(this.hasAttribute(p)?this[p]=this.getAttribute(p):(this.setAttribute(p,obj[p].value),this[p]=obj[p].value));this.template=document.createElement("template"),this.attachShadow({mode:"open"}),delayRender||this.render()}connectedCallback(){window.ShadyCSS&&window.ShadyCSS.styleElement(this)}_copyAttribute(name,to){const recipients=this.shadowRoot.querySelectorAll(to),value=this.getAttribute(name),fname=null==value?"removeAttribute":"setAttribute";for(const node of recipients)node[fname](name,value)}_setProperty({name:name,value:value}){this[name]=value}render(){this.shadowRoot.innerHTML=null,this.template.innerHTML=this.html,window.ShadyCSS&&window.ShadyCSS.prepareTemplate(this.template,this.tag),this.shadowRoot.appendChild(this.template.content.cloneNode(!0))}static get observedAttributes(){return["editing"]}get editing(){this.getAttribute("editing")}set editing(val){val?this.setAttribute("editing",val):this.removeAttribute("editing")}attributeChangedCallback(attr,oldValue,newValue){if("editing"===attr){const draggable=this.querySelectorAll("[data-draggable]"),droppable=this.querySelectorAll("[data-droppable]");if(newValue){for(const dropArea of droppable)dropArea.setAttribute("droppable","true"),dropArea.addEventListener("dragover",this.dragOver.bind(this)),dropArea.addEventListener("dragenter",this.dragEnter.bind(this)),dropArea.addEventListener("dragleave",this.dragLeave.bind(this)),dropArea.addEventListener("drop",this.dragDrop.bind(this));for(const dragItem of draggable)dragItem.setAttribute("draggable","true"),dragItem.addEventListener("dragstart",this.dragStart.bind(this)),dragItem.addEventListener("dragend",this.dragEnd.bind(this))}else{for(const dropArea of droppable)dropArea.removeAttribute("droppable"),dropArea.removeEventListener("dragover",this.dragOver.bind(this)),dropArea.removeEventListener("dragenter",this.dragEnter.bind(this)),dropArea.removeEventListener("dragleave",this.dragLeave.bind(this)),dropArea.removeEventListener("drop",this.dragDrop.bind(this));for(const dragItem of draggable)dragItem.removeAttribute("draggable"),dragItem.removeEventListener("dragstart",this.dragStart.bind(this)),dragItem.removeEventListener("dragend",this.dragEnd.bind(this))}}}dragStart(e){this.__dragging=e.target,this.__dragging.className+=" hold",setTimeout(()=>this.__dragging.className="invisible",0)}dragEnd(e){this.__dragging.className="fill"}dragOver(e){e.preventDefault()}dragEnter(e){e.preventDefault(),e.target.className+=" hovered"}dragLeave(e){e.target.className="empty"}dragDrop(e){e.target.className="empty",e.target.appendChild(this.__dragging)}}_exports.DragNDrop=DragNDrop,window.customElements.define(DragNDrop.tag,DragNDrop)});