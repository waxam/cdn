define(["exports","../../@polymer/polymer/polymer-element.js","../schema-behaviors/schema-behaviors.js","../../@polymer/polymer/lib/elements/dom-repeat.js","../../@polymer/polymer/lib/elements/dom-if.js"],function(_exports,_polymerElement,_schemaBehaviors,_domRepeat,_domIf){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.TaskList=void 0;class TaskList extends((0,_schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement)){static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
          border: var(--task-list-border, 1px solid #eeeeee);
          font-size: var(--task-list-font-size, 18px);
          padding: var(--task-list-padding, 16px);
        }
      </style>
      <h3><span property="oer:name">[[name]]</span></h3>
      <ol>
        <template is="dom-repeat" items="[[tasks]]" as="task">
          <li>
            <template is="dom-if" if="[[task.link]]">
              <a href="[[task.link]]" property="oer:task">[[task.name]]</a>
            </template>
            <template is="dom-if" if="[[!task.link]]">
              <span property="oer:task">[[task.name]]</span>
            </template>
          </li>
        </template>
      </ol>
    `}static get tag(){return"task-list"}static get observers(){return["_valueChanged(tasks.*)"]}static get properties(){let props={name:{type:String,value:"Steps to completion"},relatedResource:{type:String},tasks:{type:Array,value:[],notify:!0},_resourceLink:{type:Object,computed:"_generateResourceLink(relatedResource)"}};return super.properties&&(props=Object.assign(props,super.properties)),props}_generateResourceLink(relatedResource){this._resourceLink&&document.head.removeChild(this._resourceLink);let link=document.createElement("link");return link.setAttribute("property","oer:forComponent"),link.setAttribute("content",relatedResource),document.head.appendChild(link),link}_valueChanged(e){for(var i in e.base)for(var j in e.base[i])this.notifyPath("tasks."+i+"."+j)}connectedCallback(){super.connectedCallback(),this.setAttribute("typeof","oer:SupportingMaterial")}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Task list",description:"A list of tasks which is an ordered list",icon:"icons:list",color:"orange",groups:["Content","Instructional"],handles:[],meta:{author:"LRNWebComponents"}},settings:{quick:[{property:"name",title:"Name",description:"Name of the list",inputMethod:"textfield",icon:"editor:title"},{property:"relatedResource",title:"Related resource",description:"A reference to the related Schema resource",inputMethod:"textfield",icon:"editor:title"}],configure:[{property:"name",title:"Name",description:"Name of the list",inputMethod:"textfield",icon:"editor:title"},{property:"relatedResource",title:"Related resource",description:"A reference to the related Schema resource",inputMethod:"textfield",icon:"editor:title"},{property:"tasks",title:"Tasks",description:"The tasks to be completed",inputMethod:"array",itemLabel:"label",properties:[{property:"name",title:"Name",description:"Name of the task",inputMethod:"textfield",required:!0},{property:"link",title:"Link",description:"Optional link",inputMethod:"textfield"}]}],advanced:[]},saveOptions:{unsetAttributes:["_resource-link"]}}}}_exports.TaskList=TaskList,window.customElements.define(TaskList.tag,TaskList)});