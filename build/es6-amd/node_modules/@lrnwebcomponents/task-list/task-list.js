define(["exports","../../@polymer/polymer/polymer-legacy.js","../hax-body-behaviors/lib/HAXWiring.js","../schema-behaviors/schema-behaviors.js"],function(_exports,_polymerLegacy,_HAXWiring,_schemaBehaviors){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.TaskList=void 0;/**
`task-list`
Visual listing of tasks with different design components that is
OER Schema capable!

* @demo demo/index.html

@microcopy - the mental model for this element
 - task - a singular thing to accomplish

*/let TaskList=(0,_polymerLegacy.Polymer)({_template:_polymerLegacy.html`
    <style>
      :host {
        display: block;
      }
    </style>
    <h3><span property="oer:name">[[name]]</span></h3>
    <ol>
      <template is="dom-repeat" items="[[tasks]]" as="task">
        <li><span property="oer:task">[[task.name]]</span></li>
      </template>
    </ol>
  `,is:"task-list",behaviors:[HAXBehaviors.PropertiesBehaviors,SchemaBehaviors.Schema],hostAttributes:{typeof:"oer:SupportingMaterial"},observers:["_valueChanged(tasks.*)"],properties:{/**
     * Name of this task list
     */name:{type:String,value:"Steps to completion"},/**
     * Related Resource ID
     */relatedResource:{type:String},/**
     * Task list
     */tasks:{type:Array,value:[],notify:!0},_resourceLink:{type:Object,computed:"_generateResourceLink(relatedResource)"}},_generateResourceLink(relatedResource){if(this._resourceLink){document.head.removeChild(this._resourceLink)}let link=document.createElement("link");link.setAttribute("property","oer:forComponent");link.setAttribute("content",relatedResource);document.head.appendChild(link);return link},/**
   * Ensure the values change.
   */_valueChanged:function(e){for(var i in e.base){for(var j in e.base[i]){this.notifyPath("tasks."+i+"."+j)}}},/**
   * Attached to the DOM, now fire.
   */attached:function(){// Establish hax property binding
let props={canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Task list",description:"A list of tasks which is an ordered list",icon:"icons:list",color:"orange",groups:["Content","Instructional"],handles:[],meta:{author:"LRNWebComponents"}},settings:{quick:[{property:"name",title:"Name",description:"Name of the list",inputMethod:"textfield",icon:"editor:title"},{property:"relatedResource",title:"Related resource",description:"A reference to the related Schema resource",inputMethod:"textfield",icon:"editor:title"}],configure:[{property:"name",title:"Name",description:"Name of the list",inputMethod:"textfield",icon:"editor:title"},{property:"relatedResource",title:"Related resource",description:"A reference to the related Schema resource",inputMethod:"textfield",icon:"editor:title"},{property:"tasks",title:"Tasks",description:"The tasks to be completed",inputMethod:"array",properties:[{property:"name",title:"Name",description:"Name of the task",inputMethod:"textfield",required:!0},{property:"link",title:"Link",description:"Optional link",inputMethod:"textfield"}]}],advanced:[]}};this.setHaxProperties(props)}});_exports.TaskList=TaskList});