define(["exports", "require", "../../lit-element/lit-element.js", "../../@polymer/paper-tabs/paper-tabs.js"], function (_exports, _require, _litElement, _paperTabs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TabList = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `tab-list`
   * @element tab-list
   * `A simple listing of tabed links / items`
   * @demo demo/index.html
   */
  class TabList extends _litElement.LitElement {
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
          margin: 0 auto;
          list-style: none;
          display: block;
          padding: 16px;
          border-bottom: 1px solid black;
        }
        paper-tabs {
          align-items: center;
          justify-items: center;
        }
        paper-tab a {
          text-decoration: none;
          flex: unset;
          height: unset;
          width: 100%;
          text-align: center;
        }
        paper-button {
          text-transform: unset;
          width: 100%;
          display: block;
          min-width: unset;
          margin: 0;
          text-overflow: ellipsis;
          overflow: hidden;
        }
        @media screen and (max-width: 600px) {
          paper-tab {
            display: block;
          }
        }
      `];
    }

    constructor() {
      super();
      this.tabs = [];
      new Promise((res, rej) => _require.default(["../../@polymer/paper-tabs/paper-tab.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../@polymer/paper-button/paper-button.js"], res, rej));
    }

    render() {
      return (0, _litElement.html)`
      <paper-tabs>
        ${this.tabs.map(tab => (0, _litElement.html)`
            <paper-tab>
              <a
                target="_blank"
                href="${tab.link}"
                tabindex="-1"
                rel="noopener noreferrer"
              >
                <paper-button raised>${tab.label}</paper-button>
              </a>
            </paper-tab>
          `)}
      </paper-tabs>
    `;
    }

    static get tag() {
      return "tab-list";
    }

    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (propName == "tabs") {
          // fire an event that this is a core piece of the system
          this.dispatchEvent(new CustomEvent("tabs-changed", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this[propName]
          }));
        }
      });
    }

    static get properties() {
      return {
        /**
         * List of tabs
         */
        tabs: {
          type: Array
        }
      };
    }

    static get haxProperties() {
      return {
        canScale: false,
        canPosition: false,
        canEditSource: false,
        gizmo: {
          title: "Tabs",
          description: "A list of links as tabs.",
          icon: "icons:tab",
          color: "grey",
          groups: ["Presentation", "Links"],
          handles: [],
          meta: {
            author: "ELMS:LN"
          }
        },
        settings: {
          quick: [],
          configure: [{
            property: "tabs",
            title: "Tabs",
            description: "Listing of tabs",
            inputMethod: "array",
            itemLabel: "label",
            properties: [{
              property: "link",
              title: "Link",
              description: "link to go to",
              inputMethod: "textfield",
              required: true
            }, {
              property: "label",
              title: "Label",
              description: "text to place on the tab",
              inputMethod: "textfield",
              required: true
            }]
          }],
          advanced: []
        }
      };
    }

  }

  _exports.TabList = TabList;
  window.customElements.define(TabList.tag, TabList);
});