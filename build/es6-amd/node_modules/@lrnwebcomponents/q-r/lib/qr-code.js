define(["exports","meta","../../../@polymer/polymer/lib/utils/resolve-url.js","../../es-global-bridge/es-global-bridge.js"],function(_exports,meta,_resolveUrl,_esGlobalBridge){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.QRCodeElement=void 0;meta=babelHelpers.interopRequireWildcard(meta);class QRCodeElement extends HTMLElement{constructor(){super();// method bindings
this._defineProperty=this._defineProperty.bind(this);// Shadow DOM
this.attachShadow({mode:"open"});// Define Properties
Object.keys(QRCodeElement.defaultAttributes).map(this._defineProperty);const basePath=(0,_resolveUrl.pathFromUrl)(decodeURIComponent(meta.url)),location=`${basePath}/qr.js`;window.addEventListener(`es-bridge-qr-loaded`,this._qrLoaded.bind(this));window.ESGlobalBridge.requestAvailability();window.ESGlobalBridge.instance.load("qr",location)}disconnectedCallback(){window.removeEventListener(`es-bridge-qr-loaded`,this._qrLoaded.bind(this));if(super.disconnectedCallback){super.disconnectedCallback()}}static get tag(){return"qr-code"}_qrLoaded(){// q-r library has loaded, now try to generate
this.generate()}static get defaultAttributes(){return{data:null,format:"png",modulesize:5,margin:4}}static get observedAttributes(){return Object.keys(QRCodeElement.defaultAttributes)}// LifeCycle Callbacks
//
attributeChangedCallback(attributeName,oldValue,newValue){let fn=this[attributeName+"Changed"];if(fn&&"function"===typeof fn){fn.call(this,oldValue,newValue)}if(window.ESGlobalBridge.imports.qr){this.generate()}}// Methods
//
_defineProperty(attributeName){Object.defineProperty(this,attributeName,{get:()=>{let value=this.getAttribute(attributeName);return null===value?QRCodeElement.defaultAttributes[attributeName]:value},set:value=>{this.setAttribute(attributeName,value)}})}getOptions(){let{modulesize,margin}=this;return{modulesize:null!==modulesize?parseInt(modulesize):modulesize,margin:null!==margin?parseInt(margin):margin}}generate(){if(null!==this.data){if("png"===this.format){this.generatePNG()}else if("html"===this.format){this.generateHTML()}else if("svg"===this.format){this.generateSVG()}else{this.shadowRoot.innerHTML="<div>qr-code: "+this.format+" not supported!</div>"}}else{this.shadowRoot.innerHTML="<div>qr-code: no data!</div>"}}generatePNG(){try{let img=document.createElement("img");img.src=window.QRCode.generatePNG(this.data,this.getOptions());this.clear();this.shadowRoot.appendChild(img)}catch(e){this.shadowRoot.innerHTML="<div>qr-code: no canvas support!</div>"}}generateHTML(){let div=window.QRCode.generateHTML(this.data,this.getOptions());this.clear();this.shadowRoot.appendChild(div)}generateSVG(){let div=window.QRCode.generateSVG(this.data,this.getOptions());this.clear();this.shadowRoot.appendChild(div)}clear(){while(this.shadowRoot.lastChild){this.shadowRoot.removeChild(this.shadowRoot.lastChild)}}}_exports.QRCodeElement=QRCodeElement;window.customElements.define(QRCodeElement.tag,QRCodeElement)});