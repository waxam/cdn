define(["exports","meta","require","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/utils/flattened-nodes-observer.js","../../@polymer/polymer/lib/legacy/polymer.dom.js","../../@polymer/polymer/lib/utils/render-status.js","../schema-behaviors/schema-behaviors.js"],function(_exports,meta,_require,_polymerElement,_flattenedNodesObserver,_polymerDom,_renderStatus,_schemaBehaviors){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.CodeEditor=void 0,meta=babelHelpers.interopRequireWildcard(meta),_require=babelHelpers.interopRequireWildcard(_require);class CodeEditor extends((0,_schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement)){constructor(){super(),this.__libPath=decodeURIComponent(meta.url)+"/../../../monaco-editor/min/vs",new Promise((res,rej)=>_require.default(["@lrnwebcomponents/code-editor/lib/monaco-element/monaco-element.js"],res,rej)),new Promise((res,rej)=>_require.default(["@lrnwebcomponents/code-editor/lib/code-pen-button.js"],res,rej))}static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
          padding: 16px;
        }
        .code-pen-container {
          width: 100%;
          display: flex;
          background-color: var(--code-pen-button-color, #222222);
          color: white;
          height: 40px;
          justify-content: flex-end;
          align-items: center;
        }
        .code-pen-container span {
          display: inline-flex;
          line-height: 16px;
          font-size: 16px;
          padding: 12px;
        }
        [hidden] {
          display: none !important;
        }
        code-pen-button {
          float: right;
          height: 40px;
        }
        h3 {
          color: var(--code-pen-title-color, #222222);
        }
        #codeeditor {
          height: 100%;
          display: flex;
        }
      </style>
      <h3 hidden$="[[!title]]">[[title]]</h3>
      <monaco-element
        id="codeeditor"
        lib-path="[[__libPath]]"
        value="[[editorValue]]"
        language="[[language]]"
        theme="[[theme]]"
        on-value-changed="_editorDataChanged"
        font-size$="[[fontSize]]"
        read-only$="[[readOnly]]"
      >
      </monaco-element>
      <div class="code-pen-container" hidden$="[[!showCodePen]]">
        <span>Check it out on code pen: </span
        ><code-pen-button data="[[codePenData]]"></code-pen-button>
      </div>
    `}static get tag(){return"code-editor"}static get properties(){let props={title:{type:String},showCodePen:{type:Boolean,value:!1,reflectToAttribute:!0},readOnly:{type:Boolean,value:!1,reflectToAttribute:!0},codePenData:{type:Object,computed:"_computeCodePenData(title, value)"},editorValue:{type:String},value:{type:String,notify:!0},theme:{type:String,value:"vs-dark"},mode:{type:String,observer:"_modeChanged"},language:{type:String,value:"javascript"},fontSize:{type:Number,value:16}};return super.properties&&(props=Object.assign(props,super.properties)),props}_computeCodePenData(title,editorValue){return{title:title,html:editorValue}}_modeChanged(newValue){this.language=this.mode}_editorDataChanged(e){this.value=e.detail}updateEditorValue(node){if(node){var content="",children=node;if("TEMPLATE"!==node.tagName){if(console.warn("code-editor works best with a template tag provided in light dom"),(children=(0,_polymerDom.dom)(this).getEffectiveChildNodes()).length>0)for(var j=0,len2=children.length;j<len2;j++)void 0!==children[j].tagName?content+=children[j].outerHTML:content+=children[j].textContent}else content=children.innerHTML;content&&(this.shadowRoot.querySelector("#codeeditor").value=content.trim())}}preProcessHaxNodeToContent(clone){return clone.editorValue=null,clone.codePenData=null,clone.value=null,clone.removeAttribute("value"),clone.removeAttribute("code-pen-data"),clone}connectedCallback(){super.connectedCallback(),(0,_renderStatus.afterNextRender)(this,function(){this._observer=new _flattenedNodesObserver.FlattenedNodesObserver(this,info=>{info.addedNodes.length>0&&info.addedNodes.map(node=>{node.tagName&&this.updateEditorValue(node)}),info.removedNodes.length>0&&info.removedNodes.map(node=>{node.tagName&&this.updateEditorValue(node)})})})}}_exports.CodeEditor=CodeEditor,window.customElements.define(CodeEditor.tag,CodeEditor)});