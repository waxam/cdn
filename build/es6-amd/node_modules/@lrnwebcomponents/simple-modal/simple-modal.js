define(["exports","require","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/utils/render-status.js","../../@polymer/polymer/lib/legacy/polymer.dom.js","../../@polymer/polymer/lib/utils/async.js","../../@polymer/paper-dialog/paper-dialog.js"],function(_exports,_require,_polymerElement,_renderStatus,_polymerDom,_async,_paperDialog){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.SimpleModal=void 0,_require=babelHelpers.interopRequireWildcard(_require),window.SimpleModal=window.SimpleModal||{},window.SimpleModal.requestAvailability=()=>(window.SimpleModal.instance||(window.SimpleModal.instance=document.createElement("simple-modal"),document.body.appendChild(window.SimpleModal.instance)),window.SimpleModal.instance);class SimpleModal extends _polymerElement.PolymerElement{static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }

        paper-dialog-scrollable:not(:defined) {
          display: none;
        }

        :host paper-dialog ::slotted(*) {
          font-size: 14px;
          @apply --simple-modal-content;
        }

        #dialog {
          display: flex;
          flex-direction: column;
          margin: 15px auto;
          z-index: 1000;
          height: var(--simple-modal-height, auto);
          width: var(--simple-modal-width, auto);
          min-width: var(--simple-modal-min-width, unset);
          max-width: var(--simple-modal-max-width, unset);
          min-height: var(--simple-modal-min-height, unset);
          max-height: var(--simple-modal-max-height, unset);
          border-radius: 3px;
          @apply --simple-modal-dialog;
        }

        #titlebar {
          margin-top: 0;
          padding: 0px 16px;
          display: flex;
          align-items: center;
          justify-content: space-between;
          color: var(--simple-modal-titlebar-color, #444);
          background-color: var(--simple-modal-titlebar-background, #ddd);
          border-radius: 3px 3px 0 0;
          height: 64px;
          line-height: 64px;
          @apply --simple-modal-top;
        }

        #headerbar {
          margin: 0;
          padding: 0 16px;
          color: var(--simple-modal-header-color, #222);
          background-color: var(--simple-modal-header-background, #ccc);
          @apply --simple-modal-headerbar;
        }

        h2 {
          margin-right: 8px;
          padding: 0;
          flex: auto;
          font-size: 18px;
          line-height: 18px;
          @apply --simple-modal-title;
        }

        #close {
          top: 0;
          padding: 10px 0;
          min-width: unset;
          text-transform: none;
          color: var(--simple-modal-titlebar-color, #444);
          background-color: transparent;
          @apply --simple-modal-close;
        }

        #close iron-icon {
          width: 16px;
          height: 16px;
          color: var(--simple-modal-titlebar-color, #444);
          @apply --simple-modal-close-icon;
        }

        #simple-modal-content {
          flex-grow: 1;
          padding: 8px 16px;
          margin: 0;
          color: var(--simple-modal-content-container-color, #222);
          background-color: var(
            --simple-modal-content-container-background,
            #fff
          );
          --paper-dialog-scrollable: {
            padding: 0;
          }
          @apply --simple-modal-content-container;
        }
        .buttons {
          padding: 0;
          margin: 0;
          color: var(--simple-modal-buttons-color, unset);
          background-color: var(--simple-modal-buttons-background, unset);
          @apply --simple-modal-buttons;
        }
        .buttons ::slotted(*) {
          padding: 0;
          margin: 0;
          color: var(--simple-modal-button-color, --simple-modal-buttons-color);
          background-color: var(
            --simple-modal-button-background,
            --simple-modal-buttons-background
          );
          @apply --simple-modal-button;
        }
      </style>
      <paper-dialog
        id="dialog"
        always-on-top
        aria-describedby="simple-modal-content"
        aria-label$="[[_getAriaLabel(title)]]"
        aria-labelledby$="[[_getAriaLabelledby(title)]]"
        aria-modal="true"
        entry-animation="scale-up-animation"
        exit-animation="fade-out-animation"
        role="dialog"
        opened="{{opened}}"
        modal="[[modal]]"
        with-backdrop
      >
        <div id="titlebar">
          <h2 id="simple-modal-title" hidden$="[[!title]]">[[title]]</h2>
          <div></div>
          <paper-button
            id="close"
            dialog-dismiss
            hidden$="[[!opened]]"
            label="[[closeLabel]]"
          >
            <iron-icon aria-hidden="true" icon="[[closeIcon]]"></iron-icon>
          </paper-button>
        </div>
        <div id="headerbar"><slot name="header"></slot></div>
        <paper-dialog-scrollable id="simple-modal-content">
          <slot name="content"></slot>
        </paper-dialog-scrollable>
        <div class="buttons">
          <slot name="buttons"></slot>
        </div>
      </paper-dialog>
    `}static get properties(){let props={title:{name:"title",type:String,value:""},opened:{name:"opened",type:Boolean,value:!1,reflectToAttribute:!0,observer:"_openedChanged"},closeLabel:{name:"closeLabel",type:String,value:"Close"},closeIcon:{name:"closeIcon",type:String,value:"close"},invokedBy:{name:"invokedBy",type:Object},modal:{name:"modal",type:Boolean,value:!1}};return super.properties&&(props=Object.assign(props,super.properties)),props}constructor(){super(),new Promise((res,rej)=>_require.default(["../../@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/paper-button/paper-button.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-icons/iron-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-icon/iron-icon.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/neon-animation/animations/scale-up-animation.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/neon-animation/animations/fade-out-animation.js"],res,rej))}static get tag(){return"simple-modal"}connectedCallback(){super.connectedCallback(),(0,_renderStatus.afterNextRender)(this,function(){window.addEventListener("simple-modal-hide",this.close.bind(this)),window.addEventListener("simple-modal-show",this.showEvent.bind(this)),this.shadowRoot.querySelector("#simple-modal-content").addEventListener("neon-animation-finish",this._ironOverlayClosed.bind(this))})}_resizeContent(e){_async.microTask.run(()=>{window.dispatchEvent(new Event("resize"))})}showEvent(e){if(this.opened){for(;null!==(0,_polymerDom.dom)(this).firstChild;)(0,_polymerDom.dom)(this).removeChild((0,_polymerDom.dom)(this).firstChild);setTimeout(()=>{this.show(e.detail.title,e.detail.elements,e.detail.invokedBy,e.detail.id,e.detail.modalClass,e.detail.styles,e.detail.clone,e.detail.modal)},100)}else this.show(e.detail.title,e.detail.elements,e.detail.invokedBy,e.detail.id,e.detail.modalClass,e.detail.styles,e.detail.clone,e.detail.modal)}show(title,elements,invokedBy,id=null,modalClass=null,styles=null,clone=!1,modal=!1){let element;this.set("invokedBy",invokedBy),this.modal=modal,this.title=title;let slots=["header","content","buttons"];for(var i in id?this.setAttribute("id",id):this.removeAttribute("id"),this.setAttribute("style",""),styles&&["--simple-modal-width","--simple-modal-height","--simple-modal-min-width","--simple-modal-min-height","--simple-modal-max-width","--simple-modal-max-height","--simple-modal-titlebar-color","--simple-modal-titlebar-background","--simple-modal-header-color","--simple-modal-header-background","--simple-modal-content-container-color","--simple-modal-content-container-background","--simple-modal-buttons-color","--simple-modal-buttons-background","--simple-modal-button-color","--simple-modal-button-background"].forEach(prop=>{this.style.setProperty(prop,styles[prop]||"unset")}),modalClass?this.setAttribute("class",modalClass):this.removeAttribute("class"),slots)elements[slots[i]]&&((element=clone?elements[slots[i]].cloneNode(!0):elements[slots[i]]).setAttribute("slot",slots[i]),(0,_polymerDom.dom)(this).appendChild(element));setTimeout(()=>{this.opened=!0,this._resizeContent()},100)}animationEnded(e){for(this.title="";null!==(0,_polymerDom.dom)(this).firstChild;)(0,_polymerDom.dom)(this).removeChild((0,_polymerDom.dom)(this).firstChild);this.invokedBy&&_async.microTask.run(()=>{setTimeout(()=>{this.invokedBy.focus()},500)})}close(){this.shadowRoot.querySelector("#dialog").close()}_openedChanged(newValue,oldValue){if(void 0===newValue||newValue){if(newValue){const evt=new CustomEvent("simple-modal-opened",{bubbles:!0,cancelable:!0,detail:{opened:!0,invokedBy:this.invokedBy}});this.dispatchEvent(evt)}}else{this.animationEnded();const evt=new CustomEvent("simple-modal-closed",{bubbles:!0,cancelable:!0,detail:{opened:!1,invokedBy:this.invokedBy}});this.dispatchEvent(evt)}}_getAriaLabelledby(title){return title?"simple-modal-title":null}_getAriaLabel(title){return title?null:"Modal Dialog"}_ironOverlayClosed(e){e.preventDefault(),e.stopPropagation()}disconnectedCallback(){window.removeEventListener("simple-modal-hide",this.close.bind(this)),window.removeEventListener("simple-modal-show",this.showEvent.bind(this)),this.shadowRoot.querySelector("#simple-modal-content").removeEventListener("neon-animation-finish",this._ironOverlayClosed.bind(this)),super.disconnectedCallback()}}_exports.SimpleModal=SimpleModal,window.customElements.define(SimpleModal.tag,SimpleModal)});