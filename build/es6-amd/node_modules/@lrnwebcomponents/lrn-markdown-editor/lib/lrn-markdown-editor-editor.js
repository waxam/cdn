define(["exports", "../../../lit-element/lit-element.js", "../../mtz-marked-editor/mtz-marked-editor.js", "../../mtz-marked-editor/lib/mtz-marked-control-generic-wrap.js", "../../mtz-marked-editor/lib/mtz-marked-control-generic-line.js", "../../mtz-marked-editor/lib/mtz-marked-control-link.js", "../../../@polymer/iron-icons/editor-icons.js", "../../../@polymer/iron-icons/places-icons.js", "../../../@polymer/iron-icon/iron-icon.js", "../../../@polymer/paper-input/paper-textarea.js", "../../../@polymer/paper-input/paper-input.js"], function (_exports, _litElement, _mtzMarkedEditor, _mtzMarkedControlGenericWrap, _mtzMarkedControlGenericLine, _mtzMarkedControlLink, _editorIcons, _placesIcons, _ironIcon, _paperTextarea, _paperInput) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnMarkdownEditorEditor = void 0;

  class LrnMarkdownEditorEditor extends _litElement.LitElement {
    /**
     * LitElement constructable styles enhancement
     */
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }

        .mtz-controls {
          display: flex;
          width: 100%;
        }

        .mtz-toolbar {
          flex-grow: 5;
        }
      `];
    }
    /**
     * LitElement render
     */


    render() {
      return (0, _litElement.html)`
      <mtz-marked-editor id="markededitor">
        <div slot="controls" class="mtz-controls">
          <mtz-marked-control-generic-wrap
            icon="editor:format-bold"
            title="Bold"
            syntax-prefix="**"
            syntax-suffix="**"
            keys="ctrl+b"
          ></mtz-marked-control-generic-wrap>
          <mtz-marked-control-generic-wrap
            icon="editor:format-italic"
            title="Italic"
            syntax-prefix="_"
            syntax-suffix="_"
            keys="ctrl+i"
          ></mtz-marked-control-generic-wrap>
          <mtz-marked-control-generic-line
            icon="editor:format-size"
            title="Heading"
            syntax-prefix="# "
          ></mtz-marked-control-generic-line>
          <mtz-marked-control-generic-line
            icon="editor:format-list-numbered"
            title="Ordered List"
            syntax-prefix="1. "
          ></mtz-marked-control-generic-line>
          <mtz-marked-control-generic-line
            icon="editor:format-list-bulleted"
            title="Unordered List"
            syntax-prefix="- "
          ></mtz-marked-control-generic-line>
          <mtz-marked-control-link
            icon="editor:insert-link"
            title="Link"
          ></mtz-marked-control-link>
        </div>
        <paper-textarea
          slot="textarea"
          label="Start typing..."
          value="${this.content}"
          @value-changed="${this._contentChanged}"
        ></paper-textarea>
      </mtz-marked-editor>
    `;
    }

    _contentChanged(e) {
      this.content = e.detail.value;
    }

    static get tag() {
      return "lrn-markdown-editor-editor";
    }

    static get properties() {
      return {
        content: {
          type: String
        }
      };
    }
    /**
     * LitElement properties changed
     */


    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (propName === "content") {
          // notify
          this.dispatchEvent(new CustomEvent("content-changed", {
            detail: {
              value: this[propName]
            }
          }));
        }
      });
    }

    _changed(e) {
      var content = this.shadowRoot.querySelector("#markededitor").getContent();
      this.content = content;
      this.dispatchEvent(new CustomEvent("content-updated", {
        bubbles: true,
        cancelable: true,
        composed: true,
        detail: {
          content: this.content
        }
      }));
    }

  }

  _exports.LrnMarkdownEditorEditor = LrnMarkdownEditorEditor;
  window.customElements.define(LrnMarkdownEditorEditor.tag, LrnMarkdownEditorEditor);
});