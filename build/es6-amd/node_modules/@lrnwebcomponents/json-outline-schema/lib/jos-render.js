define(["exports", "../../../lit-element/lit-element.js", "../json-outline-schema.js", "../../utils/utils.js", "../../dynamic-import-registry/dynamic-import-registry.js"], function (_exports, _litElement, _jsonOutlineSchema, _utils, _dynamicImportRegistry) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.JosRender = void 0;

  class JosRender extends _litElement.LitElement {
    static get tag() {
      return "jos-render";
    }

    constructor() {
      super();
      this.registry = window.DynamicImportRegistry.requestAvailability();

      if (window.WCAutoloadBasePath) {
        this.registry.basePath = window.WCAutoloadBasePath;
      }

      this.items = [];
    }

    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }
        .children {
          display: block;
          margin: 16px auto;
        }
        .children ::slotted(*) {
          display: inline-flex;
          margin: var(--jos-render-margin, 8px);
          padding: var(--jos-render-padding, 8px);
        }
      `];
    }

    static get properties() {
      return {
        source: {
          type: String
        },
        map: {
          type: Object
        },
        items: {
          type: Array
        }
      };
    }

    render() {
      return (0, _litElement.html)`
      <div class="children">
        <slot></slot>
      </div>
    `;
    }

    updated(changedProperties) {
      changedProperties.forEach(async (oldValue, propName) => {
        if (propName == "source") {
          let site = window.JSONOutlineSchema.requestAvailability(); // load source

          if (await site.load(this[propName])) {
            this.items = [...site.items];
          }
        }

        if (propName == "map" && this.map.path && this.map.tag) {
          // register
          this.registry.register({
            tag: this.map.tag,
            path: this.map.path
          }); // load the definition

          this.registry.loadDefinition(this.map.tag);

          if (this.items.length > 0) {
            this.renderItems(this.items);
          }
        }

        if (propName == "items") {
          this.renderItems(this.items);
        }
      });
    }
    /**
     * Render any item list passed in and handle it via our map
     * Separate function to support dynamic property remapping
     */


    renderItems(items) {
      // ensure we have a map to render
      if (this.map && this.map.properties) {
        // wipe slot
        (0, _utils.wipeSlot)(this);
        let values = (0, _utils.valueMapTransform)(items, this.map.properties);
        values.forEach(item => {
          let n = document.createElement(this.map.tag);
          Object.assign(n, item);
          this.appendChild(n);
        });
      }
    }

  }

  _exports.JosRender = JosRender;
  window.customElements.define(JosRender.tag, JosRender);
});