define(["exports","../../@polymer/polymer/polymer-element.js","../hax-body-behaviors/lib/HAXWiring.js","../json-editor/json-editor.js","../code-editor/code-editor.js","../../@vaadin/vaadin-split-layout/vaadin-split-layout.js","../../@polymer/paper-button/paper-button.js","../hax-body/lib/hax-schema-form.js"],function(_exports,_polymerElement,_HAXWiring,_jsonEditor,_codeEditor,_vaadinSplitLayout,_paperButton,_haxSchemaForm){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxschemaBuilder=void 0;/**
 * Copyright 2019 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */ /**
 * `haxschema-builder`
 * `dynamically build and visualize HAXschema`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 * @demo demo/index.html
 */class HaxschemaBuilder extends _polymerElement.PolymerElement{// render function
static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }
        code-editor {
          height: 500px;
        }
      </style>
      <vaadin-split-layout>
        <div>
          <paper-button raised="" noink="">Add to configure</paper-button>
          <paper-button raised="" noink="">Add to advanced</paper-button>
          <code-editor
            id="code"
            on-value-changed="_editorDataChanged"
            language="json"
          ></code-editor>
          <json-editor
            id="json"
            label="JSON"
            value="{{haxSchema}}"
          ></json-editor>
        </div>
        <div>
          <hax-schema-form
            id="form"
            configure-schema="[[configureSchema]]"
            advanced-schema="[[advancedSchema]]"
            value="{{value}}"
          ></hax-schema-form>
        </div>
      </vaadin-split-layout>
    `}// haxProperty definition
static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Haxschema builder",description:"dynamically build and visualize HAXschema",icon:"icons:android",color:"green",groups:["Builder"],handles:[{type:"todo:read-the-docs-for-usage"}],meta:{author:"btopro",owner:"The Pennsylvania State University"}},settings:{quick:[{property:"source",description:"",inputMethod:"textfield",required:!0,icon:"icons:link",validationType:"url"}],configure:[{property:"haxSchema",description:"",inputMethod:"array",required:!1,icon:"icons:android"},{property:"source",description:"",inputMethod:"textfield",required:!0,icon:"icons:link",validationType:"url"}],advanced:[]}}}// properties available to the custom element for data binding
static get properties(){return{/**
       * schema to extract for whatever you wanted it for
       */haxSchema:{name:"haxSchema",type:"String",notify:!0,observer:"_haxSchemaChanged"},/**
       * configure form schema to extract for whatever you wanted it for
       */configureSchema:{name:"configureSchema",type:"Object",value:{}},/**
       * advanced form schema to extract for whatever you wanted it for
       */advancedSchema:{name:"advancedSchema",type:"Object",value:{}},/**
       * Optional remote source to pull in
       */source:{name:"source",type:"String"},/**
       * String based value passed between the elements to stitch together
       */value:{name:"value",type:"String"}}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */static get tag(){return"haxschema-builder"}/**
   * life cycle, element is afixed to the DOM
   */connectedCallback(){super.connectedCallback();this.HAXWiring=new _HAXWiring.HAXWiring;this.HAXWiring.setup(HaxschemaBuilder.haxProperties,HaxschemaBuilder.tag,this);if(!this.source){this.haxSchema=JSON.stringify(this.HAXWiring.prototypeHaxProperties(),null,2)}// HACK to get initial paint to have the correct form
this.$.form.modeTab="advanced";setTimeout(()=>{this.$.form.modeTab="configure"},2e3)}/**
   * Force an update on code editor when this value changes
   */_haxSchemaChanged(newValue){if(newValue){this.$.code.editorValue=newValue}}/**
   * Notice code editor changes and reflect them into this element
   */_editorDataChanged(e){// value coming up off of thiss
this.haxSchema=e.detail.value;let hs=JSON.parse(this.haxSchema);for(var key in hs.settings){let schema=this.HAXWiring.getHaxJSONSchema(key,hs);this.set(key+"Schema",schema)}}/**
   * life cycle, element is removed from the DOM
   */ //disconnectedCallback() {}
}_exports.HaxschemaBuilder=HaxschemaBuilder;window.customElements.define(HaxschemaBuilder.tag,HaxschemaBuilder)});