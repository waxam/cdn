define(["exports","require","../../@polymer/polymer/polymer-element.js"],function(_exports,_require,_polymerElement){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.PaperInputFlagged=void 0,_require=babelHelpers.interopRequireWildcard(_require);class PaperInputFlagged extends _polymerElement.PolymerElement{constructor(){super(),new Promise((res,rej)=>_require.default(["../../@polymer/paper-input/paper-input.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/paper-tooltip/paper-tooltip.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-icons/iron-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-icon/iron-icon.js"],res,rej))}static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
        }
        iron-icon {
          transition: 0.6s all ease-in;
          width: 24px;
          height: 24px;
          margin-right: 4px;
        }
        paper-tooltip {
          --paper-tooltip-delay-in: 100;
          font-size: 11px;
        }
        #icon {
          color: var(--paper-grey-400);
          background-color: transparent;
        }
        :host([status="info"]) #icon {
          color: var(--paper-green-400);
        }
        :host([status="notice"]) #icon {
          color: var(--paper-grey-400);
        }
        :host([status="warning"]) #icon {
          color: var(--paper-yellow-700);
        }
        :host([status="error"]) #icon {
          color: var(--paper-red-900);
        }
        .element-invisible {
          position: absolute !important;
          clip: rect(1px, 1px, 1px, 1px);
          overflow: hidden;
          height: 1px;
        }
      </style>
      <paper-input
        label="[[label]]"
        value="{{value}}"
        char-counter="[[charCounter]]"
        disabled="[[disabled]]"
        minlength="[[minlength]]"
        maxlength="[[minlength]]"
      >
        <iron-icon id="icon" icon="[[icon]]" slot="prefix"></iron-icon>
      </paper-input>
      <div class="element-invisible">[[__activeMessage]]</div>
      <paper-tooltip
        for="icon"
        position="top"
        offset="20"
        fit-to-visible-bounds
      >
        [[__activeMessage]]
      </paper-tooltip>
    `}static get tag(){return"paper-input-flagged"}static get properties(){return{icon:{type:String,computed:"_iconFromStatus(status)"},status:{type:String,reflectToAttribute:!0,computed:"testStatus(flaggedInput, value)"},value:{type:String,notify:!0,value:""},flaggedInput:{type:Array,value:[{match:null,message:"Alt data is required for everything except decoration images.",status:"notice"},{match:"image",message:"Screenreaders will say the word image, don't put it in the descriptive text",status:"error"},{match:"photo",message:"Screenreaders will say the word image, don't put photo in the descriptive text",status:"error"},{match:"picture",message:"Screenreaders will say the word image, don't put picture in the descriptive text",status:"error"},{match:3,message:"Description not effective enough. This should be at least a sentance about what the image is.",status:"error"},{match:10,message:"Make sure your alt text is descriptive enough for those that can't see the media.",status:"warning"}]},inputSuccess:{type:Object,value:{message:"You passed our simple accessibility checks.",status:"info"}}}}testStatus(test,value){for(var i in test){if(null===test[i].match&&(""===value||null===value))return this.__activeMessage=test[i].message,test[i].status;if(!isNaN(test[i].match)&&value.split(/\s+/g).length<parseInt(test[i].match))return this.__activeMessage=test[i].message,test[i].status;if(value.toLowerCase().includes(test[i].match))return this.__activeMessage=test[i].message,test[i].status}return this.__activeMessage=this.inputSuccess.message,this.inputSuccess.status}_iconFromStatus(status){switch(status){case"error":return"icons:error";case"warning":case"notice":return"icons:warning";case"info":return"icons:info-outline";default:return"icons:info"}}}_exports.PaperInputFlagged=PaperInputFlagged,window.customElements.define(PaperInputFlagged.tag,PaperInputFlagged)});