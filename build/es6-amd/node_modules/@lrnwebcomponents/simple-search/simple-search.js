define(["exports","../../lit-element/lit-element.js","../../@polymer/iron-icons/iron-icons.js","../../@polymer/paper-input/paper-input.js","../simple-tooltip/simple-tooltip.js","./lib/simple-search-content.js","./lib/simple-search-match.js"],(function(_exports,_litElement,_ironIcons,_paperInput,_simpleTooltip,_simpleSearchContent,_simpleSearchMatch){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.SimpleSearch=void 0;
/**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
class SimpleSearch extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          display: flex;
          align-items: flex-end;
          justify-content: space-between;
          width: 100%;
        }
        #input {
          flex-grow: 2;
          margin-right: 4px;
          padding: var(--simple-search-padding, unset);
          margin: var(--simple-search-margin, unset);
          --paper-input-container-input-color: var(
            --simple-search-input-text-color,
            #000
          );
          --paper-input-container-shared-input-style_-_color: var(
            --simple-search-input-text-color,
            #000
          );
          --paper-input-container-focus-color: var(
            --simple-search-input-line-color,
            #000
          );
          --paper-input-container-color: var(
            --simple-search-input-placeholder-color,
            #222
          );
          color: var(--simple-search-input-placeholder-color, #222);
        }
        #xofy {
          margin: 8px;
        }
        button {
          margin: 8px 0 8px;
          color: var(--simple-search-button-color, #111);
          background-color: var(--simple-search-button-bg-color, #eee);
          border-color: var(--simple-search-button-border-color, #ccc);
        }
        button:not([disabled]):focus,
        button:not([disabled]):hover {
          cursor: pointer;
          color: var(--simple-search-button-hover-color, #000);
          background-color: var(--simple-search-button-hover-bg-color, #fff);
          border-color: var(--simple-search-button-hover-border-color, #ddd);
        }
        button[disabled] {
          cursor: not-allowed;
          color: var(--simple-search-button-disabled-color, #999);
          background-color: var(--simple-search-button-disabled-bg-color, #eee);
          border-color: var(--simple-search-button-disabled-border-color, #ccc);
        }
        button:not([controls]) {
          display: none;
        }
        *[shrink-hide] {
          display: none;
        }
      `]}render(){return _litElement.html`
      <paper-input
        id="input"
        label="${this.searchInputLabel}"
        ?always-float-label="${this.alwaysFloatLabel}"
        ?no-label-float="${this.noLabelFloat}"
        @change="${this._handleChange}"
      >
        <iron-icon icon="${this.searchInputIcon}" slot="prefix"></iron-icon>
      </paper-input>
      <div id="xofy" ?shrink-hide="${this._hasNoSearch(this.searchTerms)}">
        ${this._getResultsSpan(this.resultPointer,this.resultCount)}
      </div>
      <div ?shrink-hide="${this._hasNoSearch(this.searchTerms)}">
        <button
          id="prev"
          aria-label="${this.prevButtonLabel}"
          aria-role="button"
          controls="${this.controls}"
          tabindex="0"
          ?disabled="${this.__hidePrev}"
          @click="${this._navigateResults}"
        >
          <iron-icon icon="${this.prevButtonIcon}"></iron-icon>
        </button>
        <simple-tooltip for="prev">${this.prevButtonLabel}</simple-tooltip>
        <button
          id="next"
          aria-label="${this.nextButtonLabel}"
          aria-role="button"
          controls="${this.controls}"
          tabindex="0"
          ?disabled="${this.__hideNext}"
          @click="${this._navigateResults}"
        >
          <iron-icon icon="${this.nextButtonIcon}"></iron-icon>
        </button>
        <simple-tooltip for="next">${this.nextButtonLabel}</simple-tooltip>
      </div>
    `}static get properties(){return{...super.properties,alwaysFloatLabel:{attribute:"always-float-label",type:Boolean},caseSensitive:{attribute:"case-sensitive",type:Boolean},controls:{attribute:"controls",type:String},nextButtonIcon:{attribute:"next-button-icon",type:String},nextButtonLabel:{attribute:"next-button-label",type:String},noLabelFloat:{attribute:"no-label-float",type:Boolean},prevButtonIcon:{attribute:"prev-button-icon",type:String},prevButtonLabel:{attribute:"prev-button-label",type:String},resultCount:{attribute:"result-count",type:Number},resultPointer:{attribute:"result-pointer",type:Number},selector:{attribute:"selector",type:String},searchInputIcon:{attribute:"search-input-icon",type:String},searchInputLabel:{attribute:"search-input-label",type:String},searchTerms:{attribute:"search-terms",type:Array},target:{type:Object},__hideNext:{type:Boolean},__hidePrev:{type:Boolean}}}static get tag(){return"simple-search"}constructor(){super(),this.alwaysFloatLabel=!1,this.caseSensitive=null,this.controls=null,this.nextButtonIcon="arrow-forward",this.nextButtonLabel="next result",this.noLabelFloat=!1,this.prevButtonIcon="arrow-back",this.prevButtonLabel="previous result",this.resultCount=0,this.resultPointer=0,this.searchInputIcon="search",this.searchInputLabel="search",this.searchTerms=[],this.target=null,this.selector=null,this.__hideNext=!0,this.__hidePrev=!0}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"resultPointer"!==propName&&"resultCount"!==propName||this._getNavDisabled(this.resultPointer,this.resultCount)})}_handleChange(e){let selector=this.selector?` ${this.selector}`:"",selections=this.controls?this.getRootNode().querySelectorAll(`#${this.controls}${selector}`):null;console.log(this.controls,selections,this.getRootNode()),this._getSearchText(),this.resultCount=0,this.resultPointer=0,selections.forEach(selection=>{this._searchSelection(selection)}),this.dispatchEvent(new CustomEvent("simple-search",{detail:{search:this,content:e}}))}_searchSelection(selection){selection&&selection.innerHTML&&(selection.innerHTML=this.findMatches(selection.innerHTML))}_hasNoSearch(terms){return terms.length<1}_getResultsSpan(pointer,count){return count>0&&pointer>0?pointer+"/"+count:count>0?count:"0"}_navigateResults(e){let increment="next"===e.currentTarget.id?1:-1;this.resultPointer+increment>0&&this.resultPointer+increment<=this.resultCount&&(this.resultPointer+=increment,this.dispatchEvent(new CustomEvent("goto-result",{detail:this.resultPointer})))}_getNavDisabled(pointer,count){this.__hidePrev=this._isNavButtonDisabled(pointer,count,-1),this.__hideNext=this._isNavButtonDisabled(pointer,count)}_isNavButtonDisabled(pointer,count,inc=1){return!count||0===count||pointer+inc<=0||pointer+inc>count}_getSearchText(){let find=this.shadowRoot.querySelector("#input").value,temp=new Array;if(null!=find){temp=find.split(/[\"\']/gm);for(let i=0;i<temp.length;i++)temp[i]=temp[i].trim(),""===temp[i]&&temp.splice(i,1)}this.searchTerms=temp.slice(0)}findMatches(results){return this.resultPointer=0,results=results.replace(/<\/?simple-search-match[^>]*>/g,""),this.searchTerms.forEach(term=>{let modifier=this.caseSensitive?"gm":"gim",regex=new RegExp("\\b("+term+")\\b",modifier);results=results.replace(regex,match=>(this.resultCount++,`<simple-search-match tabindex="0" match-number="${this.resultCount}">${match}</simple-search-match>`))}),results}}_exports.SimpleSearch=SimpleSearch,customElements.define(SimpleSearch.tag,SimpleSearch)}));