define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-button.js", "../../../simple-picker/simple-picker.js"], function (_exports, _litElement, _richTextEditorButton, _simplePicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorPickerBehaviors = _exports.RichTextEditorPicker = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */
  const RichTextEditorPickerBehaviors = function (SuperClass) {
    return class extends (0, _richTextEditorButton.RichTextEditorButtonBehaviors)(SuperClass) {
      /**
       * Store tag name to make it easier to obtain directly.
       */
      static get tag() {
        return "rich-text-editor-picker";
      }

      static get styles() {
        return [...super.styles, (0, _litElement.css)`
          :host {
            margin: 0 var(--rich-text-editor-button-margin);
          }
          .rtebutton {
            margin-top: 0;
            margin-bottom: 0;
            --simple-picker-border-radius: 0px;
            --simple-picker-color: var(--rich-text-editor-button-color);
            --simple-picker-color-active: var(
              --rich-text-editor-button-hover-color
            );
            --simple-picker-color-disabled: var(
              --rich-text-editor-border-color
            );
            --simple-picker-background-color: var(--rich-text-editor-bg);
            --simple-picker-background-color-disabled: var(
              --rich-text-editor-border-color
            );
            --simple-picker-border-width: 0px;
            --simple-picker-option-size: 24px;
            --simple-picker-icon-size: 16px;
            --simple-picker-options-border-width: 1px;
          }
        `];
      }

      render() {
        return (0, _litElement.html)`
        <simple-picker
          id="button"
          ?allow-null="${this.allowNull}"
          class="rtebutton ${this.toggled ? "toggled" : ""}"
          ?disabled="${this.disabled}"
          controls="${super.controls}"
          .options="${this.options}"
          @mouseover="${this._pickerFocus}"
          @keydown="${this._pickerFocus}"
          @value-changed="${this._pickerChange}"
          tabindex="0"
          ?title-as-html="${this.titleAsHtml}"
        >
          <span id="label" class="${super.labelStyle}"
            >${this.currentLabel}</span
          >
        </simple-picker>
        <simple-tooltip id="tooltip" for="button"
          >${this.currentLabel}</simple-tooltip
        >
      `;
      }

      static get properties() {
        return { ...super.properties,

          /**
           * Allow a null option to be selected?
           */
          allowNull: {
            type: Boolean
          },

          /**
           * command used for document.execCommand.
           */
          command: {
            type: String
          },

          /**
           * Optional icon for null value
           */
          icon: {
            type: String
          },

          /**
           * Renders html as title. (Good for titles with HTML in them.)
           */
          titleAsHtml: {
            type: Boolean
          },

          /**
           * value of elected options
           */
          value: {
            type: Object
          }
        };
      }

      constructor() {
        super();
        this.allowNull = false;
        this.command = "insertHTML";
        this.label = "Insert link";
        this.titleAsHtml = false;
        this.value = null;
      }

      firstUpdated(changedProperties) {
        super.firstUpdated(changedProperties);

        this._setOptions();
      }
      /**
       * Handles button tap
       * @param {event} e the button tap event
       */


      _pickerFocus(e) {
        e.preventDefault();
      }
      /**
       * determines value of picker based on selected range
       *
       * @param {object} text selected range
       * @returns {boolean} whether button is toggled
       *
       */


      get isToggled() {
        return false;
      }
      /**
       * handles range changes by getting
       */


      _rangeChanged() {
        let val = this._getSelection();

        if (this.shadowRoot) {
          if (this.blockSelectors.split(",").includes(val)) {
            this.shadowRoot.querySelector("#button").value = val;
          } else if (!this.range || this.range.collapsed) {
            this.shadowRoot.querySelector("#button").value = null;
          }
        }

        super._rangeChanged();
      }
      /**
       * override to handle custom options
       */


      _setOptions() {
        return this.options = this._setPickerOptions();
      }
      /**
       * gets a list of icons and load them in a format
       * that simple-picker can take;
       * if no icons are provided, loads a list from iron-meta
       *
       * @param {array} a list of custom icons for picker
       * @returns {array}
       */


      _setPickerOptions(options = this.options || []) {
        let items = [],
            cols = Math.sqrt(options.length) < 11 ? Math.ceil(Math.sqrt(options.length)) : 10;
        options.forEach((option, i) => {
          let row = Math.floor(i / cols),
              col = i - row * cols;
          if (!items[row]) items[row] = [];
          items[row][col] = option;
        });
        return items;
      }
      /**
       * Picker change
       */


      _pickerChange(e) {
        let val = this._getSelectionType() || "";
        this.commandVal = e.detail.value || "";
        /* only update when there is an actual change */

        if (this.range && val !== this.commandVal) {
          if (this.command === "formatBlock") {
            this.setRange();
          } else {
            this.__selection.selectRange(this.range);
          }

          this.execCommand();
        }
      }

    };
  };
  /**
   * `rich-text-editor-picker`
   * a picker for rich text editor (custom buttons can extend this)
   *
   * @element rich-text-editor-picker
   * @demo ./demo/buttons.html
   */


  _exports.RichTextEditorPickerBehaviors = RichTextEditorPickerBehaviors;

  class RichTextEditorPicker extends RichTextEditorPickerBehaviors(_litElement.LitElement) {}

  _exports.RichTextEditorPicker = RichTextEditorPicker;
  window.customElements.define(RichTextEditorPicker.tag, RichTextEditorPicker);
});