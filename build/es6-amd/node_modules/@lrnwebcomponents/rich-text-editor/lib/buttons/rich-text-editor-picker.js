define(["exports","../../../../@polymer/polymer/polymer-element.js","./rich-text-editor-button.js","../../../simple-picker/simple-picker.js","../../../es-global-bridge/es-global-bridge.js"],(function(t,e,o,l,i){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.RichTextEditorPicker=void 0;
/**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */
class RichTextEditorPicker extends o.RichTextEditorButton{constructor(){super(),this.label="Insert link"}static get template(){return e.html`
      <style include="rich-text-editor-button-styles">
        :host {
          margin: 0 var(--rich-text-editor-button-margin);
        }
        :host simple-picker {
          --simple-picker-border-radius: 0px;
          --simple-picker-color: var(--rich-text-editor-button-color);
          --simple-picker-color-active: var(
            --rich-text-editor-button-hover-color
          );
          --simple-picker-color-disabled: var(--rich-text-editor-border-color);
          --simple-picker-background-color: var(--rich-text-editor-bg);
          --simple-picker-background-color-disabled: var(
            --rich-text-editor-border-color
          );
          --simple-picker-border-width: 0px;
          --simple-picker-option-size: 18px;
          --simple-picker-options-border-width: 1px;
        }
      </style>
      <simple-picker
        id="button"
        allow-null$="[[allowNull]]"
        class="rtebutton"
        disabled$="[[super.disabled]]"
        controls$="[[super.controls]]"
        on-change="_pickerChange"
        tabindex="0"
        title-as-html$="[[titleAsHtml]]"
        options="[[options]]"
        value="{{value}}"
      >
        <span id="label" class$="[[super.labelStyle]]">[[__label]]</span>
      </simple-picker>
      <simple-tooltip id="tooltip" for="button">[[__label]]</simple-tooltip>
    `}static get properties(){return{allowNull:{name:"allowNull",type:Boolean,value:!1},command:{name:"command",type:String,value:"insertHTML"},icon:{name:"icon",type:String,value:null},options:{name:"options",type:Array,value:[],notify:!0},titleAsHtml:{name:"titleAsHtml",type:Boolean,value:!1},value:{name:"value",type:Object,value:null}}}static get tag(){return"rich-text-editor-picker"}_isToggled(t){let e=this.options?[].concat(...this.options).map(t=>t.value).filter(t=>null!==t&&""!==t).join(","):null,o=null!==t&&t.commonAncestorContainer?t.commonAncestorContainer.parentNode:null;return this.shadowRoot.querySelector("#button").value="formatBlock"===this.command&&e&&o&&null!==o.closest(e)?o.closest(e).tagName.toLowerCase():null,!1}_setOptions(){this.set("options",this._getPickerOptions(data,this.allowNull,this.icon))}_pickerChange(t){let e=this.shadowRoot.querySelector("#button").value;console.log("_pickerChange",this.shadowRoot.querySelector("#button").value),t.preventDefault(),null!==e&&void 0!==this.range&&null!==this.range&&(this.commandVal=this.shadowRoot.querySelector("#button").value,console.log("commandVal",this.commandVal),this.doTextOperation(),!0!==this.block&&(this.shadowRoot.querySelector("#button").value=null,this.dispatchEvent(new CustomEvent("deselect",{detail:this}))))}_getOptionData(t){return{alt:t.alt,icon:t.icon,style:t.style,value:t.value}}_getPickerOptions(t=[],e=!1,o=null){let l=[],i=Math.sqrt(t.length)<11?Math.ceil(Math.sqrt(t.length)):10;for(let r=0;r<t.length;r++){let e=Math.floor(r/i),o=r-e*i,s=this._getOptionData(t[r]);void 0!==l[e]&&null!==l[e]||(l[e]=[]),l[e][o]=s}return l}}t.RichTextEditorPicker=RichTextEditorPicker,window.customElements.define(RichTextEditorPicker.tag,RichTextEditorPicker)}));