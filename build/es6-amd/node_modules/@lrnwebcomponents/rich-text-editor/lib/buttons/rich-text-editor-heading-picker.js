define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-picker.js"], function (_exports, _litElement, _richTextEditorPicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorHeadingPicker = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `rich-text-editor-heading-picker`
   * a heading picker for the rich-text-editor
   *
   * @element rich-text-editor-heading-picker
   * @demo ./demo/buttons.html
   */
  class RichTextEditorHeadingPicker extends (0, _richTextEditorPicker.RichTextEditorPickerBehaviors)(_litElement.LitElement) {
    /**
     * Store the tag name to make it easier to obtain directly.
     */
    static get tag() {
      return "rich-text-editor-heading-picker";
    }

    static get styles() {
      return [...super.styles];
    } // render function for template


    render() {
      return super.render();
    }

    constructor() {
      super();
      this.allowNull = true;
      this.blocks = [{
        label: "Paragraph",
        tag: "p"
      }, {
        label: "Heading 1",
        tag: "h1"
      }, {
        label: "Heading 2",
        tag: "h2"
      }, {
        label: "Heading 3",
        tag: "h3"
      }, {
        label: "Heading 4",
        tag: "h4"
      }, {
        label: "Heading 5",
        tag: "h5"
      }, {
        label: "Heading 6",
        tag: "h6"
      }, {
        label: "Preformatted",
        tag: "pre"
      }];
      this.command = "formatBlock";
      this.icon = null;
      this.label = "Block format";
    } // properties available to the custom element for data binding


    static get properties() {
      let props = super.properties;
      delete props.block;
      return { ...props,

        /**
         * block element options as array of objects,
         * eg. [ { label: "Paragraph", tag: "p" }, { label: "Heading 1", tag: "h1" }, ...]
         *
         */
        blocks: {
          name: "blocks",
          type: Array
        }
      };
    }

    get blockSelectors() {
      let arr = [...super.blockSelectors.split(","), ...(this.blocks || []).map(blocks => blocks.tag)].filter((v, i, s) => s.indexOf(v) === i);
      return arr.join(",");
    }
    /**
     * populates the picker
     */


    _setOptions() {
      this.tag = this.blocks.map(block => block.tag).join(",");
      this.options = [[{
        alt: this.label,
        value: null
      }], ...this.blocks.map(block => [{
        alt: block.label,
        value: block.tag
      }])];
    }

  }

  _exports.RichTextEditorHeadingPicker = RichTextEditorHeadingPicker;
  window.customElements.define(RichTextEditorHeadingPicker.tag, RichTextEditorHeadingPicker);
});