define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-button.js", "../singletons/rich-text-editor-selection.js", "../singletons/rich-text-editor-prompt.js"], function (_exports, _litElement, _richTextEditorButton, _richTextEditorSelection, _richTextEditorPrompt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorPromptButtonBehaviors = _exports.RichTextEditorPromptButton = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */
  const RichTextEditorPromptButtonBehaviors = function (SuperClass) {
    return class extends (0, _richTextEditorButton.RichTextEditorButtonBehaviors)(SuperClass) {
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      static get tag() {
        return "rich-text-editor-prompt-button";
      } // render function for template


      render() {
        return super.render();
      } // properties available to the custom element for data binding


      static get properties() {
        return { ...super.properties,

          /**
           * fields for the prompt popover.
           */
          fields: {
            type: Array
          },

          /**
           * is the element a custom inline widget element?
           */
          inlineWidget: {
            name: "inlineWidget",
            type: Boolean
          },

          /**
           * the tag that will wrap the selected range
           */
          tag: {
            name: "tag",
            type: String
          },

          /**
           * The prefilled value of the prompt
           */
          value: {
            type: Object
          },

          /**
           * fields for the prompt popover.
           */
          __promptFields: {
            type: Array
          },

          /**
           * the contents node inside the selected range
           */
          __oldValue: {
            name: "__oldValue",
            type: Object
          },

          /**
           * the prompt that pops up when button is pressed
           */
          __prompt: {
            name: "__prompt",
            type: Object
          },

          /**
           * the contents node inside the selected range
           */
          __selectionContents: {
            name: "__selectionContents",
            type: Object
          }
        };
      }

      constructor() {
        super();
        this.editableSelection = false;
        this.inlineWidget = false;
        this.fields = [{
          slot: "",
          title: "Text",
          description: "The inner text",
          inputMethod: "textfield"
        }];
        this.tag = "span";
        this.value = {
          "": null,
          id: null
        };
        this.__prompt = window.RichTextEditorPrompt.requestAvailability();
      }
      /**
       * Handles button tap
       * @param {event} e the button tap event
       */


      _buttonTap(e) {
        e.preventDefault();

        let block = this._getSelectedBlock();

        this.__selection.selectRange(this.range);

        if (block) {
          this.range.selectNode(block);
        } else {
          this.__selection.wrap();
        }

        this.__selection.addHighlight();

        this.range = this.__selection.range;
        this.open();
      }
      /**
       * cancels the changes
       */


      cancel() {
        this.__selection.removeHighlight();
      }
      /**
       * updates the insertion based on fields
       */


      confirm() {
        this.updateSelection();

        this.__selection.removeHighlight();
      }
      /**
       * Handles editor change
       * @param {string} newVal the new editor's id
       * @param {string} oldVal the old editor's id
       * @returns {void}
       */


      _editorChanged(newVal, oldVal) {
        let newEditor = newVal ? document.getElementById(newVal) : null,
            oldEditor = oldVal ? document.getElementById(oldVal) : null;
        if (newEditor) newEditor.addEventListener("click", e => this._editInlineWidget(newEditor, e), true);
        if (oldEditor) oldEditor.removeEventListener("click", e => this._editInlineWidget(oldEditor, e), true);

        super._editorChanged(newVal, oldVal);
      }
      /**
       *
       * @param {object} editor the active editor
       * @param {event} e the edit event
       * @returns {boolean} whether to prevent the default behavior for an inline widget
       */


      _editInlineWidget(editor, e) {
        if (editor.getAttribute("contenteditable") && this.inlineWidget && e.target.tagName && e.target.tagName.toLowerCase() === this.tag) {
          e.stopPropagation();
          e.preventDefault();
          this.selectWidget(e.target);
          this.open();
          return false;
        } else {
          return true;
        }
      }

      selectWidget(widget) {
        this.__selection.selectNode(widget);

        this.__selectionContents = widget;
      }
      /**
       * Handles selecting text and opening prompt
       */


      open() {
        this.updatePrompt();

        this.__prompt.setTarget(this);
      }
      /**
       * updates prompt fields with selected range data
       */


      updatePrompt() {
        this.__selectionContents = this.__selection.firstChild;
        this.__promptFields = JSON.parse(JSON.stringify(this.fields));
      }
      /**
       * updates the insertion based on fields
       */


      updateSelection() {
        this.__selectionContents = this._getSelectedBlock() || this.__selection;
        this.setRange();
        this.toggled = !this.__prompt.value;
        this.commandVal = this.__prompt.value;
        this.execCommand();
      }

      setRange() {
        this.__selection.selectRange(this.range);
      }

    };
  };
  /**
   * `rich-text-editor-prompt-button`
   * a button that prompts for more information for rich text editor (custom buttons can extend this)
   *
   * @element rich-text-editor-prompt-button
   * @demo ./demo/buttons.html
   */


  _exports.RichTextEditorPromptButtonBehaviors = RichTextEditorPromptButtonBehaviors;

  class RichTextEditorPromptButton extends RichTextEditorPromptButtonBehaviors(_litElement.LitElement) {}

  _exports.RichTextEditorPromptButton = RichTextEditorPromptButton;
  window.customElements.define(RichTextEditorPromptButton.tag, RichTextEditorPromptButton);
});