define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-prompt-button.js"], function (_exports, _litElement, _richTextEditorPromptButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorLink = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `rich-text-editor-link`
   * a button for rich text editor (custom buttons can extend this)
   *
   * @element rich-text-editor-link
   * @demo ./demo/buttons.html
   */
  class RichTextEditorLink extends (0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_litElement.LitElement) {
    /**
     * Store the tag name to make it easier to obtain directly.
     */
    static get tag() {
      return "rich-text-editor-link";
    } // render function for template


    render() {
      return super.render();
    } // properties available to the custom element for data binding


    static get properties() {
      return { ...super.properties
      };
    }

    constructor() {
      super();
      this.fields = [{
        property: "linktext",
        title: "Text",
        description: "The link text",
        inputMethod: "textfield"
      }, {
        property: "href",
        title: "Link",
        description: "The link URL. (Leave blank to remove.)",
        inputMethod: "url",
        autoValidate: true
      }];
      this.command = "CreateLink";
      this.icon = "link";
      this.label = "Link";
      this.toggledCommand = "unlink";
      this.toggledIcon = "mdextra:unlink";
      this.toggledLabel = "Unlink";
      this.toggles = "true", this.tag = "a";
      this.value = {
        link: null
      };
      this.shortcutKeys = "ctrl+k";
    }
    /**
     * overrides default block selectors
     *
     * @readonly
     * @memberof RichTextEditorLink
     */


    get blockSelectors() {
      return "a";
    }
    /**
     * whether button is toggled
     *
     * @readonly
     * @memberof RichTextEditorButton
     */


    get isToggled() {
      return this.toggled;
    }
    /**
     * updates prompt fields with selected range data
     */


    updatePrompt() {
      super.updatePrompt();
      this.value = {
        linktext: this.__selectionContents ? this.__selectionContents.innerHTML : this.__selection.innerHTML,
        href: this.__selectionContents && this.__selectionContents.getAttribute ? this.__selectionContents.getAttribute("href") : undefined
      };
    }
    /**
     * updates the insertion based on fields
     */


    updateSelection() {
      let link = this.__prompt.getPromptValue("href"),
          text = this.__prompt.getPromptValue("linktext");

      this.setRange();
      this.__selectionContents.innerHTML = text;
      this.toggled = !link || !text;
      this.commandVal = link || undefined;
      this.execCommand();
    }

  }

  _exports.RichTextEditorLink = RichTextEditorLink;
  window.customElements.define(RichTextEditorLink.tag, RichTextEditorLink);
});