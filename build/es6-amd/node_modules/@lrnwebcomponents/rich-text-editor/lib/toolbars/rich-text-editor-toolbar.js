define(["exports","../../../../@polymer/polymer/polymer-element.js","../../../responsive-utility/responsive-utility.js","../../rich-text-editor.js","../rich-text-editor-styles.js","../singletons/rich-text-editor-selection.js","../buttons/rich-text-editor-button.js","../buttons/rich-text-editor-more-button.js","../buttons/rich-text-editor-heading-picker.js","../buttons/rich-text-editor-symbol-picker.js","../buttons/rich-text-editor-link.js","../buttons/rich-text-editor-button-styles.js","../../../../@polymer/iron-icons/iron-icons.js","../../../../@polymer/iron-icons/editor-icons.js","../../../../@polymer/iron-icons/image-icons.js","../../../md-extra-icons/md-extra-icons.js"],function(_exports,_polymerElement,_responsiveUtility,_richTextEditor,_richTextEditorStyles,_richTextEditorSelection,_richTextEditorButton,_richTextEditorMoreButton,_richTextEditorHeadingPicker,_richTextEditorSymbolPicker,_richTextEditorLink,_richTextEditorButtonStyles,_ironIcons,_editorIcons,_imageIcons,_mdExtraIcons){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.RichTextEditorToolbar=void 0;/**
 * Copyright 2019 Penn State University
 * @license Apache-2.0, see License.md for full text.
 */ /**
 * `rich-text-editor-toolbar`
 * `a basic toolbar for the rich text editor`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 * @demo demo/index.html demo
 * @demo demo/config.html custom configuration
 */class RichTextEditorToolbar extends _polymerElement.PolymerElement{// render function for styles
static get stickyTemplate(){return _polymerElement.html`
      <style>
        :host([sticky]) {
          position: sticky;
          top: 0;
        }
      </style>
    `}// render function for styles
static get styleTemplate(){return _polymerElement.html`
      <style include="rich-text-editor-styles"></style>
      <style include="rich-text-editor-button-styles">
        :host([hidden]) {
          display: none;
        }
        :host #toolbar {
          display: flex;
          opacity: 1;
          margin: 0;
          align-items: stretch;
          flex-wrap: wrap;
          justify-content: flex-start;
          background-color: var(--rich-text-editor-bg);
          border: var(--rich-text-editor-border);
          font-size: 12px;
          transition: all 0.5s;
          @apply --rich-text-editor-toolbar;
        }
        :host #toolbar[aria-hidden] {
          visibility: hidden;
          opacity: 0;
          height: 0;
        }
        :host #toolbar .group {
          display: flex;
          flex-wrap: nowrap;
          justify-content: space-evenly;
          align-items: stretch;
          padding: 0 3px;
          @apply --rich-text-editor-toolbar-group;
        }
        :host #toolbar .group:not(:last-of-type) {
          margin-right: 3px;
          border-right: var(--rich-text-editor-border);
          @apply --rich-text-editor-toolbar-divider;
        }
        :host #toolbar .button {
          display: flex;
          flex: 0 0 auto;
          align-items: stretch;
        }
        :host #toolbar #morebutton {
          flex: 1 0 auto;
          justify-content: flex-end;
        }
        /* hide the more button if all the buttons are displayed */
        :host([responsive-size="xs"]) #morebutton[collapse-max="xs"],
        :host([responsive-size="sm"]) #morebutton[collapse-max*="s"],
        :host([responsive-size="md"]) #morebutton:not([collapse-max*="l"]),
        :host([responsive-size="lg"]) #morebutton:not([collapse-max="xl"]),
        :host([responsive-size="xl"]) #morebutton,
        /* hide the buttons if they should be collaped until */
        :host([responsive-size="xs"]) #toolbar[collapsed] *[collapsed-until*="m"],
        :host([responsive-size="xs"]) #toolbar[collapsed] *[collapsed-until*="l"],
        :host([responsive-size="sm"]) #toolbar[collapsed] *[collapsed-until="md"],
        :host([responsive-size="sm"]) #toolbar[collapsed] *[collapsed-until*="l"],
        :host([responsive-size="md"]) #toolbar[collapsed] *[collapsed-until*="l"],
        :host([responsive-size="lg"]) #toolbar[collapsed] *[collapsed-until="xl"] {
          display: none;
        }
      </style>
    `}// render function for toolbar
static get toolbarTemplate(){return _polymerElement.html`
      <div
        id="toolbar"
        aria-live="polite"
        aria-hidden$="[[!controls]]"
        collapsed$="[[collapsed]]"
      >
        <rich-text-editor-more-button
          id="morebutton"
          class="button"
          controls="toolbar"
          icon$="[[moreIcon]]"
          label$="[[moreLabel]]"
          show-text-label$="[[moreShowTextLabel]]"
          label-toggled$="[[moreLabelToggled]]"
          toggled$="[[!collapsed]]"
          on-tap="_toggleMore"
        >
        </rich-text-editor-more-button>
      </div>
    `}// render function for template
static get template(){return _polymerElement.html`
      ${this.styleTemplate} ${this.stickyTemplate} ${this.toolbarTemplate}
    `}// properties available to the custom element for data binding
static get properties(){return{/**
       * The editor buttons, as determined by `config`.
       */buttons:{name:"buttons",type:Array,computed:"_getButtons(config)"},/**
       * The editable content, if edits are canceled.
       */canceled:{name:"canceled",type:Object,value:!0},/**
       * Is the toolbar collapsed?
       */collapsed:{name:"collapsed",type:Boolean,value:!0},/**
       * Custom configuration of toolbar groups and buttons.
       * (See default value for example using default configuration.)
       */config:{name:"config",type:Object,value:[{label:"History",type:"button-group",buttons:[{command:"undo",icon:"undo",label:"Undo",type:"rich-text-editor-button"},{command:"redo",icon:"redo",label:"Redo",type:"rich-text-editor-button"}]},{label:"Basic Inline Operations",type:"button-group",buttons:[{label:"Heading",type:"rich-text-editor-heading-picker"},{command:"bold",icon:"editor:format-bold",label:"Bold",toggles:!0,type:"rich-text-editor-button"},{command:"italic",icon:"editor:format-italic",label:"Italics",toggles:!0,type:"rich-text-editor-button"},{command:"removeFormat",icon:"editor:format-clear",label:"Erase Format",type:"rich-text-editor-button"}]},{label:"Links",type:"button-group",buttons:[{command:"link",icon:"link",label:"Link",prompt:"href",toggledCommand:"unlink",toggledIcon:"mdextra:unlink",toggledLabel:"Unink",toggles:!0,type:"rich-text-editor-link"}]},{label:"Clipboard Operations",type:"button-group",buttons:[{command:"cut",icon:"content-cut",label:"Cut",type:"rich-text-editor-button"},{command:"copy",icon:"content-copy",label:"Copy",type:"rich-text-editor-button"},{command:"paste",icon:"content-paste",label:"Paste",type:"rich-text-editor-button"}]},{collapsedUntil:"md",label:"Subscript and Superscript",type:"button-group",buttons:[{command:"subscript",icon:"mdextra:subscript",label:"Subscript",toggles:!0,type:"rich-text-editor-button"},{command:"superscript",icon:"mdextra:superscript",label:"Superscript",toggles:!0,type:"rich-text-editor-button"}]},{collapsedUntil:"sm",icon:"editor:functions",label:"Insert Symbol",symbolTypes:["symbols"],type:"rich-text-editor-symbol-picker"},{collapsedUntil:"sm",label:"Lists and Indents",type:"button-group",buttons:[{command:"insertOrderedList",icon:"editor:format-list-numbered",label:"Ordered List",toggles:!0,type:"rich-text-editor-button"},{command:"insertUnorderedList",icon:"editor:format-list-bulleted",label:"Unordered List",toggles:!0,type:"rich-text-editor-button"},{collapsedUntil:"lg",command:"formatBlock",commandVal:"blockquote",label:"Blockquote",icon:"editor:format-quote",type:"rich-text-editor-button"},{label:"Increase Indent",icon:"editor:format-indent-increase",event:"text-indent",command:"indent",type:"rich-text-editor-button"},{label:"Decrease Indent",icon:"editor:format-indent-decrease",event:"text-outdent",command:"outdent",type:"rich-text-editor-button"}]}]},/**
       * The `id` of the `rich-text-editor` that the toolbar controls.
       */controls:{name:"controls",type:String,value:null},/**
       * The `rich-text-editor` element that uis currently in `contenteditable` mode
       */editor:{name:"editor",type:Object,value:null},/**
       * The icon for the more button.
       */moreIcon:{name:"moreIcon",type:String,value:"more-vert"},/**
       * The label for the more button.
       */moreLabel:{name:"moreLabel",type:String,value:"More Buttons"},/**
       * The label for the more button when toggled.
       */moreLabelToggled:{name:"moreLabelToggled",type:String,value:"Fewer Buttons"},/**
       * The show text label for more button.
       */moreShowTextLabel:{name:"moreShowTextLabel",type:Boolean,value:!1},/**
       * The the size of the editor.
       */responsiveSize:{name:"responsiveSize",type:String,value:"xs",reflectToAttribute:!0},/**
       * The current text selection.
       */savedSelection:{name:"savedSelection",type:Object,value:null},/**
       * The current text selection, which is actually a range.
       */selection:{name:"selection",type:Object,value:null,observer:"_selectionChange"},/**
       * Should the toolbar stick to the top so that it is always visible?
       */sticky:{name:"sticky",type:Boolean,value:!1,reflectToAttribute:!0,observer:"_stickyChanged"}}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */static get tag(){return"rich-text-editor-toolbar"}/**
   * life cycle, element is afixed to the DOM
   */connectedCallback(){super.connectedCallback();let root=this;window.RichTextEditorSelection.requestAvailability();window.ResponsiveUtility.requestAvailability();window.dispatchEvent(new CustomEvent("responsive-element",{detail:{element:root,attribute:"responsive-size",relativeToParent:!0}}))}/**
   * life cycle, element is disconnected
   */disconnectedCallback(){let root=this;//unbind the the toolbar to the rich-text-editor-selection
root.dispatchEvent(new CustomEvent("deselect-rich-text-editor-editor",{bubbles:!0,cancelable:!0,composed:!0,detail:{toolbar:root,editor:root.editor}}))}/**
   * adds an editor
   *
   * @param {object} an HTML object that can be edited
   */addEditableRegion(editor){let root=this;editor.addEventListener("keydown",e=>{root.editTarget(editor)});editor.addEventListener("mousedown",e=>{root.editTarget(editor)});editor.addEventListener("blur",e=>{if(null===e.relatedTarget||"rich-text-editor"===!e.relatedTarget.startsWith)root.editTarget(null);//root.getUpdatedSelection();
});/*editor.addEventListener("mouseout", e => {
      root.getUpdatedSelection();
    });*/}/**
   * cancels edits to the active editor
   */cancel(){this.editor.innerHTML=this.canceled;this.editTarget(null)}/**
   * makes a editor editable
   *
   * @param {object} an HTML object that can be edited
   */editTarget(editor){let root=this,sel=window.getSelection();if(root.editor!==editor){//save changes to previous editor
if(null!==root.editor){root.editor.contentEditable=!1;root.editor=null}//bind the the toolbar to the rich-text-editor-selection
root.dispatchEvent(new CustomEvent("select-rich-text-editor-editor",{bubbles:!0,cancelable:!0,composed:!0,detail:{toolbar:root,editor:root.editor}}));root.editor=editor;if(editor){editor.parentNode.insertBefore(root,editor);root.canceled=editor.innerHTML;root.editor.contentEditable=!0;root.controls=editor.getAttribute("id")}else{root.controls=null}}}/**
   * Gets the updated selection.
   */_selectionChange(){let root=this;root.buttons.forEach(button=>{button.selection=null;button.selection=root.selection})}/**
   * make an new editable element
   *
   * @param {object} an HTML object that can be edited
   */makeEditableRegion(editor){let root=this,content=document.createElement("rich-text-editor");editor.parentNode.insertBefore(content,editor);content.appendChild(editor);root.addEditableRegion(content)}/**
   * removes an editor
   *
   * @param {object} an HTML object that can be edited
   */removeEditableRegion(editor){let root=this;editor.removeEventListener("click",e=>{root.editTarget(editor)});editor.removeEventListener("blur",e=>{if(null===e.relatedTarget||"rich-text-editor"===!e.relatedTarget.startsWith)root.editTarget(null);root.getUpdatedSelection()});editor.removeEventListener("mouseout",e=>{root.getUpdatedSelection()})}/**
   * Adds a button to the toolbar
   *
   * @param {object} the child object in the config object
   * @param {object} the parent object in the config object
   */_addButton(child,parent){let root=this,button=document.createElement(child.type);for(var key in child){button[key]=child[key]}button.setAttribute("class","button");button.addEventListener("deselect",e=>{if(root.range&&root.range.collapse)root.range.collapse(!1)});parent.appendChild(button);return button}/**
   * Gets the groups array for the dom-repeat.
   *
   * @param {object} the toolbar buttons config object
   * @param {array} an array the buttons grouped by size
   */_getButtons(config){let root=this,toolbar=root.$.toolbar,more=this.$.morebutton,max=0,sizes=["xs","sm","md","lg","xl"],temp=[];toolbar.innerHTML="";config.forEach(item=>{if("button-group"===item.type){let group=document.createElement("div");group.setAttribute("class","group");if(item.collapsedUntil!==void 0&&null!==item.collapsedUntil)group.setAttribute("collapsed-until",item.collapsedUntil);max=Math.max(max,sizes.indexOf(item.collapsedUntil));item.buttons.forEach(button=>{max=Math.max(max,sizes.indexOf(button.collapsedUntil));temp.push(root._addButton(button,group))});toolbar.appendChild(group)}else{max=Math.max(max,sizes.indexOf(item.collapsedUntil));temp.push(root._addButton(item,toolbar))}toolbar.appendChild(more);more.collapseMax=sizes[max]});return temp}/**
   * updates breadcrumb sticky
   */_stickyChanged(newVal,oldVal){if(this.__breadcrumbs)this.__breadcrumbs.sticky=this.sticky}/**
   * Toggles collapsed mode when `rich-text-editor-more-button` is tapped
   * @param {object} e the `rich-text-editor-more-button` tap event
   * @returns {void}
   */_toggleMore(e){this.collapsed=!this.collapsed}}_exports.RichTextEditorToolbar=RichTextEditorToolbar;window.customElements.define(RichTextEditorToolbar.tag,RichTextEditorToolbar)});