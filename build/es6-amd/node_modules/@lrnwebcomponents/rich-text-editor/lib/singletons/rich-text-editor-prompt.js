define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "../../../simple-popover/simple-popover.js", "../../../simple-fields/simple-fields.js", "../buttons/rich-text-editor-button-styles.js"], function (_exports, _polymerElement, _ironA11yKeys, _simplePopover, _simpleFields, _richTextEditorButtonStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorPrompt = void 0;

  /**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `rich-text-editor-prompt`
   * `A utility that manages the state of multiple rich-text-prompts on one page.`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   */
  class RichTextEditorPrompt extends _polymerElement.PolymerElement {
    /* REQUIRED FOR TOOLING DO NOT TOUCH */
    // render function
    static get template() {
      return (0, _polymerElement.html)`
      <style include="rich-text-editor-styles rich-text-editor-button-styles">
        :host {
          --paper-input-container-focus-color: var(
            --rich-text-editor-focus-color,
            #000
          );
          --paper-input-container-invalid-color: var(
            --rich-text-editor-error-color,
            #800
          );
        }
        :host #prompt {
          display: none;
          width: 300px;
          max-width: 300px;
          --simple-popover-padding: 0px;
        }
        :host #prompt[for]{
          display: block;
          z-index: 2;
        }
        :host #prompt[for] #form {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: space-between;
          z-index: 2;
        }
        :host #formfields {
          width: calc(100% - 20px);
          padding: 10px 10px 0;
        }
        :host #prompt paper-input {
          padding: 0;
        }
        :host #confirm, 
        :host #cancel {
          min-width: unset;
        }
        :host #formfields {
          overflow: visible;
        }
        :host #cancel {
          color: var(--rich-text-editor-button-color);
          background-color: var(--rich-text-editor-button-bg);

        }
        :host #cancel:focus,
        :host #cancel:hover {
          color: var(--rich-text-editor-button-hover-color);
          background-color: var(--rich-text-editor-button-hover-bg);
        }
        :host #confirm {
          color: var(--rich-text-editor-button-color);
          background-color: var(--rich-text-editor-button-bg);

        }
        :host #confirm:focus,
        :host #confirm:hover {
          color: var(--rich-text-editor-button-hover-color);
          background-color: var(--rich-text-editor-button-hover-bg);
        }
        :host .actions {
          width: 100%;
          padding-bottom: 3px;
          display: flex;
          align-items: center;
          justify-content: flex-end;
        }
        :host .confirm-or-cancel {
          min-width: 40px;
        }
      </style>
      <simple-popover
        id="prompt"
        auto
        for$="[[for]]"
      >
        <form id="form">
          <simple-fields
            id="formfields"
            autofocus
            hide-line-numbers
            fields="[[fields]]"
            value="{{value}}"
          ></simple-fields>
          <div class="actions">
            </iron-a11y-keys>
            <paper-button
              id="cancel"
              class="rtebutton"
              controls$="[[for]]"
              on-click="_cancel"
              tabindex="0"
            >
              <iron-icon id="icon" aria-hidden icon="clear"> </iron-icon>
              <span id="label" class="offscreen">Cancel</span>
            </paper-button>
            <simple-tooltip id="tooltip" for="cancel">Cancel</simple-tooltip>
            <paper-button
              id="confirm"
              class="rtebutton"
              controls$="[[for]]"
              on-click="_confirm"
              tabindex="0"
            >
              <iron-icon id="icon" aria-hidden icon="check"> </iron-icon>
              <span id="label" class="offscreen">OK</span>
            </paper-button>
            <simple-tooltip id="tooltip" for="confirm">OK</simple-tooltip>
          </div>
          <iron-a11y-keys
            id="a11ycancel"
            target="[[__a11ycancel]]"
            keys="enter space"
            on-keys-pressed="_cancel"
          >
          <iron-a11y-keys
            id="a11yconfirm"
            target="[[__a11yconfirm]]"
            keys="enter space"
            on-keys-pressed="_confirm"
          >
          </iron-a11y-keys>
        </form>
      </simple-popover>
    `;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     */


    static get tag() {
      return "rich-text-editor-prompt";
    } // properties available to the custom element for data binding


    static get properties() {
      return {
        /**
         * Is the  target id.
         */
        for: {
          type: String
        },

        /**
         * The selected text.
         */
        range: {
          type: Object,
          value: null
        },

        /**
         * fields for the prompt popover.
         */
        fields: {
          type: Array,
          value: null
        },

        /**
         * The prefilled value of the prompt
         */
        value: {
          type: Object,
          value: null
        },

        /**
         * The prefilled value of the prompt
         */
        __button: {
          type: Object,
          value: null
        }
      };
    }
    /**
     * Makes sure there is a utility ready and listening for elements.
     */


    constructor() {
      super();
      let root = this; // sets the instance to the current instance

      if (!window.RichTextEditorPrompt.instance) {
        window.RichTextEditorPrompt.instance = this;
        return this;
      }
    }
    /**
     * life cycle, element is afixed to the DOM
     * Makes sure there is a utility ready and listening for elements.
     */


    connectedCallback() {
      super.connectedCallback();
      this.__a11yconfirm = this.shadowRoot.querySelector("#confirm");
      this.__a11ycancel = this.shadowRoot.querySelector("#cancel");
      /*
      TODO blur  doesnt work with select dropdowns
       this.addEventListener("blur", e => {
        console.log("blur", document.activeElement);
        this._cancel(e);
      });*/
    }
    /**
     * Associates a button and its selection data with the prompt
     * @param {object} button the button to associate with the prompt
     * @returns {void}
     */


    setTarget(button) {
      this.clearTarget();
      this.set("fields", button.__fields);
      this.set("value", button.value);
      this.__button = button;
      if (button.__selection) this.for = button.__selection.getAttribute("id");
    }
    /**
     * Disassociates the button and selection data from the prompt
     * @returns {void}
     */


    clearTarget() {
      if (!this.__button) return;
      this.for = null;
      this.set("fields", null);
      this.set("value", null);
      this.__button = null;
    }
    /**
     * Handles cancel button
     * @param {event} e the event
     * @returns {void}
     */


    _cancel(e) {
      e.preventDefault();
      if (!this.__button) return;

      this.__button.cancel();

      this.clearTarget();
    }
    /**
     * Handles the confirm button
     * @param {event} e the event
     * @returns {void}
     */


    _confirm(e) {
      e.preventDefault();
      this.__button.value = this.value;

      this.__button.confirm();

      this.clearTarget();
    }

  }

  _exports.RichTextEditorPrompt = RichTextEditorPrompt;
  window.customElements.define(RichTextEditorPrompt.tag, RichTextEditorPrompt);
  // register globally so we can make sure there is only one
  window.RichTextEditorPrompt = window.RichTextEditorPrompt || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.RichTextEditorPrompt.requestAvailability = () => {
    if (!window.RichTextEditorPrompt.instance) {
      window.RichTextEditorPrompt.instance = document.createElement("rich-text-editor-prompt");
      document.body.appendChild(window.RichTextEditorPrompt.instance);
    }

    return window.RichTextEditorPrompt.instance;
  };
});