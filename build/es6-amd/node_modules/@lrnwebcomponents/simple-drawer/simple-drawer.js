define(["exports","../../lit-element/lit-element.js","../simple-colors/simple-colors.js","../../@polymer/polymer/lib/elements/custom-style.js","../../@polymer/app-layout/app-drawer/app-drawer.js","../../@polymer/neon-animation/neon-animation.js","../../@polymer/paper-button/paper-button.js","../../@polymer/iron-icons/iron-icons.js","../../@polymer/iron-icon/iron-icon.js"],(function(_exports,_litElement,_simpleColors,_customStyle,_appDrawer,_neonAnimation,_paperButton,_ironIcons,_ironIcon){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.SimpleDrawer=void 0,
/**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
window.SimpleDrawer=window.SimpleDrawer||{},window.SimpleDrawer.requestAvailability=()=>(window.SimpleDrawer.instance||(window.SimpleDrawer.instance=document.createElement("simple-drawer"),document.body.appendChild(window.SimpleDrawer.instance)),window.SimpleDrawer.instance);class SimpleDrawer extends _simpleColors.SimpleColors{static get styles(){return[...super.styles,_litElement.css`
        :host {
          display: block;
          z-index: 1000;
        }
        :host([hidden]) {
          display: none;
        }
        :host div::slotted(*) {
          font-size: 14px;
        }

        .content {
          text-align: left;
          padding: 8px 24px;
        }

        .top ::slotted(*) {
          font-size: 24px;
          margin: 0;
          padding: 0 15px;
          height: 40px;
          line-height: 48px;
        }

        #close {
          position: absolute;
          right: 8px;
          top: 8px;
          padding: 4px;
          margin: 0;
          text-transform: none;
          float: right;
          font-size: 12px;
          color: var(--simple-drawer-header-color, #ffffff);
          background-color: transparent;
          min-width: unset;
        }

        #close iron-icon {
          display: inline-block;
          width: 16px;
          height: 16px;
          margin-right: 2px;
        }

        .top {
          font-size: 24px;
          margin: 0 0 8px 0;
          padding: 0 16px;
          height: 64px;
          line-height: 64px;
          display: flex;
          text-align: left;
          justify-content: space-between;
          background-color: var(--simple-drawer-header-background, #20427b);
          color: var(--simple-drawer-header-color, #ffffff);
        }

        .top h2 {
          flex: auto;
          color: var(--simple-drawer-header-color, #ffffff);
          font-size: 24px;
          padding: 0;
          line-height: 32px;
          margin: 8px;
        }
      `]}render(){return _litElement.html`
      <custom-style>
        <style>
          app-drawer {
            --app-drawer-content-container: {
              padding: 0;
              overflow-y: scroll;
              position: fixed;
              color: var(--simple-drawer-color, #222222);
              background-color: var(--simple-drawer-background-color, #ffffff);
            }
          }
          :host ::slotted(*) {
            @apply --simple-drawer-content;
          }

          .content {
            @apply --simple-drawer-content-container;
          }
          .top {
            @apply --simple-drawer-header;
          }

          .top h2 {
            @apply --simple-drawer-heading;
          }
        </style>
      </custom-style>
      <app-drawer
        tabindex="0"
        id="drawer"
        ?opened="${this.opened}"
        @opened-changed="${this.__openedChanged}"
        .align="${this.align}"
        role="dialog"
      >
        <div class="wrapper">
          <div class="top">
            ${this.title?_litElement.html`
                  <h2>${this.title}</h2>
                `:""}
            <slot name="header"></slot>
          </div>
          <div class="content">
            <slot name="content"></slot>
          </div>
          <paper-button id="close" @click="${this.close}">
            <iron-icon icon="${this.closeIcon}"></iron-icon> ${this.closeLabel}
          </paper-button>
        </div>
      </app-drawer>
    `}static get properties(){return{...super.properties,title:{name:"title",type:String},align:{name:"align",type:String},opened:{name:"opened",type:Boolean,reflect:!0},closeLabel:{name:"closeLabel",type:String},closeIcon:{name:"closeIcon",type:String},invokedBy:{name:"invokedBy",type:Object}}}static get tag(){return"simple-drawer"}constructor(){super(),this.title="",this.align="left",this.opened=!1,this.closeLabel="Close",this.closeIcon="icons:cancel"}firstUpdated(changedProperties){window.addEventListener("simple-drawer-hide",this.close.bind(this)),window.addEventListener("simple-drawer-show",this.showEvent.bind(this))}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"opened"==propName&&this._openedChanged(this[propName],oldValue)})}showEvent(e){if(this.opened){for(;null!==this.firstChild;)this.removeChild(this.firstChild);setTimeout(()=>{this.show(e.detail.title,e.detail.elements,e.detail.invokedBy,e.detail.align,e.detail.clone)},100)}else this.show(e.detail.title,e.detail.elements,e.detail.invokedBy,e.detail.align,e.detail.size,e.detail.clone)}show(title,elements,invokedBy,align="left",size="256px",clone=!1){let element;this.invokedBy=invokedBy,this.title=title,this.align=align,this.shadowRoot.querySelector("#drawer").updateStyles({"--app-drawer-width":size});let slots=["header","content"];for(var i in slots)elements[slots[i]]&&(element=clone?elements[slots[i]].cloneNode(!0):elements[slots[i]],element.setAttribute("slot",slots[i]),this.appendChild(element));setTimeout(()=>{this.opened=!0,window.dispatchEvent(new Event("resize"))},100)}animationEnded(e){for(this.title="";null!==this.firstChild;)this.removeChild(this.firstChild);this.invokedBy&&async.microTask.run(()=>{setTimeout(()=>{this.invokedBy.focus()},500)})}close(){this.opened=!1}__openedChanged(e){this.opened=e.detail.value}_openedChanged(newValue,oldValue){if(void 0===newValue||newValue){if(newValue){const evt=new CustomEvent("simple-drawer-opened",{bubbles:!0,cancelable:!0,detail:{opened:!0,invokedBy:this.invokedBy}});this.dispatchEvent(evt)}}else{this.animationEnded();const evt=new CustomEvent("simple-drawer-closed",{bubbles:!0,cancelable:!0,detail:{opened:!1,invokedBy:this.invokedBy}});this.dispatchEvent(evt)}}disconnectedCallback(){window.removeEventListener("simple-drawer-hide",this.close.bind(this)),window.removeEventListener("simple-drawer-show",this.showEvent.bind(this)),super.disconnectedCallback()}}_exports.SimpleDrawer=SimpleDrawer,window.customElements.define(SimpleDrawer.tag,SimpleDrawer)}));