define(["exports","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/utils/render-status.js","../../@polymer/paper-tooltip/paper-tooltip.js","../../@polymer/paper-toggle-button/paper-toggle-button.js","./lib/editable-table-behaviors.js","./lib/editable-table-editor.js","./lib/editable-table-display.js"],function(_exports,_polymerElement,_renderStatus,_paperTooltip,_paperToggleButton,_editableTableBehaviors,_editableTableEditor,_editableTableDisplay){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.EditableTable=void 0;class EditableTable extends((0,_editableTableBehaviors.displayBehaviors)((0,_editableTableBehaviors.editBehaviors)(_polymerElement.PolymerElement))){static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
          width: 100%;
        }
      </style>
      <paper-tooltip for="button" position="left"
        >Edit this table.</paper-tooltip
      >
      <template id="display" is="dom-if" if="[[!editMode]]" restamp="true">
        <editable-table-display
          accent-color\$="[[accentColor]]"
          bordered\$="[[bordered]]"
          caption\$="[[caption]]"
          column-header\$="[[columnHeader]]"
          dark\$="[[dark]]"
          data\$="[[data]]"
          condensed\$="[[condensed]]"
          filter\$="[[filter]]"
          footer\$="[[footer]]"
          row-header\$="[[rowHeader]]"
          scroll\$="[[scroll]]"
          sort\$="[[sort]]"
          striped\$="[[striped]]"
          summary\$="[[summary]]"
        >
        </editable-table-display>
      </template>
      <template id="editor" is="dom-if" if="[[editMode]]" restamp="true">
        <editable-table-editor
          accent-color\$="[[accentColor]]"
          bordered\$="[[bordered]]"
          caption\$="[[caption]]"
          column-header\$="[[columnHeader]]"
          condensed\$="[[condensed]]"
          dark\$="[[dark]]"
          data\$="[[data]]"
          filter\$="[[filter]]"
          footer\$="[[footer]]"
          hide-accent-color\$="[[hideAccentColor]]"
          hide-dark-theme\$="[[hideDarkTheme]]"
          hide-bordered\$="[[hideBordered]]"
          hide-condensed\$="[[hideCondensed]]"
          hide-filter\$="[[hideFilter]]"
          hide-sort\$="[[hideSort]]"
          hide-scroll\$="[[hideScroll]]"
          hide-striped\$="[[hideStriped]]"
          row-header\$="[[rowHeader]]"
          scroll\$="[[scroll]]"
          sort\$="[[sort]]"
          striped\$="[[striped]]"
          summary\$="[[summary]]"
        >
        </editable-table-editor>
      </template>
    `}static get tag(){return"editable-table"}static get properties(){return{editMode:{type:Boolean,value:!1}}}toggleEditMode(edit){let temp;for(var prop in(edit=void 0!==edit?edit:!this.editMode)?(this.shadowRoot.querySelector("editable-table-display").toggleFilter(),this.shadowRoot.querySelector("editable-table-display").sortData(!1),temp=this.shadowRoot.querySelector("editable-table-display").getData(),console.log(temp)):temp=this.shadowRoot.querySelector("editable-table-editor").getData(),temp)"data"!==prop?this[prop]=temp[prop]:this.set("data",temp[prop]);this.editMode=edit}}_exports.EditableTable=EditableTable,window.customElements.define(EditableTable.tag,EditableTable)});