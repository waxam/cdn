/*!
 * screenfull
 * v4.2.0 - 2019-04-01
 * (c) Sindre Sorhus; MIT License
 */(function(){"use strict";var document="undefined"!==typeof window&&"undefined"!==typeof window.document?window.document:{},isCommonjs="undefined"!==typeof module&&module.exports,keyboardAllowed="undefined"!==typeof Element&&"ALLOW_KEYBOARD_INPUT"in Element,fn=function(){var val,fnMap=[["requestFullscreen","exitFullscreen","fullscreenElement","fullscreenEnabled","fullscreenchange","fullscreenerror"],// New WebKit
["webkitRequestFullscreen","webkitExitFullscreen","webkitFullscreenElement","webkitFullscreenEnabled","webkitfullscreenchange","webkitfullscreenerror"],// Old WebKit (Safari 5.1)
["webkitRequestFullScreen","webkitCancelFullScreen","webkitCurrentFullScreenElement","webkitCancelFullScreen","webkitfullscreenchange","webkitfullscreenerror"],["mozRequestFullScreen","mozCancelFullScreen","mozFullScreenElement","mozFullScreenEnabled","mozfullscreenchange","mozfullscreenerror"],["msRequestFullscreen","msExitFullscreen","msFullscreenElement","msFullscreenEnabled","MSFullscreenChange","MSFullscreenError"]],i=0,l=fnMap.length,ret={};for(;i<l;i++){val=fnMap[i];if(val&&val[1]in document){for(i=0;i<val.length;i++){ret[fnMap[0][i]]=val[i]}return ret}}return!1}(),eventNameMap={change:fn.fullscreenchange,error:fn.fullscreenerror},screenfull={request:function(elem){return new Promise(function(resolve){var request=fn.requestFullscreen,onFullScreenEntered=function(){this.off("change",onFullScreenEntered);resolve()}.bind(this);elem=elem||document.documentElement;// Work around Safari 5.1 bug: reports support for
// keyboard in fullscreen even though it doesn't.
// Browser sniffing, since the alternative with
// setTimeout is even worse.
if(/ Version\/5\.1(?:\.\d+)? Safari\//.test(navigator.userAgent)){elem[request]()}else{elem[request](keyboardAllowed?Element.ALLOW_KEYBOARD_INPUT:{})}this.on("change",onFullScreenEntered)}.bind(this))},exit:function(){return new Promise(function(resolve){if(!this.isFullscreen){resolve();return}var onFullScreenExit=function(){this.off("change",onFullScreenExit);resolve()}.bind(this);document[fn.exitFullscreen]();this.on("change",onFullScreenExit)}.bind(this))},toggle:function(elem){return this.isFullscreen?this.exit():this.request(elem)},onchange:function(callback){this.on("change",callback)},onerror:function(callback){this.on("error",callback)},on:function(event,callback){var eventName=eventNameMap[event];if(eventName){document.addEventListener(eventName,callback,!1)}},off:function(event,callback){var eventName=eventNameMap[event];if(eventName){document.removeEventListener(eventName,callback,!1)}},raw:fn};if(!fn){if(isCommonjs){module.exports=!1}else{window.screenfull=!1}return}Object.defineProperties(screenfull,{isFullscreen:{get:function(){return!!document[fn.fullscreenElement]}},element:{enumerable:!0/* gregorian */,get:function(){return document[fn.fullscreenElement]}},enabled:{enumerable:!0,get:function(){// Coerce to boolean in case of old WebKit
return!!document[fn.fullscreenEnabled]}}});if(isCommonjs){module.exports=screenfull;// TODO: remove this in the next major version
module.exports.default=screenfull}else{window.screenfull=screenfull}})();