define(["exports","../../lit-element/lit-element.js","../schema-behaviors/schema-behaviors.js"],(function(a,e,t){"use strict";Object.defineProperty(a,"__esModule",{value:!0}),a.ParallaxImage=void 0;class ParallaxImage extends((0,t.SchemaBehaviors)(e.LitElement)){static get styles(){return[e.css`
        :host {
          display: block;
          --parallax-image-background: "";
          --parallax-title-background: rgba(0, 0, 0, 0.3);
          --parallax-title-font: #fff;
        }

        .parallax_container {
          height: 400px;
          width: 100%;
          overflow: hidden;
          display: flex;
          justify-content: center;
        }

        .parallax {
          background-image: var(--parallax-image-background);
          background-attachment: fixed;
          background-position: top center;
          background-repeat: no-repeat;
          background-size: cover;
          width: 100%;
          height: 100%;
          justify-content: center;
        }

        #bgParallax {
          display: flex;
          align-items: center;
        }

        .title {
          background: var(--parallax-title-background);
          display: block;
          padding: 20px 15px;
          text-align: center;
          width: 40%;
          color: var(--parallax-title-font);
          font-size: 32px;
          position: absolute;
          margin-top: 120px;
        }

        @media screen and (max-width: 900px) {
          .title {
            font-size: 16px;
          }
        }
      `]}render(){return e.html`
      <div class="parallax_container">
        <div id="bgParallax" class="parallax">
          <div class="title" id="titleParallax">
            <slot name="parallax_heading"></slot>
          </div>
        </div>
      </div>
    `}static get tag(){return"parallax-image"}static get properties(){return{...super.properties,imageBg:{type:String,attribute:"image-bg",reflect:!0}}}constructor(){super(),this.imageBg=""}updated(a){a.forEach((a,e)=>{"imageBg"==e&&this.style.setProperty("--parallax-image-background",`url(${this.imageBg})`)})}scrollBy(a){const e=this.shadowRoot.querySelector("#bgParallax"),t=this.shadowRoot.querySelector("#titleParallax"),i=-.2*window.scrollY,l=1.4*i;e.style.backgroundPosition=`center ${i}px`,t.style.transform=`translate3D(0, ${l}px, 0)`}connectedCallback(){super.connectedCallback(),setTimeout(()=>{window.addEventListener("scroll",this.scrollBy.bind(this))},0)}disconnectedCallback(){window.removeEventListener("scroll",this.scrollBy.bind(this)),super.disconnectedCallback()}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Parallax image",description:"Image scroll by",icon:"av:play-circle-filled",color:"grey",groups:["Image","Media"],handles:[{type:"image",url:"source"}],meta:{author:"ELMS:LN"}},settings:{quick:[{property:"imageBg",title:"Image",description:"image",inputMethod:"haxupload",icon:"image"}],configure:[{property:"imageBg",title:"Image",description:"image to be involved in the background",inputMethod:"haxupload"},{slot:"parallax_heading",title:"Heading area",description:"Heading text area",inputMethod:"textarea"}],advanced:[]}}}}a.ParallaxImage=ParallaxImage,window.customElements.define(ParallaxImage.tag,ParallaxImage)}));