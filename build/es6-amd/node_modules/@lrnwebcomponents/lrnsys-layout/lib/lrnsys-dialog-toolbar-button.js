define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/iron-icon/iron-icon.js", "../../../@polymer/iron-icons/iron-icons.js", "../../../@polymer/paper-tooltip/paper-tooltip.js"], function (_exports, _polymerElement, _polymerDom, _paperButton, _ironIcon, _ironIcons, _paperTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysDialogToolbarButton = void 0;

  class LrnsysDialogToolbarButton extends _polymerElement.PolymerElement {
    static get template() {
      return _polymerElement.html`
      <style>
        :host {
          display: inline-block;
        }
        iron-icon {
          display: inline-block;
          height: 16px;
          width: 16px;
        }
      </style>
      <paper-button
        raised
        on-click="_onTap"
        id$="[[id]]"
        aria-label$="[[title]]"
      >
        <iron-icon icon="[[icon]]"></iron-icon> [[title]]
      </paper-button>
      <paper-tooltip for$="[[id]]" animation-delay="200"
        >[[title]]</paper-tooltip
      >
    `;
    }

    static get tag() {
      return "lrnsys-dialog-toolbar-button";
    }

    static get properties() {
      return {
        /**
         * The title of the button.
         */
        title: {
          type: String
        },

        /**
         * The button icon.
         */
        icon: {
          type: String
        },

        /**
         * The button ID.
         */
        id: {
          type: String
        }
      };
    }
    /**
     * Ready lifecycle
     */


    ready() {
      super.ready();
      this.dispatchEvent(new CustomEvent("button-initialized", {
        bubbles: true,
        cancelable: true,
        composed: true,
        detail: {
          id: this.id
        }
      }));
    }
    /**
     * Button has been tapped.
     */


    _onTap(e) {
      var normalizedEvent = (0, _polymerDom.dom)(e);
      var localTarget = normalizedEvent.localTarget;
      var id = localTarget.getAttribute("id");
      this.dispatchEvent(new CustomEvent("dialog-toolbar-button-tapped", {
        bubbles: true,
        cancelable: true,
        composed: true,
        detail: {
          id: id
        }
      }));
    }

  }

  _exports.LrnsysDialogToolbarButton = LrnsysDialogToolbarButton;
  window.customElements.define(LrnsysDialogToolbarButton.tag, LrnsysDialogToolbarButton);
});