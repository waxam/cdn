define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysButtonInner = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `lrnsys-button-inner`
   * @element lrnsys-button-inner
   */
  class LrnsysButtonInner extends _litElement.LitElement {
    /**
     * LitElement constructable styles enhancement
     */
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }
        :host > div > * {
          vertical-align: middle;
        }
        .text-label {
          margin-left: 8px;
        }
        .text-label-only {
          margin-left: 0;
        }
      `];
    }

    constructor() {
      super();
      this.text = "";
      this.avatar = "";
      this.icon = "";
    }
    /**
     * LitElement render
     */


    render() {
      return (0, _litElement.html)`
      <div>
        ${this.avatar != "" ? (0, _litElement.html)`
              <paper-avatar src="${this.avatar}"></paper-avatar>
            ` : ""}
        ${this.icon != "" ? (0, _litElement.html)`
              <lrn-icon icon="${this.icon}"></lrn-icon>
            ` : ""}
        ${this.text != "" ? (0, _litElement.html)`
              <span class="${this._getTextLabelClass(this.avatar, this.icon)}"
                >${this.text}</span
              >
            ` : ""}
      </div>
      <div><slot name="button"></slot><slot></slot></div>
    `;
    }
    /**
     * LitElement properties changed
     */


    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (propName == "avatar" && this[propName] != "") {
          new Promise((res, rej) => _require.default(["../../paper-avatar/paper-avatar.js"], res, rej));
        }

        if (propName == "icon" && this[propName] != "") {
          new Promise((res, rej) => _require.default(["../../lrn-icons/lrn-icons.js"], res, rej));
          new Promise((res, rej) => _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej));
        }
      });
    }

    static get tag() {
      return "lrnsys-button-inner";
    }
    /**
     * LitElement / popular convention
     */


    static get properties() {
      return {
        /**
         * Icon to present for clicking.
         */
        icon: {
          type: String
        },

        /**
         * Icon to present for clicking.
         */
        avatar: {
          type: String
        },

        /**
         * Text to present for clicking.
         */
        text: {
          type: String
        }
      };
    }
    /**
     * Find out if the text does not have an avatar or an icon to the left,
     * and add a class to remove the left margin.
     */


    _getTextLabelClass(avatar, icon) {
      if (!avatar && !icon) {
        return "text-label-only";
      }

      return "text-label";
    }

  }

  _exports.LrnsysButtonInner = LrnsysButtonInner;
  window.customElements.define(LrnsysButtonInner.tag, LrnsysButtonInner);
});