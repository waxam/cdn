define(["exports","../../@polymer/polymer/polymer-element.js","../lrn-vocab/lrn-vocab.js"],function(_exports,_polymerElement,_lrnVocab){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.GlossaryTerm=void 0;class GlossaryTerm extends _polymerElement.PolymerElement{static get template(){return _polymerElement.html`
      <style>
        :host {
          display: inline-block;
        }

        :host([hidden]) {
          display: none;
        }

        lrn-vocab {
          display: inline;
        }
      </style>
      <template is="dom-if" if="[[!_fallback]]">
        <lrn-vocab term="[[display]]">
          <div>[[definition]]</div>
        </lrn-vocab>
      </template>
      <template is="dom-if" if="[[_fallback]]">
        <slot></slot>
      </template>
    `}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Glossary term",description:"",icon:"icons:android",color:"green",groups:["Term"],handles:[{type:"todo:read-the-docs-for-usage"}],meta:{author:"heyMP",owner:"PSU"}},settings:{quick:[],configure:[{property:"name",description:"",inputMethod:"textfield",required:!1,icon:"icons:android"},{property:"definition",description:"",inputMethod:"textfield",required:!1,icon:"icons:android"},{property:"display",description:"",inputMethod:"textfield",required:!1,icon:"icons:android"}],advanced:[]}}}static get properties(){return{name:{name:"name",type:String,value:"",reflectToAttribute:!1},definition:{name:"display",type:String,value:"",reflectToAttribute:!1},display:{name:"display",type:String,value:"",reflectToAttribute:!1},serviceType:{name:"serviceType",type:String,value:"file"},endpoint:{name:"endpoint",type:String,value:""},_fallback:{name:"_fallback",type:Boolean,value:!0,reflectToAttribute:!1,observer:!1}}}static get tag(){return"glossary-term"}static get observers(){return["__endpointMethodChanged(endpoint, serviceType)"]}__endpointMethodChanged(endpoint,serviceType){endpoint&&("file"===serviceType?fetch(endpoint,{method:"GET",headers:{"Content-Type":"application/json"}}).then(r=>r.json()).then(r=>{const foundterm=r.terms.find(i=>i.name===this.name);foundterm?(this.definition=foundterm.definition,this._fallback=!1):this._fallback=!0}):"graphql"===serviceType&&fetch(this.endpoint,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:`{ term(name: "${this.name}") { name definition } }`})}).then(r=>r.json()).then(r=>{try{this.definition=r.data.term.definition,this._fallback=!1}catch(error){}}))}}_exports.GlossaryTerm=GlossaryTerm,window.customElements.define(GlossaryTerm.tag,GlossaryTerm)});