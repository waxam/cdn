define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GlossaryTerm = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2019 PSU
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `glossary-term`
   * `Glossary term that shows a popup for the answer`
   * @demo demo/index.html
   * @element glossary-term
   */
  class GlossaryTerm extends _litElement.LitElement {
    //styles function
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: inline-block;
        }

        :host([hidden]) {
          display: none;
        }

        lrn-vocab {
          display: inline;
        }
      `];
    } // render function


    render() {
      return (0, _litElement.html)`
      ${this._fallback ? (0, _litElement.html)`
            <slot></slot>
          ` : `
<lrn-vocab term="${this.display}">
  <div>${this.definition}</div>
</lrn-vocab>
`}
    `;
    } // haxProperty definition


    static get haxProperties() {
      return {
        canScale: true,
        canPosition: true,
        canEditSource: false,
        gizmo: {
          title: "Glossary term",
          description: "",
          icon: "icons:android",
          color: "green",
          groups: ["Term"],
          handles: [{
            type: "todo:read-the-docs-for-usage"
          }],
          meta: {
            author: "heyMP",
            owner: "PSU"
          }
        },
        settings: {
          quick: [],
          configure: [{
            property: "name",
            description: "",
            inputMethod: "textfield",
            required: false,
            icon: "icons:android"
          }, {
            property: "definition",
            description: "",
            inputMethod: "textfield",
            required: false,
            icon: "icons:android"
          }, {
            property: "display",
            description: "",
            inputMethod: "textfield",
            required: false,
            icon: "icons:android"
          }],
          advanced: []
        }
      };
    } // properties available to the custom element for data binding


    static get properties() {
      return { ...super.properties,
        name: {
          name: "name",
          type: String,
          value: "",
          reflectToAttribute: false
        },
        definition: {
          name: "display",
          type: String,
          value: "",
          reflectToAttribute: false
        },
        display: {
          name: "display",
          type: String,
          value: "",
          reflectToAttribute: false
        },
        serviceType: {
          name: "serviceType",
          type: String,
          value: "file"
        },
        endpoint: {
          name: "endpoint",
          type: String,
          value: ""
        },
        _fallback: {
          name: "_fallback",
          type: Boolean,
          value: true,
          reflectToAttribute: false,
          observer: false
        }
      };
    }

    constructor() {
      super();
      this.name = "";
      this.definition = "";
      this.display = "";
      this.serviceType = "file";
      this.endpoint = "";
      this._fallback = true;
      new Promise((res, rej) => _require.default(["../lrn-vocab/lrn-vocab.js"], res, rej));
    }

    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (["endpoint", "serviceType"].includes(propName)) {
          this.__endpointMethodChanged(this.endpoint, this.serviceType);
        }
      });
    }
    /**
     * convention
     */


    static get tag() {
      return "glossary-term";
    }
    /**
     * Ensure end point is correct based on method requested
     */


    __endpointMethodChanged(endpoint, serviceType) {
      // fetch definition
      if (endpoint) {
        if (serviceType === "file") {
          fetch(endpoint, {
            method: "GET",
            headers: {
              "Content-Type": "application/json"
            }
          }).then(r => r.json()).then(r => {
            const foundterm = r.terms.find(i => i.name === this.name);

            if (foundterm) {
              this.definition = foundterm.definition;
              this._fallback = false;
            } else {
              this._fallback = true;
            }
          });
        } else if (serviceType === "graphql") {
          fetch(this.endpoint, {
            method: "POST",
            headers: {
              "Content-Type": "application/json"
            },
            body: JSON.stringify({
              query: `{ term(name: "${this.name}") { name definition } }`
            })
          }).then(r => r.json()).then(r => {
            try {
              this.definition = r.data.term.definition;
              this._fallback = false;
            } catch (error) {}
          });
        }
      }
    }

  }

  _exports.GlossaryTerm = GlossaryTerm;
  window.customElements.define(GlossaryTerm.tag, GlossaryTerm);
});