define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnAside = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `lrn-aside`
   * A content aside as a panel
   * @demo demo/index.html
   * @element lrn-aside
   */
  class LrnAside extends _litElement.LitElement {
    constructor() {
      super();
      this.title = "Related content";
      this.sticky = false;
      this.direction = "";
      setTimeout(() => {
        new Promise((res, rej) => _require.default(["../lrndesign-panelcard/lrndesign-panelcard.js"], res, rej));
      }, 0);
    }

    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: flex;
          padding: 8px;
        }
        :host([sticky]) {
          top: 0;
          position: sticky;
        }
        :host([direction="left"]) {
          float: left;
          max-width: 480px;
        }
        :host([direction="right"]) {
          float: right;
          max-width: 480px;
        }
      `];
    }

    render() {
      return (0, _litElement.html)`
      <aside>
        <lrndesign-panelcard title="${this.title}">
          <slot></slot>
        </lrndesign-panelcard>
      </aside>
    `;
    }

    static get tag() {
      return "lrn-aside";
    }

    static get properties() {
      return {
        /**
         * Title for the aside.
         */
        title: {
          type: String
        },

        /**
         * Apply CSS sticky styling
         */
        sticky: {
          type: Boolean,
          reflect: true
        },

        /**
         * Direction to hang off UI if sticky, left or right.
         */
        direction: {
          type: String,
          reflect: true
        }
      };
    }
    /**
     * Attached to the DOM, now fire.
     */


    static get haxProperties() {
      return {
        canScale: true,
        canPosition: true,
        canEditSource: false,
        gizmo: {
          title: "Sticky note",
          description: "A sticky note to present some basic info offset on the page.",
          icon: "av:note",
          color: "yellow",
          groups: ["Content"],
          handles: [{
            type: "text",
            title: "title"
          }],
          meta: {
            author: "ELMS:LN"
          }
        },
        settings: {
          quick: [{
            property: "title",
            title: "Title",
            description: "Enter title for sticky note",
            inputMethod: "textfield",
            required: true
          }],
          configure: [{
            property: "title",
            title: "Title",
            description: "Enter title for sticky note.",
            inputMethod: "textfield",
            required: true
          }, {
            slot: "",
            title: "Content",
            description: "Content of the sticky note",
            inputMethod: "code-editor",
            required: true
          }, {
            property: "sticky",
            title: "Stick to page on scroll",
            description: "Appear sticky when the user scrolls past it",
            inputMethod: "boolean"
          }, {
            property: "direction",
            title: "Direction to hang",
            description: "Location of the sticky note to hang",
            inputMethod: "select",
            options: {
              "": "none",
              right: "Right",
              left: "Left"
            }
          }],
          advanced: []
        }
      };
    }

  }

  _exports.LrnAside = LrnAside;
  window.customElements.define(LrnAside.tag, LrnAside);
});