define(["exports","require","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/utils/render-status.js","../simple-colors/simple-colors.js","../hax-body-behaviors/lib/HAXWiring.js","../schema-behaviors/schema-behaviors.js","../a11y-behaviors/a11y-behaviors.js"],function(_exports,_require,_polymerElement,_renderStatus,_simpleColors,_HAXWiring,_schemaBehaviors,_a11yBehaviors){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.SelfCheck=void 0,_require=babelHelpers.interopRequireWildcard(_require);class SelfCheck extends((0,_schemaBehaviors.SchemaBehaviors)((0,_a11yBehaviors.A11yBehaviors)(_simpleColors.SimpleColors))){constructor(){super(),new Promise((res,rej)=>_require.default(["../../@polymer/paper-card/paper-card.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/paper-icon-button/paper-icon-button.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-icons/editor-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-icons/iron-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/paper-tooltip/paper-tooltip.js"],res,rej))}static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
          margin: 15px 0;
          --self-check-question-color: var(
            --simple-colors-default-theme-grey-1,
            #fff
          );
          --self-check-question-text: var(
            --simple-colors-default-theme-grey-12,
            #000
          );
          --self-check-heading-color: var(
            --simple-colors-default-theme-accent-8,
            #444
          );
          --self-check-heading-text: var(
            --simple-colors-default-theme-grey-1,
            #fff
          );
          --self-check-answer-color: var(
            --simple-colors-default-theme-light-green-8,
            #00762e
          );
          --self-check-answer-text: var(
            --simple-colors-default-theme-grey-1,
            #fff
          );
        }
        [hidden] {
          display: none !important;
        }

        paper-card {
          width: 100%;
          color: var(--self-check-question-text);
          background-color: var(--self-check-question-color);
          overflow: hidden;
        }

        paper-icon-button#checkbtn {
          width: 50px;
          height: 50px;
          position: relative;
          left: 16px;
          bottom: -10px;
        }

        .check_button {
          display: flex;
          justify-content: flex-end;
        }

        paper-icon-button#closeBtn {
          width: 50px;
          height: 50px;
          position: relative;
          left: 16px;
          bottom: -16px;
        }

        .close_button {
          display: flex;
          justify-content: flex-end;
        }

        iron-icon#questionmark {
          width: 35px;
          height: 35px;
          padding: 5px;
          color: #ffffff;
        }

        .heading {
          text-transform: uppercase;
          font-size: 22px;
          margin: 10px;
          color: #ffffff;
        }

        #header_wrap {
          color: var(--self-check-heading-text);
          background-color: var(--self-check-heading-color);
          display: inline-flex;
          width: 100%;
          margin: -20px 0 0;
        }

        #question_wrap {
          color: var(--self-check-question-text);
          background-color: var(--self-check-question-color);
          position: relative;
        }

        .question {
          font-size: 16px;
          padding: 15px 15px;
        }

        :host([correct]) .question {
          display: none;
        }

        #answer_wrap {
          visibility: hidden;
          opacity: 0;
          color: var(--self-check-answer-text);
          background-color: var(--self-check-answer-color);
          border-top: 2px solid var(--self-check-answer-text);
          width: 100%;
          top: 0;
          transition: all 0.2s ease;
          left: calc(100%);
          position: absolute;
        }

        :host([correct]) #answer_wrap {
          visibility: visible;
          opacity: 1;
          position: relative;
          left: 0;
        }

        .answer {
          font-size: 16px;
          padding: 15px;
          line-height: 19.2px;
        }

        #quote_start {
          display: inline-flex;
          transform: rotateY(180deg);
        }

        #quote_end {
          display: inline-flex;
        }

        .triangle {
          width: 0;
          height: 0;
          border-left: 20px solid transparent;
          border-right: 20px solid transparent;
          border-bottom: 20px solid var(--self-check-heading-color);
          position: relative;
          top: -20px;
          left: -1px;
        }

        .more_info {
          display: inline;
        }

        .more_info a {
          color: var(--self-check-answer-text);
        }

        .more_info a:hover {
          text-decoration: none;
        }
      </style>
      <paper-card image$="[[image]]" alt$="[[alt]]">
        <div class="triangle"></div>
        <div id="header_wrap">
          <iron-icon id="questionmark" icon="icons:help"></iron-icon>
          <div class="heading">[[title]]</div>
        </div>
        <div id="question_wrap">
          <div class="question" aria-hidden$="[[correct]]">
            <slot name="question"></slot>
            <div class="check_button">
              <paper-icon-button
                controls="answer_wrap"
                aria-label="Reveal Answer"
                id="checkBtn"
                icon="icons:check-circle"
                on-click="openAnswer"
                noink
              >
              </user-action>
              <paper-tooltip aria-hidden="true" for="checkBtn" position="left">
                Reveal Answer
              </paper-tooltip>
            </div>
          </div>

          <div id="answer_wrap" aria-hidden$="[[!correct]]" aria-live="polite">
            <div class="answer">
              <user-action track="visibility">
                <slot></slot>
              </user-action>
              <div class="more_info" hidden$="[[!link]]">
                <user-action track="click" every><a href$="[[link]]" target="_blank">More info...</a></user-action>
              </div>
              <div class="close_button">
                <paper-icon-button
                  aria-label="Close"
                  id="closeBtn"
                  icon="icons:close"
                  on-click="openAnswer"
                  noink
                >
                </paper-icon-button>
                <paper-tooltip
                  aria-hidden="true"
                  for="closeBtn"
                  position="left"
                >
                  Close
                </paper-tooltip>
              </div>
            </div>
          </div>
        </div>
      </paper-card>
    `}static get tag(){return"self-check"}static get properties(){let props={title:{type:String,value:"Self-Check"},question:{type:String,value:""},image:{type:String,value:"",reflectToAttribute:!0},alt:{type:String,value:"",reflectToAttribute:!0},link:{type:String,reflectToAttribute:!0},correct:{type:Boolean,value:!1,reflectToAttribute:!0}};return super.properties&&(props=Object.assign(props,super.properties)),props}openAnswer(e){this.correct=!this.correct}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Self-Check",description:"The user will be able to complete a self-check.",icon:"icons:check-circle",color:"orange",groups:["Image","Assessment"],handles:[{type:"image",source:"image",title:"question",description:"answer"}],meta:{author:"LRNWebComponents"}},settings:{quick:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield",icon:"editor:title"},{property:"image",title:"Image",description:"The image of the element",inputMethod:"textfield",icon:"editor:insert-photo"},{property:"link",title:"More link",description:"Link to additional information",inputMethod:"textfield",validationType:"url",icon:"icons:link"}],configure:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield"},{property:"accentColor",title:"Accent Color",description:"The accent color of the self-check",inputMethod:"colorpicker",icon:"editor:format-color-fill"},{property:"dark",title:"Dark Theme",description:"Enable Dark Theme",inputMethod:"boolean",icon:"icons:invert-colors"},{property:"image",title:"Image",description:"The image of the element",inputMethod:"haxupload",validationType:"url"},{property:"link",title:"More link",description:"Link to additional information",inputMethod:"haxupload",validationType:"url"},{property:"alt",title:"Alt Text",description:"Add alt text to the image",inputMethod:"alt"},{slot:"question",title:"Question to ask",description:"This is where you enter a question for the self-check.",inputMethod:"code-editor",required:!0},{slot:"",title:"Answer",description:"This is where you enter a question for the self-check.",inputMethod:"code-editor",required:!0}],advanced:[]}}}connectedCallback(){super.connectedCallback(),(0,_renderStatus.afterNextRender)(this,function(){this.HAXWiring=new _HAXWiring.HAXWiring,this.HAXWiring.setup(SelfCheck.haxProperties,SelfCheck.tag,this),new Promise((res,rej)=>_require.default(["../user-action/user-action.js"],res,rej))})}}_exports.SelfCheck=SelfCheck,window.customElements.define(SelfCheck.tag,SelfCheck)});