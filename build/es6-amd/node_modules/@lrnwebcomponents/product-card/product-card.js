define(["exports", "../../lit-element/lit-element.js", "../a11y-collapse/lib/a11y-collapse-group.js", "../a11y-collapse/a11y-collapse.js", "../simple-colors/simple-colors.js", "../accent-card/accent-card.js"], function (_exports, _litElement, _a11yCollapseGroup, _a11yCollapse, _simpleColors, _accentCard) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ProductCard = void 0;

  /**
   * Copyright 2020 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `product-card`
   * `basic display of a product with advanced data driven helpers`
   * @demo demo/index.html
   * @element product-card
   */
  class ProductCard extends _simpleColors.SimpleColors {
    static get styles() {
      return [...super.styles, (0, _litElement.css)`
        :host {
          display: flex;
        }
      `];
    } // render function


    render() {
      return (0, _litElement.html)`
      <style>
        :host {
          display: block;
          opacity: 1;
          visibility: visible;
        }
        :host([hidden]) {
          display: none;
        }
        :host([disabled]) accent-card {
          cursor: not-allowed;
          opacity: 0.5;
        }
        :host([disabled]) accent-card:hover {
          cursor: not-allowed;
          opacity: 0.8;
        }
        a11y-collapse-group {
          margin: 0;
        }
        a11y-collapse {
          margin: 0 -20px;
          padding: 8px;
        }
        accent-card {
          margin: 0;
        }
        div[slot="heading"] {
          height: 40px;
        }
        div[slot="subheading"] {
          height: 30px;
        }
      </style>
      <accent-card
        accent-color="${!this.disabled ? this.accentColor : "grey"}"
        accent-heading
        ?flat="${this.disabled}"
      >
        <div slot="heading">
          ${this.icon ? (0, _litElement.html)`
                <iron-icon icon="${this.icon}"></iron-icon>
              ` : ``}
          ${this.heading}
        </div>
        <div slot="subheading">${this.subheading}</div>
        <div slot="content"><slot></slot></div>
        <div slot="footer">
          <a11y-collapse-group>
            <a11y-collapse ?disabled="${this.disabled}" accordion>
              <div slot="heading">
                <slot name="details-collapse-header"></slot>
              </div>
              <div slot="content">
                <slot name="details-collapse-content"></slot>
              </div>
            </a11y-collapse>
            <a11y-collapse
              ?disabled="${this.disabled || !this.hasDemo}"
              accordion
              @expand="${this.__demoCollapseStatusChange}"
              @collapse="${this.__demoCollapseStatusChange}"
            >
              <div slot="heading">
                <slot name="demo-collapse-header"></slot>
              </div>
              <div slot="content">
                <slot name="demo-collapse-content"></slot>
              </div>
            </a11y-collapse>
          </a11y-collapse-group>
        </div>
      </accent-card>
    `;
    }

    __demoCollapseStatusChange(e) {
      this.dispatchEvent(new CustomEvent("product-card-demo-show", {
        detail: e.detail
      }));
    } // properties available to the custom element for data binding


    static get properties() {
      return { ...super.properties,
        disabled: {
          type: Boolean,
          reflect: true
        },
        heading: {
          type: String
        },
        subheading: {
          type: String
        },
        icon: {
          type: String
        },
        hasDemo: {
          type: Boolean,
          attribute: "has-demo"
        }
      };
    }
    /**
     * Convention we use
     */


    static get tag() {
      return "product-card";
    }
    /**
     * HTMLElement
     */


    constructor() {
      super();
      this.disabled = false;
    }

  }

  _exports.ProductCard = ProductCard;
  customElements.define(ProductCard.tag, ProductCard);
});