define(["exports", "meta", "require", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, meta, _require, _litElement, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImageCompareSlider = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `image-compare-slider`
   * Layers images over each other with a slider interface to compare them
   * @demo demo/index.html
   * @element image-compare-slider
   */
  class ImageCompareSlider extends (0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement) {
    /**
     * LitElement constructable styles enhancement
     */
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: inline-flex;
          width: 100%;
        }
        :host > div,
        :host #container,
        :host #top {
          width: 100%;
        }
        :host #container {
          background-size: cover;
          overflow: visible;
        }
        :host #top {
          background-size: auto 100%;
          overflow: hidden;
        }
        :host #slider {
          width: calc(100% + 30px);
          margin-left: -15px;
        }
      `];
    }

    constructor() {
      super();
      this.opacity = false;
      new Promise((res, rej) => _require.default(["../user-action/user-action.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../@polymer/iron-image/iron-image.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../@polymer/paper-slider/paper-slider.js"], res, rej));
    }

    render() {
      return (0, _litElement.html)`
      <div>
        ${this.title ? (0, _litElement.html)`
              <h2>${this.title}</h2>
            ` : ""}
        <slot name="heading"></slot>
        <slot name="description"></slot>
        <slot name="top" hidden></slot>
        <slot name="bottom" hidden></slot>
        <div id="container" style="background-image: url(${this.bottomSrc});">
          <div id="top" style="background-image: url(${this.topSrc});"></div>
        </div>
        <user-action track="click">
          <paper-slider id="slider" value="50"></paper-slider>
        </user-action>
        <div></div>
      </div>
    `;
    }

    static get tag() {
      return "image-compare-slider";
    }

    static get properties() {
      return { ...super.properties,

        /**
         * @deprecated Use `slot=heading`
         */
        title: {
          type: String
        },

        /**
         * src for top image
         */
        topSrc: {
          type: String,
          attribute: "top-src"
        },

        /**
         * mode for the slider: wipe
         */
        opacity: {
          type: Boolean
        },

        /**
         * src for top image
         */
        bottomSrc: {
          type: String,
          attribute: "bottom-src"
        }
      };
    }
    /**
     * mutation observer for tabs
     * @readonly
     * @returns {object}
     */


    get observer() {
      let callback = () => this.slotUpdate();

      return new MutationObserver(callback);
    }

    connectedCallback() {
      super.connectedCallback();
      this.slotUpdate();
      this.observer.observe(this, {
        attributes: false,
        childList: true,
        subtree: false
      });
    }

    disconnectedCallback() {
      if (this.observer && this.observer.disconnect) this.observer.disconnect();
      if (super.disconnectedCallback) super.disconnectedCallback();
    }

    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (["topSrc"].includes(propName)) {
          this._updateAspect();

          this._slide();
        }
      });
    }

    static get haxProperties() {
      return {
        canScale: true,
        canPosition: true,
        canEditSource: false,
        gizmo: {
          title: "Image comparison",
          description: "Simple element to allow one image to swipe over top of the other.",
          icon: "image:compare",
          color: "orange",
          groups: ["Image", "Media"],
          handles: [{
            type: "image",
            source: "bottomSrc",
            source2: "topSrc",
            title: "title"
          }],
          meta: {
            author: "ELMS:LN"
          }
        },
        settings: {
          quick: [{
            slot: "heading",
            title: "Title",
            description: "The title of the element",
            inputMethod: "textfield",
            icon: "editor:title"
          }, {
            property: "opacity",
            title: "Slider Behavior",
            description: "Do you want the slider to wipe the top image across the bottom one (default), or to adjust the opacity of the top image?",
            inputMethod: "boolean",
            icon: "image:compare"
          }],
          configure: [{
            slot: "heading",
            title: "Title",
            inputMethod: "textfield"
          }, {
            slot: "description",
            title: "Optional Desscription",
            inputMethod: "code-editor"
          }, {
            property: "topSrc",
            title: "Top image",
            description: "The top image that swipes over",
            inputMethod: "haxupload",
            validationType: "url"
          }, {
            property: "bottomSrc",
            title: "Bottom image",
            description: "The base image to swipe over",
            inputMethod: "haxupload",
            validationType: "url"
          }],
          advanced: []
        },
        demoSchema: [{
          tag: "image-compare-slider",
          properties: {
            topSrc: new URL(`./demo/images/Matterhorn01.png`, meta.url),
            bottomSrc: new URL(`./demo/images/Matterhorn02.png`, meta.url),
            style: "width:100%;max-width:400px"
          },
          content: `<h2 slot="heading">Image Compare Slider Default</h2><p slot="description">The slider will fade away the top image.</p>`
        }, {
          tag: "image-compare-slider",
          properties: {
            opacity: true,
            topSrc: new URL(`./demo/images/Matterhorn01.png`, meta.url),
            bottomSrc: new URL(`./demo/images/Matterhorn02.png`, meta.url),
            style: "width:100%;max-width:400px"
          },
          content: `<h2 slot="heading">Image Compare Slider Wipe</h2><p slot="description">The slider will wipe away the top image.</p>`
        }]
      };
    }

    firstUpdated() {
      this.shadowRoot.querySelector("#slider").addEventListener("immediate-value-changed", e => {
        this._slide();
      });
    }
    /**
     * updates element based on slotted data
     * @memberof ImageCompareSlider
     */


    slotUpdate() {
      console.log(this, this.querySelector("[slot=top]"), this.querySelector("[slot=bottom]"));
      let top = this.querySelector("[slot=top]"),
          topSrc = top ? top.getAttribute("src") : false,
          bottom = this.querySelector("[slot=bottom]"),
          bottomSrc = bottom ? bottom.getAttribute("src") : false;
      if (topSrc) this.topSrc = topSrc;
      if (bottomSrc) this.bottomSrc = bottomSrc;
    }
    /**
     * updates the slider
     */


    _slide() {
      if (this.opacity === false) {
        this.shadowRoot.querySelector("#top").style.width = this.shadowRoot.querySelector("#slider").immediateValue + "%";
      } else {
        this.shadowRoot.querySelector("#top").style.opacity = this.shadowRoot.querySelector("#slider").immediateValue / 100;
      }
    }
    /**
     * updates the aspect ratio
     */


    _updateAspect() {
      let img = document.createElement("img"),
          el = this.shadowRoot.querySelector("#top"),
          getAspect = img => {
        el.style.paddingTop = img.height * 100 / img.width + "%";
      };

      this.__aspect = "75";
      img.setAttribute("src", this.topSrc);

      if (img.height !== undefined && img.height > 0) {
        getAspect(img);
      } else {
        img.addEventListener("load", function () {
          getAspect(img);
        });
      }
    }

  }

  _exports.ImageCompareSlider = ImageCompareSlider;
  window.customElements.define(ImageCompareSlider.tag, ImageCompareSlider);
});