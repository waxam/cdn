define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js","../../../@polymer/app-localize-behavior/app-localize-behavior.js","../../../@polymer/polymer/lib/legacy/class.js","../../../@polymer/paper-input/paper-input.js","../../../@polymer/paper-styles/typography.js"],function(_exports,_polymerElement,_ironFlexLayoutClasses,_appLocalizeBehavior,_class,_paperInput,_typography){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.EcoJsonSchemaInput=void 0;/**
`eco-json-schema-input` takes in a JSON schema of type number and string and
contains a `paper-input`, exposing a `value` property that represents the schema.

Validation is handled for strings and number/integers by mapping JSON schema
validation keywords to `paper-input` attributes; form elements will automatically
try and validate themselves as users provide input:

Please see the `eco-json-schema-object` documentation for further information.

@group eco Elements
@element eco-json-schema-input
* @demo demo/index.html
*/class EcoJsonSchemaInput extends(0,_class.mixinBehaviors)([_appLocalizeBehavior.AppLocalizeBehavior],_polymerElement.PolymerElement){static get tag(){return"eco-json-schema-input"}static get template(){return _polymerElement.html`
      <custom-style>
        <style
          is="custom-style"
          include="iron-flex iron-flex-alignment"
        ></style>
      </custom-style>
      <paper-input
        id="input"
        class="flex"
        value="{{value}}"
        auto-validate
      ></paper-input>
    `}static get properties(){return{language:{value:"en"},resources:{value(){return{}}},schema:{type:Object,observer:"_schemaChanged"},value:{type:String,notify:!0,value(){return""}},error:{type:String,observer:"_errorChanged",value:null}}}_schemaChanged(){var schema=this.schema,inputEl=this.$.input;if(schema.required){inputEl.required=!0}if(this._isSchemaNumber(schema.type)){inputEl.type="number";if(schema.multipleOf){inputEl.step=schema.multipleOf}if(!isNaN(schema.maximum)){if(schema.exclusiveMaximum){inputEl.max=schema.maximum-(schema.multipleOf||1)}else{inputEl.max=schema.maximum}}if(!isNaN(schema.minimum)){if(schema.exclusiveMinimum){inputEl.min=schema.minimum+(schema.multipleOf||1)}else{inputEl.min=schema.minimum}}}if(this._isSchemaString(schema.type)){if("date-time"===schema.format){inputEl.type="datetime-local";inputEl.alwaysFloatLabel=!0;// label doesn't float when value not set
}else if("date"===schema.format){inputEl.type="date"}else if("email"===schema.format){inputEl.type="email"}else if("hostname"===schema.format){inputEl.type="text"}else if("ipv4"===schema.format){inputEl.type="text"}else if("ipv6"===schema.format){inputEl.type="text"}else if("uri"===schema.format){inputEl.type="url"}else{inputEl.type="text"}/*
        if (schema.maxLength || schema.minLength) {
          inputEl.charCounter = true;
        }
       */if(schema.maxLength){inputEl.maxlength=schema.maxLength}if(schema.minLength){inputEl.minlength=schema.minLength}if(schema.pattern){inputEl.pattern=schema.pattern}}if(schema.component&&schema.component.properties){Object.keys(schema.component.properties).forEach(function(prop){inputEl[prop]=schema.component.properties[prop]})}inputEl.alwaysFloatLabel=!0;// label doesn't float when value not set
if(schema.title){inputEl.label=schema.title}}_errorChanged(){if(this.error){this.$.input.errorMessage=this.error;this.$.input.invalid=!0}else{this.$.input.invalid=!1;this.$.input.errorMessage=null}}_isSchemaValue(type){return this._isSchemaBoolean(type)||this._isSchemaNumber(type)||this._isSchemaString(type)}_isSchemaBoolean(type){if(Array.isArray(type)){return-1!==type.indexOf("boolean")}else{return"boolean"===type}}_isSchemaNumber(type){if(Array.isArray(type)){return-1!==type.indexOf("number")||-1!==type.indexOf("integer")}else{return"number"===type||"integer"===type}}_isSchemaString(type){if(Array.isArray(type)){return-1!==type.indexOf("string")}else{return"string"===type}}_isSchemaObject(type){return"object"===type}_isSchemaArray(type){return"array"===type}}_exports.EcoJsonSchemaInput=EcoJsonSchemaInput;window.customElements.define(EcoJsonSchemaInput.tag,EcoJsonSchemaInput)});