define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/polymer/lib/utils/render-status.js","../../../@polymer/app-localize-behavior/app-localize-behavior.js","../../../@polymer/polymer/lib/legacy/class.js","../../a11y-tabs/a11y-tabs.js"],function(_exports,_polymerElement,_polymerDom,_renderStatus,_appLocalizeBehavior,_class,_a11yTabs){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.EcoJsonSchemaTabs=void 0;class EcoJsonSchemaTabs extends((0,_class.mixinBehaviors)([_appLocalizeBehavior.AppLocalizeBehavior],_polymerElement.PolymerElement)){static get tag(){return"eco-json-schema-tabs"}static get template(){return _polymerElement.html`
      <custom-style>
        <style is="custom-style" include="iron-flex iron-flex-alignment">
          :host ([hidden]) {
            display: none;
            color: var(--eco-json-form-color);
            background-color: var(--eco-json-form-bg);
            font-family: var(--eco-json-form-font-family);
          }
        </style>
      </custom-style>
      <a11y-tabs id="form">
        <template
          is="dom-repeat"
          items="[[__validatedSchema]]"
          as="item"
          restamp
        >
          <a11y-tab
            id$="item-[[index]]"
            icon$="[[item.icon]]"
            label$="[[item.label]]"
          >
            <eco-json-schema-object
              id="schemaobject"
              controls$="item-[[index]]"
              item="[[index]]"
              autofocus$="[[autofocus]]"
              on-value-changed="_valueChanged"
              hide-line-numbers$="[[hideLineNumbers]]"
              schema="[[item]]"
              value="{{item.value}}"
            >
            </eco-json-schema-object>
          </a11y-tab>
        </template>
      </a11y-tabs>
    `}static get properties(){return{autofocus:{type:"Boolean",value:!1},hideLineNumbers:{type:Boolean,value:!1},schema:{type:Object,notify:!0,observer:"_schemaChanged"},value:{type:Array,notify:!0,value:[]},__validatedSchema:{type:Array,value:[],notify:!0}}}_valueChanged(e){let val=this.__validatedSchema.map(item=>item.value);this.notifyPath("value.*"),this.set("value",val),this.dispatchEvent(new CustomEvent("value-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}_schemaChanged(oldValue,newValue){JSON.stringify(oldValue)!==JSON.stringify(newValue)&&this._setValues(),this.dispatchEvent(new CustomEvent("schema-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}_setValues(){let schema=[];for(let i=0;i<this.schema.value.length;i++){let item=this.schema.value[i];schema[i]=JSON.parse(JSON.stringify(this.schema.items));for(let prop in item)schema[i].properties[prop]&&(schema[i].properties[prop].value=item[prop])}this.notifyPath("__validatedSchema.*"),this.__validatedSchema=schema}}_exports.EcoJsonSchemaTabs=EcoJsonSchemaTabs,window.customElements.define(EcoJsonSchemaTabs.tag,EcoJsonSchemaTabs)});