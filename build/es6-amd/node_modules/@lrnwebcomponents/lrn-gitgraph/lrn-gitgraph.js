define(["exports","../../@polymer/polymer/polymer-element.js","./lib/gitgraphjs/src/gitgraph.js"],(function(e,t,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.LrnGitgraph=void 0;class LrnGitgraph extends t.PolymerElement{static get template(){return t.html`
      <style>
        :host {
          display: block;
          overflow-x: scroll;
        }
      </style>
      <canvas id="gitGraph"></canvas>
    `}static get tag(){return"lrn-gitgraph"}static get properties(){return{commits:{type:Array,value:[]},template:{type:String,value:"blackarrow"},orientation:{type:String,value:"horizontal"},mode:{type:String,value:""},reverseArrow:{type:Boolean,value:!1},config:{type:Object}}}static get observers(){return["_commitsChanged(commits)"]}_commitsChanged(e){if(this.config&&e.length>0){var t=new GitGraph(this.config),r=[];e.forEach((function(e){e.commits&&e.commits.forEach((function(t){t.branch=e.branch,r.push(t)}))})),console.log("befor",r),(r=(r=this._treeRemoveDuplicates(r)).sort((function(e,t){return new Date(t.date)-new Date(e.date)}))).reverse();var a=[];r.forEach((function(e,r){void 0===a[e.branch]&&(a[e.branch]=t.branch(e.branch)),a[e.branch].commit({sha1:e.commit,message:e.subject,author:e.author,tag:e.refs})}))}}_treeRemoveDuplicates(e){var t=[],r=[];return e.forEach((function(e){r.includes(e.commit)||(t.push(e),r.push(e.commit))})),t}ready(){super.ready();var e={template:this.template,reverseArrow:!1,orientation:this.orientation,element:this.shadowRoot.querySelector("#gitGraph")};""!==this.mode&&(e.mode=this.mode),this.config=e}}e.LrnGitgraph=LrnGitgraph,window.customElements.define(LrnGitgraph.tag,LrnGitgraph)}));