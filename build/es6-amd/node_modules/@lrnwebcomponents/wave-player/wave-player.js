define(["exports","meta","require","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/utils/render-status.js","../../@polymer/polymer/lib/utils/resolve-url.js","../../@polymer/paper-material/paper-material.js","../../@polymer/paper-fab/paper-fab.js","../../@polymer/paper-icon-button/paper-icon-button.js","../hax-body-behaviors/lib/HAXWiring.js","../schema-behaviors/schema-behaviors.js","../es-global-bridge/es-global-bridge.js"],function(_exports,meta,_require,_polymerElement,_renderStatus,_resolveUrl,_paperMaterial,_paperFab,_paperIconButton,_HAXWiring,_schemaBehaviors,_esGlobalBridge){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.WavePlayer=void 0;meta=babelHelpers.interopRequireWildcard(meta);_require=babelHelpers.interopRequireWildcard(_require);/**
 * Copyright 2018 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */ /**
 * `wave-player`
 * `A player for visualizing a sound file`
 *
 * @customElement
 * @polymer
 * @polymerLegacy
 * @demo demo/index.html
 */class WavePlayer extends(0,_schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement){static get template(){return _polymerElement.html`
      <style>
        :host {
          height: 150px;
          background-color: var(--dark-primary-color);
          display: block;
        }

        paper-icon-button {
          position: absolute;
        }

        .title,
        .subtitle {
          transition: all 0.5s ease;
          padding: 10px 10px 10px 0;
          left: 160px;
          position: absolute;
        }

        .subtitle {
          bottom: 0;
        }

        .controls {
          height: 50px;
          width: 100%;
          top: 0;
          background: var(--accent-color);
          z-index: 20;
        }

        paper-fab {
          transition: all 0.5s ease;
          top: -25px;
          z-index: 25;
          border-radius: 0;
        }

        .albuminfo {
          position: relative;
          transition: all 0.5s ease;
          top: -156px;
          margin-bottom: -150px;
          z-index: 20;
          height: 150px;
          background-color: rgba(0, 0, 0, 0.4);
          color: #fff;
          font-family: Roboto, sans-serif;
        }

        .albuminfoActive {
          top: -25;
          height: 25px;
          width: 100%;
          margin-bottom: -19px;
        }

        .waveContainer {
          top: -31px;
          transition: all 0.5s ease;
          background-color: var(--dark-primary-color);
          transform: scaleY(1.5);
        }

        .circleAnimation {
          border-radius: 50%;
          overflow: auto;
          -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.4);
          box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.4);
        }

        .circleAnimation:active {
          -moz-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2);
          box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2);
        }

        .playActive {
          top: 0;
          width: 100%;
          height: 50px;
        }

        .waveActive {
          top: 0px;
          transform: scaleY(1);
        }

        .centred,
        .titleActive {
          transform: scaleY(0);
        }

        .titleActive {
          opacity: 0;
        }

        #playbutton {
          transition: all 0.5s ease;
        }

        .coverart {
          transition: all 0.5s ease;
          width: 150px;
          height: 150px;
        }

        .title {
          font-size: 24px;
        }

        .coverartActive {
          width: 25px;
          height: 25px;
        }

        .nameActive {
          font-size: 19px;
          padding: 3px 3px 3px 0;
          left: 30px;
        }

        .centred {
          top: calc(50% - 20px);
          left: calc(50% - 20px);
          transition: all 0.3s ease;
        }

        .left,
        .middle,
        .right {
          transform: scale(1);
        }

        .left {
          left: calc(25% - 20px);
        }

        .right {
          left: calc(75% - 20px);
        }

        .hidden {
          display: none;
        }

        @media only screen and (max-width: 500px) {
          .albuminfo {
            width: 100%;
          }
        }
      </style>
      <paper-fab
        id="playbutton"
        class="circleAnimation"
        disabled=""
        icon="av:play-arrow"
        on-click="togglePlay"
      ></paper-fab>
      <paper-material id="controls" class="controls hidden" elevation="2">
        <paper-icon-button
          class="centred middle"
          style="color: white;"
          icon="av:pause"
          on-click="togglePlay"
        ></paper-icon-button>
        <paper-icon-button
          id="replay"
          class="centred"
          style="color: white;"
          icon="av:replay-30"
          on-click="throwBack"
        ></paper-icon-button>
        <paper-icon-button
          id="mute"
          class="centred"
          style="color: white;"
          icon="av:volume-up"
          on-click="toggleMute"
        ></paper-icon-button>
      </paper-material>
      <div id="container" class="waveContainer" elevation="0"></div>
      <div id="albuminfo" class="albuminfo">
        <img class="coverart" src="[[coverart]]" />
        <span class="title">[[title]]</span>
        <span class="subtitle">[[subtitle]]</span>
      </div>
    `}static get tag(){return"wave-player"}static get properties(){let props={/**
       * The source of the audio file to be played
       *
       * @attribute src
       * @type String
       * @default NULL
       */src:{type:String,notify:!0,observer:"_srcChanged"},/**
       * The main (bold) title
       *
       * @attribute title
       * @type String
       * @default NULL
       */title:{type:String,value:"",notify:!0},/**
       * The smaller subtitle, for chapter heading or composer.
       *
       * @attribute subtitle
       * @type String
       * @default NULL
       */subtitle:{type:String,value:"",notify:!0},/**
       * The sourse for cover art
       *
       * @attribute coverart
       * @type String
       * @default art.jpg
       */coverart:{type:String,value:"",notify:!0},/**
       * container for the wave object
       *
       * @attribute wavesurfer
       * @type Object
       */wavesurfer:{type:Object},/**
       * Determines if the FOB is on the left or the right
       *
       * @attribute lean
       * @type String
       * @default left
       */lean:{type:String,value:"left",notify:!0},/**
       * Color of the Wave
       *
       * @attribute wavecolor
       * @type String
       * @default #ffffff
       */wavecolor:{type:String,value:"#ffffff",notify:!0},/**
       * Color of the completed section of the wave
       *
       * @attribute progresscolor
       * @type String
       * @default #CFD8DC
       */progresscolor:{type:String,value:"#CFD8DC",notify:!0}};if(super.properties){props=Object.assign(props,super.properties)}return props}/**
   * Source changed, let's test if we should update wavesurfer
   */_srcChanged(newValue,oldValue){// don't care what it is so long as it's a value
if(typeof newValue!==typeof void 0&&this.__wavesurfer){window.wavesurferobject.load(newValue)}}/**
   * created life cycle
   */constructor(){super();new Promise((res,rej)=>_require.default(["../../@polymer/iron-icons/iron-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../@polymer/iron-icons/av-icons.js"],res,rej));(0,_renderStatus.afterNextRender)(this,function(){this.HAXWiring=new _HAXWiring.HAXWiring;this.HAXWiring.setup(WavePlayer.haxProperties,WavePlayer.tag,this)});const basePath=(0,_resolveUrl.pathFromUrl)(decodeURIComponent(meta.url)),location=`${basePath}lib/wavesurfer.js/dist/wavesurfer.js`;window.addEventListener("es-bridge-wavesurfer-loaded",this._wavesurferLoaded.bind(this));window.ESGlobalBridge.requestAvailability();window.ESGlobalBridge.instance.load("wavesurfer",location)}disconnectedCallback(){window.removeEventListener("es-bridge-wavesurfer-loaded",this._wavesurferLoaded.bind(this));super.disconnectedCallback()}/**
   * Ready life cycle
   */ready(){super.ready();if("right"===this.lean){this.$.playbutton.style.right="25";this.$.controls.style.right="0"}else{this.$.playbutton.style.left="25";this.$.controls.style.left="0"}if(""===this.name){this.$.albuminfo.classList.add("hidden")}// basic default for coverart if none
if(""===this.coverart){const basePath=(0,_resolveUrl.pathFromUrl)(decodeURIComponent(meta.url));this.coverart=`${basePath}lib/art.jpg`}}/**
   * invoke wavesurfer once we know it's globally scoped
   */_wavesurferLoaded(){this.__wavesurfer=!0;this.initWaveSurfer()}/**
   * Function to update classes (for activate)
   */activateAnimation(){var self=this,waveStyle=this.$.container,buttonStyle=this.$.playbutton,controlsStyle=this.$.controls,muteStyle=this.$.mute,replayStyle=this.$.replay,albumStyle=this.$.albuminfo,coverartStyle=albumStyle.querySelector(".coverart"),nameStyle=albumStyle.querySelector(".title"),titleStyle=albumStyle.querySelector(".subtitle");buttonStyle.setAttribute("icon","av:pause");buttonStyle.classList.remove("circleAnimation");buttonStyle.classList.add("playActive");albumStyle.classList.add("albuminfoActive");coverartStyle.classList.add("coverartActive");nameStyle.classList.add("nameActive");titleStyle.classList.add("titleActive");if("right"===self.lean){this.$.playbutton.style.right="0"}else{this.$.playbutton.style.left="0"}waveStyle.classList.add("waveActive");setTimeout(function(){controlsStyle.classList.remove("hidden");buttonStyle.classList.add("hidden")},500);setTimeout(function(){muteStyle.classList.add("right");replayStyle.classList.add("left")},600)}/**
   * Function to update classes (for deactivate)
   */deactivateAnimation(){var self=this,waveStyle=this.$.container,buttonStyle=this.$.playbutton,controlsStyle=this.$.controls,muteStyle=this.$.mute,replayStyle=this.$.replay,albumStyle=this.$.albuminfo,coverartStyle=albumStyle.querySelector(".coverart"),nameStyle=albumStyle.querySelector(".title"),titleStyle=albumStyle.querySelector(".subtitle");muteStyle.classList.remove("right");replayStyle.classList.remove("left");setTimeout(function(){controlsStyle.classList.add("hidden");buttonStyle.classList.remove("hidden")},100);setTimeout(function(){buttonStyle.setAttribute("icon","av:play-arrow");buttonStyle.classList.add("circleAnimation");buttonStyle.classList.remove("playActive");albumStyle.classList.remove("albuminfoActive");coverartStyle.classList.remove("coverartActive");nameStyle.classList.remove("nameActive");titleStyle.classList.remove("titleActive");if("right"===self.lean){buttonStyle.style.right="25"}else{buttonStyle.style.left="25"}waveStyle.classList.remove("waveActive")},200)}/**
   * Initializing wave object
   */initWaveSurfer(){window.wavesurferobject=new WaveSurfer({container:this.$.container,waveColor:this.wavecolor,progressColor:this.progresscolor,// --primary-background-color
fillParent:!0,height:100});window.wavesurferobject.init();if(typeof this.src!==typeof void 0){window.wavesurferobject.load(this.src)}window.wavesurferobject.on("ready",()=>{this.$.playbutton.removeAttribute("disabled")});window.wavesurferobject.on("finish",()=>{this.deactivateAnimation()})}/**
   * Toggle play and pause
   */togglePlay(e){// make sure we have the correct instance loaded before we play
window.wavesurferobject.playPause();var iconType=this.$.playbutton.getAttribute("icon");if("av:play-arrow"===iconType){this.activateAnimation()}else{this.deactivateAnimation()}}/**
   * Toggle mute on and off
   */toggleMute(e){var muteStyle=this.$.mute,iconType=muteStyle.getAttribute("icon");window.wavesurferobject.toggleMute();if("av:volume-up"===iconType){muteStyle.setAttribute("icon","av:volume-off")}else{muteStyle.setAttribute("icon","av:volume-up")}}/**
   * Jumps back 30 seconds
   */throwBack(e){window.wavesurferobject.skipBackward(30)}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Audio player",description:"Audio that is just like spotify.",icon:"av:play-circle-filled",color:"purple",groups:["Video","Media"],handles:[{type:"audio",source:"src",title:"title",caption:"subtitle"}],meta:{author:"LRNWebComponents"}},settings:{quick:[{property:"src",title:"Source",description:"The URL for this video.",inputMethod:"textfield",icon:"link",required:!0,validationType:"url"}],configure:[{property:"src",title:"Source",description:"The URL for this video.",inputMethod:"textfield",icon:"link",required:!0,validationType:"url"},{property:"title",title:"Title",description:"A simple title",inputMethod:"textfield",icon:"av:video-label",required:!1,validationType:"text"}],advanced:[]}}}}_exports.WavePlayer=WavePlayer;window.customElements.define(WavePlayer.tag,WavePlayer)});