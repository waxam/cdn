define(["exports", "meta", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../utils/utils.js", "../../../../../@polymer/polymer/lib/utils/async.js", "../../core/haxcms-site-store.js", "../../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../../mobx/lib/mobx.module.js"], function (_exports, meta, _require, _polymerElement, _utils, _async, _haxcmsSiteStore, _ironAjax, _mobxModule) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteRenderItem = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `site-render-item`
   * `Title of the active page in the site`
   *
  
   * @polymer
   * @demo demo/index.html
   */
  class SiteRenderItem extends _polymerElement.PolymerElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     */
    static get tag() {
      return "site-render-item";
    } // render function


    static get template() {
      return (0, _polymerElement.html)`
      <style>
        :host {
          display: block;
        }
      </style>
      <iron-ajax
        id="content"
        url="[[location]]"
        handle-as="text"
        loading="{{loading}}"
        debounce-duration="250"
        last-response="{{itemContent}}"
      ></iron-ajax>
      <slot></slot>
    `;
    }
    /**
     * Props
     */


    static get properties() {
      return {
        render: {
          type: Boolean,
          value: false
        },
        itemId: {
          type: String
        },
        location: {
          type: String,
          computed: "_computeLocation(itemId, render)",
          observer: "locationChanged"
        },

        /**
         * item content
         */
        itemContent: {
          type: String,
          notify: true,
          observer: "_itemContentChanged"
        }
      };
    }

    _computeLocation(itemId, render) {
      if (itemId && render) {
        let item = _haxcmsSiteStore.store.findItem(itemId); // ensure it loads fresh


        return item.slug + "?" + Math.floor(Date.now() / 1000);
      }
    }

    locationChanged(newValue) {
      if (newValue) {
        this.shadowRoot.querySelector("#content").generateRequest();
      }
    } // simple path from a url modifier


    pathFromUrl(url) {
      return url.substring(0, url.lastIndexOf("/") + 1);
    }
    /**
     * React to content being loaded from a page.
     */


    _itemContentChanged(newValue, oldValue) {
      if (newValue) {
        var html = newValue; // only append if not empty

        if (html !== null) {
          html = (0, _utils.encapScript)(newValue);
          (0, _utils.wipeSlot)(this, "*"); // insert the content as quickly as possible, then work on the dynamic imports

          _async.microTask.run(() => {
            setTimeout(() => {
              let frag = document.createRange().createContextualFragment(html);
              this.appendChild(frag);
            }, 5);
          }); // if there are, dynamically import them


          if (!window.WCAutoload && (0, _utils.varExists)(this.manifest, "metadata.node.dynamicElementLoader")) {
            let tagsFound = (0, _utils.findTagsInHTML)(html);
            const basePath = this.pathFromUrl(decodeURIComponent(meta.url));

            for (var i in tagsFound) {
              const tagName = tagsFound[i];

              if (this.manifest.metadata.node.dynamicElementLoader[tagName] && !window.customElements.get(tagName)) {
                new Promise((res, rej) => _require.default([`${basePath}../../../../../${this.manifest.metadata.node.dynamicElementLoader[tagName]}`], res, rej)).then(response => {//console.log(tagName + ' dynamic import');
                }).catch(error => {
                  /* Error handling */
                  console.log(error);
                });
              }
            }
          }
        }
      }
    }

    connectedCallback() {
      super.connectedCallback();
      this.__disposer = [];
      (0, _mobxModule.autorun)(reaction => {
        this.manifest = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.manifest);

        this.__disposer.push(reaction);
      });
    }

    disconnectedCallback() {
      for (var i in this.__disposer) {
        this.__disposer[i];
      }

      super.disconnectedCallback();
    }

  }

  _exports.SiteRenderItem = SiteRenderItem;
  window.customElements.define(SiteRenderItem.tag, SiteRenderItem);
});