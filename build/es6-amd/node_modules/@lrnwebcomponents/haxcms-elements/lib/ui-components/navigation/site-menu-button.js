define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js", "../../../../../@polymer/paper-button/paper-button.js"], function (_exports, _require, _polymerElement, _haxcmsSiteStore, _mobxModule, _paperButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteMenuButton = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `site-menu-button`
   * `Menu button based on the hierarchy`
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  class SiteMenuButton extends _polymerElement.PolymerElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */
    static get tag() {
      return "site-menu-button";
    }

    constructor() {
      super();
      new Promise((res, rej) => _require.default(["../../../../../@polymer/iron-icon/iron-icon.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../../../../@polymer/iron-icons/iron-icons.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../../../../@polymer/paper-tooltip/paper-tooltip.js"], res, rej));
    } // render function


    static get template() {
      return _polymerElement.html`
      <style>
        :host {
          display: block;
          font-size: 16px;
          transition: 0.3s all ease-in-out;
        }
        :host([disabled]) {
          pointer-event: none;
          opacity: 0.3;
        }
        a {
          color: black;
          text-decoration: underline;
          @apply --site-menu-button-link;
        }
        paper-button {
          transition: 0.3s all ease-in-out;
          min-width: unset;
          @apply --site-menu-button-button;
        }
        paper-button:hover,
        paper-button:focus,
        paper-button:active {
          @apply --site-menu-button-button-hover;
        }
        iron-icon {
          display: block;
          font-size: 16px;
          @apply --site-menu-button-icon;
        }
        paper-tooltip {
          --paper-tooltip-background: var(
            --site-menu-button-tooltip-bg,
            #000000
          );
          --paper-tooltip-opacity: 1;
          --paper-tooltip-text-color: var(
            --site-menu-button-tooltip-text,
            #ffffff
          );
          --paper-tooltip-delay-in: 0;
          --paper-tooltip: {
            border-radius: 0;
          }
        }
      </style>
      <a tabindex="-1" href$="[[link]]" disabled$="[[disabled]]">
        <paper-button
          id="menulink"
          noink
          disabled="[[disabled]]"
          raised="[[raised]]"
        >
          <slot name="prefix"></slot>
          <iron-icon icon="[[icon]]"></iron-icon>
          <slot name="suffix"></slot>
        </paper-button>
      </a>
      <paper-tooltip for="menulink" offset="8" position="[[position]]">
        [[label]]
      </paper-tooltip>
    `;
    }
    /**
     * Props
     */


    static get properties() {
      return {
        type: {
          type: String,
          observer: "_typeChanged",
          reflectToAttribute: true
        },

        /**
         * acitvely selected item
         */
        activeManifestIndex: {
          type: String
        },
        routerManifest: {
          type: Object
        },
        link: {
          type: String,
          computed: "pageLink(type, activeManifestIndex, routerManifest.items)"
        },
        editMode: {
          type: Boolean
        },
        disabled: {
          type: Boolean,
          reflectToAttribute: true,
          computed: "pageLinkStatus(type, activeManifestIndex, routerManifest.items, editMode)"
        },
        label: {
          type: String
        },
        icon: {
          type: String
        },
        position: {
          type: String
        },
        raised: {
          type: Boolean
        }
      };
    }

    _typeChanged(newValue) {
      if (newValue === "prev") {
        if (!this.label) {
          this.label = "Previous page";
        }

        if (!this.icon) {
          this.icon = "icons:chevron-left";
        }

        if (!this.position) {
          this.position = "right";
        }
      } else if (newValue === "next") {
        if (!this.label) {
          this.label = "Next page";
        }

        if (!this.icon) {
          this.icon = "icons:chevron-right";
        }

        if (!this.position) {
          this.position = "left";
        }
      } // @todo add support for up and down as far as children and parent relationships
      else {
          this.label = "";
          this.icon = "";
          this.direction = "";
        }
    }

    pageLink(type, activeManifestIndex, items) {
      if (type === "prev" && items) {
        if (activeManifestIndex > 0 && items[activeManifestIndex - 1]) {
          return items[activeManifestIndex - 1].location;
        }

        return null;
      } else if (type === "next" && items) {
        if (activeManifestIndex < items.length - 1 && items[activeManifestIndex + 1]) {
          return items[activeManifestIndex + 1].location;
        }

        return null;
      } // @todo add support for up and down as far as children and parent relationships
      else {
          return null;
        }
    }

    pageLinkStatus(type, activeManifestIndex, items, editMode) {
      if (editMode) {
        return true;
      }

      if (type === "prev") {
        if (activeManifestIndex === 0 || activeManifestIndex === -1) {
          return true;
        }
      } else if (type === "next" && items) {
        if (activeManifestIndex >= items.length - 1) {
          return true;
        }
      }

      return false;
    }

    connectedCallback() {
      super.connectedCallback();
      this.__disposer = (0, _mobxModule.autorun)(() => {
        this.routerManifest = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.routerManifest);
        console.log(this.routerManifest);
      });
      this.__disposer2 = (0, _mobxModule.autorun)(() => {
        this.activeManifestIndex = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.activeManifestIndex);
      });
      this.__disposer3 = (0, _mobxModule.autorun)(() => {
        this.editMode = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.editMode);
      });
    }

    disconnectedCallback() {
      this.__disposer();

      this.__disposer2();

      this.__disposer3();

      super.disconnectedCallback();
    }

  }

  _exports.SiteMenuButton = SiteMenuButton;
  window.customElements.define(SiteMenuButton.tag, SiteMenuButton);
});