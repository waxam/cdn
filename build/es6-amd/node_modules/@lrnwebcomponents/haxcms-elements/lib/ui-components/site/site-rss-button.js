define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js"], function (_exports, _require, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteRSSButton = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `site-rss-button`
   * `A button that references RSS feeds in a standards based way`
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  class SiteRSSButton extends _polymerElement.PolymerElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */
    static get tag() {
      return "site-rss-button";
    }

    constructor() {
      super();
      new Promise((res, rej) => _require.default(["../../../../../@polymer/paper-button/paper-button.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../../../../@polymer/iron-icon/iron-icon.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../../../../@polymer/iron-icons/communication-icons.js"], res, rej));
    } // render function


    static get template() {
      return _polymerElement.html`
      <style>
        :host {
          display: block;
          font-size: 16px;
          color: var(--site-rss-color, #383f45);
        }
        a {
          text-decoration: var(--site-rss-text-decoration, none);
        }
        paper-button {
          text-transform: unset;
          color: white;
          background-color: var(--site-rss-bg-color, #383f45);
          font-size: var(--site-rss-font-size, 13px);
          margin: 0;
          border-radius: var(--site-rss-border-radius, 3px);
          @apply --site-rss-paper-button;
        }
        paper-button:hover,
        paper-button:focus,
        paper-button:active {
          background-color: var(--site-rss-bg-active, #2d3237);
        }
      </style>
      <a
        disabled$="[[disabled]]"
        tabindex="-1"
        href$="[[href]]"
        target="_blank"
        rel="noopener noreferrer"
      >
        <paper-button raised="[[raised]]">
          <iron-icon icon="[[icon]]"></iron-icon> [[label]]
        </paper-button>
      </a>
    `;
    }
    /**
     * Mix in an opened status
     */


    static get properties() {
      return {
        disabled: {
          type: Boolean,
          reflectToAttribute: true
        },
        type: {
          type: String,
          value: "rss",
          observer: "_generateLink"
        },
        raised: {
          type: Boolean,
          value: false,
          reflectToAttribute: true
        }
      };
    }
    /**
     * Generate a link when we get a new type.
     */


    _generateLink(newValue, oldValue) {
      // remove existing if this is moving around
      if (this._link) {
        document.head.removeChild(this._link);
      }

      if (newValue) {
        let link = document.createElement("link");
        link.rel = "alternate";

        if (newValue === "rss") {
          link.href = "rss.xml";
          link.title = "RSS feed";
          link.type = "application/rss+xml";
          this.icon = "communication:rss-feed";
        } else if (newValue === "atom") {
          link.href = "atom.xml";
          link.title = "Atom feed";
          link.type = "application/atom+xml";
          this.icon = "communication:rss-feed";
        }

        this.label = link.title;
        this.href = link.href;
        document.head.appendChild(link);
        this._link = link;
      }
    }

  }

  _exports.SiteRSSButton = SiteRSSButton;
  window.customElements.define(SiteRSSButton.tag, SiteRSSButton);
});