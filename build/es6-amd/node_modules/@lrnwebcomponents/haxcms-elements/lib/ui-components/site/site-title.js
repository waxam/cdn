define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js"], function (_exports, _require, _polymerElement, _haxcmsSiteStore, _mobxModule) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteTitle = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `site-title`
   * `Title of the site`
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  class SiteTitle extends _polymerElement.PolymerElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */
    static get tag() {
      return "site-title";
    }

    constructor() {
      super();
      new Promise((res, rej) => _require.default(["../../../../../@polymer/iron-icon/iron-icon.js"], res, rej));
      new Promise((res, rej) => _require.default(["../../../../../@polymer/paper-tooltip/paper-tooltip.js"], res, rej));
    } // render function


    static get template() {
      return _polymerElement.html`
      <style>
        :host {
          display: block;
          text-rendering: optimizelegibility;
          position: relative;
        }
        a {
          @apply --site-title-link;
        }
        a:hover,
        a:focus,
        a:active {
          @apply --site-title-link-hover;
        }
        a h1 {
          text-rendering: optimizelegibility;
          @apply --site-title-heading;
        }
        iron-icon {
          @apply --site-title-icon;
        }
        paper-tooltip {
          @apply --site-title-tooltip;
        }
      </style>
      <a
        id="btn"
        href$="[[homeLink]]"
        title$="Go to [[siteTitle]]"
        disabled$="[[disabled]]"
      >
        <iron-icon hidden$="[[!icon]]" icon="[[icon]]"></iron-icon>
        <h1 hidden$="[[notitle]]">[[siteTitle]]</h1>
      </a>
      <paper-tooltip for="btn" position="[[position]]" offset="14">
        [[label]]
      </paper-tooltip>
    `;
    }
    /**
     * Props
     */


    static get properties() {
      return {
        disabled: {
          type: Boolean,
          reflectToAttribute: true
        },

        /**
         * Site title
         */
        siteTitle: {
          type: String
        },

        /**
         * HREF to the home page
         */
        homeLink: {
          type: String
        },
        label: {
          type: String,
          value: "Home"
        },
        position: {
          type: String,
          value: "bottom"
        },

        /**
         * optional icon
         */
        icon: {
          type: String,
          value: false
        },

        /**
         * If the title should be displayed or not
         */
        notitle: {
          type: Boolean,
          reflectToAttribute: true,
          value: false
        }
      };
    }

    connectedCallback() {
      super.connectedCallback();
      this.__disposer = [];
      (0, _mobxModule.autorun)(reaction => {
        this.siteTitle = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.siteTitle);

        this.__disposer.push(reaction);
      });
      (0, _mobxModule.autorun)(reaction => {
        this.homeLink = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.homeLink);

        this.__disposer.push(reaction);
      });
    }

    disconnectedCallback() {
      super.disconnectedCallback();

      for (var i in this.__disposer) {
        this.__disposer[i].dispose();
      }
    }

  }

  _exports.SiteTitle = SiteTitle;
  window.customElements.define(SiteTitle.tag, SiteTitle);
});