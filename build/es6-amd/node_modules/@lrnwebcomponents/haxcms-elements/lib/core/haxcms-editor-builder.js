define(["exports", "meta", "require", "./haxcms-site-store.js"], function (_exports, meta, _require, _haxcmsSiteStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSEditorBuilder = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `haxcms-editor-builder`
   * Figure out what our context is and setup based on that
   *
   * @microcopy - the mental model for this element
   * - something called us asking to provide an authoring solution
   * - we need to decide based on environment if this supports php, nodejs, beaker, a demo or none
   */
  class HAXCMSEditorBuilder extends HTMLElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     */
    static get tag() {
      return "haxcms-editor-builder";
    }
    /**
     * ready life cycle
     */


    constructor() {
      super();
      window.HAXCMS.requestAvailability().storePieces.editorBuilder = this;
      this.applyContext();
      window.addEventListener("haxcms-site-editor-loaded", this.editorLoaded.bind(this));
    }

    connectedCallback() {
      if (super.connectedCallback) {
        super.connectedCallback();
      }

      this.dispatchEvent(new CustomEvent("haxcms-editor-builder-ready", {
        bubbles: true,
        composed: true,
        cancelable: false,
        detail: this
      }));
    }

    disconnectedCallback() {
      window.removeEventListener("haxcms-site-editor-loaded", this.editorLoaded.bind(this));

      if (super.disconnectedCallback) {
        super.disconnectedCallback();
      }
    }

    editorLoaded(e) {
      if (!_haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement) {
        new Promise((res, rej) => _require.default(["./haxcms-site-editor-ui.js"], res, rej));
        _haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement = document.createElement("haxcms-site-editor-ui");
        document.body.appendChild(_haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement); // forces a nice fade in transition

        setTimeout(() => {
          _haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement.painting = false;
        }, 5);
      }
    } // simple path from a url modifier


    pathFromUrl(url) {
      return url.substring(0, url.lastIndexOf("/") + 1);
    }

    applyContext(context = null) {
      if (!this.__appliedContext) {
        this.__appliedContext = true; // this allows forced context

        if (context == null) {
          context = window.HAXCMS.requestAvailability().getApplicationContext();
        }

        if (["php", "nodejs", "desktop"].includes(context)) {
          // append this script to global scope to show up via window
          // this is a unique case since it's server side generated in HAXCMS
          let script = document.createElement("script"); // IF we're in a live environment this will always be 2 levels back

          if (window.appSettings && window.appSettings.connectionSettings) {
            script.src = window.appSettings.connectionSettings;
          } else {
            script.src = `../../system/api/connectionSettings`;
          }

          fetch(script.src).then(response => {
            if (response.status != 404) {
              document.documentElement.appendChild(script);
            }
          });
        } // dynamic import if this isn't published tho we'll double check
        // that it's valid later


        if (!["published", "11ty"].includes(context)) {
          const basePath = this.pathFromUrl(decodeURIComponent(meta.url)); // import and set the tag based on the context

          _haxcmsSiteStore.store.cmsSiteEditorBackend.tag = `haxcms-backend-${context}`; // delay import slightly to ensure global scope is there

          new Promise((res, rej) => _require.default([`${basePath}backends/${_haxcmsSiteStore.store.cmsSiteEditorBackend.tag}.js`], res, rej)).then(e => {
            if (!_haxcmsSiteStore.store.cmsSiteEditorBackend.instance) {
              _haxcmsSiteStore.store.cmsSiteEditorBackend.instance = document.createElement(_haxcmsSiteStore.store.cmsSiteEditorBackend.tag);
              document.body.append(_haxcmsSiteStore.store.cmsSiteEditorBackend.instance);
            }
          });
        }
      }
    }

  }

  _exports.HAXCMSEditorBuilder = HAXCMSEditorBuilder;
  window.customElements.define(HAXCMSEditorBuilder.tag, HAXCMSEditorBuilder);
});