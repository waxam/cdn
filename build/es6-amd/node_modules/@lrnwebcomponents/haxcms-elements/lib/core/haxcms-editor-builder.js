define(["exports", "meta", "require", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/utils/resolve-url.js", "./haxcms-site-store.js", "../../../../@polymer/polymer/lib/utils/async.js"], function (_exports, meta, _require, _polymerElement, _resolveUrl, _haxcmsSiteStore, async) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSEditorBuilder = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);
  async = babelHelpers.interopRequireWildcard(async);

  /**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `haxcms-editor-builder`
   * Figure out what our context is and setup based on that
   *
   * @microcopy - the mental model for this element
   * - something called us asking to provide an authoring solution
   * - we need to decide based on environment if this supports php, beaker or none
   */
  class HAXCMSEditorBuilder extends _polymerElement.PolymerElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */
    static get tag() {
      return "haxcms-editor-builder";
    }
    /**
     * ready life cycle
     */


    constructor() {
      super();
      this.applyContext();
      window.addEventListener("haxcms-site-editor-loaded", this.editorLoaded.bind(this));
    }

    disconnectedCallback() {
      window.removeEventListener("haxcms-site-editor-loaded", this.editorLoaded.bind(this));
      super.disconnectedCallback();
    }
    /**
     * Try to get context of what backend is powering this
     */


    getContext() {
      let context = ""; // figure out the context we need to apply for where the editing creds
      // and API might come from

      if (typeof DatArchive !== typeof undefined) {
        context = "beaker";
      } else if (window.__haxCMSContextPublished === true) {
        context = "published";
      } else if (window.__haxCMSContextNode === true) {
        // @todo add support for node js based back end
        context = "nodejs";
      } else if (window.__haxCMSContextDemo === true) {
        context = "demo";
      } else {
        context = "php";
      }

      return context;
    }

    editorLoaded(e) {
      if (!_haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement) {
        new Promise((res, rej) => _require.default(["./haxcms-site-editor-ui.js"], res, rej));
        _haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement = document.createElement("haxcms-site-editor-ui");
        document.body.appendChild(_haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement); // forces a nice fade in transition

        setTimeout(() => {
          _haxcmsSiteStore.store.cmsSiteEditor.haxCmsSiteEditorUIElement.painting = false;
        }, 5);
      }
    }

    applyContext() {
      let context = this.getContext();

      if (context === "php") {
        // append the php for global scope to show up via window
        // this is a unique case since it's server side generated in HAXCMS/PHP
        let script = document.createElement("script"); // IF we're in a php environment this will always be 2 levels back

        script.src = `../../haxcms-jwt.php`;
        document.documentElement.appendChild(script);
      } // dynamic import if this isn't published


      if (context !== "published") {
        const basePath = (0, _resolveUrl.pathFromUrl)(decodeURIComponent(meta.url)); // import and set the tag based on the context

        _haxcmsSiteStore.store.cmsSiteEditor.tag = `haxcms-backend-${context}`; // delay import slightly to ensure global scope is there

        new Promise((res, rej) => _require.default([`${basePath}backends/${_haxcmsSiteStore.store.cmsSiteEditor.tag}.js`], res, rej));
      }
    }

  }

  _exports.HAXCMSEditorBuilder = HAXCMSEditorBuilder;
  window.customElements.define(HAXCMSEditorBuilder.tag, HAXCMSEditorBuilder);
});