define(["exports", "require", "../../../../../lit-element/lit-element.js", "../haxcms-site-store.js", "../../../../jwt-login/jwt-login.js"], function (_exports, _require, _litElement, _haxcmsSiteStore, _jwtLogin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSBackendDemo = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `haxcms-backend-demo`
   * `a simple element to check for and fetch JWTs`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   */
  class HAXCMSBackendDemo extends _litElement.LitElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     */
    static get tag() {
      return "haxcms-backend-demo";
    } // render function


    render() {
      return _litElement.html`
      <jwt-login
        auto
        id="jwt"
        jwt="${this.jwt}"
        @jwt-changed="${this.jwtChanged}"
      ></jwt-login>
    `;
    }

    jwtChanged(e) {
      this.jwt = e.detail.value;
      _haxcmsSiteStore.store.jwt = this.jwt;

      if (_haxcmsSiteStore.store.cmsSiteEditor && _haxcmsSiteStore.store.cmsSiteEditor.instance) {
        _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = this.jwt;
      }
    }

    static get properties() {
      return {
        /**
         * JSON Web token, it'll come from a global call if it's available
         */
        jwt: {
          type: String
        }
      };
    }
    /**
     * created life cycle
     */


    constructor() {
      super(); // this makes it easier to debug things and directly modify the store for
      // development purposes

      window.HAXcmsStore = _haxcmsSiteStore.store;
    }

    _jwtChanged(newValue) {
      console.log(newValue);
    }
    /**
     * LitElement life cycle - properties changed
     */


    updated(changedProperties) {
      changedProperties.forEach((oldValue, propName) => {
        if (propName == "jwt") {
          this._jwtChanged(this[propName], oldValue);
        }
      });
    }
    /**
     * LitElement life cycle - element ready
     */


    firstUpdated(changedProperties) {
      if (window.appSettings) {
        let jwtlogin = this.shadowRoot.querySelector("#jwt");
        jwtlogin.url = window.appSettings.login;
        jwtlogin.refreshUrl = window.appSettings.refreshUrl;
        jwtlogin.logoutUrl = window.appSettings.logout;
        jwtlogin.redirectUrl = window.appSettings.redirectUrl;
      }

      try {
        new Promise((res, rej) => _require.default(["../haxcms-site-editor.js"], res, rej)).then(e => {
          // validate availability
          _haxcmsSiteStore.store.cmsSiteEditorAvailability();

          _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = this.jwt;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.method = "GET";
          _haxcmsSiteStore.store.cmsSiteEditor.instance.saveNodePath = window.appSettings.saveNodePath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.saveManifestPath = window.appSettings.saveManifestPath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.saveOutlinePath = window.appSettings.saveOutlinePath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.getNodeFieldsPath = window.appSettings.getNodeFieldsPath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.getSiteFieldsPath = window.appSettings.getSiteFieldsPath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.createNodePath = window.appSettings.createNodePath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.deleteNodePath = window.appSettings.deleteNodePath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.publishSitePath = window.appSettings.publishSitePath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.syncSitePath = window.appSettings.syncSitePath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.revertSitePath = window.appSettings.revertSitePath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.getUserDataPath = window.appSettings.getUserDataPath;
          _haxcmsSiteStore.store.cmsSiteEditor.instance.appStore = window.appSettings.appStore;
        }, e => {
          //import failed
          console.log(e);
        });
      } catch (err) {// error in the event this is a double registration
      }
    }

  }

  _exports.HAXCMSBackendDemo = HAXCMSBackendDemo;
  window.customElements.define(HAXCMSBackendDemo.tag, HAXCMSBackendDemo);
});