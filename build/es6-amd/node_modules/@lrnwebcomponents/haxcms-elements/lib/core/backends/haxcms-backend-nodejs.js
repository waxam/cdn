define(["exports", "require", "../../../../../lit-element/lit-element.js", "../haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js", "../../../../jwt-login/jwt-login.js"], function (_exports, _require, _litElement, _haxcmsSiteStore, _mobxModule, _jwtLogin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSBackendNodeJS = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `haxcms-backend-nodejs`
   * `a simple element to check for and fetch JWTs`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   */
  class HAXCMSBackendNodeJS extends _litElement.LitElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     */
    static get tag() {
      return "haxcms-backend-nodejs";
    }
    /**
     * LitElement
     */


    render() {
      return (0, _litElement.html)`
      <jwt-login
        id="jwt"
        jwt="${this.jwt}"
        @jwt-changed="${this.jwtChanged}"
      ></jwt-login>
    `;
    }

    jwtChanged(e) {
      this.jwt = e.detail.value;
      _haxcmsSiteStore.store.jwt = this.jwt;

      if (_haxcmsSiteStore.store.cmsSiteEditor && _haxcmsSiteStore.store.cmsSiteEditor.instance) {
        _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = this.jwt;
      } // support updates after the fact


      if (this.jwt != null && this.jwt != "null" && this.jwt != "" && typeof this.jwt == "string") {
        this.dynamicallyImportEditor();
      }
    }
    /**
     * Detatched life cycle
     */


    disconnectedCallback() {
      for (var i in this.__disposer) {
        this.__disposer[i].dispose();
      }

      super.disconnectedCallback();
    }
    /**
     * HTMLElement
     */


    constructor() {
      super();
      this.__disposer = []; // see up a tag to place RIGHT next to the site-builder itself

      (0, _mobxModule.autorun)(reaction => {
        this.jwt = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.jwt);

        this.__disposer.push(reaction);
      });
    }
    /**
     * LitElement life cycle - ready
     */


    firstUpdated(changedProperties) {
      setTimeout(() => {
        if (window.appSettings) {
          let jwtlogin = this.shadowRoot.querySelector("#jwt");
          jwtlogin.url = window.appSettings.login;
          jwtlogin.refreshUrl = window.appSettings.refreshUrl;
          jwtlogin.logoutUrl = window.appSettings.logout;
          jwtlogin.redirectUrl = window.appSettings.redirectUrl; // allow setting in session driven environments
          // its not a real JWT but it drives the environment to operate correctly

          if (window.appSettings.jwt) {
            this.jwt = window.appSettings.jwt;
          }
        }

        if (this.jwt != null && this.jwt != "null" && this.jwt != "" && typeof this.jwt == "string") {
          this.dynamicallyImportEditor();
        } else {
          // other things will have to sort out the fact that while we
          // DO have a dynamic backend, we didn't get a hit on the JWT
          // meaning that we are in a dynamic environment but logged out
          // at the moment (or viewing a site we don't have authorization to)
          window.dispatchEvent(new CustomEvent("haxcms-not-logged-in", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: this
          }));
        }
      }, 500);
    }
    /**
     * LitElement / popular convention
     */


    static get properties() {
      return {
        /**
         * JSON Web token, it'll come from a global call if it's available
         */
        jwt: {
          type: String
        }
      };
    }
    /**
     * Import the editor
     */


    dynamicallyImportEditor() {
      // attempt to dynamically import the hax cms site editor
      // which will appear to be injecting into the page
      // but because of this approach it should be non-blocking
      try {
        new Promise((res, rej) => _require.default(["../haxcms-site-editor.js"], res, rej)).then(e => {
          // if we don't have appSettings by this point
          // it means we don't actually have a backend / directions
          // this would be a published state or a state where
          // there is no actual backend to bother confiring with
          // possibly a user navigated to a site that doesn't
          // have JWT credentials but isn't actually published
          // we also need this here because PHP is the assumed
          // fallback backend
          if (window.appSettings) {
            _haxcmsSiteStore.store.cmsSiteEditorAvailability();

            _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = this.jwt;
            _haxcmsSiteStore.store.jwt = this.jwt;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.saveNodePath = window.appSettings.saveNodePath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.saveManifestPath = window.appSettings.saveManifestPath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.saveOutlinePath = window.appSettings.saveOutlinePath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.getNodeFieldsPath = window.appSettings.getNodeFieldsPath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.getSiteFieldsPath = window.appSettings.getSiteFieldsPath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.getFormToken = window.appSettings.getFormToken;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.publishSitePath = window.appSettings.publishSitePath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.syncSitePath = window.appSettings.syncSitePath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.revertSitePath = window.appSettings.revertSitePath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.createNodePath = window.appSettings.createNodePath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.deleteNodePath = window.appSettings.deleteNodePath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.getUserDataPath = window.appSettings.getUserDataPath;
            _haxcmsSiteStore.store.cmsSiteEditor.instance.appStore = window.appSettings.appStore;
          }
        }, e => {//import failed
        });
      } catch (err) {// error in the event this is a double registration
      }
    }

  }

  _exports.HAXCMSBackendNodeJS = HAXCMSBackendNodeJS;
  window.customElements.define(HAXCMSBackendNodeJS.tag, HAXCMSBackendNodeJS);
});