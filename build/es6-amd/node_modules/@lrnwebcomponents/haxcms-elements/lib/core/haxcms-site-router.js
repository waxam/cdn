define(["exports","../../../../@polymer/polymer/polymer-element.js","../../../../@vaadin/router/dist/vaadin-router.js","../../../../mobx/lib/mobx.module.js","./haxcms-site-store.js"],function(_exports,_polymerElement,_vaadinRouter,_mobxModule,_haxcmsSiteStore){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HAXCMSSiteRouter=void 0;/**
 * `haxcms-site-router`
 * `front-end router for haxcms`
 */class HAXCMSSiteRouter extends _polymerElement.PolymerElement{/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */static get tag(){return"haxcms-site-router"}// render function
static get template(){return _polymerElement.html`
      <slot></slot>
    `}static get properties(){return{baseURI:{type:String}}}/**
   * ready life cycle
   */constructor(){super();// create router
let options={};if(this.baseURI){options.baseUrl=this.baseURI}this.router=new _vaadinRouter.Router(this,options);/**
     * Subscribe to changes in the manifest
     */this.__disposer=(0,_mobxModule.autorun)(()=>{this._updateRouter(_haxcmsSiteStore.store.routerManifest)});window.addEventListener("vaadin-router-location-changed",this._routerLocationChanged.bind(this))}/**
   * Detached life cycle
   */disconnectedCallback(){this.__disposer();window.removeEventListener("vaadin-router-location-changed",this._routerLocationChanged.bind(this));super.disconnectedCallback()}/**
   * Update the router based on a manifest.
   * This should not be called directly. Use the
   * 'haxcms-router-manifest-changed' event
   *
   * @param {object} routerManifest
   */_updateRouter(routerManifest){if(!routerManifest||"undefined"===typeof routerManifest.items)return;const routerItems=routerManifest.items.map(i=>{return{path:i.location,name:i.id,component:`fake-${i.id}-e`}});this.router.setRoutes([...routerItems,{path:"/",component:"fake-home-e",name:"home"},{path:"/(.*)",component:"fake-404-e",name:"404"}])}/**
   * React to page changes in the vaadin router and convert it
   * to a change in the mobx store.
   * @param {event} e
   */_routerLocationChanged(e){// store local state
_haxcmsSiteStore.store.location=e.detail.location}}_exports.HAXCMSSiteRouter=HAXCMSSiteRouter;window.customElements.define(HAXCMSSiteRouter.tag,HAXCMSSiteRouter)});