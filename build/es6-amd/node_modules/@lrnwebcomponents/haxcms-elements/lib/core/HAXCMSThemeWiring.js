define(["exports", "./haxcms-site-store.js", "../../../../mobx/lib/mobx.module.js", "../../../utils/utils.js", "../../../simple-colors-shared-styles/simple-colors-shared-styles.js", "../../../anchor-behaviors/anchor-behaviors.js"], function (_exports, _haxcmsSiteStore, _mobxModule, _utils, _simpleColorsSharedStyles, _anchorBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSThemeWiring = _exports.HAXCMSTheme = void 0;

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `HAXCMSTheme` mixin class to automatically apply HAXcms theme state
   * Typically an element will be extended from this and while not all,
   * many will want to customize the `contentContainer` property in order
   * to ensure the editable layer is correctly applied visually.
   *
   * This will then need a rendering helper library to make work
   */
  const HAXCMSTheme = function (SuperClass) {
    return class extends SuperClass {
      // leverage the wiring class element; this helps us clean things up smoothly later
      // while still keeping it abstract enough for direct usage in PolymerLegacy elements
      // as well as those wanting a custom integration methodology
      constructor() {
        super(); // a bucket for settings that can be for reusable
        // functionality across themes yet they might want
        // to opt in / out

        this.HAXCMSThemeSettings = {
          // should we scroll to the top when a new page
          // is selected
          autoScroll: false,
          scrollTarget: window
        };
        this.__disposer = this.__disposer ? this.__disposer : [];
        this.HAXCMSThemeWiring = new HAXCMSThemeWiring(this);
      }
      /**
       * This is a render function example. All new HAXcms capable themes need
       * to define a contentcontainer and a slot id wrapper. this allows HAXcms
       * to correctly target the area that will display the HAXeditor when in
       * edit-mode and correctly hide the editor when in normal content presentation.
       * static get template() {
       *  return html`
       *  <style include="simple-colors-shared-styles-polymer">
       *   :host {
       *     display: block;
       *     background-color: var(--haxcms-color, white);
       *   }
       *   :host([edit-mode]) #slot {
       *     display: none;
       *   }
       *  </style>
       *  <div id="contentcontainer">
       *    <div id="slot"><slot></slot></div>
       *  </div>`;
       *  }
       */


      _colorChanged(newValue) {
        if (newValue) {
          this.hexColor = this._getHexColor(newValue);
        }
      }
      /**
       * Convert color name to HEX
       */


      _getHexColor(color) {
        // legacy support for materializeCSS names
        let name = color.replace("-text", "");
        let colors = window.SimpleColorsStyles.colors;

        if (colors[name]) {
          return colors[name][6];
        }

        return "#000000";
      }
      /**
       * notice edit changed, make sure we fake a resize because of that container flyout
       */


      _editModeChanged(newValue, oldValue) {
        if (typeof oldValue !== typeof undefined) {
          // ensure global is kept in sync
          _haxcmsSiteStore.store.editMode = newValue;

          this.__styleReapply();
        }
      }
      /**
       * private: Notice content container has changed
       */


      _contentContainerChanged(newValue, oldValue) {
        // test that this hasn't been connected previously
        if (newValue && (typeof oldValue === typeof undefined || oldValue == null)) {
          this.HAXCMSThemeWiring.connect(this, newValue);
        } // previously connected, needs to change to new connection
        // this is an edge case at best...
        else if (newValue && oldValue) {
            this.HAXCMSThemeWiring.disconnect(this);
            this.HAXCMSThemeWiring.connect(this, newValue);
          } // no longer connected
          else if (oldValue && newValue == null) {
              this.HAXCMSThemeWiring.disconnect(this);
            }
      }

      _locationChanged(newValue, oldValue) {
        if (!newValue || typeof newValue.route === "undefined") return;
        const location = newValue;
        const name = location.route.name;

        if (name == "home" || name == "404") {
          // if we are on the homepage then load the first item in the manifest
          // and set it active
          const firstItem = _haxcmsSiteStore.store.routerManifest.items.find(i => typeof i.id !== "undefined");

          if (firstItem) {
            _haxcmsSiteStore.store.activeId = firstItem.id;
          }
        }

        if (this.HAXCMSThemeSettings.autoScroll) {
          this.HAXCMSThemeSettings.scrollTarget.scrollTo({
            top: 0,
            left: 0
          }); // @todo hacky timing thing

          setTimeout(() => {
            // try scrolling to the target ID after content gets imported
            window.AnchorBehaviors.getTarget(_haxcmsSiteStore.store.themeElement);
          }, 1000);
        }
      }
      /**
       * Connect state and theme wiring
       */


      connectedCallback() {
        super.connectedCallback(); // edge case, we just swapped theme faster then content loaded... lol

        setTimeout(() => {
          if (this.childNodes.length === 0) {
            let frag = document.createRange().createContextualFragment(_haxcmsSiteStore.store.activeItemContent);
            this.appendChild(frag);
          }

          this.__styleReapply();
        }, 50); // keep editMode in sync globally

        (0, _mobxModule.autorun)(reaction => {
          this.activeItemContent = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.activeItemContent);
          setTimeout(() => {
            if (this.HAXCMSThemeSettings.autoScroll) {
              this.HAXCMSThemeSettings.scrollTarget.scrollTo({
                top: 0,
                left: 0
              });
              setTimeout(() => {
                // try scrolling to the target ID after content gets imported
                window.AnchorBehaviors.getTarget(_haxcmsSiteStore.store.themeElement);
              }, 500);
            }
          }, 10);

          this.__disposer.push(reaction);
        }); // keep editMode in sync globally

        (0, _mobxModule.autorun)(reaction => {
          this.editMode = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.editMode);

          this.__disposer.push(reaction);
        }); // logged in so we can visualize things differently as needed

        (0, _mobxModule.autorun)(reaction => {
          this.isLoggedIn = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.isLoggedIn);

          this.__disposer.push(reaction);
        }); // store disposer so we can clean up later

        (0, _mobxModule.autorun)(reaction => {
          const __manifest = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.manifest);

          if (__manifest && (0, _utils.varExists)(__manifest, "title")) {
            document.title = __manifest.title;
          }

          if (__manifest && (0, _utils.varExists)(__manifest, "metadata.theme.variables.cssVariable")) {
            // json outline schema changed, allow other things to react
            // fake way of forcing an update of these items
            let ary = __manifest.metadata.theme.variables.cssVariable.replace("--simple-colors-default-theme-", "").split("-");

            ary.pop(); // simple colors "accent color" property

            this.accentColor = ary.join("-");
            var color = (0, _utils.varGet)(__manifest, "metadata.theme.variables.cssVariable", null); // fallback if color wasn't set via css var

            if (color == null) {
              color = (0, _utils.varGet)(__manifest, "metadata.theme.variables.hexCode", "#ff0074");
            } else {
              color = `var(${color})`;
            } // set this directly instead of messing w/ accentColor


            document.body.style.setProperty("--haxcms-color", color);
          }

          this.__disposer.push(reaction);
        });
        (0, _mobxModule.autorun)(reaction => {
          this._location = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.location);

          this.__disposer.push(reaction);
        });
      }

      __styleReapply() {
        // trick browser into thinking we just reized
        window.dispatchEvent(new Event("resize"));
      }
      /**
       * Disconnect the wiring for the theme and clean up state
       */


      disconnectedCallback() {
        // remove our content container var which will disconnect the wiring
        delete this.contentContainer; // clean up state

        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        super.disconnectedCallback();
      }
      /**
       * Correctly reset state and dispatch event to notify of active item change
       */


      resetActive() {
        window.history.pushState(null, null, _haxcmsSiteStore.store.location.baseUrl);
        window.dispatchEvent(new PopStateEvent("popstate"));
        this.dispatchEvent(new CustomEvent("haxcms-active-item-changed", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {}
        }));
      }

    };
  };
  /**
   * `HAXCMSThemeWiring` streamline hooking themes up to HAXCMS
   * Directly invoking this class is not advised unless
   * the mixin class `HAXCMSTheme` integration needs modified beyond the norm
   */


  _exports.HAXCMSTheme = HAXCMSTheme;

  class HAXCMSThemeWiring {
    constructor(element, load = true) {
      window.SimpleColorsSharedStyles.requestAvailability();

      if (load) {
        // @todo may want to set this to sessionStorage instead...
        if (window.localStorage.getItem("HAXCMSSystemData") == null) {
          window.localStorage.setItem("HAXCMSSystemData", JSON.stringify({}));
        }
      }
    }
    /**
     * connect the theme and see if we have an authoring experience to inject correctly
     */


    connect(element, injector) {
      window.addEventListener("haxcms-active-item-changed", this._activeItemUpdate.bind(element));
      window.addEventListener("haxcms-edit-mode-changed", this._globalEditChanged.bind(element));
      window.addEventListener("haxcms-trigger-update", this._triggerUpdate.bind(element)); // inject the tools to allow for an authoring experience
      // ensuring they are loaded into the correct theme

      _haxcmsSiteStore.store.cmsSiteEditorAvailability();

      _haxcmsSiteStore.store.cmsSiteEditor.instance.appElement = element;
      _haxcmsSiteStore.store.cmsSiteEditor.instance.appendTarget = injector;

      _haxcmsSiteStore.store.cmsSiteEditor.instance.appendTarget.appendChild(_haxcmsSiteStore.store.cmsSiteEditor.instance);
    }
    /**
     * detatch element events from whats passed in
     */


    disconnect(element) {
      window.removeEventListener("haxcms-active-item-changed", this._activeItemUpdate.bind(element));
      window.removeEventListener("haxcms-edit-mode-changed", this._globalEditChanged.bind(element));
      window.removeEventListener("haxcms-trigger-update", this._triggerUpdate.bind(element)); // need to unplug this so that the new theme can pick it up.

      document.body.appendChild(_haxcmsSiteStore.store.cmsSiteEditorAvailability());
    }
    /**
     * Global edit state changed
     */


    _globalEditChanged(e) {
      this.editMode = e.detail;
    }
    /**
     * HAXcms: Active item has been updated
     */


    _activeItemUpdate(e) {
      let newValue = e.detail;

      if (newValue && typeof newValue.id !== typeof undefined) {
        // dispatch to the store
        _haxcmsSiteStore.store.activeId = newValue.id; // dispatch to everything else caring

        const evt = new CustomEvent("json-outline-schema-active-item-changed", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: newValue
        });
        this.dispatchEvent(evt); // update title as a simple nicity

        if (typeof newValue.title !== typeof undefined) {
          document.title = _haxcmsSiteStore.store.routerManifest.title + " - " + newValue.title;
        } else {
          document.title = _haxcmsSiteStore.store.routerManifest.title;
        }
      } else {
        document.title = _haxcmsSiteStore.store.routerManifest.title;
      }
    }
    /**
     * Generic event to ensure that the active item change is noticed
     */


    _triggerUpdate(e) {
      this.dispatchEvent(new CustomEvent("haxcms-active-item-changed", {
        bubbles: true,
        composed: true,
        cancelable: true,
        detail: {}
      }));
    }

  }

  _exports.HAXCMSThemeWiring = HAXCMSThemeWiring;
});