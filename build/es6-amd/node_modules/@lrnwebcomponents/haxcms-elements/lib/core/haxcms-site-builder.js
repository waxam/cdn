define(["exports", "meta", "require", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/utils/settings.js", "../../../../@polymer/polymer/lib/mixins/element-mixin.js", "../../../../@polymer/polymer/lib/utils/render-status.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/polymer/lib/utils/resolve-url.js", "../../../hax-body/lib/haxutils.js", "../../../../mobx/lib/mobx.module.js", "./haxcms-site-store.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "./haxcms-site-router.js"], function (_exports, meta, _require, _polymerElement, _settings, _elementMixin, _renderStatus, _polymerDom, _resolveUrl, _haxutils, _mobxModule, _haxcmsSiteStore, _ironAjax, _haxcmsSiteRouter) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteBuilder = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `haxcms-site-builder`
   * `build the site and everything off of this`
   * @microcopy - the mental model for this element
   * - This is a factory element, it doesn't do much on its own visually
   * - it loads a site.json file and then utilizes this data in order to construct
   *   what theme it should load (element) in order to get everything off and running
   */
  class HAXCMSSiteBuilder extends _polymerElement.PolymerElement {
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */
    static get tag() {
      return "haxcms-site-builder";
    } // render function


    static get template() {
      return _polymerElement.html`
      <style>
        :host {
          display: block;
        }
        :host #slot {
          transition: all 0.2s ease-in-out;
          background-color: var(--haxcms-color, white);
          opacity: 0.2;
          visibility: hidden;
        }
        :host([theme-loaded]) #slot {
          opacity: 1;
          visibility: visible;
        }
        paper-progress {
          display: block;
          width: 100%;
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          background-color: transparent;
          z-index: 1000;
          --paper-progress-active-color: var(
            --haxcms-color,
            rgba(255, 255, 255, 0.5)
          );
          --paper-progress-container-color: transparent;
        }
      </style>
      <haxcms-site-router base-uri="[[baseURI]]"></haxcms-site-router>
      <paper-progress hidden\$="[[!loading]]" indeterminate></paper-progress>
      <iron-ajax
        id="manifest"
        url="[[outlineLocation]][[file]][[_timeStamp]]"
        handle-as="json"
        last-response="{{manifest}}"
        last-error="{{lastError}}"
      ></iron-ajax>
      <iron-ajax
        id="activecontent"
        url="[[outlineLocation]][[activeItem.location]][[_timeStamp]]"
        handle-as="text"
        loading="{{loading}}"
        last-response="{{activeItemContent}}"
        last-error="{{lastError}}"
      ></iron-ajax>
      <div id="slot"><slot></slot></div>
    `;
    }

    static get properties() {
      return {
        /**
         * Singular error reporter / visual based on requests erroring
         */
        lastError: {
          type: Object,
          observer: "_lastErrorChanged"
        },
        _timeStamp: {
          type: String
        },

        /**
         * queryParams
         */
        queryParams: {
          type: Object
        },

        /**
         * Loading status of the page to render.
         */
        loading: {
          type: Boolean,
          value: false,
          reflectToAttribute: true
        },

        /**
         * support for alternate locations.
         */
        outlineLocation: {
          type: String,
          notify: true,
          reflectToAttribute: true
        },

        /**
         * Manifest from file
         */
        manifest: {
          type: Object,
          notify: true,
          observer: "_manifestChanged"
        },

        /**
         * Theme, used to boot a design element
         */
        themeData: {
          type: Object,
          observer: "_themeChanged"
        },

        /**
         * Theme, used to boot a design element
         */
        themeElement: {
          type: Object
        },

        /**
         * Imported items so we can allow theme flipping dynamically
         */
        __imported: {
          type: Object,
          value: {}
        },

        /**
         * theme loaded to indicate to the theme we have a theme ready to go
         */
        themeLoaded: {
          type: Boolean,
          reflectToAttribute: true,
          value: false
        },

        /**
         * Active item which is in JSON Outline Schema
         */
        activeItem: {
          type: Object,
          notify: true,
          observer: "_activeItemChanged"
        },

        /**
         * Active item content
         */
        activeItemContent: {
          type: String,
          notify: true,
          observer: "_activeItemContentChanged"
        },

        /**
         * Location of the site.json file
         */
        file: {
          type: String,
          observer: "_fileChanged"
        },

        /**
         * Injected by HAXcms
         */
        baseURI: {
          type: String
        }
      };
    }

    _lastErrorChanged(newValue) {
      if (newValue) {
        console.error(newValue);
        const evt = new CustomEvent("simple-toast-show", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            text: newValue.statusText
          }
        });
        window.dispatchEvent(evt);
      }
    }
    /**
     * ready life cycle
     */


    constructor() {
      super();
      window.addEventListener("hax-store-ready", this.storeReady.bind(this));
      new Promise((res, rej) => _require.default(["../../../../@polymer/paper-progress/paper-progress.js"], res, rej)); // attempt to set polymer passive gestures globally
      // this decreases logging and improves performance on scrolling

      (0, _settings.setPassiveTouchGestures)(true); // hide the outdated fallback

      if (document.getElementById("haxcmsoutdatedfallback")) {
        document.getElementById("haxcmsoutdatedfallback").style.display = "none";
      }

      this.__disposer = [];
      (0, _mobxModule.autorun)(reaction => {
        this.themeData = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.themeData);

        this.__disposer.push(reaction);
      });
      (0, _mobxModule.autorun)(reaction => {
        this.activeItem = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.activeItem);

        this.__disposer.push(reaction);
      });
      this._timeStamp = "";
    }

    connectedCallback() {
      super.connectedCallback();
      (0, _renderStatus.afterNextRender)(this, function () {
        this.dispatchEvent(new CustomEvent("haxcms-ready", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: this
        }));

        if (document.getElementById("haxcmsoutdatedfallback")) {
          document.body.removeChild(document.getElementById("haxcmsoutdatedfallback"));
        }

        window.addEventListener("haxcms-trigger-update", this._triggerUpdatedData.bind(this));
        window.addEventListener("haxcms-trigger-update-node", this._triggerUpdatedNode.bind(this)); // dyanmcially import the editor builder which figures out if we should have one

        new Promise((res, rej) => _require.default(["./haxcms-editor-builder.js"], res, rej)).then(response => {
          this.editorBuilder = document.createElement("haxcms-editor-builder"); // attach editor builder after we've appended to the screen

          document.body.appendChild(this.editorBuilder); // get fresh data if not published

          if (this.editorBuilder.getContext() !== "published") {
            this._timeStamp = "?" + Math.floor(Date.now() / 1000);
          }
        }).catch(error => {
          /* Error handling */
          console.log(error);
        });
        var evt = document.createEvent("UIEvents");
        evt.initUIEvent("resize", true, false, window, 0);
        window.dispatchEvent(evt);
      });
    }
    /**
     * Detached life cycle
     */


    disconnectedCallback() {
      window.removeEventListener("haxcms-trigger-update", this._triggerUpdatedData.bind(this));
      window.removeEventListener("haxcms-trigger-update-node", this._triggerUpdatedNode.bind(this));

      for (var i in this.__disposer) {
        this.__disposer[i].dispose();
      }

      window.removeEventListener("hax-store-ready", this.storeReady.bind(this));
      super.disconnectedCallback();
    }

    storeReady(e) {
      // append UI element to body to avoid stack order issues
      if (_haxcmsSiteStore.store.cmsSiteEditor && _haxcmsSiteStore.store.cmsSiteEditor.instance && window.HaxStore.instance.activeHaxBody && _haxcmsSiteStore.store.activeItemContent) {
        window.HaxStore.instance.activeHaxBody.importContent(_haxcmsSiteStore.store.activeItemContent);
      }
    }
    /**
     * React to content being loaded from a page.
     */


    _activeItemContentChanged(newValue, oldValue) {
      if (newValue) {
        var html = newValue; // only append if not empty

        if (html !== null) {
          (0, _haxutils.wipeSlot)(this.themeElement, "*");
          html = (0, _haxutils.encapScript)(newValue); // set in the store

          _haxcmsSiteStore.store.activeItemContent = html; // insert the content as quickly as possible, then work on the dynamic imports
          // @todo this might be why we get a double render some times

          setTimeout(() => {
            if ((0, _polymerDom.dom)(this.themeElement).getEffectiveChildNodes().length === 0) {
              let frag = document.createRange().createContextualFragment(html);
              (0, _polymerDom.dom)(this.themeElement).appendChild(frag);
              this.dispatchEvent(new CustomEvent("json-outline-schema-active-body-changed", {
                bubbles: true,
                composed: true,
                cancelable: false,
                detail: html
              }));
            }
          }, 5); // if there are, dynamically import them

          if (this.manifest.metadata.dynamicElementLoader) {
            let tagsFound = (0, _haxutils.findTagsInHTML)(html);
            const basePath = (0, _resolveUrl.pathFromUrl)(decodeURIComponent(meta.url));

            for (var i in tagsFound) {
              const tagName = tagsFound[i];

              if (this.manifest.metadata.dynamicElementLoader[tagName] && !window.customElements.get(tagName)) {
                new Promise((res, rej) => _require.default([`${basePath}../../../../${this.manifest.metadata.dynamicElementLoader[tagName]}`], res, rej)).then(response => {// useful to debug if dynamic references are coming in
                  //console.log(tagName + ' dynamic import');
                }).catch(error => {
                  /* Error handling */
                  console.log(error);
                  console.log(tagName);
                });
              }
            }
          }
        }
      }
    }
    /**
     * Active item updated, let's request the content from it
     */


    _activeItemChanged(newValue, oldValue) {
      if (newValue && typeof newValue.id !== typeof undefined) {
        this.set("queryParams.nodeId", newValue.id);
        this.notifyPath("queryParams.nodeId"); // if published, keep it static on request
        // @todo might revisit this in the future

        if (this.editorBuilder && this.editorBuilder.getContext() === "published") {
          this._timeStamp = "";
        } else {
          this._timeStamp = "?" + Math.floor(Date.now() / 1000);
        }

        this.$.activecontent.generateRequest();
      } // we had something, now we don't. wipe out the content area of the theme
      else if (oldValue && !newValue) {
          // fire event w/ nothing, this is because there is no content
          this.dispatchEvent(new CustomEvent("json-outline-schema-active-body-changed", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: null
          }));
        }
    }
    /**
     * got a message that we need to update our json manifest data
     */


    _triggerUpdatedData(e) {
      // get fresh data if not published
      if (this.editorBuilder && this.editorBuilder.getContext() !== "published") {
        this._timeStamp = "?" + Math.floor(Date.now() / 1000);
      }

      this.$.manifest.generateRequest();
    }
    /**
     * got a message that we need to update our page content
     */


    _triggerUpdatedNode(e) {
      // get fresh data if not published
      if (this.editorBuilder && this.editorBuilder.getContext() !== "published" && this.editorBuilder.getContext() !== "demo") {
        this._timeStamp = "?" + Math.floor(Date.now() / 1000);
      } // ensure we don't get a miss on initial load


      if (this.activeItem.location) {
        this.$.activecontent.generateRequest();
      }
    }
    /**
     * File changed so let's pull from the location
     */


    _fileChanged(newValue, oldValue) {
      if (typeof newValue !== typeof undefined) {
        this.$.manifest.generateRequest();
      }
    }
    /**
     * notice manifest changes and ensure slot is rebuilt.
     */


    _manifestChanged(newValue, oldValue) {
      if (newValue && newValue.metadata && newValue.items) {
        // ensure there's a dynamicELementLoader defined
        // @todo this could also be a place to mix in criticals
        // that are system required yet we lazy load like grid-plate
        if (!newValue.metadata.dynamicElementLoader) {
          newValue.metadata.dynamicElementLoader = {
            "a11y-gif-player": "@lrnwebcomponents/a11y-gif-player/a11y-gif-player.js",
            "citation-element": "@lrnwebcomponents/citation-element/citation-element.js",
            "hero-banner": "@lrnwebcomponents/hero-banner/hero-banner.js",
            "image-compare-slider": "@lrnwebcomponents/image-compare-slider/image-compare-slider.js",
            "license-element": "@lrnwebcomponents/license-element/license-element.js",
            "lrn-aside": "@lrnwebcomponents/lrn-aside/lrn-aside.js",
            "lrn-calendar": "@lrnwebcomponents/lrn-calendar/lrn-calendar.js",
            "lrn-math": "@lrnwebcomponents/lrn-math/lrn-math.js",
            "lrn-table": "@lrnwebcomponents/lrn-table/lrn-table.js",
            "lrn-vocab": "@lrnwebcomponents/lrn-vocab/lrn-vocab.js",
            "lrndesign-blockquote": "@lrnwebcomponents/lrndesign-blockquote/lrndesign-blockquote.js",
            "magazine-cover": "@lrnwebcomponents/magazine-cover/magazine-cover.js",
            "media-behaviors": "@lrnwebcomponents/media-behaviors/media-behaviors.js",
            "media-image": "@lrnwebcomponents/media-image/media-image.js",
            "meme-maker": "@lrnwebcomponents/meme-maker/meme-maker.js",
            "multiple-choice": "@lrnwebcomponents/multiple-choice/multiple-choice.js",
            "paper-audio-player": "@lrnwebcomponents/paper-audio-player/paper-audio-player.js",
            "person-testimonial": "@lrnwebcomponents/person-testimonial/person-testimonial.js",
            "place-holder": "@lrnwebcomponents/place-holder/place-holder.js",
            "q-r": "@lrnwebcomponents/q-r/q-r.js",
            "full-width-image": "@lrnwebcomponents/full-width-image/full-width-image.js",
            "self-check": "@lrnwebcomponents/self-check/self-check.js",
            "simple-concept-network": "@lrnwebcomponents/simple-concept-network/simple-concept-network.js",
            "stop-note": "@lrnwebcomponents/stop-note/stop-note.js",
            "tab-list": "@lrnwebcomponents/tab-list/tab-list.js",
            "task-list": "@lrnwebcomponents/task-list/task-list.js",
            "video-player": "@lrnwebcomponents/video-player/video-player.js",
            "wave-player": "@lrnwebcomponents/wave-player/wave-player.js",
            "wikipedia-query": "@lrnwebcomponents/wikipedia-query/wikipedia-query.js"
          };
        }

        _haxcmsSiteStore.store.manifest = newValue;
        this.dispatchEvent(new CustomEvent("json-outline-schema-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: newValue
        }));
      }
    }
    /**
     * notice theme changes and ensure slot is rebuilt.
     */


    _themeChanged(newValue, oldValue) {
      if (newValue && oldValue) {
        if (_haxcmsSiteStore.store.cmsSiteEditor && _haxcmsSiteStore.store.cmsSiteEditor.instance && typeof _haxcmsSiteStore.store.cmsSiteEditor.instance.haxCmsSiteEditorElement !== typeof undefined) {
          _haxcmsSiteStore.store.cmsSiteEditor.instance.appendChild(_haxcmsSiteStore.store.cmsSiteEditor.instance.haxCmsSiteEditorElement);
        }
      }

      if (newValue) {
        this.themeLoaded = false;
        let theme = newValue; // wipe out what we got

        (0, _haxutils.wipeSlot)(this, "*"); // create the 'theme' as a new element

        this.themeElement = document.createElement(theme.element); // weird but definition already here so we should be able
        // to just use this without an import, it's possible..

        if (typeof this.__imported[theme.element] !== typeof undefined) {
          (0, _polymerDom.dom)(this).appendChild(this.themeElement);
          this.themeLoaded = true;
        } else {
          // import the reference to the item dynamically, if we can
          try {
            new Promise((res, rej) => _require.default([(0, _resolveUrl.pathFromUrl)(decodeURIComponent(meta.url)) + "../../../../" + newValue.path], res, rej)).then(e => {
              // add it into ourselves so it unpacks and we kick this off!
              (0, _polymerDom.dom)(this).appendChild(this.themeElement);
              this.__imported[theme.element] = theme.element;
              this.themeLoaded = true;
            });
          } catch (err) {
            // error in the event this is a double registration
            // also strange to be able to reach this but technically possible
            (0, _polymerDom.dom)(this).appendChild(this.themeElement);
            this.themeLoaded = true;
          }
        } // delay for theme switching to reapply the css variable associations


        setTimeout(() => {
          (0, _elementMixin.updateStyles)();
        }, 500);
      }
    }

  }

  _exports.HAXCMSSiteBuilder = HAXCMSSiteBuilder;
  window.customElements.define(HAXCMSSiteBuilder.tag, HAXCMSSiteBuilder);
});