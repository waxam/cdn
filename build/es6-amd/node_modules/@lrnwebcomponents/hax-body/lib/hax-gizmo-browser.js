define(["exports","require","../../../lit-element/lit-element.js","../../grafitto-filter/grafitto-filter.js","../../utils/utils.js"],(function(_exports,_require,_litElement,_grafittoFilter,_utils){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxGizmoBrowser=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HaxGizmoBrowser extends((0,_utils.winEventsElement)(_litElement.LitElement)){static get styles(){return[_litElement.css`
        :host {
          display: block;
        }
        hax-gizmo-browser-item {
          margin: 5px;
          transition: 0.2s all linear;
          display: inline-flex;
        }
        #ironlist {
          min-height: 50vh;
          margin: 0;
          padding: 16px;
        }
        .title {
          position: relative;
          padding: 16px;
          outline: 0;
          font-weight: 600;
          text-align: left;
          margin: 0;
          font-size: 18px;
          line-height: 18px;
          font-family: "Noto Serif", serif;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
        }
        .toolbar-inner {
          display: inline-flex;
          padding: 10px;
        }
      `]}constructor(){super(),this.__winEvents={"hax-store-property-updated":"_haxStorePropertyUpdated"},this.title="Create page element",this.__gizmoList=[],this.filtered=[],new Promise((res,rej)=>_require.default(["../../../@polymer/paper-input/paper-input.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../dropdown-select/dropdown-select.js"],res,rej)),new Promise((res,rej)=>_require.default(["./hax-gizmo-browser-item.js"],res,rej))}render(){return _litElement.html`
      <h3 class="title">
        <iron-icon icon="hax:add-brick"></iron-icon> ${this.title}
      </h3>
      <div class="toolbar-inner">
        <dropdown-select
          id="filtertype"
          label="Filter by"
          value="title"
          @change="${this.filtertypeChange}"
        >
          <paper-item value="title">Title</paper-item>
        </dropdown-select>
        <paper-input
          label="Filter"
          id="inputfilter"
          aria-controls="filter"
          @value-changed="${this.inputfilterChanged}"
          value=""
          always-float-label=""
        ></paper-input>
      </div>
      <grafitto-filter
        id="filter"
        .items="${this.__gizmoList}"
        like=""
        where="title"
        like=""
        @filtered-changed="${this.filteredChanged}"
        ><template></template
      ></grafitto-filter>
      ${this.filtered.map(gizmo=>_litElement.html`
          <hax-gizmo-browser-item
            .index="${gizmo.index}"
            .title="${gizmo.title}"
            tag-to-insert="${gizmo.tag}"
            .icon="${gizmo.icon}"
            color="${gizmo.color}"
            .author="${gizmo.author}"
            .teaser="${gizmo.teaser}"
            .description="${gizmo.description}"
            .examples="${gizmo.examples}"
            .status="${gizmo.status}"
          ></hax-gizmo-browser-item>
        `)}
    `}static get tag(){return"hax-gizmo-browser"}static get properties(){return{title:{type:String},filtered:{type:Array},__gizmoList:{type:Array}}}filteredChanged(e){this.filtered=[...e.detail.value]}inputfilterChanged(e){this.shadowRoot.querySelector("#filter").like=e.target.value}filtertypeChange(e){this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filter").where=e.detail.value,this.shadowRoot.querySelector("#filter").like=""}firstUpdated(changedProperties){this.resetBrowser()}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"activeApp"==propName&&this._activeAppChanged(this[propName],oldValue)})}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&(this[e.detail.property]=e.detail.value)}resetBrowser(){this.__gizmoList=window.HaxStore.instance.gizmoList,this.filtered=this.__gizmoList,this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filtertype").value="title",this.shadowRoot.querySelector("#filter").value="",this.shadowRoot.querySelector("#filter").filter(),this.shadowRoot.querySelector("#filter").where="title",this.shadowRoot.querySelector("#filter").like=""}}_exports.HaxGizmoBrowser=HaxGizmoBrowser,window.customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser)}));