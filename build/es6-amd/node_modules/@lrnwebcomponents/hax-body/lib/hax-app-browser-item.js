define(["exports","require","../../../lit-element/lit-element.js","../../simple-colors/simple-colors.js"],function(_exports,_require,_litElement,_simpleColors){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HAXAppBrowserItem=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HAXAppBrowserItem extends _litElement.LitElement{static get tag(){return"hax-app-browser-item"}static get properties(){return{title:{type:String},index:{type:Number},icon:{type:String},image:{type:String,value:!1},color:{type:String},hexColor:{type:String,attribute:"hex-color"},author:{type:String},description:{type:String},examples:{type:Array},status:{type:Array},elevation:{type:Number,reflect:!0}}}constructor(){super(),this.elevation=1,new Promise((res,rej)=>_require.default(["../../../@polymer/paper-button/paper-button.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icon/iron-icon.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-image/iron-image.js"],res,rej))}static get styles(){return[_litElement.css`
        :host {
          display: block;
        }
        :host([elevation="1"]) {
          -webkit-transform: scale(1, 1);
          transform: scale(1, 1);
        }
        :host([elevation="2"]) {
          -webkit-transform: scale(1.4, 1.4);
          transform: scale(1.4, 1.4);
        }
        paper-button {
          color: var(--hax-color-text);
          text-transform: none;
          background-color: var(--hax-color-bg-accent);
          min-width: unset;
          cursor: pointer;
          display: flex;
          width: 50px;
          height: 50px;
          padding: 5px;
          margin: 10px;
          color: #ffffff;
          border-radius: 50%;
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
          -webkit-transition: box-shadow 0.3s;
          -moz-transition: box-shadow 0.3s;
          -ms-transition: box-shadow 0.3s;
          -o-transition: box-shadow 0.3s;
          transition: box-shadow 0.3s;
        }
        paper-button:hover,
        paper-button:focus {
          box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.14),
            0 2px 10px 0 rgba(0, 0, 0, 0.12), 0 6px 2px -4px rgba(0, 0, 0, 0.2);
        }
        paper-button:active {
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
        }
        paper-button iron-icon {
          height: 32px;
          width: 32px;
          color: var(--simple-colors-default-theme-grey-1);
          display: inline-block;
        }
        .item-title {
          margin-top: 8px;
          color: var(--hax-color-text);
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          font-size: 12px;
          line-height: 12px;
          height: 12px;
          text-align: center;
        }
        .button-inner {
          display: flex;
        }
        .flip-icon {
          transform: rotateY(180deg);
        }
      `]}render(){return _litElement.html`
      <paper-button
        data-voicecommand="select ${this.title}"
        title="${this.title}"
        style="background-color:${this.hexColor};"
      >
        <div class="button-inner">
          <iron-icon icon="${this.icon}" hidden="${!this.icon}"></iron-icon>
          <iron-image
            src="${this.image}"
            preload=""
            sizing="cover"
            hidden="${!this.image}"
          ></iron-image>
        </div>
      </paper-button>
      <div class="item-title" aria-hidden="true">${this.title}</div>
    `}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this._fireEvent),this.addEventListener("mousedown",this.tapEventOn),this.addEventListener("mouseover",this.tapEventOn),this.addEventListener("mouseout",this.tapEventOff),this.addEventListener("focusin",this.tapEventOn),this.addEventListener("focusout",this.tapEventOff)}tapEventOn(e){this.elevation=2}tapEventOff(e){this.elevation=1}_getHexColor(color){let name=color.replace("-text",""),tmp=new _simpleColors.SimpleColors;return tmp.colors[name]?tmp.colors[name][6]:"#000000"}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"color"===propName&&(this.hexColor=this._getHexColor(this.color))})}_fireEvent(e){this.dispatchEvent(new CustomEvent("hax-app-selected",{bubbles:!0,cancelable:!0,composed:!0,detail:this.index}))}}_exports.HAXAppBrowserItem=HAXAppBrowserItem,customElements.define(HAXAppBrowserItem.tag,HAXAppBrowserItem)});