define(["exports","require","../../../lit-element/lit-element.js","../../grafitto-filter/grafitto-filter.js","../../utils/utils.js"],function(_exports,_require,_litElement,_grafittoFilter,_utils){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxAppBrowser=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HaxAppBrowser extends((0,_utils.winEventsElement)(_litElement.LitElement)){static get styles(){return[_litElement.css`
        :host {
          display: block;
        }
        :host *[hidden] {
          display: none;
        }
        hax-app-browser-item {
          margin: 8px;
          -webkit-transition: 0.3s all linear;
          transition: 0.3s all linear;
          display: inline-flex;
        }
        .title {
          position: relative;
          padding: 16px;
          outline: 0;
          font-weight: 600;
          text-align: left;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg);
          font-size: 18px;
          line-height: 18px;
          font-family: "Noto Serif", serif;
          color: var(--hax-color-menu-heading-color);
        }
        grafitto-filter {
          color: black;
        }
        .toolbar-inner {
          display: inline-flex;
          padding: 0 16px;
        }
      `]}constructor(){super(),this.__winEvents={"hax-app-selected":"_appSelected","hax-store-property-updated":"_haxStorePropertyUpdated"},this.title="Search for media",this.searching=!1,this.activeApp=null,this.appList=[],this.filtered=[],this.hasActive=!1,new Promise((res,rej)=>_require.default(["../../../@polymer/paper-input/paper-input.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-item/paper-item.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../dropdown-select/dropdown-select.js"],res,rej)),new Promise((res,rej)=>_require.default(["./hax-app-browser-item.js"],res,rej)),new Promise((res,rej)=>_require.default(["./hax-app-search.js"],res,rej))}render(){return _litElement.html`
      <h3 class="title"><iron-icon icon="search"></iron-icon> ${this.title}</h3>
      <div class="toolbar-inner">
        <dropdown-select
          id="filtertype"
          label="Filter by"
          value="details.title"
          @change="${this.filtertypeChange}"
        >
          <paper-item value="details.title">Title</paper-item>
        </dropdown-select>
        <paper-input
          label="Filter"
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          value=""
          always-float-label=""
        ></paper-input>
      </div>
      <grafitto-filter
        id="filter"
        .items="${this.appList}"
        like=""
        @filtered-changed="${this.filteredChanged}"
        where="details.title"
        ><template></template
      ></grafitto-filter>
      ${this.filtered.map(app=>_litElement.html`
          <hax-app-browser-item
            index="${app.index}"
            title="${app.details.title}"
            icon="${app.details.icon}"
            image="${app.details.tag}"
            color="${app.details.color}"
            meta="${app.details.meta}"
            groups="${app.details.groups}"
            handles="${app.details.handles}"
            description="${app.details.description}"
            rating="${app.details.rating}"
            tags="${app.details.tags}"
          ></hax-app-browser-item>
        `)}
      <hax-app-search
        id="haxappsearch"
        .hidden="${!this.searching}"
      ></hax-app-search>
      <slot></slot>
    `}static get tag(){return"hax-app-browser"}static get properties(){return{search:{type:String},title:{type:String},searching:{type:Boolean,reflect:!0},activeApp:{type:Object},hasActive:{reflect:!0,type:Boolean,attribute:"has-active"},filtered:{type:Array},appList:{type:Array}}}filteredChanged(e){this.filtered=[...e.detail.value]}inputfilterChanged(e){this.shadowRoot.querySelector("#filter").like=e.target.value}filtertypeChange(e){this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filter").where=e.detail.value,this.shadowRoot.querySelector("#filter").like=""}firstUpdated(changedProperties){this.resetBrowser()}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"activeApp"==propName&&this._activeAppChanged(this[propName],oldValue)})}_appSelected(e){void 0!==e.detail&&(this.__activeApp=e.detail,this.searching=!0,window.HaxStore.write("activeApp",this.appList[e.detail],this))}_activeAppChanged(newValue,oldValue){void 0!==oldValue&&null!=newValue?(window.HaxStore.instance.haxManager.searching=!0,this.hasActive=!0):this.hasActive=!1}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&(this[e.detail.property]=e.detail.value)}resetBrowser(){this.searching=!1,this.appList=[...window.HaxStore.instance.appList],this.filtered=this.appList,this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filtertype").value="details.title",this.shadowRoot.querySelector("#filter").value="",this.shadowRoot.querySelector("#filter").filter(),this.shadowRoot.querySelector("#filter").where="details.title",this.shadowRoot.querySelector("#filter").like=""}}_exports.HaxAppBrowser=HaxAppBrowser,window.customElements.define(HaxAppBrowser.tag,HaxAppBrowser)});