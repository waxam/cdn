define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","../../simple-colors/simple-colors.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_renderStatus,_simpleColors,_haxSharedStyles){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxGizmoBrowserItem=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HaxGizmoBrowserItem extends _polymerElement.PolymerElement{constructor(){super(),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-button/paper-button.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/iron-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/editor-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/device-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/hardware-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/communication-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/social-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/av-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/maps-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/places-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-image/iron-image.js"],res,rej)),(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("mousedown",this.tapEventOn.bind(this)),this.addEventListener("mouseover",this.tapEventOn.bind(this)),this.addEventListener("mouseout",this.tapEventOff.bind(this)),this.addEventListener("focusin",this.tapEventOn.bind(this)),this.addEventListener("focusout",this.tapEventOff.bind(this))})}static get template(){return _polymerElement.html`
      <style include="hax-shared-styles">
        :host {
          display: block;
        }
        :host([elevation="1"]) {
          -webkit-transform: scale(1, 1);
          transform: scale(1, 1);
        }
        :host([elevation="2"]) {
          -webkit-transform: scale(1.4, 1.4);
          transform: scale(1.4, 1.4);
        }
        paper-button {
          color: var(--hax-color-text);
          text-transform: none;
          background-color: var(--hax-color-bg-accent);
          min-width: unset;
          cursor: pointer;
          display: flex;
          width: 50px;
          height: 50px;
          padding: 5px;
          margin: 10px;
          color: #ffffff;
          border-radius: 50%;
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
          -webkit-transition: box-shadow 0.3s;
          -moz-transition: box-shadow 0.3s;
          -ms-transition: box-shadow 0.3s;
          -o-transition: box-shadow 0.3s;
          transition: box-shadow 0.3s;
        }
        paper-button:hover,
        paper-button:focus {
          box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.14),
            0 2px 10px 0 rgba(0, 0, 0, 0.12), 0 6px 2px -4px rgba(0, 0, 0, 0.2);
        }
        paper-button:active {
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
        }
        paper-button iron-icon {
          height: 32px;
          width: 32px;
          color: var(--simple-colors-default-theme-grey-1);
          display: inline-block;
        }
        .item-title {
          margin-top: 8px;
          color: var(--hax-color-text);
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          font-size: 12px;
          line-height: 12px;
          height: 12px;
          text-align: center;
        }
        .button-inner {
          display: flex;
        }
        .flip-icon {
          transform: rotateY(180deg);
        }
      </style>
      <paper-button
        on-click="_fireEvent"
        data-voicecommand$="select [[title]]"
        title="[[title]]"
        style$="background-color:[[hexColor]];"
      >
        <div class="button-inner">
          <iron-icon icon="[[icon]]" hidden$="[[!icon]]"></iron-icon>
          <iron-image
            src="[[image]]"
            preload
            sizing="cover"
            hidden$="[[!image]]"
          ></iron-image>
        </div>
      </paper-button>
      <div class="item-title" aria-hidden="true">[[title]]</div>
    `}static get tag(){return"hax-gizmo-browser-item"}static get properties(){return{title:{type:String},index:{type:Number},icon:{type:String},image:{type:String,value:!1},color:{type:String},hexColor:{type:String,computed:"_getHexColor(color)"},author:{type:String},description:{type:String},examples:{type:Array},status:{type:Array},tagToInsert:{type:String},elevation:{type:Number,value:1,reflectToAttribute:!0}}}_getHexColor(color){let name=color.replace("-text",""),tmp=new _simpleColors.SimpleColors;return tmp.colors[name]?tmp.colors[name][6]:"#000000"}tapEventOn(e){this.elevation=2}tapEventOff(e){this.elevation=1}_fireEvent(e){let gizmo={tag:this.tagToInsert},element=window.HaxStore.haxElementPrototype(gizmo);window.HaxStore.write("activeHaxElement",element,this)}}_exports.HaxGizmoBrowserItem=HaxGizmoBrowserItem,window.customElements.define(HaxGizmoBrowserItem.tag,HaxGizmoBrowserItem)});