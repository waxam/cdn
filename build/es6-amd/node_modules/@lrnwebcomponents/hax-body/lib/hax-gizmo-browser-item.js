define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","./hax-item-button-inner.js"],function(_exports,_polymerElement,_renderStatus,_haxItemButtonInner){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxGizmoBrowserItem=void 0;class HaxGizmoBrowserItem extends _polymerElement.PolymerElement{constructor(){super(),(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("mousedown",this.tapEventOn.bind(this)),this.addEventListener("mouseover",this.tapEventOn.bind(this)),this.addEventListener("mouseout",this.tapEventOff.bind(this)),this.addEventListener("focusin",this.tapEventOn.bind(this)),this.addEventListener("focusout",this.tapEventOff.bind(this))})}static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
          max-width: 100px;
        }
        :host([elevation="1"]) {
          -webkit-transform: scale(1, 1);
          transform: scale(1, 1);
        }
        :host([elevation="2"]) {
          -webkit-transform: scale(1.4, 1.4);
          transform: scale(1.4, 1.4);
        }
        paper-button {
          color: black;
          text-transform: none;
          min-width: unset;
          cursor: pointer;
          width: 80px;
          padding: 10px;
          margin: 10px;
          box-shadow: none;
          --paper-button-ink-color: var(--hax-ink-color, black);
        }
      </style>
      <paper-button on-click="_fireEvent" data-voicecommand$="select [[title]]">
        <hax-item-button-inner
          color="[[color]]"
          icon="[[icon]]"
          image="[[image]]"
          label="[[title]]"
        >
        </hax-item-button-inner>
      </paper-button>
    `}static get tag(){return"hax-gizmo-browser-item"}static get properties(){return{title:{type:String},index:{type:Number},icon:{type:String},image:{type:String,value:!1},color:{type:String},author:{type:String},description:{type:String},examples:{type:Array},status:{type:Array},tagToInsert:{type:String},elevation:{type:Number,value:1,reflectToAttribute:!0}}}tapEventOn(e){this.elevation=2}tapEventOff(e){this.elevation=1}_fireEvent(e){let gizmo={tag:this.tagToInsert},element=window.HaxStore.haxElementPrototype(gizmo);window.HaxStore.write("activeHaxElement",element,this)}}_exports.HaxGizmoBrowserItem=HaxGizmoBrowserItem,window.customElements.define(HaxGizmoBrowserItem.tag,HaxGizmoBrowserItem)});