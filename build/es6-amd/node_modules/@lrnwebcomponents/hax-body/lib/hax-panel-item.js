define(["exports","require","../../../lit-element/lit-element.js"],function(_exports,_require,_litElement){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HAXPanelItem=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HAXPanelItem extends _litElement.LitElement{constructor(){super(),this.disabled=!1,this.edged="",this.icon="editor:text-fields",this.label="editor:text-fields",this.eventName="button",this.value="",new Promise((res,rej)=>_require.default(["../../../@polymer/paper-button/paper-button.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-tooltip/paper-tooltip.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icon/iron-icon.js"],res,rej))}static get properties(){return{light:{type:Boolean,reflect:!0},voiceCommand:{type:String,attribute:"voice-command"},disabled:{type:Boolean},edged:{type:String,reflect:!0},icon:{type:String,reflect:!0},label:{type:String,reflect:!0},eventName:{type:String,reflect:!0,attribute:"event-name"},value:{type:String,reflect:!0}}}static get tag(){return"hax-panel-item"}static get styles(){return[_litElement.css`
        :host {
          display: inline-flex;
        }
        paper-button {
          height: 48px;
          line-height: 48px;
          width: 48px;
          overflow: hidden;
          margin: 0;
          text-transform: none;
          background-color: var(--hax-color-bg-accent);
          color: var(--hax-color-accent-text);
          display: flex;
          padding: 8px;
          border-radius: 50%;
          border: 1px solid var(--hax-color-bg-accent);
          min-width: unset;
          --paper-button-ink-color: var(--hax-color-accent1);
        }
        paper-button .button-inner {
          text-align: center;
          margin: 0 auto;
        }
        paper-button iron-icon {
          height: 24px;
          width: 24px;
          display: inline-flex;
        }
        paper-button:hover,
        paper-button:focus {
          color: var(--hax-color-text-active);
          border: 1px solid var(--hax-color-accent1);
        }

        paper-button[disabled] {
          opacity: 0.5;
        }
        .flip-icon {
          transform: rotateY(180deg);
        }
        :host([dark]) paper-button {
          border: solid 2px #000000;
          background-color: #000000 !important;
          color: var(--hax-color-bg-accent);
        }
        :host([large]) paper-button {
          height: 40px;
          width: 40px;
        }
        :host([dark]) paper-button:hover iron-icon,
        :host([dark]) paper-button:focus iron-icon {
          color: #ffffff !important;
        }
        :host([dark]) paper-button:hover {
          border: solid #0085ba 1px;
        }
        paper-tooltip {
          --paper-tooltip-background: #000000;
          --paper-tooltip-opacity: 1;
          --paper-tooltip-text-color: #ffffff;
          --paper-tooltip-delay-in: 0;
          --paper-tooltip: {
            border-radius: 0;
          }
        }
      `]}render(){return _litElement.html`
      <paper-button raised id="button" .disabled="${this.disabled}">
        <div class="button-inner">
          <iron-icon icon="${this.icon}"></iron-icon>
        </div>
      </paper-button>
      <paper-tooltip
        animation-delay="0"
        for="button"
        position="bottom"
        offset="10"
      >
        ${this.label}
      </paper-tooltip>
    `}connectedCallback(){super.connectedCallback(),this.addEventListener("click",this._fireEvent)}_fireEvent(e){this.dispatchEvent(new CustomEvent("hax-item-selected",{bubbles:!0,cancelable:!1,composed:!0,detail:{target:this,value:this.value,eventName:this.eventName}}))}}_exports.HAXPanelItem=HAXPanelItem,customElements.define(HAXPanelItem.tag,HAXPanelItem)});