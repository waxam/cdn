define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/polymer/lib/elements/dom-repeat.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_renderStatus,_polymerDom,_domRepeat,_haxSharedStyles){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxAppPicker=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HaxAppPicker extends _polymerElement.PolymerElement{constructor(){super(),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-button/paper-button.js"],res,rej)),new Promise((res,rej)=>_require.default(["./hax-app-picker-item.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icon/iron-icon.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/iron-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-dialog/paper-dialog.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js"],res,rej))}static get template(){return _polymerElement.html`
      <style include="hax-shared-styles">
        :host {
          display: block;
        }
        iron-icon:not(:defined),
        paper-button:not(:defined),
        paper-dialog:not(:defined) {
          display: none;
        }
        hax-app-picker-item {
          -webkit-transition: 0.3s all linear;
          transition: 0.3s all linear;
          display: inline-flex;
        }
        #closedialog {
          float: right;
          top: 15px;
          right: 0;
          position: absolute;
          padding: 8px;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          background-color: transparent;
          width: 40px;
          height: 40px;
          min-width: unset;
        }
        #ironlist {
          width: 100%;
          min-height: 400px;
          padding-bottom: 50px;
        }
        .repeat-item {
          display: inline-flex;
        }
        #dialog {
          min-width: 400px;
          min-height: 400px;
          max-height: 60vh;
          max-width: 50vw;
          overflow: hidden;
          border-radius: 16px;
          z-index: 1000000;
          border: 2px solid var(--hax-color-border-outline);
          @apply --hax-app-picker-dialog;
          background-color: #ffffff;
        }
        #buttonlist {
          display: block;
          text-align: left;
          margin: 0px;
          overflow-x: hidden;
          overflow-y: auto;
          min-height: 400px;
        }
        #title,
        .element-button > div {
          color: var(--hax-color-menu-heading-color, black);
        }
        #title {
          padding: 16px;
          border-bottom: 2px solid var(--hax-color-border-outline);
          margin: 0;
          width: calc(100% - 32px);
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          @apply --paper-font-title;
          @apply --hax-app-picker-dialog-title;
        }
        .scroll-wrap {
          margin-bottom: 64px;
          min-height: 200px;
        }
        .element-button {
          display: inline-block;
          width: 70px;
          margin: 8px 4px;
          text-align: center;
        }
      </style>
      <paper-dialog id="dialog">
        <h3 id="title">[[title]]</h3>
        <paper-dialog-scrollable id="buttonlist">
          <div class="scroll-wrap">
            <template
              is="dom-repeat"
              id="ironlist"
              items="[[selectionList]]"
              as="element"
            >
              <div class="repeat-item">
                <hax-app-picker-item
                  id$="picker-item-[[index]]"
                  class="element-button"
                  on-click="_selected"
                  data-selected\$="[[index]]"
                  label="[[element.title]]"
                  icon="[[element.icon]]"
                  color="[[element.color]]"
                ></hax-app-picker-item>
              </div>
            </template>
          </div>
        </paper-dialog-scrollable>
        <paper-button id="closedialog" on-click="close">
          <iron-icon icon="icons:cancel" title="Close dialog"></iron-icon>
        </paper-button>
      </paper-dialog>
    `}static get tag(){return"hax-app-picker"}static get properties(){return{_elements:{type:Array,value:[]},selectionList:{type:Array,value:[]},title:{type:String,value:"Pick an options"},pickerType:{type:String,value:"gizmo"},opened:{type:Boolean,value:!1,observer:"_openedChanged"}}}ready(){super.ready(),this.dispatchEvent(new CustomEvent("hax-register-app-picker",{bubbles:!0,cancelable:!0,composed:!0,detail:this})),(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("iron-overlay-canceled",this.close.bind(this)),this.addEventListener("iron-overlay-closed",this.close.bind(this))})}close(){this.opened=!1}_openedChanged(newValue,oldValue){newValue?(this.shadowRoot.querySelector("#dialog").open(),document.body.style.overflow="hidden"):(this.shadowRoot.querySelector("#dialog").close&&this.shadowRoot.querySelector("#dialog").close(),document.body.style.overflow=null)}presentOptions(elements,type="element",title="Select an option",pickerType="gizmo"){this.title=title,this.pickerType=pickerType;var tmp=[];switch(pickerType){case"gizmo":for(var i in elements)elements[i].__type=type,tmp[i]={icon:elements[i].gizmo.icon,title:elements[i].gizmo.title,color:elements[i].gizmo.color};break;case"app":for(var i in elements)tmp[i]={icon:elements[i].details.icon,title:elements[i].details.title,color:elements[i].details.color};break;default:tmp=elements}this._elements=elements,this.set("selectionList",[]),this.set("selectionList",tmp),this.opened=!0,setTimeout(()=>{this.shadowRoot.querySelector("#picker-item-0").focus()},100)}_selected(e){let key=(0,_polymerDom.dom)(e).localTarget.getAttribute("data-selected");e.preventDefault(),e.stopPropagation(),void 0!==this._elements[key]&&("gizmo"==this.pickerType?(window.HaxStore.write("activeHaxElement",this._elements[key],this),"__convert"===this._elements[key].__type&&(window.HaxStore.instance.haxManager.editExistingNode=!0),window.HaxStore.instance.haxManager.selectStep("configure"),window.HaxStore.instance.haxManager.open()):"delete"==this.pickerType?"Yes"===this._elements[key].title&&(window.HaxStore.instance.activeHaxBody.activeNode!==window.HaxStore.instance.activeHaxBody.activeContainerNode?window.HaxStore.instance.activeHaxBody.haxDeleteNode(window.HaxStore.instance.activeHaxBody.activeNode,window.HaxStore.instance.activeHaxBody.activeContainerNode):window.HaxStore.instance.activeHaxBody.haxDeleteNode(window.HaxStore.instance.activeHaxBody.activeNode),window.HaxStore.toast("Element deleted",2e3)):this.dispatchEvent(new CustomEvent("hax-app-picker-selection",{bubbles:!0,cancelable:!0,composed:!0,detail:this._elements[key]}))),this.opened=!1}}_exports.HaxAppPicker=HaxAppPicker,window.customElements.define(HaxAppPicker.tag,HaxAppPicker)});