define(["exports","meta","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/async.js","../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js","../../../@polymer/polymer/lib/utils/resolve-url.js","../../hax-body-behaviors/hax-body-behaviors.js"],function(_exports,meta,_require,_polymerElement,async,_flattenedNodesObserver,_resolveUrl,_haxBodyBehaviors){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxAutoloader=void 0;meta=babelHelpers.interopRequireWildcard(meta);_require=babelHelpers.interopRequireWildcard(_require);async=babelHelpers.interopRequireWildcard(async);/**
 * `hax-autoloader`
 * `Automatically load elements based on the most logical location with future fallback support for CDNs.`
 * @microcopy - the mental model for this element
 * - hax-autoloader - autoloading of custom element imports which can then emmit events as needed
 */class HaxAutoloader extends(0,_haxBodyBehaviors.HAXElement)(_polymerElement.PolymerElement){static get template(){return _polymerElement.html`
      <style>
        :host {
          display: none;
        }
      </style>
      <slot></slot>
    `}static get tag(){return"hax-autoloader"}static get properties(){return{/**
       * List of elements processed so we don't double process
       */processedList:{type:Object,value:{}}}}/**
   * Attached to the DOM, now fire that we exist.
   */ready(){super.ready();// fire an event that this is the manager
this.dispatchEvent(new CustomEvent("hax-register-autoloader",{bubbles:!0,cancelable:!0,composed:!0,detail:this}));// notice elements when they update
this._observer=new _flattenedNodesObserver.FlattenedNodesObserver(this,info=>{// if we've got new nodes, we have to react to that
if(0<info.addedNodes.length){async.microTask.run(()=>{this.processNewElements(info.addedNodes)})}})}/**
   * Process new elements
   */processNewElements(e){// when new nodes show up in the slots then fire the needed pieces
let effectiveChildren=_flattenedNodesObserver.FlattenedNodesObserver.getFlattenedNodes(this).filter(n=>n.nodeType===Node.ELEMENT_NODE);for(var i=0;i<effectiveChildren.length;i++){// strip invalid tags / textnodes
if(typeof effectiveChildren[i].tagName!==typeof void 0&&typeof this.processedList[effectiveChildren[i].tagName]===typeof void 0){// attempt a dynamic import with graceful failure / fallback
try{let name=effectiveChildren[i].tagName.toLowerCase();// see if we already have this definition
if("function"===typeof effectiveChildren[i].getHaxProperties){const evt=new CustomEvent("hax-register-properties",{bubbles:!0,composed:!0,cancelable:!0,detail:{tag:name,properties:effectiveChildren[i].getHaxProperties(),polymer:!0}});context.dispatchEvent(evt)}else if("function"===typeof effectiveChildren[i].HAXWiring){const evt=new CustomEvent("hax-register-properties",{bubbles:!0,cancelable:!0,composed:!0,detail:{tag:name,properties:effectiveChildren[i].HAXWiring.getHaxProperties(),polymer:!1}});context.dispatchEvent(evt)}else{// @todo support CDN failover or a flag of some kind to ensure
// this delivers locally or from remote
// @todo need to support name spacing of packages so that we
// don't assume they are all relative to lrnwebcomponents
const basePath=(0,_resolveUrl.pathFromUrl)(decodeURIComponent(meta.url));new Promise((res,rej)=>_require.default([`${basePath}../../${name}/${name}.js`],res,rej)).then(response=>{// get the custom element definition we used to add that file
let CEClass=window.customElements.get(name);if("function"===typeof CEClass.getHaxProperties){this.setHaxProperties(CEClass.getHaxProperties(),name)}else if("function"===typeof CEClass.HAXWiring){this.setHaxProperties(CEClass.HAXWiring.getHaxProperties(),name)}else if(CEClass.haxProperties){this.setHaxProperties(CEClass.haxProperties,name)}else{console.log(`${name} didn't have hax wiring in the end`)}}).catch(error=>{/* Error handling */console.log(error)})}this.processedList[name]=name}catch(err){// error in the event this is a double registration
}}}}}_exports.HaxAutoloader=HaxAutoloader;window.customElements.define(HaxAutoloader.tag,HaxAutoloader)});