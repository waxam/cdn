define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../simple-colors/lib/simple-colors-picker.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_polymerDom,_simpleColorsPicker,_haxSharedStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxCeContext=void 0;_require=babelHelpers.interopRequireWildcard(_require);/**
 * `hax-ce-context`
 * `A context menu that provides common custom-element based authoring options. While
 * trying to call for haxProperties which can automatically generate the buttons
 * required for populating input.`
 * @microcopy - the mental model for this element
 * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
 */class HaxCeContext extends _polymerElement.PolymerElement{constructor(){super();new Promise((res,rej)=>_require.default(["./hax-context-item.js"],res,rej));new Promise((res,rej)=>_require.default(["./hax-toolbar.js"],res,rej))}static get template(){return _polymerElement.html`
      <style includes="hax-shared-styles">
        :host *[hidden] {
          display: none;
        }
        :host {
          display: block;
          height: 36px;
        }
        hax-context-item {
          margin: 0;
          height: 36px;
        }
        :host(.hax-context-pin-top) hax-toolbar {
          position: fixed;
          top: 64px;
          opacity: 0.9;
        }
        :host(.hax-context-pin-bottom) hax-toolbar {
          position: fixed;
          bottom: 0;
          opacity: 0.9;
        }
        :host(.hax-context-pin-top) hax-toolbar:hover,
        :host(.hax-context-pin-bottom) hax-toolbar:hover {
          opacity: 1;
        }
      </style>
      <hax-toolbar hax-properties="[[haxProperties]]" size="{{ceSize}}">
        <slot slot="primary"></slot>
        <hax-context-item
          slot="primary"
          icon="icons:settings"
          label="Settings"
          event-name="hax-manager-configure"
          hidden$="[[!__hasSettingsForm]]"
        ></hax-context-item>
        <hax-context-item
          slot="primary"
          icon="icons:view-quilt"
          label="[[__parentName]]"
          event-name="hax-manager-configure-container"
          hidden$="[[!__hasParentSettingsForm]]"
        ></hax-context-item>
      </hax-toolbar>
    `}static get tag(){return"hax-ce-context"}static get properties(){return{/**
       * ce size.
       */ceSize:{type:Number,value:100,observer:"_ceSizeChanged"},/**
       * Selected value to match ce direction currently.
       */haxProperties:{type:Object,value:{},observer:"_haxPropertiesChanged"}}}/**
   * Set haxProperties.
   */setHaxProperties(props){// be aggressive w/ reset
this.set("haxProperties",{});this.set("haxProperties",props)}/**
   * ce size changed.
   */_ceSizeChanged(newValue,oldValue){if(typeof newValue!==typeof void 0&&typeof oldValue!==typeof void 0){this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,cancelable:!0,composed:!0,detail:{eventName:"hax-size-change",value:newValue}}))}}/**
   * HAX properties changed, update buttons available.
   */_haxPropertiesChanged(newValue,oldValue){if(typeof oldValue!==typeof void 0&&typeof newValue.settings!==typeof void 0){// clear current slot for the tag
let slot=(0,_polymerDom.dom)(this);while(null!==slot.firstChild){slot.removeChild(slot.firstChild)}let settings=newValue.settings.quick,configure=newValue.settings.configure,advanced=newValue.settings.advanced;// support things that could technically have no configuration
// or advanced form but have quick settings
// This doesn't make a ton of sense but it is possible
if((configure.length||advanced.length)&&"HR"!==newValue.element.tagName){this.__hasSettingsForm=!0}else{this.__hasSettingsForm=!1}this.__hasParentSettingsForm=!1;// test for parent being different from child
if(window.HaxStore.instance.activeContainerNode!==window.HaxStore.instance.activeNode&&null!==window.HaxStore.instance.activeContainerNode){this.__hasParentSettingsForm=!0;switch(window.HaxStore.instance.activeContainerNode.tagName){case"P":case"UL":case"OL":case"DIV":this.__parentName="Text block settings";break;case"GRID-PLATE":this.__parentName="Layout settings";break;default:this.__parentName=window.HaxStore.instance.activeContainerNode.tagName.replace("-"," ").toLowerCase();+" settings";break;}}// @todo kick stuff into the local dom as options
for(var item,i=0;i<settings.length;i++){let setting=settings[i];// create a new context item for the quick
item=document.createElement("hax-context-item");item.eventName="hax-edit-property";item.label=setting.title;item.options=setting.options;item.icon=setting.icon;item.inputMethod=setting.inputMethod;item.required=setting.required;item.options=setting.options;item.validation=setting.validation;item.validationType=setting.validationType;item.description=setting.description;// property or slot if it doesn't exist
if(typeof setting.property!==typeof void 0){item.propertyToBind=setting.property}else if(typeof setting.attribute!==typeof void 0){item.propertyToBind=setting.attribute}else{item.slotToBind=setting.slot}slot.appendChild(item)}}}}_exports.HaxCeContext=HaxCeContext;window.customElements.define(HaxCeContext.tag,HaxCeContext)});