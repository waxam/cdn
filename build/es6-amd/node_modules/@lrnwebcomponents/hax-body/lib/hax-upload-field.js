define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../simple-colors/simple-colors.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_simpleColors,_haxSharedStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxUploadField=void 0;_require=babelHelpers.interopRequireWildcard(_require);class HaxUploadField extends _polymerElement.PolymerElement{constructor(){super();new Promise((res,rej)=>_require.default(["../../../@polymer/paper-input/paper-input.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/paper-icon-button/paper-icon-button.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@vaadin/vaadin-upload/vaadin-upload.js"],res,rej))}static get template(){return _polymerElement.html`
      <style include="hax-shared-styles">
        :host {
          display: block;
          justify-content: flex-start;
          visibility: visible;
          transition: 0.3s all ease;
          box-sizing: border-box;
          pointer-events: all;
        }
        vaadin-upload {
          --primary-color: var(--hax-color-accent1);
          --primary-font-color: #ffffff;
          --dark-primary-color: #ffffff;
          --light-primary-color: var(--hax-color-accent1);
          --error-color: darkred;
          padding: 0;
          margin: 0;
          border: none;
          --vaadin-upload-button-add-wrapper: {
            border: none;
            background-color: var(--hax-color-accent1);
            color: #ffffff;
            display: block;
          }
          --vaadin-upload-buttons-primary: {
            display: block;
            width: 100%;
            flex: unset;
            -webkit-flex: unset;
          }
          --vaadin-upload-button-add: {
            color: #000000;
            display: block;
            flex: unset;
            -webkit-flex: unset;
            text-align: center;
          }
          --vaadin-upload-drop-label: {
            color: #ffffff;
            display: block;
            padding: 0;
            margin: 0;
          }
          --vaadin-upload-drop-label-dragover: {
            color: #ffffff;
          }
          --vaadin-upload-file-list: {
            padding: 0;
            margin: 0;
            color: #ffffff;
          }
          --vaadin-upload-file: {
            color: #ffffff;
          }
        }
        vaadin-upload[dragover] {
          border-color: #396;
        }
        vaadin-upload-file {
          --disabled-text-color: #222222;
        }
        paper-input {
          color: var(--hax-color-text);
        }
      </style>
      <paper-input
        id="url"
        value="{{value}}"
        label="URL"
        type="url"
        auto-validate=""
      ></paper-input>
      <vaadin-upload
        capture
        form-data-name="file-upload"
        id="fileupload"
      ></vaadin-upload>
      <paper-icon-button
        icon="image:photo-camera"
        id="selfie"
      ></paper-icon-button>
      <div id="camerahole"></div>
    `}static get properties(){return{value:{type:String,notify:!0}}}/**
   * Respond to uploading a file
   */_fileAboutToUpload(e){if(!this.__allowUpload){// cancel the event so we can jump in
e.preventDefault();e.stopPropagation();// look for a match as to what gizmo types it supports
let values={source:e.detail.file.name,type:e.detail.file.type};// we have no clue what this is.. let's try and guess..
var type=window.HaxStore.guessGizmoType(values);// find targets that support this type
let targets=window.HaxStore.getHaxAppStoreTargets(type);// make sure we have targets
if(1===targets.length){this._haxAppPickerSelection({detail:targets[0]})}else if(0!==targets.length){window.HaxStore.instance.haxAppPicker.presentOptions(targets,type,"Where would you like to upload this "+type+"?","app")}else{window.HaxStore.toast("Sorry, you don't have a storage location that can handle "+type+" uploads!",5e3)}}else{this.__allowUpload=!1}}/**
   * Respond to successful file upload, now inject url into url field and
   * do a gizmo guess from there!
   */_fileUploadResponse(e){// convert response to object
let response=JSON.parse(e.detail.xhr.response),map=this.__appUsed.connection.operations.add.resultMap,data={},item={};// access the app that did the upload
// look for the items element to draw our data from at its root
if(typeof this._resolveObjectPath(map.item,response)!==typeof void 0){data=this._resolveObjectPath(map.item,response)}item.type=map.defaultGizmoType;// pull in prop matches
for(var prop in map.gizmo){item[prop]=this._resolveObjectPath(map.gizmo[prop],data)}// another sanity check, if we don't have a url but have a source bind that too
if(typeof item.url===typeof void 0&&typeof item.source!==typeof void 0){item.url=item.source}// gizmo type is also supported in the mapping element itself
// Think an asset management backend as opposed to a specific
// type of asset like video. If the item coming across can
// effectively check what kind of gizmo is required for it
// to work then we need to support that asset declaring the
// gizmo type needed
if(typeof map.gizmo.type!==typeof void 0){item.type=this._resolveObjectPath(map.gizmo.type,data)}// set the value of the url which will update our URL and notify
this.shadowRoot.querySelector("#url").value=item.url}/**
   * Event for an app being selected from a picker
   * This happens when multiple upload targets support the given type
   */_haxAppPickerSelection(e){// details for where to upload the file
let connection=e.detail.connection;this.__appUsed=e.detail;this.shadowRoot.querySelector("#fileupload").method=connection.operations.add.method;let requestEndPoint=connection.protocol+"://"+connection.url;// ensure we build a url correctly
if("/"!=requestEndPoint.substr(requestEndPoint.length-1)){requestEndPoint+="/"}// support local end point modification
if(typeof connection.operations.add.endPoint!==typeof void 0){requestEndPoint+=connection.operations.add.endPoint}// implementation specific tweaks to talk to things like HAXcms and other CMSs
// that have per load token based authentication
if(null!=window.HaxStore.instance.connectionRewrites.appendUploadEndPoint){requestEndPoint+="?"+window.HaxStore.instance.connectionRewrites.appendUploadEndPoint}if(null!=window.HaxStore.instance.connectionRewrites.appendJwt){requestEndPoint+="&"+window.HaxStore.instance.connectionRewrites.appendJwt+"="+localStorage.getItem(window.HaxStore.instance.connectionRewrites.appendJwt)}this.shadowRoot.querySelector("#fileupload").headers=connection.headers;this.shadowRoot.querySelector("#fileupload").target=requestEndPoint;// invoke file uploading...
this.__allowUpload=!0;this.shadowRoot.querySelector("#fileupload").uploadFiles()}connectedCallback(){super.connectedCallback();// hide the button if this environment can't support it anyway
if(!navigator.mediaDevices){this.shadowRoot.querySelector("#selfie").style.display="none";this.shadowRoot.querySelector("#camerahole").style.display="none"}this.shadowRoot.querySelector("#fileupload").addEventListener("upload-before",this._fileAboutToUpload.bind(this));this.shadowRoot.querySelector("#fileupload").addEventListener("upload-response",this._fileUploadResponse.bind(this));this.shadowRoot.querySelector("#selfie").addEventListener("click",this._takeSelfie.bind(this));this.shadowRoot.querySelector("#camerahole").addEventListener("simple-camera-snap-image",this.__newPhotoShowedUp.bind(this));document.body.addEventListener("hax-app-picker-selection",this._haxAppPickerSelection.bind(this))}disconnectedCallback(){this.shadowRoot.querySelector("#fileupload").removeEventListener("upload-before",this._fileAboutToUpload.bind(this));this.shadowRoot.querySelector("#fileupload").removeEventListener("upload-response",this._fileUploadResponse.bind(this));this.shadowRoot.querySelector("#selfie").removeEventListener("click",this._takeSelfie.bind(this));this.shadowRoot.querySelector("#camerahole").removeEventListener("simple-camera-snap-image",this.__newPhotoShowedUp.bind(this));this.shadowRoot.querySelector("#fileupload").removeEventListener("upload-response",this._fileUploadResponse.bind(this));document.body.removeEventListener("hax-app-picker-selection",this._haxAppPickerSelection.bind(this));super.disconnectedCallback()}/**
   * We got a new photo
   */__newPhotoShowedUp(e){let file=new File([e.detail.raw],"headshot"+e.timeStamp+".jpg");this.shadowRoot.querySelector("#fileupload")._addFile(file)}/**
   * Invoke the camera to set itself up
   */_takeSelfie(e){if(!this.camera){new Promise((res,rej)=>_require.default(["../../simple-login/lib/simple-camera-snap.js"],res,rej));this.camera=document.createElement("simple-camera-snap");this.shadowRoot.querySelector("#camerahole").appendChild(this.camera)}}/**
   * Helper to take a multi-dimensional object and convert
   * it's reference into the real value. This allows for variable input defined
   * in a string to actually hit the deeper part of an object structure.
   */_resolveObjectPath(path,obj){return path.split(".").reduce(function(prev,curr){return prev?prev[curr]:null},obj||self)}}_exports.HaxUploadField=HaxUploadField;window.customElements.define("hax-upload-field",HaxUploadField)});