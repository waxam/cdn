define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/iron-list/iron-list.js"],function(_exports,_require,_polymerElement,_ironList){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxBloxBrowser=void 0;_require=babelHelpers.interopRequireWildcard(_require);/**
 * `hax-blox-browser`
 * `List of layout blox to select from`
 * @microcopy - the mental model for this element
 * - blox - silly name for the general public when talking about custom elements and what it provides in the end.
 */class HaxBloxBrowser extends _polymerElement.PolymerElement{constructor(){super();new Promise((res,rej)=>_require.default(["./hax-blox-browser-item.js"],res,rej));document.body.addEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this))}static get template(){return _polymerElement.html`
      <style>
        :host {
          display: block;
        }
        hax-blox-browser-item {
          margin: 10px;
          -webkit-transition: 0.3s all linear;
          transition: 0.3s all linear;
        }
        #ironlist {
          min-height: 50vh;
        }
      </style>
      <iron-list id="ironlist" items="[[__bloxList]]" as="blox" grid="">
        <template>
          <div class="blox-container">
            <hax-blox-browser-item
              index="[[blox.index]]"
              layout="[[blox.details.layout]]"
              title="[[blox.details.title]]"
              tag="[[blox.details.tag]]"
              icon="[[blox.details.icon]]"
              author="[[blox.details.author]]"
              teaser="[[blox.details.teaser]]"
              description="[[blox.details.description]]"
              examples="[[blox.details.examples]]"
              status="[[blox.details.status]]"
              blox="[[blox.blox]]"
            ></hax-blox-browser-item>
          </div>
        </template>
      </iron-list>
    `}static get tag(){return"hax-blox-browser"}static get properties(){return{/**
       * The list of blox
       */bloxList:{type:Array,observer:"_bloxListChanged"}}}/**
   * Attached life cycle
   */connectedCallback(){super.connectedCallback();this.resetBrowser()}/**
   * Store updated, sync.
   */_haxStorePropertyUpdated(e){if(e.detail&&typeof e.detail.value!==typeof void 0&&e.detail.property){// make sure we set array's empty first to force a repaint of paths
if(typeof this[e.detail.property]!==typeof void 0&&null!=this[e.detail.property]&&typeof this[e.detail.property].length!==typeof void 0){this.set(e.detail.property,[])}this.set(e.detail.property,e.detail.value)}}/**
   * Notice bloxList changing.
   */_bloxListChanged(newValue,oldValue){if(typeof newValue!==typeof void 0){this.set("__bloxList",newValue)}}/**
   * Reset this browser.
   */resetBrowser(){setTimeout(()=>{this.shadowRoot.querySelector("#ironlist").dispatchEvent(new CustomEvent("iron-resize",{bubbles:!0,cancelable:!0,composed:!0,detail:!0}));window.dispatchEvent(new Event("resize"))},100)}}_exports.HaxBloxBrowser=HaxBloxBrowser;window.customElements.define(HaxBloxBrowser.tag,HaxBloxBrowser)});