define(["exports", "../../../lit-element/lit-element.js"], function (_exports, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxStaxBrowser = void 0;

  /**
   * `hax-stax-browser`
   * @element hax-stax-browser
   * `Select a stack / template to insert`
   * @microcopy - the mental model for this element
   * - stax - silly name for the general public when talking about custom elements and what it provides in the end.
   */
  class HaxStaxBrowser extends _litElement.LitElement {
    static get styles() {
      return [(0, _litElement.css)`
        :host {
          display: block;
        }
        .stax-container {
          text-align: center;
          margin: 0px 16px;
        }
      `];
    }

    constructor() {
      super();
      this.staxList = [];
    }

    render() {
      return (0, _litElement.html)`
      <div class="stax-container">
        ${this.staxList.map(stax => (0, _litElement.html)`
            <hax-tray-button
              wide
              index="${stax.index}"
              label="${stax.details.title}"
              .stax="${stax.stax}"
              icon="hax:templates"
              color="green"
              event-name="insert-stax"
            ></hax-tray-button>
          `)}
      </div>
    `;
    }

    static get tag() {
      return "hax-stax-browser";
    }

    static get properties() {
      return {
        /**
         * The list of stax
         */
        staxList: {
          type: Array
        }
      };
    }

  }

  _exports.HaxStaxBrowser = HaxStaxBrowser;
  window.customElements.define(HaxStaxBrowser.tag, HaxStaxBrowser);
});