define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/iron-a11y-keys/iron-a11y-keys.js"],function(_exports,_require,_polymerElement,_ironA11yKeys){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxContextItemTextop=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HaxContextItemTextop extends _polymerElement.PolymerElement{constructor(){super(),new Promise((res,rej)=>_require.default(["./hax-toolbar-item.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/iron-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/editor-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/device-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/hardware-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/social-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/av-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/image-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/maps-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/neon-animation/neon-animation.js"],res,rej))}static get template(){return _polymerElement.html`
      <style>
        :host {
          display: inline-flex;
          box-sizing: border-box;
          height: 36px;
          width: 36px;
        }
        :host([menu]) {
          display: flex;
          width: 100%;
        }
      </style>
      <iron-a11y-keys
        id="a11y"
        target="[[target]]"
        keys="enter"
        on-keys-pressed="_fireEvent"
      ></iron-a11y-keys>
      <hax-toolbar-item
        id="button"
        icon="[[icon]]"
        hidden\$="[[!icon]]"
        tooltip-direction="[[direction]]"
        tooltip="[[label]]"
        on-mousedown="_fireEvent"
        mini="[[mini]]"
        menu="[[menu]]"
        light="[[light]]"
      >
        <slot></slot>
      </hax-toolbar-item>
    `}static get tag(){return"hax-context-item-textop"}static get properties(){return{target:{type:Object},light:{type:Boolean,value:!1},mini:{type:Boolean,value:!1},menu:{type:Boolean,value:!1},direction:{type:String,value:"top"},icon:{type:String,value:"editor:text-fields",reflectToAttribute:!0},label:{type:String,reflectToAttribute:!0},eventName:{type:String,value:"button",reflectToAttribute:!0},inputMethod:{type:String,value:null,reflectToAttribute:!0},propertyToBind:{type:String,value:null,reflectToAttribute:!0},slotToBind:{type:String,value:null,reflectToAttribute:!0},description:{type:String,reflectToAttribute:!0}}}connectedCallback(){super.connectedCallback(),this.target=this.shadowRoot.querySelector("#button")}_fireEvent(e){this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,cancelable:!0,composed:!0,detail:{target:this,eventName:this.eventName}}))}}_exports.HaxContextItemTextop=HaxContextItemTextop,window.customElements.define(HaxContextItemTextop.tag,HaxContextItemTextop)});