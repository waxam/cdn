define(["exports","require","../../../lit-element/lit-element.js","../../../@polymer/paper-button/paper-button.js"],(function(_exports,_require,_litElement,_paperButton){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxStaxBrowserItem=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HaxStaxBrowserItem extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          display: flex;
        }
        paper-card {
          margin: 4px 0;
          border-radius: 10px;
          display: flex;
          width: 100%;
        }
        paper-button {
          color: black;
          background-color: #ffffff;
          border: 2px solid var(--hax-color-border-outline);
          text-transform: none;
          margin: 0;
          height: 80px !important;
          width: 100%;
          display: flex;
          border-radius: 0;
          min-width: unset;
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
          transition: box-shadow 0.3s;
        }
        paper-button:hover,
        paper-button:focus {
          box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.14),
            0 2px 10px 0 rgba(0, 0, 0, 0.12), 0 6px 2px -4px rgba(0, 0, 0, 0.2);
        }
        paper-button:active {
          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),
            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);
        }
        paper-button .item-title {
          font-size: 14px;
          display: inline-flex;
        }
        paper-button .item-title {
          font-size: 14px;
          display: inline-flex;
        }
        paper-button .button-inner {
          text-align: center;
        }
        .flip-icon {
          transform: rotateY(180deg);
        }
        @media screen and (max-width: 550px) {
          paper-button .item-title {
            font-size: 10px;
          }
        }
      `]}render(){return _litElement.html`
      <paper-button
        id="button"
        @click="${this._fireEvent}"
        .data-voicecommand="select ${this.title}"
      >
        <div class="button-inner">
          ${this.image?_litElement.html`
                <iron-image
                  src="${this.image}"
                  preload=""
                  sizing="cover"
                ></iron-image>
              `:""}
          <div class="item-title">${this.title}</div>
        </div>
      </paper-button>
    `}static get tag(){return"hax-stax-browser-item"}static get properties(){return{title:{type:String},staxReference:{type:Object},image:{type:String},author:{type:String},description:{type:String},examples:{type:Array},status:{type:Array},tag:{type:String}}}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"image"==propName&&new Promise((res,rej)=>_require.default(["../../../@polymer/iron-image/iron-image.js"],res,rej))})}_fireEvent(e){this.dispatchEvent(new CustomEvent("hax-insert-content-array",{bubbles:!0,cancelable:!0,composed:!0,detail:this.stax})),window.HaxStore.write("openDrawer",!1,this)}}_exports.HaxStaxBrowserItem=HaxStaxBrowserItem,window.customElements.define(HaxStaxBrowserItem.tag,HaxStaxBrowserItem)}));