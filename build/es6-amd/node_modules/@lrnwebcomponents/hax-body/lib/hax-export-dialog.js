define(["exports","require","../../../lit-element/lit-element.js","../../dl-behavior/dl-behavior.js"],function(_exports,_require,_litElement,_dlBehavior){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.HaxExportDialog=void 0,_require=babelHelpers.interopRequireWildcard(_require);class HaxExportDialog extends((0,_dlBehavior.MtzFileDownloadBehaviors)(_litElement.LitElement)){static get styles(){return[_litElement.css`
        :host {
          display: block;
        }
        #dialog {
          z-index: 1000;
        }
        iron-icon:not(:defined),
        paper-button:not(:defined),
        paper-dialog:not(:defined) {
          display: none;
        }
        .title {
          position: relative;
          padding: 16px;
          outline: 0;
          font-weight: 600;
          text-align: left;
          margin: 0;
          font-size: 18px;
          line-height: 18px;
          font-family: "Noto Serif", serif;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
        }
        .pref-container {
          text-align: left;
          padding: 16px;
        }
        .buttons paper-button:focus,
        .buttons paper-button:hover {
          outline: 1px solid var(--hax-color-border-outline);
        }
        .buttons paper-button {
          text-transform: none;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          display: inline-flex;
          border-radius: 0px;
          border-style: solid;
          border-width: 1px;
          min-width: unset;
          font-size: 12px;
          font-weight: bold;
        }
        #closedialog {
          float: right;
          top: 5px;
          right: 0;
          position: absolute;
          padding: 4px;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          width: 40px;
          height: 40px;
          min-width: unset;
        }
        #textarea {
          margin-bottom: 16px;
          padding: 10px;
          font-size: 10px;
          resize: none;
          width: 90%;
          height: 40vh;
          width: -webkit-fill-available;
          background-color: transparent;
          color: #eeeeee;
          font-family: monospace;
        }
        paper-dialog {
          min-width: 70vw;
          min-height: 60vh;
          background-color: #ffffff;
          color: black;
        }
        #import {
          margin-right: 50px;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
        }
        #loading {
          position: absolute;
          margin: 0 auto;
          width: 100%;
        }
      `]}render(){return _litElement.html`
      <paper-dialog id="dialog">
        <h3 class="title">${this.title}</h3>
        <div style="height: 100%; overflow: auto;" class="pref-container">
          <div id="wrapper">
            <textarea id="hiddentextarea" hidden></textarea>
            <hexagon-loader
              size="small"
              id="loading"
              color="#0085ba"
              aria-roledescription="Loading"
            ></hexagon-loader>
            <code-editor id="textarea" title="" theme="vs"></code-editor>
          </div>
          <div id="buttons" class="buttons">
            <paper-button id="import" raised>Update body area</paper-button>
            <paper-button id="copy">Copy to clipboard</paper-button>
            <paper-button id="downloadfull">Download full file</paper-button>
            <paper-button id="download">Download body area</paper-button>
            <paper-button
              id="elementexport"
              ?hidden="${!this.globalPreferences.haxDeveloperMode}"
              >Copy as HAX schema to clipboard</paper-button
            >
          </div>
        </div>
        <paper-button id="closedialog" on-click="close">
          <iron-icon icon="icons:cancel" title="Close dialog"></iron-icon>
        </paper-button>
      </paper-dialog>
    `}static get tag(){return"hax-export-dialog"}static get properties(){return{title:{type:String},globalPreferences:{type:Object}}}firstUpdated(){this.dispatchEvent(new CustomEvent("hax-register-export",{bubbles:!0,cancelable:!0,composed:!0,detail:this})),document.body.addEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this)),this.shadowRoot.querySelector("#download").addEventListener("click",this.download.bind(this)),this.shadowRoot.querySelector("#downloadfull").addEventListener("click",this.downloadfull.bind(this)),this.shadowRoot.querySelector("#import").addEventListener("click",this.importContent.bind(this)),this.shadowRoot.querySelector("#copy").addEventListener("click",this.selectBody.bind(this)),this.shadowRoot.querySelector("#closedialog").addEventListener("click",this.close.bind(this)),this.shadowRoot.querySelector("#elementexport").addEventListener("click",this.htmlToHaxElements.bind(this))}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&("object"==typeof e.detail.value&&(this[e.detail.property]=null),this[e.detail.property]=e.detail.value)}download(e){const data=this.contentToFile(!1);this.downloadFromData(data,"html","my-new-code"),window.HaxStore.toast("HTML content downloaded")}downloadfull(e){const data=this.contentToFile(!0);this.downloadFromData(data,"html","my-new-webpage"),window.HaxStore.toast("Working offline copy downloaded")}importContent(e){const htmlBody=this.shadowRoot.querySelector("#textarea").value;return window.HaxStore.toast("Content updated"),window.HaxStore.instance.activeHaxBody.importContent(htmlBody)}selectBody(e){let hiddenarea=this.shadowRoot.querySelector("#hiddentextarea");hiddenarea.value=this.shadowRoot.querySelector("#textarea").value,hiddenarea.removeAttribute("hidden"),hiddenarea.focus(),hiddenarea.select(),document.execCommand("copy"),hiddenarea.setAttribute("hidden","hidden"),window.HaxStore.toast("Copied HTML content")}htmlToHaxElements(e){let elements=window.HaxStore.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);var str=JSON.stringify(elements,null,2);let val=this.shadowRoot.querySelector("#textarea").value,hiddenarea=this.shadowRoot.querySelector("#hiddentextarea");hiddenarea.removeAttribute("hidden"),hiddenarea.value=str,hiddenarea.focus(),hiddenarea.select(),document.execCommand("copy"),hiddenarea.value=val,hiddenarea.setAttribute("hidden","hidden"),window.HaxStore.toast("Copied hax elements to clipboard")}contentToFile(full){var content="";if(full){let elementList=window.HaxStore.instance.elementList,url="https://lrnwebcomponents.github.io/hax-body/components";content=`\n        <!DOCTYPE html>\n        <html lang="en">\n          <head>\n            <meta charset="utf-8" />\n            <meta\n              name="viewport"\n              content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes"\n            />\n            <title>hax-body demo</title>\n            <script src="${url}/@webcomponents/webcomponentsjs/webcomponents-loader.js"><\/script>\n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n        </html>\n      `;var ignoreList=["iframe","a","img","hr","p"];for(var index in elementList)-1===ignoreList.indexOf(index)&&(content+='<script type="module" src="'+url+"/"+index+"/"+index+'.js" />\n');content+="</head><body>",content+=window.HaxStore.instance.activeHaxBody.haxToContent(),content+="</body></html>"}else content=window.HaxStore.instance.activeHaxBody.haxToContent();return content}toggleDialog(){this.shadowRoot.querySelector("#dialog").opened?this.close():(this.shadowRoot.querySelector("#textarea").editorValue=this.contentToFile(!1),window.HaxStore.instance.closeAllDrawers(this))}constructor(){super(),this.title="Source view",this.fileTypes={CSV:"text/csv",JSON:"text/json",PDF:"application/pdf",TXT:"text/plain",HTML:"text/html"},this.globalPreferences={},new Promise((res,rej)=>_require.default(["../../../@polymer/paper-dialog/paper-dialog.js"],res,rej))}open(){new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icon/iron-icon.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/iron-icons.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-input/paper-input.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../../@polymer/paper-button/paper-button.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../code-editor/code-editor.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../hexagon-loader/hexagon-loader.js"],res,rej)),this.shadowRoot.querySelector("#dialog").open(),this.shadowRoot.querySelector("#buttons").style.display="none",this.shadowRoot.querySelector("#loading").setAttribute("loading","loading"),this.shadowRoot.querySelector("#wrapper").appendChild(this.shadowRoot.querySelector("#textarea")),setTimeout(()=>{this.shadowRoot.querySelector("#loading").removeAttribute("loading"),this.shadowRoot.querySelector("#buttons").style.display="unset"},800)}close(){this.shadowRoot.querySelector("#dialog").close()}}_exports.HaxExportDialog=HaxExportDialog,window.customElements.define(HaxExportDialog.tag,HaxExportDialog)});