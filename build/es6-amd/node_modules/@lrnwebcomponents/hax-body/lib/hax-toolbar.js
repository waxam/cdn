define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","../../materializecss-styles/lib/colors.js","../../simple-colors/simple-colors.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_renderStatus,_colors,_simpleColors,_haxSharedStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxToolbar=void 0;_require=babelHelpers.interopRequireWildcard(_require);class HaxToolbar extends _polymerElement.PolymerElement{constructor(){super();new Promise((res,rej)=>_require.default(["../../../@polymer/paper-slider/paper-slider.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/paper-tooltip/paper-tooltip.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/paper-item/paper-item.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/iron-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/editor-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["./hax-toolbar-item.js"],res,rej));new Promise((res,rej)=>_require.default(["./hax-toolbar-menu.js"],res,rej));new Promise((res,rej)=>_require.default(["./hax-context-item.js"],res,rej));new Promise((res,rej)=>_require.default(["./hax-context-item-menu.js"],res,rej))}static get template(){return _polymerElement.html`
      <style include="simple-colors hax-shared-styles">
        :host {
          display: flex;
          justify-content: flex-start;
          visibility: visible;
          transition: 0.3s all ease;
          box-sizing: border-box;
          height: 36px;
          pointer-events: all;
        }
        :host *[hidden] {
          display: none;
        }
        .wrapper {
          display: flex;
          border: 1px solid var(--hax-color-border-outline);
          height: 35px;
          align-items: center;
          padding: 1px;
          margin-top: -2px;
        }
        :host .wrapper ::slotted(*) {
          pointer-events: all;
        }
        .close-cap {
          margin: 10px 10px 0 8px;
          display: flex;
          padding: 0;
        }
        :host * ::slotted(hax-context-item:hover),
        :host * ::slotted(hax-context-item-textop:hover),
        :host * ::slotted(hax-context-item-menu:hover),
        hax-context-item:hover,
        hax-context-item-textop:hover,
        hax-context-item-menu:hover {
          z-index: 2;
        }
        #moremenu hax-context-item,
        #moremenu ::slotted(paper-item),
        paper-item {
          height: 32px;
          padding: 0;
          min-width: 100px;
        }

        #moremenu hax-context-item:hover,
        :host #moremenu ::slotted(paper-item:hover),
        paper-item:hover {
          background-color: var(--hax-color-menu-heading-bg);
          cursor: pointer;
        }
        paper-slider {
          background-color: var(--hax-color-bg-accent);
          color: #ffffff;
          font-weight: bold;
          height: 36px;
          min-width: 100px;
          --paper-slider-font-color: var(--hax-color-accent1-text);
          --paper-slider-active-color: var(--hax-color-accent1);
          --paper-slider-knob-color: var(--hax-color-accent1);
          --paper-slider-pin-start-color: var(--hax-color-accent1);
          --paper-slider-pin-color: var(--hax-color-accent1);
        }
        .convert-button {
          border-top: 1px solid var(--hax-color-bg-accent);
        }
      </style>
      <hax-context-item
        hidden$="[[inline]]"
        mini
        light
        icon="close"
        label="Close"
        event-name="close-menu"
        class="close-cap"
        direction="left"
      ></hax-context-item>
      <div class="wrapper">
        <hax-context-item-menu
          hidden$="[[!haxProperties.canPosition]]"
          selected-value="{{justifyValue}}"
          id="justify"
          icon="[[justifyIcon]]"
          label="Alignment"
        >
          <hax-context-item
            menu
            icon="editor:format-align-left"
            event-name="hax-align-left"
            >Left</hax-context-item
          >
          <hax-context-item
            menu
            icon="editor:format-align-center"
            event-name="hax-align-center"
            >Center</hax-context-item
          >
        </hax-context-item-menu>
        <paper-slider
          hidden$="[[!haxProperties.canScale]]"
          id="slider"
          pin=""
          min="25"
          step="25"
          max="100"
          value="{{size}}"
        ></paper-slider>
        <paper-tooltip
          hidden$="[[inline]]"
          for="slider"
          position="top"
          offset="10"
        >
          Resize
        </paper-tooltip>
        <slot name="primary"></slot>
        <hax-context-item
          hidden$="[[inline]]"
          icon="delete"
          icon-class="red-text text-darken-1"
          label="Remove"
          event-name="grid-plate-delete"
        ></hax-context-item>
        <hax-context-item-menu
          hidden$="[[hideMore]]"
          icon="more-vert"
          label="More"
          id="moremenu"
          event-name="grid-plate-op"
          reset-on-select=""
        >
          <paper-item value="" hidden></paper-item>
          <slot name="more"></slot>
          <hax-context-item
            menu
            icon="icons:content-copy"
            icon-class="green-text"
            event-name="grid-plate-duplicate"
            >Duplicate</hax-context-item
          >
          <hax-context-item
            hidden$="[[hideTransform]]"
            menu
            icon="image:transform"
            class="convert-button"
            icon-class="orange-text"
            event-name="grid-plate-convert"
            >Transform to..</hax-context-item
          >
        </hax-context-item-menu>
      </div>
    `}static get tag(){return"hax-toolbar"}static get properties(){return{/**
       * Hide the transform button as its not supported
       */hideTransform:{type:Boolean,value:!1},/**
       * See what's selected
       */selected:{type:Boolean,value:!1,reflectToAttritue:!0},/**
       * Selected value to match ce direction currently.
       */haxProperties:{type:Object,value:{},observer:"_haxPropertiesChanged"},/**
       * Hide the more menu.
       */hideMore:{type:Boolean,value:!1},/**
       * size of the slider if it exists.
       */size:{type:Number,value:100,notify:!0},/**
       * Justify icon to reflect state.
       */justifyIcon:{type:String,value:"editor:format-align-left"},/**
       * This is an inline context menu
       */inline:{type:Boolean,value:!1,reflectToAttritue:!0},/**
       * Selected value to match ce direction currently.
       */justifyValue:{type:String,value:"",notify:!0}}}connectedCallback(){super.connectedCallback();(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("hax-context-item-selected",this._haxContextOperation.bind(this))})}disconnectedCallback(){this.removeEventListener("hax-context-item-selected",this._haxContextOperation.bind(this));super.disconnectedCallback()}/**
   * If hax properties changes, let's see what the initial state
   * of the buttons should be.
   */_haxPropertiesChanged(newValue,oldValue){// value doesn't matter, just look at what's active
if(typeof window.HaxStore.instance.activeNode!==typeof void 0){if(""!=window.HaxStore.instance.activeNode.style.width){this.size=window.HaxStore.instance.activeNode.style.width.replace("%","")}else{this.size=100}if("0px auto"==window.HaxStore.instance.activeNode.style.margin&&"block"==window.HaxStore.instance.activeNode.style.display){this.justifyValue="hax-align-center";this.justifyIcon="editor:format-align-center"}else{this.justifyValue="hax-align-left";this.justifyIcon="editor:format-align-left"}}}/**
   * Respond to simple modifications.
   */_haxContextOperation(e){let detail=e.detail;// support a simple insert event to bubble up or everything else
switch(detail.eventName){case"hax-align-left":case"hax-align-center":this.justifyIcon=detail.target.icon;break;case"close-menu":setTimeout(()=>{this.shadowRoot.querySelector("#moremenu").shadowRoot.querySelector("#menu").hideMenu();this.shadowRoot.querySelector("#justify").shadowRoot.querySelector("#menu").hideMenu()},200);break;}}}_exports.HaxToolbar=HaxToolbar;window.customElements.define(HaxToolbar.tag,HaxToolbar)});