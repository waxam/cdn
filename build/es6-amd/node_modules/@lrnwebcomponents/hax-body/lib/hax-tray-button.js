define(["exports","../../../lit-element/lit-element.js","../../simple-colors/simple-colors.js","../../../@polymer/paper-button/paper-button.js","../../simple-tooltip/simple-tooltip.js"],(function(t,e,o,i,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.HAXTrayButton=void 0;class HAXTrayButton extends o.SimpleColors{static get tag(){return"hax-tray-button"}constructor(){super(),this.mini=!1,this.wide=!1,this.eventData=null,this.eventName=null,this.icon=null,this.colorMeaning=!1,this._defaultHoverColor="cyan",this._defaultColor="blue-grey",this.accentColor=this._defaultColor,this.hoverAccentColor=this._defaultColor,this.addEventListener("focusin",this._focusIn.bind(this)),this.addEventListener("focusout",this._focusOut.bind(this)),this.addEventListener("mouseover",this._focusIn.bind(this)),this.addEventListener("mouseout",this._focusOut.bind(this))}static get properties(){return{...super.properties,voiceCommand:{type:String,attribute:"voice-command"},mini:{type:Boolean,reflect:!0},colorMeaning:{type:Boolean,attribute:"color-meaning"},wide:{type:Boolean,reflect:!0},index:{type:Number},eventName:{type:String,attribute:"event-name"},eventData:{type:String,attribute:"event-data"},label:{type:String},icon:{type:String},color:{type:String}}}static get styles(){return[...super.styles,e.css`
        :host {
          display: inline-flex;
          flex-direction: column;
          align-items: center;
          margin: 1px 0;
          transition: all 0.5ms ease-in-out;
        }
        iron-icon {
          width: 20px;
          height: 20px;
          transform: var(--hax-tray-button-rotate);
        }
        .item-label {
          margin-top: 4px;
          width: 60px;
          font-size: 10px;
          line-height: 10px;
          text-align: center;
          text-overflow: ellipsis;
          overflow: hidden;
          word-break: break-word;
        }
        :host([wide]) {
          display: block;
          width: 100%;
        }
        :host([wide]) .item-label {
          width: unset;
        }
        :host([wide]) paper-button {
          align-items: center;
          justify-content: space-around;
        }
        .flip-icon {
          transform: rotateY(180deg);
        }
        paper-button {
          text-transform: none;
          color: var(
            --hax-quick-button-accent-text,
            var(--simple-colors-default-theme-grey-12, #000)
          );
          background-color: var(
            --hax-quick-button-accent,
            var(--simple-colors-default-theme-grey-2, #eee)
          );
          border: 1px solid
            var(
              --hax-quick-button-accent,
              var(--simple-colors-default-theme-grey-3, #dddddd)
            );
          min-width: unset;
          cursor: pointer;
          height: 40px;
          display: flex;
          padding: 4px;
          margin: 0px;
          border-radius: 0;
          transition: all 0.5ms ease-in-out;
        }
        paper-button:active,
        paper-button:focus,
        paper-button:hover {
          color: var(
            --hax-tray-panel-accent-text,
            var(--simple-colors-default-theme-grey-1, #fff)
          );
          background-color: var(
            --hax-tray-panel-accent,
            var(--hax-contextual-action-color)
          );
          border-color: var(
            --hax-tray-panel-accent,
            var(--hax-contextual-action-color)
          );
          transition: all 0.5ms ease-in-out;
        }
        paper-button iron-icon {
          display: inline-block;
        }
        :host([mini]) {
          height: 30px;
          width: 30px;
        }
        :host([mini]) paper-button {
          height: 30px;
          width: 30px;
        }
        :host([mini]) paper-button iron-icon {
          height: 18px;
          width: 18px;
        }
        .item-title {
          margin-top: 8px;
          color: var(--simple-colors-default-theme-grey-12, #000);
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          font-size: 12px;
          line-height: 12px;
          height: 12px;
          text-align: center;
        }
        .button-inner {
          display: flex;
        }
        simple-tooltip {
          font-size: 16px;
          --simple-tooltip-background: var(
            --simple-colors-default-theme-grey-12,
            #000
          );
          --simple-tooltip-opacity: 1;
          --simple-tooltip-text-color: var(
            --simple-colors-default-theme-grey-1,
            #dddddd
          );
          --simple-tooltip-delay-in: 0;
          --simple-tooltip-duration-in: 100ms;
          --simple-tooltip-duration-out: 0;
          --simple-tooltip-border-radius: 0;
          --simple-tooltip-font-size: 14px;
        }
      `]}render(){return e.html`
      <paper-button title="${this.label}" @click="${this._fireEvent}">
        ${this.icon?e.html`
              <div class="button-inner">
                <iron-icon icon="${this.icon}"></iron-icon>
              </div>
            `:e.html``}
        ${this.mini?e.html``:e.html`
              <div class="item-label">${this.label}</div>
            `}
      </paper-button>
      ${this.mini?e.html`
            <simple-tooltip>${this.label}</simple-tooltip>
          `:""}
    `}_focusIn(t){this.accentColor=this.hoverAccentColor===this._defaultColor?this._defaultHoverColor:this.hoverAccentColor}_focusOut(t){this.colorMeaning?this.accentColor=this.color:this.accentColor=this._defaultColor}_voiceEvent(t){this._fireEvent(t),this.click()}_fireEvent(t){this.dispatchEvent(new CustomEvent("hax-tray-button-click",{bubbles:!0,cancelable:!0,composed:!0,detail:{eventName:this.eventName,index:this.index,value:this.eventData}}))}updated(t){super.updated&&super.updated(t),t.forEach((t,e)=>{"voiceCommand"==e&&this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: "+this[e],context:this,callback:"_voiceEvent"}})),"color"==e&&(this.accentColor&&this.color===this._defaultColor||!this.colors[this.color]||(this.hoverAccentColor=this.color)),"colorMeaning"==e&&this.colorMeaning&&(this.accentColor=this.color)})}}t.HAXTrayButton=HAXTrayButton,customElements.define(HAXTrayButton.tag,HAXTrayButton)}));