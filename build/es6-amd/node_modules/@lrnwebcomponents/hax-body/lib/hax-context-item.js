define(["exports","require","../../../@polymer/polymer/polymer-element.js"],function(_exports,_require,_polymerElement){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxContextItem=void 0;_require=babelHelpers.interopRequireWildcard(_require);/**
 * `hax-context-item`
 * `A single button in the hax context menu for consistency.`
 * @microcopy - the mental model for this element
 * - context - menu in the page the user can select an item from, this being 1 option in that list
 * - button - an item that expresses what interaction you will have with the content.
 */class HaxContextItem extends _polymerElement.PolymerElement{constructor(){super();new Promise((res,rej)=>_require.default(["./hax-toolbar-item.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/iron-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/editor-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/device-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/hardware-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/social-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/av-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/image-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/iron-icons/maps-icons.js"],res,rej));new Promise((res,rej)=>_require.default(["../../../@polymer/neon-animation/neon-animation.js"],res,rej))}static get template(){return _polymerElement.html`
      <style>
        :host {
          display: inline-flex;
          height: 36px;
          width: 36px;
        }
        :host([mini]) {
          height: unset;
          width: unset;
        }
        :host([menu]) {
          display: flex;
          width: 100%;
        }
      </style>
      <hax-toolbar-item
        disabled="[[disabled]]"
        light="[[light]]"
        mini="[[mini]]"
        id="button"
        icon="[[icon]]"
        hidden\$="[[!icon]]"
        icon-class="[[iconClass]]"
        on-mousedown="_storeSelection"
        on-click="_fireEvent"
        tooltip="[[label]]"
        tooltip-direction="[[direction]]"
        default="[[default]]"
        menu="[[menu]]"
      >
        <slot></slot>
      </hax-toolbar-item>
    `}static get tag(){return"hax-context-item"}static get properties(){return{/**
       * Light theme for toolbar item.
       */light:{type:Boolean,value:!1},/**
       * disabled state
       */disabled:{type:Boolean,value:!1,reflectToAttribute:!0},/**
       * Mini theme for making things small and round.
       */mini:{type:Boolean,value:!1},/**
       * Style to be presented in a menu
       */menu:{type:Boolean,value:!1},/**
       * Direction for the tooltip
       */direction:{type:String,value:"top"},/**
       * Icon for the button.
       */icon:{type:String,value:"editor:text-fields",reflectToAttribute:!0},/**
       * Icon for the button.
       */iconClass:{type:String,value:"",reflectToAttribute:!0},/**
       * Label for the button.
       */label:{type:String,value:"",reflectToAttribute:!0},/**
       * Name of the event to bubble up as being tapped.
       * This can be used to tell other elements what was
       * clicked so it can take action appropriately.
       */eventName:{type:String,value:"button",reflectToAttribute:!0},/**
       * Method of input to display when activated. This is
       * only used when triggered as part of haxProperties
       */inputMethod:{type:String,value:null,reflectToAttribute:!0},/**
       * Optional slot to bind this value to.
       */propertyToBind:{type:String,value:null,reflectToAttribute:!0},/**
       * Optional slot to bind this value to.
       */slotToBind:{type:String,value:null,reflectToAttribute:!0},/**
       * Optional description for this item.
       */description:{type:String,reflectToAttribute:!0},/**
       * Is this button concidered a primary interaction
       */default:{type:Boolean,value:!1},/**
       * an optional value to send along in the press. Allows for
       * reusing events more easily
       */value:{type:String,value:""}}}/**
   * Store the selection object. This helps fix issues with safari
   * and holding focus on non-text elements actually stealing
   * the selection priority, making it impossible to know what's
   * been selected if clicking a button to try and apply something to.
   */_storeSelection(e){window.HaxStore._tmpSelection=window.HaxStore.getSelection()}/**
   * Fire an event that includes the eventName of what was just pressed.
   */_fireEvent(e){this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,cancelable:!0,composed:!0,detail:{target:this,eventName:this.eventName,value:this.value}}))}}_exports.HaxContextItem=HaxContextItem;window.customElements.define(HaxContextItem.tag,HaxContextItem)});