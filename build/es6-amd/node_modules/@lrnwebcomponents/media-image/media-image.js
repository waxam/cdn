define(["exports","require","../../lit-element/lit-element.js","../schema-behaviors/schema-behaviors.js"],function(_exports,_require,_litElement,_schemaBehaviors){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.MediaImage=void 0,_require=babelHelpers.interopRequireWildcard(_require);class MediaImage extends((0,_schemaBehaviors.SchemaBehaviors)(_litElement.LitElement)){static get styles(){return[_litElement.css`
        :host {
          display: block;
          width: auto;
          margin: auto;
          --box-background-color: #f7f6ef;
        }

        :host([card]) {
          box-shadow: 0 1px 5px rgba(0, 0, 0, 0.14);
          padding: 20px;
        }

        :host([box]) {
          background-color: var(--box-background-color);
          padding: 20px;
        }

        :host([round]) iron-image {
          border-radius: 50%;
        }

        @media screen and (min-width: 450px) {
          :host([size="small"]) {
            max-width: 50%;
          }
        }

        @media screen and (min-width: 650px) {
          :host([size="small"]) {
            max-width: 35%;
          }
        }

        @media screen and (min-width: 900px) {
          :host([size="small"]) {
            max-width: 25%;
          }
        }

        iron-image {
          width: 100%;
          --iron-image-width: 100%;
        }

        :host([offset="left"]) {
          float: left;
          margin: var(--media-image-offset-width, 1.5vw);
          margin-left: calc(-2 * var(--media-image-offset-width, 1.5vw));
          padding-left: calc(4 * var(--media-image-offset-width, 1.5vw));
          margin-top: 0;
          margin-bottom: calc(0.1 * var(--media-image-offset-width, 1.5vw));
        }

        :host([offset="right"]) {
          float: right;
          margin: var(--media-image-offset-width, 1.5vw);
          margin-right: calc(-2 * var(--media-image-offset-width, 1.5vw));
          padding-right: calc(4 * var(--media-image-offset-width, 1.5vw));
          margin-top: 0;
          margin-bottom: calc(0.1 * var(--media-image-offset-width, 1.5vw));
        }

        :host([offset="wide"]) {
          margin: 0 calc(-1 * var(--media-image-offset-wide-width, 3.5vw));
          max-width: 100vw;
        }

        :host([offset="narrow"]) {
          max-width: var(--media-image-offset-narrow-max-width, 500px);
          margin: auto;
        }
      `]}constructor(){super(),this.source="",this.citation="",this.caption="",this.figureLabelTitle="",this.figureLabelDescription="",this.alt="",this.size="wide",this.round=!1,this.card=!1,this.box=!1,this.offset="none",new Promise((res,rej)=>_require.default(["../figure-label/figure-label.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-image/iron-image.js"],res,rej)),new Promise((res,rej)=>_require.default(["../../@polymer/iron-icons/iron-icons.js"],res,rej))}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"caption"==propName&&this._computeHasCaption(this[propName])})}render(){return _litElement.html`
      ${this._hasFigureLabel(this.figureLabelTitle,this.figureLabelDescription)?_litElement.html`
            <figure-label
              title="${this.figureLabelTitle}"
              description="${this.figureLabelDescription}"
            ></figure-label>
          `:""}
      <iron-image
        resource="${this.schemaResourceID}-image"
        src="${this.source}"
        alt="${this.alt}"
      ></iron-image>
      <media-image-citation>
        <slot name="citation">
          ${this.citation}
        </slot>
      </media-image-citation>
      ${this._hasCaption?_litElement.html`
            <media-image-caption>
              <slot name="caption">
                ${this.caption}
              </slot>
            </media-image-caption>
          `:""}
    `}static get tag(){return"media-image"}static get properties(){return{...super.properties,_hasCaption:{type:Boolean},source:{type:String},citation:{type:String},caption:{type:String},alt:{type:String},size:{type:String,reflect:!0},round:{type:Boolean,reflect:!0},card:{type:Boolean,reflect:!0},box:{type:Boolean,reflect:!0},offset:{type:String,reflect:!0},figureLabelTitle:{type:String,attribute:"figure-label-title"},figureLabelDescription:{type:String,attribute:"figure-label-description"}}}_hasFigureLabel(title,description){return title.length>0||description.length>0}_computeHasCaption(){this._hasCaption=this.caption.length>0||null!==this.querySelector('[slot="caption"]')}connectedCallback(){super.connectedCallback(),this._observer=new MutationObserver(mutations=>{this._computeHasCaption()}),this._observer.observe(this,{childList:!0})}disconnectedCallback(){this._observer.disconnect(),super.disconnectedCallback()}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Styled image",descrption:"An image gizmo with the ability to provide simple, consistent styling and accessibility options.",icon:"editor:insert-photo",color:"indigo",groups:["Image","Media"],handles:[{type:"image",source:"source",title:"alt",alt:"alt",citation:"citation",caption:"caption"}],meta:{author:"ELMS:LN"}},settings:{quick:[{property:"source",title:"Source",description:"The URL for the image.",inputMethod:"textfield",icon:"link",required:!0},{property:"alt",title:"Alternative text",description:"Text to describe the image to non-sighted users.",inputMethod:"textfield",icon:"accessibility",required:!1}],configure:[{property:"source",title:"Source",description:"The URL for the image.",inputMethod:"haxupload",icon:"link",required:!0},{property:"alt",title:"Alternative text",description:"Text to describe the image to non-sighted users.",inputMethod:"alt",icon:"accessibility",required:!0},{property:"round",title:"Round image",description:"Crops the image appearance to be circle in shape.",inputMethod:"boolean",icon:"account",required:!1},{property:"card",title:"Card",description:"Apply a drop shadow to give the appearance of being a raised card.",inputMethod:"boolean",icon:"check-box-outline-blank",required:!1},{property:"box",title:"Box",description:"Apply a visual box around the image.",inputMethod:"boolean",icon:"image:crop-square",required:!1},{property:"offset",title:"Offset",description:"Apply a left or right offset to the image.",inputMethod:"select",icon:"image:crop-square",options:{none:"none",left:"left",right:"right",wide:"wide",narrow:"narrow"}},{property:"citation",title:"Citation",description:"Citation for the image.",inputMethod:"textfield",icon:"text-format",required:!1},{property:"caption",title:"Caption",description:"Caption for the image.",inputMethod:"textfield",icon:"text-format",required:!1},{property:"figureLabelTitle",title:"Figure Label Title",description:"Title for the figure label.",inputMethod:"textfield",icon:"text-format",required:!1},{property:"figureLabelDescription",title:"Figure Label Description",description:"Description for the figure label.",inputMethod:"textfield",icon:"text-format",required:!1}]}}}}_exports.MediaImage=MediaImage,window.customElements.define(MediaImage.tag,MediaImage);class MediaImageCitation extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          display: block;
        }

        .citation {
          font-size: 12.8px;
          font-style: italic;
          color: #4c4c4c;
          margin: 15px 0 15px;
        }
      `]}render(){return _litElement.html`
      <div class="citation"><slot></slot></div>
    `}static get tag(){return"media-image-citation"}}window.customElements.define(MediaImageCitation.tag,MediaImageCitation);class MediaImageCaption extends _litElement.LitElement{static get styles(){return[_litElement.css`
        :host {
          display: block;
        }

        .caption {
          padding-bottom: 25px;
          border-bottom: dashed 2px lightgray;
          margin-bottom: 25px;
          line-height: 1.5;
          font-size: 18px;
        }

        .caption ::slotted(*) {
          margin-top: 0;
        }
        .caption ::slotted(*:last-child) {
          margin-bottom: 0;
        }
      `]}render(){return _litElement.html`
      <div class="caption">
        ${this.__hasContent?"":_litElement.html`
              <slot id="slot"></slot>
            `}
      </div>
    `}static get tag(){return"media-image-caption"}}window.customElements.define(MediaImageCaption.tag,MediaImageCaption)});