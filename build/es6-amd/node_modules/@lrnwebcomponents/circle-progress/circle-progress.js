define(["exports","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/utils/render-status.js","../../@polymer/paper-styles/paper-styles.js","../../@polymer/iron-flex-layout/iron-flex-layout.js","../../@polymer/iron-resizable-behavior/iron-resizable-behavior.js","../../@polymer/polymer/lib/legacy/class.js"],function(_exports,_polymerElement,_renderStatus,_paperStyles,_ironFlexLayout,_ironResizableBehavior,_class){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.CircleProgress=void 0;class CircleProgress extends((0,_class.mixinBehaviors)([_ironResizableBehavior.IronResizableBehavior],_polymerElement.PolymerElement)){static get template(){return _polymerElement.html`
      <style include="paper-material-styles">
        :host {
          @apply --layout-vertical;
          @apply --layout-center-center;
          position: relative;
          width: var(--circle-progress-width, 64px);
          height: var(--circle-progress-height, 64px);
          margin: 24px;
          border-radius: 50%;
        }
        svg {
          position: absolute;
          top: 0;
          left: 0;
          display: none;
        }
        .circle-background {
          stroke: var(--circle-progress-bg-stroke-color, --paper-grey-100);
        }
        .circle-foreground {
          transition: stroke-dashoffset var(--circle-progress-transition, 150ms);
          stroke: var(--circle-progress-stroke-color, blue);
          stroke-linecap: var(--circle-progress-stroke-linecap, round);
        }
      </style>

      <svg id="circle" width="100%" height="100%">
        <circle
          class="circle-background"
          r\$="[[_radius]]"
          cx\$="[[_cx]]"
          cy\$="[[_cy]]"
          fill="transparent"
          stroke-width\$="[[strokeWidth]]"
        ></circle>
        <circle
          class="circle-foreground"
          r\$="[[_radius]]"
          cx\$="[[_cx]]"
          cy\$="[[_cy]]"
          fill="transparent"
          stroke-width\$="[[strokeWidth]]"
          stroke-dasharray\$="[[_dasharray]]"
          stroke-dashoffset\$="[[_dashoffset]]"
          transform\$="[[_transform]]"
        ></circle>
      </svg>
      <slot></slot>
    `}static get tag(){return"circle-progress"}static get properties(){let props={value:{name:"value",type:"Number",value:0},max:{name:"max",type:"Number",value:100},strokeWidth:{name:"strokeWidth",type:"Number",value:4},angle:{name:"angle",type:"Number",value:-90},_cx:{name:"_cx",type:"Number",value:null},_cy:{name:"_cy",type:"Number",value:null},_radius:{name:"_radius",type:"Number",computed:"_computeRadius(_cx, _cy, strokeWidth)"},_transform:{name:"_transform",type:"String",computed:"_computeTransform(angle, _cx, _cy)"},_dasharray:{name:"_dasharray",type:"Number",computed:"_computeDashArray(_radius)"},_dashoffset:{name:"_dashoffset",type:"Number",computed:"_computeDashOffset(value, max, _dasharray)"}};return super.properties&&(props=Object.assign(props,super.properties)),props}connectedCallback(){super.connectedCallback(),(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("iron-resize",this._onIronResize.bind(this))})}disconnectedCallback(){this.removeEventListener("iron-resize",this._onIronResize.bind(this)),super.disconnectedCallback()}_computeDashArray(radius){return 2*Math.PI*radius}_computeDashOffset(value,max,dasharray){return(1-value/max)*dasharray}_computeRadius(cx,cy,strokeWidth){return cx&&cy?Math.max(0,Math.min(cx,cy)-strokeWidth/2):0}_computeTransform(angle,cx,cy){return cx&&cy?"rotate("+angle+", "+cx+", "+cy+")":""}_onIronResize(){this.offsetWidth&&this.offsetHeight&&(this._cx=this.offsetWidth/2,this._cy=this.offsetHeight/2,this.$.circle.style.display="block")}}_exports.CircleProgress=CircleProgress,window.customElements.define(CircleProgress.tag,CircleProgress)});