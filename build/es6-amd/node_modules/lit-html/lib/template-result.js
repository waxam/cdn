define(["exports","./dom.js","./template.js"],(function(_exports,_dom,_template){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.SVGTemplateResult=_exports.TemplateResult=void 0;
/**
   * @license
   * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
const commentMarker=` ${_template.marker} `;class TemplateResult{constructor(strings,values,type,processor){this.strings=strings,this.values=values,this.type=type,this.processor=processor}getHTML(){const l=this.strings.length-1;let html="",isCommentBinding=!1;for(let i=0;i<l;i++){const s=this.strings[i],commentOpen=s.lastIndexOf("\x3c!--");isCommentBinding=(commentOpen>-1||isCommentBinding)&&-1===s.indexOf("--\x3e",commentOpen+1);const attributeMatch=_template.lastAttributeNameRegex.exec(s);html+=null===attributeMatch?s+(isCommentBinding?commentMarker:_template.nodeMarker):s.substr(0,attributeMatch.index)+attributeMatch[1]+attributeMatch[2]+_template.boundAttributeSuffix+attributeMatch[3]+_template.marker}return html+=this.strings[l],html}getTemplateElement(){const template=document.createElement("template");return template.innerHTML=this.getHTML(),template}}_exports.TemplateResult=TemplateResult;_exports.SVGTemplateResult=class SVGTemplateResult extends TemplateResult{getHTML(){return`<svg>${super.getHTML()}</svg>`}getTemplateElement(){const template=super.getTemplateElement(),content=template.content,svgElement=content.firstChild;return content.removeChild(svgElement),(0,_dom.reparentNodes)(content,svgElement.firstChild),template}}}));