define(["exports", "../../tslib/tslib.es6.js", "../mwc-icon/mwc-icon.js", "../mwc-ripple/ripple-directive.js", "../../lit-element/lit-element.js", "../../lit-html/directives/class-map.js"], function (_exports, _tslibEs, _mwcIcon, _rippleDirective, _litElement, _classMap) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ButtonBase = void 0;

  /**
  @license
  Copyright 2019 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  class ButtonBase extends _litElement.LitElement {
    constructor() {
      super(...arguments);
      this.raised = false;
      this.unelevated = false;
      this.outlined = false;
      this.dense = false;
      this.disabled = false;
      this.trailingIcon = false;
      this.fullwidth = false;
      this.icon = '';
      this.label = '';
    }

    createRenderRoot() {
      return this.attachShadow({
        mode: 'open',
        delegatesFocus: true
      });
    }

    focus() {
      const buttonElement = this.buttonElement;

      if (buttonElement) {
        const ripple = buttonElement.ripple;

        if (ripple) {
          ripple.handleFocus();
        }

        buttonElement.focus();
      }
    }

    blur() {
      const buttonElement = this.buttonElement;

      if (buttonElement) {
        const ripple = buttonElement.ripple;

        if (ripple) {
          ripple.handleBlur();
        }

        buttonElement.blur();
      }
    }

    render() {
      const classes = {
        'mdc-button--raised': this.raised,
        'mdc-button--unelevated': this.unelevated,
        'mdc-button--outlined': this.outlined,
        'mdc-button--dense': this.dense
      };
      return (0, _litElement.html)`
      <button
          id="button"
          class="mdc-button ${(0, _classMap.classMap)(classes)}"
          ?disabled="${this.disabled}"
          aria-label="${this.label || this.icon}">
        <div class="mdc-button__ripple"></div>
        <span class="leading-icon">
          <slot name="icon">
            ${this.icon && !this.trailingIcon ? this.renderIcon(this.icon) : ''}
          </slot>
        </span>
        <span class="mdc-button__label">${this.label}</span>
        <slot></slot>
        <span class="trailing-icon">
          <slot name="trailingIcon">
            ${this.icon && this.trailingIcon ? this.renderIcon(this.icon) : ''}
          </slot>
        </span>
      </button>`;
    }

    renderIcon(icon) {
      return (0, _litElement.html)`
      <mwc-icon class="mdc-button__icon">
        ${icon}
      </mwc-icon>`;
    }

    firstUpdated() {
      this.buttonElement.ripple = (0, _rippleDirective.rippleNode)({
        surfaceNode: this.buttonElement,
        unbounded: false
      });
    }

  }

  _exports.ButtonBase = ButtonBase;
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean
  })], ButtonBase.prototype, "raised", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean
  })], ButtonBase.prototype, "unelevated", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean
  })], ButtonBase.prototype, "outlined", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean
  })], ButtonBase.prototype, "dense", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean,
    reflect: true
  })], ButtonBase.prototype, "disabled", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean
  })], ButtonBase.prototype, "trailingIcon", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean,
    reflect: true
  })], ButtonBase.prototype, "fullwidth", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: String
  })], ButtonBase.prototype, "icon", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: String
  })], ButtonBase.prototype, "label", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.query)('#button')], ButtonBase.prototype, "buttonElement", void 0);
});