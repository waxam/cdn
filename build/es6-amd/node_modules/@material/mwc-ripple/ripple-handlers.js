define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RippleHandlers = void 0;

  /**
   * Class that encapsulates the events handlers for `mwc-ripple`
   *
   *
   * Example:
   * ```
   * class XFoo extends LitElement {
   *   async getRipple() {
   *     this.renderRipple = true;
   *     await this.updateComplete;
   *     return this.renderRoot.querySelector('mwc-ripple');
   *   }
   *   rippleHandlers = new RippleHandlers(() => this.getRipple());
   *
   *   render() {
   *     return html`
   *       <div @mousedown=${this.rippleHandlers.activate}></div>
   *       ${this.renderRipple ? html`<mwc-ripple></mwc-ripple>` : ''}
   *     `;
   *   }
   * }
   * ```
   */
  class RippleHandlers {
    constructor(
    /** Function that returns a `mwc-ripple` */
    rippleFn) {
      this.activate = ev => {
        rippleFn().then(r => {
          r && r.activate(ev);
        });
      };

      this.deactivate = () => {
        rippleFn().then(r => {
          r && r.deactivate();
        });
      };

      this.handleFocus = () => {
        rippleFn().then(r => {
          r && r.handleFocus();
        });
      };

      this.handleBlur = () => {
        rippleFn().then(r => {
          r && r.handleBlur();
        });
      };

      this.handleMouseEnter = () => {
        rippleFn().then(r => {
          r && r.handleMouseEnter();
        });
      };

      this.handleMouseLeave = () => {
        rippleFn().then(r => {
          r && r.handleMouseLeave();
        });
      };
    }

  }

  _exports.RippleHandlers = RippleHandlers;
});