define(["exports", "../dom/events.js", "../dom/ponyfill.js", "../ripple/foundation.js", "../ripple/util.js", "../../lit-html/lit-html.js", "./mwc-ripple-global-css.js"], function (_exports, _events, _ponyfill, _foundation, _util, _litHtml, _mwcRippleGlobalCss) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ripple = _exports.rippleNode = void 0;
  _foundation = babelHelpers.interopRequireDefault(_foundation);

  /**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  const supportsCssVariablesWin = (0, _util.supportsCssVariables)(window); // NOTE: This is a workaround for
  // https://bugs.webkit.org/show_bug.cgi?id=173027. Since keyframes on
  // pseudo-elements (:after) are not supported in Shadow DOM, we put the keyframe
  // style into the <head> element.

  const isSafari = navigator.userAgent.match(/Safari/);
  let didApplyRippleStyle = false;

  const applyRippleStyle = () => {
    didApplyRippleStyle = true;
    const styleElement = document.createElement('style');
    const part = new _litHtml.NodePart({
      templateFactory: _litHtml.templateFactory
    });
    part.appendInto(styleElement);
    part.setValue(_mwcRippleGlobalCss.style);
    part.commit(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

    document.head.appendChild(styleElement);
  };
  /**
   * Applied a ripple to the node specified by {surfaceNode}.
   * @param options {RippleNodeOptions}
   */


  const rippleNode = options => {
    if (isSafari && !didApplyRippleStyle) {
      applyRippleStyle();
    } // TODO(sorvell): This directive requires bringing css yourself. We probably
    // need to do this because of ShadyCSS, but on Safari, the keyframes styling
    // must be global. Perhaps this directive could fix that.


    const surfaceNode = options.surfaceNode;
    const interactionNode = options.interactionNode || surfaceNode; // only style interaction node if not in the same root

    if (interactionNode.getRootNode() !== surfaceNode.getRootNode()) {
      if (interactionNode.style.position === '') {
        interactionNode.style.position = 'relative';
      }
    }

    const adapter = {
      browserSupportsCssVars: () => supportsCssVariablesWin,
      isUnbounded: () => options.unbounded === undefined ? true : options.unbounded,
      isSurfaceActive: () => (0, _ponyfill.matches)(interactionNode, ':active'),
      isSurfaceDisabled: () => Boolean(interactionNode.hasAttribute('disabled')),
      addClass: className => surfaceNode.classList.add(className),
      removeClass: className => surfaceNode.classList.remove(className),
      containsEventTarget: target => interactionNode.contains(target),
      registerInteractionHandler: (type, handler) => interactionNode.addEventListener(type, handler, (0, _events.applyPassive)()),
      deregisterInteractionHandler: (type, handler) => interactionNode.removeEventListener(type, handler, (0, _events.applyPassive)()),
      registerDocumentInteractionHandler: (evtType, handler) => // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      document.documentElement.addEventListener(evtType, handler, (0, _events.applyPassive)()),
      deregisterDocumentInteractionHandler: (evtType, handler) => // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      document.documentElement.removeEventListener(evtType, handler, (0, _events.applyPassive)()),
      registerResizeHandler: handler => window.addEventListener('resize', handler),
      deregisterResizeHandler: handler => window.removeEventListener('resize', handler),
      updateCssVariable: (varName, value) => surfaceNode.style.setProperty(varName, value),
      computeBoundingRect: () => surfaceNode.getBoundingClientRect(),
      getWindowPageOffset: () => ({
        x: window.pageXOffset,
        y: window.pageYOffset
      })
    };
    const rippleFoundation = new _foundation.default(adapter);
    rippleFoundation.init();
    return rippleFoundation;
  };

  _exports.rippleNode = rippleNode;
  const rippleInteractionNodes = new WeakMap();
  /**
   * A directive that applies a Material ripple to a part node. The directive
   * should be applied to a PropertyPart.
   * @param options {RippleOptions}
   */

  const ripple = (0, _litHtml.directive)((options = {}) => part => {
    const surfaceNode = part.committer.element;
    const interactionNode = options.interactionNode || surfaceNode;
    let rippleFoundation = part.value; // if the interaction node changes, destroy and invalidate the foundation.

    const existingInteractionNode = rippleInteractionNodes.get(rippleFoundation);

    if (existingInteractionNode !== undefined && existingInteractionNode !== interactionNode) {
      rippleFoundation.destroy();
      rippleFoundation = _litHtml.noChange;
    } // make the ripple, if needed


    if (rippleFoundation === _litHtml.noChange) {
      rippleFoundation = rippleNode(Object.assign({}, options, {
        surfaceNode
      }));
      rippleInteractionNodes.set(rippleFoundation, interactionNode);
      part.setValue(rippleFoundation); // otherwise update settings as needed.
    } else {
      if (options.unbounded !== undefined) {
        rippleFoundation.setUnbounded(options.unbounded);
      }

      if (options.disabled !== undefined) {
        rippleFoundation.setUnbounded(options.disabled);
      }
    }

    if (options.active === true) {
      rippleFoundation.activate();
    } else if (options.active === false) {
      rippleFoundation.deactivate();
    }
  });
  _exports.ripple = ripple;
});