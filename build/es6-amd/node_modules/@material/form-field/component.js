define(["exports", "../../tslib/tslib.es6.js", "../base/component.js", "./foundation.js"], function (_exports, tslib_1, _component, _foundation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MDCFormField = void 0;
  tslib_1 = babelHelpers.interopRequireWildcard(tslib_1);

  /**
   * @license
   * Copyright 2017 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var MDCFormField =
  /** @class */
  function (_super) {
    tslib_1.__extends(MDCFormField, _super);

    function MDCFormField() {
      return _super !== null && _super.apply(this, arguments) || this;
    }

    MDCFormField.attachTo = function (root) {
      return new MDCFormField(root);
    };

    Object.defineProperty(MDCFormField.prototype, "input", {
      get: function () {
        return this.input_;
      },
      set: function (input) {
        this.input_ = input;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCFormField.prototype, "label_", {
      get: function () {
        var LABEL_SELECTOR = _foundation.MDCFormFieldFoundation.strings.LABEL_SELECTOR;
        return this.root_.querySelector(LABEL_SELECTOR);
      },
      enumerable: true,
      configurable: true
    });

    MDCFormField.prototype.getDefaultFoundation = function () {
      var _this = this; // DO NOT INLINE this variable. For backward compatibility, foundations take a Partial<MDCFooAdapter>.
      // To ensure we don't accidentally omit any methods, we need a separate, strongly typed adapter variable.


      var adapter = {
        activateInputRipple: function () {
          if (_this.input_ && _this.input_.ripple) {
            _this.input_.ripple.activate();
          }
        },
        deactivateInputRipple: function () {
          if (_this.input_ && _this.input_.ripple) {
            _this.input_.ripple.deactivate();
          }
        },
        deregisterInteractionHandler: function (evtType, handler) {
          if (_this.label_) {
            _this.label_.removeEventListener(evtType, handler);
          }
        },
        registerInteractionHandler: function (evtType, handler) {
          if (_this.label_) {
            _this.label_.addEventListener(evtType, handler);
          }
        }
      };
      return new _foundation.MDCFormFieldFoundation(adapter);
    };

    return MDCFormField;
  }(_component.MDCComponent);

  _exports.MDCFormField = MDCFormField;
});