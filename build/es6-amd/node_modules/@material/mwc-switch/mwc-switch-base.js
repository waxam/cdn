define(["exports", "../../tslib/tslib.es6.js", "../mwc-ripple/mwc-ripple.js", "../mwc-base/form-element.js", "../mwc-base/observer.js", "../mwc-ripple/ripple-handlers.js", "../switch/foundation.js", "../../lit-element/lit-element.js"], function (_exports, _tslibEs, _mwcRipple, _formElement, _observer, _rippleHandlers, _foundation, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SwitchBase = void 0;
  _foundation = babelHelpers.interopRequireDefault(_foundation);

  /**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  class SwitchBase extends _formElement.FormElement {
    constructor() {
      super(...arguments);
      this.checked = false;
      this.disabled = false;
      this.shouldRenderRipple = false;
      this.mdcFoundationClass = _foundation.default;
      this.rippleHandlers = new _rippleHandlers.RippleHandlers(() => {
        this.shouldRenderRipple = true;
        return this.ripple;
      });
    }

    changeHandler(e) {
      this.mdcFoundation.handleChange(e); // catch "click" event and sync properties

      this.checked = this.formElement.checked;
    }

    createAdapter() {
      return Object.assign(Object.assign({}, (0, _formElement.addHasRemoveClass)(this.mdcRoot)), {
        setNativeControlChecked: checked => {
          this.formElement.checked = checked;
        },
        setNativeControlDisabled: disabled => {
          this.formElement.disabled = disabled;
        },
        setNativeControlAttr: (attr, value) => {
          this.formElement.setAttribute(attr, value);
        }
      });
    }

    renderRipple() {
      return (0, _litElement.html)`${this.shouldRenderRipple ? (0, _litElement.html)`
        <mwc-ripple 
          .accent="${this.checked}" 
          .disabled="${this.disabled}" 
          unbounded>
        </mwc-ripple>` : (0, _litElement.html)``}`;
    }

    focus() {
      const formElement = this.formElement;

      if (formElement) {
        this.rippleHandlers.startFocus();
        formElement.focus();
      }
    }

    blur() {
      const formElement = this.formElement;

      if (formElement) {
        this.rippleHandlers.endFocus();
        formElement.blur();
      }
    }

    render() {
      return (0, _litElement.html)`
      <div class="mdc-switch">
        <div class="mdc-switch__track"></div>
        <div class="mdc-switch__thumb-underlay">
          ${this.renderRipple()}
          <div class="mdc-switch__thumb">
            <input
              type="checkbox"
              id="basic-switch"
              class="mdc-switch__native-control"
              role="switch"
              @change="${this.changeHandler}"
              @focus="${this.handleRippleFocus}"
              @blur="${this.handleRippleBlur}"
              @mousedown="${this.handleRippleMouseDown}"
              @mouseenter="${this.handleRippleMouseEnter}"
              @mouseleave="${this.handleRippleMouseLeave}"
              @touchstart="${this.handleRippleTouchStart}"
              @touchend="${this.handleRippleDeactivate}"
              @touchcancel="${this.handleRippleDeactivate}">
          </div>
        </div>
      </div>`;
    }

    handleRippleMouseDown(event) {
      const onUp = () => {
        window.removeEventListener('mouseup', onUp);
        this.handleRippleDeactivate();
      };

      window.addEventListener('mouseup', onUp);
      this.rippleHandlers.startPress(event);
    }

    handleRippleTouchStart(event) {
      this.rippleHandlers.startPress(event);
    }

    handleRippleDeactivate() {
      this.rippleHandlers.endPress();
    }

    handleRippleMouseEnter() {
      this.rippleHandlers.startHover();
    }

    handleRippleMouseLeave() {
      this.rippleHandlers.endHover();
    }

    handleRippleFocus() {
      this.rippleHandlers.startFocus();
    }

    handleRippleBlur() {
      this.rippleHandlers.endFocus();
    }

  }

  _exports.SwitchBase = SwitchBase;
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean
  }), (0, _observer.observer)(function (value) {
    this.mdcFoundation.setChecked(value);
  })], SwitchBase.prototype, "checked", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.property)({
    type: Boolean
  }), (0, _observer.observer)(function (value) {
    this.mdcFoundation.setDisabled(value);
  })], SwitchBase.prototype, "disabled", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.query)('.mdc-switch')], SwitchBase.prototype, "mdcRoot", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.query)('input')], SwitchBase.prototype, "formElement", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.queryAsync)('mwc-ripple')], SwitchBase.prototype, "ripple", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.internalProperty)()], SwitchBase.prototype, "shouldRenderRipple", void 0);
  (0, _tslibEs.__decorate)([(0, _litElement.eventOptions)({
    passive: true
  })], SwitchBase.prototype, "handleRippleMouseDown", null);
  (0, _tslibEs.__decorate)([(0, _litElement.eventOptions)({
    passive: true
  })], SwitchBase.prototype, "handleRippleTouchStart", null);
});