define(["exports", "../dom/ponyfill.js"], function (_exports, _ponyfill) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.findAssignedElement = findAssignedElement;
  _exports.addHasRemoveClass = addHasRemoveClass;
  _exports.doesElementContainFocus = _exports.deepActiveElementPath = _exports.supportsPassiveEventListener = _exports.isNodeElement = void 0;

  /**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  /**
   * Return an element assigned to a given slot that matches the given selector
   */

  /**
   * Determines whether a node is an element.
   *
   * @param node Node to check
   */
  const isNodeElement = node => {
    return node.nodeType === Node.ELEMENT_NODE;
  };

  _exports.isNodeElement = isNodeElement;

  function findAssignedElement(slot, selector) {
    for (const node of slot.assignedNodes({
      flatten: true
    })) {
      if (isNodeElement(node)) {
        const el = node;

        if ((0, _ponyfill.matches)(el, selector)) {
          return el;
        }
      }
    }

    return null;
  }

  function addHasRemoveClass(element) {
    return {
      addClass: className => {
        element.classList.add(className);
      },
      removeClass: className => {
        element.classList.remove(className);
      },
      hasClass: className => element.classList.contains(className)
    };
  }

  let supportsPassive = false;

  const fn = () => {};

  const optionsBlock = {
    get passive() {
      supportsPassive = true;
      return false;
    }

  };
  document.addEventListener('x', fn, optionsBlock);
  document.removeEventListener('x', fn);
  /**
   * Do event listeners suport the `passive` option?
   */

  const supportsPassiveEventListener = supportsPassive;
  _exports.supportsPassiveEventListener = supportsPassiveEventListener;

  const deepActiveElementPath = (doc = window.document) => {
    let activeElement = doc.activeElement;
    const path = [];

    if (!activeElement) {
      return path;
    }

    while (activeElement) {
      path.push(activeElement);

      if (activeElement.shadowRoot) {
        activeElement = activeElement.shadowRoot.activeElement;
      } else {
        break;
      }
    }

    return path;
  };

  _exports.deepActiveElementPath = deepActiveElementPath;

  const doesElementContainFocus = element => {
    const activePath = deepActiveElementPath();

    if (!activePath.length) {
      return false;
    }

    const deepActiveElement = activePath[activePath.length - 1];
    const focusEv = new Event('check-if-focused', {
      bubbles: true,
      composed: true
    });
    let composedPath = [];

    const listener = ev => {
      composedPath = ev.composedPath();
    };

    document.body.addEventListener('check-if-focused', listener);
    deepActiveElement.dispatchEvent(focusEv);
    document.body.removeEventListener('check-if-focused', listener);
    return composedPath.indexOf(element) !== -1;
  };

  _exports.doesElementContainFocus = doesElementContainFocus;
});