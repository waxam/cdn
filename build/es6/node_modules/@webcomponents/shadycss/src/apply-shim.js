/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
import{forEachRule,processVariableAndFallback,rulesForStyle,toCssText,gatherStyleText}from"./style-util.js";import{MIXIN_MATCH,VAR_ASSIGN}from"./common-regex.js";import{detectMixin}from"./common-utils.js";import{StyleNode}from"./css-parse.js";const APPLY_NAME_CLEAN=/;\s*/m,INITIAL_INHERIT=/^\s*(initial)|(inherit)\s*$/,IMPORTANT=/\s*!important/;class MixinMap{constructor(){this._map={}}set(name,props){name=name.trim(),this._map[name]={properties:props,dependants:{}}}get(name){return name=name.trim(),this._map[name]||null}}let invalidCallback=null;class ApplyShim{constructor(){this._currentElement=null,this._measureElement=null,this._map=new MixinMap}detectMixin(cssText){return detectMixin(cssText)}gatherStyles(template){const styleText=gatherStyleText(template.content);if(styleText){const style=document.createElement("style");return style.textContent=styleText,template.content.insertBefore(style,template.content.firstChild),style}return null}transformTemplate(template,elementName){void 0===template._gatheredStyle&&(template._gatheredStyle=this.gatherStyles(template));const style=template._gatheredStyle;return style?this.transformStyle(style,elementName):null}transformStyle(style,elementName=""){let ast=rulesForStyle(style);return this.transformRules(ast,elementName),style.textContent=toCssText(ast),ast}transformCustomStyle(style){let ast=rulesForStyle(style);return forEachRule(ast,rule=>{":root"===rule.selector&&(rule.selector="html"),this.transformRule(rule)}),style.textContent=toCssText(ast),ast}transformRules(rules,elementName){this._currentElement=elementName,forEachRule(rules,r=>{this.transformRule(r)}),this._currentElement=null}transformRule(rule){rule.cssText=this.transformCssText(rule.parsedCssText,rule),":root"===rule.selector&&(rule.selector=":host > *")}transformCssText(cssText,rule){return cssText=cssText.replace(VAR_ASSIGN,(matchText,propertyName,valueProperty,valueMixin)=>this._produceCssProperties(matchText,propertyName,valueProperty,valueMixin,rule)),this._consumeCssProperties(cssText,rule)}_getInitialValueForProperty(property){return this._measureElement||(this._measureElement=document.createElement("meta"),this._measureElement.setAttribute("apply-shim-measure",""),this._measureElement.style.all="initial",document.head.appendChild(this._measureElement)),window.getComputedStyle(this._measureElement).getPropertyValue(property)}_fallbacksFromPreviousRules(startRule){let topRule=startRule;for(;topRule.parent;)topRule=topRule.parent;const fallbacks={};let seenStartRule=!1;return forEachRule(topRule,r=>{seenStartRule=seenStartRule||r===startRule,seenStartRule||r.selector===startRule.selector&&Object.assign(fallbacks,this._cssTextToMap(r.parsedCssText))}),fallbacks}_consumeCssProperties(text,rule){let m=null;for(;m=MIXIN_MATCH.exec(text);){let matchText=m[0],mixinName=m[1],idx=m.index,applyPos=idx+matchText.indexOf("@apply"),afterApplyPos=idx+matchText.length,textBeforeApply=text.slice(0,applyPos),textAfterApply=text.slice(afterApplyPos),defaults=rule?this._fallbacksFromPreviousRules(rule):{};Object.assign(defaults,this._cssTextToMap(textBeforeApply));let replacement=this._atApplyToCssProperties(mixinName,defaults);text=`${textBeforeApply}${replacement}${textAfterApply}`,MIXIN_MATCH.lastIndex=idx+replacement.length}return text}_atApplyToCssProperties(mixinName,fallbacks){mixinName=mixinName.replace(APPLY_NAME_CLEAN,"");let vars=[],mixinEntry=this._map.get(mixinName);if(mixinEntry||(this._map.set(mixinName,{}),mixinEntry=this._map.get(mixinName)),mixinEntry){let p,parts,f;this._currentElement&&(mixinEntry.dependants[this._currentElement]=!0);const properties=mixinEntry.properties;for(p in properties)f=fallbacks&&fallbacks[p],parts=[p,": var(",mixinName,"_-_",p],f&&parts.push(",",f.replace(IMPORTANT,"")),parts.push(")"),IMPORTANT.test(properties[p])&&parts.push(" !important"),vars.push(parts.join(""))}return vars.join("; ")}_replaceInitialOrInherit(property,value){let match=INITIAL_INHERIT.exec(value);return match&&(value=match[1]?this._getInitialValueForProperty(property):"apply-shim-inherit"),value}_cssTextToMap(text,replaceInitialOrInherit=!1){let property,value,props=text.split(";"),out={};for(let p,sp,i=0;i<props.length;i++)p=props[i],p&&(sp=p.split(":"),sp.length>1&&(property=sp[0].trim(),value=sp.slice(1).join(":"),replaceInitialOrInherit&&(value=this._replaceInitialOrInherit(property,value)),out[property]=value));return out}_invalidateMixinEntry(mixinEntry){if(invalidCallback)for(let elementName in mixinEntry.dependants)elementName!==this._currentElement&&invalidCallback(elementName)}_produceCssProperties(matchText,propertyName,valueProperty,valueMixin,rule){if(valueProperty&&processVariableAndFallback(valueProperty,(prefix,value)=>{value&&this._map.get(value)&&(valueMixin=`@apply ${value};`)}),!valueMixin)return matchText;let mixinAsProperties=this._consumeCssProperties(""+valueMixin,rule),prefix=matchText.slice(0,matchText.indexOf("--")),mixinValues=this._cssTextToMap(mixinAsProperties,!0),combinedProps=mixinValues,mixinEntry=this._map.get(propertyName),oldProps=mixinEntry&&mixinEntry.properties;oldProps?combinedProps=Object.assign(Object.create(oldProps),mixinValues):this._map.set(propertyName,combinedProps);let p,v,out=[],needToInvalidate=!1;for(p in combinedProps)v=mixinValues[p],void 0===v&&(v="initial"),!oldProps||p in oldProps||(needToInvalidate=!0),out.push(`${propertyName}_-_${p}: ${v}`);return needToInvalidate&&this._invalidateMixinEntry(mixinEntry),mixinEntry&&(mixinEntry.properties=combinedProps),valueProperty&&(prefix=`${matchText};${prefix}`),`${prefix}${out.join("; ")};`}}ApplyShim.prototype.detectMixin=ApplyShim.prototype.detectMixin,ApplyShim.prototype.transformStyle=ApplyShim.prototype.transformStyle,ApplyShim.prototype.transformCustomStyle=ApplyShim.prototype.transformCustomStyle,ApplyShim.prototype.transformRules=ApplyShim.prototype.transformRules,ApplyShim.prototype.transformRule=ApplyShim.prototype.transformRule,ApplyShim.prototype.transformTemplate=ApplyShim.prototype.transformTemplate,ApplyShim.prototype._separator="_-_",Object.defineProperty(ApplyShim.prototype,"invalidCallback",{get:()=>invalidCallback,set(cb){invalidCallback=cb}});export default ApplyShim;