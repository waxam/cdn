/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
import ApplyShim from"../src/apply-shim.js";import templateMap from"../src/template-map.js";import{getIsExtends,toCssText,elementHasBuiltCss}from"../src/style-util.js";import*as ApplyShimUtils from"../src/apply-shim-utils.js";import{getComputedStyleValue,updateNativeProperties}from"../src/common-utils.js";import{CustomStyleInterfaceInterface}from"../src/custom-style-interface.js";import{nativeCssVariables,nativeShadow,cssBuild,disableRuntime}from"../src/style-settings.js";const applyShim=new ApplyShim;class ApplyShimInterface{constructor(){this.customStyleInterface=null,applyShim.invalidCallback=ApplyShimUtils.invalidate}ensure(){this.customStyleInterface||window.ShadyCSS.CustomStyleInterface&&(this.customStyleInterface=window.ShadyCSS.CustomStyleInterface,this.customStyleInterface.transformCallback=style=>{applyShim.transformCustomStyle(style)},this.customStyleInterface.validateCallback=()=>{requestAnimationFrame(()=>{this.customStyleInterface.enqueued&&this.flushCustomStyles()})})}prepareTemplate(template,elementName){if(this.ensure(),elementHasBuiltCss(template))return;templateMap[elementName]=template;let ast=applyShim.transformTemplate(template,elementName);template._styleAst=ast}flushCustomStyles(){if(this.ensure(),!this.customStyleInterface)return;let styles=this.customStyleInterface.processStyles();if(this.customStyleInterface.enqueued){for(let i=0;i<styles.length;i++){let cs=styles[i],style=this.customStyleInterface.getStyleForCustomStyle(cs);style&&applyShim.transformCustomStyle(style)}this.customStyleInterface.enqueued=!1}}styleSubtree(element,properties){if(this.ensure(),properties&&updateNativeProperties(element,properties),element.shadowRoot){this.styleElement(element);let shadowChildren=element.shadowRoot.children||element.shadowRoot.childNodes;for(let i=0;i<shadowChildren.length;i++)this.styleSubtree(shadowChildren[i])}else{let children=element.children||element.childNodes;for(let i=0;i<children.length;i++)this.styleSubtree(children[i])}}styleElement(element){this.ensure();let{is}=getIsExtends(element),template=templateMap[is];if((!template||!elementHasBuiltCss(template))&&template&&!ApplyShimUtils.templateIsValid(template)){ApplyShimUtils.templateIsValidating(template)||(this.prepareTemplate(template,is),ApplyShimUtils.startValidatingTemplate(template));let root=element.shadowRoot;if(root){let style=root.querySelector("style");style&&(style.__cssRules=template._styleAst,style.textContent=toCssText(template._styleAst))}}}styleDocument(properties){this.ensure(),this.styleSubtree(document.body,properties)}}if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){const applyShimInterface=new ApplyShimInterface;let CustomStyleInterface=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;window.ShadyCSS={prepareTemplate(template,elementName,elementExtends){applyShimInterface.flushCustomStyles(),applyShimInterface.prepareTemplate(template,elementName)},prepareTemplateStyles(template,elementName,elementExtends){window.ShadyCSS.prepareTemplate(template,elementName,elementExtends)},prepareTemplateDom(template,elementName){},styleSubtree(element,properties){applyShimInterface.flushCustomStyles(),applyShimInterface.styleSubtree(element,properties)},styleElement(element){applyShimInterface.flushCustomStyles(),applyShimInterface.styleElement(element)},styleDocument(properties){applyShimInterface.flushCustomStyles(),applyShimInterface.styleDocument(properties)},getComputedStyleValue:(element,property)=>getComputedStyleValue(element,property),flushCustomStyles(){applyShimInterface.flushCustomStyles()},nativeCss:nativeCssVariables,nativeShadow,cssBuild,disableRuntime},CustomStyleInterface&&(window.ShadyCSS.CustomStyleInterface=CustomStyleInterface)}window.ShadyCSS.ApplyShim=applyShim;