/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
export const customElement=tagName=>classOrDescriptor=>"function"==typeof classOrDescriptor?((tagName,clazz)=>(window.customElements.define(tagName,clazz),clazz))(tagName,classOrDescriptor):((tagName,descriptor)=>{const{kind,elements}=descriptor;return{kind,elements,finisher(clazz){window.customElements.define(tagName,clazz)}}})(tagName,classOrDescriptor);const standardProperty=(options,element)=>"method"!==element.kind||!element.descriptor||"value"in element.descriptor?{kind:"field",key:Symbol(),placement:"own",descriptor:{},initializer(){"function"==typeof element.initializer&&(this[element.key]=element.initializer.call(this))},finisher(clazz){clazz.createProperty(element.key,options)}}:Object.assign({},element,{finisher(clazz){clazz.createProperty(element.key,options)}}),legacyProperty=(options,proto,name)=>{proto.constructor.createProperty(name,options)};export function property(options){return(protoOrDescriptor,name)=>void 0!==name?legacyProperty(options,protoOrDescriptor,name):standardProperty(options,protoOrDescriptor)}export function query(selector){return(protoOrDescriptor,name)=>{const descriptor={get(){return this.renderRoot.querySelector(selector)},enumerable:!0,configurable:!0};return void 0!==name?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor)}}export function queryAll(selector){return(protoOrDescriptor,name)=>{const descriptor={get(){return this.renderRoot.querySelectorAll(selector)},enumerable:!0,configurable:!0};return void 0!==name?legacyQuery(descriptor,protoOrDescriptor,name):standardQuery(descriptor,protoOrDescriptor)}}const legacyQuery=(descriptor,proto,name)=>{Object.defineProperty(proto,name,descriptor)},standardQuery=(descriptor,element)=>({kind:"method",placement:"prototype",key:element.key,descriptor});export const eventOptions=options=>(protoOrDescriptor,name)=>void 0!==name?((options,proto,name)=>{Object.assign(proto[name],options)})(options,protoOrDescriptor,name):((options,element)=>Object.assign({},element,{finisher(clazz){Object.assign(clazz.prototype[element.key],options)}}))(options,protoOrDescriptor);