import{Observable}from"../Observable.js";import{isPromise}from"../util/isPromise.js";import{isArrayLike}from"../util/isArrayLike.js";import{isInteropObservable}from"../util/isInteropObservable.js";import{isIterable}from"../util/isIterable.js";import{fromArray}from"./fromArray.js";import{fromPromise}from"./fromPromise.js";import{fromIterable}from"./fromIterable.js";import{fromObservable}from"./fromObservable.js";import{subscribeTo}from"../util/subscribeTo.js";export function from(input,scheduler){if(!scheduler){if(input instanceof Observable){return input}return new Observable(subscribeTo(input))}if(null!=input){if(isInteropObservable(input)){return fromObservable(input,scheduler)}else if(isPromise(input)){return fromPromise(input,scheduler)}else if(isArrayLike(input)){return fromArray(input,scheduler)}else if(isIterable(input)||"string"===typeof input){return fromIterable(input,scheduler)}}throw new TypeError((null!==input&&typeof input||input)+" is not observable")}