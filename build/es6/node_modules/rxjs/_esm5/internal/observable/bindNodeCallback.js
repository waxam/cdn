import{Observable}from"../Observable.js";import{AsyncSubject}from"../AsyncSubject.js";import{map}from"../operators/map.js";import{canReportError}from"../util/canReportError.js";import{isScheduler}from"../util/isScheduler.js";import{isArray}from"../util/isArray.js";export function bindNodeCallback(callbackFunc,resultSelector,scheduler){if(resultSelector){if(isScheduler(resultSelector)){scheduler=resultSelector}else{return function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}return bindNodeCallback(callbackFunc,scheduler).apply(void 0,args).pipe(map(function(args){return isArray(args)?resultSelector.apply(void 0,args):resultSelector(args)}))}}}return function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}var params={subject:void 0,args:args,callbackFunc:callbackFunc,scheduler:scheduler,context:this};return new Observable(function(subscriber){var context=params.context,subject=params.subject;if(!scheduler){if(!subject){subject=params.subject=new AsyncSubject;var handler=function(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++){innerArgs[_i]=arguments[_i]}var err=innerArgs.shift();if(err){subject.error(err);return}subject.next(1>=innerArgs.length?innerArgs[0]:innerArgs);subject.complete()};try{callbackFunc.apply(context,args.concat([handler]))}catch(err){if(canReportError(subject)){subject.error(err)}else{console.warn(err)}}}return subject.subscribe(subscriber)}else{return scheduler.schedule(dispatch,0,{params:params,subscriber:subscriber,context:context})}})}}function dispatch(state){var _this=this,params=state.params,subscriber=state.subscriber,context=state.context,callbackFunc=params.callbackFunc,args=params.args,scheduler=params.scheduler,subject=params.subject;if(!subject){subject=params.subject=new AsyncSubject;var handler=function(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++){innerArgs[_i]=arguments[_i]}var err=innerArgs.shift();if(err){_this.add(scheduler.schedule(dispatchError,0,{err:err,subject:subject}))}else{var value=1>=innerArgs.length?innerArgs[0]:innerArgs;_this.add(scheduler.schedule(dispatchNext,0,{value:value,subject:subject}))}};try{callbackFunc.apply(context,args.concat([handler]))}catch(err){this.add(scheduler.schedule(dispatchError,0,{err:err,subject:subject}))}}this.add(subject.subscribe(subscriber))}function dispatchNext(arg){var value=arg.value,subject=arg.subject;subject.next(value);subject.complete()}function dispatchError(arg){var err=arg.err,subject=arg.subject;subject.error(err)}