import{Observable}from"../Observable.js";import{isScheduler}from"../util/isScheduler.js";import{mergeAll}from"../operators/mergeAll.js";import{fromArray}from"./fromArray.js";export function merge(){for(var observables=[],_i=0;_i<arguments.length;_i++){observables[_i]=arguments[_i]}var concurrent=Number.POSITIVE_INFINITY,scheduler=null,last=observables[observables.length-1];if(isScheduler(last)){scheduler=observables.pop();if(1<observables.length&&"number"===typeof observables[observables.length-1]){concurrent=observables.pop()}}else if("number"===typeof last){concurrent=observables.pop()}if(null===scheduler&&1===observables.length&&observables[0]instanceof Observable){return observables[0]}return mergeAll(concurrent)(fromArray(observables,scheduler))}