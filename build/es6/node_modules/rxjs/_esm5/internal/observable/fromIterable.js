import{Observable}from"../Observable.js";import{Subscription}from"../Subscription.js";import{iterator as Symbol_iterator}from"../symbol/iterator.js";import{subscribeToIterable}from"../util/subscribeToIterable.js";export function fromIterable(input,scheduler){if(!input){throw new Error("Iterable cannot be null")}if(!scheduler){return new Observable(subscribeToIterable(input))}else{return new Observable(function(subscriber){var sub=new Subscription,iterator;sub.add(function(){if(iterator&&"function"===typeof iterator.return){iterator.return()}});sub.add(scheduler.schedule(function(){iterator=input[Symbol_iterator]();sub.add(scheduler.schedule(function(){if(subscriber.closed){return}var value,done;try{var result=iterator.next();value=result.value;done=result.done}catch(err){subscriber.error(err);return}if(done){subscriber.complete()}else{subscriber.next(value);this.schedule()}}))}));return sub})}}