/**
 * @license
 * Copyright 2018 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import{__decorate as e}from"../../tslib/tslib.es6.js";import t from"../form-field/foundation.js";import{BaseElement as i}from"../mwc-base/base-element.js";import{FormElement as o}from"../mwc-base/form-element.js";import{observer as s}from"../mwc-base/observer.js";import{findAssignedElement as l}from"../mwc-base/utils.js";import{html as a,property as r,query as n}from"../../lit-element/lit-element.js";import{classMap as p}from"../../lit-html/directives/class-map.js";export class FormfieldBase extends i{constructor(){super(...arguments),this.alignEnd=!1,this.spaceBetween=!1,this.nowrap=!1,this.label="",this.mdcFoundationClass=t}createAdapter(){return{registerInteractionHandler:(e,t)=>{this.labelEl.addEventListener(e,t)},deregisterInteractionHandler:(e,t)=>{this.labelEl.removeEventListener(e,t)},activateInputRipple:async()=>{const e=this.input;if(e instanceof o){const t=await e.ripple;t&&t.startPress()}},deactivateInputRipple:async()=>{const e=this.input;if(e instanceof o){const t=await e.ripple;t&&t.endPress()}}}}get input(){return l(this.slotEl,"*")}render(){const e={"mdc-form-field--align-end":this.alignEnd,"mdc-form-field--space-between":this.spaceBetween,"mdc-form-field--nowrap":this.nowrap};return a`
      <div class="mdc-form-field ${p(e)}">
        <slot></slot>
        <label class="mdc-label"
               @click="${this._labelClick}">${this.label}</label>
      </div>`}_labelClick(){const e=this.input;e&&(e.focus(),e.click())}}e([r({type:Boolean})],FormfieldBase.prototype,"alignEnd",void 0),e([r({type:Boolean})],FormfieldBase.prototype,"spaceBetween",void 0),e([r({type:Boolean})],FormfieldBase.prototype,"nowrap",void 0),e([r({type:String}),s((async function(e){const t=this.input;t&&("input"===t.localName?t.setAttribute("aria-label",e):t instanceof o&&(await t.updateComplete,t.setAriaLabel(e)))}))],FormfieldBase.prototype,"label",void 0),e([n(".mdc-form-field")],FormfieldBase.prototype,"mdcRoot",void 0),e([n("slot")],FormfieldBase.prototype,"slotEl",void 0),e([n("label")],FormfieldBase.prototype,"labelEl",void 0);