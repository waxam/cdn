/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
import*as t from"../../tslib/tslib.es6.js";import{MDCComponent as e}from"../base/component.js";import{applyPassive as n}from"../dom/events.js";import{matches as r}from"../dom/ponyfill.js";import{MDCRipple as o}from"../ripple/component.js";import{MDCRippleFoundation as i}from"../ripple/foundation.js";import{MDCSwitchFoundation as s}from"./foundation.js";var a=function(e){function MDCSwitch(){var t=null!==e&&e.apply(this,arguments)||this;return t.ripple_=t.createRipple_(),t}return t.__extends(MDCSwitch,e),MDCSwitch.attachTo=function(t){return new MDCSwitch(t)},MDCSwitch.prototype.destroy=function(){e.prototype.destroy.call(this),this.ripple_.destroy(),this.nativeControl_.removeEventListener("change",this.changeHandler_)},MDCSwitch.prototype.initialSyncWithDOM=function(){var e=this;this.changeHandler_=function(){for(var n,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];return(n=e.foundation_).handleChange.apply(n,t.__spread(r))},this.nativeControl_.addEventListener("change",this.changeHandler_),this.checked=this.checked},MDCSwitch.prototype.getDefaultFoundation=function(){var t=this;return new s({addClass:function(e){return t.root_.classList.add(e)},removeClass:function(e){return t.root_.classList.remove(e)},setNativeControlChecked:function(e){return t.nativeControl_.checked=e},setNativeControlDisabled:function(e){return t.nativeControl_.disabled=e},setNativeControlAttr:function(e,n){return t.nativeControl_.setAttribute(e,n)}})},Object.defineProperty(MDCSwitch.prototype,"ripple",{get:function(){return this.ripple_},enumerable:!0,configurable:!0}),Object.defineProperty(MDCSwitch.prototype,"checked",{get:function(){return this.nativeControl_.checked},set:function(t){this.foundation_.setChecked(t)},enumerable:!0,configurable:!0}),Object.defineProperty(MDCSwitch.prototype,"disabled",{get:function(){return this.nativeControl_.disabled},set:function(t){this.foundation_.setDisabled(t)},enumerable:!0,configurable:!0}),MDCSwitch.prototype.createRipple_=function(){var e=this,a=s.strings.RIPPLE_SURFACE_SELECTOR,c=this.root_.querySelector(a),u=t.__assign({},o.createAdapter(this),{addClass:function(t){return c.classList.add(t)},computeBoundingRect:function(){return c.getBoundingClientRect()},deregisterInteractionHandler:function(t,r){e.nativeControl_.removeEventListener(t,r,n())},isSurfaceActive:function(){return r(e.nativeControl_,":active")},isUnbounded:function(){return!0},registerInteractionHandler:function(t,r){e.nativeControl_.addEventListener(t,r,n())},removeClass:function(t){c.classList.remove(t)},updateCssVariable:function(t,e){c.style.setProperty(t,e)}});return new o(this.root_,new i(u))},Object.defineProperty(MDCSwitch.prototype,"nativeControl_",{get:function(){var t=s.strings.NATIVE_CONTROL_SELECTOR;return this.root_.querySelector(t)},enumerable:!0,configurable:!0}),MDCSwitch}(e);export{a as MDCSwitch};