import{html as t,PolymerElement as e}from"../../../@polymer/polymer/polymer-element.js";import"../../../@polymer/iron-a11y-keys/iron-a11y-keys.js";import"../../../@polymer/paper-icon-button/paper-icon-button.js";import{mtzMarkedControlBehavior as n}from"./mtz-marked-control-behavior.js";class MtzMarkedControlLink extends(n(e)){static get template(){return t`
      <style>
        :host {
          display: inline-block;
        }
      </style>

      <paper-icon-button
        icon="[[icon]]"
        noink="[[noink]]"
        on-click="_handleCommand"
        alt="[[title]]"
      ></paper-icon-button>

      <iron-a11y-keys
        keys="[[keys]]"
        on-keys-pressed="_handleCommand"
        target="[[__editor]]"
      ></iron-a11y-keys>
    `}static get tag(){return"mtz-marked-control-link"}static get properties(){return{...super.properties,title:String,icon:String,keys:String,noink:Boolean}}_handleCommand(t){t.preventDefault(),t.stopPropagation();const e=this.__editor,n=e.getSelection(),o=new RegExp("\\[(.*)\\]\\((.*)\\)"),r=n.text.match(o);let i,l;if(r){i=r[1],l=r[2];const t=l||i;e.replaceSelection(t),e.setSelection(n.start,n.end-(n.length-t.length))}else{if(this._isLink(n)){if(i=prompt("What text would you like to display?"),!i)return;l=n.text}else{if(l=prompt("What link would you like to use?"),!l)return;i=n.text}if(l.startsWith("http://"))return void alert("Links must be https://");const t=o[Symbol.replace]("[]()",`[${i}](${l})`);e.replaceSelection(t),e.setSelection(n.start,n.end+(t.length-n.length))}}_isLink(t){return t.text.startsWith("https://")}}window.customElements.define(MtzMarkedControlLink.tag,MtzMarkedControlLink);export{MtzMarkedControlLink};