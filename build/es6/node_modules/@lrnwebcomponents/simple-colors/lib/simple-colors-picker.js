import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import"../../../@polymer/polymer/lib/elements/dom-repeat.js";import{SimpleColors}from"../simple-colors.js";import"../../simple-picker/simple-picker.js";class SimpleColorsPicker extends SimpleColors{static get template(){return html`
      <style is="custom-style" include="simple-colors">
        :host {
          display: inline-block;
          --simple-picker-selected-option-outline: 2px dashed black;
          --simple-picker-active-option-outline: 2px solid black;
        }
        :host([hidden]) {
          display: none;
        }
      </style>
      <simple-picker
        id="picker"
        aria-labelledby$="[[ariaLabelledby]]"
        disabled$="[[disabled]]"
        expanded$="[[expanded]]"
        hide-option-labels$="[[shades]]"
        label$="[[label]]"
        on-change="_handleChange"
        on-collapse="_handleCollapse"
        on-expand="_handleExpand"
        on-option-focus="_handleOptionFocus"
        value$="{{value}}"
      >
      </simple-picker>
    `}static get properties(){return{ariaLabelledby:{name:"ariaLabelledby",type:String,value:null},disabled:{name:"disabled",type:Boolean,value:!1},expanded:{name:"expanded",type:Boolean,value:!1,reflectToAttribute:!0},label:{name:"label",type:String,value:null},options:{name:"options",type:Array,computed:"_getOptions(colors,shades,dark)",reflectToAttribute:!1,observer:!1},shades:{name:"shades",type:Boolean,value:!1,reflectToAttribute:!0},value:{name:"label",type:"String",value:null,reflectToAttribute:!0,notify:!0}}}static get tag(){return"simple-colors-picker"}static get behaviors(){return[SimpleColors]}_getOptions(colors,shades,dark){let options=[[]],theme=!1!==dark?"dark":"default";if(!1===shades){options=Object.keys(colors).map(key=>{return[{alt:key,style:"color: var(--simple-colors-"+theme+"-theme-grey-12); background-color: var(--simple-colors-"+theme+"-theme-"+key+"-4)",value:key}]});options.unshift([{alt:"none",style:"background-color: var(--simple-picker-background-color,#ddd)",value:null}])}else{let colorNames=Object.keys(colors);for(let i=0,shade;i<colors[colorNames[0]].length;i++){shade=Object.keys(colors).map(key=>{let name=key+"-"+(i+1),cssvar="--simple-colors-"+theme+"-theme-"+name;return{alt:name,style:"background-color: var("+cssvar+")",value:cssvar}});options.push(shade)}}this.$.picker.options=options}_handleChange(e){this.value=e.detail.value;this.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:this}))}_handleCollapse(){this.dispatchEvent(new CustomEvent("collapse",{detail:this}))}_handleExpand(){this.dispatchEvent(new CustomEvent("expand",{detail:this}))}_handleOptionFocus(){this.dispatchEvent(new CustomEvent("option-focus",{detail:this}))}}export{SimpleColorsPicker};window.customElements.define(SimpleColorsPicker.tag,SimpleColorsPicker);