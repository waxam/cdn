import{html,PolymerElement}from"../../../../@polymer/polymer/polymer-element.js";import"../../../../@polymer/polymer/lib/elements/dom-if.js";import{SimpleColors}from"../../simple-colors.js";import"./simple-colors-demo-select.js";class SimpleColorsInpectorContent extends SimpleColors{static get template(){return html`
      <style is="custom-style" include="simple-colors">
        :host {
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
          border: 1px solid var(--simple-colors-default-theme-grey-6);
          margin: 15px 0;
          padding: 0px;
          display: block;
        }
        :host([hidden]) {
          display: none;
        }
        :host .selectors {
          background-color: var(--simple-colors-default-theme-grey-2);
          padding: 2px;
          margin: 0 0 15px;
          font-family: monospace;
        }
        :host .slot {
          padding: var(--simple-colors-demo-padding, 0);
        }
        a,
        a[link] {
          color: var(--simple-colors-default-theme-blue-8);
        }
        a[visited] {
          color: var(--simple-colors-default-theme-purple-8);
        }
      </style>
      <div class="selectors">
        &lt;<em>parent-element</em>
        <label>
          accent-color<simple-colors-demo-select
            id="accent"
            label="accent-color"
            value$="[[accentColor]]"
            as-code
            on-accent-color-change="_handleAccentChange"
            options$="[[_getOptions(colors)]]"
          >
            <span slot="prefix">="</span> <span slot="suffix">" </span>
          </simple-colors-demo-select>
        </label>
        <label>
          dark<simple-colors-demo-select
            id="dark"
            label="dark"
            value$="[[dark]]"
            as-code
            on-dark-change="_handleDarkChange"
            options='["","dark"]'
          >
            <span slot="prefix">="</span> <span slot="suffix">" </span>
          </simple-colors-demo-select> </label
        >&gt;
      </div>
      <div class="slot"><slot></slot></div>
    `}static get properties(){return{nested:{name:"nested",type:"Boolean",value:!1,reflectToAttribute:!0,observer:!1},__accentColorChild:{name:"__accentColorChild",type:"String",value:null,reflectToAttribute:!1,observer:!1},__darkChild:{name:"__darkChild",type:"Boolean",value:!1,reflectToAttribute:!1,observer:!1}}}static get behaviors(){return[SimpleColors]}static get tag(){return"simple-colors-demo"}_getOptions(obj){return Object.keys(obj)}_handleAccentChange(){this.accentColor=this.$.accent.value}_handleDarkChange(){this.dark="dark"===this.$.dark.value?"dark":!1}_isNested(nested){return"false"!==nested&&!1!==nested}_updateParentAccent(){this.accentColor=this.$.parent.accentColor;this._updateChildAccent()}_updateParentDark(){this.dark="false"!==this.$.parent.dark;this._updateChildDark()}_updateChildAccent(){if("parent"===this.$.child.accentColor){this.__accentColorChild=this.$.parent.accentColor}else{this.__accentColorChild=this.$.child.accentColor}}_updateChildDark(){if("parent"===this.$.child.dark){this.__darkChild="false"!==this.$.parent.dark}else{this.__darkChild="false"!==this.$.child.dark}}ready(){super.ready()}connectedCallback(){super.connectedCallback()}}export{SimpleColorsInpectorContent};window.customElements.define(SimpleColorsInpectorContent.tag,SimpleColorsInpectorContent);