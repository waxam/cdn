import{html,PolymerElement}from"../../../../@polymer/polymer/polymer-element.js";import"../../../../@polymer/polymer/lib/elements/dom-repeat.js";import{SimpleColors}from"../../simple-colors.js";class SimpleColorsInspectorSelect extends SimpleColors{static get template(){return html`
      <style>
        :host {
          display: inline-block;
        }
        :host([hidden]) {
          display: none;
        }
        :host,
        :host label,
        :host select,
        :host option {
          font-family: monospace;
        }
      </style>
      <slot name="prefix"></slot
      ><select id="accent" on-change="_handleSelectChange">
        <template is="dom-repeat" items="[[_getOptions(options)]]" as="option">
          <option
            value="[[option.value]]"
            selected$="[[_optionSelected(option.name,value)]]"
            >[[option.name]]</option
          >
        </template> </select
      ><slot name="suffix"></slot>
    `}static get properties(){return{inherit:{name:"inherit",type:"Boolean",value:!1,reflectToAttribute:!0,observer:!1},label:{name:"label",type:"String",value:null,reflectToAttribute:!0,observer:!1},options:{name:"options",type:"Array",value:null,reflectToAttribute:!1,observer:!1},value:{name:"value",type:"String",value:null,reflectToAttribute:!0,observer:!1}}}static get tag(){return"simple-colors-demo-select"}_optionSelected(option,prop){return prop===option?!0:!1}_canInherit(inherit){return"false"!==inherit&&!1!==inherit}_getOption(attr,val){if("parent"===val){return"[["+attr.replace(/-([a-z])/g,function(g){return g[1].toUpperCase()})+"]]"}else{return val}}_getOptions(options){let arr=JSON.parse(options),opts=[];if(!1!==this.inherit)opts.push({name:"",value:""});if(!1!==this.inherit)opts.push({name:this._getOption(this.label,"parent"),value:"parent"});for(let i=0;i<arr.length;i++){opts.push({name:this._getOption(this.label,arr[i]),value:arr[i]})}return opts}_handleSelectChange(e){this.value=null!==e.path[0].value?e.path[0].value:"";this.dispatchEvent(new CustomEvent(this.label+"-change",{detail:this}))}ready(){super.ready()}connectedCallback(){super.connectedCallback()}}export{SimpleColorsInspectorSelect};window.customElements.define(SimpleColorsInspectorSelect.tag,SimpleColorsInspectorSelect);