import{html,PolymerElement}from"../../../../@polymer/polymer/polymer-element.js";import"../../../../@polymer/polymer/lib/elements/dom-repeat.js";import{SimpleColors}from"../../simple-colors.js";import"../simple-colors-picker.js";import"../../../simple-picker/simple-picker.js";class SimpleColorsContrasts extends SimpleColors{static get template(){return html`
      <style is="custom-style" include="simple-colors">
        :host {
        }
        tt {
          font-family: sans-serif;
        }
        li[disabled] label {
        }
        li[disabled] label:after {
          content: "N/A";
          color: red;
          margin-left: 10px;
          text-decoration: none;
        }
        li:last-child > div {
          line-height: 40px;
        }
        div.question {
          display: flex;
          align-items: center;
          justify-content: space-between;
          height: 40px;
        }
        div.question > * {
          margin-right: 10px;
          flex: 0 0 auto;
        }
        div.question > *:last-child {
          margin-right: 0px;
          flex: 1 0 auto;
        }
        .swatches,
        .swatch > div {
          display: flex;
          align-items: stretch;
          justify-content: flex-start;
        }
        .swatches {
          flex-wrap: wrap;
          width: 100%;
        }
        .swatch {
          flex: 1 1 50%;
        }
        .swatch > div {
          margin: 5px;
        }
        .swatch > div > * {
          padding: 0 5px;
          line-height: 30px;
        }
        .decoration {
          width: 40px;
          height: 30px;
        }
      </style>
      <ol>
        <li>
          <div class="question">
            <label for="color">What is your main color?</label>
            <simple-colors-picker 
              id="color" 
              dark$="[[dark]]" 
              on-change="_handleColorChange"
              shades
              value$="{{color}}">
            </simple-colors-picker>
           </div>
        </li>
        <li>
          <div class="question">
            <label for="bg">Are you using it as the background-color?</label>
            <input 
              id="bg"
              type="checkbox"
              name="bg" 
              on-change="_handleChange"
              value$="{{usedAsBg}}">
          </div>
        </li>
        <li>
          <div class="question">
            <label for="contrast">What color would you like to contrast?</label>
            <simple-colors-picker 
              id="contrast" 
              dark$="[[dark]]" 
              on-change="_handleContrastChange"
              value$="{{contrast}}">
            </div>
          </li>
          <li>
            <div class="question">
              <label for="decorative">Is the content decorative (like an outline or a border)?<label>
              <input 
                id="decorative"
                type="checkbox" 
                name="decorative" 
                on-change="_handleChange"
                value$="{{decorative}}">
            </div>
          </li>
          <li disabled$="[[decorative]]">
            <div class="question">
              <label for ="disabled">Is the item disabled?</label>
              <input 
                id="disabled"
                type="checkbox"
                hidden$="[[decorative]]" 
                name="disabled" 
                on-change="_handleChange"
                value$="{{disabledUi}}">
            </div>
          </li>
          <li disabled$="[[__disabledFont]]">
            <div class="question">
              <label for="font">What is the font-size?</label>
              <input 
                id="font"
                hidden$="[[__disabledFont]]" 
                type="text" 
                placeholder="14pt" 
                on-change="_handleChange"
                value$="{{fontsize}}">
            </div>
          </li>
         <li disabled$="[[__disabledFont]]">
          <div class="question">
            <label for="bold">Is the font bold?</label>
            <input 
              id="bold"
              type="checkbox" 
              hidden$="[[__disabledFont]]" 
              name="bold" 
              on-change="_handleChange"
              value$="{{bold}}">
          </div>
        </li>
        <li>
          <div>The following colors would meet WCAG 2.0 AA for contrasting <tt id="colorvar"></tt> in your use case:</div>
          <div class="swatches">
            <template is="dom-repeat" items="[[contrasts]]" as="shade">
              <div class="swatch" style$="[[shade.font]]">
                <div>
                  <div class="decoration" style$="[[shade.color]]"></div>
                  <tt class="text">[[shade.value]]</tt>
                </div>
              </div>
            </template>
          </div>
        </li>
      </ol>
    `}static get properties(){return{bold:{name:"bold",type:Boolean,value:!1},color:{name:"color",type:String,value:"--simple-colors-default-theme-grey-1"},contrast:{name:"contrast",type:String,value:"grey"},decorative:{name:"decorative",type:Boolean,value:!1},__disabledFont:{name:"__disabledFont",type:Boolean,computed:"_getDisabledFont(decorative,disabledUi)"},disabledUi:{name:"disabledUi",type:Boolean,value:!1},fontSize:{name:"fontSize",type:String,value:"14pt"},shades:{name:"shades",type:Boolean,value:!0,readOnly:!0},usedAsBg:{name:"usedAsBg",type:Boolean,value:!1},contrasts:{name:"contrasts",type:Array,computed:"_getContrasts(bold,color,colors,contrast,dark,__disabledFont,fontSize,usedAsBg)",reflectToAttribute:!1,observer:!1}}}static get tag(){return"simple-colors-contrasts"}static get behaviors(){return[SimpleColors]}_handleColorChange(e){this.color=e.detail.value}_handleContrastChange(e){this.contrast=e.detail.value}_handleChange(e){switch(e.path[0].id){case"decorative":this.decorative=e.path[0].checked;break;case"disabled":this.disabledUi=e.path[0].checked;break;case"bold":this.bold=e.path[0].checked;break;case"font":this.fontSize=e.path[0].value;break;case"bg":this.usedAsBg=e.path[0].checked;break;}}_getDisabledFont(decorative,disabledUi){console.log("_getDisabledFont",decorative||disabledUi?!0:!1);return decorative||disabledUi?!0:!1}_getContrasts(bold,color,colors,contrast,dark,__disabledFont,fontSize="14pt"){console.log(this.__disabledFont);let options=[],disabled=!1!==this.__disabledFont,wcag=this.__wcagContrast,fontUnit=fontSize.includes("pt")?"pt":"px",fontVal=parseInt(fontSize.replace(fontUnit,"")),minBold="pt"===fontUnit?14:18.66,minReg="pt"===fontUnit?18:24,size=bold&&fontVal>minBold||fontVal>minReg?"large":"small",colorData=this.color.replace("--","").split("-"),theme=colorData[2],grey="grey"===colorData[4]||"grey"===contrast?"greyOnColor":"colorOnColor",level=colorData[5],min=disabled?1:wcag[grey][size][level-1].minLevelContrast,max=disabled?this.colors[contrast].length:wcag[grey][size][level-1].maxLevelContrast;for(let i=min,color2;i<=max;i++){color2="--simple-colors-"+theme+"-theme-"+contrast+"-"+i;options.push({value:color2,font:"font-size: "+fontVal+fontUnit+";",color:"background-color: var("+color2+");"})}this.$.colorvar.innerHTML=color;return options}}export{SimpleColorsContrasts};window.customElements.define(SimpleColorsContrasts.tag,SimpleColorsContrasts);