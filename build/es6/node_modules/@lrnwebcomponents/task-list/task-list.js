import{LitElement as e,html as t,css as i}from"../../lit/index.js";import{SchemaBehaviors as r}from"../schema-behaviors/schema-behaviors.js";import{ReplaceWithPolyfill as s}from"../utils/utils.js";Element.prototype.replaceWith||(Element.prototype.replaceWith=s),CharacterData.prototype.replaceWith||(CharacterData.prototype.replaceWith=s),DocumentType.prototype.replaceWith||(DocumentType.prototype.replaceWith=s);class TaskList extends(r(e)){static get styles(){return[i`
        :host {
          display: block;
          border: var(--task-list-border, 1px solid #eeeeee);
          font-size: var(--task-list-font-size, 18px);
          padding: var(--task-list-padding, 16px);
        }
      `]}render(){return t`
      <div id="wrapper">
        <h3 id="name" property="oer:name" ?contenteditable="${this.editMode}">
          ${this.name}
        </h3>
        <ol ?contenteditable="${this.editMode}" id="tasks">
          ${this.tasks.map((e=>t`
              <li>
                ${e.link?t`
                      <a href="${e.link}" property="oer:task"
                        >${e.name}</a
                      >
                    `:t` <span property="oer:task">${e.name}</span> `}
              </li>
            `))}
        </ol>
      </div>
    `}haxHooks(){return{activeElementChanged:"haxactiveElementChanged",inlineContextMenu:"haxinlineContextMenu"}}haxactiveElementChanged(e,t){let i=!1;return this.__thereAreChanges&&(this.alignState(),i=!0),this.editMode=t,i}alignState(){const e=this.cloneNode();e.name=this.shadowRoot.querySelector("#name").innerText;const t=this.shadowRoot.querySelector("#tasks");e.tasks=this.getChildOutline(t),e.__thereAreChanges=!1,e.editMode=!1,this.replaceWith(e),this.remove()}haxinlineContextMenu(e){e.ceButtons=[{icon:"icons:add",callback:"haxClickInlineAdd",label:"Add task"},{icon:"icons:remove",callback:"haxClickInlineRemove",label:"Remove task"}]}haxClickInlineAdd(e){let t=this.tasks;return t.push({name:"Do this"}),this.tasks=[...t],!0}haxClickInlineRemove(e){if(this.tasks.length>0){let e=this.tasks;return e.pop(),this.tasks=[...e],!0}}static get tag(){return"task-list"}static get properties(){return{...super.properties,name:{type:String,reflect:!0},editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"},relatedResource:{type:String,attribute:"related-resource"},tasks:{type:Array},_resourceLink:{type:Object}}}constructor(){super(),this.tasks=[],this.name="Steps to completion"}alignState(){const e=this.cloneNode();e.name=this.shadowRoot.querySelector("#name").innerText;const t=this.shadowRoot.querySelector("#tasks");e.tasks=this.getChildOutline(t),e.__thereAreChanges=!1,e.editMode=!1,this.replaceWith(e),this.remove()}getChildOutline(e){let t=[];for(;null!==e.firstElementChild;){if(void 0!==e.firstElementChild.tagName){const i=e.firstElementChild;t.push({name:i.innerText.trim(),link:i.firstElementChild&&i.firstElementChild.tagName&&"A"===i.firstElementChild.tagName?i.firstElementChild.getAttribute("href"):null})}e.firstElementChild.remove()}return t}updated(e){e.forEach(((e,t)=>{"editMode"===t&&this.shadowRoot&&(this[t]?(this._observer=new MutationObserver((e=>{this.__thereAreChanges=!0})),this._observer.observe(this.shadowRoot.querySelector("#wrapper"),{childList:!0,subtree:!0,characterData:!0})):this._observer&&this._observer.disconnect());if(["tasks"].includes(t)){let e=`${t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}-changed`;this.dispatchEvent(new CustomEvent(e,{detail:{value:this[t]}}))}"relatedResource"==t&&(this._resourceLink=this._generateResourceLink(this[t]))}))}_generateResourceLink(e){this._resourceLink&&document.head.removeChild(this._resourceLink);let t=document.createElement("link");return t.setAttribute("property","oer:forComponent"),t.setAttribute("content",e),document.head.appendChild(t),t}firstUpdated(){this.setAttribute("typeof","oer:SupportingMaterial")}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!0,gizmo:{title:"Task list",description:"A list of tasks which is an ordered list",icon:"icons:list",color:"orange",groups:["Content","Instructional"],handles:[],meta:{author:"ELMS:LN"}},settings:{configure:[{property:"name",title:"Name",description:"Name of the list",inputMethod:"textfield",icon:"editor:title"},{property:"relatedResource",title:"Related resource",description:"A reference to the related Schema resource",inputMethod:"textfield",icon:"editor:title"},{property:"tasks",title:"Tasks",description:"The tasks to be completed",inputMethod:"array",itemLabel:"label",properties:[{property:"name",title:"Name",description:"Name of the task",inputMethod:"textfield",required:!0},{property:"link",title:"Link",description:"Optional link",inputMethod:"textfield"}]}],advanced:[]},saveOptions:{unsetAttributes:["_resource-link"]}}}}window.customElements.define(TaskList.tag,TaskList);export{TaskList};