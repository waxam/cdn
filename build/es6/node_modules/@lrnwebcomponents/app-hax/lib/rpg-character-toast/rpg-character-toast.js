import{css as t,html as e,unsafeCSS as i}from"../../../../lit/index.js";import{SimpleToastEl as a}from"../../../simple-toast/lib/simple-toast-el.js";import"../../../rpg-character/rpg-character.js";const s=new URL("./images/SpeechBubbleL.svg",import.meta.url).href,r=new URL("./images/SpeechBubbleMiddle.svg",import.meta.url).href,l=new URL("./images/SpeechBubbleR.svg",import.meta.url).href;export class RPGCharacterToast extends a{static get tag(){return"rpg-character-toast"}constructor(){super(),this.setDefaultToast(),this.key=null,this.phrases={},this.fire=!1,this.hat="coffee",this.walking=!1,this.word=null,this.addEventListener("click",(()=>{this.opened=!1}))}static get styles(){return[...super.styles,t`
        :host([opened]) {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }
        :host {
          --simple-toast-bottom: 0px;
          height: 142px;
          display: none;
          width: var(--simple-toast-width, auto);
          color: var(
            --simple-toast-color,
            var(--simple-colors-default-theme-accent-12, black)
          );
          background-color: transparent;
          top: var(--simple-toast-top);
          margin: var(--simple-toast-margin, 4px);
          padding: var(--simple-toast-padding, 4px);
          bottom: var(--simple-toast-bottom, 36px);
          right: var(--simple-toast-right, 0px);
          border: var(--simple-toast-border);
          z-index: var(--simple-toast-z-index, 10000000);
          font-size: var(--simple-toast-font-size, 18px);
          font-family: "Press Start 2P", sans-serif;
          font-weight: bold;
          text-align: center;
          vertical-align: middle;
        }
        rpg-character {
          margin: 30px -30px 0 -30px;
          width: 145px;
        }
        .bubble {
          height: 142px;
          display: inline-flex;
          margin-top: 6px;
        }
        .mid {
          line-height: 142px;
          background-color: white;
          background-repeat: repeat-x;
          background-image: url("${i(r)}");
        }
        .leftedge {
          background-image: url("${i(s)}");
          width: 24px;
          background-color: white;
        }
        .rightedge {
          background-image: url("${i(l)}");
          width: 54px;
          background-color: white;
        }
        :host([dark-mode]) .mid,
        :host([dark-mode]) .leftedge,
        :host([dark-mode]) .rightedge {
          filter: invert(1);
        }
        @media (max-width: 800px) {
          :host {
            --simple-toast-width: 80vw;
            --simple-toast-font-size: 12px;
          }
          rpg-character {
            width: 100px;
            margin: 70px -24px 0 -24px;
          }
        }
        @media (max-width: 500px) {
          :host {
            height: 50px;
            line-height: 50px;
            border: none;
          }
          rpg-character {
            display: none;
          }
          .rightedge {
            display: none;
          }
          .leftedge {
            display: none;
          }
          .mid {
            height: 50px;
            line-height: 50px;
            background-image: unset;
          }
          .bubble {
            height: 50px;
            margin: 0;
            border: 2px solid black;
            border-radius: 5px;
          }
        }
      `]}static get properties(){return{...super.properties,darkMode:{type:Boolean,reflect:!0,attribute:"dark-mode"},fire:{type:Boolean},hat:{type:String},walking:{type:Boolean},opened:{type:Boolean,reflect:!0},text:{type:String},classStyle:{type:String,attribute:"class-style"},duration:{type:Number},eventCallback:{type:String,attribute:"event-callback"}}}render(){return e` <div class="bubble">
      <span class="bubble leftedge"></span>
      <span class="bubble mid">
        ${this.text}
        <slot></slot>
      </span>
      <span class="bubble rightedge"></span>
      <rpg-character
        height="130"
        width="130"
        seed="${this.userName}"
        ?fire="${this.fire}"
        hat="${this.hat}"
        ?walking="${this.walking}"
      ></rpg-character>
    </div>`}connectedCallback(){super.connectedCallback(),window.addEventListener("rpg-character-toast-hide",this.hideSimpleToast.bind(this)),window.addEventListener("rpg-character-toast-show",this.showSimpleToast.bind(this))}disconnectedCallback(){window.removeEventListener("rpg-character-toast-hide",this.hideSimpleToast.bind(this)),window.removeEventListener("rpg-character-toast-show",this.showSimpleToast.bind(this)),super.disconnectedCallback()}hideSimpleToast(){this.hide()}openedChanged(t){this.opened=t.detail.value}setDefaultToast(){for(this.opened=!1,this.text="Saved",this.classStyle="",this.duration=3e3,this.accentColor="grey",this.dark=!1,this.eventCallback=null;null!==this.firstChild;)this.removeChild(this.firstChild)}showSimpleToast(t){this.hideSimpleToast(),this.setDefaultToast(),t.detail.duration&&(this.duration=t.detail.duration),t.detail.fire&&(this.fire=t.detail.fire),t.detail.hat&&(this.hat=t.detail.hat),t.detail.walking&&(this.walking=t.detail.walking),t.detail.text&&(this.text=t.detail.text),t.detail.classStyle&&(this.classStyle=t.detail.classStyle),t.detail.eventCallback&&(this.eventCallback=t.detail.eventCallback),t.detail.slot&&this.appendChild(t.detail.slot),t.detail.accentColor&&(this.accentColor=t.detail.accentColor),t.detail.dark&&(this.dark=t.detail.dark),this.show()}show(){this.opened=!0}hide(){if(this.duration=0,this.fire=!1,this.hat="coffee",this.walking=!1,this.eventCallback){const t=new CustomEvent(this.eventCallback,{bubbles:!0,cancelable:!0,detail:!0,composed:!0});this.dispatchEvent(t)}this.opened=!1}}customElements.define(RPGCharacterToast.tag,RPGCharacterToast);