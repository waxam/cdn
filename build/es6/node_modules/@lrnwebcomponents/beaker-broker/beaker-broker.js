import{LitElement,html,css}from"../../lit-element/lit-element.js";class BeakerBroker extends LitElement{render(){return html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }
      </style>
      <slot></slot>
    `}static get haxProperties(){return{}}static get properties(){return{...super.properties,archive:{type:Object},datUrl:{type:String,attribute:"dat-url"}}}static get tag(){return"beaker-broker"}firstUpdated(){"undefined"==typeof DatArchive&&console.log("Beaker is not available from this site loading methodology")}constructor(){super(),this.datUrl=window.location.host}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"archive"==propName&&this.dispatchEvent(new CustomEvent("archive-changed",{detail:{value:this[propName]}})),"datUrl"==propName&&(this._datUrlChanged(this[propName]),this.dispatchEvent(new CustomEvent("dat-url-changed",{detail:{value:this[propName]}})))})}async _datUrlChanged(newValue){"undefined"!=typeof DatArchive&&newValue&&(this.archive=new DatArchive(newValue))}async write(path,data){await this.archive.writeFile(path,data)}async read(path,type){var response,ftype="utf8";switch(type){case"jpeg":case"jpg":ftype="binary";var buf=await this.archive.readFile(path,ftype),blob=new Blob([buf],{type:"image/jpeg"});response=URL.createObjectURL(blob);break;case"png":ftype="binary";buf=await this.archive.readFile(path,ftype),blob=new Blob([buf],{type:"image/png"});response=URL.createObjectURL(blob);break;case"base64":response="data:image/png;base64,"+await this.archive.readFile(path,type);break;default:response=await this.archive.readFile(path,type)}return await response}}window.customElements.define(BeakerBroker.tag,BeakerBroker);export{BeakerBroker};