import{LitElement as e,html as t,css as a}from"../../lit-element/lit-element.js";class ThreadedDiscussion extends e{static get styles(){return[a`
        :host {
          display: block;
          font-size: var(--threaded-discussion-FontSize, 14px);
          line-height: var(--threaded-discussion-LineHeight, 160%);
          color: var(--threaded-discussion-Color, #95989a);
        }
        :host([hidden]) {
          display: none;
        }
        #threads {
          background-color: var(
            --threaded-discussion-threads-BackgroundColor,
            #eaeaea
          );
          padding: 1px;
          width: calc(100% - 2px);
          margin: var(--threaded-discussion-threads-Margin, 0);
        }
        #new-thread {
          background-color: var(
            --threaded-discussion-new-thread-BackgroundColor,
            var(--threaded-discussion-threads-BackgroundColor, #eaeaea)
          );
          padding: 2px 1px;
          width: calc(100% - 2px);
          margin: var(
            --threaded-discussion-new-thread-Margin,
            var(--threaded-discussion-threads-Margin, 0)
          );
        }
        .thread > *,
        #new-thread > * {
          background-color: var(
            --threaded-discussion-comment-BackgroundColor,
            #fff
          );
        }
        .comment {
          margin: 1px 1px 0;
          padding: var(--threaded-discussion-comment-Padding, 10px) 0;
        }
        .reply-form {
          margin: 0;
          width: calc(
            100% -
              var(
                --threaded-discussion-reply-indent,
                calc(2 * var(--threaded-discussion-comment-Padding, 10px))
              )
          );
        }
        .reply-form,
        .comment-reply {
          margin-left: var(
            --threaded-discussion-reply-indent,
            calc(2 * var(--threaded-discussion-comment-Padding, 10px))
          );
        }
        .comment-header {
          display: flex;
          align-items: stretch;
          justify-content: space-between;
          margin-bottom: var(--threaded-discussion-comment-Padding, 10px);
        }
        .comment-header,
        .comment-body {
          padding: 0 var(--threaded-discussion-comment-Padding, 10px);
        }
        lrndesign-avatar {
          margin-right: var(--threaded-discussion-comment-Padding, 10px);
        }
        .comment-header > div {
          display: flex;
          flex-direction: column;
          justify-content: space-evenly;
          align-items: flex-start;
          flex: 1 1 auto;
        }
        .comment-name {
          margin: 0;
          font-size: var(
            --threaded-discussion-name-FontSize,
            calc(1.1 * var(--threaded-discussion-FontSize, 14px))
          );
          font-weight: var(--threaded-discussion-name-FontWeight, bold);
          font-family: var(--threaded-discussion-name-FontFamily);
          color: var(--threaded-discussion-name-Color, #4b4b4b);
        }
        .comment-date {
          margin: 0;
          font-size: var(
            --threaded-discussion-date-FontSize,
            calc(0.8 * var(--threaded-discussion-FontSize, 14px))
          );
          font-weight: var(--threaded-discussion-date-FontWeight, normal);
          font-family: var(--threaded-discussion-date-FontFamily);
          color: var(
            --threaded-discussion-date-Color,
            var(--threaded-discussion-Color, #95989a)
          );
        }
        .comment-body {
          font-size: var(--threaded-discussion-FontSize, 14px);
        }
      `]}render(){return t`
      <slot name="before-discussion"></slot>
      ${this.ascending?"":this.threads}
      <div id="new-thread">
        <slot name="before-new-thread"></slot>
        <threaded-discussion-form
          button-label="${this.commentButtonLabel||"Submit"}"
          class="comment-form"
          @comment-demo="${this._handleDemo}"
          @comment-submitted="${this._handleSubmit}"
          ?demo="${this.demo}"
          field="${this.map.body||"body"}"
          .icon="${this.commentIcon}"
          ?hidden="${this.hidden}"
          ?disabled="${this.disabled}"
          .submit="${this._getPath(this.submit,this.params)}"
          textarea-label="${this.commentTextareaLabel||"Enter comment"}"
        >
        </threaded-discussion-form>
        <slot name="after-new-thread"></slot>
      </div>
      ${this.ascending?this.threads:""}
      <slot name="after-discussion"></slot>
    `}get threads(){return t`
      <div id="threads">
        ${(this.sortedData||[]).map(e=>t`
            <div class="thread">
              ${this.getComment(e)}
              ${(e.replies||[]).map(t=>this.getComment(t,e.id))}
              <threaded-discussion-form
                button-label="${this.replyButtonLabel||"Reply"}"
                class="reply-form"
                @comment-demo="${this._handleDemo}"
                @comment-submitted="${this._handleSubmit}"
                ?demo="${this.demo}"
                field="${this.map.replyBody||this.map.body||"body"}"
                ?disabled="${this.disabled}"
                ?hidden="${this.hidden}"
                .icon="${this.replyIcon}"
                .submit="${this._getPath(this.submit,this.params)}"
                textarea-label="${this.replyTextareaLabel||"Enter reply"}"
                .thread="${e.id}"
              >
              </threaded-discussion-form>
            </div>
          `)}
      </div>
    `}getComment(e,a){return t`
      <div
        aria-describedby="${a||""}"
        class="comment ${a?"comment-reply":""}"
        id="comment-${e.id}"
      >
        <div class="comment-header">
          <lrndesign-avatar
            .accent-color="${e.color}"
            .label="${e.firstName} ${e.lastName}"
            .src="${e.avatar}"
            two-chars
          >
          </lrndesign-avatar>
          <div>
            <p class="comment-name">${e.firstName} ${e.lastName}</p>
            <p class="comment-date">${this._getDate(e.date)}</p>
          </div>
        </div>
        <div class="comment-body">
          ${e.body?e.body.split(/[\r\n]+/).map(e=>t`
                    <p>${e}</p>
                  `):""}
        </div>
      </div>
    `}static get tag(){return"threaded-discussion"}static get properties(){return{ascending:{type:Boolean,attribute:"ascending",reflect:!0},commentButtonLabel:{type:String,attribute:"comment-button-label",reflect:!0},commentTextareaLabel:{type:String,attribute:"comment-textarea-label",reflect:!0},commentIcon:{type:String,attribute:"comment-icon",reflect:!0},data:{type:Array},dateLocale:{type:String},dateFormat:{type:Object},map:{type:Object},demo:{type:Boolean},params:{type:Object},replyButtonLabel:{type:String,attribute:"reply-button-label",reflect:!0},replyTextareaLabel:{type:String,attribute:"reply-textarea-label",reflect:!0},replyIcon:{type:String,attribute:"reply-icon",reflect:!0},source:{type:String},submit:{type:String}}}constructor(){super(),this.ascending=!1,this.data=[],this.dateLocale="en-US",this.dateFormat={year:"numeric",month:"long",day:"numeric",hour:"numeric",minute:"2-digit"},this.demo=!1,this.map={},this.params={},this.submit=window.location.href,import("../lrndesign-avatar/lrndesign-avatar.js"),import("../../@polymer/iron-icon/iron-icon.js"),import("../../@polymer/iron-icons/iron-icons.js"),import("./lib/threaded-discussion-form.js")}updated(e){super.updated&&super.updated(e),e.forEach((e,t)=>{["params","source"].includes(t)&&this.source&&this.fetchDiscussion()})}get sortedData(){return this.mappedData.sort((e,t)=>this.ascending?e.date-t.date:t.date-e.date)}get mappedData(){let e=this._getArray(this.data||[]);return(e||[]).filter(e=>!this._getMap(e,"thread","replyThread")).map(t=>{let a=this.params,i=this._getMap(t,"id"),s=this._getMap(t,"replies")||(e||[]).filter(e=>this._getMap(e,"thread","replyThread")===i);return a[this._mapProp("thread")]=i,{id:i,firstName:this._getMap(t,"firstName"),lastName:this._getMap(t,"lastName"),avatar:this._getMap(t,"avatar"),body:this._getMap(t,"body"),color:this._getMap(t,"color"),date:this._getMap(t,"date"),submit:this._getPath(this.submit,a),replies:this._getArray(s).map(e=>({id:this._getMap(e,"id","replyId"),thread:this._getMap(e,"thread","replyThread"),firstName:this._getMap(e,"firstName","replyFirstName"),lastName:this._getMap(e,"lastName","replyLastName"),avatar:this._getMap(e,"avatar","replyAvatar"),body:this._getMap(e,"body","replyBody"),color:this._getMap(e,"color","replyColor"),date:this._getMap(e,"date","replyDate")}))}})}_getMap(e,t,a,i){return e[this._mapProp(t,a,i)]}_mapProp(e,t,a){let i=this.map||{};return t=t||e,i[a=a||t]||i[t]||e}_handleSubmit(e){this.fetchDiscussion()}_handleDemo(e){if(e.detail&&e.detail.textarea){let t={},a=this.data;if(t[this._mapProp("id")]=`comment-${Date.now()}`,t[this._mapProp("firstName")]="DEMO",t[this._mapProp("lastName")]="USER",t[this._mapProp("date")]=this._getDate(new Date),t[this._mapProp("body")]=e.detail.textarea.value,e.detail.thread){let i=a.filter(t=>t[this._mapProp("id")]===e.detail.thread),s=i?i[0]:void 0;t[this._mapProp("thread","replyThread")]=e.detail.thread,s?s[this._mapProp("replies")]=[...s[this._mapProp("replies")],t]:a.push(t)}else t[this._mapProp("replies")]=[],a.push(t);this.data=a,this.mappedData,e.detail.textarea.value=""}}fetchDiscussion(){fetch(this._getPath(this.source,this.params)).then(e=>e.json()).then(e=>this.data=e)}_getArray(e){return"array"==typeof e?e:Object.keys(e||{}).map(t=>{let a=e[t];return a.id=t,a})}_getDate(e){let t="string"==typeof this.dateFormat?JSON.parse(this.dateFormat):this.dateFormat;return e&&new Date(e)?new Date(e).toLocaleString(this.dateLocale,t):""}_getPath(e,t){let a=Object.keys(t||{}).map(e=>`${encodeURI(e)}=${encodeURI(t[e])}`).join("&");return a?`${e}?${a}`:e}}window.customElements.define(ThreadedDiscussion.tag,ThreadedDiscussion);export{ThreadedDiscussion};