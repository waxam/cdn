/**
 * Copyright 2018 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as e,html as t,css as i}from"../../../lit/index.js";import{displayBehaviors as o,editBehaviors as l,editableTableStyles as a}from"./editable-table-behaviors.js";import"../../rich-text-editor/rich-text-editor.js";import"../../rich-text-editor/lib/toolbars/rich-text-editor-toolbar-mini.js";import"../../simple-toolbar/simple-toolbar.js";import"../../simple-tooltip/simple-tooltip.js";import"../../simple-icon/lib/simple-icon-lite.js";import"../../simple-icon/lib/simple-icons.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import"./editable-table-editor-rowcol.js";import"./editable-table-editor-toggle.js";import{ReplaceWithPolyfill as d}from"../../utils/utils.js";Element.prototype.replaceWith||(Element.prototype.replaceWith=d),CharacterData.prototype.replaceWith||(CharacterData.prototype.replaceWith=d),DocumentType.prototype.replaceWith||(DocumentType.prototype.replaceWith=d);class EditableTableEdit extends(l(e)){static get styles(){return[...super.styles||[],...a,i`
        :host {
          --paper-listbox-background-color: var(
            --editable-table-rowcol-bg-color
          );
        }
        :host([disabled]) {
          display: none;
          pointer-events: none;
          cursor: not-allowed;
        }
        .filter-icon,
        .sortable-icon {
          display: none;
          opacity: 0.4;
          width: 24px;
          height: 24px;
        }
        :host([sort]) tbody .tr:first-child .sortable-icon,
        :host([filter]) tbody .tr:not(:first-of-type) .filter-icon {
          display: inline-block;
          opacity: 0.25;
        }
        table {
          min-width: calc(100% - 2.3px);
          width: unset;
          height: 1px;
        }
        caption {
          width: 100%;
          padding: 0;
          margin: 0;
          color: var(
            --editable-table-caption-color,
            var(--editable-table-color, #222)
          );
        }
        table *[data-expanded="true"] {
          z-index: 2;
        }
        rich-text-editor:not([contenteditable]) {
          z-index: 1 !important;
        }
        caption,
        .th-or-td {
          border: 1px solid #ddd;
        }
        label,
        .label {
          color: var(--editable-table-secondary-text-color, #444);
          font-size: var(--editable-table-secondary-font-size, 12px);
          font-family: var(
            --editable-table-secondary-font-family,
            "Roboto",
            "Noto",
            sans-serif
          );
        }
        simple-toolbar {
          width: 100%;
        }
        simple-toolbar::part(buttons) {
          align-items: stretch;
          justify-content: space-between;
        }
        .group {
          padding: 0;
          margin: 0;
          transition: all 2s;
          color: var(
            --editable-table-caption-color,
            var(--editable-table-color, #222)
          );
        }
        .group:not([hidden]) {
          display: flex;
          flex: 0 0 auto;
          justify-content: space-around;
          align-items: center;
          margin: 0 2.5px;
        }
        caption {
          position: relative;
        }
        caption > * {
          margin: 0 2.5px;
        }
        th {
          padding: 0;
          border-width: var(--editable-table-border-width, 1px);
          border-style: var(--editable-table-border-style, solid);
          border-color: var(--editable-table-border-color, #999);
        }
        td {
          margin: 0;
          padding: 0;
          position: relative;
        }
        rich-text-editor-toolbar-mini {
          position: absolute;
          min-width: 200px;
          height: 0;
        }
        rich-text-editor {
          margin-bottom: 1px;
          padding: var(--editable-table-cell-vertical-padding, 10px)
            var(--editable-table-cell-horizontal-padding, 6px);
          border: none !important;
          margin-right: 24px;
          --rich-text-editor-min-height: 12px;
        }
        rich-text-editor[contenteditable="true"].heightmax {
          overflow-y: auto;
        }
        rich-text-editor:hover,
        rich-text-editor:focus,
        rich-text-editor:focus-within {
          border: none !important;
          outline: none !important;
        }
        td #icons {
          position: absolute;
          right: 0;
          top: calc(50% - 12px);
          width: 24px;
        }
        td simple-icon-lite {
          width: 24px;
        }
        td:focus-within {
          outline: 1px dotted currentColor;
        }
        th:hover,
        th:focus-within {
          background-color: var(
            --editable-table-rowcol-hover-bg-color,
            var(--editable-table-heading-bg-color, #e8e8e8)
          );
        }
        .th:first-child {
          width: 96px;
        }
        :host([responsive]) thead th:nth-of-type(3),
        :host([responsive]) .tr td:nth-of-type(2) {
          border-right-width: calc(var(--editable-table-border-width) + 5px);
          border-right-style: double;
        }
      `]}get textEditorToolbar(){return t`
      <rich-text-editor-toolbar-mini
        id="toolbar"
        .config="${this.config}"
        show="selection"
      ></rich-text-editor-toolbar-mini>
    `}get columnHeaderButton(){return t`
      <editable-table-editor-toggle
        id="columnHeader"
        icon="editable-table:column-headers"
        label="First row has column headers."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.columnHeader}"
      >
      </editable-table-editor-toggle>
    `}get rowHeaderButton(){return t`
      <editable-table-editor-toggle
        id="rowHeader"
        icon="editable-table:row-headers"
        @change="${this._onTableSettingChange}"
        label="First column has row headers."
        ?toggled="${this.rowHeader}"
      >
      </editable-table-editor-toggle>
    `}get footerButton(){return t`
      <editable-table-editor-toggle
        id="footer"
        icon="editable-table:footer"
        label="Last row is a footer."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.footer}"
      >
      </editable-table-editor-toggle>
    `}get footerButton(){return t`
      <editable-table-editor-toggle
        id="footer"
        icon="editable-table:footer"
        label="Last row is a footer."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.footer}"
      >
      </editable-table-editor-toggle>
    `}get headersFootersGroup(){return t`
      <div class="group">
        <div class="label">Headers and footers</div>
        ${this.columnHeaderButton} ${this.rowHeaderButton} ${this.footerButton}
      </div>
    `}get borderButton(){return t`
      <editable-table-editor-toggle
        id="bordered"
        ?disabled="${this.hideBordered}"
        ?hidden="${this.hideBordered}"
        icon="image:grid-on"
        label="Borders."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.bordered}"
      >
      </editable-table-editor-toggle>
    `}get stripeButton(){return t`
      <editable-table-editor-toggle
        id="striped"
        ?disabled="${this.hideStriped}"
        ?hidden="${this.hideStriped}"
        icon="editable-table:row-striped"
        label="Alternating rows."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.striped}"
      >
      </editable-table-editor-toggle>
    `}get columnStripeButton(){return t`
      <editable-table-editor-toggle
        id="columnStriped"
        ?disabled="${this.hideStriped}"
        ?hidden="${this.hideStriped}"
        icon="editable-table:col-striped"
        label="Alternating columns."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.columnStriped}"
      >
      </editable-table-editor-toggle>
    `}get condenseButton(){return t`
      <editable-table-editor-toggle
        id="condensed"
        ?disabled="${this.hideCondensed}"
        ?hidden="${this.hideCondensed}"
        icon="editable-table:row-condensed"
        label="Condensed rows."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.condensed}"
      >
      </editable-table-editor-toggle>
    `}get numericStylesButton(){return t`
      <editable-table-editor-toggle
        id="numericStyles"
        ?disabled="${this.hideNumericStyles}"
        ?hidden="${this.hideNumericStyles}"
        icon="editable-table:numbers"
        label="Style numeric cells."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.numericStyles}"
      >
      </editable-table-editor-toggle>
    `}get responsiveButton(){return t`
      <editable-table-editor-toggle
        id="responsive"
        ?disabled="${this.hideResponsive}"
        ?hidden="${this.hideResponsive}"
        icon="device:devices"
        label="Adjust width to screen size."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.responsive}"
      >
      </editable-table-editor-toggle>
    `}get displayGroup(){return t`
      <div class="group" ?hidden="${this.hideDisplay}">
        <div class="label">Display</div>
        ${this.borderButton} ${this.stripeButton} ${this.columnStripeButton}
        ${this.condenseButton} ${this.numericStylesButton}
        ${this.responsiveButton}
      </div>
    `}get sortButton(){return t`
      <editable-table-editor-toggle
        id="sort"
        ?disabled="${this._isSortDisabled(this.hideSort,this.columnHeader)}"
        ?hidden="${this._isSortDisabled(this.hideSort,this.columnHeader)}"
        label="Column sorting (for tables with column headers)."
        icon="editable-table:sortable"
        @change="${this._onTableSettingChange}"
        ?toggled="${this.sort}"
      >
      </editable-table-editor-toggle>
    `}get filterButton(){return t`
      <editable-table-editor-toggle
        id="filter"
        ?disabled="${this.hideFilter}"
        ?hidden="${this.hideFilter}"
        icon="editable-table:filter"
        label="Column filtering."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.filter}"
      >
      </editable-table-editor-toggle>
    `}get downloadButton(){return t`
      <editable-table-editor-toggle
        id="downloadable"
        ?disabled="${this.hideDownloadable}"
        ?hidden="${this.hideDownloadable}"
        icon="file-download"
        label="Allow downloading as CSV."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.downloadable}"
      >
      </editable-table-editor-toggle>
    `}get printButton(){return t`
      <editable-table-editor-toggle
        id="printable"
        ?disabled="${this.hidePrintable}"
        ?hidden="${this.hidePrintable}"
        icon="print"
        label="Allow printing."
        @change="${this._onTableSettingChange}"
        ?toggled="${this.printable}"
      >
      </editable-table-editor-toggle>
    `}get dataGroup(){return t`
      <div class="group" ?hidden="${this.hideSortFilter}">
        <div class="label">Data</div>
        ${this.sortButton} ${this.filterButton} ${this.downloadButton}
        ${this.printButton}
      </div>
    `}get settingsToolbar(){return t`
      <simple-toolbar>
        ${this.headersFootersGroup} ${this.displayGroup} ${this.dataGroup}
      </simple-toolbar>
    `}get editableCaption(){return t`
      <caption>
        <p class="sr-only">Edit Mode for</p>
        <rich-text-editor
          autofocus
          @blur="${this._captionChanged}"
          id="caption"
          label="Caption"
          placeholder="Name your table by adding a caption here."
          rawhtml="${this.caption}"
          toolbar="toolbar"
          type="rich-text-editor-toolbar-mini"
        >
        </rich-text-editor>
      </caption>
    `}columnMenuButton(e){return t`
      <editable-table-editor-rowcol
        ?condensed="${this.condensed}"
        index="${e}"
        @rowcol-action="${this._handleRowColumnMenu}"
        @rowcol-menu-toggle="${this._handleMenuToggle}"
      >
      </editable-table-editor-rowcol>
    `}editableColumn(e){return t`
      <th
        class="col-${e}"
        scope="col"
        ?numeric="${this._isNumericColumn(e)}"
      >
        ${this.columnMenuButton(e)}
      </th>
    `}rowMenuButton(e){return t`
      <editable-table-editor-rowcol
        class="cell"
        ?condensed="${this.condensed}"
        index="${e}"
        row
        @rowcol-action="${this._handleRowColumnMenu}"
      >
      </editable-table-editor-rowcol>
    `}editableRow(e,i){return t`
      <tr
        class="tr ${0==e&&this.columnHeader?"thead-tr":e==this.data.length-1&&this.footer?"tfoot-tr":"tbody-tr"}"
      >
        <th scope="row">${this.rowMenuButton(e)}</th>
        ${(i||[]).map(((t,i)=>this.editableCell(e,i,t)))}
      </tr>
    `}cellEditor(e,i,o){return t`
      <rich-text-editor
        autofocus
        @blur="${t=>this._onCellValueChange(t,e,i)}"
        class="cell"
        disable-mouseover
        toolbar="toolbar"
        id="cell-${e}-${i}"
        label="${`Cell ${this._getLabel(i,!1)}${e}`}"
        rawhtml="${o}"
        type="rich-text-editor-toolbar-mini"
      >
      </rich-text-editor>
    `}editableCell(e,i,o){return t`
      <td
        class="${0===i&&this.rowHeader||0==e&&this.columnHeader?"th":"td"} th-or-td"
        ?negative="${this._isNegative(o)}"
        ?numeric="${this._isNumericColumn(i)}"
        @click="${this._onCellClick}"
      >
        ${this.cellEditor(e,i,o)}
        <div id="icons">
          <simple-icon-lite
            class="sortable-icon"
            icon="editable-table:sortable"
            aria-hidden="true"
          ></simple-icon-lite>
          <simple-icon-lite
            class="filter-icon"
            icon="editable-table:filter-off"
          ></simple-icon-lite>
        </div>
      </td>
    `}get editableColumns(){return t`
      <thead>
        <tr class="tr">
          <th scope="row">
            <span class="sr-only">Insert/Delete Controls</span>
          </th>
          ${(this.data[0]||[]).map(((e,t)=>this.editableColumn(t)))}
        </tr>
      </thead>
    `}get editableRows(){return t`
      <tbody id="tbody" class="tbody">
        ${this.data.map(((e,t)=>this.editableRow(t,e)))}
      </tbody>
    `}render(){return t`
      ${this.textEditorToolbar}
      <p class="sr-only">Table Editor</p>
      <table
        id="table-editmode"
        ?bordered="${this.bordered}"
        ?column-header="${this.columnHeader}"
        ?column-striped="${this.columnStriped}"
        ?condensed="${this.condensed}"
        ?downloadable="${this.downloadable}"
        ?filter="${this.filter}"
        ?footer="${this.footer}"
        ?numeric-styles="${this.numericStyles}"
        ?printable="${this.printable}"
        ?responsive="${this.responsive}"
        ?row-header="${this.rowHeader}"
        ?sort="${this.sort}"
        ?striped="${this.striped}"
      >
        ${this.editableCaption} ${this.editableColumns} ${this.editableRows}
      </table>
      ${this.settingsToolbar}
    `}static get tag(){return"editable-table-edit"}constructor(){super()}static get properties(){return{...super.properties}}get hideSortFilter(){return this.hideSort&&this.hideFilter}get hideDisplay(){return this.hideBordered&&this.hideCondensed&&this.hideStriped&&this.hideNumericStyles&&this.hideResponsive}updated(e){super.updated&&super.updated(e),e.forEach(((e,t)=>{"disabled"!==t&&"hidden"!==t||this.disableEditing()}))}disableEditing(){this.shadowRoot.querySelectorAll("rich-text-editor-toolbar-mini").forEach((e=>{e.disableEditing()})),this.dispatchEvent(new CustomEvent("editing-disabled",{bubbles:!0,composed:!0,cancelable:!1,detail:{editor:this}}))}focus(){this.shadowRoot.querySelector("#inner").focus()}_isSortDisabled(e,t){return e||!t}_getLabel(e){let t="ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),i=this._getLetter(e).split("-").reverse(),o="";for(let e=0;e<i.length;e++)""!==i[e]&&(o+=t[i[e]]);return o}_getLetter(e){let t=Math.floor(e/26),i="";return i+=e-26*t+"-",t>0&&t<26?i+=t-1+"-":t>=26&&(i+=this._getLetter(t-1)),i}deleteColumn(e){let t=[...this.data];for(let i=0;i<t.length;i++)t[i].splice(e,1);this.data=t,this._handleChange("data"),this.dispatchEvent(new CustomEvent("column-deleted",{bubbles:!0,composed:!0,cancelable:!1,detail:{editor:this,data:this.data,colNum:e}}))}deleteRow(e){let t=[...this.data];t.splice(e,1),this.data=t,this._handleChange("data"),this.dispatchEvent(new CustomEvent("row-deleted",{bubbles:!0,composed:!0,cancelable:!1,detail:{editor:this,data:this.data,rowNum:e}}))}insertColumn(e){let t=[...this.data];for(let i=0;i<t.length;i++)t[i].splice(e,0," ");this.data=t,this._handleChange("data"),this.dispatchEvent(new CustomEvent("column-inserted",{bubbles:!0,composed:!0,cancelable:!1,detail:{editor:this,data:this.data,colNum:e}}))}insertRow(e){let t=[...this.data],i=new Array;for(let e=0;e<t[0].length;e++)i.push(" ");t.splice(e+1,0,i),this.data=t,this._handleChange("data"),this.dispatchEvent(new CustomEvent("row-inserted",{bubbles:!0,composed:!0,cancelable:!1,detail:{editor:this,data:this.data,rowNum:e}}))}changeCell(e,t,i){let o=this.data.slice();o[e][t]=i,this.data=[],this.data=o,this._handleChange("data"),this.dispatchEvent(new CustomEvent("cell-changed",{bubbles:!0,composed:!0,cancelable:!1,detail:{editor:this,data:this.data,rowNum:e,colNum:t}}))}_onCellClick(e){e.model&&e.model.root&&e.model.root.nodeList[0]&&e.model.root.nodeList[0].focus()}_onCellValueChange(e,t,i){let o=this.shadowRoot&&this.shadowRoot.querySelector(`#cell-${t}-${i}`)?this.shadowRoot.querySelector(`#cell-${t}-${i}`).innerHTML:void 0;this.changeCell(t,i,o)}_captionChanged(){let e=this.shadowRoot&&this.shadowRoot.querySelector("#caption")?this.shadowRoot.querySelector("#caption").innerHTML:void 0;this.caption=e,this._handleChange("caption"),this.dispatchEvent(new CustomEvent("caption-changed",{bubbles:!0,composed:!0,cancelable:!1,detail:{editor:this,caption:this.caption}}))}_onTableSettingChange(e){this[e.detail.id]=e.detail.toggled,this._handleChange(e.detail.id)}_dataChanged(e,t){(e&&e.length<1||e[0].length<1)&&(this.data=[["","",""],["","",""],["","",""]]),this._handleChange("data")}_handleChange(e){this.dispatchEvent(new CustomEvent("change",{bubbles:!0,composed:!0,cancelable:!1,detail:e}))}_handleRowColumnMenu(e){e.detail.insert&&e.detail.row?this.insertRow(e.detail.index):e.detail.insert&&!e.detail.row?this.insertColumn(e.detail.index):!e.detail.insert&&e.detail.row?this.deleteRow(e.detail.index):this.deleteColumn(e.detail.index)}_handleMenuToggle(e){e.detail&&(e.detail.closest("thead,tbody").setAttribute("data-expanded",e.detail.expanded),e.detail.closest("tr").setAttribute("data-expanded",e.detail.expanded),e.detail.closest("th").setAttribute("data-expanded",e.detail.expanded))}_getCurrentRow(e,t){let i=null;return null!=t&&void 0!==t[e]&&null!==t[e]&&(i=t[e]),i}_isFirstRow(e){return 0===e}}window.customElements.define(EditableTableEdit.tag,EditableTableEdit);export{EditableTableEdit};