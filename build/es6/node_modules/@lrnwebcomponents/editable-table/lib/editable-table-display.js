/**
 * Copyright 2018 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{html as e,PolymerElement as t}from"../../../@polymer/polymer/polymer-element.js";import{afterNextRender as l}from"../../../@polymer/polymer/lib/utils/render-status.js";import"../../../@polymer/polymer/lib/elements/dom-repeat.js";import"../../../@polymer/polymer/lib/elements/dom-if.js";import"../../../@polymer/iron-ajax/iron-ajax.js";import"../../simple-picker/simple-picker.js";import{ResponsiveUtilityBehaviors as i}from"../../responsive-utility/lib/responsive-utility-behaviors.js";import{displayBehaviors as s}from"./editable-table-behaviors.js";import"./editable-table-styles.js";class EditableTableDisplay extends(s(i(t))){static get template(){return e`
      <style include="editable-table-styles">
        :host .th-or-td {
          padding: var(--editable-table-cell-padding);
        }
        :host([bordered]) .th {
          border: 1px solid var(--editable-table-border-color);
        }
        :host([striped]) .tbody-tr:nth-child(2n) .th,
        :host([striped]) .tbody-tr:nth-child(2n) .td {
          @apply --editable-table-style-stripe;
        }
        :host([sort]) thead th,
        :host([filter]) tbody td {
          padding: 0;
        }
        :host([column-header]) .thead-tr .th {
          @apply --editable-table-style-column-header;
        }
        :host([row-header]) .tbody-tr .th {
          @apply --editable-table-style-row-header;
        }
        :host([footer]) .tfoot-tr .th,
        :host([footer]) .tfoot-tr .td {
          @apply --editable-table-style-footer;
        }
        #column {
          width: calc(var(--simple-picker-option-size) + 6px);
          overflow: visible;
          display: none;
          margin-left: 10px;
          --simple-picker-border-width: 1px;
          --simple-picker-focus-border-width: 1px;
          --simple-picker-border-color: var(--editable-table-border-color);
        }
        @media screen {
          :host([responsive][responsive-size="xs"]) caption {
            padding: 0;
          }
          :host([responsive][responsive-size="xs"])
            caption
            > div
            > *:not(#column) {
            padding: 0 0 5px;
          }
          :host([responsive][responsive-size="xs"]) caption > div {
            display: flex;
            align-items: flex-end;
            justify-content: space-between;
          }
          :host([responsive][responsive-size="xs"]) #column {
            display: inline-flex;
          }
          :host([responsive][responsive-size="xs"]) .th[xs-hidden],
          :host([responsive][responsive-size="xs"]) .td[xs-hidden] {
            display: none;
          }
        }
      </style>
      <iron-ajax
        auto
        url="[[dataCsv]]"
        hidden$="[[!dataCsv]]"
        handle-as="text"
        debounce-duration="500"
        last-response="{{csvData}}"
        on-response="_loadExternalData"
      ></iron-ajax>
      <table id="table" class="table" hidden$="[[hidden]]">
        <caption>
          <div>
            [[caption]]
            <simple-picker
              id="column"
              align-right
              aria-labelledby$="[[tables.0.label]]"
              hide-sample
              value$="{{selected}}"
              on-change="_selectedChanged"
              options="[[options]]"
            >
            </simple-picker>
          </div>
        </caption>
        <thead hidden="[[!columnHeader]]">
          <tr class="tr thead-tr">
            <template
              is="dom-repeat"
              items="[[thead.0]]"
              as="th"
              index-as="index"
              mutable-data
              restamp
            >
              <th
                class="th th-or-td"
                cell-index$="[[index]]"
                numeric$="[[_isNumericColumn(index)]]"
                scope="col"
                xs-hidden$="[[_isColHidden(index,1)]]"
              >
                <template is="dom-if" if="[[sort]]" restamp>
                  <editable-table-sort
                    sort-column$="[[sortColumn]]"
                    column-index="[[index]]"
                    text$="[[_replaceBlankCell(th)]]"
                  ></editable-table-sort>
                </template>
                <template is="dom-if" if="[[!sort]]" restamp
                  >[[_replaceBlankCell(th)]]
                </template>
              </th>
            </template>
          </tr>
        </thead>
        <tbody id="tbody" class="tbody">
          <template
            is="dom-repeat"
            items="[[tbody]]"
            as="tr"
            filter="{{filterRows(filterColumn,filterText)}}"
            mutable-data
            restamp
          >
            <tr class="tr tbody-tr">
              <template
                is="dom-repeat"
                items="[[tr]]"
                as="cell"
                index-as="index"
                mutable-data
                restamp
              >
                <template
                  is="dom-if"
                  if="[[_isRowHeader(rowHeader,index)]]"
                  restamp
                >
                  <th
                    class="th th-or-td"
                    cell-index$="[[index]]"
                    numeric$="[[_isNumericColumn(index)]]"
                    xs-hidden$="[[_isColHidden(index,1)]]"
                    scope="row"
                  >
                    [[_replaceBlankCell(cell)]]
                  </th>
                </template>
                <template
                  is="dom-if"
                  if="[[!_isRowHeader(rowHeader,index)]]"
                  restamp
                >
                  <td
                    class="td cell th-or-td"
                    cell-index$="[[index]]"
                    numeric$="[[_isNumericColumn(index)]]"
                    negative$="[[_isNegative(cell)]]"
                    xs-hidden$="[[_isColHidden(index,1)]]"
                  >
                    <template is="dom-if" if="[[filter]]" restamp>
                      <editable-table-filter
                        column-index="[[index]]"
                        text$="[[_replaceBlankCell(cell)]]"
                        filtered$="[[_isFiltered(index,filterColumn,filtered)]]"
                      ></editable-table-filter>
                    </template>
                    <template is="dom-if" if="[[!filter]]" restamp>
                      <span class="cell">[[_replaceBlankCell(cell)]]</span>
                    </template>
                  </td>
                </template>
              </template>
            </tr>
          </template>
        </tbody>
        <template is="dom-if" if="[[footer]]">
          <tfoot class="tfoot">
            <tr class="tr tfoot-tr">
              <template
                is="dom-repeat"
                items="[[tfoot.0]]"
                as="cell"
                index-as="index"
                mutable-data
                restamp
              >
                <template is="dom-if" if="[[_isRowHeader(rowHeader,index)]]">
                  <th
                    class="th th-or-td"
                    cell-index$="[[index]]"
                    numeric$="[[_isNumericColumn(index)]]"
                    xs-hidden$="[[_isColHidden(index,1)]]"
                    scope="row"
                  >
                    [[_replaceBlankCell(cell)]]
                  </th>
                </template>
                <template is="dom-if" if="[[!_isRowHeader(rowHeader,index)]]">
                  <td
                    class="td cell th-or-td"
                    cell-index$="[[index]]"
                    numeric$="[[_isNumericColumn(index)]]"
                    negative$="[[_isNegative(cell)]]"
                    xs-hidden$="[[_isColHidden(index,1)]]"
                  >
                    [[_replaceBlankCell(cell)]]
                  </td>
                </template>
              </template>
            </tr>
          </tfoot>
        </template>
      </table>
      <div id="htmlImport" hidden><slot></slot></div>
    `}static get tag(){return"editable-table-display"}static get properties(){return{filterColumn:{type:Number,value:null},filtered:{type:Boolean,value:!1},filterText:{type:String,value:null},options:{type:Array,computed:"_getTheadOptions(thead)"},selected:{type:Number,value:1},sortMode:{type:String,value:"none"},sortColumn:{type:Number,value:-1},hidden:{type:Boolean,computed:"_hasNoData(data)"}}}_dataChanged(e,t){if(!e||e.length<1||e[0].length<1){let e=this.children.item(0);null!=e&&"TABLE"===e.tagName&&this.importHTML(e)}this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,composed:!0,detail:e}))}_hasNoData(e){return!e||e.length<1||e[0].length<1}_getTheadOptions(e){let t=[];if(null!=e&&e.length>0)for(let l=1;l<e[0].length;l++)t.push([{alt:e[0][l],value:l}]);return t}_isColHidden(e,t=1){return t=t||1,0!==parseInt(e)&&parseInt(e)!==parseInt(t)}_isFiltered(e,t,l){return null!==t&&t===e&&l}_isNegative(e){return this._isNumeric(e)&&0===e.trim().indexOf("-")}_isNumericColumn(e){let t=!0;for(let l=0;l<this.tbody.length;l++)this._isNumeric(this.tbody[l][e])||(t=!1);return t}_isRowHeader(e,t){return 0===t&&e}_tableChanged(){this._updateCols()}_selectedChanged(){this._updateCols()}_changeSortMode(e){this.sortColumn===e.detail.columnIndex&&"asc"===this.sortMode?this.sortMode="desc":this.sortColumn===e.detail.columnIndex&&"desc"===this.sortMode?this.sortMode="none":(this.sortMode="asc",this.sortColumn=e.detail.columnIndex),e.detail.setSortMode(this.sortMode),console.log("_changeSortMode",e.detail,this.sortMode),this.sortData(this.sortMode,e.detail.columnIndex)}_updateCols(){let e=this.shadowRoot.querySelector("#column").value,t=this.shadowRoot.querySelector("#table").querySelectorAll("th,td");if(t.length>0)for(let l=0;l<t.length;l++){let i=t[l];this._isColHidden(i.cellIndex,e)?i.setAttribute("xs-hidden",!0):i.removeAttribute("xs-hidden")}}filterRows(e,t){return null!=t?function(l){return l[e].toLowerCase().trim()===t.toLowerCase().trim()}:null}sortData(e,t){if("none"!==e&&!1!==e){let l=this.tbody.slice();for(let e=0;e<l.length;e++)l[e].unshift(l[e][t]);"asc"===e?l.sort():l.reverse();for(let e=0;e<l.length;e++)this.set("tbody."+e,[]),this.set("tbody."+e,l[e].slice(1));console.log("sortData",e,t,l,this.data)}else console.log("sortData",e,t,this.data)}toggleFilter(e){void 0===e||this.filterColumn==e.detail.columnIndex&&this.filtered?(this.filtered=!1,this.filterText=null,this.filterColumn=null):(this.filterText=e.detail.text,this.filterColumn=e.detail.columnIndex,this.filtered=!0)}constructor(){super(),import("./editable-table-sort.js"),import("./editable-table-filter.js")}connectedCallback(){super.connectedCallback(),l(this,(function(){this.addEventListener("change-sort-mode",this._changeSortMode.bind(this)),this.addEventListener("toggle-filter",this.toggleFilter.bind(this))}))}disconnectedCallback(){this.removeEventListener("change-sort-mode",this._changeSortMode.bind(this)),this.removeEventListener("toggle-filter",this.toggleFilter.bind(this)),super.disconnectedCallback()}}window.customElements.define(EditableTableDisplay.tag,EditableTableDisplay);export{EditableTableDisplay};