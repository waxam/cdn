import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../../@polymer/polymer/lib/utils/render-status.js";import"../../dropdown-select/dropdown-select.js";import"../../../@polymer/paper-item/paper-item.js";import"../../../@polymer/polymer/lib/elements/dom-repeat.js";import"../../../@polymer/polymer/lib/elements/dom-if.js";import"../../simple-colors/simple-colors.js";import{ResponsiveUtilityBehaviors}from"../../responsive-utility/lib/responsive-utility-behaviors.js";import{displayBehaviors}from"./editable-table-behaviors.js";import"./editable-table-sort.js";import"./editable-table-filter.js";import"./editable-table-styles.js";class EditableTableDisplay extends(displayBehaviors(ResponsiveUtilityBehaviors(PolymerElement))){static get template(){return html`
      <style include="simple-colors-shared-styles editable-table-styles">
        :host([dark]) .caption {
          padding: 4px 4px 0;
        }
        :host([bordered]) .table .th,
        :host([bordered]) .table .td {
          border: 1px solid var(--editable-table-border-color);
        }
        :host([striped]) .table .tbody .tr:nth-child(2n) .th,
        :host([striped]) .table .tbody .tr:nth-child(2n) .td {
          @apply --editable-table-style-stripe;
        }
        :host([column-header]) .table .thead .tr .th {
          @apply --editable-table-style-column-header;
        }
        :host([row-header]) .table .tbody .tr .th {
          @apply --editable-table-style-row-header;
        }
        :host([footer]) .table .tfoot .tr .th,
        :host([footer]) .table .tfoot .tr .td {
          @apply --editable-table-style-footer;
        }
      </style>
      <table id="table" class="table" default-xs-display="">
        <caption class="caption">
          <div>
            <div>[[caption]]</div>
            <dropdown-select id="column" label\$="[[tables.0.label]]" value="1">
              <template
                is="dom-repeat"
                items="[[thead.0]]"
                as="col"
                index-as="index"
              >
                <template is="dom-if" if="[[columnHeader]]">
                  <paper-item id\$="[[index]]" value\$="[[index]]"
                    >[[col]]</paper-item
                  >
                </template>
                <template is="dom-if" if="[[!columnHeader]]">
                  <paper-item id\$="[[index]]">Column [[index]]</paper-item>
                </template>
              </template>
            </dropdown-select>
          </div>
        </caption>
        <thead class="thead" hidden="[[!columnHeader]]">
          <tr class="tr">
            <template
              is="dom-repeat"
              items="[[thead.0]]"
              as="th"
              index-as="index"
            >
              <th
                class="th"
                scope="col"
                numeric\$="[[_isNumericColumn(index)]]"
              >
                <template is="dom-if" if="[[sort]]" restamp="">
                  <editable-table-sort
                    sort-column\$="[[sortColumn]]"
                    column-number="[[index]]"
                    text\$="[[th]]"
                  ></editable-table-sort>
                </template>
                <template is="dom-if" if="[[!sort]]" restamp=""
                  >[[th]]</template
                >
              </th>
            </template>
          </tr>
        </thead>
        <tbody id="tbody" class="tbody">
          <template
            is="dom-repeat"
            items="[[tbody]]"
            as="tr"
            filter="{{filterRows(filterColumn,filterText)}}"
            restamp=""
          >
            <tr class="tr">
              <template
                is="dom-repeat"
                items="[[tr]]"
                as="cell"
                index-as="index"
                restamp=""
              >
                <template
                  is="dom-if"
                  if="[[_isRowHeader(rowHeader,index)]]"
                  restamp=""
                >
                  <th
                    class="th"
                    scope="row"
                    numeric\$="[[_isNumericColumn(index)]]"
                  >
                    [[cell]]
                  </th>
                </template>
                <template
                  is="dom-if"
                  if="[[!_isRowHeader(rowHeader,index)]]"
                  restamp=""
                >
                  <td
                    class="td"
                    numeric\$="[[_isNumericColumn(index)]]"
                    negative\$="[[_isNegative(cell)]]"
                  >
                    <template is="dom-if" if="[[filter]]" restamp="">
                      <editable-table-filter
                        column-number="[[index]]"
                        text\$="[[cell]]"
                        filtered\$="[[_isFiltered(index,filterColumn,filtered)]]"
                      ></editable-table-filter>
                    </template>
                    <template is="dom-if" if="[[!filter]]" restamp=""
                      ><span class="cell">[[cell]]</span></template
                    >
                  </td>
                </template>
              </template>
            </tr>
          </template>
        </tbody>
        <template is="dom-if" if="[[footer]]">
          <tfoot class="tfoot">
            <tr class="tr">
              <template
                is="dom-repeat"
                items="[[__tfoot.0]]"
                as="cell"
                index-as="index"
              >
                <template is="dom-if" if="[[_isRowHeader(rowHeader,index)]]">
                  <th
                    class="th"
                    scope="row"
                    numeric\$="[[_isNumericColumn(index)]]"
                  >
                    [[cell]]
                  </th>
                </template>
                <template is="dom-if" if="[[!_isRowHeader(rowHeader,index)]]">
                  <td
                    class="td"
                    numeric\$="[[_isNumericColumn(index)]]"
                    negative\$="[[_isNegative(cell)]]"
                  >
                    [[cell]]
                  </td>
                </template>
              </template>
            </tr>
          </tfoot>
        </template>
      </table>
    `}static get tag(){return"editable-table-display"}static get properties(){return{editMode:{type:Boolean,value:!1},filterColumn:{type:Number,value:null},filtered:{type:Boolean,value:!1},filterText:{type:String,value:null},hideEditMode:{type:Boolean,value:!1},selected:{type:Number,value:1},sortMode:{type:String,value:"none"},sortColumn:{type:Number,value:-1},thead:{type:Array,computed:"_getThead(data,columnHeader)"},tbody:{type:Array,computed:"_getTbody(data,columnHeader,footer)"}}}_getTbody(data,columnHeader,footer){if(null!=data&&data.length>0){let tbody,ch=columnHeader?1:0;return footer?(tbody=data.slice(ch,data.length-1),this.__tfoot=data.slice(data.length-1)):(tbody=data.slice(ch,data.length),this.__tfoot=[]),tbody}return[]}_getThead(data,columnHeader){return null!=data&&data.length>0&&columnHeader?data.slice(0,1):[]}_isFiltered(column,filterColumn,filtered){return null!==filterColumn&&filterColumn===column&&filtered}_isNegative(cell){return this._isNumeric(cell)&&0===cell.trim().indexOf("-")}_isNumeric(cell){return null!==cell&&!isNaN(cell.trim().replace(/\$/g,""))}_isNumericColumn(col){let numeric=!0;for(let i=0;i<this.tbody.length;i++)this._isNumeric(this.tbody[i][col])||(numeric=!1);return numeric}_isRowHeader(rowHeader,index){return 0===index&&rowHeader}_onColumnChange(e){this.selected=e.detail.value,this._updateCols(parseInt(e.detail.value))}_changeSortMode(e){this.sortColumn===e.detail.columnNumber&&"asc"===this.sortMode?this.sortMode="desc":this.sortColumn===e.detail.columnNumber&&"desc"===this.sortMode?this.sortMode="none":(this.sortMode="asc",this.sortColumn=e.detail.columnNumber),e.detail.setSortMode(this.sortMode),this.sortData(this.sortMode,e.detail.columnNumber)}_updateCols(selected){this.$.table.removeAttribute("default-xs-display");let cols=this.$.table.querySelectorAll("th,td");this.$.table.setAttribute("transition",!0),setTimeout(function(){for(let i=0;i<cols.length;i++){let col=cols[i],index=col.cellIndex;0===index||index===selected?col.removeAttribute("xs-hidden"):col.setAttribute("xs-hidden",!0)}},200),this.$.table.removeAttribute("transition")}filterRows(filterColumn,filterText){return null!=filterText?function(tr){return tr[filterColumn].toLowerCase().trim()===filterText.toLowerCase().trim()}:null}sortData(type,column){if("none"!==type&&!1!==type){let temp=this.tbody.slice();for(let i=0;i<temp.length;i++)temp[i].unshift(temp[i][column]);"asc"===type?temp.sort():temp.reverse();for(let i=0;i<temp.length;i++)this.set("tbody."+i,[]),this.set("tbody."+i,temp[i].slice(1))}else{let temp=this.tbody.slice();for(let i=0;i<temp.length;i++)this.set("data."+(i+1),[]),this.set("data."+(i+1),temp[i].slice())}}toggleFilter(e){void 0===e||this.filterColumn==e.detail.columnNumber&&this.filtered?(this.filtered=!1,this.filterText=null,this.filterColumn=null):(this.filterText=e.detail.text,this.filterColumn=e.detail.columnNumber,this.filtered=!0)}connectedCallback(){super.connectedCallback(),afterNextRender(this,function(){this.addEventListener("change-sort-mode",this._changeSortMode.bind(this)),this.addEventListener("toggle-filter",this.toggleFilter.bind(this)),this.addEventListener("dropdown-select-changed",this._onColumnChange.bind(this))})}disconnectedCallback(){this.removeEventListener("change-sort-mode",this._changeSortMode.bind(this)),this.removeEventListener("toggle-filter",this.toggleFilter.bind(this)),this.removeEventListener("dropdown-select-changed",this._onColumnChange.bind(this)),super.disconnectedCallback()}}window.customElements.define(EditableTableDisplay.tag,EditableTableDisplay);export{EditableTableDisplay};