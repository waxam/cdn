import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../../@polymer/polymer/lib/utils/render-status.js";import"../../../@polymer/paper-button/paper-button.js";import"../../../@polymer/iron-icons/iron-icons.js";import"./editable-table-iconset.js";class EditableTableSort extends PolymerElement{static get template(){return html`
      <style is="custom-style">
        :host paper-button {
          padding: 0;
          margin: 0;
          width: 100%;
          min-width: unset;
          display: inline-flex;
          justify-content: space-between;
          align-items: center;
          align-content: stretch;
          text-transform: unset;
        }
        :host paper-button > div {
          flex-grow: 1;
        }
        :host .sr-only {
          position: absolute;
          left: -9999px;
          font-size: 0;
          height: 0;
          width: 0;
          overflow: hidden;
        }
        :host(:not([sort-mode="asc"])) .asc,
        :host(:not([sort-mode="desc"])) .desc,
        :host(:not([sort-mode="none"])) .none,
        :host #asc,
        :host #desc,
        :host([sorting]:not([sort-mode="none"])) #none {
          display: none;
        }
        :host([sorting][sort-mode="asc"]) #asc,
        :host([sorting][sort-mode="desc"]) #desc {
          display: flex;
        }
      </style>
      <paper-button id="button" class="container">
        [[text]] <span class="sr-only asc">(ascending)</span>
        <span class="sr-only desc">(descending)</span>
        <span class="sr-only"> Toggle sort mode.</span>
        <iron-icon id="asc" icon="arrow-drop-up"></iron-icon>
        <iron-icon id="desc" icon="arrow-drop-down"></iron-icon>
        <iron-icon id="none" icon="editable-table:sortable"></iron-icon>
      </paper-button>
    `}static get tag(){return"editable-table-sort"}connectedCallback(){super.connectedCallback(),afterNextRender(this,function(){this.addEventListener("click",this._onSortTapped.bind(this))})}disconnectedCallback(){this.removeEventListener("click",this._onSortTapped.bind(this)),super.disconnectedCallback()}static get properties(){return{columnNumber:{type:Number,value:null,reflectToAttribute:!0},sortMode:{type:String,value:"none",reflectToAttribute:!0},sortColumn:{type:Number,value:-1,reflectToAttribute:!0},sorting:{type:Boolean,computed:"_isSorting(columnNumber,sortColumn)",reflectToAttribute:!0},text:{type:String,value:""}}}_onSortTapped(){this.dispatchEvent(new CustomEvent("change-sort-mode",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}setSortMode(mode){this.sortMode=mode,this.__checked="asc"===mode||"desc"===mode&&mode}_isSorting(columnNumber,sortColumn){return columnNumber===sortColumn}}window.customElements.define(EditableTableSort.tag,EditableTableSort);export{EditableTableSort};