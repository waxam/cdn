import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../../@polymer/polymer/lib/utils/render-status.js";import"../../../@polymer/paper-button/paper-button.js";import"../../../@polymer/paper-toggle-button/paper-toggle-button.js";import"../../../@polymer/paper-item/paper-item.js";import"../../../@polymer/paper-tooltip/paper-tooltip.js";/**
`editable-table-editor-toggle`

A toggle button for an property in the editable-table 
interface (editable-table.html).

* @demo demo/index.html

@microcopy - the mental model for this element

<editable-table-editor-toggle
  hidden                          //Hide and disable this toggle? Default is false.
  label="Condensed"               //The label for the toggle button
  prop="condensed"                //The property controlled by this toggle
  tooltip="Condense cell height." //A tooltip for this toggle.
  value="true">                   //The value of this toggle.
</editable-table-editor-toggle>

*/class EditableTableEditorToggle extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: block;
        }
        :host .setting {
          font-size: 95%;
          padding: var(--editable-table-toggle-padding, 8px 0px);
          justify-content: space-between;
          width: 100%;
        }
        :host([disabled]) .setting-text {
          opacity: 0.5;
        }
      </style>
      <div class="setting">
        <div class="setting-control">
          <paper-toggle-button
            id="button"
            checked\$="[[value]]"
            disabled\$="[[disabled]]"
            >[[label]]</paper-toggle-button
          >
          <paper-tooltip id="tooltip" for="button">[[tooltip]]</paper-tooltip>
        </div>
      </div>
    `}static get tag(){return"editable-table-editor-toggle"}connectedCallback(){super.connectedCallback();afterNextRender(this,function(){this.addEventListener("change",this._onChange.bind(this))})}disconnectedCallback(){this.removeEventListener("change",this._onChange.bind(this));super.disconnectedCallback()}static get properties(){return{/**
       * is the toggle disabled
       */disabled:{type:Boolean,value:!1,reflectToAttribute:!0},/**
       * label for menu setting
       */label:{type:String,value:null},/**
       * the property to update
       */prop:{type:String,value:null},/**
       * tool tip for menu setting
       */tooltip:{type:String,value:null},/**
       * boolean value of menu setting
       */value:{type:Boolean,value:!1}}}/**
   * Set up event listener to fire when toggled
   */_onChange(e){if(e.srcElement===this.$.button)this.dispatchEvent(new CustomEvent("editable-table-setting-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:{prop:this.prop,value:e.srcElement.checked}}))}}window.customElements.define(EditableTableEditorToggle.tag,EditableTableEditorToggle);export{EditableTableEditorToggle};