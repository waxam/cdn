import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import"../../@polymer/polymer/lib/elements/dom-if.js";import{flush}from"../../@polymer/polymer/lib/utils/flush.js";import"./lib/a11y-collapse-accordion-button.js";import"./lib/a11y-collapse-icon-button.js";class A11yCollapse extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: block;
          margin: var(--a11y-collapse-margin, 15px 0);
          border: var(--a11y-collapse-border, 1px solid);
          transition: all 0.5s;
          @apply --a11y-collapse;
        }
        :host #content {
          max-height: 0;
          overflow: hidden;
          padding: 0
            var(
              --a11y-collapse-padding-right,
              var(--a11y-collapse-horizontal-padding, 16px)
            )
            0
            var(
              --a11y-collapse-padding-left,
              var(--a11y-collapse-horizontal-padding, 16px)
            );
          border-top: 0px solid rgba(255, 255, 255, 0);
          transition: all 0.5s ease-in-out;
          @apply --a11y-collapse-content;
        }
        :host(:not(:first-of-type)) {
          border-top: var(
            --a11y-collapse-border-between,
            var(--a11y-collapse-border, 1px solid)
          );
        }
        :host([disabled]) {
          opacity: 0.5;
          @apply --a11y-collapse-disabled;
        }
        :host([disabled]:not([accordion])) #expand,
        :host([disabled][accordion]) #heading {
          cursor: not-allowed;
        }
        :host([expanded]) {
          @apply --a11y-collapse-expanded;
        }
        :host([expanded]) #content {
          max-height: unset;
          overflow: hidden;
          padding: var(
              --a11y-collapse-padding-top,
              var(--a11y-collapse-vertical-padding, 16px)
            )
            var(
              --a11y-collapse-padding-right,
              var(--a11y-collapse-horizontal-padding, 16px)
            )
            var(
              --a11y-collapse-padding-bottom,
              var(--a11y-collapse-vertical-padding, 16px)
            )
            var(
              --a11y-collapse-padding-left,
              var(--a11y-collapse-horizontal-padding, 16px)
            );
          border-top: var(--a11y-collapse-border, 1px solid);
          @apply --a11y-collapse-content-expanded;
        }
        :host(:not([expanded])) #content-inner {
          overflow: hidden;
        }
      </style>
      <template is="dom-if" if="[[!accordion]]" restamp>
        <a11y-collapse-icon-button
          id="iconbutton"
          disabled$="[[disabled]]"
          expanded$="[[_setAriaExpanded(expanded)]]"
          label$="[[_getExpandCollapse(expanded,label,labelExpanded)]]"
          icon$="[[_getExpandCollapse(expanded,icon,iconExpanded)]]"
          rotated$="[[__rotateIcon]]"
          tooltip$="[[_getExpandCollapse(expanded,tooltip,tooltipExpanded)]]"
        >
          <slot name="heading"></slot>
        </a11y-collapse-icon-button>
      </template>
      <template is="dom-if" if="[[accordion]]" restamp>
        <a11y-collapse-accordion-button
          id="accordionbutton"
          disabled$="[[disabled]]"
          expanded$="[[_setAriaExpanded(expanded)]]"
          label$="[[_getExpandCollapse(expanded,label,labelExpanded)]]"
          icon$="[[_getExpandCollapse(expanded,icon,iconExpanded)]]"
          rotated$="[[__rotateIcon]]"
          tooltip$="[[_getExpandCollapse(expanded,tooltip,tooltipExpanded)]]"
        >
          <slot name="heading"></slot>
        </a11y-collapse-accordion-button>
      </template>
      <div
        id="content"
        aria-hidden\$="{{!expanded}}"
        aria-labelledby="heading"
        aria-live="polite"
      >
        <div id="content-inner"><slot name="content"></slot><slot></slot></div>
      </div>
    `}static get tag(){return"a11y-collapse"}static get properties(){return{accordion:{name:"accordion",type:Boolean,value:!1,observer:"_flush",reflectToAttribute:!0},disabled:{name:"disabled",type:Boolean,value:!1,reflectToAttribute:!0},expanded:{name:"expanded",type:Boolean,value:!1,reflectToAttribute:!0,observer:"_fireToggleEvents"},icon:{name:"icon",type:String,value:"expand-more"},iconExpanded:{name:"iconExpanded",type:String,value:null},label:{name:"label",type:String,value:"expand/collapse"},labelExpanded:{name:"labelExpanded",type:String,value:null},tooltip:{name:"tooltip",type:String,value:"toggle expand/collapse"},tooltipExpanded:{name:"tooltipExpanded",type:String,value:null},__rotateIcon:{name:"__rotateIcon",type:Boolean,computed:"_isRotated(expanded,iconExpanded)"}}}_flush(newValue){flush()}connectedCallback(){super.connectedCallback(),this.dispatchEvent(new CustomEvent("a11y-collapse-attached",{bubbles:!0,cancelable:!0,composed:!0,detail:this})),this.addEventListener("a11y-collapse-tap",this._onTap.bind(this))}static get haxProperties(){return{canScale:!1,canPosition:!0,canEditSource:!1,gizmo:{title:"Single Expand Collapse",description:"A single instance of an expand collapse.",icon:"view-day",color:"grey",groups:["Text"],meta:{author:"Your organization on github"}},settings:{quick:[],configure:[{property:"expanded",title:"Expanded",description:"Expand by default",inputMethod:"boolean"},{property:"label",title:"Label",description:"The label of the toggle expand/collapse button",inputMethod:"textfield",icon:"editor:title"},{property:"tooltip",title:"Tooltip",description:"The tooltip for the toggle expand/collapse button",inputMethod:"textfield",icon:"editor:title"},{property:"icon",title:"Icon",description:"The icon for the toggle expand/collapse button",inputMethod:"textfield",icon:"editor:title"},{property:"iconExpanded",title:"Expanded Icon",description:"Optional: The icon for the toggle expand/collapse button when expanded",inputMethod:"textfield",icon:"editor:title"}],advanced:[]}}}collapse(){this.toggle(!1)}disconnectedCallback(){this.dispatchEvent(new CustomEvent("a11y-collapse-detached",{bubbles:!0,cancelable:!0,composed:!0,detail:this})),this.removeEventListener("a11y-collapse-tap",this._onTap.bind(this)),super.disconnectedCallback()}expand(){this.toggle(!0)}toggle(mode){this.expanded=void 0!==mode?mode:!this.expanded}_fireToggleEvents(){this.dispatchEvent(new CustomEvent("toggle",{bubbles:!0,cancelable:!0,composed:!0,detail:this})),this.dispatchEvent(new CustomEvent("a11y-collapse-toggle",{bubbles:!0,cancelable:!0,composed:!0,detail:this})),this.expanded?this.dispatchEvent(new CustomEvent("expand",{bubbles:!0,cancelable:!0,composed:!0,detail:this})):this.dispatchEvent(new CustomEvent("collapse",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}_overrideProp(prop,val){this[prop]=val}_getExpandCollapse(expanded,ifFalse,ifTrue){return expanded&&null!==ifTrue?ifTrue:ifFalse}_isRotated(expanded,iconExpanded){return!expanded&&null===iconExpanded}_onTap(e){this.disabled||(this.toggle(),this.dispatchEvent(new CustomEvent("a11y-collapse-click",{bubbles:!0,cancelable:!0,composed:!0,detail:this})))}_setAriaExpanded(expanded){return""+expanded}}window.customElements.define(A11yCollapse.tag,A11yCollapse);export{A11yCollapse};