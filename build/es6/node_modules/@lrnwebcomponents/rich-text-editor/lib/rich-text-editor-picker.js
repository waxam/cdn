import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{RichTextEditorButton}from"./rich-text-editor-button.js";import"../../es-global-bridge/es-global-bridge.js";import{pathFromUrl}from"../../../@polymer/polymer/lib/utils/resolve-url.js";import"../../simple-picker/simple-picker.js";class RichTextEditorPicker extends RichTextEditorButton{static get template(){return html`
      <style include="rich-text-editor-styles"></style>
      <simple-picker id="button"
        disabled$="[[disabled]]" 
        controls="[[controls]]"
        on-change="_pickerChange"
        tabindex="0"
        title-as-html$="[[titleAsHtml]]"
        options="[[options]]"
        value="{{value}}">
        <span id="label" class$="[[labelStyle]]"></span>
      </paper-button>
      <paper-tooltip id="tooltip" for="button"></paper-button>
    `}static get properties(){return{allowNull:{name:"allowNull",type:"Boolean",value:!1},command:{name:"command",type:"String",value:"insertHTML",readOnly:!0},icon:{name:"icon",type:"String",value:null},options:{name:"options",type:"Array",value:[],notify:!0},titleAsHtml:{name:"titleAsHtml",type:"Boolean",value:!1},value:{name:"value",type:"Object",value:null}}}static get tag(){return"rich-text-editor-picker"}_isToggled(selection){if(null!==selection){if("formatBlock"===this.command){let ancestor=selection.commonAncestorContainer,parent=ancestor.parentNode,temp=[];this.options.forEach(function(row){row.forEach(function(option){temp.push(option.value)})});this.$.button.value=null!==parent.closest(temp.join(","))?parent.closest(temp.join(",")).tagName.toLowerCase():null}}return!1}_setOptions(){this.set("options",this._getPickerOptions(data,this.allowNull,this.icon))}_pickerChange(e){let val=this.$.button.value;e.preventDefault();if(null!==val&&this.selection!==void 0&&null!==this.selection){this.commandVal=this.$.button.value;if(this.command="formatBlock"){this.doTextOperation()}else if(this.command="insertNode"){let node=!this.block?document.createTextNode(val):document.createElement(val);this.selection.extractContents();this.selection.insertNode(node)}if(!0!==this.block){this.$.button.value=null;this.dispatchEvent(new CustomEvent("deselect",{detail:this}))}}}_getOptionData(option){return{alt:option.alt,icon:option.icon,style:option.style,value:option.value}}_getPickerOptions(options=[],allowNull=!1,icon=null){var _Mathsqrt=Math.sqrt;let items=!1===allowNull&&null===icon?[{alt:"null",icon:icon,value:null}]:[],cols=11>_Mathsqrt(options.length)?Math.ceil(_Mathsqrt(options.length)):10;for(let i=0;i<options.length;i++){let row=Math.floor(i/cols),col=i-row*cols,data=this._getOptionData(options[i]);if(items[row]===void 0||null===items[row])items[row]=[];if(0===row&&!1===allowNull&&null!==icon){items[0][0]={alt:"null",icon:icon,value:null};col++}items[row][col]=data}console.log("items",items);return items}}window.customElements.define(RichTextEditorPicker.tag,RichTextEditorPicker);export{RichTextEditorPicker};