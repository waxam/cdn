/**
 * Copyright 2018 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as i,css as e}from"../../../../lit-element/lit-element.js";import{RichTextEditorStyles as o}from"../rich-text-editor-styles.js";import{RichTextEditorButtonStyles as r}from"../buttons/rich-text-editor-button-styles.js";import"../../../../@polymer/iron-a11y-keys/iron-a11y-keys.js";import"../../../simple-popover/simple-popover.js";import"../../../simple-fields/simple-fields.js";class RichTextEditorPrompt extends(r(o(t))){static get styles(){return[...super.styles,e`
        :host {
          --paper-input-container-focus-color: var(
            --rich-text-editor-focus-color,
            #000
          );
          --paper-input-container-invalid-color: var(
            --rich-text-editor-error-color,
            #800
          );
        }
        #prompt {
          display: block;
          width: 300px;
          max-width: 300px;
          --simple-popover-padding: 0px;
          z-index: 2;
        }
        #prompt[hidden] {
          display: none;
        }
        #prompt #form {
          display: flex;
          flex-direction: column;
          align-items: center;
          justify-content: space-between;
          z-index: 2;
        }
        #formfields {
          width: calc(100% - 20px);
          padding: 10px 10px 0;
          overflow: visible;
        }
        #prompt paper-input {
          padding: 0;
        }
        #confirm,
        #cancel {
          min-width: unset;
        }
        #cancel {
          color: var(--rich-text-editor-button-color);
          background-color: var(--rich-text-editor-button-bg);
        }
        #cancel:focus,
        #cancel:hover {
          color: var(--rich-text-editor-button-hover-color);
          background-color: var(--rich-text-editor-button-hover-bg);
        }
        #confirm {
          color: var(--rich-text-editor-button-color);
          background-color: var(--rich-text-editor-button-bg);
        }
        #confirm:focus,
        #confirm:hover {
          color: var(--rich-text-editor-button-hover-color);
          background-color: var(--rich-text-editor-button-hover-bg);
        }
        .actions {
          width: 100%;
          padding-bottom: 3px;
          display: flex;
          align-items: center;
          justify-content: flex-end;
        }
        .confirm-or-cancel {
          min-width: 40px;
        }
      `]}render(){return i`
      <simple-popover id="prompt" auto for="${this.for}" ?hidden="${!this.for}">
        <form id="form">
          <simple-fields
            id="formfields"
            autofocus
            hide-line-numbers
            .fields="${this.fields}"
            .value="${this.value}"
          ></simple-fields>
          <div class="actions">
            <paper-button
              id="cancel"
              class="rtebutton"
              controls="${this.for}"
              @click="${this._cancel}"
              tabindex="0"
            >
              <iron-icon id="icon" aria-hidden="true" icon="clear"> </iron-icon>
              <span id="label" class="offscreen">Cancel</span>
            </paper-button>
            <simple-tooltip id="tooltip" for="cancel">Cancel</simple-tooltip>
            <paper-button
              id="confirm"
              class="rtebutton"
              controls="${this.for}"
              @click="${this._confirm}"
              tabindex="0"
            >
              <iron-icon id="icon" aria-hidden="true" icon="check"> </iron-icon>
              <span id="label" class="offscreen">OK</span>
            </paper-button>
            <simple-tooltip id="tooltip" for="confirm">OK</simple-tooltip>
          </div>
        </form>
      </simple-popover>
    `}static get tag(){return"rich-text-editor-prompt"}static get properties(){return{for:{type:String},range:{type:Object},fields:{type:Array},value:{type:Object},__button:{type:Object}}}constructor(){if(super(),!window.RichTextEditorPrompt.instance)return window.RichTextEditorPrompt.instance=this,this}connectedCallback(){super.connectedCallback()}setTarget(t){this.clearTarget(),this.fields=t.__promptFields,this.value=t.value,this.__button=t,t.__selection&&(this.for=t.__selection.getAttribute("id"))}clearTarget(){this.__button&&(this.for=void 0,this.fields=void 0,this.value=void 0,this.__button=void 0)}_cancel(t){t.preventDefault(),this.__button&&(this.__button.cancel(),this.clearTarget())}_confirm(t){t.preventDefault(),this.__button.value=this.value,this.__button.confirm(),this.clearTarget()}getPromptValue(t){let i=!!this.value&&this.value,e=!(!i||!i[t])&&(i[t].trim?i[t].trim():i[t]);return!(!e||""===e)&&e}}window.customElements.define(RichTextEditorPrompt.tag,RichTextEditorPrompt);export{RichTextEditorPrompt};window.RichTextEditorPrompt=window.RichTextEditorPrompt||{},window.RichTextEditorPrompt.requestAvailability=()=>(window.RichTextEditorPrompt.instance||(window.RichTextEditorPrompt.instance=document.createElement("rich-text-editor-prompt"),document.body.appendChild(window.RichTextEditorPrompt.instance)),window.RichTextEditorPrompt.instance);