import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import"../../../@polymer/paper-button/paper-button.js";import"../../../@polymer/paper-tooltip/paper-tooltip.js";import"../../../@polymer/iron-icons/iron-icons.js";class RichTextEditorButton extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: flex;
          flex: 0 0 auto;
          align-items: stretch;
          margin: 3px;
        }
        :host([hidden]) {
          display: none;
        }
        :host #button {
          text-transform: unset;
          color: var(--rich-text-editor-button-color, #444);
          border-color: var(--rich-text-editor-button-border, transparent);
          padding: 0;
          transition: all 0.5s;
          min-width: 24px;
          height: 24px;
          @apply --rich-text-editor-button;
        }
        :host([disabled]) #button {
          cursor: not-allowed;
          color: var(--rich-text-editor-button-disabled-color, #666);
          background-color: var(--rich-text-editor-button-disabled-bg, transparent);
          @apply --rich-text-editor-button-disabled;
        }
        :host([toggled]) #button {
          color: var(--rich-text-editor-button-toggled-color, #222);
          background-color: var(--rich-text-editor-button-toggled-bg, #e0e0e0);
          @apply --rich-text-editor-button-toggled;
        }
        :host #button:focus,
        :host #button:hover {
          color: var(--rich-text-editor-button-hover-color, #000);
          background-color: var(--rich-text-editor-button-hover-bg, #f0f0f0);
        }
        :host #icon:not([icon]) {
          display:none;
        }
        :host #label.offscreen {
          position: absolute;
          left: -999999px;
          top: 0;
          height: 0;
          width: 0;
          overflow: hidden;
        }
      </style>
      <iron-a11y-keys
        id="a11y"
        target="[[__a11y]]"
        keys="enter"
        on-keys-pressed="_buttonTap">
      </iron-a11y-keys>
      <paper-button id="button"
        disabled$="[[disabled]]" 
        controls="[[controls]]"
        on-tap="_buttonTap"
        tabindex="0"
        toggled$="[[toggled]]">
        <iron-icon id="icon" 
          aria-hidden
          icon$="[[icon]]">
        </iron-icon>
        <span id="label" class$="[[labelStyle]]">[[label]]</span>
      </paper-button>
      <paper-tooltip id="tooltip" 
        for="button">
        [[label]]
      </paper-button>
    `}static get properties(){return{disabled:{name:"disabled",type:"Boolean",value:!1},command:{name:"command",type:"String",value:null},event:{name:"event",type:"String",value:null},icon:{name:"icon",type:"String",value:null},label:{name:"label",type:"String",value:null},labelStyle:{name:"labelStyle",type:"String",computed:"_labelStyle(icon,showTextLabel)",readOnly:!0},showTextLabel:{name:"showTextLabel",type:"Boolean",value:!1},toggled:{name:"toggled",type:"Boolean",value:!1},toggles:{name:"toggles",type:"Boolean",value:!1}}}static get tag(){return"rich-text-editor-button"}connectedCallback(){super.connectedCallback();this.__a11y=this.$.button}_buttonTap(){this.dispatchEvent(new CustomEvent("rich-text-button-tap",{detail:this}))}_labelStyle(icon,showTextLabel){return icon!==void 0&&null!==icon&&""!==icon&&!1===showTextLabel?"offscreen":null}}window.customElements.define(RichTextEditorButton.tag,RichTextEditorButton);export{RichTextEditorButton};