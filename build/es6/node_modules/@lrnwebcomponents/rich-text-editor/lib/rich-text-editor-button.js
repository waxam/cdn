import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import"../../../@polymer/paper-button/paper-button.js";import"../../../@polymer/paper-tooltip/paper-tooltip.js";import"../../../@polymer/iron-icons/iron-icons.js";import"./rich-text-editor-styles.js";class RichTextEditorButton extends PolymerElement{static get template(){return html`
      <style include="rich-text-editor-styles"></style>
      <iron-a11y-keys
        id="a11y"
        target="[[__a11y]]"
        keys="enter"
        on-keys-pressed="_buttonTap">
      </iron-a11y-keys>
      <paper-button id="button"
        disabled$="[[disabled]]" 
        controls="[[controls]]"
        on-tap="_buttonTap"
        tabindex="0"
        toggled$="[[toggled]]">
        <iron-icon id="icon" 
          aria-hidden
          icon$="[[_regOrToggled(icon,toggledIcon,toggled)]]">
        </iron-icon>
        <span id="label" class$="[[labelStyle]]"></span>
      </paper-button>
      <paper-tooltip id="tooltip" for="button"></paper-button>
    `}static get properties(){return{command:{name:"command",type:"String",value:null},commandVal:{name:"commandVal",type:"Object",value:null,notify:!0},disabled:{name:"disabled",type:"Boolean",value:!1},icon:{name:"icon",type:"String",value:null},label:{name:"label",type:"String",value:null},labelStyle:{name:"labelStyle",type:"String",computed:"_labelStyle(icon,showTextLabel)",readOnly:!0},selection:{name:"selection",type:"Object",notify:!0,value:null},showTextLabel:{name:"showTextLabel",type:"Boolean",value:!1},toggled:{name:"toggled",type:"Boolean",computed:"_isToggled(selection)",notify:!0},toggledCommand:{name:"toggledCommand",type:"String",value:null},toggledCommandVal:{name:"toggledCommandVal",type:"Object",value:null},toggledIcon:{name:"toggledIcon",type:"String",value:null},toggledLabel:{name:"toggledLabel",type:"String",value:null},toggles:{name:"toggles",type:"Boolean",value:!1},validCommands:{name:"validCommands",type:"Array",value:["backColor","bold","createLink","copy","cut","defaultParagraphSeparator","delete","fontName","fontSize","foreColor","formatBlock","forwardDelete","insertHorizontalRule","insertHTML","insertImage","insertLineBreak","insertOrderedList","insertParagraph","insertText","insertUnorderedList","justifyCenter","justifyFull","justifyLeft","justifyRight","outdent","paste","redo","selectAll","strikethrough","styleWithCss","superscript","undo","unlink","useCSS"],readOnly:!0}}}static get tag(){return"rich-text-editor-button"}ready(){super.ready();this}connectedCallback(){super.connectedCallback();this.__a11y=this.$.button}disconnectedCallback(){super.disconnectedCallback()}doTextOperation(){let root=this,selection=root.selection;if(root.toggled&&null!==root.toggledCommand){document.execCommand(root.toggledCommand,!1,root.toggledCommand||"")}else if(null!==root.command){document.execCommand(root.command,!1,root.commandVal||"")}root.selection=selection}_isToggled(){let toggled=null!==this.command&&this.toggles?document.queryCommandState(this.command):!1,label=this._regOrToggled(this.label,this.toggledLabel,toggled);this.$.label.innerHTML=label;this.$.tooltip.innerHTML=label;return toggled}_buttonTap(e){e.preventDefault();this.doTextOperation()}_regOrToggled(toggledOff,toggledOn,toggled){return null!==toggledOn&&toggled?toggledOn:toggledOff}_labelStyle(icon,showTextLabel){return icon!==void 0&&null!==icon&&""!==icon&&!1===showTextLabel?"offscreen":null}}window.customElements.define(RichTextEditorButton.tag,RichTextEditorButton);export{RichTextEditorButton};