import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{RichTextEditorPicker}from"./rich-text-editor-picker.js";import"../../es-global-bridge/es-global-bridge.js";import{pathFromUrl}from"../../../@polymer/polymer/lib/utils/resolve-url.js";import"../../../@polymer/iron-icons/editor-icons.js";class RichTextEditorSymbolPicker extends RichTextEditorPicker{static get properties(){return{icon:{name:"icon",type:"String",value:"editor:functions",readOnly:!0},optionsSrc:{name:"optionsSrc",type:"String",value:"data/symbols.js"},symbolTypes:{name:"symbolTypes",type:"Array",value:["symbols","math","characters","greek","misc"]},titleAsHtml:{name:"titleAsHtml",type:"Boolean",value:!0,readOnly:!0},value:{name:"value",type:"String",value:"null"}}}static get tag(){return"rich-text-editor-symbol-picker"}connectedCallback(){super.connectedCallback();const name="symbols",basePath=pathFromUrl(decodeURIComponent(import.meta.url)),src=this.optionsSrc;window.addEventListener(`es-bridge-${name}-loaded`,this._setOptions.bind(this));window.ESGlobalBridge.requestAvailability();window.ESGlobalBridge.instance.load(name,`${basePath}${src}`)}_setOptions(){let optData=[];this.symbolTypes.forEach(function(type){optData=optData.concat(symbols[type])});this.set("options",this._getPickerOptions(optData,this.allowNull,this.icon))}_getOptionData(option){return{value:option,alt:option,icon:null,style:null}}}window.customElements.define(RichTextEditorSymbolPicker.tag,RichTextEditorSymbolPicker);export{RichTextEditorSymbolPicker};