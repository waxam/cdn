import{LitElement as e,html as t,css as o}from"../../../lit-element/lit-element.js";import"../../hexagon-loader/hexagon-loader.js";import"../../../@polymer/iron-icons/av-icons.js";import"../../../@polymer/iron-icons/communication-icons.js";import"../../../@polymer/iron-icons/device-icons.js";import"../../../@polymer/iron-icons/editor-icons.js";import"../../../@polymer/iron-icons/hardware-icons.js";import"../../../@polymer/iron-icons/image-icons.js";import"../../../@polymer/iron-icons/iron-icons.js";import"../../../@polymer/iron-icons/maps-icons.js";import"../../../@polymer/iron-icons/notification-icons.js";import"../../../@polymer/iron-icons/places-icons.js";import"../../../@polymer/iron-icons/social-icons.js";import"../../lrn-icons/lrn-icons.js";import"../../mdi-iconset-svg/mdi-iconset-svg.js";import"../../hax-iconset/hax-iconset.js";import"../../simple-fields/lib/simple-fields-form.js";import"./hax-element-card-list.js";class HaxElementListSelector extends e{static get tag(){return"hax-element-list-selector"}static get styles(){return[o`
        :host {
          display: block;
        }
        :host([loading]) hax-element-card-list {
          visibility: hidden;
          opacity: 0;
          transition: 1s ease-in-out all;
        }
        hax-element-card-list {
          visibility: visible;
          opacity: 1;
        }
        hexagon-loader[loading] {
          position: absolute;
          width: 100%;
        }
        [hidden] {
          display: none !important;
        }
      `]}constructor(){super(),this.loading=!1,this.cols=3,this.showCardList=!1,this.imports=[],this.haxData=[],this.noSchema={},this.method="GET",this.fieldsEndpoint=this.pathFromUrl(decodeURIComponent(import.meta.url))+"fields.json",window.WCGlobalBasePath?this.basePath=window.WCGlobalBasePath:this.basePath=this.pathFromUrl(decodeURIComponent(import.meta.url))+"../../../",setTimeout(()=>{window.addEventListener("active-tab-changed",this._activeTabChanged.bind(this))},0)}static get properties(){return{showCardList:{type:Boolean},imports:{type:Object},haxData:{type:Array},noSchema:{type:Object},filteredHaxData:{type:Array},cols:{type:Number},fieldsEndpoint:{type:String,attribute:"fields-endpoint"},wcRegistryEndpoint:{type:String,attribute:"wc-registry-endpoint"},method:{type:String},loading:{type:Boolean,reflect:!0}}}pathFromUrl(e){return e.substring(0,e.lastIndexOf("/")+1)}render(){return t`
      <simple-fields-form
        id="form"
        autoload
        load-endpoint="${this.fieldsEndpoint}"
        method="${this.method}"
        @response="${this._response}"
        @value-changed="${this._valueChanged}"
      >
      </simple-fields-form>
      ${this.showCardList?t`
            <hexagon-loader
              item-count="4"
              color="blue"
              ?loading="${this.loading}"
              size="large"
            ></hexagon-loader>
            <h2 ?hidden="${!this.loading}">Loading HAX elements..</h2>
            <hax-element-card-list
              id="productlist"
              @enabled-changed="${this._enabledChanged}"
              cols="${this.cols}"
              .list="${this.filteredHaxData}"
            ></hax-element-card-list>
          `:""}
    `}_enabledChanged(e){this.haxData.forEach((t,o)=>{t.tag==e.detail.tag&&(this.haxData[o].status=e.detail.status)}),this.dispatchEvent(new CustomEvent("appstore-changed",{detail:{value:this.getAppstoreValues()}}))}_activeTabChanged(e){"haxcore.search"==e.detail.activeTab?this.showCardList=!0:this.showCardList=!1}updated(e){e.forEach(async(e,t)=>{if("wcRegistryEndpoint"==t&&(this.haxData=[],this.imports=[],fetch(this[t]).then(e=>(this.loading=!0,e.json())).then(e=>{this.imports=e})),"imports"==t){let e=this.haxData,s=this.noSchema;for(var o in this[t]){let i=this[t][o];try{await import(`${this.basePath}${i}`).then(t=>{if(t&&Object.keys(t)[0]&&t[Object.keys(t)[0]].haxProperties&&t[Object.keys(t)[0]].haxProperties.gizmo&&t[Object.keys(t)[0]].haxProperties.gizmo.title){let s={tag:o,file:i,status:!0,schema:t[Object.keys(t)[0]].haxProperties};e.push(s)}else s[o]=i})}catch(e){console.warn(e)}}this.haxData=[...e],this.noSchema={},this.noSchema=s,this.loading=!1}if("haxData"==t&&(this.filteredHaxData=[...this.haxData],this.haxData.length>0)){let e={};for(var s in this.haxData)e[this.haxData[s].tag]=this.haxData[s].file;this.shadowRoot.querySelector("#form").shadowRoot.querySelector("#sf").querySelector('[name="haxcore.providerdetails.haxcore-providerdetails-haxtags"]').editorValue=JSON.stringify(e,null,2)}"noSchema"==t&&Object.keys(this.noSchema).length>0&&(this.shadowRoot.querySelector("#form").shadowRoot.querySelector("#sf").querySelector('[name="haxcore.providerdetails.haxcore-providerdetails-othertags"]').editorValue=JSON.stringify(this.noSchema,null,2))})}applyFilters(e){let t=[...this.haxData];return Object.keys(e).forEach(o=>{if(""!=e[o])switch(o){case"haxcore-search-search":t=t.filter(t=>!!t.schema.gizmo.title.toLowerCase().includes(e[o].toLowerCase()));break;case"haxcore-search-tags":t=t.filter(t=>!!t.schema.gizmo.groups.includes(e[o]));break;case"haxcore-search-hasdemo":e[o]&&(t=t.filter(e=>!!e.schema.demoSchema))}}),t}_response(e){let t=this.shadowRoot.querySelector("#form").submit();t.haxcore.search["haxcore-search-columns"]=this.cols,this.shadowRoot.querySelector("#form").setValue(t)}_valueChanged(e){clearTimeout(this.__valueDebounce),this.__valueDebounce=setTimeout(()=>{let e=this.shadowRoot.querySelector("#form").submit();e&&e.haxcore&&("other"==e.haxcore.providers["haxcore-providers-cdn"]?this.wcRegistryEndpoint=e.haxcore.providers["haxcore-providers-other"]+"wc-registry.json":this.wcRegistryEndpoint=e.haxcore.providers["haxcore-providers-cdn"]+"wc-registry.json",this.cols=parseInt(e.haxcore.search["haxcore-search-columns"]),this.filteredHaxData=[...this.applyFilters(e.haxcore.search)],this.shadowRoot.querySelector("#productlist")&&this.shadowRoot.querySelector("#productlist").requestUpdate()),this.dispatchEvent(new CustomEvent("appstore-changed",{detail:{value:this.getAppstoreValues()}}))},50)}getAppstoreValues(){let e=this.shadowRoot.querySelector("#form").submit(),t={provider:{cdn:e.haxcore.providers["haxcore-providers-cdn"],other:e.haxcore.providers["haxcore-providers-other"],pk:e.haxcore.providers["haxcore-providers-pk"]},apps:{},blox:e.haxcore.templates["haxcore-templates-templates"],stax:e.haxcore.templates["haxcore-templates-layouts"],autoloader:{}};for(var o in e.haxcore.integrations)t.apps[o.replace("haxcore-integrations-","")]=e.haxcore.integrations[o];return t.autoloader=this.getAutoloader(this.haxData),t}getAutoloader(e){let t={};for(var o in e)e[o].status&&(t[e[o].tag]=e[o].file);return t}}window.customElements.define(HaxElementListSelector.tag,HaxElementListSelector);