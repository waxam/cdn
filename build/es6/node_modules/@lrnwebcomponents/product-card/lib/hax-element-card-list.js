import{LitElement as t,html as e,css as a}from"../../../lit-element/lit-element.js";import{haxElementToNode as s}from"../../utils/utils.js";import"../../grid-plate/grid-plate.js";import"../../../@material/mwc-switch/mwc-switch.js";import"../../../@material/mwc-button/mwc-button.js";import"../../../@material/mwc-formfield/mwc-formfield.js";import"../../simple-modal/simple-modal.js";import"../product-card.js";class HAXElementCardList extends t{constructor(){super(),this.list=[],this._layout="1-1-1",window.SimpleModal.requestAvailability()}static get tag(){return"hax-element-card-list"}static get styles(){return[a`
        :host {
          display: block;
          border: 2px solid green;
          min-height: 100px;
        }
        product-card {
          display: block;
        }
        product-card div[slot="collapse-header"] {
          padding: 8px 0;
        }
        product-card div[slot="details-collapse-content"] {
          max-height: 125px;
          overflow-y: auto;
        }
      `]}static get properties(){return{list:{type:Array},enabled:{type:Object},cols:{type:Number},_layout:{type:String}}}render(){return e`
      <grid-plate .layout="${this._layout}" hide-ops>
        ${this.list.map((t,a)=>e`
            <product-card
              .slot="col-${this.__getCol(a)}"
              ?disabled="${!t.status}"
              ?has-demo="${t.schema.demoSchema}"
              heading="${t.schema.gizmo.title}"
              icon="${t.schema.gizmo.icon}"
              subheading="${t.schema.gizmo.description}"
              accent-color="${t.schema.gizmo.color}"
              data-index="${a}"
              @product-card-demo-show="${this.toggleShowDemo}"
              @product-card-demo-hide="${this.toggleShowDemo}"
            >
              <div class="switch">
                <mwc-formfield label="${t.status?"Enabled":"Disabled"}">
                  <mwc-switch
                    data-index="${a}"
                    data-tag="${t.tag}"
                    data-file="${t.file}"
                    checked
                    @change="${this.elementStatusChange}"
                  ></mwc-switch>
                </mwc-formfield>
              </div>
              <div slot="details-collapse-header">Details</div>
              <div slot="details-collapse-content">
                <ul>
                  <li>
                    <strong>Tags:</strong> ${t.schema.gizmo.groups.map(t=>e`
                          ${t},
                        `)}
                  </li>
                  <li><strong>Tag name:</strong> <code>${t.tag}</code></li>
                  <li>
                    <strong>Developer usage:</strong>
                    <code>import "${t.file}";</code>
                  </li>
                  ${t.schema.gizmo.meta?e`
                        ${Object.keys(t.schema.gizmo.meta).map(a=>e`
                            <li>
                              <strong>${this.capFirst(a)}:</strong>
                              <span>${t.schema.gizmo.meta[a]}</span>
                            </li>
                          `)}
                      `:""}
                </ul>
              </div>
              <div slot="demo-collapse-header">Demo</div>
              <div slot="demo-collapse-content">
                ${t.schema.demoSchema&&t.showDemo?e`
                      ${t.schema.demoSchema.map(t=>e`
                          <mwc-button
                            data-tag="${t.tag}"
                            @click="${this._viewDemo}"
                            >Pop up demo</mwc-button
                          >
                          <div class="demo">
                            ${this._haxElementToNode(t)}
                          </div>
                          <code-sample copy-clipboard-button>
                            <template>
                              ${this._haxElementToNode(t)}
                            </template>
                          </code-sample>
                        `)}
                    `:""}
              </div>
            </product-card>
          `)}
      </grid-plate>
    `}_viewDemo(t){t.target&&t.target.nextElementSibling&&window.dispatchEvent(new CustomEvent("simple-modal-show",{bubbles:!0,composed:!0,cancelable:!1,detail:{title:"Demo of "+t.target.getAttribute("data-tag"),styles:{"--simple-modal-width":"75vw","--simple-modal-max-width":"75vw"},elements:{content:t.target.nextElementSibling},invokedBy:t.target,clone:!0,modal:!0}}))}toggleShowDemo(t){this.list[t.path[0].getAttribute("data-index")].showDemo=t.detail.expanded,this.requestUpdate()}_haxElementToNode(t){return t&&t.tag?(import("../../code-sample/code-sample.js"),s(t)):""}capFirst(t){return t.charAt(0).toUpperCase()+t.slice(1)}elementStatusChange(t){this.list[parseInt(t.path[0].getAttribute("data-index"))].status=t.path[0].checked,this.dispatchEvent(new CustomEvent("enabled-changed",{detail:{tag:t.path[0].getAttribute("data-tag"),status:t.path[0].checked}})),this.requestUpdate()}__getCol(t){for(t++;t>this.cols;)t-=this.cols;return t}updated(t){t.forEach((t,e)=>{if("cols"==e)switch(this[e]){case 3:this._layout="1-1-1";break;case 4:this._layout="1-1-1-1";break;case 5:this._layout="1-1-1-1-1";break;case 6:this._layout="1-1-1-1-1-1";break;default:this._layout="1-1"}})}}customElements.define(HAXElementCardList.tag,HAXElementCardList);export{HAXElementCardList};