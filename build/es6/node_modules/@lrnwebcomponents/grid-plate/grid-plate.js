import{LitElement,html,css}from"../../lit-element/lit-element.js";import"../responsive-utility/responsive-utility.js";class GridPlateLayoutOptions{constructor(){this.resizeTimer=null,this.activeItem=null,this.layouts={1:{columnLayout:"1: full width",xs:["100%"],sm:["100%"],md:["100%"],lg:["100%"],xl:["100%"]},"1-1":{columnLayout:"2: equal width",xs:["100%","100%"],sm:["50%","50%"],md:["50%","50%"],lg:["50%","50%"],xl:["50%","50%"]},"2-1":{columnLayout:"2: wide & narrow",xs:["100%","100%"],sm:["50%","50%"],md:["66.6666667%","33.3333337%"],lg:["66.6666667%","33.3333337%"],xl:["66.6666667%","33.3333337%"]},"1-2":{columnLayout:"2: narrow & wide",xs:["100%","100%"],sm:["50%","50%"],md:["33.3333333%","66.6666667%"],lg:["33.3333333%","66.6666667%"],xl:["33.3333333%","66.6666667%"]},"3-1":{columnLayout:"2: wider & narrower",xs:["100%","100%"],sm:["50%","50%"],md:["75%","25%"],lg:["75%","25%"],xl:["75%","25%"]},"1-3":{columnLayout:"2: narrower & wider",xs:["100%","100%"],sm:["50%","50%"],md:["25%","75%"],lg:["25%","75%"],xl:["25%","75%"]},"1-1-1":{columnLayout:"3: equal width",xs:["100%","100%","100%"],sm:["100%","100%","100%"],md:["33.3333333%","33.3333333%","33.3333333%"],lg:["33.3333333%","33.3333333%","33.3333333%"],xl:["33.3333333%","33.3333333%","33.3333333%"]},"2-1-1":{columnLayout:"3: wide, narrow, and narrow",xs:["100%","100%","100%"],sm:["100%","50%","50%"],md:["50%","25%","25%"],lg:["50%","25%","25%"],xl:["50%","25%","25%"]},"1-2-1":{columnLayout:"3: narrow, wide, and narrow",xs:["100%","100%","100%"],sm:["100%","100%","100%"],md:["25%","50%","25%"],lg:["25%","50%","25%"],xl:["25%","50%","25%"]},"1-1-2":{columnLayout:"3: narrow, narrow, and wide",xs:["100%","100%","100%"],sm:["50%","50%","100%"],md:["25%","25%","50%"],lg:["25%","25%","50%"],xl:["25%","25%","50%"]},"1-1-1-1":{columnLayout:"4: equal width",xs:["100%","100%","100%","100%"],sm:["50%","50%","50%","50%"],md:["25%","25%","25%","25%"],lg:["25%","25%","25%","25%"],xl:["25%","25%","25%","25%"]},"1-1-1-1-1":{columnLayout:"5: equal width",xs:["100%","100%","100%","100%","100%"],sm:["50%","50%","50%","50%","50%"],md:["20%","20%","20%","20%","20%"],lg:["20%","20%","20%","20%","20%"],xl:["20%","20%","20%","20%","20%"]},"1-1-1-1-1-1":{columnLayout:"6: equal width",xs:["100%","100%","100%","100%","100%","100%"],sm:["50%","50%","50%","50%","50%","50%"],md:["33.3333333%","33.3333333%","33.3333333%","33.3333333%","33.3333333%","33.3333333%"],lg:["16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%"],xl:["16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%"]}},this.options={};let layoutFlip=Object.keys(this.layouts);for(let i=0;i<layoutFlip.length;i++)this.options[layoutFlip[i]]=this.layouts[layoutFlip[i]].columnLayout}}class GridPlate extends LitElement{static get styles(){return[css`
        :host {
          display: block;
          --grid-plate-row-margin: 0px;
          --grid-plate-row-padding: 0px;
          --grid-plate-item-margin: 15px;
          --grid-plate-editable-border-color: var(
            --simple-colors-default-theme-grey-2
          );
          --grid-plate-active-border-color: #000000;
          --grid-plate-target-background-color: var(
            --simple-colors-default-theme-grey-2
          );
          --grid-plate-possible-target-background-color: transparent;
          --grid-plate-selected-background-color: #ffffff;
          --grid-plate-arrow-color: #000000;
          --grid-plate-arrow-bg: var(--simple-colors-default-theme-grey-2);
        }
        :host .row {
          width: 100%;
          display: flex;
          flex-wrap: wrap;
          justify-content: space-between;
          align-items: stretch;
          margin: var(--grid-plate-row-margin);
          padding: var(--grid-plate-row-padding);
        }
        :host .column {
          width: 100%;
          flex: 0 0 auto;
        }
        :host([edit-mode]) .column {
          min-height: 150px;
          transition: 0.2s color linear, 0.2s background-color linear,
            0.2s outline linear;
        }
        :host([edit-mode]) .column {
          outline: 2px dashed var(--grid-plate-editable-border-color);
        }
        :host .column[style="min-height: unset;"] {
          display: none;
        }
        :host([edit-mode]) .column[style="min-height: unset;"]:not(:empty) {
          display: block;
          outline: 2px solid red;
          width: 20%;
          min-width: 100px;
          padding: 15px 0;
          min-height: 50px !important;
          margin-top: var(--grid-plate-item-margin);
        }
        :host([edit-mode])
          .column[style="min-height: unset;"]:not(:empty):before {
          content: attr(data-label) " hidden";
          margin: var(--grid-plate-item-margin);
          color: red;
          font-size: 12px;
          font-weight: bold;
          padding: 4px;
        }
        :host .column ::slotted(*) {
          margin: var(--grid-plate-item-margin);
          padding: var(--grid-plate-item-margin);
          max-width: calc(100% - 60px);
          max-width: -webkit-fill-available;
          transition: 0.2s color linear, 0.2s background-color linear,
            0.2s outline linear;
        }
        :host([edit-mode]) .column ::slotted(img) {
          display: block;
        }
        :host([edit-mode]) .column ::slotted(.grid-plate-active-item) {
          outline: 2px dashed var(--grid-plate-active-border-color);
          background-color: var(--grid-plate-selected-background-color);
        }
        :host([edit-mode]) .column ::slotted(*:focus),
        :host([edit-mode]) .column ::slotted(*:hover),
        :host([edit-mode]) .column ::slotted(*:active) {
          outline: 2px dashed var(--grid-plate-editable-border-color);
        }
        :host([edit-mode]) .column ::slotted(*.mover):before {
          outline: 2px dashed var(--grid-plate-editable-border-color);
          background-color: var(--grid-plate-possible-target-background-color);
          content: " ";
          width: 100%;
          display: block;
          position: relative;
          margin: -30px 0 0 0;
          z-index: 2;
          height: 30px;
        }
        :host([edit-mode]) .column ::slotted(img.mover) {
          outline: 2px dashed var(--grid-plate-editable-border-color);
          background-color: var(--grid-plate-possible-target-background-color);
        }
        :host([edit-mode]) .column.mover {
          outline: 2px dashed var(--grid-plate-editable-border-color);
        }
        :host([edit-mode]) #bodycontainer ::slotted(*.moving) {
          outline: 2px dashed var(--hax-body-active-border-color);
          background-color: #eeeeee;
        }
        :host([edit-mode]) .column.mover {
          content: "Double click to create a paragraph here";
          background-color: var(--grid-plate-possible-target-background-color);
        }
        :host([edit-mode]) .column ::slotted(img.hovered),
        :host([edit-mode]) .column ::slotted(*.hovered):before {
          background-color: var(
            --grid-plate-target-background-color
          ) !important;
          outline: dashed 2px var(--grid-plate-active-border-color);
        }
        :host([edit-mode]) .column.hovered {
          background-color: var(
            --grid-plate-target-background-color
          ) !important;
          outline: dashed 2px var(--grid-plate-active-border-color);
          z-index: 2;
        }
        paper-icon-button {
          display: none;
          position: absolute;
          margin: 0;
          padding: 0;
          outline: none;
          width: 20px;
          height: 20px;
          color: var(--grid-plate-arrow-color);
          opacity: 1;
          background-color: var(--grid-plate-arrow-bg);
          border-radius: 50%;
          box-sizing: content-box !important;
          z-index: 2;
          min-width: unset;
          transition: 0.2s color linear, 0.2s background-color linear;
        }
        paper-icon-button:hover {
          opacity: 1;
          visibility: visible;
          background-color: var(--grid-plate-arrow-color);
          color: var(--grid-plate-arrow-bg);
        }
        #drag {
          cursor: move;
        }
        paper-icon-button[disabled] {
          opacity: 0.5;
        }
        paper-icon-button[disabled]:focus,
        paper-icon-button[disabled]:hover {
          cursor: not-allowed;
        }
        paper-icon-button.active {
          display: block;
        }

        .button-holding-pen {
          position: relative;
        }
      `]}constructor(){super(),this.droppable=!1,this.ignoreHax=!1,this.breakpointSm=900,this.breakpointMd=1200,this.breakpointLg=1500,this.breakpointXl=1800,this.columns=6,this.disableResponsive=!1,this.editMode=!1,this.layout="1-1",this.layouts=(new GridPlateLayoutOptions).layouts,this.responsiveSize="xs",import("../../@polymer/paper-icon-button/paper-icon-button.js"),import("../../@polymer/iron-icons/hardware-icons.js"),import("../../@polymer/iron-icons/editor-icons.js"),setTimeout(()=>{this.addEventListener("focusin",this._focusIn.bind(this)),this.addEventListener("dragenter",this.dragEnterGrid.bind(this))},0),window.ResponsiveUtility.requestAvailability()}render(){return html`
      <div class="button-holding-pen">
        <paper-icon-button
          class="direction"
          icon="editor:drag-handle"
          title="Drag"
          draggable="true"
          id="drag"
          @dragstart="${this.dragStart}"
          @dragend="${this.dragEnd}"
        >
        </paper-icon-button>
        <paper-icon-button
          class="direction"
          icon="hardware:keyboard-arrow-up"
          title="Move up"
          id="up"
          @click="${this.moveActiveElement}"
        >
        </paper-icon-button>
        <paper-icon-button
          class="direction"
          icon="hardware:keyboard-arrow-right"
          title="Move right"
          id="right"
          @click="${this.moveActiveElement}"
        >
        </paper-icon-button>
        <paper-icon-button
          class="direction"
          icon="hardware:keyboard-arrow-down"
          title="Move down"
          id="down"
          @click="${this.moveActiveElement}"
        >
        </paper-icon-button>
        <paper-icon-button
          class="direction"
          icon="hardware:keyboard-arrow-left"
          title="Move left"
          id="left"
          @click="${this.moveActiveElement}"
        >
        </paper-icon-button>
      </div>
      <div class="row">
        <div
          class="column"
          id="col1"
          data-label="Column 1"
          .style="${this._getColumnWidth(0,this.columnWidths)}"
        >
          <slot name="col-1"></slot>
        </div>
        <div
          class="column"
          id="col2"
          data-label="Column 2"
          .style="${this._getColumnWidth(1,this.columnWidths)}"
        >
          <slot name="col-2"></slot>
        </div>
        <div
          class="column"
          id="col3"
          data-label="Column 3"
          .style="${this._getColumnWidth(2,this.columnWidths)}"
        >
          <slot name="col-3"></slot>
        </div>
        <div
          class="column"
          id="col4"
          data-label="Column 4"
          .style="${this._getColumnWidth(3,this.columnWidths)}"
        >
          <slot name="col-4"></slot>
        </div>
        <div
          class="column"
          id="col5"
          data-label="Column 5"
          .style="${this._getColumnWidth(4,this.columnWidths)}"
        >
          <slot name="col-5"></slot>
        </div>
        <div
          class="column"
          id="col6"
          data-label="Column 6"
          .style="${this._getColumnWidth(5,this.columnWidths)}"
        >
          <slot name="col-6"></slot>
        </div>
      </div>
    `}static get tag(){return"grid-plate"}validateElementSlot(node){return["col-1","col-2","col-3","col-4","col-5","col-6"].includes(node.getAttribute("slot"))}connectedCallback(){super.connectedCallback(),this.observer=new MutationObserver(mutations=>{mutations.forEach(mutation=>{this.editMode&&(mutation.addedNodes.forEach(node=>{node.tagName&&(null!=node.getAttribute("slot")&&this.validateElementSlot(node)||node.setAttribute("slot","col-1"),setTimeout(()=>{node.addEventListener("drop",this.dropEvent.bind(this)),node.addEventListener("dragenter",this.dragEnter.bind(this)),node.addEventListener("dragleave",this.dragLeave.bind(this)),node.addEventListener("dragend",this.dragEnd.bind(this)),node.addEventListener("dragover",(function(e){e.preventDefault()})),"IMG"===node.tagName&&node.setAttribute("draggable",!1),node.setAttribute("tabindex",0)},50))}),mutation.removedNodes.forEach(node=>{node.tagName&&(node.removeEventListener("drop",this.dropEvent.bind(this)),node.removeEventListener("dragenter",this.dragEnter.bind(this)),node.removeEventListener("dragleave",this.dragLeave.bind(this)),node.removeEventListener("dragover",(function(e){e.preventDefault()})),"IMG"===node.tagName&&node.removeAttribute("draggable"),node.removeAttribute("tabindex"))}))})}),this.observer.observe(this,{childList:!0}),window.addEventListener("keydown",this._onKeyDown.bind(this)),window.addEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this)),window.addEventListener("hax-insert-content",this.haxInsertContent.bind(this)),window.addEventListener("load",this.resize.bind(this)),window.addEventListener("resize",this.resizeListener.bind(this))}resizeListener(e){this.activeItem&&(clearTimeout(this.resizeTimer),this.resizeTimer=setTimeout(()=>{this.positionArrows(this.activeItem)},50))}_onKeyDown(e){if(this.editMode&&this.getAttribute("contenteditable"))switch(e.key){case"Enter":if(window.HaxStore&&window.HaxStore.instance&&window.HaxStore.instance.isTextElement(this.activeItem))return!0;this.shadowRoot.querySelector("#right").focus();break;case"Escape":this.activeItem=null}}firstUpdated(changedProperties){window.dispatchEvent(new CustomEvent("responsive-element",{detail:{element:this,attribute:"responsive-size",relativeToParent:!1,sm:this.breakpointSm,md:this.breakpointMd,lg:this.breakpointLg,xl:this.breakpointXl}}));for(var j=1;j<=this.columns;j++)if(void 0!==this.shadowRoot.querySelector("#col"+j)){let col=this.shadowRoot.querySelector("#col"+j);col.addEventListener("drop",this.dropEvent.bind(this)),col.addEventListener("dblclick",this.dblclick.bind(this)),col.addEventListener("dragenter",this.dragEnter.bind(this)),col.addEventListener("dragleave",this.dragLeave.bind(this)),col.addEventListener("dragover",(function(e){e.preventDefault()}))}this.columnWidths=this._getColumnWidths(this.responsiveSize,this.layout,this.layouts,this.disableResponsive)}disconnectedCallback(){window.removeEventListener("keydown",this._onKeyDown.bind(this)),window.removeEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this)),window.removeEventListener("hax-insert-content",this.haxInsertContent.bind(this)),window.removeEventListener("load",this.resize.bind(this)),window.removeEventListener("resize",this.resizeListener.bind(this)),this.observer.disconnect(),super.disconnectedCallback()}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,settings:{quick:[],configure:[{property:"layout",title:"Column Layout",description:"Style to present these items (may change for small screens)",inputMethod:"select",options:(new GridPlateLayoutOptions).options}],advanced:[{property:"breakpointSm",title:"Small Breakpoint",description:"Anything less than this number (in pixels) will render with the smallest version of this layout",inputMethod:"textfield",validationType:"number"},{property:"breakpointMd",title:"Medium Breakpoint",description:"Anything less than this number (in pixels) will render with the small version of this layout",inputMethod:"textfield",validationType:"number"},{property:"breakpointLg",title:"Large Breakpoint",description:"Anything less than this number (in pixels) will render with the medium version of this layout.",inputMethod:"textfield",validationType:"number"},{property:"breakpointXl",title:"Extra-Large Breakpoint",description:"Anything less than this number (in pixels) will render with the large version of this layout. Anything greater than or equal to this number will display with the maximum number of columns for this layout.",inputMethod:"textfield",validationType:"number"}]},saveOptions:{unsetAttributes:["grid-plate-active-item","edit-mode","active-item","layouts","columns","options","droppable","ignorehax","disableresponsive","activeitem"]}}}static get properties(){return{droppable:{type:Boolean,reflect:!0},ignoreHax:{type:Boolean,attribute:"ignore-hax"},breakpointSm:{type:Number,attribute:"breakpoint-sm"},breakpointMd:{type:Number,attribute:"breakpoint-md"},breakpointLg:{type:Number,attribute:"breakpoint-lg"},breakpointXl:{type:Number,attribute:"breakpoint-xl"},columns:{type:Number,reflect:!0},disableResponsive:{type:Boolean,attribute:"disable-responsive"},editMode:{reflect:!0,type:Boolean,attribute:"edit-mode"},layout:{type:String,reflect:!0},layouts:{type:Object},responsiveSize:{type:String,reflect:!0,attribute:"responsive-size"},activeItem:{type:Object,attribute:"active-item"},columnWidths:{type:String,attribute:"column-widths"}}}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{switch(["responsiveSize","layout","layouts","disableResponsive"].includes(propName)&&(this.columnWidths=this._getColumnWidths(this.responsiveSize,this.layout,this.layouts,this.disableResponsive)),propName){case"droppable":this._droppableChanged(this[propName],oldValue);break;case"editMode":this._editModeChanged(this[propName],oldValue),this.resize();break;case"activeItem":this._activeItemChanged(this[propName],oldValue);break;case"columnWidths":this.resize();break;case"disableResponsive":this.dispatchEvent(new CustomEvent("disable-responsive-changed",{detail:this[propName]}))}})}resize(){window.dispatchEvent(new Event("resize"))}preProcessHaxInsertContent(detail){return delete detail.properties.activeItem,detail}_droppableChanged(newValue){newValue&&(this.editMode=!0)}canMoveSlot(item,before){let dir=before?-1:1,max=this.shadowRoot.querySelectorAll(".column").length,col=item.getAttribute("slot").split("-"),dest=parseInt(col[1])+dir;return dest>=1&&dest<=max}moveSlot(item,before){let dir=before?-1:1,col=item.getAttribute("slot").split("-"),dest=parseInt(col[1])+dir;item.setAttribute("slot","col-"+dest)}canMoveOrder(item,before){let slot=item.getAttribute("slot"),nodes=this.shadowRoot.querySelector(`slot[name='${slot}']`).assignedNodes({flatten:!0}),target=null,position=0;for(var i in nodes)item===nodes[i]&&(position=i);return before&&parseInt(position)-1>=0?target=nodes[parseInt(position)-1]:!before&&parseInt(position)+1<=nodes.length-1&&(target=nodes[parseInt(position)+1]),null!=target}moveOrder(item,before=!0){let slot=item.getAttribute("slot"),nodes=this.shadowRoot.querySelector(`slot[name='${slot}']`).assignedNodes({flatten:!0}),target=null,position=0;for(var i in nodes)item===nodes[i]&&(position=i);before?(target=nodes[parseInt(position)-1],this.insertBefore(this.activeItem,target)):(target=nodes[parseInt(position)+1],this.insertBefore(target,this.activeItem))}moveActiveElement(e){switch(e.target.id){case"up":this.moveOrder(this.activeItem,!0);break;case"down":this.moveOrder(this.activeItem,!1);break;case"left":this.moveSlot(this.activeItem,!0);break;case"right":this.moveSlot(this.activeItem,!1)}this.activeItem&&"function"==typeof this.activeItem.focus&&(this.positionArrows(this.activeItem),this.activeItem.focus()),this.__sortChildren()}_activeItemChanged(newValue,oldValue){this.querySelectorAll(".grid-plate-active-item").forEach(el=>{el.classList.remove("grid-plate-active-item")}),void 0!==newValue&&null!=newValue?(newValue.classList.add("grid-plate-active-item"),this.positionArrows(newValue)):null==newValue&&this.positionArrows(newValue),void 0!==oldValue&&null!=oldValue&&oldValue.blur()}_getColumnWidths(responsiveSize="sm",layout="1-1",layouts,disableResponsive){if(layouts){let newl=layouts[layout],size=!1!==disableResponsive?"xl":responsiveSize,oldl={12:"1","8/4":"2-1","6/6":"1-1","4/8":"1-2","4/4/4":"1-1-1","3/3/3/3":"1-1-1-1"}[layout];if(void 0!==newl&&void 0!==newl[size])return layouts[layout][size];if(void 0!==layouts[oldl]&&void 0!==layouts[oldl][size])return layouts[oldl][size];if(void 0!==layouts["1-1"])return layouts["1-1"][size]}}_getColumnWidth(column,columnWidths){return void 0!==columnWidths&&void 0!==columnWidths[column]?"width:"+columnWidths[column]:"min-height: unset"}_getColumns(columnWidths){return columnWidths.length}_focusIn(e){if(this.editMode){var local=e.target;local.parentNode===this&&(this.activeItem=local)}}positionArrows(item,onlyArrows=!1){if(null==item)this.shadowRoot.querySelectorAll(".direction").forEach(el=>{onlyArrows?"drag"!=el.id&&el.classList.remove("active"):el.classList.remove("active")});else{this.shadowRoot.querySelectorAll(".direction").forEach(el=>{el.classList.add("active")}),this.shadowRoot.querySelector("#up").disabled=!this.canMoveOrder(item,!0),this.shadowRoot.querySelector("#down").disabled=!this.canMoveOrder(item,!1),this.shadowRoot.querySelector("#left").disabled=!this.canMoveSlot(item,!0),this.shadowRoot.querySelector("#right").disabled=!this.canMoveSlot(item,!1);let bodyRect=this.getBoundingClientRect(),elemRect=item.getBoundingClientRect(),topOffset=elemRect.top-bodyRect.top,leftOffset=elemRect.left-bodyRect.left;this.shadowRoot.querySelector("#up").style.top=topOffset-10+"px",this.shadowRoot.querySelector("#down").style.top=topOffset+elemRect.height-10+"px",this.shadowRoot.querySelector("#left").style.top=topOffset+elemRect.height/2-10+"px",this.shadowRoot.querySelector("#right").style.top=topOffset+elemRect.height/2-10+"px",this.shadowRoot.querySelector("#drag").style.top=topOffset-10+"px",this.shadowRoot.querySelector("#drag").style.left=leftOffset-10+"px",this.shadowRoot.querySelector("#up").style.left=leftOffset+elemRect.width/2-10+"px",this.shadowRoot.querySelector("#down").style.left=leftOffset+elemRect.width/2-10+"px",this.shadowRoot.querySelector("#left").style.left=leftOffset-10+"px",this.shadowRoot.querySelector("#right").style.left=leftOffset+elemRect.width-10+"px"}}_editModeChanged(newValue,oldValue){if(newValue&&!oldValue){let children=this.children;for(var i in children)children[i].tagName&&(children[i].addEventListener("drop",this.dropEvent.bind(this)),children[i].addEventListener("dragenter",this.dragEnter.bind(this)),children[i].addEventListener("dragleave",this.dragLeave.bind(this)),children[i].addEventListener("dragover",(function(e){e.preventDefault()})),"IMG"===children[i].tagName&&children[i].setAttribute("draggable",!1),children[i].setAttribute("tabindex",0))}else if(!newValue&&oldValue){this.activeItem=null;let children=this.children;for(var i in children)void 0!==children[i].tagName&&(children[i].removeEventListener("drop",this.dropEvent.bind(this)),children[i].removeEventListener("dragenter",this.dragEnter.bind(this)),children[i].removeEventListener("dragleave",this.dragLeave.bind(this)),children[i].removeEventListener("dragover",(function(e){e.preventDefault()})),"IMG"===children[i].tagName&&children[i].removeAttribute("draggable"),children[i].removeAttribute("tabindex"))}}dragEnterGrid(e){const children=this.children;for(var i in children)children[i].classList&&children[i]!==this.activeItem&&children[i].classList.add("mover");for(var j=1;j<=this.columns;j++)void 0!==this.shadowRoot.querySelector("#col"+j)&&this.shadowRoot.querySelector("#col"+j).classList.add("mover")}dragEnter(e){this.editMode&&(e.preventDefault(),e.target.classList.add("hovered"))}dragLeave(e){this.editMode&&e.target.classList.remove("hovered")}dblclick(e){if(this.editMode&&e.target.id){let detail={};detail.properties={slot:e.target.id.replace("col","col-")},this.dispatchEvent(new CustomEvent("grid-plate-add-item",{bubbles:!0,cancelable:!0,composed:!0,detail}))}}__sortChildren(){let children=Array.prototype.slice.call(this.querySelectorAll("[slot]"),0);children=children.sort((function(a,b){return parseInt(a.getAttribute("slot").split("-")[1])<parseInt(b.getAttribute("slot").split("-")[1])?-1:1})),children.forEach(el=>{this.appendChild(el)})}dropEvent(e){if(this.editMode){let target=this.activeItem;if(this.__dragTarget&&(target=this.__dragTarget),window.HaxStore&&window.HaxStore.ready&&window.HaxStore.instance.__dragTarget&&(target=window.HaxStore.instance.__dragTarget),setTimeout(()=>{let children=this.children;for(var i in children)void 0!==children[i].classList&&children[i].classList.remove("mover","hovered","moving");for(var j=1;j<=this.columns;j++)void 0!==this.shadowRoot.querySelector("#col"+j)&&this.shadowRoot.querySelector("#col"+j).classList.remove("mover","hovered","moving");if(window.HaxStore&&window.HaxStore.ready){let childrenHAX=window.HaxStore.instance.activeHaxBody.children;for(var i in childrenHAX)childrenHAX[i].classList&&childrenHAX[i].classList.remove("mover","hovered","moving")}this.__sortChildren()},0),target===this)return e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation(),!1;var local=e.target;if(null!=target&&void 0!==local&&null!=local.getAttribute("slot")&&target!==local)target.setAttribute("slot",local.getAttribute("slot")),this.insertBefore(target,local),e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation();else if("DIV"===local.tagName&&local.classList.contains("column")){var col=local.id.replace("col","");target.setAttribute("slot","col-"+col),this.appendChild(target),e.preventDefault(),e.stopPropagation(),e.stopImmediatePropagation()}setTimeout(()=>{window.HaxStore&&window.HaxStore.ready&&window.HaxStore.instance&&"GRID-PLATE"===target.parentNode.tagName&&(window.HaxStore.write("activeNode",target,this),window.HaxStore.write("activeContainerNode",target.parentNode,this),setTimeout(()=>{window.HaxStore.instance.activeHaxBody.positionContextMenus(target,target.parentNode)},10)),this.positionArrows(null),this.activeItem=null},0)}}dragStart(e){if(this.editMode){if(window.HaxStore&&window.HaxStore.ready){let childrenHAX=window.HaxStore.instance.activeHaxBody.children;for(var i in childrenHAX)childrenHAX[i].classList&&childrenHAX[i].classList.add("mover");window.HaxStore.instance.__dragTarget=this.activeItem}else this.__dragTarget=this.activeItem;this.activeItem.classList.add("moving"),e.dataTransfer.dropEffect="move",e.dataTransfer.setDragImage(this.activeItem,0,0),e.stopPropagation(),e.stopImmediatePropagation();const children=this.children;for(var i in children)children[i].classList&&children[i]!==this.activeItem&&children[i].classList.add("mover");for(var j=1;j<=this.columns;j++)void 0!==this.shadowRoot.querySelector("#col"+j)&&this.shadowRoot.querySelector("#col"+j).classList.add("mover")}}dragEnd(e){if(this.editMode){let children=this.children;for(var i in children)void 0!==children[i].classList&&children[i].classList.remove("mover","hovered","moving");for(var j=1;j<=this.columns;j++)void 0!==this.shadowRoot.querySelector("#col"+j)&&this.shadowRoot.querySelector("#col"+j).classList.remove("mover","hovered","moving")}}haxInsertContent(e){this===window.HaxStore.instance.activeContainerNode&&this.activeItem&&"function"==typeof this.activeItem.focus&&(this.positionArrows(this.activeItem),this.activeItem.focus())}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&("object"==typeof e.detail.value&&(this[e.detail.property]=null),"editMode"===e.detail.property&&this.ignoreHax||(this[e.detail.property]=e.detail.value))}}window.customElements.define(GridPlate.tag,GridPlate);export{GridPlate};