import{LitElement as t,html as e,css as i}from"../../lit-element/lit-element.js";import"../responsive-utility/responsive-utility.js";import{normalizeEventPath as o}from"../utils/utils.js";class GridPlateLayoutOptions{constructor(){this.resizeTimer=null,this.layouts={1:{columnLayout:"1: full width",xs:["100%"],sm:["100%"],md:["100%"],lg:["100%"],xl:["100%"]},"1-1":{columnLayout:"2: equal width",xs:["100%","100%"],sm:["50%","50%"],md:["50%","50%"],lg:["50%","50%"],xl:["50%","50%"]},"2-1":{columnLayout:"2: wide & narrow",xs:["100%","100%"],sm:["50%","50%"],md:["66.6666667%","33.3333337%"],lg:["66.6666667%","33.3333337%"],xl:["66.6666667%","33.3333337%"]},"1-2":{columnLayout:"2: narrow & wide",xs:["100%","100%"],sm:["50%","50%"],md:["33.3333333%","66.6666667%"],lg:["33.3333333%","66.6666667%"],xl:["33.3333333%","66.6666667%"]},"3-1":{columnLayout:"2: wider & narrower",xs:["100%","100%"],sm:["50%","50%"],md:["75%","25%"],lg:["75%","25%"],xl:["75%","25%"]},"1-3":{columnLayout:"2: narrower & wider",xs:["100%","100%"],sm:["50%","50%"],md:["25%","75%"],lg:["25%","75%"],xl:["25%","75%"]},"1-1-1":{columnLayout:"3: equal width",xs:["100%","100%","100%"],sm:["100%","100%","100%"],md:["33.3333333%","33.3333333%","33.3333333%"],lg:["33.3333333%","33.3333333%","33.3333333%"],xl:["33.3333333%","33.3333333%","33.3333333%"]},"2-1-1":{columnLayout:"3: wide, narrow, and narrow",xs:["100%","100%","100%"],sm:["100%","50%","50%"],md:["50%","25%","25%"],lg:["50%","25%","25%"],xl:["50%","25%","25%"]},"1-2-1":{columnLayout:"3: narrow, wide, and narrow",xs:["100%","100%","100%"],sm:["100%","100%","100%"],md:["25%","50%","25%"],lg:["25%","50%","25%"],xl:["25%","50%","25%"]},"1-1-2":{columnLayout:"3: narrow, narrow, and wide",xs:["100%","100%","100%"],sm:["50%","50%","100%"],md:["25%","25%","50%"],lg:["25%","25%","50%"],xl:["25%","25%","50%"]},"1-1-1-1":{columnLayout:"4: equal width",xs:["100%","100%","100%","100%"],sm:["50%","50%","50%","50%"],md:["25%","25%","25%","25%"],lg:["25%","25%","25%","25%"],xl:["25%","25%","25%","25%"]},"1-1-1-1-1":{columnLayout:"5: equal width",xs:["100%","100%","100%","100%","100%"],sm:["50%","50%","50%","50%","50%"],md:["20%","20%","20%","20%","20%"],lg:["20%","20%","20%","20%","20%"],xl:["20%","20%","20%","20%","20%"]},"1-1-1-1-1-1":{columnLayout:"6: equal width",xs:["100%","100%","100%","100%","100%","100%"],sm:["50%","50%","50%","50%","50%","50%"],md:["33.3333333%","33.3333333%","33.3333333%","33.3333333%","33.3333333%","33.3333333%"],lg:["16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%"],xl:["16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%","16.6666667%"]}},this.options={};let t=Object.keys(this.layouts);for(let e=1;e<t.length;e++)this.options[t[e]]=this.layouts[t[e]].columnLayout}}class GridPlate extends t{static get styles(){return[i`
        :host {
          display: block;
        }
        :host .row {
          width: 100%;
          overflow-wrap: break-word;
          display: flex;
          flex-wrap: wrap;
          justify-content: space-between;
          align-items: stretch;
          margin: var(--grid-plate-row-margin, 0px);
          padding: var(--grid-plate-row-padding, 0px);
        }
        .column.active {
          outline: 2px solid var(--simple-colors-default-theme-grey-12, #009dc7) !important;
          outline-offset: -2px;
        }
        :host([disable-responsive]) .column {
          overflow: hidden;
        }
        :host .column {
          width: 100%;
          flex: 0 0 auto;
          min-height: 50px;
        }
        :host([ready]) .column {
          transition: var(
            --grid-plate-col-transition,
            0.5s width ease-in-out,
            0.5s padding ease-in-out,
            0.5s margin ease-in-out
          );
        }
        :host([data-hax-ray]) .column[style="min-height: unset;"] {
          display: block !important;
          opacity: 0.4;
        }
        /* make sure that animation for nothing to 2 col doesn't jar layout */
        :host([layout="1-1"]) #col1 {
          width: 50%;
        }
        :host([layout="1-1-1"]) #col1 {
          width: 33.33%;
        }
        :host([layout="1-1-1-1"]) #col1 {
          width: 25%;
        }
        :host([layout="1-1-1-1-1"]) #col1 {
          width: 20%;
        }
        :host([layout="1-1-1-1-1-1"]) #col1 {
          width: 16.66%;
        }
        :host .column[style="min-height: unset;"] {
          display: none;
          outline: none;
        }
        :host([data-hax-ray]) .column[style="min-height: unset;"] {
          width: 0;
        }

        :host([data-hax-ray]) .column.has-nodes[style="min-height: unset;"] {
          width: 100%;
          transition: none;
        }
        :host([data-hax-ray]) .column[style="min-height: unset;"]:hover {
          opacity: 1;
        }
        :host([data-hax-ray])
          .column[style="min-height: unset;"]:hover::before {
          content: "Hidden by column layout";
          position: sticky;
          display: inline-flex;
          background-color: black;
          color: white;
          padding: 0px 8px;
          font-size: 12px;
          line-height: 16px;
          margin: 12px 13px;
          float: right;
          width: 124px;
        }
        :host .column ::slotted(*) {
          margin: var(--grid-plate-item-margin, 15px);
          padding: var(--grid-plate-item-padding, 15px);
          max-width: calc(100% - 60px);
          max-width: -webkit-fill-available;
        }
        :host([ready]) .column ::slotted(*) {
          transition: var(
            --grid-plate-col-transition,
            0.5s color ease-in-out,
            0.5s background-color ease-in-out
          );
        }
        /** this implies hax editing state is available **/
        :host([data-hax-ray]) .column ::slotted(*) {
          outline: 1px solid var(--simple-colors-default-theme-grey-2, #eeeeee);
          outline-offset: -2px;
        }
        :host([data-hax-ray]) .column ::slotted(*:hover) {
          outline: 1px solid var(--simple-colors-default-theme-grey-8, #eeeeee);
        }
        :host([data-hax-ray]) .column {
          outline: 1px solid var(--simple-colors-default-theme-grey-2, #eeeeee);
          outline-offset: -2px;
        }
        :host([data-hax-ray]) .column:hover {
          outline: 1px solid var(--simple-colors-default-theme-grey-8, #eeeeee);
        }
        :host([data-hax-ray]) div ::slotted(*.active):before {
          outline: 1px var(--simple-colors-default-theme-grey-4) solid;
          background-color: inherit;
          content: " ";
          width: 100%;
          display: block;
          position: relative;
          margin: -10px 0 0 0;
          z-index: 2;
          height: 10px;
        }
        :host([data-hax-ray]) div ::slotted(img.active),
        :host([data-hax-ray]) div ::slotted(*.active):before {
          background-color: var(
            --simple-colors-default-theme-grey-12,
            #009dc7
          ) !important;
          outline: 1px solid var(--simple-colors-default-theme-grey-12, #009dc7);
        }

        @media screen and (min-color-index: 0) and(-webkit-min-device-pixel-ratio:0) {
          :host([data-hax-ray]) div ::slotted(*.active) {
            background-color: var(
              --simple-colors-default-theme-grey-12,
              #009dc7
            ) !important;
            outline: 1px solid
              var(--simple-colors-default-theme-grey-12, #009dc7);
          }
        }
      `]}constructor(){super(),this.ready=!1,this.breakpointSm=900,this.breakpointMd=1200,this.breakpointLg=1500,this.breakpointXl=1800,this.columns=6,this.disableResponsive=!1,this.layout="1-1",this.layouts=(new GridPlateLayoutOptions).layouts,this.responsiveSize="xs",window.ResponsiveUtility.requestAvailability()}render(){return e`
      <div class="row">
        <div
          class="column"
          id="col1"
          data-label="column 1"
          .style="${this._getColumnWidth(0,this.__columnWidths)}"
        >
          <slot name="col-1"></slot>
        </div>
        <div
          class="column"
          id="col2"
          data-label="column 2"
          .style="${this._getColumnWidth(1,this.__columnWidths)}"
        >
          <slot name="col-2"></slot>
        </div>
        <div
          class="column"
          id="col3"
          data-label="column 3"
          .style="${this._getColumnWidth(2,this.__columnWidths)}"
        >
          <slot name="col-3"></slot>
        </div>
        <div
          class="column"
          id="col4"
          data-label="column 4"
          .style="${this._getColumnWidth(3,this.__columnWidths)}"
        >
          <slot name="col-4"></slot>
        </div>
        <div
          class="column"
          id="col5"
          data-label="column 5"
          .style="${this._getColumnWidth(4,this.__columnWidths)}"
        >
          <slot name="col-5"></slot>
        </div>
        <div
          class="column"
          id="col6"
          data-label="column 6"
          .style="${this._getColumnWidth(5,this.__columnWidths)}"
        >
          <slot name="col-6"></slot>
        </div>
      </div>
    `}static get tag(){return"grid-plate"}validateElementSlot(t){return["col-1","col-2","col-3","col-4","col-5","col-6"].includes(t.getAttribute("slot"))}firstUpdated(t){this.resize(),window.dispatchEvent(new CustomEvent("responsive-element",{detail:{element:this,attribute:"responsive-size",relativeToParent:!1,sm:this.breakpointSm,md:this.breakpointMd,lg:this.breakpointLg,xl:this.breakpointXl}})),this.__columnWidths=this._getColumnWidths(this.responsiveSize,this.layout,this.layouts,this.disableResponsive),setTimeout(()=>{this.ready=!0},100)}static get haxProperties(){return{type:"grid",canScale:!0,canPosition:!0,canEditSource:!0,gizmo:{title:"Grid layout",description:"Simple card in a cool retro design",icon:"hax:3-3-3-3",color:"grey",groups:["Layout"],handles:[],meta:{author:"ELMS:LN",owner:"The Pennsylvania State University"}},settings:{configure:[{property:"layout",title:"Column Layout",description:"Style to present these items (may change for small screens)",inputMethod:"select",options:(new GridPlateLayoutOptions).options},{property:"disableResponsive",title:"Disable responsive",description:"Check box to force layout to stick regardless of screen breakpoins",inputMethod:"boolean"}],advanced:[{property:"breakpointSm",title:"Small Breakpoint",description:"Anything less than this number (in pixels) will render with the smallest version of this layout",inputMethod:"textfield",validationType:"number"},{property:"breakpointMd",title:"Medium Breakpoint",description:"Anything less than this number (in pixels) will render with the small version of this layout",inputMethod:"textfield",validationType:"number"},{property:"breakpointLg",title:"Large Breakpoint",description:"Anything less than this number (in pixels) will render with the medium version of this layout.",inputMethod:"textfield",validationType:"number"},{property:"breakpointXl",title:"Extra-Large Breakpoint",description:"Anything less than this number (in pixels) will render with the large version of this layout. Anything greater than or equal to this number will display with the maximum number of columns for this layout.",inputMethod:"textfield",validationType:"number"}]},saveOptions:{unsetAttributes:["ready","layouts","columns","options","responsive-width"]}}}static get properties(){return{ready:{type:Boolean,reflect:!0},breakpointSm:{type:Number,attribute:"breakpoint-sm"},breakpointMd:{type:Number,attribute:"breakpoint-md"},breakpointLg:{type:Number,attribute:"breakpoint-lg"},breakpointXl:{type:Number,attribute:"breakpoint-xl"},columns:{type:Number,reflect:!0},disableResponsive:{type:Boolean,attribute:"disable-responsive"},layout:{type:String,reflect:!0},layouts:{type:Object},responsiveSize:{type:String,reflect:!0,attribute:"responsive-size"},__columnWidths:{type:String},dataHaxRay:{type:String,reflect:!0,attribute:"data-hax-ray"}}}_dragEnter(t){t.target.classList.add("active")}_dragLeave(t){t.target.classList.remove("active")}_dropEvent(t){this.querySelectorAll(".active").forEach(t=>{t.classList.remove("active")}),this.shadowRoot.querySelectorAll(".active").forEach(t=>{t.classList.remove("active")})}_slotMonitor(t){var e=o(t);e[0]&&e[0].assignedNodes&&e[0].assignedNodes().length?this.shadowRoot.querySelector("#"+e[0].getAttribute("name").replace("-","")).classList.add("has-nodes"):this.shadowRoot.querySelector("#"+e[0].getAttribute("name").replace("-","")).classList.remove("has-nodes")}updated(t){t.forEach((t,e)=>{if("dataHaxRay"===e&&this.shadowRoot)if(this[e]){this.addEventListener("drop",this._dropEvent.bind(this));for(var i=1;i<=this.columns;i++)if(void 0!==this.shadowRoot.querySelector("#col"+i)){let t=this.shadowRoot.querySelector("#col"+i);t.addEventListener("dragenter",this._dragEnter.bind(this)),t.addEventListener("dragleave",this._dragLeave.bind(this))}let t=this.shadowRoot.querySelectorAll("slot");for(i=0;i<t.length;i++)t[i].addEventListener("slotchange",this._slotMonitor.bind(this));this.observer=new MutationObserver(t=>{this.__sorting||(t.forEach(t=>{t.addedNodes.forEach(t=>{t.tagName&&t!==this&&t.parentElement&&"HAX-BODY"!==t.parentElement.tagName&&!this.validateElementSlot(t)&&t.setAttribute("slot","col-1")})}),this.__sortChildren())}),this.observer.observe(this,{childList:!0})}else{this.observer&&this.observer.disconnect(),this.removeEventListener("drop",this._dropEvent.bind(this));for(i=1;i<=this.columns;i++)if(void 0!==this.shadowRoot.querySelector("#col"+i)){let t=this.shadowRoot.querySelector("#col"+i);t.removeEventListener("dragenter",this._dragEnter.bind(this)),t.removeEventListener("dragleave",this._dragLeave.bind(this))}let t=this.shadowRoot.querySelectorAll("slot");for(i=0;i<t.length;i++)t[i].removeEventListener("slotchange",this._slotMonitor.bind(this))}switch(["responsiveSize","layout","layouts","disableResponsive"].includes(e)&&(clearTimeout(this.__calcWidthLock),this.__calcWidthLock=setTimeout(()=>{this.__columnWidths=this._getColumnWidths(this.responsiveSize,this.layout,this.layouts,this.disableResponsive)},0)),e){case"__columnWidths":this.resize();break;case"disableResponsive":this.dispatchEvent(new CustomEvent("disable-responsive-changed",{detail:this[e]}))}})}resize(){window.dispatchEvent(new Event("resize"))}canMoveSlot(t,e){let i=e?-1:1,o=this.shadowRoot.querySelectorAll(".column").length,s=t.getAttribute("slot").split("-"),l=parseInt(s[1])+i;return l>=1&&l<=o}moveSlot(t,e){let i=e?-1:1,o=t.getAttribute("slot").split("-"),s=parseInt(o[1])+i;t.setAttribute("slot","col-"+s)}_getColumnWidths(t="sm",e="1-1",i,o){if(i){let s=i[e],l=!1!==o?"xl":t,a={12:"1","8/4":"2-1","6/6":"1-1","4/8":"1-2","4/4/4":"1-1-1","3/3/3/3":"1-1-1-1"}[e];if(void 0!==s&&void 0!==s[l])return i[e][l];if(void 0!==i[a]&&void 0!==i[a][l])return i[a][l];if(void 0!==i["1-1"])return i["1-1"][l]}}_getColumnWidth(t,e){return void 0!==e&&void 0!==e[t]?"width:"+e[t]:"min-height: unset"}_getColumns(t){return t.length}async __sortChildren(){this.__sorting=!0;try{let t=Array.prototype.reduce.call(this.querySelectorAll("[slot]"),(function(t,e){return t}),[]);t=t.sort((function(t,e){return parseInt(t.getAttribute("slot").split("-")[1])<parseInt(e.getAttribute("slot").split("-")[1])?-1:1})),await t.forEach(t=>{t.parentNode===this&&this.appendChild(t)})}catch(t){console.warn(t)}this.__sorting=!1}}window.customElements.define(GridPlate.tag,GridPlate);export{GridPlate};