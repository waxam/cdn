import{html as t,css as e}from"../../../lit-element/lit-element.js";import{SimpleColors as o}from"../../simple-colors/simple-colors.js";import"../../simple-modal/simple-modal.js";class LrnsysDialog extends o{static get styles(){return[...super.styles,e`
        :host {
          display: inline-block;
          --lrnsys-dialog-color: var(--simple-colors-foreground1, #000);
          --lrnsys-dialog-background-color: var(--simple-colors-background1);
          --lrnsys-dialog-toolbar-background-color: var(
            --simple-colors-background3
          );
          --lrnsys-dialog-secondary-background-color: rgba(255, 255, 255, 0.7);
        }
        :host([dark]) {
          --lrnsys-dialog-toolbar-background-color: var(
            --simple-colors-background1
          );
          --lrnsys-dialog-background-color: var(--simple-colors-background3);
          --lrnsys-dialog-secondary-background-color: rgba(0, 0, 0, 0.7);
        }
        #dialogtrigger {
          display: inline-block;
          min-width: unset;
          margin: var(--lrnsys-dialog-button-margin);
          padding: var(--lrnsys-dialog-button-padding);
        }
      `]}constructor(){super(),this.disabled=!1,this.dynamicImages=!1,this.focusState=!1,this.avatar="",this.icon="",this.text="",this.headingClass="white-text black",setTimeout(()=>{import("../../simple-tooltip/simple-tooltip.js"),import("../../../@polymer/paper-button/paper-button.js"),import("../../../@polymer/neon-animation/neon-animation.js"),import("../../../@polymer/neon-animation/neon-animations.js"),import("../../../@polymer/iron-icons/iron-icons.js"),import("./lrnsys-button-inner.js")},0),this.__modal=window.SimpleModal.requestAvailability()}render(){return t`
      <paper-button
        class="${this.class}"
        id="dialogtrigger"
        @click="${this.openDialog}"
        @focus-changed="${this.focusToggle}"
        @mousedown="${this.tapEventOn}"
        @mouseover="${this.tapEventOn}"
        @mouseout="${this.tapEventOff}"
        ?raised="${this.raised}"
        ?disabled="${this.disabled}"
        title="${this.alt}"
        aria-label="${this.alt}"
      >
        <lrnsys-button-inner
          avatar="${this.avatar}"
          icon="${this.icon}"
          text="${this.text}"
        >
          <slot name="button"></slot>
        </lrnsys-button-inner>
      </paper-button>
      <simple-tooltip
        for="dialogtrigger"
        animation-delay="0"
        ?hidden="${!this.alt}"
        >${this.alt}</simple-tooltip
      >
    `}static get tag(){return"lrnsys-dialog"}static get properties(){return{...super.properties,icon:{type:String},raised:{type:Boolean},avatar:{type:String},text:{type:String},alt:{type:String,reflect:!0},header:{type:String},disabled:{type:Boolean},hoverClass:{type:String,attribute:"hover-class"},headingClass:{type:String,attribute:"heading-class"},dynamicImages:{type:Boolean,attribute:"dynamic-images"},focusState:{type:Boolean,attribute:"focus-state"}}}tapEventOn(t){void 0!==this.hoverClass&&this.hoverClass.split(" ").forEach((t,e)=>{""!=t&&this.shadowRoot.querySelector("#dialogtrigger").classList.add(t)})}tapEventOff(t){void 0!==this.hoverClass&&this.hoverClass.split(" ").forEach((t,e)=>{""!=t&&this.shadowRoot.querySelector("#dialogtrigger").classList.remove(t)})}toggleDialog(){this.openDialog()}openDialog(){let t=this.children,e=document.createElement("span"),o=document.createElement("span"),s={};for(var i in t)if(void 0!==t[i].tagName)switch(t[i].getAttribute("slot")){case"toolbar-primary":case"toolbar-secondary":case"toolbar":case"header":s=t[i].cloneNode(!0),s.removeAttribute("slot"),e.appendChild(s);break;case"button":break;default:s=t[i].cloneNode(!0),s.removeAttribute("slot"),this.dynamicImages&&"IRON-IMAGE"===s.tagName&&(s.preventLoad=!1,s.removeAttribute("prevent-load")),o.appendChild(s)}const a=new CustomEvent("simple-modal-show",{bubbles:!0,composed:!0,cancelable:!0,detail:{title:this.header,elements:{header:e,content:o},invokedBy:this.shadowRoot.querySelector("#dialogtrigger"),clone:!0}});this.dispatchEvent(a)}focusToggle(t){(this.dispatchEvent(new CustomEvent("focus-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:{focus:this.focusState}})),void 0!==this.hoverClass)&&this.hoverClass.split(" ").forEach((t,e)=>{""!=t&&(this.focusState?this.shadowRoot.querySelector("#dialogtrigger").classList.add(t):this.shadowRoot.querySelector("#dialogtrigger").classList.remove(t))});this.focusState=!this.focusState}}window.customElements.define(LrnsysDialog.tag,LrnsysDialog);export{LrnsysDialog};