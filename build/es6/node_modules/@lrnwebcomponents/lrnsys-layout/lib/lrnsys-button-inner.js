import{LitElement as t,html as e,css as n}from"../../../lit-element/lit-element.js";class LrnsysButtonInner extends t{static get styles(){return[n`
        :host {
          display: block;
        }
        :host > div > * {
          vertical-align: middle;
        }
        .text-label {
          margin-left: 8px;
        }
        .text-label-only {
          margin-left: 0;
        }
      `]}constructor(){super(),this.text="",this.avatar="",this.icon=""}render(){return e`
      <div>
        ${""!=this.avatar?e`
              <paper-avatar src="${this.avatar}"></paper-avatar>
            `:""}
        ${""!=this.icon?e`
              <lrn-icon icon="${this.icon}"></lrn-icon>
            `:""}
        ${""!=this.text?e`
              <span class="${this._getTextLabelClass(this.avatar,this.icon)}"
                >${this.text}</span
              >
            `:""}
      </div>
      <div><slot name="button"></slot><slot></slot></div>
    `}updated(t){t.forEach((t,e)=>{"avatar"==e&&""!=this[e]&&import("../../paper-avatar/paper-avatar.js"),"icon"==e&&""!=this[e]&&(import("../../lrn-icons/lrn-icons.js"),import("../../../@polymer/iron-icons/iron-icons.js"))})}static get tag(){return"lrnsys-button-inner"}static get properties(){return{icon:{type:String},avatar:{type:String},text:{type:String}}}_getTextLabelClass(t,e){return t||e?"text-label":"text-label-only"}}window.customElements.define(LrnsysButtonInner.tag,LrnsysButtonInner);export{LrnsysButtonInner};