/**
 * Copyright 2019 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{html as e,css as t}from"../../../lit-element/lit-element.js";import{SimpleColors as i}from"../../simple-colors/simple-colors.js";import"../../../@polymer/iron-icons/iron-icons.js";import"../../../@polymer/paper-icon-button/paper-icon-button.js";import"../../../@polymer/paper-input/paper-input.js";import"../../../@polymer/polymer/lib/elements/custom-style.js";class EditableListItem extends i{static get styles(){return[...super.styles,t`
        :host {
          display: block;
        }
        :host([hidden]) {
          display: none;
        }
        :host([can-edit]) #edit {
          visibility: visible;
          opacity: 1;
        }
        :host([can-delete]) #delete {
          visibility: visible;
          opacity: 1;
        }
        :host #add,
        #duplicate {
          visibility: visible;
          opacity: 1;
        }
        paper-icon-button {
          visibility: hidden;
          opacity: 0;
          transition: 0.3s all linear;
        }
        .input {
          display: block;
          height: 40px;
          padding: 0;
          margin: 0;
          line-height: 40px;
        }
        .input[hidden] {
          display: none;
        }
        div.input {
          z-index: 1;
        }
        .ops {
          position: absolute;
          display: block;
          right: 0;
          top: 0;
          z-index: 2;
          background-color: white;
        }
        .ops paper-icon-button {
          border-radius: 50%;
          height: 32px;
          width: 32px;
          padding: 4px;
          margin: 0px;
        }
        .ops[hidden] {
          display: none;
        }
        #edit {
          color: white;
          background-color: var(--simple-colors-default-theme-green-8, #ddffdd);
        }
        #delete {
          color: white;
          background-color: var(--simple-colors-default-theme-red-6, #ff5555);
        }
      `]}render(){return e`
      <custom-style>
        <style>
          paper-input {
            --paper-input-container-shared-input-style: {
              height: 40px;
              padding: 0;
              margin: 0;
            }
          }
        </style>
      </custom-style>
      <paper-input
        id="input"
        class="input"
        value="${this.value}"
        @value-changed="${this.valueChanged}"
        ?hidden="${!this.editing}"
      ></paper-input>
      <div class="input" ?hidden="${!this.editing}">${this.value}</div>
      <div class="ops" ?hidden="${!this.editMode}">
        <paper-icon-button
          @click="${this._editToggle}"
          id="edit"
          icon="icons:create"
        ></paper-icon-button>
        <paper-icon-button
          @click="${this._editToggle}"
          id="add"
          icon="icons:add"
        ></paper-icon-button>
        <paper-icon-button
          @click="${this._editToggle}"
          id="duplicate"
          icon="icons:content-copy"
        ></paper-icon-button>
        <paper-icon-button
          @click="${this._deleteModal}"
          id="delete"
          icon="icons:delete"
        ></paper-icon-button>
      </div>
    `}valueChanged(e){this.value=e.detail.value}updated(e){e.forEach((e,t)=>{"editMode"==t&&this.dispatchEvent(new CustomEvent("edit-mode-changed",{detail:{value:this[t]}})),"editing"==t&&this._editModeChanged(this[t])})}constructor(){super(),this.editMode=!1,this.editing=!1,this.canEdit=!1,this.canDelete=!1}static get properties(){return{value:{type:String},editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"},editing:{type:Boolean},canEdit:{type:Boolean,reflect:!0,attribute:"can-edit"},canDelete:{type:Boolean,reflect:!0,attribute:"can-delete"}}}static get tag(){return"editable-list-item"}_editToggle(e){this.editing=!this.editing,this.editing&&this.shadowRoot.querySelector("#input").focus()}_deleteModal(e){const t=new CustomEvent("editable-list-item-delete",{bubbles:!0,cancelable:!0,detail:{element:this}});this.dispatchEvent(t)}_editModeChanged(e,t){void 0!==e&&(this.shadowRoot.querySelector("#edit").icon=e?"icons:save":"icons:create")}}window.customElements.define(EditableListItem.tag,EditableListItem);export{EditableListItem};