import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import"../../../@polymer/iron-icons/iron-icons.js";import"../../../@polymer/paper-icon-button/paper-icon-button.js";import"../../../@polymer/paper-input/paper-input.js";import"../../simple-colors/simple-colors.js";class EditableListItem extends PolymerElement{static get template(){return html`
      <style is="custom-style" include="simple-colors">
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }
        :host([can-edit]) #edit {
          visibility: visible;
          opacity: 1;
        }
        :host([can-delete]) #delete {
          visibility: visible;
          opacity: 1;
        }
        :host #add,
        #duplicate {
          visibility: visible;
          opacity: 1;
        }
        paper-icon-button {
          visibility: hidden;
          opacity: 0;
          transition: 0.3s all linear;
        }
        paper-input {
          --paper-input-container-shared-input-style: {
            height: 40px;
            padding: 0;
            margin: 0;
          }
        }
        .input {
          display: block;
          height: 40px;
          padding: 0;
          margin: 0;
          line-height: 40px;
        }
        .input[hidden] {
          display: none;
        }
        div.input {
          z-index: 1;
        }
        .ops {
          position: absolute;
          display: block;
          right: 0;
          top: 0;
          z-index: 2;
          background-color: white;
        }
        .ops paper-icon-button {
          border-radius: 50%;
          height: 32px;
          width: 32px;
          padding: 4px;
          margin: 0px;
        }
        .ops[hidden] {
          display: none;
        }
        #edit {
          color: white;
          background-color: var(--simple-colors-default-theme-green-8, #ddffdd);
        }
        #delete {
          color: white;
          background-color: var(--simple-colors-default-theme-red-6, #ff5555);
        }
      </style>
      <paper-input
        id="input"
        class="input"
        value="{{value}}"
        hidden$="[[!editing]]"
      ></paper-input>
      <div class="input" hidden$="[[editing]]">[[value]]</div>
      <div class="ops" hidden$="[[!editMode]]">
        <paper-icon-button
          on-tap="_editToggle"
          id="edit"
          icon="icons:create"
        ></paper-icon-button>
        <paper-icon-button
          on-tap="_editToggle"
          id="add"
          icon="icons:add"
        ></paper-icon-button>
        <paper-icon-button
          on-tap="_editToggle"
          id="duplicate"
          icon="icons:content-copy"
        ></paper-icon-button>
        <paper-icon-button
          on-tap="_deleteModal"
          id="delete"
          icon="icons:delete"
        ></paper-icon-button>
      </div>
    `}static get properties(){return{value:{name:"value",type:"String"},editMode:{name:"editMode",type:"Boolean",value:!1,notify:!0,reflectToAttribute:!0},editing:{name:"editing",type:"Boolean",value:!1,observer:"_editModeChanged"},canEdit:{name:"canEdit",type:"Boolean",value:!1,reflectToAttribute:!0},canDelete:{name:"canDelete",type:"Boolean",value:!1,reflectToAttribute:!0}}}static get tag(){return"editable-list-item"}connectedCallback(){super.connectedCallback()}_editToggle(){this.editing=!this.editing;if(this.editing){this.$.input.focus()}}_deleteModal(){const evt=new CustomEvent("editable-list-item-delete",{bubbles:!0,cancelable:!0,detail:{element:this}});this.dispatchEvent(evt)}_editModeChanged(newValue){if(typeof newValue!==typeof void 0){if(newValue){this.$.edit.icon="icons:save"}else{this.$.edit.icon="icons:create"}}}}window.customElements.define(EditableListItem.tag,EditableListItem);export{EditableListItem};