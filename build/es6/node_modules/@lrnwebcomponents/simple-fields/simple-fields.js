import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import{MutableData}from"../../@polymer/polymer/lib/mixins/mutable-data.js";import{varExists,varGet}from"../hax-body/lib/haxutils.js";import{HAXWiring}from"../hax-body-behaviors/lib/HAXWiring.js";import"../eco-json-schema-form/eco-json-schema-form.js";import"../eco-json-schema-form/lib/eco-json-schema-object.js";import"../simple-colors/simple-colors.js";class SimpleFields extends(MutableData(PolymerElement)){static get template(){return html`
      <style>
        :host {
          display: block;
          background-color: #ffffff;
          overflow: visible;
        }

        :host([hidden]) {
          display: none;
        }

        eco-json-schema-object {
          width: 50%;
        }
        eco-json-schema-object {
          color: var(--hax-text-color);
          --eco-json-form-color: var(--hax-text-color);
          --eco-json-schema-object-form : {
            -ms-flex: unset;
            -webkit-flex: unset;
            flex: unset;
            -webkit-flex-basis: unset;
            flex-basis: unset;
          }
        }
        eco-json-schema-object .hax-code-editor {
          padding: 0;
        }
      </style>
      <style include="simple-colors-shared-styles"></style>
      <eco-json-schema-object
        id="schemaobject"
        autofocus$="[[autofocus]]"
        hide-line-numbers$="[[hideLineNumbers]]"
        on-form-changed="_formFieldsChanged"
        schema="[[__validatedSchema]]"
        value="{{value}}"
      ></eco-json-schema-object>
    `}static get haxProperties(){}static get properties(){let props={autofocus:{type:Boolean,value:!1},hideLineNumbers:{type:Boolean,value:!1},fields:{type:Array,value:[],observer:"_formFieldsChanged"},value:{type:Object,notify:!0,value:{},observer:"_valueChanged"},__validatedSchema:{type:Array,notify:!0,value:{properties:{}}}};return super.properties&&(props=Object.assign(props,super.properties)),props}static get tag(){return"simple-fields"}connectedCallback(){super.connectedCallback(),import("./lib/simple-fields-imports.js")}_formFieldsChanged(e){this.dispatchEvent(new CustomEvent("fields-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:e?e.detail:this}))}_valueChanged(newValue,oldValue){JSON.stringify(oldValue)!==JSON.stringify(newValue)&&(this._setValues(),this.dispatchEvent(new CustomEvent("value-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:this})))}_fieldsChanged(newValue,oldValue){JSON.stringify(oldValue)!==JSON.stringify(newValue)&&this._setValues()}_setValues(){let wiring=new HAXWiring,schema=wiring._getHaxJSONSchemaProperty(this.fields,wiring);for(let prop in this.value)schema[prop]&&(schema[prop].value=this.value[prop]);this.set("__validatedSchema",{properties:schema}),this.notifyPath("__validatedSchema.properties.*")}}window.customElements.define(SimpleFields.tag,SimpleFields);export{SimpleFields};