import{html as e,css as i}from"../../../lit-element/lit-element.js";import{SimpleColors as l}from"../../simple-colors/simple-colors.js";import"../../simple-picker/simple-picker.js";import"./simple-fields-field.js";import"../../../@vaadin/vaadin-upload/vaadin-upload.js";class SimpleFieldsUpload extends l{static get tag(){return"simple-fields-upload"}static get styles(){return[...super.styles,i`
        :host {
          display: block;
          visibility: visible;
          transition: 0.3s all ease;
          box-sizing: border-box;
          pointer-events: all;
          overflow: visible;
          font-family: var(--simple-fields-font-family, sans-serif);
          --simple-camera-snap-width: 100px;
          --simple-camera-snap-height: calc(100px * 9 / 16);
          --simple-camera-snap-color: var(--simple-fields-color, black);
          --simple-camera-snap-background: var(
            --simple-fields-background-color,
            #fff
          );
          --simple-camera-snap-border-radius: 2px;
          --lumo-font-family: var(--simple-fields-font-family, sans-serif);
          --lumo-error-color: var(--simple-fields-error-color, #dd2c00);
          --lumo-primary-font-color: var(--simple-fields-color, black);
          --lumo-base-color: var(--simple-fields-background-color, #fff);
          --lumo-primary-contrast-color: var(
            --simple-fields-background-color,
            #fff
          );
          --lumo-primary-color: var(--simple-fields-color, black);
          --lumo-dark-primary-color: ar(--simple-fields-color, black);
          --lumo-light-primary-color: var(--simple-fields-color, black);
          --lumo-primary-text-color: var(--simple-fields-color, black);
          --lumo-body-text-color: var(--simple-fields-color, black);
          --lumo-header-text-color: var(--simple-fields-color, black);
          --lumo-secondary-text-color: var(--simple-fields-color, black);
          --lumo-disabled-text-color: var(--simple-fields-border-color, #999);
          color: var(--simple-fields-color, black);
          background-color: var(--simple-fields-background-color, #fff);
        }
        vaadin-upload[dragover] {
          border-color: var(--simple-colors-default-theme-accent-3, #77e2ff);
        }
        vaadin-upload-file {
          --disabled-text-color: #var(--simple-fields-border-color, #999);
        }
        :host(:last-of-type) {
          margin-bottom: 0;
        }
        #description {
          font-family: var(--simple-fields-detail-font-family, sans-serif);
          font-size: var(--simple-fields-detail-font-size, 12px);
          line-height: var(--simple-fields-detail-line-height, 22px);
        }
        fieldset {
          padding: var(--simple-fields-margin-small, 8px)
            var(--simple-fields-margin, 16px);
          margin: var(--simple-fields-margin-small, 8px) 0
            var(--simple-fields-margin, 16px);
          border: 1px solid var(--simple-fields-border-color-light, #ccc);
          border-radius: var(--simple-fields-border-radius, 2px);
          transition: all 0.3s ease-in-out;
        }
        fieldset > div {
          display: flex;
          flex-wrap: wrap;
          align-items: center;
          justify-content: space-between;
        }
        fieldset > div > *:not(#picker) {
          flex: 1 1 auto;
        }
        #label {
          font-family: var(--simple-fields-font-family, sans-serif);
          font-size: var(--simple-fields-font-size, 16px);
          line-height: var(--simple-fields-line-height, 22px);
        }
        :host([error]) #label {
          color: var(--simple-fields-error-color, #dd2c00);
          transition: all 0.3s ease-in-out;
        }
        #picker {
          margin-bottom: 0;
          margin-right: 5px;
        }
        vaadin-upload {
          padding: 5px;
          margin: 0;
        }
        simple-camera-snap {
          position: relative;
          --simple-camera-snap-button-container-position: absolute;
          --simple-camera-snap-button-container-bottom: 2px;
          --simple-camera-snap-button-container-z-index: 5;
          --simple-camera-snap-button-border-radius: 100%;
          --simple-camera-snap-button-opacity: 0.7;
        }
      `]}constructor(){super(),this.label=null,this.noCamera=!1,this.options=[],this.noVoiceRecord=!0}render(){return e`
      <fieldset id="fieldset">
        <legend id="label" ?hidden="${!this.label}">${this.label}</legend>
        <div>
          <simple-picker
            id="picker"
            aria-label="Source..."
            required
            value="${this.option}"
            @value-changed="${this.optionChanged}"
            .options="${this.options}"
          >
          </simple-picker>
          <simple-fields-field
            id="url"
            ?hidden="${"url"!==this.option}"
            value="${this.value||""}"
            @value-changed="${this.valueChanged}"
            label="URL"
            type="url"
            auto-validate=""
          ></simple-fields-field>
          <vaadin-upload
            capture
            form-data-name="file-upload"
            ?hidden="${"fileupload"!==this.option}"
            id="fileupload"
            @upload-before="${this._fileAboutToUpload}"
            @upload-response="${this._fileUploadResponse}"
          ></vaadin-upload>
          <div id="camerahole" ?hidden="${"selfie"!==this.option}"></div>
          <div id="voicerecorder" ?hidden="${"audio"!==this.option}"></div>
          <div id="description" ?hidden="${!this.description}">
            ${this.description}
          </div>
        </div>
      </fieldset>
    `}optionChanged(e){this.option=e.detail.value,null!=e.detail.value&&"null"!=e.detail.value||this.options&&this.options[0]&&this.options[0][0]&&this.options[0][0].value&&(this.option=this.options[0][0].value)}valueChanged(e){this.value=e.detail.value}updated(e){super.updated&&super.updated(e),e.forEach((e,i)=>{"value"==i&&this.dispatchEvent(new CustomEvent("value-changed",{detail:{value:this[i]}}))})}static get properties(){return{label:{type:String},description:{type:String},value:{type:String},option:{type:String},options:{type:Array},noCamera:{type:Boolean,attribute:"no-camera"},noVoiceRecord:{type:Boolean,attribute:"no-voice-record"}}}_fileAboutToUpload(e){this.dispatchEvent(new CustomEvent("upload-before",{bubbles:!0,cancelable:!0,composed:!1,detail:e.detail}))}_fileUploadResponse(e){this.shadowRoot.querySelector("#url").value=item.url,this.dispatchEvent(new CustomEvent("upload-response",{bubbles:!0,cancelable:!0,composed:!1,detail:e.detail}))}_setInputOptions(){let e=[[{alt:"URL",icon:"icons:link",value:"url"}],[{alt:"Upload",icon:"icons:file-upload",value:"fileupload"}]];return!navigator.mediaDevices||this.noCamera?this.shadowRoot.querySelector("#camerahole").style.display="none":e.push([{alt:"Camera",icon:"image:photo-camera",value:"selfie"}]),navigator.mediaDevices&&!this.noVoiceRecord||(this.shadowRoot.querySelector("#voicerecorder").style.display="none"),e}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),this.options=[...this._setInputOptions()],this.value?this.option="url":this.option="fileupload",this.shadowRoot.querySelector("#picker").addEventListener("change",e=>{e&&e.detail&&"selfie"===e.detail.value&&this._takeSelfie(e),e&&e.detail&&"audio"===e.detail.value&&this._voiceRecorder(e)})}__newPhotoShowedUp(e){let i=new File([e.detail.raw],"headshot"+e.timeStamp+".jpg");this.shadowRoot.querySelector("#fileupload")._addFile(i)}__newAudioShowedUp(e){let i=new File([e.detail.value],"voice-memo"+e.timeStamp+".mp3");this.shadowRoot.querySelector("#fileupload")._addFile(i)}_takeSelfie(e){this.camera||(import("../../simple-login/lib/simple-camera-snap.js"),this.camera=document.createElement("simple-camera-snap"),this.camera.autoplay=!0,this.camera.addEventListener("simple-camera-snap-image",this.__newPhotoShowedUp.bind(this)),this.shadowRoot.querySelector("#camerahole").appendChild(this.camera))}_voiceRecorder(e){this.voice||(import("../../voice-recorder/voice-recorder.js"),this.voice=document.createElement("voice-recorder"),this.voice.addEventListener("voice-recorder-recording",this.__newAudioShowedUp.bind(this)),this.shadowRoot.querySelector("#voicerecorder").appendChild(this.voice))}_resolveObjectPath(e,i){return e.split(".").reduce((function(e,i){return e?e[i]:null}),i||self)}}window.customElements.define(SimpleFieldsUpload.tag,SimpleFieldsUpload);export{SimpleFieldsUpload};