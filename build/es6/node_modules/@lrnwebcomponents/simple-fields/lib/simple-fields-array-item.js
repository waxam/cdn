import{LitElement as e,html as t,css as i}from"../../../lit-element/lit-element.js";import"../../../@polymer/paper-icon-button/paper-icon-button.js";import"../../../@polymer/paper-button/paper-button.js";import"../../../@polymer/iron-icons/iron-icons.js";import"../../simple-tooltip/simple-tooltip.js";class SimpleFieldsArrayItem extends e{static get styles(){return[i`
        :host {
          display: block;
          transition: all 0.5s;
          border-radius: 3px;
        }
        :host([disabled]) {
          opacity: 0.5;
        }
        :host([aria-expanded="true"]) {
          border: 1px solid #ddd;
        }
        :host(:focus-within) {
          border: 1px solid #444;
          z-index: 2;
        }
        *[aria-controls="content"][disabled] {
          cursor: not-allowed;
        }
        #drag-handle,
        ::slotted([slot="sort"]),
        ::slotted([slot="preview"]) {
          flex: 0 1 auto;
          margin: 0 15px;
        }
        ::slotted([slot="preview"]) {
          flex: 1 0 auto;
        }
        #heading,
        .heading-inner {
          display: flex;
          justify-content: space-between;
          align-items: center;
        }
        #content {
          max-height: 0;
          overflow: hidden;
          transition: all 0.5s ease-in-out;
        }
        :host #content-inner {
          overflow: hidden;
          display: flex;
          align-items: flex-end;
          justify-content: space-between;
        }
        :host(:focus-within) #content,
        :host([aria-expanded="true"]) #content {
          max-height: unset;
          overflow: hidden;
        }
        :host(:focus-within) #content-inner,
        :host([aria-expanded="true"]) #content-inner {
          overflow: unset;
          margin: 0 15px;
        }
        #content-inner > * {
          flex: 1 1 auto;
        }
        #remove {
          flex: 0 0 auto;
          color: #cc0000;
          margin-right: -15px;
        }
      `]}render(){return t`
      <div id="heading">
        <slot name="sort"></slot>
        <slot name="preview"></slot>
      </div>
      <div id="content">
        <div id="content-inner">
          <div><slot></slot></div>
          <paper-icon-button
            id="remove"
            controls="${this.id}"
            icon="delete"
            label="Remove this item"
            ?disabled="${this.disabled}"
            @click="${e=>this._handleRemove()}"
          >
          </paper-icon-button>
          <simple-tooltip for="remove">Remove this item</simple-tooltip>
        </div>
      </div>
    `}static get tag(){return"simple-fields-array-item"}static get properties(){return{disabled:{type:Boolean,reflect:!0}}}constructor(){super(),this.disabled=!1}connectedCallback(){super.connectedCallback(),setTimeout(()=>{this.dispatchEvent(new CustomEvent("added",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))},0)}_handleRemove(){this.dispatchEvent(new CustomEvent("remove",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}disconnectedCallback(){this.dispatchEvent(new CustomEvent("removed",{bubbles:!0,cancelable:!0,composed:!0,detail:this})),super.disconnectedCallback()}}window.customElements.define(SimpleFieldsArrayItem.tag,SimpleFieldsArrayItem);export{SimpleFieldsArrayItem};