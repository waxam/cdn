/**
 * Copyright 2019 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 *
 * Inspiration from: https://codepen.io/bradtraversy/pen/odmVgN
 */
class DragNDrop extends HTMLElement{get html(){return'\n<style>\n:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([editing]) .items ::slotted(.hold) {\n  border: solid 5px #ccc;\n}\n\n:host([editing]) .items ::slotted([data-droppable]) {\n  margin: 10px;\n  border: solid 3px salmon;\n  background: white;\n}\n\n:host([editing]) .items ::slotted(.hovered) {\n  background: #f4f4f4;\n  border-style: dashed;\n}\n        </style>\n<div class="items">\n  <slot></slot>\n</div>'}static get properties(){return{...super.properties,editing:{name:"editing",type:Boolean}}}static get tag(){return"drag-n-drop"}constructor(t=!1){super(),this.__dragging={},this.tag=DragNDrop.tag;let e=DragNDrop.properties;for(let t in e)e.hasOwnProperty(t)&&(this.hasAttribute(t)?this[t]=this.getAttribute(t):(this.setAttribute(t,e[t].value),this[t]=e[t].value));this.template=document.createElement("template"),this.attachShadow({mode:"open"}),t||this.render()}connectedCallback(){window.ShadyCSS&&window.ShadyCSS.styleElement(this)}_copyAttribute(t,e){const r=this.shadowRoot.querySelectorAll(e),i=this.getAttribute(t),n=null==i?"removeAttribute":"setAttribute";for(const e of r)e[n](t,i)}_setProperty({name:t,value:e}){this[t]=e}render(){this.shadowRoot.innerHTML=null,this.template.innerHTML=this.html,window.ShadyCSS&&window.ShadyCSS.prepareTemplate(this.template,this.tag),this.shadowRoot.appendChild(this.template.content.cloneNode(!0))}static get observedAttributes(){return["editing"]}get editing(){return this.getAttribute("editing")}set editing(t){t?this.setAttribute("editing",t):this.removeAttribute("editing")}attributeChangedCallback(t,e,r){if("editing"===t){const t=this.querySelectorAll("[data-draggable]"),e=this.querySelectorAll("[data-droppable]");if(r){for(const t of e)t.setAttribute("droppable","true"),t.addEventListener("dragover",this.dragOver.bind(this)),t.addEventListener("dragenter",this.dragEnter.bind(this)),t.addEventListener("dragleave",this.dragLeave.bind(this)),t.addEventListener("drop",this.dragDrop.bind(this));for(const e of t)e.setAttribute("draggable","true"),e.addEventListener("dragstart",this.dragStart.bind(this)),e.addEventListener("dragend",this.dragEnd.bind(this))}else{for(const t of e)t.removeAttribute("droppable"),t.removeEventListener("dragover",this.dragOver.bind(this)),t.removeEventListener("dragenter",this.dragEnter.bind(this)),t.removeEventListener("dragleave",this.dragLeave.bind(this)),t.removeEventListener("drop",this.dragDrop.bind(this));for(const e of t)e.removeAttribute("draggable"),e.removeEventListener("dragstart",this.dragStart.bind(this)),e.removeEventListener("dragend",this.dragEnd.bind(this))}}}dragStart(t){this.__dragging=t.target,this.__dragging.className+=" hold",setTimeout((()=>this.__dragging.className="invisible"),0),t.stopPropagation(),t.stopImmediatePropagation()}dragEnd(t){this.__dragging.className="fill"}dragOver(t){t.preventDefault()}dragEnter(t){t.preventDefault(),t.target.className+=" hovered"}dragLeave(t){t.target.className="empty"}dragDrop(t){t.target.className="empty",t.target.appendChild(this.__dragging)}}window.customElements.define(DragNDrop.tag,DragNDrop);export{DragNDrop};