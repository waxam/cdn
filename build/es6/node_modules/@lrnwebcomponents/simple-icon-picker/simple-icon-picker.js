/**
 * Copyright 2019 Penn State University
 * @license Apache-2.0, see License.md for full text.
 */
import{html,css}from"../../lit-element/lit-element.js";import{SimplePicker}from"../simple-picker/simple-picker.js";import{IronMeta}from"../../@polymer/iron-meta/iron-meta.js";class SimpleIconPicker extends SimplePicker{static get styles(){return[...super.styles,css`
        :host(simple-icon-picker) #collapse {
          width: 300px;
        }
        :host(simple-icon-picker) .row {
          justify-content: flex-start;
        }
        :host(simple-icon-picker) simple-picker-option {
          flex: 0 0 auto;
        }
      `]}static get properties(){return{...super.properties,allowNull:{name:"allowNull",type:Boolean},icons:{name:"icons",type:Array},value:{name:"value",type:String,reflect:!0},optionsPerRow:{name:"optionsPerRow",type:Number},__iconList:{name:"__iconList",type:Array}}}static get tag(){return"simple-icon-picker"}constructor(){super(),this.hideOptionLabels=!0,this.allowNull=!1,this.icons=[],this.value=null,this.options=[],this.optionsPerRow=10}updated(changedProperties){super.updated&&super.updated(changedProperties),changedProperties.forEach((oldValue,propName)=>{["optionsPerRow","icons","allowNull","__iconList"].includes(propName)&&this._getOptions(this[propName],oldValue),"value"==propName&&this.dispatchEvent(new CustomEvent("value-changed",{detail:{value:this[propName]}}))})}firstUpdated(changedProperties){super.firstUpdated&&super.firstUpdated(changedProperties);const iconSets=new IronMeta({type:"iconset"});if(0===this.icons.length&&void 0!==iconSets&&iconSets.list&&iconSets.list.length){var iconList=[];iconSets.list.forEach((function(item){item.getIconNames().forEach(icon=>{iconList.push(icon)})})),this.__iconList=iconList,this._setSelectedOption()}}_getOptions(){let icons="string"==typeof this.icons?JSON.parse(this.icons):this.icons,cols=(this.shadowRoot.querySelector("#collapse"),this.optionsPerRow);0===icons.length&&this.__iconList&&this.__iconList.length>0&&(icons=this.__iconList);let options=!1===this.allowNull?[]:[[{alt:"null",value:null}]],h=!1===this.allowNull?0:1;cols=Math.sqrt(icons.length+h)<=this.optionsPerRow?Math.ceil(Math.sqrt(icons.length+h)):this.optionsPerRow;for(let i=0;i<icons.length;i++){let j=h+i,row=Math.floor(j/cols),col=j-row*cols;void 0!==options[row]&&null!==options[row]||(options[row]=[]),options[row][col]={alt:icons[i],icon:icons[i],value:icons[i]}}this.options=options}_setSelectedOption(){this.options.length>1&&super._setSelectedOption()}}window.customElements.define(SimpleIconPicker.tag,SimpleIconPicker);export{SimpleIconPicker};