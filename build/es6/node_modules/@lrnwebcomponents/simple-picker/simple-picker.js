import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";class SimplePicker extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: inline-flex;
          align-items: center;
          color: var(--simple-picker-color, black);
          font-family: var(--simple-picker-font-family, inherit);
          font-size: var(--simple-picker-font-size, inherit);
          max-height: calc(var(--simple-picker-option-size, 24px) + 18px);
          @apply --simple-picker;
        }
        :host div {
          margin: unset;
          padding: unset;
        }

        :host([block-label]) {
          display: block;
          margin: 0 0 15px;
          max-height: unset;
        }

        :host([disabled]) {
          cursor: not-allowed;
        }

        :host([hidden]) {
          display: none;
        }

        :host label:not([hidden]) {
          padding-right: 5px;
          font-family: var(--simple-picker-font-family, inherit);
          color: var(
            --simple-picker-label-color,
            var(--simple-picker-color, black)
          );
          max-height: calc(var(--simple-picker-option-size, 24px) + 4px);
          @apply --simple-picker-label;
        }

        :host([block-label]) label:not([hidden]) {
          display: block;
          padding-right: 0px;
          color: var(--simple-picker-float-label-color, #888);
          transition: all 0.5s;
          max-height: unset;
        }

        :host([block-label]:focus) label,
        :host([block-label]:hover) label {
          color: var(
            --simple-picker-float-label-active-color,
            var(--simple-picker-color, black)
          );
        }

        :host #sample,
        :host .rows {
          margin: 0;
          padding: 0;
        }

        :host #listbox {
          cursor: pointer;
          display: flex;
          position: relative;
          flex: 1 0 auto;
          max-height: calc(var(--simple-picker-option-size, 24px) + 4px);
        }

        :host #sample {
          display: flex;
          flex: 1 0 auto;
          justify-content: space-between;
          align-items: center;
          padding: 2px;
          border-radius: 2px;
          background-color: var(--simple-picker-background-color, #f0f0f0);
          border: 1px solid
            var(--simple-picker-border-color, var(--simple-picker-color, black));
          @apply --simple-picker-sample;
        }
        :host(:focus) #sample,
        :host #listbox:focus #sample,
        :host #sample:focus {
          border: 2px solid
            var(
              --simple-picker-focus-border-color,
              var(--simple-picker-color, black)
            );
          @apply --simple-picker-sample-focus;
        }

        :host #listbox:focus {
          outline: none;
        }

        :host #icon {
          transform: var(--simple-picker-icon-tranform, rotate(0deg));
          transition: transform 0.25s;
        }

        :host([expanded]) #icon {
          transform: var(--simple-picker-expanded-icon-tranform, rotate(0deg));
          transition: transform 0.25s;
        }

        :host #collapse {
          display: none;
          width: 100%;
          position: absolute;
          top: calc(var(--simple-picker-option-size, 24px) + 4px);
          padding: 0 1px;
          z-index: 2;
          @apply --simple-picker-collapse;
        }

        :host([expanded]:not([disabled])) #collapse {
          display: block;
        }

        :host .rows {
          display: block;
          position: absolute;
          z-index: 1000;
          outline: 1px solid
            var(--simple-picker-border-color, var(--simple-picker-color, black));
          background-color: var(--simple-picker-background-color, #f0f0f0);
          box-shadow: 0px 0px 1px #888;
          @apply --simple-picker-rows;
        }

        :host .row {
          display: flex;
          align-items: stretch;
          justify-content: space-between;
          @apply --simple-picker-row;
        }

        :host simple-picker-option {
          z-index: 1;
          flex: 1 1 auto;
          justify-content: flex-start;
          max-height: unset;
          min-height: var(--simple-picker-option-size, 24px);
          min-width: var(--simple-picker-option-size, 24px);
          line-height: var(--simple-picker-option-size, 24px);
          color: var(--simple-picker-color);
          background-color: var(
            --simple-picker-option-background-color,
            #ffffff
          );
          outline: var(--simple-picker-option-outline, none);
          transition: max-height 2s;
          @apply --simple-picker-option;
        }

        :host(:not([value])) #sample simple-picker-option,
        :host([value="null"]) #sample simple-picker-option {
          @apply --simple-picker-sample-null;
          --simple-picker-option-label: {
            @apply --simple-picker-sample-null-label;
          }
        }

        :host simple-picker-option[selected] {
          z-index: 50;
          color: var(--simple-picker-color);
          background-color: var(
            --simple-picker-selected-option-background-color,
            #e8e8e8
          );
          outline: var(--simple-picker-selected-option-outline, none);
        }

        :host simple-picker-option[active] {
          z-index: 100;
          cursor: pointer;
          color: var(--simple-picker-color);
          background-color: var(
            --simple-picker-active-option-background-color,
            #aaddff
          );
          outline: var(--simple-picker-active-option-outline, none);
        }

        :host #sample simple-picker-option {
          color: var(--simple-picker-sample-color, var(--simple-picker-color));
          background-color: var(
            --simple-picker-sample-background-color,
            transparent
          );
          --simple-picker-option-padding: 2px 0;
          --simple-picker-option-label: {
            @apply --simple-picker-sample-label;
          }
          @apply --simple-picker-sample-option;
          border: none;
        }

        :host(:not([expanded])) #collapse simple-picker-option {
          max-height: 0;
          transition: max-height 1.5s;
        }

        :host #collapse simple-picker-option:not([value]),
        :host #collapse simple-picker-option[value="null"] {
          @apply --simple-picker-option-null;
        }

        @media screen and (max-width: 600px) {
          :host {
            position: static;
          }
          :host #collapse {
            top: 0;
            margin-top: 0;
            position: relative;
          }
          :host .rows {
            position: sticky;
          }
        }
      </style>
      <label id="listLabel" for="listbox" hidden$="[[!hasLabel]]"
        >[[label]]</label
      >
      <div
        id="listbox"
        aria-activedescendant$="[[__activeDesc]]"
        aria-labelledby$="[[ariaLabelledby]]"
        disabled$="[[disabled]]"
        role="listbox"
        tabindex="0"
      >
        <div id="sample">
          <simple-picker-option
            aria-hidden="true"
            hide-option-labels$="[[hideOptionLabels]]"
            icon$="[[__selectedOption.icon]]"
            label$="[[__selectedOption.alt]]"
            style$="[[__selectedOption.style]]"
            title-as-html$="[[titleAsHtml]]"
          >
          </simple-picker-option>
          <span id="icon"
            ><iron-icon aria-hidden="true" icon="arrow-drop-down"></iron-icon
          ></span>
        </div>
        <div id="collapse">
          <div class="rows">
            <template
              is="dom-repeat"
              items="[[__options]]"
              as="row"
              index-as="rownum"
              restamp
            >
              <div class="row">
                <template
                  is="dom-repeat"
                  items="[[row]]"
                  as="option"
                  index-as="colnum"
                  restamp
                >
                  <simple-picker-option
                    active$="[[_isActive(__activeDesc,rownum,colnum)]]"
                    aria-selected$="[[_isSelected(value,option.value)]]"
                    data$="[[data]]"
                    hide-option-labels$="[[hideOptionLabels]]"
                    hidden$="[[_hideNullOption(option.value,allowNull)]]"
                    icon$="[[option.icon]]"
                    id$="[[_getOptionId(rownum,colnum)]]"
                    label$="[[option.alt]]"
                    role="option"
                    selected$="[[_isSelected(value,option.value)]]"
                    on-option-focus="_handleOptionFocus"
                    on-set-selected-option="_handleSetSelectedOption"
                    style$="[[option.style]]"
                    tabindex="-1"
                    title-as-html$="[[titleAsHtml]]"
                    value="[[option.value]]"
                  >
                  </simple-picker-option>
                </template>
              </div>
            </template>
          </div>
        </div>
      </div>
    `}static get properties(){let props={allowNull:{name:"allowNull",type:Boolean,value:!1,reflectToAttribute:!0},ariaLabelledby:{name:"ariaLabelledby",type:String,value:null},blockLabel:{name:"blockLabel",type:Boolean,value:!1,reflectToAttribute:!0},disabled:{name:"disabled",type:Boolean,value:!1},expanded:{name:"expanded",type:Boolean,value:!1,reflectToAttribute:!0},hideOptionLabels:{name:"hideOptionLabels",type:Boolean,value:!1},label:{name:"label",type:String,value:null,observer:"_setLabel"},options:{name:"options",type:Array,value:[[{icon:null,style:null,alt:null,value:null}]],observer:"_setSelectedOption"},titleAsHtml:{name:"titleAsHtml",type:Boolean,value:!1},value:{name:"value",type:Object,value:null,notify:!0,observer:"_setSelectedOption",reflectToAttribute:!0},__activeDesc:{name:"__activeDesc",type:String,value:"option-0-0"},__hasLabel:{name:"__hasLabel",type:Boolean,value:!0},__selectedOption:{name:"_setSelectedOption",type:Object}};return super.properties&&(props=Object.assign(props,super.properties)),props}static get tag(){return"simple-picker"}_getOption(options,optionId){if(void 0!==options&&null!=optionId){let coords=optionId.split("-");return options[coords[1]][coords[2]]}return null}_getOptionId(rownum,colnum){return"option-"+rownum+"-"+colnum}_goToOption(rownum,colnum){let targetId=this._getOptionId(rownum,colnum),target=this.shadowRoot.querySelector("#"+targetId),active=this.shadowRoot.querySelector("#"+this.__activeDesc);null!==target&&(target.tabindex=0,target.focus(),active.tabindex=-1)}_handleListboxEvent(e,type){this.dispatchEvent(new CustomEvent(type,{detail:this})),"click"===type&&this._toggleListbox(!this.expanded)}_handleListboxKeydown(e){this.dispatchEvent(new CustomEvent("keydown",{detail:this}));let coords=this.__activeDesc.split("-"),rownum=parseInt(coords[1]),colnum=parseInt(coords[2]);if(32===e.keyCode)e.preventDefault(),this._toggleListbox(!this.expanded);else if(this.expanded&&[9,35,36,38,40].includes(e.keyCode))if(e.preventDefault(),35===e.keyCode){let lastrow=this.options.length-1,lastcol=this.options[lastrow].length-1;this._goToOption(lastrow,lastcol)}else 36===e.keyCode?this._goToOption(0,0):38===e.keyCode?colnum>0?this._goToOption(rownum,colnum-1):rownum>0&&this._goToOption(rownum-1,this.options[rownum-1].length-1):40===e.keyCode&&(colnum<this.options[rownum].length-1?this._goToOption(rownum,colnum+1):rownum<this.options.length-1&&this._goToOption(rownum+1,[0]))}_handleOptionFocus(e){this._setActiveOption(e.detail.id)}_setLabel(){let label=this.shadowRoot.querySelector("#listLabel");this.hasLabel=void 0!==this.label&&null!==this.label&&""!==this.label.trim(),label.innerHTML=void 0!==this.label&&null!==this.label&&""!==this.label.trim()?this.label.trim():""}_hideNullOption(val,allowNull){return!allowNull&&null==val}_isActive(active,rownum,colnum){return active===this._getOptionId(rownum,colnum)}_isSelected(value1,value2){return value1===value2}_setActiveOption(id){this.__activeDesc=id,this.dispatchEvent(new CustomEvent("option-focus",{detail:this}))}_setSelectedOption(){let sel=null;if(void 0!==this.options&&null!==this.options){this.set("__options","string"==typeof this.options?JSON.parse(this.options):this.options.slice()),this.__activeDesc=this.allowNull?"option-0-0":null;for(var i=0;i<this.__options.length;i++)for(var j=0;j<this.__options[i].length;j++)null!==this.value&&null===this.__activeDesc&&(this.__activeDesc="option-"+i+"-"+j),this.__options[i][j].value===this.value&&(this.__activeDesc="option-"+i+"-"+j,sel=this.__options[i][j])}null===sel&&(this.value=null),this.__selectedOption=sel,this.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:this}))}_toggleListbox(expanded){let active=this.shadowRoot.querySelector("#"+this.__activeDesc);this.expanded=expanded,expanded?(null!==active&&active.focus(),this.dispatchEvent(new CustomEvent("expand",{detail:this}))):(null!==active&&(this.value=active.getAttribute("value")),this.dispatchEvent(new CustomEvent("collapse",{detail:this})))}ready(){super.ready();let root=this;void 0!==this.$.listbox&&(this.$.listbox.addEventListener("click",function(e){root._handleListboxEvent(e,"click")}),this.$.listbox.addEventListener("mousedown",function(e){root._handleListboxEvent(e,"mousedown")}),this.$.listbox.addEventListener("keydown",function(e){root._handleListboxKeydown(e)}),this.addEventListener("blur",function(e){this.expanded=!1}))}constructor(){super(),import("../../@polymer/iron-icon/iron-icon.js"),import("../../@polymer/iron-icons/iron-icons.js"),import("./lib/simple-picker-option.js")}setOptions(options){this.set("options",[[]]),this.set("options",options)}}window.customElements.define(SimplePicker.tag,SimplePicker);export{SimplePicker};