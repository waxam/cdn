/**
 * Copyright 2018 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as e,html as i,css as t}from"../../lit-element/lit-element.js";class SimplePicker extends e{static get styles(){return[t`
        :host {
          display: var(--simple-picker-display, inline-flex);
          align-items: center;
          color: var(--simple-picker-color, black);
          font-family: var(--simple-picker-font-family, inherit);
          font-size: var(--simple-picker-font-size, inherit);
          --simple-picker-height: calc(
            var(--simple-picker-option-size, 24px) +
              var(--simple-picker-sample-padding, 2px) * 2 +
              var(--simple-picker-border-width, 1px) * 2
          );
          min-height: var(--simple-picker-height);
          max-height: var(--simple-picker-height);
        }

        :host([block-label]) {
          display: block;
          margin: 0 0 15px;
          max-height: unset;
        }

        :host([disabled]) {
          --simple-picker-color: var(--simple-picker-color-disabled, #888);
          --simple-picker-background-color: var(
            --simple-picker-background-color-disabled,
            #e8e8e8
          );
          cursor: not-allowed;
        }

        :host([hidden]) {
          display: none;
        }

        div {
          margin: unset;
          padding: unset;
        }

        label:not([hidden]) {
          display: flex;
          align-items: center;
          padding-right: 5px;
          font-family: var(--simple-picker-font-family, inherit);
          color: var(
            --simple-picker-label-color,
            var(--simple-picker-color, black)
          );
        }

        :host([block-label]) label:not([hidden]) {
          display: block;
          padding-right: 0px;
          color: var(
            --simple-picker-float-label-color,
            var(--simple-picker-color-disabled, #888)
          );
          transition: all 0.5s;
          max-height: unset;
        }

        :host([block-label]:focus-within) label,
        :host([block-label]:hover) label {
          color: var(
            --simple-picker-float-label-active-color,
            var(--simple-picker-color, black)
          );
          transition: all 0.5s;
        }

        #sample,
        .rows {
          margin: 0;
          padding: 0;
        }

        #listbox {
          cursor: pointer;
          position: relative;
          flex: 1 0 auto;
          min-height: var(--simple-picker-height);
          max-height: var(--simple-picker-height);
        }

        #sample {
          display: flex;
          flex: 1 0 auto;
          justify-content: space-between;
          align-items: center;
          padding: var(--simple-picker-sample-padding, 2px);
          border-radius: var(--simple-picker-border-radius, 2px);
          color: var(--simple-picker-sample-color, black);
          background-color: var(--simple-picker-background-color, #f0f0f0);
          border-width: var(--simple-picker-border-width, 1px);
          border-style: var(--simple-picker-border-style, solid);
          border-color: var(
            --simple-picker-border-color,
            var(--simple-picker-color-disabled, #888)
          );
        }

        :host([hide-sample]) #sample {
          width: var(--simple-picker-option-size);
          overflow: visible;
        }

        :host(:focus-within) #sample {
          border-width: var(
            --simple-picker-focus-border-width,
            var(--simple-picker-border-width, 1px)
          );
          border-style: var(
            --simple-picker-focus-border-style,
            var(--simple-picker-border-style, solid)
          );
          border-color: var(
            --simple-picker-focus-border-color,
            var(
              --simple-picker-border-color,
              var(--simple-picker-color-disabled, #888)
            )
          );
          transition: all 0.5s;
        }

        :host(:focus-within) #listbox {
          border-width: var(
            --simple-picker-listbox-border-width,
            var(--simple-picker-border-width, 1px)
          );
          border-style: var(
            --simple-picker-listbox-border-width,
            var(--simple-picker-border-style, solid)
          );
          border-color: var(
            --simple-picker-listbox-border-width,
            var(
              --simple-picker-border-color,
              var(--simple-picker-color-disabled, #888)
            )
          );
        }

        #listbox:focus-within,
        :host(:focus-within) #listbox {
          outline: var(--simple-picker-listbox-outline, unset);
        }

        #icon {
          width: var(--simple-picker-option-size, 24px);
          height: var(--simple-picker-option-size, 24px);
          transform: var(--simple-picker-icon-transform, rotate(0deg));
          transition: transform 0.25s;
        }

        :host([expanded]) #icon {
          transform: var(--simple-picker-expanded-icon-transform, rotate(0deg));
          transition: transform 0.25s;
        }

        #collapse {
          display: none;
          width: 100%;
          position: absolute;
          z-index: 2;
        }

        :host([expanded]:not([disabled])) #collapse {
          display: block;
          position: unset;
          background-color: var(--simple-picker-options-background-color, #fff);
        }

        .rows {
          display: block;
          position: absolute;
          z-index: 1000;
          top: calc(
            var(--simple-picker-option-size, 24px) + 2 *
              var(--simple-picker-options-border-width)
          );
          border-width: var(
            --simple-picker-options-border-width,
            var(--simple-picker-border-width, 1px)
          );
          border-style: var(
            --simple-picker-options-border-style,
            var(--simple-picker-border-style, solid)
          );
          border-color: var(
            --simple-picker-options-border-color,
            var(
              --simple-picker-border-color,
              var(--simple-picker-color-disabled, #888)
            )
          );
          background-color: var(--simple-picker-options-background-color, #fff);
          max-height: var(--simple-picker-options-max-height, 250px);
          overflow-y: auto;
        }

        :host([align-right]) #collapse .rows {
          left: unset;
          right: calc(
            var(
                --simple-picker-options-border-width,
                var(--simple-picker-border-width, 1px)
              ) * 2
          );
        }

        .row {
          display: flex;
          align-items: stretch;
          justify-content: space-between;
        }

        simple-picker-option {
          z-index: 1;
          flex: 1 1 auto;
          justify-content: flex-start;
          max-height: unset;
          min-height: var(--simple-picker-option-size, 24px);
          min-width: var(--simple-picker-option-size, 24px);
          line-height: var(--simple-picker-option-size, 24px);
          color: var(--simple-picker-color, black);
          background-color: var(--simple-picker-options-background-color, #fff);
          transition: max-height 2s;
        }

        simple-picker-option[selected] {
          z-index: 50;
          color: var(--simple-picker-color, black);
          background-color: var(
            --simple-picker-option-selected-background-color,
            var(--simple-picker-options-background-color, #fff)
          );
        }

        simple-picker-option[active] {
          z-index: 100;
          cursor: pointer;
          color: var(--simple-picker-color, black);
          background-color: var(
            --simple-picker-option-active-background-color,
            #aaddff
          );
        }

        #sample simple-picker-option {
          color: var(--simple-picker-color, black);
          background-color: var(
            --simple-picker-sample-background-color,
            transparent
          );
          --simple-picker-option-padding: var(
              --simple-picker-sample-padding,
              2px
            )
            0;
          border: none;
        }

        :host([hide-sample]) #sample simple-picker-option {
          position: absolute;
          left: -9999px;
          overflow: hidden;
          width: 0;
          height: 0;
        }

        :host(:focus-within) #sample simple-picker-option,
        :host(:hover) #sample simple-picker-option {
          --simple-picker-color: var(
            --simple-picker-color-active,
            var(--simple-picker-color, black)
          );
        }

        :host(:not([expanded])) #collapse simple-picker-option {
          max-height: 0;
          transition: max-height 1.5s;
        }

        @media screen and (max-width: 600px) {
          :host {
            position: static;
          }

          #collapse {
            top: 0;
            margin-top: 0;
            position: relative;
          }

          .rows {
            position: absolute;
          }
        }
      `]}render(){return i`
      <label
        id="listLabel"
        for="listbox"
        .hidden="${!this.label||""===this.label.trim()}"
      >
        ${this.label&&""!==this.label.trim()?this.label.trim():""}
      </label>
      <div
        id="listbox"
        .aria-activedescendant="${this.__activeDesc}"
        .aria-labelledby="${this.ariaLabelledby}"
        .disabled="${this.disabled}"
        role="listbox"
        tabindex="0"
        @click="${this._handleListboxClick}"
        @mousedown="${this._handleListboxMousedown}"
        @keydown="${this._handleListboxKeydown}"
      >
        <div id="sample">
          <simple-picker-option
            ?hide-option-labels="${this.hideOptionLabels}"
            ?title-as-html="${this.titleAsHtml}"
            .icon="${!!this.__selectedOption&&this.__selectedOption.icon}"
            .label="${!!this.__selectedOption&&this.__selectedOption.alt}"
            .style=${!!this.__selectedOption&&this.__selectedOption.style}
            aria-hidden="true"
          >
          </simple-picker-option>
          <span id="icon"
            ><iron-icon aria-hidden="true" icon="arrow-drop-down"></iron-icon
          ></span>
        </div>
        <div id="collapse">
          <div class="rows">
            ${this.__options?this.__options.map((e,t)=>i`
                    <div class="row">
                      ${Array.isArray(e)?e.map((e,o)=>i`
                              <simple-picker-option
                                @option-focus="${this._handleOptionFocus}"
                                @set-selected-option="${this._handleSetSelectedOption}"
                                ?active="${`${this.__activeDesc}`===`option-${t}-${o}`}"
                                ?hide-option-labels="${this.hideOptionLabels}"
                                ?hidden="${!this.allowNull&&!e.value}"
                                ?selected="${this.value===e.value}"
                                ?title-as-html="${this.titleAsHtml}"
                                .data="${this.data}"
                                .icon="${e.icon}"
                                .id="option-${t}-${o}"
                                .label="${e.alt}"
                                .style=${e.style}
                                aria-selected="${this.value===e.value?"true":"false"}"
                                role="option"
                                tabindex="-1"
                                value="${e.value}"
                              >
                              </simple-picker-option>
                            `):""}
                    </div>
                  `):""}
          </div>
        </div>
      </div>
    `}static get properties(){return{...super.properties,allowNull:{type:Boolean,reflect:!0,attribute:"allow-null"},alignRight:{type:Boolean,reflect:!0,attribute:"align-right"},ariaLabelledby:{type:String,attribute:"aria-labelledby"},blockLabel:{type:Boolean,reflect:!0,attribute:"block-label"},disabled:{type:Boolean,reflect:!0},expanded:{type:Boolean,reflect:!0,attribute:"expanded"},hideOptionLabels:{type:Boolean,reflect:!0,attribute:"hide-option-labels"},hideSample:{type:Boolean,reflect:!0,attribute:"hide-sample"},label:{type:String},options:{type:Array},titleAsHtml:{type:Boolean,attribute:"title-as-html"},value:{type:String,reflect:!0},__activeDesc:{type:String},__options:{type:Array},__selectedOption:{type:Object}}}static get tag(){return"simple-picker"}constructor(){super(),import("../../@polymer/iron-icon/iron-icon.js"),import("../../@polymer/iron-icons/iron-icons.js"),import("./lib/simple-picker-option.js"),this.tag=SimplePicker.tag,this.allowNull=!1,this.alignRight=!1,this.ariaLabelledby=null,this.blockLabel=!1,this.disabled=!1,this.expanded=!1,this.hideOptionLabels=!1,this.hideSample=!1,this.label=null,this.__options=[[]],this.options=[[{icon:null,style:null,alt:null,value:null}]],this.titleAsHtml=!1,this.value=null,this.__activeDesc="option-0-0",this.__hasLabel=!0,this.__selectedOption={},this.addEventListener("blur",(function(e){this.expanded=!1}));let e=SimplePicker.properties;for(let i in e)e.hasOwnProperty(i)&&(this.hasAttribute(i)?this[i]=this.getAttribute(i):(i.reflect&&this.setAttribute(i,e[i].value),this[i]=e[i].value))}updated(e){e.forEach((e,i)=>{"value"===i&&this._valueChanged(this.value,e),"options"===i&&this._optionsChanged(this.value,e)}),this.dispatchEvent(new CustomEvent("changed",{detail:this}))}_getOption(e,i){if(void 0!==e&&null!=i){let t=i.split("-");return e[t[1]][t[2]]}return null}_goToOption(e,t){let o=i`
        option-${e}-${t}
      `,l=this.shadowRoot.querySelector("#"+o),s=this.shadowRoot.querySelector("#"+this.__activeDesc);null!==l&&(l.tabindex=0,l.focus(),s.tabindex=-1)}_handleListboxClick(e){this.dispatchEvent(new CustomEvent("click",{detail:this})),this._toggleListbox()}_handleListboxMousedown(e){this.dispatchEvent(new CustomEvent("mousedown",{detail:this}))}_handleListboxKeydown(e){this.dispatchEvent(new CustomEvent("keydown",{detail:this}));let i=this.__activeDesc.split("-"),t=parseInt(i[1]),o=parseInt(i[2]);if(32===e.keyCode)e.preventDefault(),this._toggleListbox();else if(this.expanded&&[9,35,36,38,40].includes(e.keyCode))if(e.preventDefault(),35===e.keyCode){let e=(this.options||[]).length-1,i=this.options[e].length-1;this._goToOption(e,i)}else 36===e.keyCode?this._goToOption(0,0):38===e.keyCode?o>0?this._goToOption(t,o-1):t>0&&this._goToOption(t-1,this.options[t-1].length-1):40===e.keyCode&&(o<this.options[t].length-1?this._goToOption(t,o+1):t<(this.options||[]).length-1&&this._goToOption(t+1,[0]))}_handleOptionFocus(e){this._setActiveOption(e.detail.id)}_setActiveOption(e){this.__activeDesc=e,this.dispatchEvent(new CustomEvent("option-focus",{detail:this}))}_valueChanged(e,i){this._setSelectedOption(e,i),this.dispatchEvent(new CustomEvent("value-changed",{detail:this}))}_optionsChanged(e,i){this._setSelectedOption(e,i)}_setSelectedOption(e,i){let t=!this.allowNull&&(this.options||[]).length>0&&this.options[0].length>0?this.options[0][0].value:null;if(this.options){this.__options="string"==typeof this.options?JSON.parse(this.options):this.options.slice(),this.__activeDesc=this.allowNull?"option-0-0":null;for(var o=0;o<this.__options.length;o++)for(var l=0;l<this.__options[o].length;l++)null!==this.value&&null===this.__activeDesc&&(this.__activeDesc=`option-${o}-${l}`),`${this.__options[o][l].value}`===`${this.value}`&&(this.__activeDesc=`option-${o}-${l}`,t=this.__options[o][l])}null===t&&(this.value=null),this.__selectedOption=t,this.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:this}))}_toggleListbox(e=!this.expanded){if(this.disabled)return;let i=this.shadowRoot.querySelector("#"+this.__activeDesc);this.expanded=e,e?(null!==i&&i.focus(),this.dispatchEvent(new CustomEvent("expand",{detail:this}))):(null!==i&&(this.value=i.getAttribute("value")),this.dispatchEvent(new CustomEvent("collapse",{detail:this})))}setOptions(e){this.set("options",[[]]),this.set("options",e)}disconnectedCallback(){this.removeEventListener("blur",(function(e){this.expanded=!1})),super.disconnectedCallback()}}window.customElements.define(SimplePicker.tag,SimplePicker);export{SimplePicker};