import{html as e,css as t}from"../../lit-element/lit-element.js";import{SchemaBehaviors as s}from"../schema-behaviors/schema-behaviors.js";import{SimpleColors as i}from"../simple-colors/simple-colors.js";import"../simple-icon/simple-icon.js";import"../simple-icon/lib/simple-icons.js";import"../simple-fields/lib/simple-fields-field.js";import{SimpleToastStore as r}from"../simple-toast/simple-toast.js";class MultipleChoice extends(s(i)){static get styles(){return[...super.styles,t`
        :host {
          display: block;
          padding: 16px 16px 54px 16px;
          color: var(--simple-colors-default-theme-grey-12);
          --simple-fields-field-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-ink-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-checked-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checked-ink-color: var(
            --simple-colors-default-theme-accent-8
          );
          --simple-fields-field-checkmark-color: var(
            --simple-colors-default-theme-grey-1
          );
          --simple-fields-field-label-color: var(
            --simple-colors-default-theme-grey-12
          );
          --simple-fields-field-error-color: var(
            --simple-colors-default-theme-red-8
          );
        }
        :host([accent-color="grey"]),
        :host([accent-color="red"]),
        :host([accent-color="green"]) {
          --simple-fields-field-checked-color: var(
            --simple-colors-default-theme-blue-8
          );
          --simple-fields-field-checked-ink-color: var(
            --simple-colors-default-theme-blue-8
          );
        }
        :host #check {
          background-color: var(--simple-colors-default-theme-accent-8);
          color: var(--simple-colors-default-theme-grey-1);
        }
        :host #check:hover {
          background-color: var(--simple-colors-default-theme-accent-9);
        }
        :host([accent-color="red"]) #check,
        :host([accent-color="green"]) #check {
          background-color: var(--simple-colors-default-theme-blue-8);
          color: var(--simple-colors-default-theme-grey-1);
        }
        :host([accent-color="red"]) #check:hover,
        :host([accent-color="green"]) #check:hover {
          background-color: var(--simple-colors-default-theme-blue-9);
        }
        :host([accent-color="grey"]) #check,
        :host button {
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
        }
        :host([accent-color="grey"]) #check:hover,
        :host button:hover {
          cursor: pointer;
          background-color: var(--simple-colors-default-theme-grey-2);
          color: var(--simple-colors-default-theme-grey-12);
        }
        .red {
          background-color: var(--simple-colors-default-theme-red-8);
        }
        .green {
          background-color: var(--simple-colors-default-theme-green-8);
        }
        h3 {
          margin: 8px;
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          padding: 8px;
        }
        simple-fields-field {
          padding: 8px;
        }
        simple-icon {
          display: inline-flex;
        }
      `]}static get tag(){return"multiple-choice"}constructor(){super(),this.randomize=!1,this.hideButtons=!1,this.title="",this.disabled=!1,this.singleOption=!1,this.checkLabel="Check answer",this.resetLabel="Reset",this.hideTitle=!1,this.question="",this.answers=[],this.displayedAnswers=[],this.correctText="Great job!",this.correctIcon="icons:thumb-up",this.incorrectText="Better luck next time!",this.incorrectIcon="icons:thumb-down",this.quizName="default"}updated(e){super.updated&&super.updated(e),e.forEach((e,t)=>{if(["answers","displayedAnswers"].includes(t)){let e=t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()+"-changed";this.dispatchEvent(new CustomEvent(e,{detail:{value:this[t]}}))}["answers","randomize"].includes(t)&&(this.displayedAnswers=[...this._computeDisplayedAnswers(this.answers,this.randomize)])})}render(){return e`
      <confetti-container id="confetti">
        <meta property="oer:assessing" content="${this.relatedResource}" />
        ${this.hideTitle?"":e` <h3><span property="oer:name">${this.title}</span></h3> `}
        <div>${this.question}</div>
        ${this.singleOption?e`
              ${this.displayedAnswers.map((t,s)=>e`
                  <simple-fields-field
                    ?disabled="${this.disabled}"
                    property="oer:answer"
                    type="radio"
                    name="${s}"
                    .value="${t.userGuess}"
                    @value-changed="${this.checkedEvent}"
                    label="${t.label?t.label:""}"
                  ></simple-fields-field>
                `)}
            `:e`
              <ul>
                ${this.displayedAnswers.map((t,s)=>e`
                    <li>
                      <simple-fields-field
                        ?disabled="${this.disabled}"
                        property="oer:answer"
                        name="${s}"
                        type="checkbox"
                        label="${t.label?t.label:""}"
                        .value="${t.userGuess}"
                        @value-changed="${this.checkedEvent}"
                      ></simple-fields-field>
                    </li>
                  `)}
              </ul>
            `}
        ${this.hideButtons?"":e`
              <div id="buttons">
                <button
                  id="check"
                  ?disabled="${this.disabled}"
                  @click="${this._verifyAnswers}"
                >
                  ${this.checkLabel}
                </button>
                <button
                  id="reset"
                  ?disabled="${this.disabled}"
                  @click="${this.resetAnswers}"
                >
                  ${this.resetLabel}
                </button>
              </div>
            `}
      </confetti-container>
    `}checkedEvent(e){let t=this.displayedAnswers;t[e.target.name].userGuess=e.detail.value,this.displayedAnswers=[...t]}static get properties(){return{...super.properties,title:{type:String},disabled:{type:Boolean},singleOption:{type:Boolean,attribute:"single-option"},checkLabel:{type:String,attribute:"check-label"},resetLabel:{type:String,attribute:"reset-label"},relatedResource:{type:String,attribute:"related-resource"},hideTitle:{type:Boolean,attribute:"hide-title"},question:{type:String},answers:{type:Array},displayedAnswers:{type:Array},correctText:{type:String,attribute:"correct-text"},incorrectText:{type:String,attribute:"incorrect-text"},correctIcon:{type:String,attribute:"correct-icon"},incorrectIcon:{type:String,attribute:"incorrect-icon"},quizName:{type:String,attribute:"quiz-name"},randomize:{type:Boolean,reflect:!0},hideButtons:{type:Boolean,attribute:"hide-buttons"},__toastText:{type:String},__toastColor:{type:String},__toastIcon:{type:String}}}resetAnswers(e){r.hide(),this.displayedAnswers=[];const t=this.answers;this.answers.forEach(e=>{e.userGuess=!1}),this.answers=[...t]}checkAnswers(){let e=!0;for(var t in this.displayedAnswers)0!=e&&this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess?e=!0:(this.displayedAnswers[t].correct&&!this.displayedAnswers[t].userGuess||!this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess)&&(e=!1);return e}_verifyAnswers(e){r.hide();let t=this.checkAnswers();t?(this.__toastColor="green",this.__toastIcon=this.correctIcon,this.__toastText=this.correctText,import("./lib/confetti-container.js").then(e=>{setTimeout(()=>{this.shadowRoot.querySelector("#confetti").setAttribute("popped","")},0)})):(this.__toastColor="red",this.__toastIcon=this.incorrectIcon,this.__toastText=this.incorrectText);let s=document.createElement("simple-icon");s.icon=this.__toastIcon,s.style.marginLeft="16px",s.accentColor=this.__toastColor,s.dark=!0,r.showSimpleToast({detail:{duration:3e3,text:this.__toastText,slot:s,accentColor:this.__toastColor}});let i={activityDisplay:"answered",objectName:this.quizName,resultSuccess:t};this.dispatchEvent(new CustomEvent("user-engagement",{bubbles:!0,composed:!0,cancelable:!1,detail:i}))}_computeDisplayedAnswers(e,t){if(void 0!==e&&null!=e&&e.length>0&&t){let t=e;for(var s,i,r=t.length;0!==r;)i=Math.floor(Math.random()*r),s=t[r-=1],t[r]=t[i],t[i]=s;return t}return e}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!0,gizmo:{title:"Multiple choice",description:"Multiple choice self check",icon:"hax:multiple-choice",color:"purple",groups:["Instructional"],handles:[],meta:{author:"ELMS:LN"}},settings:{configure:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield"},{property:"hideTitle",title:"Hide title",description:"Whether or not to display the title",inputMethod:"boolean"},{property:"question",title:"Question",description:"Question for users to respond to.",inputMethod:"textfield"},{property:"randomize",title:"Randomize",description:"Randomize the answers dynamically",inputMethod:"boolean"},{property:"answers",title:"Answer set",description:"Answers in a multiple choice",inputMethod:"array",itemLabel:"label",properties:[{property:"correct",title:"Correct",description:"If this is correct or not",inputMethod:"boolean"},{property:"label",title:"Answer",description:"Possible answer to the question",inputMethod:"textfield",required:!0}]},{property:"correctText",title:"Correct feedback",description:"Feedback when they get it right",inputMethod:"textfield"},{property:"correctIcon",title:"Correct icon",description:"Icon to display when correct answer happens",inputMethod:"iconpicker",options:["icons:trending-flat","icons:launch","icons:pan-tool","icons:link","icons:check","icons:favorite","icons:thumb-up","icons:thumb-down","icons:send"]},{property:"incorrectText",title:"Incorrect feedback",description:"Feedback when they get it wrong",inputMethod:"textfield"},{property:"incorrectIcon",title:"Incorrect icon",description:"Icon to display when wrong answer happens",inputMethod:"iconpicker",options:["icons:trending-flat","icons:launch","icons:pan-tool","icons:link","icons:check","icons:favorite","icons:thumb-up","icons:thumb-down","icons:send"]},{property:"quizName",title:"Name of the quiz",description:"Quiz name passed in",inputMethod:"textfield"}],advanced:[{property:"checkLabel",title:"Check answers label",description:"Label for getting solution feedback",inputMethod:"textfield"},{property:"resetLabel",title:"Reset label",description:"label for the reset button",inputMethod:"textfield"}]},saveOptions:{unsetAttributes:["__utils","displayed-answers","displayedAnswers","colors"]}}}haxHooks(){return{preProcessNodeToContent:"haxpreProcessNodeToContent",preProcessInsertContent:"haxpreProcessInsertContent",inlineContextMenu:"haxinlineContextMenu"}}haxinlineContextMenu(e){e.ceButtons=[{icon:"icons:add",callback:"haxClickInlineAdd",label:"Add answer"},{icon:"icons:remove",callback:"haxClickInlineRemove",label:"Remove answer"}]}haxClickInlineAdd(e){this.resetAnswers();let t=this.answers;return t.push({label:"New answer",correct:!1}),this.answers=[...t],!0}haxClickInlineRemove(e){if(this.answers.length>0){this.resetAnswers();let e=this.answers;return e.pop(),this.answers=[...e],!0}}haxpreProcessNodeToContent(e){if(e.answers){for(var t=[],s=0;s<e.answers.length;s++){let i=e.answers[s];i.userGuess&&delete i.userGuess,t.push(i)}e.answers=[...t]}return e}haxpreProcessInsertContent(e){return e.properties.answers&&(e.properties.answers=e.properties.answers.map((function(e){return e.userGuess&&delete e.userGuess,e}))),e}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),this.setAttribute("typeof","oer:Assessment")}}window.customElements.define(MultipleChoice.tag,MultipleChoice);export{MultipleChoice};