import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../@polymer/polymer/lib/utils/render-status.js";import"../../@polymer/polymer/lib/elements/dom-repeat.js";import"../../@polymer/polymer/lib/elements/dom-if.js";import{SchemaBehaviors}from"../schema-behaviors/schema-behaviors.js";import"../../@polymer/paper-toast/paper-toast.js";import{SimpleColors}from"../simple-colors/simple-colors.js";class MultipleChoice extends(SchemaBehaviors(SimpleColors)){static get tag(){return"multiple-choice"}constructor(){super(),import("../../@polymer/iron-icons/iron-icons.js"),import("../../@polymer/iron-icon/iron-icon.js"),import("../../@polymer/paper-button/paper-button.js")}static get template(){return html`
      <style include="simple-colors-shared-styles">
        :host {
          display: block;
          padding: 16px 16px 54px 16px;
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
          --paper-checkbox-unchecked-color: var(
            --simple-colors-default-theme-grey-12
          );
          --paper-checkbox-unchecked-ink-color: var(
            --simple-colors-default-theme-grey-12
          );
          --paper-checkbox-checked-color: var(
            --simple-colors-default-theme-accent-8
          );
          --paper-checkbox-checked-ink-color: var(
            --simple-colors-default-theme-accent-8
          );
          --paper-checkbox-checkmark-color: var(
            --simple-colors-default-theme-grey-1
          );
          --paper-checkbox-label-color: var(
            --simple-colors-default-theme-grey-12
          );
          --paper-checkbox-error-color: var(
            --simple-colors-default-theme-red-8
          );
        }
        :host([accent-color="grey"]),
        :host([accent-color="red"]),
        :host([accent-color="green"]) {
          --paper-checkbox-checked-color: var(
            --simple-colors-default-theme-blue-8
          );
          --paper-checkbox-checked-ink-color: var(
            --simple-colors-default-theme-blue-8
          );
        }
        :host #check {
          background-color: var(--simple-colors-default-theme-accent-8);
          color: var(--simple-colors-default-theme-grey-1);
        }
        :host #check:hover {
          background-color: var(--simple-colors-default-theme-accent-9);
        }
        :host([accent-color="red"]) #check,
        :host([accent-color="green"]) #check {
          background-color: var(--simple-colors-default-theme-blue-8);
          color: var(--simple-colors-default-theme-grey-1);
        }
        :host([accent-color="red"]) #check:hover,
        :host([accent-color="green"]) #check:hover {
          background-color: var(--simple-colors-default-theme-blue-9);
        }
        :host([accent-color="grey"]) #check,
        :host paper-button {
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
        }
        :host([accent-color="grey"]) #check:hover,
        :host paper-button:hover {
          cursor: pointer;
          background-color: var(--simple-colors-default-theme-grey-2);
          color: var(--simple-colors-default-theme-grey-12);
        }
        .red {
          background-color: var(--simple-colors-default-theme-red-8);
        }
        .green {
          background-color: var(--simple-colors-default-theme-green-8);
        }
        h3 {
          margin: 8px;
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          padding: 8px;
        }
        paper-radio-button {
          padding: 8px;
          display: block;
        }
        paper-checkbox {
          padding: 8px;
        }
        iron-icon {
          display: inline-flex;
        }
      </style>
      <meta property="oer:assessing" content\$="[[relatedResource]]" />
      <h3 hidden\$="[[hideTitle]]">
        <span property="oer:name">[[title]]</span>
      </h3>
      <div>[[question]]</div>
      <template is="dom-if" if="[[singleOption]]" restamp>
        <paper-radio-group>
          <template
            is="dom-repeat"
            items="[[displayedAnswers]]"
            as="answer"
            mutable-data
          >
            <paper-radio-button
              disabled\$="[[disabled]]"
              property="oer:answer"
              name$="[[index]]"
              checked="{{answer.userGuess}}"
              >[[answer.label]]</paper-radio-button
            >
          </template>
        </paper-radio-group>
      </template>
      <template is="dom-if" if="[[!singleOption]]" restamp>
        <ul>
          <template
            is="dom-repeat"
            items="[[displayedAnswers]]"
            as="answer"
            mutable-data
          >
            <li>
              <paper-checkbox
                disabled\$="[[disabled]]"
                property="oer:answer"
                checked="{{answer.userGuess}}"
                >[[answer.label]]</paper-checkbox
              >
            </li>
          </template>
        </ul>
      </template>
      <div id="buttons" hidden\$="[[hideButtons]]">
        <paper-button
          id="check"
          disabled\$="[[disabled]]"
          raised
          on-click="_verifyAnswers"
          >[[checkLabel]]</paper-button
        >
        <paper-button
          id="reset"
          disabled\$="[[disabled]]"
          raised
          on-click="resetAnswers"
          >[[resetLabel]]</paper-button
        >
      </div>
      <paper-toast
        id="toast"
        scroll-action="cancel"
        duration="6000"
        position-target="[[positionTarget]]"
        class\$="fit-bottom [[__toastColor]]"
      >
        [[__toastText]]
        <iron-icon icon="[[__toastIcon]]" style="margin-left:16px;"></iron-icon>
      </paper-toast>
    `}static get properties(){let props={title:{type:String,value:""},positionTarget:{type:Object},disabled:{type:Boolean,value:!1},singleOption:{type:Boolean,value:!1},checkLabel:{type:String,value:"Check answer"},resetLabel:{type:String,value:"Reset"},relatedResource:{type:String},hideTitle:{type:Boolean,value:!1},question:{type:String,value:""},answers:{type:Array,value:[],notify:!0},displayedAnswers:{type:Array,computed:"_computeDisplayedAnswers(answers, randomize)",observer:"_valueChanged",notify:!0},correctText:{type:String,value:"Great job!"},incorrectText:{type:String,value:"Better luck next time!"},quizName:{type:String,value:"Default Quiz"},randomize:{type:Boolean,value:!1,reflectToAttribute:!0},hideButtons:{type:Boolean,value:!1}};return super.properties&&(props=Object.assign(props,super.properties)),props}_valueChanged(e){for(var i in e)for(var j in e[i])this.notifyPath("displayedAnswers."+i+"."+j)}resetAnswers(e){for(var i in this.$.toast.hide(),this.displayedAnswers)this.displayedAnswers[i].userGuess&&(this.displayedAnswers[i].userGuess=!1);setTimeout(()=>{const answers=this.answers;this.set("answers",[]),this.set("answers",answers)},100)}checkAnswers(){let gotRight=!0;for(var i in this.displayedAnswers)0!=gotRight&&this.displayedAnswers[i].correct&&this.displayedAnswers[i].userGuess?gotRight=!0:this.displayedAnswers[i].correct&&!this.displayedAnswers[i].userGuess?gotRight=!1:!this.displayedAnswers[i].correct&&this.displayedAnswers[i].userGuess&&(gotRight=!1);return gotRight}_verifyAnswers(e){this.$.toast.hide();let gotRight=this.checkAnswers();gotRight?(this.__toastColor="green",this.__toastIcon="thumb-up",this.__toastText=this.correctText):(this.__toastColor="red",this.__toastIcon="thumb-down",this.__toastText=this.incorrectText),this.$.toast.show();let eventData={activityDisplay:"answered",objectName:this.quizName,resultSuccess:gotRight};this.dispatchEvent(new CustomEvent("user-engagement",{bubbles:!0,composed:!0,cancelable:!1,detail:eventData}))}_computeDisplayedAnswers(answers,randomize){if(void 0!==answers&&null!=answers&&answers.length>0&&randomize){let random=answers;for(var temporaryValue,randomIndex,currentIndex=random.length;0!==currentIndex;)randomIndex=Math.floor(Math.random()*currentIndex),temporaryValue=random[currentIndex-=1],random[currentIndex]=random[randomIndex],random[randomIndex]=temporaryValue;return random}return answers}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Multiple choice",description:"Multiple choice self check",icon:"icons:list",color:"purple",groups:["Instructional"],handles:[],meta:{author:"LRNWebComponents"}},settings:{quick:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield",icon:"editor:title"},{property:"question",title:"Question",description:"Question for users to respond to.",inputMethod:"textfield",icon:"icons:help"}],configure:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield"},{property:"hideTitle",title:"Hide title",description:"Whether or not to display the title",inputMethod:"boolean"},{property:"question",title:"Question",description:"Question for users to respond to.",inputMethod:"textfield"},{property:"randomize",title:"Randomize",description:"Randomize the answers dynamically",inputMethod:"boolean"},{property:"answers",title:"Answer set",description:"Answers in a multiple choice",inputMethod:"array",itemLabel:"label",properties:[{property:"correct",title:"Correct",description:"If this is correct or not",inputMethod:"boolean"},{property:"label",title:"Answer",description:"Possible answer to the question",inputMethod:"textfield",required:!0}]},{property:"correctText",title:"Correct feedback",description:"Feedback when they get it right",inputMethod:"textfield"},{property:"incorrectText",title:"Incorrect feedback",description:"Feedback when they get it wrong",inputMethod:"textfield"},{property:"quizName",title:"Name of the quiz",description:"Quiz name passed in",inputMethod:"textfield"}],advanced:[{property:"checkLabel",title:"Check answers label",description:"Label for getting solution feedback",inputMethod:"textfield"},{property:"resetLabel",title:"Reset label",description:"label for the reset button",inputMethod:"textfield"}]},saveOptions:{unsetAttributes:["__utils","displayed-answers","displayedAnswers"]}}}preProcessHaxInsertContent(detail){return detail.properties.answers=detail.properties.answers.map(function(val){return val.userGuess&&delete val.userGuess,val}),detail}connectedCallback(){super.connectedCallback(),this.$.positionTarget&&(this.positionTarget=this.$.positionTarget),this.singleOption?(import("../../@polymer/paper-radio-group/paper-radio-group.js"),import("../../@polymer/paper-radio-button/paper-radio-button.js")):import("../../@polymer/paper-checkbox/paper-checkbox.js"),this.setAttribute("typeof","oer:Assessment"),afterNextRender(this,function(){this.$.toast.fitInto=this})}}window.customElements.define(MultipleChoice.tag,MultipleChoice);export{MultipleChoice};