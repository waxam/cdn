import{html as e,css as t}from"../../lit-element/lit-element.js";import{SchemaBehaviors as r}from"../schema-behaviors/schema-behaviors.js";import{SimpleColors as o}from"../simple-colors/simple-colors.js";class MultipleChoice extends(r(o)){static get styles(){return[...super.styles,t`
        :host {
          display: block;
          padding: 16px 16px 54px 16px;
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
          --paper-checkbox-unchecked-color: var(
            --simple-colors-default-theme-grey-12
          );
          --paper-checkbox-unchecked-ink-color: var(
            --simple-colors-default-theme-grey-12
          );
          --paper-checkbox-checked-color: var(
            --simple-colors-default-theme-accent-8
          );
          --paper-checkbox-checked-ink-color: var(
            --simple-colors-default-theme-accent-8
          );
          --paper-checkbox-checkmark-color: var(
            --simple-colors-default-theme-grey-1
          );
          --paper-checkbox-label-color: var(
            --simple-colors-default-theme-grey-12
          );
          --paper-checkbox-error-color: var(
            --simple-colors-default-theme-red-8
          );
        }
        :host([accent-color="grey"]),
        :host([accent-color="red"]),
        :host([accent-color="green"]) {
          --paper-checkbox-checked-color: var(
            --simple-colors-default-theme-blue-8
          );
          --paper-checkbox-checked-ink-color: var(
            --simple-colors-default-theme-blue-8
          );
        }
        :host #check {
          background-color: var(--simple-colors-default-theme-accent-8);
          color: var(--simple-colors-default-theme-grey-1);
        }
        :host #check:hover {
          background-color: var(--simple-colors-default-theme-accent-9);
        }
        :host([accent-color="red"]) #check,
        :host([accent-color="green"]) #check {
          background-color: var(--simple-colors-default-theme-blue-8);
          color: var(--simple-colors-default-theme-grey-1);
        }
        :host([accent-color="red"]) #check:hover,
        :host([accent-color="green"]) #check:hover {
          background-color: var(--simple-colors-default-theme-blue-9);
        }
        :host([accent-color="grey"]) #check,
        :host paper-button {
          background-color: var(--simple-colors-default-theme-grey-1);
          color: var(--simple-colors-default-theme-grey-12);
        }
        :host([accent-color="grey"]) #check:hover,
        :host paper-button:hover {
          cursor: pointer;
          background-color: var(--simple-colors-default-theme-grey-2);
          color: var(--simple-colors-default-theme-grey-12);
        }
        .red {
          background-color: var(--simple-colors-default-theme-red-8);
        }
        .green {
          background-color: var(--simple-colors-default-theme-green-8);
        }
        h3 {
          margin: 8px;
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          padding: 8px;
        }
        paper-radio-button {
          padding: 8px;
          display: block;
        }
        paper-checkbox {
          padding: 8px;
        }
        iron-icon {
          display: inline-flex;
        }
      `]}static get tag(){return"multiple-choice"}constructor(){super(),import("../../@polymer/paper-toast/paper-toast.js"),import("../../@polymer/iron-icons/iron-icons.js"),import("../../@polymer/iron-icon/iron-icon.js"),import("../../@polymer/paper-button/paper-button.js"),this.randomize=!1,this.hideButtons=!1,this.title="",this.disabled=!1,this.singleOption=!1,this.checkLabel="Check answer",this.resetLabel="Reset",this.hideTitle=!1,this.question="",this.answers=[],this.displayedAnswers=[],this.correctText="Great job!",this.correctIcon="icons:thumb-up",this.incorrectText="Better luck next time!",this.incorrectIcon="icons:thumb-down",this.quizName="default"}updated(e){super.updated&&super.updated(e),e.forEach((e,t)=>{if(["answers","displayedAnswers"].includes(t)){let e=`${t.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}-changed`;this.dispatchEvent(new CustomEvent(e,{detail:{value:this[t]}}))}["answers","randomize"].includes(t)&&(this.displayedAnswers=[...this._computeDisplayedAnswers(this.answers,this.randomize)]),"singleOption"==t&&this.singleOptionChanged(this[t])})}singleOptionChanged(e){e?(import("../../@polymer/paper-radio-group/paper-radio-group.js"),import("../../@polymer/paper-radio-button/paper-radio-button.js")):import("../../@polymer/paper-checkbox/paper-checkbox.js")}render(){return e`
      <meta property="oer:assessing" content="${this.relatedResource}" />
      ${this.hideTitle?"":e`
            <h3><span property="oer:name">${this.title}</span></h3>
          `}
      <div>${this.question}</div>
      ${this.singleOption?e`
            <paper-radio-group>
              ${this.displayedAnswers.map((t,r)=>e`
                  <paper-radio-button
                    ?disabled="${this.disabled}"
                    property="oer:answer"
                    name="${r}"
                    ?checked="${t.userGuess}"
                    @checked-changed="${this.checkedEvent}"
                    >${t.label}</paper-radio-button
                  >
                `)}
            </paper-radio-group>
          `:e`
            <ul>
              ${this.displayedAnswers.map((t,r)=>e`
                  <li>
                    <paper-checkbox
                      ?disabled="${this.disabled}"
                      property="oer:answer"
                      name="${r}"
                      ?checked="${t.userGuess}"
                      @checked-changed="${this.checkedEvent}"
                      >${t.label}</paper-checkbox
                    >
                  </li>
                `)}
            </ul>
          `}
      ${this.hideButtons?"":e`
            <div id="buttons">
              <paper-button
                id="check"
                ?disabled="${this.disabled}"
                raised
                @click="${this._verifyAnswers}"
                >${this.checkLabel}</paper-button
              >
              <paper-button
                id="reset"
                ?disabled="${this.disabled}"
                raised
                @click="${this.resetAnswers}"
                >${this.resetLabel}</paper-button
              >
            </div>
          `}
      <paper-toast
        id="toast"
        scroll-action="cancel"
        duration="6000"
        position-target="${this.positionTarget}"
        class="fit-bottom ${this.__toastColor}"
      >
        ${this.__toastText}
        <iron-icon
          icon="${this.__toastIcon}"
          style="margin-left:16px;"
        ></iron-icon>
      </paper-toast>
    `}checkedEvent(e){let t=this.displayedAnswers;t[e.target.name].userGuess=e.detail.value,this.displayedAnswers=[...t]}static get properties(){return{...super.properties,title:{type:String},positionTarget:{type:Object},disabled:{type:Boolean},singleOption:{type:Boolean,attribute:"single-option"},checkLabel:{type:String,attribute:"check-label"},resetLabel:{type:String,attribute:"reset-label"},relatedResource:{type:String,attribute:"related-resource"},hideTitle:{type:Boolean,attribute:"hide-title"},question:{type:String},answers:{type:Array},displayedAnswers:{type:Array},correctText:{type:String,attribute:"correct-text"},incorrectText:{type:String,attribute:"incorrect-text"},correctIcon:{type:String,attribute:"correct-icon"},incorrectIcon:{type:String,attribute:"incorrect-icon"},quizName:{type:String,attribute:"quiz-name"},randomize:{type:Boolean,reflect:!0},hideButtons:{type:Boolean,attribute:"hide-buttons"},__toastText:{type:String},__toastColor:{type:String},__toastIcon:{type:String}}}resetAnswers(e){this.shadowRoot.querySelector("#toast").hide(),this.displayedAnswers=[];const t=this.answers;this.answers.forEach(e=>{e.userGuess=!1}),this.answers=[...t]}checkAnswers(){let e=!0;for(var t in this.displayedAnswers)0!=e&&this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess?e=!0:this.displayedAnswers[t].correct&&!this.displayedAnswers[t].userGuess?e=!1:!this.displayedAnswers[t].correct&&this.displayedAnswers[t].userGuess&&(e=!1);return e}_verifyAnswers(e){this.shadowRoot.querySelector("#toast").hide();let t=this.checkAnswers();t?(this.__toastColor="green",this.__toastIcon=this.correctIcon,this.__toastText=this.correctText):(this.__toastColor="red",this.__toastIcon=this.incorrectIcon,this.__toastText=this.incorrectText),this.shadowRoot.querySelector("#toast").show();let r={activityDisplay:"answered",objectName:this.quizName,resultSuccess:t};this.dispatchEvent(new CustomEvent("user-engagement",{bubbles:!0,composed:!0,cancelable:!1,detail:r}))}_computeDisplayedAnswers(e,t){if(void 0!==e&&null!=e&&e.length>0&&t){let t=e;for(var r,o,s=t.length;0!==s;)o=Math.floor(Math.random()*s),r=t[s-=1],t[s]=t[o],t[o]=r;return t}return e}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Multiple choice",description:"Multiple choice self check",icon:"hax:multiple-choice",color:"purple",groups:["Instructional"],handles:[],meta:{author:"ELMS:LN"}},settings:{quick:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield",icon:"editor:title"},{property:"question",title:"Question",description:"Question for users to respond to.",inputMethod:"textfield",icon:"icons:help"}],configure:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield"},{property:"hideTitle",title:"Hide title",description:"Whether or not to display the title",inputMethod:"boolean"},{property:"question",title:"Question",description:"Question for users to respond to.",inputMethod:"textfield"},{property:"randomize",title:"Randomize",description:"Randomize the answers dynamically",inputMethod:"boolean"},{property:"answers",title:"Answer set",description:"Answers in a multiple choice",inputMethod:"array",itemLabel:"label",properties:[{property:"correct",title:"Correct",description:"If this is correct or not",inputMethod:"boolean"},{property:"label",title:"Answer",description:"Possible answer to the question",inputMethod:"textfield",required:!0}]},{property:"correctText",title:"Correct feedback",description:"Feedback when they get it right",inputMethod:"textfield"},{property:"correctIcon",title:"Correct icon",description:"Icon to display when correct answer happens",inputMethod:"iconpicker",options:["icons:trending-flat","icons:launch","icons:pan-tool","icons:link","icons:check","icons:favorite","icons:thumb-up","icons:thumb-down","icons:send"]},{property:"incorrectText",title:"Incorrect feedback",description:"Feedback when they get it wrong",inputMethod:"textfield"},{property:"incorrectIcon",title:"Incorrect icon",description:"Icon to display when wrong answer happens",inputMethod:"iconpicker",options:["icons:trending-flat","icons:launch","icons:pan-tool","icons:link","icons:check","icons:favorite","icons:thumb-up","icons:thumb-down","icons:send"]},{property:"quizName",title:"Name of the quiz",description:"Quiz name passed in",inputMethod:"textfield"}],advanced:[{property:"checkLabel",title:"Check answers label",description:"Label for getting solution feedback",inputMethod:"textfield"},{property:"resetLabel",title:"Reset label",description:"label for the reset button",inputMethod:"textfield"}]},saveOptions:{unsetAttributes:["__utils","displayed-answers","displayedAnswers","colors"]}}}preProcessHaxNodeToContent(e){if(e.answers){for(var t=[],r=0;r<e.answers.length;r++){let o=e.answers[r];o.userGuess&&delete o.userGuess,t.push(o)}e.answers=[...t]}return e}preProcessHaxInsertContent(e){return e.properties.answers&&(e.properties.answers=e.properties.answers.map((function(e){return e.userGuess&&delete e.userGuess,e}))),e}firstUpdated(e){super.firstUpdated&&super.firstUpdated(e),this.shadowRoot.querySelector("#positionTarget")&&(this.positionTarget=this.shadowRoot.querySelector("#positionTarget")),this.setAttribute("typeof","oer:Assessment"),this.shadowRoot.querySelector("#toast").fitInto=this}}window.customElements.define(MultipleChoice.tag,MultipleChoice);export{MultipleChoice};