import{LitElement,html,css}from"../../lit-element/lit-element.js";import{SchemaBehaviors}from"../schema-behaviors/schema-behaviors.js";class CodeEditor extends(SchemaBehaviors(LitElement)){static get styles(){return[css`
        :host {
          display: block;
          padding: 16px;
          font-family: unset;
        }
        :host([hidden]) {
          display: none !important;
        }
        .code-pen-container:not([hidden]) {
          width: 100%;
          display: flex;
          background-color: var(--code-pen-button-color, #222222);
          color: white;
          height: 40px;
          justify-content: flex-end;
          align-items: center;
        }
        .code-pen-container span {
          display: inline-flex;
          line-height: 16px;
          font-size: 16px;
          padding: 12px;
        }
        code-pen-button {
          float: right;
          height: 40px;
        }
        label {
          color: var(--code-editor-label-color, #888);
          transition: all 0.5s;
        }

        :host([focused]) label {
          color: var(
            --code-editor-float-label-active-color,
            var(--code-editor-label-color, #000)
          );
        }

        #codeeditor {
          height: 100%;
          display: flex;
          border: var(--code-editor-code-border);
          border-radius: var(--code-editor-code-border-radius);
        }

        :host([focused]) #codeeditor {
          border: var(--code-editor-focus-code-border);
        }
      `]}constructor(){super(),this.showCodePen=!1,this.readOnly=!1,this.theme="vs-dark",this.language="javascript",this.fontSize=16,this.autofocus=!1,this.hideLineNumbers=!1,this.focused=!1,this.__libPath=decodeURIComponent(import.meta.url)+"/../../../monaco-editor/min/vs",import("./lib/monaco-element/monaco-element.js"),import("./lib/code-pen-button.js"),setTimeout(()=>{this.addEventListener("monaco-element-ready",this.editorReady.bind(this))},0)}render(){return html`
      <label for="codeeditor" ?hidden="${!this.title}">${this.title}</label>
      <monaco-element
        id="codeeditor"
        ?autofocus="${this.autofocus}"
        ?hide-line-numbers="${this.hideLineNumbers}"
        lib-path="${this.__libPath}"
        language="${this.language}"
        theme="${this.theme}"
        @value-changed="${this._editorDataChanged}"
        font-size="${this.fontSize}"
        ?read-only="${this.readOnly}"
        @code-editor-focus="${this._handleFocus}"
        @code-editor-blur="${this._handleBlur}"
      >
      </monaco-element>
      <div class="code-pen-container" ?hidden="${!this.showCodePen}">
        <span>Check it out on code pen: </span
        ><code-pen-button .data="${this.codePenData}"></code-pen-button>
      </div>
    `}static get tag(){return"code-editor"}static get properties(){return{...super.properties,title:{type:String},showCodePen:{type:Boolean,reflect:!0,attribute:"show-code-pen"},readOnly:{type:Boolean,reflect:!0,attribute:"read-only"},codePenData:{type:Object},editorValue:{type:String},value:{type:String},theme:{type:String},mode:{type:String},language:{type:String},fontSize:{type:Number,attribute:"font-size"},autofocus:{type:Boolean,reflect:!0},hideLineNumbers:{type:Boolean,attribute:"hide-line-numbers"},focused:{type:Boolean,reflect:!0}}}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"editorValue"==propName&&this._editorValueChanged(this[propName],oldValue),"mode"==propName&&this._modeChanged(this[propName],oldValue),"showCodePen"===propName&&this.dispatchEvent(new CustomEvent("show-code-pen-changed",{detail:{value:this[propName]}})),"value"===propName&&this.dispatchEvent(new CustomEvent("value-changed",{detail:{value:this[propName]}})),["title","value"].includes(propName)&&(this.codePenData=this._computeCodePenData(this.title,this.value))})}_computeCodePenData(title,editorValue){return{title:title,html:editorValue}}_handleFocus(e){this.focused=!0}_handleBlur(e){this.focused=!1}_modeChanged(newValue){this.language=this.mode}_editorDataChanged(e){this.value=e.detail}updateEditorValue(node){if(node){var content="",children=node;if("TEMPLATE"!==node.tagName){if(console.warn("code-editor works best with a template tag provided in light dom"),(children=this.childNodes).length>0)for(var j=0,len2=children.length;j<len2;j++)void 0!==children[j].tagName?content+=children[j].outerHTML:content+=children[j].textContent}else content=children.innerHTML;content&&(this.shadowRoot.querySelector("#codeeditor").value=content.trim())}}_editorValueChanged(newValue){newValue&&(this.shadowRoot.querySelector("#codeeditor").value=newValue)}preProcessHaxNodeToContent(clone){return clone.editorValue=null,clone.codePenData=null,clone.value=null,clone.removeAttribute("value"),clone.removeAttribute("code-pen-data"),clone}connectedCallback(){super.connectedCallback(),this._observer=new MutationObserver(mutations=>{mutations.forEach(mutation=>{mutation.addedNodes.length>0&&mutation.addedNodes.forEach(node=>{node.tagName&&this.updateEditorValue(node)}),mutation.removedNodes.length>0&&mutation.removedNodes.forEach(node=>{node.tagName&&this.updateEditorValue(node)})})}),this._observer.observe(this,{childList:!0})}disconnectedCallback(){this._observer&&(this._observer.disconnect(),this._observer=null),super.disconnectedCallback()}editorReady(e){this.editorValue&&(this.shadowRoot.querySelector("#codeeditor").value=this.editorValue)}}window.customElements.define(CodeEditor.tag,CodeEditor);export{CodeEditor};