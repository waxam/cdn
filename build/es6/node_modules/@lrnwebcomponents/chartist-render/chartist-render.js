import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import{pathFromUrl}from"../../@polymer/polymer/lib/utils/resolve-url.js";import"../es-global-bridge/es-global-bridge.js";import"./lib/chartist-render-shared-styles.js";export{ChartistRender};class ChartistRender extends PolymerElement{static get template(){return html`
      <style include="chartist-render-shared-styles">
        :host {
          display: block;
        }
      </style>
      <div id="chart" chart$="[[__chartId]]" class$="ct-chart [[scale]]"></div>
    `}static get properties(){return{id:{type:String,value:"chart"},type:{type:String,value:"bar"},scale:{type:String,observer:"makeChart"},chartTitle:{type:String,value:null,observer:"makeChart"},chartDesc:{type:String,value:"",observer:"makeChart"},data:{type:Object,value:null,observer:"makeChart"},options:{type:Object,value:null,observer:"makeChart"},responsiveOptions:{type:Array,value:[],observer:"makeChart"},showTable:{type:Boolean,value:!1,observer:"makeChart"}}}static get tag(){return"chartist-render"}connectedCallback(){super.connectedCallback();let location=`${pathFromUrl(decodeURIComponent(import.meta.url))}lib/chartist/dist/chartist.min.js`;window.addEventListener("es-bridge-chartistLib-loaded",this._chartistLoaded.bind(this)),window.ESGlobalBridge.requestAvailability(),window.ESGlobalBridge.instance.load("chartistLib",location)}disconnectedCallback(){window.removeEventListener("es-bridge-chartistLib-loaded",this._chartistLoaded.bind(this)),super.disconnectedCallback()}ready(){super.ready();window.dispatchEvent(new CustomEvent("chartist-render-ready",{detail:this})),"object"==typeof Chartist&&this._chartistLoaded.bind(this)}_chartistLoaded(){this.__chartistLoaded=!0,this.makeChart()}makeChart(){setTimeout(()=>{this.chart=this._renderChart()},100)}_renderChart(){let root=this,chart=null;return root.__chartId=root._getUniqueId("chartist-render-"),void 0!==root&&"object"==typeof Chartist&&null!==root.$.chart&&null!==root.data&&("bar"==root.type?(void 0!==root.responsiveOptions&&root.responsiveOptions.length>0&&root.responsiveOptions.forEach(option=>{void 0!==option[1]&&(option[1].axisX&&"noop"==option[1].axisX.labelInterpolationFnc&&(option[1].axisX.labelInterpolationFnc=Chartist.noop),option[1].axisY&&"noop"==option[1].axisY.labelInterpolationFnc&&(option[1].axisY.labelInterpolationFnc=Chartist.noop))}),chart=Chartist.Bar(this.$.chart,root.data,root.options,root.responsiveOptions)):"line"==root.type?chart=Chartist.Line(this.$.chart,root.data,root.options,root.responsiveOptions):"pie"==root.type&&(chart=Chartist.Pie(this.$.chart,root.data,root.options,root.responsiveOptions)),window.dispatchEvent(new CustomEvent("chartist-render-draw",{detail:chart})),chart.on("created",()=>{root.addA11yFeatures(chart.container.childNodes[0])})),chart}addA11yFeatures(svg){let desc=void 0!==this.data.labels&&null!==this.data.labels?this.chartDesc+this.makeA11yTable(svg):this.chartDesc;this._addA11yFeature(svg,"desc",desc),this._addA11yFeature(svg,"title",this.chartTitle),svg.setAttribute("aria-labelledby",this.__chartId+"-chart-title "+this.__chartId+"-chart-desc")}makeA11yTable(svg){let table=['<table summary="Each column is a series of data, and the first column is the data label.">',"<caption>"+(null!==this.chartTitle?this.chartTitle:"A "+this.type+" chart.")+"</caption>","<tbody>"];for(var i=0;i<this.data.labels.length;i++){if(table.push('<tr><th scope="row">'+this.data.labels[i]+"</th>"),"pie"==this.type)table.push("<td>"+this.data.series[i]+"</td>");else for(var j=0;j<this.data.series.length;j++)table.push("<td>"+this.data.series[j][i]+"</td>");table.push("</tr>")}return table.push("</tbody></table>"),table.join("")}_addA11yFeature(svg,tag,html){let el=document.createElement(tag),first=svg.childNodes[0];el.innerHTML=html,el.setAttribute("id",this.__chartId+"-chart-"+tag),svg.insertBefore(el,first)}_getUniqueId(prefix){return prefix+Date.now()}}window.customElements.define(ChartistRender.tag,ChartistRender);