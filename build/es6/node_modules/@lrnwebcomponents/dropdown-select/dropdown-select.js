import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../@polymer/polymer/lib/utils/render-status.js";import{dom}from"../../@polymer/polymer/lib/legacy/polymer.dom.js";class DropdownSelect extends PolymerElement{constructor(){super(),import("../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js"),import("../../@polymer/paper-item/paper-item.js"),import("../../@polymer/paper-listbox/paper-listbox.js")}static get template(){return html`
      <style>
        :host {
          display: block;
        }
        paper-listbox ::slotted(paper-item) {
          display: block;
          width: calc(100% - 32px);
          padding: 0 16px;
          min-height: 32px;
          vertical-align: text-top;
          line-height: 32px;
          @apply --dropdown-select-items;
        }
        paper-listbox paper-listbox {
          @apply --dropdown-listbox;
        }
      </style>
      <paper-dropdown-menu
        id="menu"
        allow-outside-scroll\$="[[allowOutsideScroll]]"
        always-float-label\$="[[alwaysFloatLabel]]"
        dynamic-align\$="[[dynamicAlign]]"
        error-message\$="[[errorMessage]]"
        horizontal-align\$="[[horizontalAlign]]"
        label\$="[[label]]"
        no-animations\$="[[noAnimations]]"
        no-label-float\$="[[noLabelFloat]]"
        on-selected-item-changed="_getSelectedValue"
        placeholder\$="[[placeholder]]"
        restore-focus-on-close\$="[[restoreFocusOnClose]]"
        vertical-align\$="[[verticalAlign]]"
        vertical-offset\$="[[verticalOffset]]"
      >
        <paper-listbox
          id="listbox"
          slot="dropdown-content"
          class="dropdown-content"
        >
          <slot id="content"></slot>
        </paper-listbox>
      </paper-dropdown-menu>
    `}static get tag(){return"dropdown-select"}connectedCallback(){super.connectedCallback(),afterNextRender(this,function(){this._valueChanged(this.value),this.addEventListener("paper-dropdown-open",this._onOpen.bind(this)),this.addEventListener("paper-dropdown-close",this._onClose.bind(this))})}disconnectedCallback(){this.removeEventListener("paper-dropdown-open",this._onOpen.bind(this)),this.removeEventListener("paper-dropdown-close",this._onClose.bind(this)),super.disconnectedCallback()}static get properties(){return{allowOutsideScroll:{type:Boolean,value:!1},alwaysFloatLabel:{type:Boolean,value:!1},dynamicAlign:{type:Boolean},errorMessage:{type:String},horizontalAlign:{type:String,value:"right"},label:{type:String,value:"Select an option."},noAnimations:{type:Boolean,value:!1},noLabelFloat:{type:Boolean,value:!1},opened:{type:Boolean,value:!1},placeholder:{type:String},restoreFocusOnClose:{type:Boolean,value:!0},selectedItem:{type:Object},selectedItemIndex:{type:Number,value:null},selectedItemLabel:{type:String,value:null},value:{type:String,value:null,notify:!0,reflectToAttribute:!0,observer:"_valueChanged"},verticalAlign:{type:String,value:"top"},verticalOffset:{type:Number}}}_getSelectedValue(e){null!==e.detail.value&&(this.value=e.detail.value.getAttribute("value"),this._setSelectedValues(),this.dispatchEvent(new CustomEvent("change",{bubbles:!0,cancelable:!0,composed:!0,detail:{value:this.value}})),this.dispatchEvent(new CustomEvent("dropdown-select-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:this})))}_onOpen(e){this.opened=!0}_onClose(e){this.opened=!1}_setSelectedValues(){this.selectedItem=this.shadowRoot.querySelector("#menu").selectedItem,this.selectedItemLabel=this.shadowRoot.querySelector("#menu").selectedItemLabel,this.selectedItemIndex=this.shadowRoot.querySelector("#listbox").selected}_valueChanged(newValue,oldValue){let children=dom(this).querySelectorAll("paper-item");if(null!=children)for(let i=0;i<children.length;i++)this.value===children[i].getAttribute("value")&&(this.shadowRoot.querySelector("#listbox").selected=i,this._setSelectedValues())}}window.customElements.define(DropdownSelect.tag,DropdownSelect);export{DropdownSelect};