import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{microTask}from"../../../@polymer/polymer/lib/utils/async.js";import"../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js";import{AppLocalizeBehavior}from"../../../@polymer/app-localize-behavior/app-localize-behavior.js";import{mixinBehaviors}from"../../../@polymer/polymer/lib/legacy/class.js";import"../../../@polymer/paper-button/paper-button.js";import"../../../@polymer/paper-input/paper-input.js";import"../../../@polymer/iron-icon/iron-icon.js";import"../../../@polymer/iron-icons/iron-icons.js";class EcoJsonSchemaFile extends(mixinBehaviors([AppLocalizeBehavior],PolymerElement)){static get tag(){return"eco-json-schema-file"}static get template(){return html`
      <style is="custom-style" include="iron-flex iron-flex-alignment">
        :host ([hidden]) {
          display: none;
        }
        paper-input {
          padding: 2px;
          --paper-input-container-label: {
            white-space: normal;
            position: static;
            font-size: 22px;
            color: #212121;
          }
        }

        :host {
          display: inline-block;
        }

        .enabled {
          border: 1px dashed #555;
          @apply --file-upload-upload-border-enabled;
        }

        .hover {
          opacity: 0.7;
          border: 1px dashed #111;
          @apply --file-upload-upload-border-hover;
        }

        #UploadBorder {
          vertical-align: middle;
          color: #555;
          padding: 20px;
          max-height: 300px;
          overflow-y: auto;
          display: inline-block;
          @apply --file-upload-upload-border;
        }

        #dropArea {
          text-align: center;
          @apply --file-upload-drop-area;
        }

        paper-button#button {
          margin-bottom: 20px;
          @apply --file-upload-button;
        }

        .file {
          padding: 10px 0px;
          @apply --file-upload-file;
        }

        .commands {
          float: right;
          @apply --file-upload-commands;
        }

        .commands iron-icon:not([icon="check-circle"]) {
          cursor: pointer;
          opacity: 0.9;
          @apply --file-upload-commands-faded;
        }

        .commands iron-icon:hover {
          opacity: 1;
          @apply --file-upload-commands-hovered;
        }

        [hidden] {
          display: none;
        }

        .error {
          color: #f40303;
          font-size: 11px;
          margin-top: 2px;
          @apply --file-upload-error;
        }

        .progress-bar {
          margin-top: 2px;
        }

        paper-progress {
          --paper-progress-active-color: #03a9f4;
        }

        paper-progress[error] {
          --paper-progress-active-color: #f40303;
        }
      </style>

      <div class="layout horizontal nowrap">
        <div>
          <paper-button
            id="button"
            on-click="_fileClick"
            alt="{{paperButtonAlt}}"
            raised=""
          >
            <iron-icon icon="editor:attach-file"></iron-icon
            >{{paperButtonTitle}}</paper-button
          >
          <div id="UploadBorder">
            <div id="dropArea" hidden\$="{{!_shownDropText}}">{{dropText}}</div>
            <template is="dom-repeat" items="{{files}}">
              <div class="file">
                <div class="name">
                  <span>{{item.name}}</span>
                  <div class="commands">
                    <iron-icon
                      icon="autorenew"
                      title="{{retryText}}"
                      on-click="_retryUpload"
                      hidden\$="{{!item.error}}"
                    ></iron-icon>
                    <iron-icon
                      icon="cancel"
                      title="{{removeText}}"
                      on-click="_cancelUpload"
                      hidden\$="{{item.complete}}"
                    ></iron-icon>
                    <iron-icon
                      icon="check-circle"
                      title="{{successText}}"
                      hidden\$="{{!item.complete}}"
                    ></iron-icon>
                  </div>
                </div>
                <div class="error" hidden\$="{{!item.error}}">
                  {{errorText}}
                </div>
              </div>
            </template>
          </div>
        </div>
        <input
          type="file"
          id="fileInput"
          on-change="_fileChange"
          hidden=""
          multiple="{{multi}}"
          accept="{{accept}}"
        />
      </div>
    `}static get properties(){return{language:{value:"en",notify:!0},resources:{value:()=>({}),notify:!0},schema:{type:Object,observer:"_schemaChanged"},value:{type:Object,notify:!0,value:()=>({}),observer:"_valueChanged"},target:{type:String,value:""},accept:{type:String,value:""},droppable:{type:Boolean,value:!1},dropText:{type:String,value:"Drop Files Here"},multi:{type:Boolean,value:!0},files:{type:Array,notify:!0,value:()=>[]},raised:{type:Boolean,value:!0},noink:{type:Boolean,value:!1},headers:{type:Object,value:{}},retryText:{type:String,value:"Retry Upload"},removeText:{type:String,value:"Remove"},successText:{type:String,value:"Success"},errorText:{type:String,value:"Error uploading file..."},_shownDropText:{type:Boolean,value:!1},additional:{type:Object,value:{}},fileDataName:{type:String,value:"file"},paperButtonAlt:{type:String,value:""},paperButtonTitle:{type:String,value:""}}}clear(){this.set("files",[]),this.shadowRoot.querySelector("#fileInput").value="",this._showDropText()}ready(){super.ready(),this.raised&&this.toggleAttribute("raised",!0,this.shadowRoot.querySelector("#button")),this.noink&&this.toggleAttribute("noink",!0,this.shadowRoot.querySelector("#button")),this.droppable&&(this._showDropText(),this.setupDrop())}setupDrop(){var uploadBorder=this.shadowRoot.querySelector("#UploadBorder");this.toggleClass("enabled",!0,uploadBorder),this.ondragover=function(e){e.stopPropagation(),this.toggleClass("hover",!0,uploadBorder);var effect=e.dataTransfer&&e.dataTransfer.dropEffect,effectAllowed=e.dataTransfer&&e.dataTransfer.effectAllowed;return"none"===effect&&"none"!==effectAllowed&&(e.dataTransfer.dropEffect="move"===effectAllowed?"move":"copy"),!1},this.ondragleave=function(){return this.toggleClass("hover",!1,uploadBorder),!1},this.ondrop=function(event){if(this.toggleClass("hover",!1,uploadBorder),event.preventDefault(),this.multi||0===this.files.length)for(var length=event.dataTransfer.files.length,i=0;i<length;i++){var file=event.dataTransfer.files[i],mimeType=""!==file.type?file.type.match(/^[^\/]*\//)[0]:null,fileType=file.name.match(/\.[^\.]*$/)[0];(""===this.accept||this.accept.indexOf(mimeType)>-1||this.accept.indexOf(fileType)>-1)&&(file.progress=0,file.error=!1,file.complete=!1,this.push("files",file),this.uploadFile(file))}}}_fileClick(){var elem=this.shadowRoot.querySelector("#fileInput");if(elem&&document.createEvent){var evt=document.createEvent("MouseEvents");evt.initEvent("click",!0,!1),elem.dispatchEvent(evt)}}_fileChange(e){for(var length=e.target.files.length,i=0;i<length;i++){var file=e.target.files[i];file.progress=0,file.error=!1,file.complete=!1,this.push("files",file),this.multi||0===this.files.length||(this.set("files",[]),this.set("value",{})),this.uploadFile(file)}}cancel(file){file&&(file.xhr&&file.xhr.abort(),this.splice("files",this.files.indexOf(file),1),this._showDropText())}_cancelUpload(e){this.cancel(e.model.__data__.item)}_retryUpload(e){e.model.set("item.error",!1),e.model.set("item.progress",0);var self=this;microTask.run(()=>{self.uploadFile(e.model.__data__.item)})}_showDropText(){this.set("_shownDropText",!this.files.length&&this.droppable)}uploadFile(file){if(file){this.dispatchEvent(new CustomEvent("before-upload",{bubbles:!0,cancelable:!0,composed:!0,detail:!0})),this._showDropText();this.files.indexOf(file);var self=this,reader=new FileReader;reader.addEventListener("load",(function(){var r=reader.result;self.set("value."+self.attributes.name.value+"."+self.files.indexOf(file),r)}),!1),self.value.hasOwnProperty(self.attributes.name.value)||this.set("value."+self.attributes.name.value,{}),reader.readAsDataURL(file)}}_valueChanged(){console.log("this.value: "+JSON.stringify(this.value))}_schemaChanged(){this.schema}_isSchemaValue(type){return this._isSchemaFile(type)}_isSchemaFile(type){return Array.isArray(type)?-1!==type.indexOf("file"):"file"===type}_isSchemaBoolean(type){return Array.isArray(type)?-1!==type.indexOf("boolean"):"boolean"===type}_isSchemaNumber(type){return Array.isArray(type)?-1!==type.indexOf("number")||-1!==type.indexOf("integer"):"number"===type||"integer"===type}_isSchemaString(type){return Array.isArray(type)?-1!==type.indexOf("string"):"string"===type}_isSchemaObject(type){return"object"===type}_isSchemaArray(type){return"array"===type}stringify(s){return JSON.stringify(s)}}window.customElements.define(EcoJsonSchemaFile.tag,EcoJsonSchemaFile);export{EcoJsonSchemaFile};