const gulp=require("gulp"),fs=require("fs"),path=require("path"),rename=(require("lodash"),require("gulp-rename")),replace=require("gulp-replace"),stripCssComments=require("strip-css-comments"),decomment=require("decomment"),sourcemaps=require("gulp-sourcemaps"),packageJson=require("./package.json");gulp.task("merge",()=>gulp.src("./src/"+packageJson.wcfactory.elementName+".js").pipe(replace(/\/\* REQUIRED FOR TOOLING DO NOT TOUCH \*\//g,(classStatement,character,jsFile)=>{let html=fs.readFileSync(path.join("./",packageJson.wcfactory.files.html)).toString().trim();html=decomment(html);let haxString="";if(packageJson.wcfactory.useHAX){haxString=`\n  // haxProperty definition\n  static get haxProperties() {\n    return ${fs.readFileSync(path.join("./",packageJson.wcfactory.files.hax))};\n  }`}let props="{}";props=fs.readFileSync(path.join("./",packageJson.wcfactory.files.properties));let cssResult="<style>";if(packageJson.wcfactory.useSass&&packageJson.wcfactory.files.scss){cssResult+=require("node-sass").renderSync({file:path.join("./",packageJson.wcfactory.files.scss)}).css}else packageJson.wcfactory.files.css&&(cssResult+=fs.readFileSync(path.join("./",packageJson.wcfactory.files.css)));return`\n  // render function\n  static get template() {\n    return html\`\n${cssResult=stripCssComments(cssResult+="</style>").trim()}\n${html}\`;\n  }\n${haxString}\n  // properties available to the custom element for data binding\n  static get properties() {\n    return ${props};\n  }`})).pipe(gulp.dest("./"))),gulp.task("build",()=>{return(0,require("child_process").spawn)("polymer",["build"]).on("close",function(code){console.log("child process exited with code "+code)})}),gulp.task("analyze",()=>{return(0,require("child_process").exec)("polymer analyze --input demo/index.html > analysis.json",function(error,stdout,stderr){null!==error&&console.log("exec error: "+error)})}),gulp.task("compile",()=>(gulp.src("./build/es6/"+packageJson.wcfactory.elementName+".js").pipe(rename({suffix:".es6"})).pipe(gulp.dest("./")),gulp.src("./build/es5-amd/"+packageJson.wcfactory.elementName+".js").pipe(rename({suffix:".amd"})).pipe(gulp.dest("./")),gulp.src("./"+packageJson.wcfactory.elementName+".js").pipe(replace(/^(import .*?)(['"]\.\.\/(?!\.\.\/).*)(\.js['"];)$/gm,"$1$2.umd$3")).pipe(rename({suffix:".umd"})).pipe(gulp.dest("./")))),gulp.task("watch",()=>gulp.watch("./src/*",gulp.series("merge","analyze"))),gulp.task("sourcemaps",()=>gulp.src("./"+packageJson.wcfactory.elementName+".es6.js").pipe(sourcemaps.init()).pipe(sourcemaps.write("./"))),gulp.task("dev",gulp.series("merge","analyze","watch")),gulp.task("default",gulp.series("merge","analyze","build","compile","sourcemaps"));