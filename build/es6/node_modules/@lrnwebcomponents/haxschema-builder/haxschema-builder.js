import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import{HAXWiring}from"../hax-body-behaviors/lib/HAXWiring.js";import"../json-editor/json-editor.js";import"../code-editor/code-editor.js";import"../../@vaadin/vaadin-split-layout/vaadin-split-layout.js";import"../../@polymer/paper-button/paper-button.js";import"../hax-body/lib/hax-schema-form.js";class HaxschemaBuilder extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }
        code-editor {
          height: 500px;
        }
      </style>
      <vaadin-split-layout>
        <div>
          <paper-button raised="" noink="">Add to configure</paper-button>
          <paper-button raised="" noink="">Add to advanced</paper-button>
          <code-editor
            id="code"
            on-value-changed="_editorDataChanged"
            language="json"
          ></code-editor>
          <json-editor
            id="json"
            label="JSON"
            value="{{haxSchema}}"
          ></json-editor>
        </div>
        <div>
          <hax-schema-form
            id="form"
            configure-schema="[[configureSchema]]"
            advanced-schema="[[advancedSchema]]"
            value="{{value}}"
          ></hax-schema-form>
        </div>
      </vaadin-split-layout>
    `}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Haxschema builder",description:"dynamically build and visualize HAXschema",icon:"icons:android",color:"green",groups:["Builder"],handles:[{type:"todo:read-the-docs-for-usage"}],meta:{author:"btopro",owner:"The Pennsylvania State University"}},settings:{quick:[{property:"source",description:"",inputMethod:"textfield",required:!0,icon:"icons:link",validationType:"url"}],configure:[{property:"haxSchema",description:"",inputMethod:"array",required:!1,icon:"icons:android"},{property:"source",description:"",inputMethod:"textfield",required:!0,icon:"icons:link",validationType:"url"}],advanced:[]}}}static get properties(){return{haxSchema:{name:"haxSchema",type:"String",notify:!0,observer:"_haxSchemaChanged"},configureSchema:{name:"configureSchema",type:"Object",value:{}},advancedSchema:{name:"advancedSchema",type:"Object",value:{}},source:{name:"source",type:"String"},value:{name:"value",type:"String"}}}static get tag(){return"haxschema-builder"}connectedCallback(){super.connectedCallback();this.HAXWiring=new HAXWiring;this.HAXWiring.setup(HaxschemaBuilder.haxProperties,HaxschemaBuilder.tag,this);if(!this.source){this.haxSchema=JSON.stringify(this.HAXWiring.prototypeHaxProperties(),null,2)}this.$.form.modeTab="advanced";setTimeout(()=>{this.$.form.modeTab="configure"},2e3)}_haxSchemaChanged(newValue){if(newValue){this.$.code.editorValue=newValue}}_editorDataChanged(e){this.haxSchema=e.detail.value;let hs=JSON.parse(this.haxSchema);for(var key in hs.settings){let schema=this.HAXWiring.getHaxJSONSchema(key,hs);this.set(key+"Schema",schema)}}}window.customElements.define(HaxschemaBuilder.tag,HaxschemaBuilder);export{HaxschemaBuilder};