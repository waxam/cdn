import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../../@polymer/polymer/lib/utils/render-status.js";import{dom}from"../../../@polymer/polymer/lib/legacy/polymer.dom.js";import{microTask}from"../../../@polymer/polymer/lib/utils/async.js";import"../../../@polymer/iron-ajax/iron-ajax.js";import"../../../@polymer/paper-spinner/paper-spinner.js";import{HAXWiring}from"../../hax-body-behaviors/lib/HAXWiring.js";import{wipeSlot}from"../../hax-body/lib/haxutils.js";/**
 * `cms-entity`
 * `Render and process a  / entity from a content management system.`
 */class CMSEntity extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: block;
          min-width: 112px;
          min-height: 112px;
          transition: 0.6s all ease;
          background-color: transparent;
        }
        paper-spinner {
          visibility: hidden;
          opacity: 0;
          height: 80px;
          width: 80px;
          padding: 16px;
        }
        #replacementcontent {
          visibility: visible;
          opacity: 1;
        }
        :host([loading]) {
          text-align: center;
        }
        :host([loading]) paper-spinner {
          visibility: visible;
          opacity: 1;
        }
        :host([loading]) #replacementcontent {
          opacity: 0;
          visibility: hidden;
        }
      </style>
      <iron-ajax
        id="entityrequest"
        method="GET"
        params="[[bodyData]]"
        url="[[entityEndPoint]]"
        handle-as="json"
        last-response="{{entityData}}"
      ></iron-ajax>
      <paper-spinner active="[[loading]]"></paper-spinner>
      <span id="replacementcontent"><slot></slot></span>
    `}static get tag(){return"cms-entity"}static get properties(){return{/**
       * Loading state
       */loading:{type:Boolean,reflectToAttribute:!0,value:!1},/**
       * Type of entity to load
       */entityType:{type:String,reflectToAttribute:!0},/**
       * ID of the item to load
       */entityId:{type:String,reflectToAttribute:!0},/**
       * Display mode of the entity
       */entityDisplayMode:{type:String,reflectToAttribute:!0},/**
       * entity end point updated, change the way we do processing.
       */entityEndPoint:{type:String},/**
       * Body data which is just entity with some encapsulation.
       */bodyData:{type:Object,computed:"_generateBodyData(entityType, entityId, entityDisplayMode)",observer:"_entityChanged"},/**
       * entity data from the end point.
       */entityData:{type:String,observer:"_handleEntityResponse"},/**
       * Prefix for the entity to be processed
       */entityPrefix:{type:String,observer:"["},/**
       * Suffix for the entity to be processed
       */entitySuffix:{type:String,observer:"]"}}}/**
   * Generate body data.
   */_generateBodyData(entityType,entityId,entityDisplayMode){if(null!==entityType&&""!==entityType&&null!==entityId&&""!==entityId){return{type:`${entityType}`,id:`${entityId}`,display_mode:`${entityDisplayMode}`}}}/**
   * Handle the response from the entity processing endpoint
   */_handleEntityResponse(newValue,oldValue){if(null!==newValue&&typeof newValue.content!==typeof void 0){// store the text and url callbacks
if(null!=document.getElementById("cmstokenidtolockonto")){document.getElementById("cmstokenidtolockonto").setAttribute("href",newValue.editEndpoint);document.getElementById("cmstokenidtolockonto").innerHTML=newValue.editText}// wipe our own slot here
wipeSlot(dom(this));// now inject the content we got
microTask.run(()=>{let frag=document.createElement("span");frag.innerHTML=newValue.content;let newNode=frag.cloneNode(!0);dom(this).appendChild(newNode);setTimeout(()=>{this.loading=!1},600)})}}/**
   * entity end point changed
   */_entityChanged(newValue,oldValue){// ensure we have something and are not loading currently
if(typeof newValue!==typeof void 0&&""!==newValue&&!this.loading){// support going from a null element to a real one
if(typeof this.entityEndPoint===typeof void 0&&typeof window.cmsentityEndPoint!==typeof void 0){this.entityEndPoint=window.cmsentityEndPoint}if(this.entityEndPoint){this.loading=!0;microTask.run(()=>{this.$.entityrequest.generateRequest()})}}}/**
   * Attached to the DOM, now fire.
   */connectedCallback(){super.connectedCallback();if(typeof this.entity!==typeof void 0&&null!==this.entity&&""!==this.entity){let slot=dom(this).getEffectiveChildNodes();// only kick off request if there's nothing in it
// if it has something in it that means we did some
// remote rendering ahead of time
if(0===slot.length&&!this.loading){// support for autoloading the entity data needed for the request from globals
if(typeof this.entityEndPoint===typeof void 0&&typeof window.cmsentityEndPoint!==typeof void 0){this.entityEndPoint=window.cmsentityEndPoint}if(this.entityEndPoint){this.loading=!0;microTask.run(()=>{this.$.entityrequest.generateRequest()})}}}afterNextRender(this,function(){this.HAXWiring=new HAXWiring;this.HAXWiring.setup(CMSEntity.haxProperties,CMSEntity.tag,this)})}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"CMS Entity",description:"CMS entity rendered on the backend",icon:"places:spa",color:"light-blue",groups:["CMS"],handles:[{type:"cmsentity",entity:"entity"}],meta:{author:"LRNWebComponents"}},settings:{quick:[],configure:[{property:"entityType",title:"Type",description:"type from our CMS",inputMethod:"select",options:{node:"Node",user:"User",file:"File"},icon:"editor:title"},{property:"entityID",title:"ID",description:"id from our CMS",inputMethod:"textfield",icon:"editor:title"},{property:"entityDisplayMode",title:"Display mode",description:"display mode from our CMS",inputMethod:"textfield",icon:"editor:title"}],advanced:[]},saveOptions:{wipeSlot:!0,unsetAttributes:["loading","entity-data","body-data","entity-end-point"]}}}/**
   * Implements getHaxJSONSchema post processing callback.
   */postProcessgetHaxJSONSchema(schema){schema.properties.__editThis={type:"string",component:{name:"a",properties:{id:"cmstokenidtolockonto",href:"",target:"_blank"},slot:"Edit this content"}};return schema}}window.customElements.define(CMSEntity.tag,CMSEntity);export{CMSEntity};