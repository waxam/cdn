import{html}from"../../@polymer/polymer/polymer-element.js";import{HAXCMSPolymerElementTheme}from"../haxcms-elements/lib/core/HAXCMSPolymerElementTheme.js";import{store}from"../haxcms-elements/lib/core/haxcms-site-store.js";import{autorun,toJS}from"../../mobx/lib/mobx.module.js";class ExampleHaxcmsTheme extends HAXCMSPolymerElementTheme{static get template(){return html`
      <style>
        :host {
          display: block;

          --example-haxcms-theme-color: #222222;
        }

        :host([hidden]) {
          display: none;
        }

        :host([edit-mode]) #slot {
          display: none;
        }

        :host #slot ::slotted(*) {
          color: var(--example-haxcms-theme-color);
        }
      </style>
      <site-top-menu noink indicator="arrow" arrow-size="8">
        <site-title slot="prefix" class="spacing"></site-title>
        <site-modal
          slot="suffix"
          icon="icons:search"
          title="Search site"
          button-label="Search"
        >
          <site-search></site-search>
        </site-modal>
      </site-top-menu>
      <site-breadcrumb></site-breadcrumb>
      <div id="contentcontainer">
        <div id="slot">
          <slot></slot>
        </div>
      </div>
      <site-menu-button type="prev" position="top"></site-menu-button>
      <site-menu-button type="next" position="top"></site-menu-button>
    `}static get properties(){return{...super.properties,editMode:{name:"editMode",type:Boolean,reflectToAttribute:!0},activeManifestIndex:{name:"activeManifestIndex",type:Number}}}static get tag(){return"example-haxcms-theme"}constructor(){super(),import("../haxcms-elements/lib/ui-components/navigation/site-top-menu.js"),import("../haxcms-elements/lib/ui-components/navigation/site-breadcrumb.js"),import("../haxcms-elements/lib/ui-components/layout/site-modal.js"),import("../haxcms-elements/lib/ui-components/navigation/site-menu-button.js"),import("../haxcms-elements/lib/ui-components/site/site-search.js"),this.__disposer=[]}connectedCallback(){super.connectedCallback(),autorun(reaction=>{this.activeManifestIndex=toJS(store.activeManifestIndex),this.__disposer.push(reaction)}),autorun(reaction=>{this.editMode=toJS(store.editMode),this.__disposer.push(reaction)})}disconnectedCallback(){for(var i in this.__disposer)this.__disposer[i].dispose();super.disconnectedCallback()}}window.customElements.define(ExampleHaxcmsTheme.tag,ExampleHaxcmsTheme);export{ExampleHaxcmsTheme};