module.exports={typeDefs:"\n      type AggregateStatement {\n        count: Int!\n      }\n\n      type BatchPayload {\n        count: Long!\n      }\n\n      scalar Json\n\n      scalar Long\n\n      type Mutation {\n        createStatement(data: StatementCreateInput!): Statement!\n        updateStatement(\n          data: StatementUpdateInput!\n          where: StatementWhereUniqueInput!\n        ): Statement\n        updateManyStatements(\n          data: StatementUpdateManyMutationInput!\n          where: StatementWhereInput\n        ): BatchPayload!\n        upsertStatement(\n          where: StatementWhereUniqueInput!\n          create: StatementCreateInput!\n          update: StatementUpdateInput!\n        ): Statement!\n        deleteStatement(where: StatementWhereUniqueInput!): Statement\n        deleteManyStatements(where: StatementWhereInput): BatchPayload!\n      }\n\n      enum MutationType {\n        CREATED\n        UPDATED\n        DELETED\n      }\n\n      interface Node {\n        id: ID!\n      }\n\n      type PageInfo {\n        hasNextPage: Boolean!\n        hasPreviousPage: Boolean!\n        startCursor: String\n        endCursor: String\n      }\n\n      type Query {\n        statement(where: StatementWhereUniqueInput!): Statement\n        statements(\n          where: StatementWhereInput\n          orderBy: StatementOrderByInput\n          skip: Int\n          after: String\n          before: String\n          first: Int\n          last: Int\n        ): [Statement]!\n        statementsConnection(\n          where: StatementWhereInput\n          orderBy: StatementOrderByInput\n          skip: Int\n          after: String\n          before: String\n          first: Int\n          last: Int\n        ): StatementConnection!\n        node(id: ID!): Node\n      }\n\n      type Statement {\n        id: ID!\n        data: Json!\n      }\n\n      type StatementConnection {\n        pageInfo: PageInfo!\n        edges: [StatementEdge]!\n        aggregate: AggregateStatement!\n      }\n\n      input StatementCreateInput {\n        data: Json!\n      }\n\n      type StatementEdge {\n        node: Statement!\n        cursor: String!\n      }\n\n      enum StatementOrderByInput {\n        id_ASC\n        id_DESC\n        data_ASC\n        data_DESC\n        createdAt_ASC\n        createdAt_DESC\n        updatedAt_ASC\n        updatedAt_DESC\n      }\n\n      type StatementPreviousValues {\n        id: ID!\n        data: Json!\n      }\n\n      type StatementSubscriptionPayload {\n        mutation: MutationType!\n        node: Statement\n        updatedFields: [String!]\n        previousValues: StatementPreviousValues\n      }\n\n      input StatementSubscriptionWhereInput {\n        mutation_in: [MutationType!]\n        updatedFields_contains: String\n        updatedFields_contains_every: [String!]\n        updatedFields_contains_some: [String!]\n        node: StatementWhereInput\n        AND: [StatementSubscriptionWhereInput!]\n        OR: [StatementSubscriptionWhereInput!]\n        NOT: [StatementSubscriptionWhereInput!]\n      }\n\n      input StatementUpdateInput {\n        data: Json\n      }\n\n      input StatementUpdateManyMutationInput {\n        data: Json\n      }\n\n      input StatementWhereInput {\n        id: ID\n        id_not: ID\n        id_in: [ID!]\n        id_not_in: [ID!]\n        id_lt: ID\n        id_lte: ID\n        id_gt: ID\n        id_gte: ID\n        id_contains: ID\n        id_not_contains: ID\n        id_starts_with: ID\n        id_not_starts_with: ID\n        id_ends_with: ID\n        id_not_ends_with: ID\n        AND: [StatementWhereInput!]\n        OR: [StatementWhereInput!]\n        NOT: [StatementWhereInput!]\n      }\n\n      input StatementWhereUniqueInput {\n        id: ID\n      }\n\n      type Subscription {\n        statement(\n          where: StatementSubscriptionWhereInput\n        ): StatementSubscriptionPayload\n      }\n    "};