/**
 * Copyright 2018 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{html as t,PolymerElement as e}from"../../@polymer/polymer/polymer-element.js";import{MutableData as i}from"../../@polymer/polymer/lib/mixins/mutable-data.js";import{wipeSlot as s}from"../utils/utils.js";import"../simple-toast/simple-toast.js";import"../../@polymer/iron-ajax/iron-ajax.js";import"../simple-colors/lib/simple-colors-polymer.js";import"../../@vaadin/vaadin-split-layout/vaadin-split-layout.js";import"../multiple-choice/multiple-choice.js";import"./lib/game-show-quiz-modal.js";import"../simple-icon/simple-icon.js";import"../simple-icon/lib/simple-icons.js";class GameShowQuiz extends(i(e)){static get tag(){return"game-show-quiz"}constructor(){super(),window.SimpleToast.requestAvailability(),import("../responsive-grid/lib/responsive-grid-row.js"),import("../responsive-grid/lib/responsive-grid-col.js"),import("../../@polymer/app-layout/app-drawer/app-drawer.js"),import("../../@polymer/app-layout/app-header/app-header.js"),import("../../@polymer/app-layout/app-toolbar/app-toolbar.js"),import("../../@polymer/iron-flex-layout/iron-flex-layout.js"),import("../chartist-render/chartist-render.js")}static get template(){return t`
      <style>
        :host {
          display: block;
          --game-show-bg-color: var(--simple-colors-default-theme-blue-11);
          --game-show-text-color: var(--simple-colors-default-theme-blue-1);
        }
        chartist-render#piechart {
          width: 300px;
          height: 300px;
          display: inline-block;
        }
        chartist-render.mini-chart {
          width: 132px;
          height: 132px;
          display: inline-block;
          --chartist-color-1: green;
          --chartist-color-2: red;
        }
        app-toolbar {
          background-color: var(--game-show-bg-color);
          color: var(--game-show-text-color);
          font-size: 24px;
          display: flex;
        }
        simple-icon {
          display: inline-block;
        }
        table {
          width: 90%;
        }
        tr {
          outline: 1px solid black;
        }
        td {
          border-left: 1px solid black;
          padding: 16px;
          text-align: center;
        }
        .chart-row td {
          padding: 0;
        }

        button {
          text-transform: none;
          display: block;
        }
        #helpbutton {
          text-align: center;
          padding: 8px;
          font-size: 12px;
          vertical-align: middle;
          display: inline-flex;
        }
        button + [main-title] {
          margin-left: 24px;
          display: inline-flex;
        }
        app-header {
          color: var(--game-show-text-color);
          --app-header-background-rear-layer: {
            background-color: #ef6c00;
          }
        }
        responsive-grid-row {
          --responsive-grid-row-inner-margin-left: 0;
          --responsive-grid-row-inner-margin-right: 0;
        }
        responsive-grid-col {
          --responsive-grid-col-inner-padding-left: 0;
          --responsive-grid-col-inner-padding-right: 0;
        }
        #contentcontainer {
          margin: 0 auto;
          font-size: 16px;
        }
        .grid-button {
          width: 100%;
          height: 80px;
          font-size: 24px;
          text-align: center;
          min-width: unset;
          padding: 0;
          margin: 0;
          align-items: center;
          display: flex;
        }
        .status-icon {
          border-radius: 50%;
          width: 48px;
          height: 48px;
          opacity: 0.5;
          right: 0;
          bottom: 0;
          position: absolute;
        }
        .correct {
          color: var(--simple-colors-default-theme-green-6);
          background-color: var(--simple-colors-default-theme-green-11);
        }
        .incorrect {
          color: var(--simple-colors-default-theme-red-6);
          background-color: var(--simple-colors-default-theme-red-11);
        }
        .row-0 button[disabled] {
          font-weight: bold;
          font-size: 16px;
        }
        .grid-button[data-type="bonus"] {
          display: inline-flex;
          position: absolute;
          outline: 1px solid #dddddd;
        }
        .grid-button[data-type="bonus"][data-display-points="1"] {
          height: 320px;
        }
        .grid-button[data-type="bonus"][data-display-points="2"] {
          height: 160px;
        }
        @media screen and (max-width: 600px) {
          app-toolbar {
            font-size: 14px;
          }
          button {
            padding: 0;
            margin: 0;
            width: 16px;
            height: 16px;
            min-width: unset;
          }
          game-show-quiz-modal button {
            height: 48px;
            width: 100%;
          }
          .grid-button {
            font-size: 14px;
          }
          .status-icon {
            width: 24px;
            height: 24px;
            opacity: 1;
            display: inline-block;
          }
          .row-0 button[disabled] {
            font-weight: bold;
            font-size: 10px;
          }
        }
      </style>
      <app-header>
        <app-toolbar>
          <button id="scorebutton" on-click="scoreBoardToggle">
            <simple-icon icon="editor:pie-chart"></simple-icon
            ><label for="scorebutton">Score board</label>
          </button>
          <div main-title>[[title]]</div>
          <button id="helpbutton" on-click="directionsToggle">
            <simple-icon icon="help"></simple-icon
            ><label for="helpbutton">Directions</label>
          </button>
        </app-toolbar>
      </app-header>
      <div id="contentcontainer">
        <div style="font-size: 24px;" hidden$="[[!remainingAttempts]]">
          Points Remaining to Attempt:
          <strong>[[remainingAttempts]]</strong>
        </div>
        <template is="dom-repeat" items="[[gameBoard]]" as="row" mutable-data>
          <responsive-grid-row gutter="0" class$="row row-[[index]]">
            <template
              is="dom-repeat"
              items="[[row.cols]]"
              as="col"
              mutable-data
            >
              <responsive-grid-col xl="2" lg="2" md="2" sm="2" xs="2">
                <button
                  class="grid-button"
                  raised="[[!col.notRaised]]"
                  data-question-uuid$="[[col.uuid]]"
                  data-value$="[[col.points]]"
                  data-display-points$="[[col.displayPoints]]"
                  data-is-bonus$="[[col.isBonus]]"
                  data-type$="[[col.type]]"
                  disabled$="[[col.disabled]]"
                >
                  [[col.title]]<br />[[col.displayPoints]]
                </button>
              </responsive-grid-col>
            </template>
          </responsive-grid-row>
        </template>
      </div>
      <game-show-quiz-modal id="scoreboard" title="Score board">
        <div slot="content">
          <div style="padding: 32px;">
            <chartist-render
              id="piechart"
              chart-title="Breakdown of attempts"
              data="[[attemptsData.overall]]"
              type="pie"
              scale="ct-square"
            >
            </chartist-render>
            <table style="margin: 16px auto;">
              <tbody>
                <tr>
                  <th></th>
                  <th>Slide ID</th>
                  <th>Terms</th>
                  <th>Reading</th>
                  <th>Lecture</th>
                  <th>Total</th>
                </tr>
                <tr>
                  <th>Points Earned</th>
                  <td>[[points.slideid.earned]]</td>
                  <td>[[points.terminology.earned]]</td>
                  <td>[[points.reading.earned]]</td>
                  <td>[[points.lecture.earned]]</td>
                  <td>[[points.total.earned]]</td>
                </tr>
                <tr>
                  <th>Points Attempted</th>
                  <td>[[points.slideid.attempted]]</td>
                  <td>[[points.terminology.attempted]]</td>
                  <td>[[points.reading.attempted]]</td>
                  <td>[[points.lecture.attempted]]</td>
                  <td>[[points.total.attempted]]</td>
                </tr>
                <tr>
                  <th>Category Percentage</th>
                  <td>[[points.slideid.percent]]</td>
                  <td>[[points.terminology.percent]]</td>
                  <td>[[points.reading.percent]]</td>
                  <td>[[points.lecture.percent]]</td>
                  <td>[[points.total.percent]]</td>
                </tr>
                <tr class="chart-row">
                  <th>Pie chart</th>
                  <td>
                    <chartist-render
                      class="mini-chart"
                      chart-title="Slide ID percentage"
                      data="[[attemptsData.slideid]]"
                      type="pie"
                      scale="ct-square"
                    ></chartist-render>
                  </td>
                  <td>
                    <chartist-render
                      class="mini-chart"
                      chart-title="Terminology percentage"
                      data="[[attemptsData.terminology]]"
                      type="pie"
                      scale="ct-square"
                    ></chartist-render>
                  </td>
                  <td>
                    <chartist-render
                      class="mini-chart"
                      chart-title="Reading percentage"
                      data="[[attemptsData.reading]]"
                      type="pie"
                      scale="ct-square"
                    ></chartist-render>
                  </td>
                  <td>
                    <chartist-render
                      class="mini-chart"
                      chart-title="Lecture percentage"
                      data="[[attemptsData.lecture]]"
                      type="pie"
                      scale="ct-square"
                    ></chartist-render>
                  </td>
                  <td>
                    <chartist-render
                      class="mini-chart"
                      chart-title="Total percentage"
                      data="[[attemptsData.total]]"
                      type="pie"
                      scale="ct-square"
                    ></chartist-render>
                  </td>
                </tr>
              </tbody>
            </table>
            <div style="font-size: 24px;" hidden$="[[!remainingAttempts]]">
              Points Remaining to Attempt:
              <strong>[[remainingAttempts]]</strong>
            </div>
          </div>
        </div>
        <button
          aria-label="Close score board and return to game"
          slot="buttons"
          id="dismiss"
          dialog-confirm
          raised
        >
          Return to game board
        </button>
      </game-show-quiz-modal>
      <game-show-quiz-modal id="directions" title="[[directionsTitle]]">
        <div slot="content"><slot></slot></div>
        <button
          aria-label="Close directions dialog and return to game"
          slot="buttons"
          id="dismiss"
          dialog-confirm
          raised
        >
          Good luck!
        </button>
      </game-show-quiz-modal>
      <game-show-quiz-modal
        id="dialog"
        title="[[questionTitle]] [[__activeQuestionDetails.points]] point, [[__activeQuestionDetails.type]] question."
      >
        <vaadin-split-layout slot="content" style="height:80vh;">
          <div id="col1" style="width:70%;min-width: 30%;">
            <img
              style="min-width:100px; width:100%; min-height:50vh; height:75vh;"
              loading="lazy"
              src$="[[activeQuestion.image]]"
            />
          </div>
          <div id="col2" style="width:30%;min-width: 30%;">
            <multiple-choice
              randomize
              single-option
              id="question"
              hide-buttons
              title="[[activeQuestion.title]]"
              answers="[[activeQuestion.data]]"
            ></multiple-choice>
            <div hidden$="[[!activeQuestion.wrong]]" aria-hidden="true">
              <h3>Feedback</h3>
              <p>[[activeQuestion.feedback]]</p>
            </div>
          </div>
        </vaadin-split-layout>
        <button
          slot="buttons"
          hidden$="[[activeQuestion.submitted]]"
          id="submit"
          raised=""
          disabled$="[[__submitDisabled]]"
        >
          Submit answer
          <simple-icon
            hidden$="[[__submitDisabled]]"
            icon="icons:touch-app"
          ></simple-icon>
        </button>
        <button
          slot="buttons"
          id="continue"
          hidden$="[[!activeQuestion.submitted]]"
          dialog-confirm
          raised
          aria-disabled$="[[activeQuestion.submitted]]"
          aria-label="Return to game board"
        >
          Continue <simple-icon icon="icons:arrow-forward"></simple-icon>
        </button>
      </game-show-quiz-modal>
      <iron-ajax
        auto
        id="gamedata"
        url="[[gameData]]"
        handle-as="json"
        last-response="{{gameBoardData}}"
      ></iron-ajax>
      <iron-ajax
        auto
        id="gamedirections"
        url="[[gameDirectionsData]]"
        handle-as="text"
        last-response="{{gameDirections}}"
      ></iron-ajax>
      <iron-ajax id="gamebackend" hand-as="json"></iron-ajax>
    `}_gameDirectionsChanged(t){if(t){s(this);let e=document.createElement("div");e.style="padding: 16px;",e.innerHTML=t,this.appendChild(e.cloneNode(!0))}}static get properties(){return{title:{type:String},gameDirectionsData:{type:String},gameDirections:{type:String,observer:"_gameDirectionsChanged"},token:{type:String},attemptsData:{type:Object,value:{overall:{labels:["Slide ID","Terminology","Reading","Lecture"],series:[0,0,0,0]},slideid:{labels:["Correct","Incorrect"],series:[0,0]},terminology:{labels:["Correct","Incorrect"],series:[0,0]},reading:{labels:["Correct","Incorrect"],series:[0,0]},lecture:{labels:["Correct","Incorrect"],series:[0,0]},bonus:{labels:["Correct","Incorrect"],series:[0,0]},total:{labels:["Correct","Incorrect"],series:[0,0]}}},points:{type:Object,value:{slideid:{attempted:0,earned:0,percent:0},terminology:{attempted:0,earned:0,percent:0},reading:{attempted:0,earned:0,percent:0},lecture:{attempted:0,earned:0,percent:0},bonus:{attempted:0,earned:0,percent:0},total:{attempted:0,earned:0,percent:0}}},remainingAttempts:{type:Number,value:30},directionsTitle:{type:String,value:"Directions"},questionTitle:{type:String,value:"Answer the following"},gameBoard:{type:Array},gameBoardData:{type:Object,observer:"_gameBoardDataChanged"},gameData:{type:String},gameScoreBoardBackend:{type:String},activeQuestion:{type:Object}}}directionsToggle(t){this.shadowRoot.querySelector("#directions").toggle()}scoreBoardToggle(t){this.shadowRoot.querySelector("#scoreboard").toggle()}continueGameTap(t){void 0!==this.__activeTap&&null!=this.__activeTap.parentNode.nextElementSibling.firstElementChild&&(this.__activeTap.parentNode.nextElementSibling.firstElementChild.focus(),delete this.__activeTap)}registerTap(t){var e=!0;for(var i in this.shadowRoot.querySelector("#question").answers)this.shadowRoot.querySelector("#question").answers[i].userGuess&&(e=!1);this.__submitDisabled=e}submitAnswer(t){let e=this.attemptsData;this.set("activeQuestion.submitted",!0),this.notifyPath("activeQuestion.submitted"),this.shadowRoot.querySelector("#continue").focus(),this.__activeTap.disabled=!0;let i=document.createElement("iron-icon");i.classList.add("status-icon");var s=0;if("bonus"!=this.__activeType&&!this.__activeQuestionDetails.isBonus){let t=parseInt(this.points[this.__activeType].attempted)+parseInt(this.__activeValue);this.set("points."+this.__activeType+".attempted",t),this.notifyPath("points."+this.__activeType+".attempted"),s=parseInt(this.points.total.attempted)+parseInt(this.__activeValue),this.set("points.total.attempted",s),this.notifyPath("points.total.attempted"),this.remainingAttempts=this.remainingAttempts-parseInt(this.__activeValue)}if(!this.__activeQuestionDetails.isBonus){let t=0,e=100,i=0;for(var a in this._gameBoardFlat)!this._gameBoardFlat[a].isBonus&&this._gameBoardFlat[a].question.submitted&&this._gameBoardFlat[a].points===this.__activeQuestionDetails.points&&(t+=this.__activeQuestionDetails.points);switch(this.__activeQuestionDetails.points){case 1:e=16,i=1;break;case 2:e=16,i=5;break;case 3:e=12,i=7}t===e&&this.shadowRoot.querySelectorAll('responsive-grid-col button[data-type="bonus"][data-display-points="'+this.__activeQuestionDetails.points+'"]').forEach((t=>{t.removeAttribute("disabled");let e=t.getAttribute("data-question-uuid");this.gameBoard[i].cols.find((t=>t.uuid==e)).disabled=!1,this._gameBoardFlat[e].disabled=!1}))}if(11!=this.points[this.__activeType].attempted||this.__activeQuestionDetails.isBonus||this.shadowRoot.querySelectorAll('responsive-grid-col button[data-is-bonus][data-type="'+this.__activeType+'"]').forEach((t=>{t.removeAttribute("disabled");let e=t.getAttribute("data-question-uuid");this.gameBoard[this.gameBoard.length-1].cols.find((t=>t.uuid==e)).disabled=!1,this._gameBoardFlat[e].disabled=!1})),this.shadowRoot.querySelector("#question").checkAnswers()){const t=new CustomEvent("simple-toast-show",{bubbles:!0,cancelable:!0,composed:!0,detail:{text:"Correct!",duration:4e3}});this.dispatchEvent(t);let e=parseInt(this.points[this.__activeType].earned)+parseInt(this.__activeValue);this.set("points."+this.__activeType+".earned",e),this.notifyPath("points."+this.__activeType+".earned"),i.icon="icons:check-circle",i.classList.add("correct"),s=parseInt(this.points.total.earned)+parseInt(this.__activeValue),this.set("points.total.earned",s),this.notifyPath("points.total.earned")}else{this.set("activeQuestion.wrong",!0);const t=new CustomEvent("simple-toast-show",{bubbles:!0,cancelable:!0,composed:!0,detail:{text:":( You got it wrong",duration:4e3}});this.dispatchEvent(t),i.icon="icons:cancel",i.classList.add("incorrect")}let o=(parseInt(this.points[this.__activeType].earned)/parseInt(this.points[this.__activeType].attempted)*100).toFixed(1);if(this.set("points."+this.__activeType+".percent",o),this.notifyPath("points."+this.__activeType+".percent"),s=(parseInt(this.points.total.earned)/parseInt(this.points.total.attempted)*100).toFixed(1),this.set("points.total.percent",s),this.notifyPath("points.total.percent"),e[this.__activeType].series=[this.points[this.__activeType].earned,this.points[this.__activeType].attempted-this.points[this.__activeType].earned],this.points[this.__activeType].attempted<this.points[this.__activeType].earned&&(e[this.__activeType].series=[this.points[this.__activeType].earned,0]),e.total.series=[this.points.total.earned,this.points.total.attempted-this.points.total.earned],this.points.total.attempted<this.points.total.earned&&(e.total.series=[this.points.total.earned,0]),e.overall.series=[this.points.slideid.attempted,this.points.terminology.attempted,this.points.reading.attempted,this.points.lecture.attempted],this.set("attemptsData",{}),this.set("attemptsData",e),this.__activeTap.appendChild(i),2===this.remainingAttempts&&this.shadowRoot.querySelectorAll("responsive-grid-col button[data-value='3']:not([disabled]):not([data-is-bonus])").forEach((t=>{t.setAttribute("disabled","disabled")})),1===this.remainingAttempts&&(this.shadowRoot.querySelectorAll("responsive-grid-col button[data-value='2']:not([disabled]):not([data-is-bonus])").forEach((t=>{t.setAttribute("disabled","disabled")})),this.shadowRoot.querySelectorAll('responsive-grid-col button[data-value="3"]:not([disabled]):not([data-is-bonus])').forEach((t=>{t.setAttribute("disabled","disabled")}))),this.remainingAttempts<=0&&(this.shadowRoot.querySelectorAll("responsive-grid-col button:not([disabled]):not([data-is-bonus])").forEach((t=>{t.setAttribute("disabled","disabled")})),this.remainingAttempts=0,0===this.shadowRoot.querySelectorAll("responsive-grid-col button[data-is-bonus]:not([disabled])").length)){this.shadowRoot.querySelector("#dialog").toggle(),this.shadowRoot.querySelector("#scoreboard").title="Your final score for the game",this.scoreBoardToggle({});const t=new CustomEvent("simple-toast-show",{bubbles:!0,cancelable:!0,composed:!0,detail:{text:"Game over!",duration:5e3}});this.dispatchEvent(t),this.dispatchEvent(new CustomEvent("game-show-quiz-game-over",{bubbles:!0,cancelable:!0,composed:!0,detail:{game:this.title,score:this.points.total.earned}})),this.gameScoreBoardBackend&&(this.shadowRoot.querySelector("#gamebackend").url=`${this.gameScoreBoardBackend}/${this.title}/${this.points.total.earned}?token=${this.token}`,this.shadowRoot.querySelector("#gamebackend").generateRequest())}}_gameBoardTap(t){var e=t.target;if(null!=e.getAttribute("data-question-uuid")){this.__submitDisabled=!0,this.__activeTap=e,this.__activeType=e.getAttribute("data-type"),this.__activeValue=e.getAttribute("data-value");let t=e.getAttribute("data-question-uuid");this.__activeQuestionDetails=this._gameBoardFlat[t],this.set("activeQuestion",{}),this.set("activeQuestion",this.__activeQuestionDetails.question),this.notifyPath("activeQuestion.*"),this.notifyPath("activeQuestion.data.*"),this.shadowRoot.querySelector("#col1").style.flex="",this.shadowRoot.querySelector("#col2").style.flex="",this.shadowRoot.querySelector("#question").resetAnswers(),setTimeout((()=>{this.shadowRoot.querySelector("#dialog").toggle()}),100)}}_gameBoardDataChanged(t,e){if(t){this._gameBoardFlat={};var i=[{cols:[{title:"Slide id",points:"",notRaised:!0,disabled:!0},{title:"Terms",points:"",notRaised:!0,disabled:!0},{title:"Reading",points:"",notRaised:!0,disabled:!0},{title:"Lecture",points:"",notRaised:!0,disabled:!0},{title:"Bonus",points:"",notRaised:!0,disabled:!0}]}],s={},a=Object.assign({},t);const e=Object.keys(a);var o=0,n={1:4,2:2,3:1,bonus:1};for(var r in n)for(o=0;o<n[r];){for(var d in o++,s={cols:[]},e){var l=a[e[d]][r];if(l&&l.questions.length>0){let t=Math.floor(Math.random()*l.questions.length);var c={uuid:this.generateUUID(),type:l.type,title:l.title,points:l.points,displayPoints:l.points,isBonus:!1,question:Object.assign({},l.questions[t])};a[e[d]][r].questions.splice(t,1),"bonus"===e[d]?(a[e[d]][r].questions=[],c.disabled=!0,c.isBonus=!0,c.points=r,c.displayPoints=r):"bonus"===r&&(c.disabled=!0,c.isBonus=!0),s.cols.push(c),this._gameBoardFlat[c.uuid]=c}}i.push(s)}this.set("gameBoard",[]),setTimeout((()=>{this.set("gameBoard",i),this.notifyPath("gameBoard.*")}),100)}}generateUUID(){return"item-sss-ss-ss".replace(/s/g,this._uuidPart)}_uuidPart(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}resetFocus(t){this.shadowRoot.querySelector("#helpbutton").focus()}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!0,gizmo:{title:"Game show",description:"Tweak the game show options",icon:"av:play-circle-filled",color:"grey",groups:["Education","Interactive"],handles:[],meta:{author:"ELMS:LN"}},settings:{configure:[{property:"title",title:"Title",description:"The title of the game",inputMethod:"textfield",icon:"editor:title"},{property:"gameData",title:"Source of the game data data",description:"The title of the game",inputMethod:"textfield",icon:"icons:link"}],advanced:[]},saveOptions:{unsetAttributes:["attempts-data","points","game-board","question-title","remaining-attempts"]}}}connectedCallback(){super.connectedCallback(),setTimeout((()=>{window.Drupal&&window.Drupal.settings&&window.Drupal.settings.elmslnCore&&window.Drupal.settings.elmslnCore.uname&&(this.gameScoreBoardBackend=window.Drupal.settings.basePath+"apps/game-show-scoreboard/save-score",this.token=btoa(window.Drupal.settings.elmslnCore.uname),this.gameDirectionsData=window.Drupal.settings.basePath+"apps/game-show-scoreboard/load-directions"),this.shadowRoot.querySelector("#dismiss").addEventListener("click",this.resetFocus.bind(this)),this.shadowRoot.querySelector("#contentcontainer").addEventListener("click",this._gameBoardTap.bind(this)),this.shadowRoot.querySelector("#submit").addEventListener("click",this.submitAnswer.bind(this)),this.shadowRoot.querySelector("#continue").addEventListener("click",this.continueGameTap.bind(this)),this.shadowRoot.querySelector("#question").addEventListener("click",this.registerTap.bind(this))}),0)}disconnectedCallback(){this.shadowRoot.querySelector("#dismiss").removeEventListener("click",this.resetFocus.bind(this)),this.shadowRoot.querySelector("#contentcontainer").removeEventListener("click",this._gameBoardTap.bind(this)),this.shadowRoot.querySelector("#submit").removeEventListener("click",this.submitAnswer.bind(this)),this.shadowRoot.querySelector("#continue").removeEventListener("click",this.continueGameTap.bind(this)),this.shadowRoot.querySelector("#question").removeEventListener("click",this.registerTap.bind(this)),super.disconnectedCallback()}}window.customElements.define(GameShowQuiz.tag,GameShowQuiz);export{GameShowQuiz};