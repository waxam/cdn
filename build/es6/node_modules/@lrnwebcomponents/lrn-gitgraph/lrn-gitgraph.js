import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import"./lib/gitgraph.js/src/gitgraph.js";class LrnGitgraph extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: block;
          overflow-x: scroll;
        }
      </style>
      <canvas id="gitGraph"></canvas>
    `}static get tag(){return"lrn-gitgraph"}static get properties(){return{commits:{type:Array,value:[]},template:{type:String,value:"blackarrow"},orientation:{type:String,value:"horizontal"},mode:{type:String,value:""},reverseArrow:{type:Boolean,value:!1},config:{type:Object}}}static get observers(){return["_commitsChanged(commits)"]}_commitsChanged(commits){if(this.config&&commits.length>0){var gitgraph=new GitGraph(this.config),tree=[];commits.forEach(function(item){item.commits&&item.commits.forEach(function(commit){commit.branch=item.branch,tree.push(commit)})}),console.log("befor",tree),(tree=(tree=this._treeRemoveDuplicates(tree)).sort(function(a,b){return new Date(b.date)-new Date(a.date)})).reverse();var branches=[];tree.forEach(function(item,i){void 0===branches[item.branch]&&(branches[item.branch]=gitgraph.branch(item.branch)),branches[item.branch].commit({sha1:item.commit,message:item.subject,author:item.author,tag:item.refs})})}}_treeRemoveDuplicates(tree){var htTree=[],htCommits=[];return tree.forEach(function(t){htCommits.includes(t.commit)||(htTree.push(t),htCommits.push(t.commit))}),htTree}ready(){super.ready();var config={template:this.template,reverseArrow:!1,orientation:this.orientation,element:this.shadowRoot.querySelector("#gitGraph")};""!==this.mode&&(config.mode=this.mode),this.config=config}}window.customElements.define(LrnGitgraph.tag,LrnGitgraph);export{LrnGitgraph};