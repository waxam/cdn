import{html as t,PolymerElement as e}from"../../@polymer/polymer/polymer-element.js";import"./lib/gitgraphjs/src/gitgraph.js";class LrnGitgraph extends e{static get template(){return t`
      <style>
        :host {
          display: block;
          overflow-x: scroll;
        }
      </style>
      <canvas id="gitGraph"></canvas>
    `}static get tag(){return"lrn-gitgraph"}static get properties(){return{commits:{type:Array,value:[]},template:{type:String,value:"blackarrow"},orientation:{type:String,value:"horizontal"},mode:{type:String,value:""},reverseArrow:{type:Boolean,value:!1},config:{type:Object}}}static get observers(){return["_commitsChanged(commits)"]}_commitsChanged(t){if(this.config&&t.length>0){var e=new GitGraph(this.config),r=[];t.forEach((function(t){t.commits&&t.commits.forEach((function(e){e.branch=t.branch,r.push(e)}))})),console.log("befor",r),(r=(r=this._treeRemoveDuplicates(r)).sort((function(t,e){return new Date(e.date)-new Date(t.date)}))).reverse();var a=[];r.forEach((function(t,r){void 0===a[t.branch]&&(a[t.branch]=e.branch(t.branch)),a[t.branch].commit({sha1:t.commit,message:t.subject,author:t.author,tag:t.refs})}))}}_treeRemoveDuplicates(t){var e=[],r=[];return t.forEach((function(t){r.includes(t.commit)||(e.push(t),r.push(t.commit))})),e}ready(){super.ready();var t={template:this.template,reverseArrow:!1,orientation:this.orientation,element:this.shadowRoot.querySelector("#gitGraph")};""!==this.mode&&(t.mode=this.mode),this.config=t}}window.customElements.define(LrnGitgraph.tag,LrnGitgraph);export{LrnGitgraph};