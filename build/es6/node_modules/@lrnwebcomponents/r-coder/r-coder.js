import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import"../../@polymer/paper-button/paper-button.js";import"../code-editor/code-editor.js";class RCoder extends PolymerElement{static get template(){return html`
      <style>
        :host {
          display: block;
        }

        :host([hidden]) {
          display: none;
        }

        #editor {
          height: var(--r-coder-editor-height, 300px);
          width: var(--r-coder-editor-width, 100%);
        }

        #button {
          margin: var(--r-code-button-margin, 10px 0);
        }
      </style>
      <code-editor id="editor" language="r"></code-editor>
      <paper-button
        id="button"
        disabled="[[!__connected]]"
        on-click="process"
        raised
        >Process</paper-button
      >
      <div id="output"></div>
    `}static get haxProperties(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"R coder",description:"R coder interface for the r-service backend.",icon:"icons:android",color:"green",groups:["Coder"],handles:[{type:"todo:read-the-docs-for-usage"}],meta:{author:"heymp",owner:"PSU"}},settings:{quick:[],configure:[{property:"endpoint",description:"",inputMethod:"textfield",required:!1,icon:"icons:android"}],advanced:[]}}}static get properties(){return{endpoint:{name:"endpoint",type:String,value:"/service/r-service",reflectToAttribute:!1,observer:!1},__connected:{name:"connected",type:Boolean,value:!1,observer:!1}}}static get tag(){return"r-coder"}connectedCallback(){super.connectedCallback(),this.ping(),this.shadowRoot.getElementById("editor").editorValue=this.textContent.trim()}async ping(){const status=await fetch(this.endpoint,{method:"GET"}).then(res=>res.status);this.__connected=200===status}async process(){const code=this.shadowRoot.getElementById("editor").value,data=await fetch(this.endpoint,{method:"POST",body:code}).then(res=>res.text());this.shadowRoot.getElementById("output").innerText=data}}window.customElements.define(RCoder.tag,RCoder);export{RCoder};