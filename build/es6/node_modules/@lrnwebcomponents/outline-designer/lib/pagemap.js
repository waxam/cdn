const docEl=window.document.documentElement,doc=window.document,body=doc.querySelector("body"),Rect=(x,y,w,h)=>{return Object.assign(Object.create(Rect.prototype),{x,y,w,h})};Rect.prototype={constructor:Rect,relativeTo(pos={x:0,y:0}){return Rect(this.x-pos.x,this.y-pos.y,this.w,this.h)}};Rect.ofDocument=()=>{return Rect(0,0,docEl.scrollWidth,docEl.scrollHeight)};Rect.ofWindow=()=>{return Rect(window.pageXOffset,window.pageYOffset,docEl.clientWidth,docEl.clientHeight)};const getOffset=el=>{const br=el.getBoundingClientRect();return{x:br.left+window.pageXOffset,y:br.top+window.pageYOffset,width:br.width,height:br.height}};Rect.ofElement=el=>{const{x,y,width,height}=getOffset(el);return Rect(x,y,width,height)};Rect.ofViewport=el=>{const{x,y}=getOffset(el);return Rect(x+el.clientLeft,y+el.clientTop,el.clientWidth,el.clientHeight)};Rect.ofContent=el=>{const{x,y}=getOffset(el);return Rect(x+el.clientLeft-el.scrollLeft,y+el.clientTop-el.scrollTop,el.scrollWidth,el.scrollHeight)};const black=pc=>{return`rgba(0,0,0,${pc/100})`},defaults={viewport:null,styles:{"header,footer,section,article":black(8),"h1,a":black(10),"h2,h3,h4":black(8)},back:black(2),view:black(5),drag:black(10),interval:null},_listener=(el,method,types,fn)=>types.split(/\s+/).forEach(type=>el[method](type,fn)),on=(el,types,fn)=>_listener(el,"addEventListener",types,fn),off=(el,types,fn)=>_listener(el,"removeEventListener",types,fn),pagemap=(canvas,options)=>{const settings=Object.assign({},defaults,options),context=canvas.getContext("2d"),calcScale=(()=>{const width=canvas.clientWidth,height=canvas.clientHeight;return(w,h)=>Math.min(width/w,height/h)})(),resizeCanvas=(w,h)=>{canvas.width=w;canvas.height=h;canvas.style.width=`${w}px`;canvas.style.height=`${h}px`},viewport=settings.viewport,find=sel=>Array.from((viewport||doc).querySelectorAll(sel));let drag=!1,rootRect,viewRect,scale,dragRx,dragRy;const drawRect=(rect,col)=>{if(!col){return}context.beginPath();context.rect(rect.x,rect.y,rect.w,rect.h);context.fillStyle=col;context.fill()},applyStyles=styles=>{Object.keys(styles).forEach(sel=>{const col=styles[sel];find(sel).forEach(el=>{drawRect(Rect.ofElement(el).relativeTo(rootRect),col)})})},draw=()=>{rootRect=viewport?Rect.ofContent(viewport):Rect.ofDocument();viewRect=viewport?Rect.ofViewport(viewport):Rect.ofWindow();scale=calcScale(rootRect.w,rootRect.h);resizeCanvas(rootRect.w*scale,rootRect.h*scale);context.setTransform(1,0,0,1,0,0);context.clearRect(0,0,canvas.width,canvas.height);context.scale(scale,scale);drawRect(rootRect.relativeTo(rootRect),settings.back);applyStyles(settings.styles);drawRect(viewRect.relativeTo(rootRect),drag?settings.drag:settings.view)},onDrag=ev=>{ev.preventDefault();const cr=Rect.ofViewport(canvas),x=(ev.pageX-cr.x)/scale-viewRect.w*dragRx,y=(ev.pageY-cr.y)/scale-viewRect.h*dragRy;if(viewport){viewport.scrollLeft=x;viewport.scrollTop=y}else{window.scrollTo(x,y)}draw()},onDragEnd=ev=>{drag=!1;canvas.style.cursor="pointer";body.style.cursor="auto";off(window,"mousemove",onDrag);off(window,"mouseup",onDragEnd);onDrag(ev)},onDragStart=ev=>{drag=!0;const cr=Rect.ofViewport(canvas),vr=viewRect.relativeTo(rootRect);dragRx=((ev.pageX-cr.x)/scale-vr.x)/vr.w;dragRy=((ev.pageY-cr.y)/scale-vr.y)/vr.h;if(0>dragRx||1<dragRx||0>dragRy||1<dragRy){dragRx=.5;dragRy=.5}canvas.style.cursor="crosshair";body.style.cursor="crosshair";on(window,"mousemove",onDrag);on(window,"mouseup",onDragEnd);onDrag(ev)},init=()=>{canvas.style.cursor="pointer";on(canvas,"mousedown",onDragStart);on(viewport||window,"load resize scroll",draw);if(0<settings.interval){setInterval(()=>draw(),settings.interval)}draw()};init();return{redraw:draw}};export{pagemap};