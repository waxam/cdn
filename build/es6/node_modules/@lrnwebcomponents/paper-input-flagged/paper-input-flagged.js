import{LitElement,html,css}from"../../lit-element/lit-element.js";class PaperInputFlagged extends LitElement{static get styles(){return[css`
        :host {
          display: block;
        }
        iron-icon {
          transition: 0.6s all ease-in;
          width: 24px;
          height: 24px;
          margin-right: 4px;
        }
        paper-tooltip {
          --paper-tooltip-delay-in: 100;
          font-size: 11px;
        }
        #icon {
          color: var(--paper-grey-400);
          background-color: transparent;
        }
        :host([status="info"]) #icon {
          color: var(--paper-green-400);
        }
        :host([status="notice"]) #icon {
          color: var(--paper-grey-400);
        }
        :host([status="warning"]) #icon {
          color: var(--paper-yellow-700);
        }
        :host([status="error"]) #icon {
          color: var(--paper-red-900);
        }
        .element-invisible {
          position: absolute !important;
          clip: rect(1px, 1px, 1px, 1px);
          overflow: hidden;
          height: 1px;
        }
      `]}constructor(){super(),this.disabled=!1,this.label="",this.value="",this.inputSuccess={message:"You passed our simple accessibility checks.",status:"info"},this.flaggedInput=[{match:null,message:"Alt data is required for everything except decoration images.",status:"notice"},{match:"image",message:"Screenreaders will say the word image, don't put it in the descriptive text",status:"error"},{match:"photo",message:"Screenreaders will say the word image, don't put photo in the descriptive text",status:"error"},{match:"picture",message:"Screenreaders will say the word image, don't put picture in the descriptive text",status:"error"},{match:3,message:"Description not effective enough. This should be at least a sentance about what the image is.",status:"error"},{match:10,message:"Make sure your alt text is descriptive enough for those that can't see the media.",status:"warning"}],import("../../@polymer/paper-input/paper-input.js"),import("../../@polymer/paper-tooltip/paper-tooltip.js"),import("../../@polymer/iron-icons/iron-icons.js"),import("../../@polymer/iron-icon/iron-icon.js")}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{if(["value"].includes(propName)){let eventName=`${propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g,"$1-$2").toLowerCase()}-changed`;this.dispatchEvent(new CustomEvent(eventName,{detail:{value:this[propName]}}))}"status"==propName&&(this.icon=this._iconFromStatus(this.status)),"flaggedInput"!=propName&&"value"!=propName||(this.status=this.testStatus(this.flaggedInput,this.value))})}valueEvent(e){this.value=e.detail.value}render(){return html`
      <paper-input
        label="${this.label}"
        value="${this.value}"
        @value-changed="${this.valueEvent}"
        ?char-counter="${this.charCounter}"
        ?disabled="${this.disabled}"
        minlength="${this.minlength}"
        maxlength="${this.maxlength}"
      >
        <iron-icon id="icon" icon="${this.icon}" slot="prefix"></iron-icon>
      </paper-input>
      <div class="element-invisible">${this.__activeMessage}</div>
      <paper-tooltip
        for="icon"
        position="top"
        offset="20"
        fit-to-visible-bounds
      >
        ${this.__activeMessage}
      </paper-tooltip>
    `}static get tag(){return"paper-input-flagged"}static get properties(){return{label:{type:String},disabled:{type:Boolean},icon:{type:String},maxlength:{type:Number},minlength:{type:Number},status:{type:String,reflect:!0},value:{type:String},flaggedInput:{type:Array,attribute:"flagged-input"},inputSuccess:{type:Object,attribute:"input-success"},__activeMessage:{type:String}}}testStatus(test,value){for(var i in test){if(null===test[i].match&&(""===value||null===value))return this.__activeMessage=test[i].message,test[i].status;if(!isNaN(test[i].match)&&value.split(/\s+/g).length<parseInt(test[i].match))return this.__activeMessage=test[i].message,test[i].status;if(value.toLowerCase().includes(test[i].match))return this.__activeMessage=test[i].message,test[i].status}return this.__activeMessage=this.inputSuccess.message,this.inputSuccess.status}_iconFromStatus(status){switch(status){case"error":return"icons:error";case"warning":case"notice":return"icons:warning";case"info":return"icons:info-outline";default:return"icons:info"}}}window.customElements.define(PaperInputFlagged.tag,PaperInputFlagged);export{PaperInputFlagged};