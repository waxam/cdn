import{html,Polymer}from"../../../@polymer/polymer/polymer-legacy.js";import*as async from"../../../@polymer/polymer/lib/utils/async.js";import{FlattenedNodesObserver}from"../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js";import{pathFromUrl}from"../../../@polymer/polymer/lib/utils/resolve-url.js";import"../../hax-body-behaviors/hax-body-behaviors.js";Polymer({_template:html`
    <style>
      :host {
        display: none;
      }
    </style>
    <slot></slot>
  `,is:"hax-autoloader",behaviors:[HAXBehaviors.PropertiesBehaviors],properties:{processedList:{type:Object,value:{}}},attached:function(){this.fire("hax-register-autoloader",this);this._observer=new FlattenedNodesObserver(this,info=>{if(0<info.addedNodes.length){async.microTask.run(()=>{this.processNewElements(info.addedNodes)})}})},processNewElements:function(){let effectiveChildren=FlattenedNodesObserver.getFlattenedNodes(this).filter(n=>n.nodeType===Node.ELEMENT_NODE);for(var i=0;i<effectiveChildren.length;i++){if(typeof effectiveChildren[i].tagName!==typeof void 0&&typeof this.processedList[effectiveChildren[i].tagName]===typeof void 0){try{let name=effectiveChildren[i].tagName.toLowerCase();if("function"===typeof effectiveChildren[i].getHaxProperties){const evt=new CustomEvent("hax-register-properties",{bubbles:!0,cancelable:!0,detail:{tag:name,properties:effectiveChildren[i].getHaxProperties(),polymer:!0}});context.dispatchEvent(evt)}else if("function"===typeof effectiveChildren[i].HAXWiring){const evt=new CustomEvent("hax-register-properties",{bubbles:!0,cancelable:!0,detail:{tag:name,properties:effectiveChildren[i].HAXWiring.getHaxProperties(),polymer:!1}});context.dispatchEvent(evt)}else{const basePath=pathFromUrl(decodeURIComponent(import.meta.url));import(`${basePath}../../${name}/${name}.js`).then(()=>{let CEClass=window.customElements.get(name);if("function"===typeof CEClass.getHaxProperties){this.setHaxProperties(CEClass.getHaxProperties(),name)}else if("function"===typeof CEClass.HAXWiring){this.setHaxProperties(CEClass.HAXWiring.getHaxProperties(),name)}else if(CEClass.haxProperties){this.setHaxProperties(CEClass.haxProperties,name)}else{console.log(`${name} didn't have hax wiring in the end`)}}).catch(error=>{console.log(error)})}this.processedList[name]=name}catch(err){}}}}});