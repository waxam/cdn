import{LitElement as e,html as t,css as o}from"../../../lit-element/lit-element.js";import{MtzFileDownloadBehaviors as a}from"../../dl-behavior/dl-behavior.js";import{winEventsElement as i,stripMSWord as n}from"../../utils/utils.js";class HaxExportDialog extends(i(a(e))){static get styles(){return[o`
        :host {
          display: block;
        }
        #dialog {
          z-index: 1000;
        }
        iron-icon:not(:defined),
        paper-button:not(:defined),
        paper-dialog:not(:defined) {
          display: none;
        }
        .title {
          position: relative;
          padding: 16px;
          outline: 0;
          font-weight: 600;
          text-align: left;
          margin: 0;
          font-size: 18px;
          line-height: 18px;
          font-family: "Noto Serif", serif;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
        }
        .pref-container {
          text-align: left;
          padding: 16px;
        }
        #closedialog {
          float: right;
          top: 5px;
          right: 0;
          position: absolute;
          padding: 4px;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          width: 40px;
          height: 40px;
          min-width: unset;
        }
        #textarea {
          margin-bottom: 16px;
          padding: 10px;
          font-size: 10px;
          resize: none;
          width: 90%;
          height: 40vh;
          width: -webkit-fill-available;
          background-color: transparent;
          color: #eeeeee;
          font-family: monospace;
        }
        paper-dialog {
          min-width: 70vw;
          min-height: 60vh;
          background-color: #ffffff;
          color: black;
        }
        #loading {
          position: absolute;
          margin: 0 auto;
          width: 100%;
        }
      `]}render(){return t`
      <paper-dialog
        id="dialog"
        ?opened="${this.opened}"
        @opened-changed="${this.openedChanged}"
      >
        <h3 class="title">
          <iron-icon icon="icons:code"></iron-icon> ${this.title}
        </h3>
        <div style="height: 100%; overflow: auto;" class="pref-container">
          <div id="wrapper">
            <textarea id="hiddentextarea" hidden></textarea>
            <hexagon-loader
              size="small"
              id="loading"
              item-count="4"
              color="#0085ba"
              aria-roledescription="Loading"
            ></hexagon-loader>
            <code-editor id="textarea" title="" theme="vs"></code-editor>
          </div>
          <div id="buttons" class="buttons">
            <hax-tray-button
              label="Update source"
              color="red"
              ?color-meaning="${!0}"
              icon="icons:code"
              @click="${this.importContent}"
            >
            </hax-tray-button>
            <hax-tray-button
              @click="${this.scrubContent}"
              icon="editor:format-clear"
              label="Word / GDoc clean up"
            >
            </hax-tray-button>
            <hax-tray-button
              @click="${this.selectBody}"
              icon="icons:content-copy"
              label="Copy source"
            >
            </hax-tray-button>
            <hax-tray-button
              label="Download"
              icon="icons:file-download"
              @click="${this.download}"
            >
            </hax-tray-button>
            <hax-tray-button
              @click="${this.htmlToHaxElements}"
              label="HAXSchema"
              icon="hax:code-json"
            >
            </hax-tray-button>
          </div>
        </div>
        <paper-button id="closedialog" @click="${this.closeEvent}">
          <iron-icon icon="icons:cancel" title="Close dialog"></iron-icon>
        </paper-button>
      </paper-dialog>
    `}openedChanged(e){e.detail.value||window.HaxStore.instance.openDrawer!==this||window.HaxStore.write("openDrawer",!1,this)}closeEvent(e){this.opened=!1}static get tag(){return"hax-export-dialog"}static get properties(){return{title:{type:String},opened:{type:Boolean},globalPreferences:{type:Object}}}firstUpdated(){this.dispatchEvent(new CustomEvent("hax-register-core-piece",{bubbles:!0,cancelable:!0,composed:!0,detail:{piece:"haxExport",object:this}}))}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&("object"==typeof e.detail.value?this[e.detail.property]={...e.detail.value}:this[e.detail.property]=e.detail.value)}download(e){const t=this.contentToFile(!1);this.downloadFromData(t,"html","my-new-code"),window.HaxStore.toast("HTML content downloaded")}downloadfull(e){const t=this.contentToFile(!0);this.downloadFromData(t,"html","my-new-webpage"),window.HaxStore.toast("Working offline copy downloaded")}importContent(e){const t=this.shadowRoot.querySelector("#textarea").value;window.HaxStore.toast("Content updated"),window.HaxStore.instance.activeHaxBody.importContent(t),this.close()}scrubContent(e){const t=this.shadowRoot.querySelector("#textarea").value;window.HaxStore.toast("Scrubbed, Content updated"),window.HaxStore.instance.activeHaxBody.importContent(n(t)),this.close()}selectBody(e){let t=this.shadowRoot.querySelector("#hiddentextarea");t.value=this.shadowRoot.querySelector("#textarea").value,t.removeAttribute("hidden"),t.focus(),t.select(),document.execCommand("copy"),t.setAttribute("hidden","hidden"),window.HaxStore.toast("Copied HTML content")}htmlToHaxElements(e){let t=window.HaxStore.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);var o=JSON.stringify(t,null,2);let a=this.shadowRoot.querySelector("#textarea").value,i=this.shadowRoot.querySelector("#hiddentextarea");i.removeAttribute("hidden"),i.value=o,i.focus(),i.select(),document.execCommand("copy"),i.value=a,i.setAttribute("hidden","hidden"),window.HaxStore.toast("Copied hax elements to clipboard")}contentToFile(e){let t=window.HaxStore.instance.activeHaxBody.haxToContent();var o=t;if(e){let e=window.HaxStore.instance.elementList,n="https://lrnwebcomponents.github.io/hax-body/components";o=`\n        <!DOCTYPE html>\n        <html lang="en">\n          <head>\n            <meta charset="utf-8" />\n            <meta\n              name="viewport"\n              content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes"\n            />\n            <title>hax-body demo</title>\n            <script src="${n}/@webcomponents/webcomponentsjs/webcomponents-loader.js"><\/script>\n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n        </html>\n      `;var a=["iframe","a","img","hr","p"];for(var i in e)-1===a.indexOf(i)&&(o+='<script type="module" src="'+n+"/"+i+"/"+i+'.js" />\n');o+="</head><body>",o+=t,o+="</body></html>"}return o}constructor(){super(),this.__winEvents={"hax-store-property-updated":"_haxStorePropertyUpdated"},this.title="View page source",this.fileTypes={CSV:"text/csv",JSON:"text/json",PDF:"application/pdf",TXT:"text/plain",HTML:"text/html"},this.opened=!1,this.globalPreferences={},import("../../../@polymer/paper-dialog/paper-dialog.js")}open(){import("../../../@polymer/iron-icon/iron-icon.js"),import("../../../@polymer/paper-button/paper-button.js"),import("../../code-editor/code-editor.js"),import("../../hexagon-loader/hexagon-loader.js"),this.opened=!0,this.shadowRoot.querySelector("#textarea").editorValue=this.contentToFile(!1),this.shadowRoot.querySelector("#buttons").style.display="none",this.shadowRoot.querySelector("#loading").setAttribute("loading","loading"),this.shadowRoot.querySelector("#wrapper").appendChild(this.shadowRoot.querySelector("#textarea")),setTimeout(()=>{this.shadowRoot.querySelector("#loading").removeAttribute("loading"),this.shadowRoot.querySelector("#buttons").style.display="unset"},800)}close(){this.opened=!1}}window.customElements.define(HaxExportDialog.tag,HaxExportDialog);export{HaxExportDialog};