import{LitElement,html,css}from"../../../lit-element/lit-element.js";class HaxInputMixer extends LitElement{static get styles(){return[css`
        :host {
          display: block;
          margin: 0;
          border: none;
          padding: 0;
          border: 1px solid var(--hax-color-border-outline);
        }
        .wrapper {
          background-color: #ffffff;
          color: #222222;
          display: flex;
          align-items: center;
          justify-content: space-between;
        }
        hax-context-item {
          margin: 0;
        }
        #elementoptions {
          height: inherit;
        }
        #input {
          color: var(--hax-color-text);
        }
        paper-checkbox {
          --paper-checkbox-label-color: var(--hax-color-text);
        }
        paper-textarea,
        paper-input {
          height: 40px;
          font-size: 14px;
          margin-bottom: 6px;
        }
        .input-method {
          color: var(--hax-color-text);
          padding: 0 8px;
          width: 80%;
        }
        #updatebutton {
          outline: 1px solid black;
        }
        #updatebutton:hover {
          border: none;
        }
      `]}constructor(){super(),this.value=null,this.options={},this.icon="android",this.inputMethod=null,this.__inputtextarea=!1,this.__inputtextfield=!1,this.__inputboolean=!1,this.__inputcolorpicker=!1,this.__inputflipboolean=!1,import("../../simple-colors/lib/simple-colors-picker.js"),import("../../../@polymer/paper-input/paper-textarea.js"),import("../../../@polymer/paper-input/paper-input.js"),import("../../../@polymer/paper-checkbox/paper-checkbox.js"),import("../../../@polymer/paper-tooltip/paper-tooltip.js"),import("./hax-context-item-menu.js"),import("./hax-context-item.js")}render(){return html`
      <custom-style>
        <style>
          paper-textarea,
          paper-input {
            --paper-input-container: {
              padding: 0;
              font-size: 14px;
            }
            --paper-input-container-label-floating: {
              color: var(--hax-color-text);
              font-size: 12px;
            }
            --paper-input-container-underline: {
              margin: 0;
            }
            --paper-input-container-color: var(--hax-color-text);
            --paper-input-container-focus-color: var(--hax-color-text);
            --paper-input-container-invalid-color: var(--hax-color-text);
            --paper-input-container-input-color: var(--hax-color-text);
            --paper-input-container-shared-input-style: {
              color: var(--hax-color-text);
              background: transparent;
              margin: 0;
              padding: 0;
              line-height: 14px;
              font-size: 14px;
              outline: none;
              border: none;
            }
          }
        </style>
      </custom-style>
      <div class="wrapper">
        ${this.__inputselect?html`
              <span class="input-mixer-label">${this.label}</span>
              <hax-context-item-menu
                selected-value="${this.__selectedValue}"
                @selected-value-changed="${this.__selectedValueChanged}"
                .icon="${this.icon}"
                id="input"
              >
                <slot></slot>
              </hax-context-item-menu>
            `:html``}
        <span class="input-method">
          ${this.__inputtextarea?html`
                <paper-textarea
                  id="input"
                  label="${this.label}"
                  .value="${this.value}"
                  @value-changed="${this.valueChanged}"
                  auto-validate=""
                  pattern="${this.validation}"
                  required="${this.required}"
                ></paper-textarea>
              `:html``}
          ${this.__inputtextfield?html`
                <paper-input
                  id="input"
                  type="${this.validationType}"
                  label="${this.label}"
                  .value="${this.value}"
                  @value-changed="${this.valueChanged}"
                  auto-validate=""
                  pattern="${this.validation}"
                  required="${this.required}"
                ></paper-input>
              `:html``}
          ${this.__inputboolean?html`
                <paper-checkbox
                  id="input"
                  .checked="${this.value}"
                  @checked-changed="${this.valueChanged}"
                  >${this.label}</paper-checkbox
                >
              `:html``}
          ${this.__inputflipboolean?html`
                <paper-checkbox
                  id="input"
                  .checked="${this.value}"
                  @checked-changed="${this.valueChanged}"
                  >${this.label}</paper-checkbox
                >
              `:html``}
          ${this.__inputcolorpicker?html`
                <span>${this.label}</span>
                <simple-colors-picker
                  id="input"
                  .value="${this.value}"
                  @value-changed="${this.valueChanged}"
                ></simple-colors-picker>
              `:html``}
        </span>
        <paper-tooltip for="input" position="top" offset="14">
          ${this.description}
        </paper-tooltip>
        <hax-context-item
          id="updatebutton"
          icon="subdirectory-arrow-right"
          label="Update ${this.label}"
          event-name="hax-update-tap"
        ></hax-context-item>
      </div>
    `}__selectedValueChanged(e){this.__selectedValue=e.detail.value}valueChanged(e){void 0!==e.detail.value?this.value=e.detail.value:this.value=e.detail}static get tag(){return"hax-input-mixer"}static get properties(){return{value:{type:String},label:{type:String,reflect:!0},validation:{type:String,reflect:!0},validationType:{type:String,reflect:!0,attribute:"validation-type"},required:{type:Boolean,reflect:!0},options:{type:Object},icon:{type:String,reflect:!0},description:{type:String,reflect:!0},inputMethod:{type:String,reflect:!0},propertyToBind:{type:String,reflect:!0,attribute:"property-to-bind"},slotToBind:{type:String,reflect:!0,attribute:"slot-to-bind"},__inputflipboolean:{type:Boolean},__inputcolorpicker:{type:Boolean},__inputboolean:{type:Boolean},__inputtextfield:{type:Boolean},__inputtextarea:{type:Boolean}}}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"inputMethod"==propName&&this._inputMethodChanged(this[propName],oldValue)})}firstUpdated(changedProperties){this._resetInputMethods(),setTimeout(()=>{this.addEventListener("hax-context-item-selected",this._haxContextOperation.bind(this))},0)}_inputMethodChanged(newValue,oldValue){if(null!=newValue){let method=newValue;if(this.validInputMethods().includes(method)){for(this._resetInputMethods(),this["__input"+method]=!0;null!==this.firstChild;)this.removeChild(this.firstChild);var item;if("select"===method&&void 0!==this.options)for(var val in this.options)(item=document.createElement("paper-item")).attributes.value=val,item.innerHTML=this.options[val],this.appendChild(item.cloneNode(!0));setTimeout(()=>{this.shadowRoot.querySelector("#input")&&"function"==typeof this.shadowRoot.querySelector("#input").hideMenu&&this.shadowRoot.querySelector("#input").hideMenu(),this.shadowRoot.querySelector("#input").focus()},500)}}}validInputMethods(){return["flipboolean","boolean","select","textfield","textarea","datepicker","haxupload","colorpicker","iconpicker","alt","number","code-editor","array"]}_resetInputMethods(){let methods=this.validInputMethods();for(var i=0;i<methods.length;i++)this["__input"+methods[i]]=!1}_haxContextOperation(e){switch(e.detail.eventName){case"hax-update-tap":if("boolean"==this.inputMethod)this.value=this.value;else if("flipboolean"==this.inputMethod)this.value=!this.value;else if("select"==this.inputMethod){var count=0;for(var val in this.options)count==this.__selectedValue&&(this.value=val),count++}let mixer={value:this.value,propertyToBind:this.propertyToBind,slotToBind:this.slotToBind};this.dispatchEvent(new CustomEvent("hax-input-mixer-update",{bubbles:!0,cancelable:!0,composed:!0,detail:{inputMixer:mixer}}))}}}window.customElements.define(HaxInputMixer.tag,HaxInputMixer);export{HaxInputMixer};