import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../../@polymer/polymer/lib/utils/render-status.js";import{dom}from"../../../@polymer/polymer/lib/legacy/polymer.dom.js";import"./hax-shared-styles.js";class HaxImportMixer extends PolymerElement{constructor(){super(),import("../../simple-colors/lib/simple-colors-picker.js"),import("../../../@polymer/paper-input/paper-textarea.js"),import("../../../@polymer/paper-input/paper-input.js"),import("../../../@polymer/paper-checkbox/paper-checkbox.js"),import("../../../@polymer/paper-slider/paper-slider.js"),import("../../../@polymer/paper-tooltip/paper-tooltip.js"),import("./hax-context-item-menu.js"),import("./hax-context-item.js")}static get template(){return html`
      <style includes="hax-shared-styles">
        :host {
          display: block;
          margin: 0;
          border: none;
          padding: 0;
          border: 1px solid var(--hax-color-border-outline);
        }
        .wrapper {
          background-color: #ffffff;
          color: #222222;
          display: flex;
          align-items: center;
          justify-content: space-between;
        }
        hax-context-item {
          margin: 0;
        }
        #elementoptions {
          height: inherit;
        }
        #input {
          color: var(--hax-color-text);
        }
        paper-checkbox {
          --paper-checkbox-label-color: var(--hax-color-text);
        }
        paper-textarea,
        paper-input {
          height: 40px;
          font-size: 14px;
          margin-bottom: 6px;
          --paper-input-container: {
            padding: 0;
            font-size: 14px;
          }
          --paper-input-container-label-floating: {
            color: var(--hax-color-text);
            font-size: 12px;
          }
          --paper-input-container-underline: {
            margin: 0;
          }
          --paper-input-container-color: var(--hax-color-text);
          --paper-input-container-focus-color: var(--hax-color-text);
          --paper-input-container-invalid-color: var(--hax-color-text);
          --paper-input-container-input-color: var(--hax-color-text);
          --paper-input-container-shared-input-style: {
            color: var(--hax-color-text);
            background: transparent;
            margin: 0;
            padding: 0;
            line-height: 14px;
            font-size: 14px;
            outline: none;
            border: none;
          }
        }
        .input-method {
          color: var(--hax-color-text);
          padding: 0 8px;
          width: 80%;
        }
        #updatebutton {
          outline: 1px solid black;
        }
        #updatebutton:hover {
          border: none;
        }
      </style>
      <div class="wrapper">
        <template is="dom-if" if="[[__inputselect]]">
          <span class="input-mixer-label">[[label]]</span>
          <hax-context-item-menu
            selected-value="{{__selectedValue}}"
            icon="[[icon]]"
            id="input"
          >
            <slot></slot>
          </hax-context-item-menu>
        </template>
        <span class="input-method">
          <template is="dom-if" if="[[__inputtextarea]]">
            <paper-textarea
              id="input"
              label="[[label]]"
              value="{{value}}"
              auto-validate=""
              pattern="[[validation]]"
              required="[[required]]"
            ></paper-textarea>
          </template>
          <template is="dom-if" if="[[__inputtextfield]]">
            <paper-input
              id="input"
              type="[[validationType]]"
              label="[[label]]"
              value="{{value}}"
              auto-validate=""
              pattern="[[validation]]"
              required="[[required]]"
            ></paper-input>
          </template>
          <template is="dom-if" if="[[__inputboolean]]">
            <paper-checkbox id="input" checked="{{value}}"
              >[[label]]</paper-checkbox
            >
          </template>
          <template is="dom-if" if="[[__inputflipboolean]]">
            <paper-checkbox id="input" checked="{{value}}"
              >[[label]]</paper-checkbox
            >
          </template>
          <template is="dom-if" if="[[__inputcolorpicker]]">
            <span>[[label]]</span>
            <simple-colors-picker
              id="input"
              value="{{value}}"
            ></simple-colors-picker>
          </template>
        </span>
        <paper-tooltip for="input" position="top" offset="14">
          [[description]]
        </paper-tooltip>
        <hax-context-item
          id="updatebutton"
          icon="subdirectory-arrow-right"
          label\$="Update [[label]]"
          event-name="hax-update-tap"
        ></hax-context-item>
      </div>
    `}static get tag(){return"hax-input-mixer"}static get properties(){return{value:{type:String,value:null},label:{type:String,reflectToAttribute:!0},validation:{type:String,reflectToAttribute:!0},validationType:{type:String,reflectToAttribute:!0},required:{type:Boolean,reflectToAttribute:!0},options:{type:Object,value:{},reflectToAttribute:!0},icon:{type:String,value:"android",reflectToAttribute:!0},description:{type:String,reflectToAttribute:!0},inputMethod:{type:String,value:null,reflectToAttribute:!0,observer:"_inputMethodChanged"},propertyToBind:{type:String,reflectToAttribute:!0},slotToBind:{type:String,reflectToAttribute:!0}}}ready(){super.ready(),this._resetInputMethods(),afterNextRender(this,function(){this.addEventListener("hax-context-item-selected",this._haxContextOperation.bind(this))})}_inputMethodChanged(newValue,oldValue){if(null!=newValue&&void 0!==oldValue){let method=newValue;if(this.validInputMethods().includes(method)){this._resetInputMethods(),this["__input"+method]=!0;let slot=dom(this);for(;null!==slot.firstChild;)slot.removeChild(slot.firstChild);var item;if("select"===method&&void 0!==this.options)for(var val in this.options)(item=document.createElement("paper-item")).attributes.value=val,item.innerHTML=this.options[val],slot.appendChild(item.cloneNode(!0));setTimeout(()=>{"function"==typeof this.shadowRoot.querySelector("#input").hideMenu&&this.shadowRoot.querySelector("#input").hideMenu(),this.shadowRoot.querySelector("#input").focus()},200)}}}validInputMethods(){return["flipboolean","boolean","select","textfield","textarea","datepicker","haxupload","colorpicker","iconpicker","alt","number","code-editor","array"]}_resetInputMethods(){let methods=this.validInputMethods();for(var i=0;i<methods.length;i++)this["__input"+methods[i]]=!1}_haxContextOperation(e){switch(e.detail.eventName){case"hax-update-tap":if("boolean"==this.inputMethod)this.value=this.value;else if("flipboolean"==this.inputMethod)this.value=!this.value;else if("select"==this.inputMethod){var count=0;for(var val in this.options)count==this.__selectedValue&&(this.value=val),count++}let mixer={value:this.value,propertyToBind:this.propertyToBind,slotToBind:this.slotToBind};this.dispatchEvent(new CustomEvent("hax-input-mixer-update",{bubbles:!0,cancelable:!0,composed:!0,detail:{inputMixer:mixer}}))}}}window.customElements.define(HaxImportMixer.tag,HaxImportMixer);export{HaxImportMixer};