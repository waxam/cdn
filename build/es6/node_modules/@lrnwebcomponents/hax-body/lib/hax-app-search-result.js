import{LitElement as t,html as e,css as i}from"../../../lit-element/lit-element.js";import{HAXStore as a}from"./hax-store.js";class HaxAppSearchResult extends t{constructor(){super()}static get styles(){return[i`
        :host {
          display: inline-block;
          width: 47%;
          margin: 1%;
          background-color: var(
            --hax-color-bg-accent,
            var(--simple-colors-default-theme-cyan-7, #009dc7)
          );
          color: var(--hax-color-text, #000000);
        }
        button {
          margin: 0;
          padding: 0;
          display: block;
          border-radius: 0;
          border: none;
          width: 100%;
          outline: 1px solid black;
          text-align: unset;
          opacity: 0.8;
          transition: 0.2s opacity ease-in-out, 0.2s outline-color ease-in-out;
        }
        button:hover,
        button:focus,
        button:active {
          background-color: #eeeeee;
          outline-color: var(--simple-colors-default-theme-purple-8, #8a009b);
          outline-width: 4px;
          outline-style: solid;
          opacity: 1;
        }
        .detail-wrapper {
          padding: 0px;
          overflow: hidden;
          font-family: "Noto Serif", serif;
        }
        .title {
          font-size: 12px;
          overflow: hidden;
          font-weight: bold;
          text-transform: none;
          padding: 0;
          height: 30px;
          text-align: center;
        }
        .image {
          height: 150px;
          width: 100%;
          background-color: var(--simple-colors-default-theme-cyan-7, #009dc7);
        }
        @media screen and (max-width: 1000px) {
          :host {
            width: 100%;
          }
          .title {
            font-size: 12px;
          }
        }
      `]}render(){return e`
      <button
        draggable="true"
        @click="${this._itemSelected}"
        @dragstart="${this._dragStart}"
        @dragend="${this._dragEnd}"
        title="${this.details}"
      >
        <img loading="lazy" class="image" src="${this.image}" />
        <div class="detail-wrapper">
          <div class="title">${this.title.substr(0,40)}</div>
        </div>
      </button>
    `}static get tag(){return"hax-app-search-result"}static get properties(){return{image:{type:String},title:{type:String},details:{type:String},map:{type:Object},type:{type:String}}}_dragStart(t){let e=this.cloneNode(!0);a.__dragTarget=e,t.dataTransfer&&(this.crt=e,this.crt.style.position="absolute",this.crt.style.top="-1000px",this.crt.style.right="-1000px",this.crt.style.transform="scale(0.25)",this.crt.style.opacity=".8",t.dataTransfer.effectAllowed="move",t.dataTransfer.dropEffect="move",document.body.appendChild(this.crt),t.dataTransfer.setDragImage(this.crt,0,0)),t.stopPropagation(),t.stopImmediatePropagation()}_dragEnd(t){this.crt.remove(),setTimeout(()=>{this._itemSelected(t)},0)}_itemSelected(t){var e=this.map,i=this.type;i&&null!=i&&""!=i&&"undefined"!=i||!e.source||(i=a.guessGizmoType(e));let r=a.guessGizmo(i,e,!1,!0);r.length>0?1===r.length?void 0!==r[0].tag&&(r[0].nextToActive=!0,this.dispatchEvent(new CustomEvent("hax-insert-content",{bubbles:!0,cancelable:!0,composed:!0,detail:r[0]}))):a.haxAppPicker.presentOptions(r,i,"How would you like to display this "+i+"?","gizmo"):a.toast("Sorry, HAX can't handle that link yet.")}}window.customElements.define(HaxAppSearchResult.tag,HaxAppSearchResult);export{HaxAppSearchResult};