import{LitElement as e,html as t,css as i}from"../../../lit-element/lit-element.js";class HaxAppPicker extends e{static get styles(){return[i`
        :host {
          display: block;
        }
        iron-icon:not(:defined),
        paper-button:not(:defined),
        paper-dialog:not(:defined) {
          display: none;
        }
        #closedialog {
          float: right;
          top: 15px;
          right: 0;
          position: absolute;
          padding: 8px;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          background-color: transparent;
          width: 40px;
          height: 40px;
          min-width: unset;
        }
        #dialog {
          min-width: 400px;
          min-height: 108px;
          max-height: 60vh;
          max-width: 50vw;
          overflow: hidden;
          border-radius: 16px;
          z-index: 1000000;
          border: 2px solid var(--hax-color-border-outline);
          background-color: #ffffff;
          --hax-tray-panel-accent-text: var(
            --simple-colors-default-theme-grey-1,
            #fff
          );
          --hax-tray-panel-accent: var(
            --simple-colors-default-theme-purple-8,
            #8a009b
          );
        }
        .button-list {
          display: block;
          text-align: left;
          margin: 0px;
          max-width: 50vw;
          overflow-x: hidden;
          overflow-y: auto;
          display: flex;
          justify-content: space-evenly;
          flex-wrap: wrap;
        }
        #title {
          color: var(--hax-color-menu-heading-color, black);
        }
        #title {
          padding: 16px;
          border-bottom: 2px solid var(--hax-color-border-outline);
          margin: 0;
          width: calc(100% - 32px);
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
        }
      `]}constructor(){super(),this._elements=[],this.selectionList=[],this.title="Pick an options",this.pickerType="gizmo",this.opened=!1,import("../../../@polymer/paper-button/paper-button.js"),import("../../../@polymer/iron-icon/iron-icon.js"),import("../../../@polymer/paper-dialog/paper-dialog.js"),setTimeout(()=>{this.addEventListener("iron-overlay-canceled",this.close.bind(this)),this.addEventListener("iron-overlay-closed",this.close.bind(this))},0)}render(){return t`
      <paper-dialog id="dialog" ?opened="${this.opened}">
        <h3 id="title">${this.title}</h3>
        <div class="button-list">
          ${this.selectionList.map((e,i)=>t`
              <hax-tray-button
                id="picker-item-${i}"
                @click="${this._selected}"
                data-selected="${i}"
                label="${e.title}"
                icon="${e.icon}"
                color="${e.color}"
                ?color-meaning="${2===this.selectionList.length}"
              >
              </hax-tray-button>
            `)}
        </div>
        <paper-button id="closedialog" @click="${this.closeEvent}">
          <iron-icon icon="icons:cancel" title="Close dialog"></iron-icon>
        </paper-button>
      </paper-dialog>
    `}static get tag(){return"hax-app-picker"}closeEvent(e){this.opened=!1}static get properties(){return{_elements:{type:Array},selectionList:{type:Array},title:{type:String},pickerType:{type:String,attribute:"picker-type"},opened:{type:Boolean}}}firstUpdated(e){this.dispatchEvent(new CustomEvent("hax-register-core-piece",{bubbles:!0,cancelable:!0,composed:!0,detail:{piece:"haxAppPicker",object:this}}))}updated(e){e.forEach((e,t)=>{"opened"==t&&this._openedChanged(this[t],e)})}close(){this.opened=!1}_openedChanged(e,t){e?document.body.style.overflow="hidden":(this.selectionList=[],document.body.style.overflow=null)}presentOptions(e,t="element",i="Select an option",o="gizmo"){this.title=i,this.pickerType=o;var a=[];switch(o){case"gizmo":for(var n in e)e[n].__type=t,a.push({icon:e[n].gizmo.icon,title:e[n].gizmo.title,color:e[n].gizmo.color});break;case"app":for(var n in e)a.push({icon:e[n].details.icon,title:e[n].details.title,color:e[n].details.color});break;default:a=e}this._elements=e,this.selectionList=[...a],this.opened=!0,setTimeout(()=>{this.shadowRoot.querySelector("#picker-item-0").focus()},50)}_selected(e){let t=e.target.getAttribute("data-selected");e.preventDefault(),e.stopPropagation(),void 0!==this._elements[t]&&("gizmo"==this.pickerType?(this._elements[t].replace=!0,this.dispatchEvent(new CustomEvent("hax-insert-content",{bubbles:!0,cancelable:!0,composed:!0,detail:this._elements[t]}))):"delete"==this.pickerType?"Yes"===this._elements[t].title&&(window.HaxStore.instance.activeHaxBody.activeNode!==window.HaxStore.instance.activeHaxBody.activeContainerNode?window.HaxStore.instance.activeHaxBody.haxDeleteNode(window.HaxStore.instance.activeHaxBody.activeNode,window.HaxStore.instance.activeHaxBody.activeContainerNode):window.HaxStore.instance.activeHaxBody.haxDeleteNode(window.HaxStore.instance.activeHaxBody.activeNode),window.HaxStore.toast("Element deleted",2e3)):this.dispatchEvent(new CustomEvent("hax-app-picker-selection",{bubbles:!0,cancelable:!0,composed:!0,detail:this._elements[t]}))),this.opened=!1}}window.customElements.define(HaxAppPicker.tag,HaxAppPicker);export{HaxAppPicker};