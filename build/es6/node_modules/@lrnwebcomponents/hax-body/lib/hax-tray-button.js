import{html as t,css as e}from"../../../lit-element/lit-element.js";import{SimpleColors as i}from"../../simple-colors/simple-colors.js";import"../../simple-tooltip/simple-tooltip.js";class HAXTrayButton extends i{static get tag(){return"hax-tray-button"}constructor(){super(),this.darkBg=!1,this.disabled=!1,this.mini=!1,this.wide=!1,this.eventData=null,this.eventName=null,this.icon=null,this.colorMeaning=!1,this._defaultHoverColor="",this._defaultColor="",this.accentColor="",this.hoverAccentColor=this._defaultColor,setTimeout(()=>{this.addEventListener("focusin",this._focusIn.bind(this)),this.addEventListener("focusout",this._focusOut.bind(this)),this.addEventListener("mouseover",this._focusIn.bind(this)),this.addEventListener("mouseout",this._focusOut.bind(this))},0)}static get properties(){return{...super.properties,voiceCommand:{type:String,attribute:"voice-command"},darkBg:{type:Boolean,reflect:!0,attribute:"dark-bg"},iconDark:{type:Boolean},mini:{type:Boolean,reflect:!0},colorMeaning:{type:Boolean,attribute:"color-meaning"},wide:{type:Boolean,reflect:!0},disabled:{type:Boolean,reflect:!0},index:{type:Number},eventName:{type:String,attribute:"event-name"},eventData:{type:String,attribute:"event-data"},hoverAccentColor:{type:String,attribute:"hover-accent-color"},label:{type:String},icon:{type:String}}}static get styles(){return[...super.styles,e`
        :host {
          --hax-tray-panel-accent-text: var(
            --simple-colors-default-theme-grey-1,
            #fff
          );
          --hax-tray-panel-accent: var(
            --simple-colors-default-theme-purple-8,
            #8a009b
          );
          --simple-fields-accent-color: var(
            --simple-colors-default-theme-purple-8,
            #8a009b
          );
          display: inline-flex;
          flex-direction: column;
          align-items: center;
          margin: 1px 0;
          transition: all 0.5ms ease-in-out;
        }
        :host([disabled]) {
          pointer-events: none;
          opacity: 0.2;
        }
        simple-icon {
          --simple-icon-height: 20px;
          --simple-icon-width: 20px;
          transform: var(--hax-tray-button-rotate);
        }
        .item-label {
          margin-top: 4px;
          width: 60px;
          font-size: 10px;
          line-height: 10px;
          text-align: center;
          text-overflow: ellipsis;
          overflow: hidden;
          word-break: break-word;
        }
        :host([wide]) {
          display: block;
          width: 100%;
        }
        :host([wide]) .item-label {
          width: unset;
        }
        :host([wide]) button {
          align-items: center;
          justify-content: space-around;
        }
        .flip-icon {
          transform: rotateY(180deg);
        }
        button {
          text-transform: none;
          color: var(
            --hax-quick-button-accent-text,
            var(--simple-colors-default-theme-grey-12, #000)
          );
          background-color: var(
            --hax-quick-button-accent,
            var(--simple-colors-default-theme-grey-2, #eee)
          );
          border: 1px solid
            var(
              --hax-quick-button-accent,
              var(--simple-colors-default-theme-grey-3, #dddddd)
            );
          min-width: unset;
          cursor: pointer;
          align-items: center;
          height: 40px;
          display: flex;
          width: 100%;
          padding: 4px;
          margin: 0px;
          border-radius: 0;
          transition: all 0.5ms ease-in-out;
        }
        button:active,
        button:focus,
        button:hover {
          color: var(
            --hax-tray-panel-accent-text,
            var(--simple-colors-default-theme-grey-1, #fff)
          );
          background-color: var(
            --hax-tray-panel-accent,
            var(
              --hax-contextual-action-color,
              var(--simple-colors-default-theme-grey-12, #333333)
            )
          );
          border-color: var(
            --hax-tray-panel-accent,
            var(
              --hax-contextual-action-color,
              var(--simple-colors-default-theme-grey-12, #333333)
            )
          );
          transition: all 0.5ms ease-in-out;
        }
        button simple-icon {
          display: inline-block;
        }
        :host([mini]) {
          height: 30px;
          width: 30px;
        }
        :host([mini]) button {
          height: 30px;
          width: 30px;
        }
        :host([mini]) button simple-icon {
          --simple-icon-height: 18px;
          --simple-icon-width: 18px;
        }
        .item-title {
          margin-top: 8px;
          color: var(--simple-colors-default-theme-grey-12, #000);
          width: 100%;
          white-space: nowrap;
          overflow: hidden;
          text-overflow: ellipsis;
          font-size: 12px;
          line-height: 12px;
          height: 12px;
          text-align: center;
        }
        .button-inner {
          display: flex;
        }
        simple-tooltip {
          font-size: 16px;
          --simple-tooltip-background: var(
            --simple-colors-default-theme-grey-12,
            #000
          );
          --simple-tooltip-opacity: 1;
          --simple-tooltip-text-color: var(
            --simple-colors-default-theme-grey-1,
            #dddddd
          );
          --simple-tooltip-delay-in: 0;
          --simple-tooltip-duration-in: 100ms;
          --simple-tooltip-duration-out: 0;
          --simple-tooltip-border-radius: 0;
          --simple-tooltip-font-size: 14px;
        }
      `]}render(){return t`
      <button
        title="${this.label}"
        ?disabled="${this.disabled}"
        @click="${this._fireEvent}"
      >
        ${this.icon?t`
              <div class="button-inner">
                <simple-icon
                  icon="${this.icon}"
                  accent-color="${this.colorMeaning?this.accentColor:"grey"}"
                  contrast="4"
                  ?dark="${!!this.colorMeaning||this.iconDark}"
                ></simple-icon>
              </div>
            `:t``}
        ${this.mini?t``:t` <div class="item-label">${this.label}</div> `}
      </button>
      ${this.mini?t` <simple-tooltip>${this.label}</simple-tooltip> `:""}
    `}_focusIn(t){this.hoverAccentColor&&(this.accentColor=this.hoverAccentColor===this._defaultColor?this._defaultHoverColor:this.hoverAccentColor),(this.hoverAccentColor||this.darkBg)&&(this.iconDark=!0)}_focusOut(t){this.colorMeaning?this.accentColor=this._color:this.accentColor=this._defaultColor,(this.hoverAccentColor||this.darkBg)&&(this.iconDark=!1)}_voiceEvent(t){this._fireEvent(t),this.click()}_fireEvent(t){this.dispatchEvent(new CustomEvent("hax-tray-button-click",{bubbles:!0,cancelable:!0,composed:!0,detail:{eventName:this.eventName,index:this.index,value:this.eventData}}))}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this._color=this.accentColor}updated(t){super.updated&&super.updated(t),t.forEach((t,e)=>{"voiceCommand"==e&&this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: "+this[e],context:this,callback:"_voiceEvent"}})),"colorMeaning"==e&&this.colorMeaning&&(this.accentColor=this._color)})}}customElements.define(HAXTrayButton.tag,HAXTrayButton);export{HAXTrayButton};