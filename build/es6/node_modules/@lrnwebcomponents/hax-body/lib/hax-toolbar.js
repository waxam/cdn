import{LitElement,html,css}from"../../../lit-element/lit-element.js";class HaxToolbar extends LitElement{static get styles(){return[css`
        :host {
          display: flex;
          justify-content: flex-start;
          visibility: visible;
          transition: 0.3s all ease;
          box-sizing: border-box;
          height: 36px;
          pointer-events: all;
        }
        :host *[hidden] {
          display: none;
        }
        .wrapper {
          display: flex;
          border: 1px solid var(--hax-color-border-outline, black);
          color: #222222;
          background-color: #ffffff;
          height: 35px;
          align-items: center;
          padding: 1px;
          margin-top: -2px;
        }
        :host .wrapper ::slotted(*) {
          pointer-events: all;
        }
        .close-cap {
          margin: 10px 10px 0 8px;
          display: flex;
          padding: 0;
        }
        :host * ::slotted(hax-context-item:hover),
        :host * ::slotted(hax-context-item-textop:hover),
        :host * ::slotted(hax-context-item-menu:hover),
        hax-context-item:hover,
        hax-context-item-textop:hover,
        hax-context-item-menu:hover {
          z-index: 2;
        }
        #moremenu hax-context-item,
        #moremenu ::slotted(paper-item),
        paper-item {
          height: 32px;
          padding: 0;
          min-width: 100px;
        }

        #moremenu hax-context-item:hover,
        :host #moremenu ::slotted(paper-item:hover),
        paper-item:hover {
          background-color: var(--hax-color-menu-heading-bg);
          cursor: pointer;
        }
        paper-slider {
          background-color: var(--hax-color-bg-accent);
          color: #ffffff;
          font-weight: bold;
          height: 36px;
          min-width: 100px;
          --paper-slider-font-color: white;
          --paper-slider-active-color: var(--hax-color-accent1);
          --paper-slider-knob-color: var(--hax-color-accent1);
          --paper-slider-pin-start-color: var(--hax-color-accent1);
          --paper-slider-pin-color: var(--hax-color-accent1);
        }
        .convert-button {
          border-top: 1px solid var(--hax-color-bg-accent);
        }
      `]}constructor(){super(),this.hideTransform=!1,this.selected=!1,this.haxProperties={},this.hideMore=!1,this.size=100,this.justifyIcon="editor:format-align-left",this.inline=!1,this.justifyValue="",import("../../../@polymer/paper-slider/paper-slider.js"),import("../../../@polymer/paper-tooltip/paper-tooltip.js"),import("../../../@polymer/paper-item/paper-item.js"),import("../../../@polymer/iron-icons/iron-icons.js"),import("../../../@polymer/iron-icons/editor-icons.js"),import("./hax-toolbar-item.js"),import("./hax-toolbar-menu.js"),import("./hax-context-item.js"),import("./hax-context-item-menu.js"),setTimeout(()=>{this.addEventListener("hax-context-item-selected",this._haxContextOperation.bind(this))},0)}render(){return html`
      <hax-context-item
        ?hidden="${this.inline}"
        mini
        light
        icon="close"
        label="Hide menu"
        event-name="close-menu"
        class="close-cap"
        direction="left"
      ></hax-context-item>
      <div class="wrapper">
        <hax-context-item-menu
          ?hidden="${!this.haxProperties.canPosition}"
          @selected-value-changed="${this.justifyValueChanged}"
          id="justify"
          icon="${this.justifyIcon}"
          label="Alignment"
        >
          <hax-context-item
            menu
            icon="editor:format-align-left"
            event-name="hax-align-left"
            >Left</hax-context-item
          >
          <hax-context-item
            menu
            icon="editor:format-align-center"
            event-name="hax-align-center"
            >Center</hax-context-item
          >
        </hax-context-item-menu>
        <paper-slider
          ?hidden="${!this.haxProperties.canScale}"
          id="slider"
          pin
          min="${this.haxProperties.canScale&&this.haxProperties.canScale.min?this.haxProperties.canScale.min:12.5}"
          step="${this.haxProperties.canScale&&this.haxProperties.canScale.step?this.haxProperties.canScale.step:12.5}"
          max="${this.haxProperties.canScale&&this.haxProperties.canScale.max?this.haxProperties.canScale.max:100}"
          value="${this.size}"
          @immediate-value-changed="${this.sizeChanged}"
          @value-changed="${this.sizeChanged}"
        ></paper-slider>
        <paper-tooltip
          ?hidden="${this.inline}"
          for="slider"
          position="top"
          offset="10"
        >
          Resize
        </paper-tooltip>
        <slot name="primary"></slot>
        <hax-context-item
          ?hidden="${this.hideTransform}"
          icon="hax:bricks"
          label="Change type"
          event-name="grid-plate-convert"
        ></hax-context-item>
        <hax-context-item
          ?hidden="${this.inline}"
          icon="delete"
          label="Remove"
          event-name="grid-plate-delete"
        ></hax-context-item>
        <hax-context-item-menu
          ?hidden="${this.hideMode}"
          icon="more-vert"
          label="More operations"
          id="moremenu"
          event-name="grid-plate-op"
          reset-on-select
        >
          <paper-item value="" hidden></paper-item>
          <slot name="more"></slot>
          <hax-context-item-textop
            menu
            icon="icons:content-copy"
            event-name="grid-plate-duplicate"
            >Duplicate</hax-context-item-textop
          >
        </hax-context-item-menu>
      </div>
    `}sizeChanged(e){this.size=e.detail.value}justifyValueChanged(e){this.justifyValue=e.detail}static get tag(){return"hax-toolbar"}static get properties(){return{hideTransform:{type:Boolean,attribute:"hide-transform"},selected:{type:Boolean,reflect:!0},haxProperties:{type:Object,attribute:"hax-properties"},hideMore:{type:Boolean,attribute:"hide-more"},size:{type:Number},justifyIcon:{type:String,attribute:"justify-icon"},inline:{type:Boolean,reflect:!0},justifyValue:{type:String,attribute:"justify-value"}}}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"haxProperties"==propName&&this._haxPropertiesChanged(this[propName],oldValue),"size"==propName&&this.dispatchEvent(new CustomEvent("size-changed",{detail:this[propName]})),"justifyValue"==propName&&this.dispatchEvent(new CustomEvent("justify-value-changed",{detail:this[propName]}))})}_haxPropertiesChanged(newValue,oldValue){void 0!==window.HaxStore.instance.activeNode&&(window.HaxStore.instance.isTextElement(window.HaxStore.instance.activeNode)||"HR"==window.HaxStore.instance.activeNode.tagName?this.hideTransform=!0:this.hideTransform=!1,""!=window.HaxStore.instance.activeNode.style.width?this.size=window.HaxStore.instance.activeNode.style.width.replace("%",""):this.size=100,"0px auto"==window.HaxStore.instance.activeNode.style.margin&&"block"==window.HaxStore.instance.activeNode.style.display?(this.justifyValue="hax-align-center",this.justifyIcon="editor:format-align-center"):(this.justifyValue="hax-align-left",this.justifyIcon="editor:format-align-left"))}_haxContextOperation(e){let detail=e.detail;switch(detail.eventName){case"hax-align-left":case"hax-align-center":this.justifyIcon=detail.target.icon;break;case"close-menu":setTimeout(()=>{this.shadowRoot.querySelector("#moremenu").shadowRoot.querySelector("#menu").hideMenu(),this.shadowRoot.querySelector("#justify").shadowRoot.querySelector("#menu").hideMenu()},200)}}}window.customElements.define(HaxToolbar.tag,HaxToolbar);export{HaxToolbar};