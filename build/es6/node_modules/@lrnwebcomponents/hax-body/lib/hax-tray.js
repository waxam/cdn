import{LitElement,html,css}from"../../../lit-element/lit-element.js";import{winEventsElement,camelCaseToDash,wipeSlot}from"../../utils/utils.js";import"../../a11y-collapse/lib/a11y-collapse-group.js";import"../../a11y-collapse/a11y-collapse.js";class HaxTray extends(winEventsElement(LitElement)){static get tag(){return"hax-tray"}constructor(){super(),this.__winEvents={"hax-store-property-updated":"_haxStorePropertyUpdated"},this.activeValue={settings:{layout:{__position:"hax-align-left",__scale:100},configure:{},advanced:{}}},this.collapsed=!1,this.activeTab="item-0",this.activeSchema=[],this.canUndo=!0,this.canRedo=!0,this.elementAlign="right",this.activeTagName="Select an element to configure",this.activeTagIcon="icons:settings",this.__setup=!1,setTimeout(()=>{import("./hax-tray-button.js"),import("../../../@polymer/iron-icon/iron-icon.js"),import("../../../@polymer/iron-icons/iron-icons.js"),import("../../../@polymer/iron-icons/editor-icons.js"),import("../../../@polymer/iron-icons/device-icons.js"),import("../../../@polymer/iron-icons/hardware-icons.js"),import("../../../@polymer/iron-icons/communication-icons.js"),import("../../../@polymer/iron-icons/social-icons.js"),import("../../../@polymer/iron-icons/av-icons.js"),import("../../../@polymer/iron-icons/maps-icons.js"),import("../../../@polymer/iron-icons/places-icons.js"),import("../../../@polymer/paper-slider/paper-slider.js"),import("../../md-extra-icons/md-extra-icons.js"),import("../../hax-iconset/hax-iconset.js"),import("../../lrn-icons/lrn-icons.js"),import("./hax-tray-upload.js"),import("../../simple-fields/simple-fields.js"),this.addEventListener("hax-tray-button-click",this._processTrayEvent.bind(this)),import("./hax-gizmo-browser.js"),import("./hax-app-browser.js"),import("./hax-blox-browser.js"),import("./hax-stax-browser.js")},0)}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&("globalPreferences"!==e.detail.property&&"activeGizmo"!==e.detail.property&&"activeNode"!==e.detail.property||(this[e.detail.property]={}),this[e.detail.property]=e.detail.value)}static get styles(){return[css`
        :host {
          display: block;
          z-index: 1000;
          position: absolute;
          transition: 0.2s all ease-in-out;
        }
        .wrapper {
          color: var(--hax-color-text, black);
          position: fixed;
          top: 0;
          background-color: transparent;
          font-size: 20px;
          width: var(---hax-tray-width, 300px);
          transition: 0.2s all ease-in-out;
          opacity: 0;
          visibility: hidden;
          right: 0;
          pointer-events: none;
        }
        :host([edit-mode]) .wrapper {
          opacity: 1;
          visibility: visible;
          right: 0;
          pointer-events: all;
        }
        :host([edit-mode][collapsed]) a11y-collapse-group {
          right: -100vw;
        }
        :host([edit-mode][element-align="left"]) .wrapper {
          left: 0;
          right: unset;
        }
        :host([edit-mode][element-align="left"]) a11y-collapse-group {
          left: 0;
          right: unset;
        }
        :host([edit-mode][element-align="left"]) #toggle-tray-size {
          --hax-tray-button-rotate: rotate(-180deg);
        }
        /** default is right so lets support left too */
        :host([edit-mode][element-align="left"][collapsed])
          a11y-collapse-group {
          right: unset;
          left: -100vw;
        }
        :host([edit-mode][element-align="left"]) .ops,
        :host([edit-mode][element-align="left"]) .quick,
        :host([edit-mode][element-align="left"]) .quick-buttons {
          flex-direction: row-reverse;
        }
        :host([element-align="left"]) #toggle-element-align {
          --hax-tray-button-rotate: rotate(-90deg) scaleX(-1) !important;
        }
        :host([element-align="right"]) #toggle-element-align {
          --hax-tray-button-rotate: rotate(90deg) !important;
        }
        hax-tray-button,
        a11y-collapse,
        a11y-collapse-group,
        hax-app-browser,
        hax-gizmo-browser {
          transition: 0.2s all ease-in-out;
          opacity: 1;
          visibility: visible;
        }
        hax-tray-button:not(:defined),
        a11y-collapse:not(:defined),
        a11y-collapse-group:not(:defined),
        hax-app-browser:not(:defined),
        hax-gizmo-browser:not(:defined) {
          opacity: 0;
          visibility: hidden;
        }
        *[hidden] {
          display: none;
        }
        a11y-collapse-group {
          position: absolute;
          top: 32px;
          right: 0;
          font-size: 14px;
          margin: 0;
          background-color: white;
          transition: 0.2s all ease-in-out;
        }
        a11y-collapse {
          background-color: white;
          font-size: 11px;
          --a11y-tabs-content-padding: 0;
          width: calc(var(---hax-tray-width, 300px) - 2px);
          --a11y-collapse-heading-background-color: var(
            --simple-colors-default-theme-grey-1
          );
          --a11y-collapse-padding-top: 0px;
          --a11y-collapse-padding-right: 0px;
          --a11y-collapse-padding-bottom: 0px;
          --a11y-collapse-padding-left: 0px;
        }
        a11y-collapse:not([expanded]) div[slot="content"] {
          display: none;
        }
        a11y-collapse div[slot="heading"] {
          cursor: pointer;
          font-size: 16px;
        }
        a11y-collapse:hover {
          --a11y-collapse-heading-background-color: var(
            --simple-colors-default-theme-blue-grey-1
          );
        }
        a11y-collapse[expanded] {
          --a11y-collapse-heading-background-color: var(
            --simple-colors-default-theme-blue-grey-2
          );
        }
        a11y-collapse[disabled] {
          --a11y-collapse-heading-background-color: var(
            --simple-colors-default-theme-grey-5
          );
          cursor: not-allowed;
        }
        a11y-collapse[disabled] div[slot="heading"] {
          cursor: not-allowed !important;
          opacity: 0.6;
        }
        #settingscollapse div[slot="content"] {
          padding: 0;
          margin: 0;
        }
        a11y-collapse[expanded] div[slot="content"] {
          min-height: 300px;
          max-height: 70vh;
          overflow: auto;
        }
        iron-icon {
          margin-right: 8px;
        }
        .quick-buttons {
          width: var(---hax-tray-width, 300px);
          display: flex;
          background-color: black;
          justify-content: space-between;
        }
        .quick-buttons .ops {
          display: flex;
          justify-content: flex-start;
        }
        .quick-buttons .quick {
          display: flex;
          justify-content: flex-end;
        }
        div[slot="heading"] {
          margin: 0;
          padding: 10px;
        }
        :host([element-align="right"]) #button {
          right: 0;
        }
        :host([element-align="left"]) #button {
          left: 0;
        }

        #button {
          position: fixed;
          top: 0;
          visibility: visible;
          z-index: 1000;
          margin: 0;
        }
        :host([edit-mode]) #button {
          visibility: hidden;
          opacity: 0;
        }
        #button:hover {
          opacity: 1;
        }
        .active-op-name {
          display: inline-flex;
          vertical-align: text-bottom;
          padding: 4px 2px;
          max-width: 60px;
          font-size: 11px;
          overflow: hidden;
          text-align: center;
          color: white;
        }
        /** This is mobile layout for controls */
        @media screen and (max-width: 800px) {
          .ops,
          .quick,
          .quick-buttons {
            flex-direction: row-reverse;
          }
          .wrapper {
            top: 0;
            left: 0;
            right: 0;
            margin: 0 !important;
          }
          .quick-buttons {
            position: relative;
            z-index: 1;
          }
          #toggle-element-align {
            display: none;
          }
          #toggle-tray-size {
            --hax-tray-button-rotate: rotate(-90deg) !important;
          }
          :host([edit-mode][collapsed]) a11y-collapse-group {
            top: -200vh;
            left: unset !important;
            right: unset !important;
          }
        }
        @media screen and (max-width: 600px) {
          :host([edit-mode]) .hide-small {
            display: none;
          }
        }
      `]}render(){return html`
      ${this.hidePanelOps?"":html`
            <hax-tray-button
              voice-command="edit page"
              .data-opened="${this.editMode}"
              @click="${this._clickEditButton}"
              icon="create"
              id="button"
              color="black"
              label="${this.__tipText}"
            ></hax-tray-button>
          `}
      <div class="wrapper">
        <div class="quick-buttons">
          <div class="ops">
            ${this.hidePanelOps?"":html`
                  <hax-tray-button
                    mini
                    @click="${this._clickSaveButton}"
                    icon="save"
                    id="haxsavebutton"
                    label="${this.__tipText}"
                    color="green"
                    event-name="save"
                    voice-command="save (content)(page)"
                    color-meaning
                  ></hax-tray-button>
                  <hax-tray-button
                    mini
                    icon="cancel"
                    id="haxcancelbutton"
                    label="Cancel"
                    event-name="cancel"
                    color="red"
                    voice-command="cancel"
                    color-meaning
                  ></hax-tray-button>
                `}
            <hax-tray-button
              mini
              voice-command="toggle menu"
              id="toggle-tray-size"
              event-name="toggle-tray-size"
              icon="${this.traySizeIcon}"
              label="${this.traySizeText}"
            ></hax-tray-button>
            <hax-tray-button
              mini
              voice-command="toggle alignment"
              id="toggle-element-align"
              event-name="toggle-element-align"
              icon="image:photo-size-select-small"
              label="${this.menuAlignName}"
            ></hax-tray-button>
          </div>
          <div class="quick">
            <slot name="tray-buttons-pre"></slot>
            <hax-tray-button
              mini
              icon="hax:paragraph"
              label="Insert paragraph"
              event-name="insert-tag"
              event-data="p"
              voice-command="insert (text)(paragraph)"
              class="hide-small"
            ></hax-tray-button>
            <hax-tray-button
              mini
              icon="hax:h2"
              label="Insert header"
              event-name="insert-tag"
              event-data="h2"
              event-content="Header"
              voice-command="insert header"
              class="hide-small"
            ></hax-tray-button>
            <hax-tray-button
              mini
              hidden
              icon="image:image"
              label="Insert image"
              event-name="insert-tag"
              event-properties='{"src":"https://haxtheweb.org/assets/banner.jpg"}'
              event-data="img"
              voice-command="insert image"
              class="hide-small"
            ></hax-tray-button>
            <hax-tray-button
              mini
              icon="hax:hr"
              label="Insert horizontal line"
              event-name="insert-tag"
              event-data="hr"
              event-properties='{"style":"width:75%;"}'
              voice-command="insert horizontal line"
              class="hide-small"
            ></hax-tray-button>
            <hax-tray-button
              mini
              event-name="open-export-dialog"
              icon="code"
              label="View page source"
              voice-command="view (page) source"
            ></hax-tray-button>
            <hax-tray-button
              mini
              icon="icons:undo"
              hidden
              ?disabled="${!this.canUndo}"
              label="Undo previous action"
              event-name="undo"
              voice-command="undo"
              class="hide-small"
            ></hax-tray-button>
            <hax-tray-button
              mini
              icon="icons:redo"
              hidden
              ?disabled="${!this.canRedo}"
              label="Redo previous action"
              event-name="redo"
              voice-command="redo"
              class="hide-small"
            ></hax-tray-button>
            <hax-tray-button
              mini
              ?hidden="${this.hidePreferencesButton}"
              event-name="open-preferences-dialog"
              icon="settings"
              label="Advanced settings"
              voice-command="open preferences"
            ></hax-tray-button>
          </div>
        </div>
        <a11y-collapse-group radio>
          <slot name="tray-collapse-pre"></slot>
          <a11y-collapse
            id="addcollapse"
            accordion
            @expand="${this._gizmoBrowserRefresh}"
          >
            <div slot="heading">
              <iron-icon icon="icons:add"></iron-icon> Add Content
            </div>
            <div slot="content">
              <hax-tray-upload></hax-tray-upload>
              <hax-gizmo-browser id="gizmobrowser"></hax-gizmo-browser>
            </div>
          </a11y-collapse>
          <a11y-collapse id="settingscollapse" accordion>
            <div slot="heading">
              <iron-icon icon="${this.activeTagIcon}"></iron-icon> ${this.activeTagName}
            </div>
            <div slot="content">
              <simple-fields id="settingsform"></simple-fields>
            </div>
          </a11y-collapse>
          <a11y-collapse
            id="searchapps"
            accordion
            @expand="${this._appBrowserRefresh}"
          >
            <div slot="heading">
              <iron-icon icon="icons:search"></iron-icon> Search
            </div>
            <div slot="content">
              <hax-app-browser id="appbrowser"></hax-app-browser>
            </div>
          </a11y-collapse>
          <a11y-collapse
            id="templateslayouts"
            accordion
            @expand="${this._refreshLists}"
          >
            <div slot="heading">
              <iron-icon icon="hax:templates"></iron-icon>Templates & Layouts
            </div>
            <div slot="content">
              <hax-blox-browser id="bloxbrowser"></hax-blox-browser>
              <hax-stax-browser id="staxbrowser"></hax-stax-browser>
            </div>
          </a11y-collapse>
          <slot name="tray-collapse-post"></slot>
        </a11y-collapse-group>
      </div>
    `}__simpleFieldsClick(e){try{this.activeTab=this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("eco-json-schema-tabs").shadowRoot.querySelector("a11y-tabs").activeTab}catch(e){this.activeTab="item-0"}}_gizmoBrowserRefresh(e){setTimeout(()=>{this.shadowRoot.querySelector("#gizmobrowser")&&this.shadowRoot.querySelector("#gizmobrowser").resetBrowser()},0)}_appBrowserRefresh(e){this.shadowRoot.querySelector("#appbrowser")&&this.shadowRoot.querySelector("#appbrowser").resetBrowser()}_refreshLists(e){this.shadowRoot.querySelector("#bloxbrowser").bloxList=[...window.HaxStore.instance.bloxList],this.shadowRoot.querySelector("#staxbrowser").staxList=[...window.HaxStore.instance.staxList]}_processTrayEvent(e){let detail=e.detail;switch(detail.eventName){case"search-selected":this.dispatchEvent(new CustomEvent("hax-search-source-updated",{bubbles:!0,cancelable:!0,composed:!0,detail:detail.index}));break;case"insert-stax":this.dispatchEvent(new CustomEvent("hax-insert-content-array",{bubbles:!0,cancelable:!0,composed:!0,detail:e.path[0].stax}));break;case"insert-blox":let content="";for(var i=0;i<e.path[0].blox.length;i++){let node=window.HaxStore.haxElementToNode(e.path[0].blox[i].tag,e.path[0].blox[i].content,e.path[0].blox[i].properties);content+=window.HaxStore.nodeToContent(node)}let blox={tag:"grid-plate",properties:{layout:e.path[0].layout},content};this.dispatchEvent(new CustomEvent("hax-insert-content",{bubbles:!0,cancelable:!0,composed:!0,detail:blox}));break;case"insert-tag":let gizmo={tag:detail.value},properties=JSON.parse(e.path[0].getAttribute("event-properties")),innerContent=e.path[0].getAttribute("event-content");null==properties&&(properties={}),null==innerContent&&(innerContent="");let element=window.HaxStore.haxElementPrototype(gizmo,properties,innerContent);this.dispatchEvent(new CustomEvent("hax-insert-content",{bubbles:!0,cancelable:!0,composed:!0,detail:element}));break;case"open-preferences-dialog":window.HaxStore.write("openDrawer",window.HaxStore.instance.haxPreferences,this);break;case"toggle-element-align":this.elementAlign="right"===this.elementAlign?"left":"right";break;case"toggle-tray-size":this.collapsed=!this.collapsed;break;case"open-export-dialog":window.HaxStore.write("openDrawer",window.HaxStore.instance.haxExport,this);break;case"undo":document.execCommand("undo");break;case"redo":document.execCommand("redo");break;case"cancel":window.HaxStore.write("editMode",!1,this),this.dispatchEvent(new CustomEvent("hax-cancel",{bubbles:!0,cancelable:!0,composed:!0,detail}))}}static get properties(){return{...super.properties,__tipText:{type:String},menuAlignName:{type:String},offsetMargin:{type:String},collapsed:{type:Boolean,reflect:!0},traySizeIcon:{type:String},traySizeText:{type:String},activeValue:{type:Object},activeSchema:{type:Object},elementAlign:{type:String,reflect:!0,attribute:"element-align"},light:{type:Boolean,reflect:!0},canUndo:{type:Boolean,attribute:"can-undo"},canRedo:{type:Boolean,attribute:"can-redo"},isDirty:{type:Boolean,attribute:"is-dirty"},hidePreferencesButton:{type:Boolean,reflect:!0,attribute:"hide-preferences-button"},hidePanelOps:{type:Boolean,reflect:!0,attribute:"hide-panel-ops"},globalPreferences:{type:Object},activeNode:{type:Object},activeTagIcon:{type:String},activeTagName:{type:String},activeGizmo:{type:Object},editMode:{type:Boolean,reflect:!0,attribute:"edit-mode"}}}firstUpdated(changedProperties){super.firstUpdated&&super.firstUpdated(changedProperties),this.__setup||(this.__setup=!0,this.shadowRoot.querySelector("#settingsform").addEventListener("click",this.__simpleFieldsClick.bind(this)),this.shadowRoot.querySelector("#settingsform").addEventListener("value-changed",this.__valueChangedEvent.bind(this)),this.dispatchEvent(new CustomEvent("hax-register-core-piece",{bubbles:!0,cancelable:!0,composed:!0,detail:{piece:"haxTray",object:this}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) add content (menu)",context:this.shadowRoot.querySelector('#addcollapse div[slot="heading"]'),callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) element settings (menu)",context:this.shadowRoot.querySelector('#settingscollapse div[slot="heading"]'),callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) search (menu)",context:this.shadowRoot.querySelector('#searchapps div[slot="heading"]'),callback:"click"}})),this.dispatchEvent(new CustomEvent("hax-add-voice-command",{bubbles:!0,composed:!0,cancelable:!1,detail:{command:":name: (collapse)(open)(expand)(toggle) templates (menu)",context:this.shadowRoot.querySelector('#templateslayouts div[slot="heading"]'),callback:"click"}})))}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"editMode"==propName&&this._editModeChanged(this[propName],oldValue),"offsetMargin"==propName&&(this.shadowRoot.querySelector(".wrapper").style.margin=this.offsetMargin),"collapsed"==propName&&(this[propName]?(this.traySizeIcon="hax:hax:arrow-expand-left",this.traySizeText="Expand",this.shadowRoot.querySelector("a11y-collapse-group").setAttribute("aria-disabled","true"),this.shadowRoot.querySelector("a11y-collapse-group").setAttribute("tabindex","-1"),this._editModeChanged(this.editMode)):(this.traySizeIcon="hax:hax:arrow-expand-right",this.traySizeText="Collapse",this.shadowRoot.querySelector("a11y-collapse-group").removeAttribute("aria-disabled"),this.shadowRoot.querySelector("a11y-collapse-group").removeAttribute("tabindex"))),"elementAlign"==propName&&("left"==this[propName]?this.menuAlignName="Right align menu":this.menuAlignName="Left align menu"),"activeGizmo"==propName&&(this.activeGizmo?(this.activeTagName=this.activeGizmo.title+" Settings",this.activeTagIcon=this.activeGizmo.icon):(this.activeTagName="Select an element",this.activeTagIcon="icons:settings",this.shadowRoot.querySelector("#addcollapse").expanded||this.shadowRoot.querySelector('#addcollapse div[slot="heading"]').click())),"activeNode"==propName&&(this.activeNode&&this.activeNode.tagName?(this.shadowRoot.querySelector("#settingscollapse").disabled=!1,this.shadowRoot.querySelector("#settingscollapse").expanded||this.shadowRoot.querySelector('#settingscollapse div[slot="heading"]').click(),this.activeHaxElement=window.HaxStore.nodeToHaxElement(this.activeNode,null),this._setupForm()):(this.activeTagName="Select an element to configure",this.activeTagIcon="icons:settings",this.shadowRoot.querySelector("#settingscollapse").disabled=!0,this.shadowRoot.querySelector("#addcollapse").expanded||this.shadowRoot.querySelector('#addcollapse div[slot="heading"]').click()))})}_setupForm(){let activeNode=this.activeNode;if(this.activeValue={settings:{layout:{__position:"hax-align-left",__scale:100},configure:{},advanced:{}}},this.shadowRoot.querySelector("#settingsform").fields={},this.shadowRoot.querySelector("#settingsform").value={},activeNode.tagName&&window.HaxStore.instance.elementList[activeNode.tagName.toLowerCase()]){let props=window.HaxStore.instance.elementList[activeNode.tagName.toLowerCase()];for(var property in void 0===props.gizmo.title?this.humanName=activeNode.tagName.replace("-"," ").toLowerCase():this.humanName=props.gizmo.title,this.activeHaxElement.properties)props.settings.configure.forEach(el=>{el.property===property&&(this.activeValue.settings.configure[property]=this.activeHaxElement.properties[property]),el.attribute===property&&(this.activeValue.settings.configure[property]=this.activeHaxElement.properties[property]),el.slot===property&&(this.activeValue.settings.configure[property]=this.activeHaxElement.properties[property])}),props.settings.advanced.forEach(el=>{el.property===property&&(this.activeValue.settings.advanced[property]=this.activeHaxElement.properties[property]),el.attribute===property&&(this.activeValue.settings.advanced[property]=this.activeHaxElement.properties[property]),el.slot===property&&(this.activeValue.settings.advanced[property]=this.activeHaxElement.properties[property])});let tmp=document.createElement("div");tmp.innerHTML=this.activeHaxElement.content,tmp.childNodes.forEach(el=>{1===el.nodeType&&"undefined"!==el.innerHTML&&(props.settings.configure.forEach(prop=>{prop.slot===el.getAttribute("slot")?this.activeValue.settings.configure[prop.slot]=el.innerHTML:""!=prop.slot||null!=el.getAttribute("slot")&&"null"!=el.getAttribute("slot")||(this.activeValue.settings.configure[prop.slot]=el.innerHTML)}),props.settings.advanced.forEach(prop=>{prop.slot===el.getAttribute("slot")?this.activeValue.settings.advanced[prop.slot]=el.innerHTML:""!=prop.slot||null!=el.getAttribute("slot")&&"null"!=el.getAttribute("slot")||(this.activeValue.settings.advanced[prop.slot]=el.innerHTML)}))}),""!=activeNode.style.width?this.activeValue.settings.layout.__scale=activeNode.style.width.replace("%",""):this.activeValue.settings.layout.__scale=100,"block"==activeNode.style.display&&"0px auto"==activeNode.style.margin&&"right"==activeNode.style.float?this.activeValue.settings.layout.__position="hax-align-right":"block"==activeNode.style.display&&"0px auto"==activeNode.style.margin?this.activeValue.settings.layout.__position="hax-align-center":this.activeValue.settings.layout.__position="hax-align-left",this.activeHaxElement.properties.__scale=this.activeValue.settings.layout.__scale,this.activeHaxElement.properties.__position=this.activeValue.settings.layout.__position,props.settings.configure.forEach((val,key)=>{props.settings.configure[key].attribute&&(props.settings.configure[key].property=props.settings.configure[key].attribute),props.settings.configure[key].slot&&(props.settings.configure[key].property=props.settings.configure[key].slot)}),props.settings.advanced.forEach((val,key)=>{props.settings.advanced[key].attribute&&(props.settings.advanced[key].property=props.settings.advanced[key].attribute),props.settings.advanced[key].slot&&(props.settings.advanced[key].property=props.settings.advanced[key].slot)}),props.settings.layout=[],props.canPosition&&props.settings.layout.push({property:"__position",title:"Alignment",description:"Align content relative to other content",inputMethod:"select",value:this.activeValue.settings.layout.__position,options:{"hax-align-left":"Left","hax-align-center":"Center","hax-align-right":"Right"}}),props.canScale&&props.settings.layout.push({property:"__scale",title:"Width",description:"Scale and resize content",inputMethod:"slider",value:this.activeValue.settings.layout.__scale,min:props.canScale.min?props.canScale.min:12.5,max:props.canScale.max?props.canScale.max:100,step:props.canScale.step?props.canScale.step:12.5}),this.activeSchema=[{property:"settings",inputMethod:"tabs",properties:[]}];let disable=[];props.settings.layout.length>0?this.activeSchema[0].properties.push({property:"layout",title:"Layout",description:"Position the element relative to other items",properties:props.settings.layout}):(this.activeSchema[0].properties.push({property:"layout",title:"Layout",description:"Position the element relative to other items",disabled:!0}),disable.push("item-0")),props.settings.configure.length>0?this.activeSchema[0].properties.push({property:"configure",title:"Configure",description:"Configure the element",properties:props.settings.configure}):(this.activeSchema[0].properties.push({property:"configure",title:"Configure",description:"Configure the element",disabled:!0}),disable.push("item-1")),props.settings.advanced.length>0?this.activeSchema[0].properties.push({property:"advanced",title:"Advanced",description:"Advanced element settings",properties:props.settings.advanced}):(this.activeSchema[0].properties.push({property:"advanced",title:"Advanced",description:"Advanced element settings",disabled:!0}),disable.push("item-2")),this.__activePropSchema=props,this.shadowRoot.querySelector("#settingsform").fields=[...this.activeSchema],this.shadowRoot.querySelector("#settingsform").value={...this.activeValue},this.shadowRoot&&this.shadowRoot.querySelector("#settingsform").shadowRoot&&setTimeout(()=>{try{if(disable.forEach(id=>{this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("eco-json-schema-tabs").shadowRoot.querySelector("#"+id).disabled=!0}),this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("eco-json-schema-tabs").shadowRoot.querySelector("#"+this.activeTab).disabled)switch(this.activeTab){case"item-0":this.activeTab="item-1",this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("eco-json-schema-tabs").shadowRoot.querySelector("#"+this.activeTab).disabled&&(this.activeTab="item-2");break;case"item-1":this.activeTab="item-2"}this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("eco-json-schema-tabs").shadowRoot.querySelector("a11y-tabs").activeTab=this.activeTab}catch(e){}},10)}}_toArray(obj){return null==obj?[]:Object.keys(obj).map((function(key){return obj[key]}))}__valueChangedEvent(e){if(this.editMode&&e.detail.value&&e.detail.value.settings){let settings=e.detail.value.settings,settingsKeys={advanced:"advanced",configure:"configure",layout:"layout"};var setAhead;for(let key in settingsKeys)for(let prop in settings[key])if(setAhead=!1,null==settings[key][prop]||settings[key][prop].readOnly)this.activeNode.removeAttribute(camelCaseToDash(prop));else{if("prefix"===prop&&""!=settings[key][prop])this.activeNode.setAttribute("prefix",settings[key][prop]),setAhead=!0;else if("layout"===key&&"__position"===prop)setAhead=!0,this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,composed:!0,detail:{eventName:settings[key][prop],value:settings[key][prop]}}));else if("layout"===key&&"__scale"===prop)setAhead=!0,this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,composed:!0,detail:{eventName:"hax-size-change",value:settings[key][prop]}}));else if(this.activeNode.hasOwnProperty(prop)||this.activeNode.properties&&this.activeNode.properties.hasOwnProperty(prop)||null!=settings[key][prop]&&settings[key][prop].constructor===Array||null!=settings[key][prop]&&settings[key][prop].constructor===Object)try{settings[key][prop].constructor===Array?this.activeNode[prop]=[...settings[key][prop]]:settings[key][prop].constructor===Object?this.activeNode[prop]={...settings[key][prop]}:this.activeNode[prop]=settings[key][prop],setAhead=!0}catch(e){console.warn(e),setAhead=!1}else for(var propTmp in this.__activePropSchema.settings[key])if(this.__activePropSchema.settings[key][propTmp].slot==prop){let slotTag="span";this.__activePropSchema.settings[key][propTmp].slotWrapper?slotTag=this.__activePropSchema.settings[key][propTmp].slotWrapper:"code-editor"===this.activeNode.tagName.toLowerCase()&&(slotTag="template");var tmpel=document.createElement(slotTag);if(this.__activePropSchema.settings[key][propTmp].slotAttributes)for(var attr in this.__activePropSchema.settings[key][propTmp].slotAttributes)tmpel.setAttribute(attr,this.__activePropSchema.settings[key][propTmp].slotAttributes[attr]);""!==this.__activePropSchema.settings[key][propTmp].slot&&(tmpel.slot=this.__activePropSchema.settings[key][propTmp].slot),tmpel.innerHTML=settings[key][prop];const cloneIt=tmpel.cloneNode(!0);setAhead=!0,window.HaxStore.instance.isTextElement(this.activeNode)?this.activeNode.innerHTML=tmpel.innerHTML:(wipeSlot(this.activeNode,this.__activePropSchema.settings[key][propTmp].slot),this.activeNode.appendChild(cloneIt))}if(!setAhead)try{!0===settings[key][prop]?this.activeNode.setAttribute(camelCaseToDash(prop),camelCaseToDash(prop)):!1===settings[key][prop]||""===settings[key][prop]?this.activeNode.removeAttribute(camelCaseToDash(prop)):this.activeNode.setAttribute(camelCaseToDash(prop),settings[key][prop])}catch(e){console.warn(e),console.warn(prop,settings[key][prop])}}}}_editModeChanged(newValue,oldValue){void 0!==newValue&&newValue?(this.__tipText="Save content",this.shadowRoot.querySelector("#button").icon="save"):(this.__tipText="Edit content",this.shadowRoot.querySelector("#button").icon="create")}_clickEditButton(e){this.editMode=!0,window.HaxStore.write("editMode",!0,this),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}_clickSaveButton(e){this.editMode=!1,window.HaxStore.write("editMode",!1,this),this.dispatchEvent(new CustomEvent("hax-save",{bubbles:!0,cancelable:!0,composed:!0,detail:e.detail})),window.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,cancelable:!0,detail:{}}))}}window.customElements.define(HaxTray.tag,HaxTray);export{HaxTray};