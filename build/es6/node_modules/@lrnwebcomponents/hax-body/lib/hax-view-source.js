import{LitElement as t,html as e,css as o}from"../../../lit/index.js";import{MtzFileDownloadBehaviors as i}from"../../dl-behavior/dl-behavior.js";import{stripMSWord as a,formatHTML as n}from"../../utils/utils.js";import{HAXStore as s}from"./hax-store.js";import"./hax-toolbar.js";import{HaxComponentStyles as r}from"./hax-ui-styles.js";import{autorun as l,toJS as d}from"../../../mobx/dist/mobx.esm.js";import{I18NMixin as c}from"../../i18n-manager/lib/I18NMixin.js";import"../../file-system-broker/lib/docx-file-system-broker.js";class HaxViewSource extends(c(i(t))){static get styles(){return[...r,o`
        :host,
        #wrapper {
          margin: 0;
          padding: 0;
          display: flex;
          flex-direction: column;
          align-items: stretch;
          position: relative;
          flex: 1 1 100%;
        }
        #spacer {
          flex: 1 1 100%;
          z-index: -1;
        }
        #textarea {
          position: absolute;
          top: 0;
          bottom: 0;
          margin: 0;
          padding: 0;
        }
        hax-toolbar {
          flex: 0 0 auto;
          background-color: var(--hax-ui-background-color);
        }
        hax-toolbar::part(buttons) {
          display: flex;
          justify-content: center;
          align-items: stretch;
          margin: 0 auto;
        }
        hax-tray-button {
          flex: 1 1 auto;
        }
        /** This is mobile layout for controls */
        @media screen and (max-width: 800px) {
          hax-tray-button {
            flex: 0 1 auto;
          }
        }
      `]}render(){return e`
      <div id="wrapper">
        <div id="spacer"></div>
        <textarea id="hiddentextarea" hidden></textarea>
        <code-editor
          id="textarea"
          theme="${"hax"==this.haxUiTheme?"vs":"haxdark"==this.haxUiTheme?"vs-dark":"auto"}"
          language="html"
          font-size="13"
          word-wrap
        ></code-editor>
      </div>
      <hax-toolbar always-expanded>
        <hax-tray-button
          label="${this.t.refresh}"
          tooltip="${this.t.refreshTooltip}"
          icon="icons:refresh"
          @click="${this.refreshHTMLEditor.bind(this)}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          label="${this.t.updatePage}"
          tooltip="${this.t.updatePageTooltip}"
          icon="editor:insert-drive-file"
          @click="${this.importContent.bind(this)}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.scrubContent.bind(this)}"
          icon="editor:format-clear"
          label="${this.t.cleanFormatting}"
          tooltip="${this.t.cleanFormattingTooltip}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.selectBody.bind(this)}"
          icon="icons:content-copy"
          label="${this.t.copyHTML}"
          tooltip="${this.t.copyHTMLTooltip}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          label="${this.t.downloadHTML}"
          tooltip="${this.t.downloadHTMLTooltip}"
          icon="icons:file-download"
          @click="${this.download.bind(this)}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          label="${this.t.downloadDOCX}"
          tooltip="${this.t.downloadDOCXTooltip}"
          icon="editor:insert-drive-file"
          @click="${this.downloadDOCX.bind(this)}"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.importDOCX.bind(this)}"
          label="${this.t.importDOCX}"
          tooltip="${this.t.importDOCXTooltip}"
          icon="icons:file-upload"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
        <hax-tray-button
          @click="${this.htmlToHaxElements.bind(this)}"
          label="${this.t.schema}"
          tooltip="${this.t.schemaTooltip}"
          icon="hax:code-json"
          show-text-label
          icon-position="top"
        >
        </hax-tray-button>
      </hax-toolbar>
    `}static get tag(){return"hax-view-source"}refreshHTMLEditor(t){this.updateEditor()}importDOCX(t){import("../../file-system-broker/lib/docx-file-system-broker.js").then((async t=>{const e=window.FileSystemBroker.requestAvailability(),o=await e.loadFile("docx");window.DOCXFileSystemBroker.requestAvailability().fileToHTML(o,"hax-view-source")}))}insertDOCXFileContents(t){if("hax-view-source"===t.detail.name){let o=document.createElement("div");o.innerHTML=t.detail.value;let i=!1;s.activeNode.hasAttribute("slot")&&(i=s.activeNode.getAttribute("slot"));for(var e=o.children.length-1;e>0;e--)i&&o.children[e].setAttribute("slot",i),s.activeNode.parentNode.insertBefore(o.children[e],s.activeNode.nextSibling);s.toast(this.t.fileImported),this.close()}}connectedCallback(){super.connectedCallback(),window.addEventListener("docx-file-system-data",this.insertDOCXFileContents.bind(this))}disconnectedCallback(){window.removeEventListener("docx-file-system-data",this.insertDOCXFileContents.bind(this)),super.disconnectedCallback()}download(t){const e=this.contentToFile(!1);this.downloadFromData(e,"html","my-new-code"),s.toast("HTML content downloaded"),this.close()}async downloadDOCX(t){let e=await s.activeHaxBody.haxToContent();window.DOCXFileSystemBroker.requestAvailability().HTMLToDOCX(e,document.title),s.toast("docx file downloaded"),this.close()}downloadfull(t){const e=this.contentToFile(!0);this.downloadFromData(e,"html","my-new-webpage"),s.toast("Working offline copy downloaded"),this.close()}importContent(t){const e=this.shadowRoot.querySelector("#textarea").value;s.activeHaxBody.importContent(e),s.haxTray.trayDetail=""}scrubContent(t){const e=this.shadowRoot.querySelector("#textarea").value;s.toast("Scrubbed, Content updated"),s.activeHaxBody.importContent(a(e)),this.close()}openSource(){import("../../code-editor/code-editor.js").then((()=>{this.updateEditor()}))}selectBody(t){let e=this.shadowRoot.querySelector("#hiddentextarea");e.value=this.shadowRoot.querySelector("#textarea").value,e.removeAttribute("hidden"),e.focus(),e.select(),document.execCommand("copy"),e.setAttribute("hidden","hidden"),s.toast(this.t.copiedToClipboard)}async htmlToHaxElements(t){let e=await s.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);var o=JSON.stringify(e,null,2);let i=this.shadowRoot.querySelector("#textarea").value,a=this.shadowRoot.querySelector("#hiddentextarea");a.removeAttribute("hidden"),a.value=o,a.focus(),a.select(),document.execCommand("copy"),a.value=i,a.setAttribute("hidden","hidden"),s.toast(this.t.copiedToClipboard),this.close()}close(){s.haxTray.trayDetail=""}async firstUpdated(t){super.firstUpdated&&(super.firstUpdated(t),this.dispatchEvent(new CustomEvent("hax-register-core-piece",{bubbles:!0,cancelable:!0,composed:!0,detail:{piece:"haxViewSource",object:this}})))}updateEditor(){s.activeHaxBody&&this.shadowRoot&&this.shadowRoot.querySelector("#textarea")&&(this.shadowRoot.querySelector("#textarea").editorValue="",setTimeout((async()=>{this.shadowRoot.querySelector("#textarea").editorValue=n(await s.activeHaxBody.haxToContent())}),0))}async contentToFile(t){let e=await s.activeHaxBody.haxToContent();var o=e;return t&&(o=`\n        <!DOCTYPE html>\n        <html lang="en">\n          <head>\n            <meta charset="utf-8" />\n            <meta\n              name="viewport"\n              content="width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes"\n            />\n            <title>hax-body demo</title>\n            <script>window.WCGlobalCDNPath="https://cdn.webcomponents.psu.edu/cdn/"; <\/script> <script src="https://cdn.webcomponents.psu.edu/cdn/build.js"><\/script> \n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n          <body>\n          ${e}\n          </body>\n        </html>\n      `),o}static get properties(){return{...super.properties,globalPreferences:{type:Object},theme:{type:String}}}constructor(){super(),this.t={updatePage:"Update",updatePageTooltip:"Update Page HTML",copyHTML:"Copy",copyHTMLTooltip:"Copy HTML to clipboard",downloadHTML:"Download",downloadHTMLTooltip:"Download HTML format",downloadDOCX:"Download DOCX",downloadDOCXTooltip:"Download .docx format",cleanFormatting:"Clean",cleanFormattingTooltip:"Clean HTML Formatting",cleanFormatting:"Clean",schema:"Schema",schemaTooltip:"HAX Schema",refresh:"Refresh",refreshTooltip:"Refresh HTML source",importDOCX:"Import DOCX",importDOCXTooltip:"Import .docx content into body",fileImported:"File imported"},this.registerLocalization({context:this,namespace:"hax"}),this.fileTypes={CSV:"text/csv",JSON:"text/json",PDF:"application/pdf",TXT:"text/plain",HTML:"text/html"},l((()=>{this.globalPreferences=d(s.globalPreferences),this.haxUiTheme=(this.globalPreferences||{}).haxUiTheme||"hax"}))}}window.customElements.define(HaxViewSource.tag,HaxViewSource);export{HaxViewSource};