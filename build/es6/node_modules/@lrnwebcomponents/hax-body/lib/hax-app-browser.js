import{LitElement,html,css}from"../../../lit-element/lit-element.js";import"../../grafitto-filter/grafitto-filter.js";import{winEventsElement}from"../../utils/utils.js";import"./hax-tray-button.js";import"../../../@polymer/paper-input/paper-input.js";class HaxAppBrowser extends(winEventsElement(LitElement)){static get styles(){return[css`
        :host {
          display: block;
        }
        :host *[hidden] {
          display: none;
        }
        grafitto-filter {
          color: black;
        }
        .toolbar-inner {
          display: block;
          padding: 0;
          width: 100%;
        }
        .item-wrapper {
          text-align: center;
        }
      `]}constructor(){super(),this.__winEvents={"hax-store-property-updated":"_haxStorePropertyUpdated","hax-search-source-updated":"_searchSelected"},this.searching=!1,this.activeApp=null,this.appList=[],this.filtered=[],this.hasActive=!1,import("./hax-app-search.js")}render(){return html`
      <custom-style>
        <style>
          paper-input {
            --paper-input-container-label: {
              font-size: 11px;
            }
            --paper-input-container: {
              padding: 2px;
            }
          }
        </style>
      </custom-style>
      <div class="toolbar-inner">
        <paper-input
          label="Filter"
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          value=""
        ></paper-input>
      </div>
      <grafitto-filter
        id="filter"
        .items="${this.appList}"
        like=""
        @filtered-changed="${this.filteredChanged}"
        where="details.title"
        ><template></template
      ></grafitto-filter>
      <div class="item-wrapper">
        ${this.filtered.map(app=>html`
            <hax-tray-button
              index="${app.index}"
              label="${app.details.title}"
              icon="${app.details.icon}"
              color="${app.details.color}"
              event-name="search-selected"
              event-data="${app.index}"
            ></hax-tray-button>
          `)}
      </div>
      <hax-app-search
        id="haxappsearch"
        .hidden="${!this.searching}"
      ></hax-app-search>
      <slot></slot>
    `}static get tag(){return"hax-app-browser"}static get properties(){return{search:{type:String},searching:{type:Boolean,reflect:!0},activeApp:{type:Object},hasActive:{reflect:!0,type:Boolean,attribute:"has-active"},filtered:{type:Array},appList:{type:Array}}}filteredChanged(e){this.filtered=[...e.detail.value]}inputfilterChanged(e){this.shadowRoot.querySelector("#filter").like=e.target.value}firstUpdated(changedProperties){this.resetBrowser()}updated(changedProperties){changedProperties.forEach((oldValue,propName)=>{"activeApp"==propName&&this._activeAppChanged(this[propName],oldValue)})}_searchSelected(e){void 0!==e.detail&&(this.__activeApp=e.detail,this.searching=!0,window.HaxStore.write("activeApp",this.appList[e.detail],this))}_activeAppChanged(newValue,oldValue){this.hasActive=void 0!==oldValue&&null!=newValue}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&(this[e.detail.property]=e.detail.value)}resetBrowser(){this.searching=!1,this.appList=[...window.HaxStore.instance.appList],this.filtered=this.appList,this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filter").value="",this.shadowRoot.querySelector("#filter").filter(),this.shadowRoot.querySelector("#filter").where="details.title",this.shadowRoot.querySelector("#filter").like=""}}window.customElements.define(HaxAppBrowser.tag,HaxAppBrowser);export{HaxAppBrowser};