import{html as t,css as a,LitElement as i}from"../../../lit/index.js";import"../../simple-icon/lib/simple-icon-lite.js";import"./hax-toolbar-item.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import{HAXStore as s}from"./hax-store.js";import{normalizeEventPath as n,nodeToHaxElement as o}from"../../utils/utils.js";import{HaxTrayDetailHeadings as l}from"./hax-ui-styles.js";import{I18NMixin as r}from"../../i18n-manager/lib/I18NMixin.js";import{autorun as h,toJS as c}from"../../../mobx/dist/mobx.esm.js";class HaxMap extends(r(i)){static get styles(){return[...l,a`
        :host {
          display: block;
        }
        .container {
          text-align: left;
        }
        .stats {
          display: flex;
          align-items: stretch;
          flex-wrap: wrap;
        }
        .stat {
          flex: 1 1 auto;
          text-align: center;
          border: 1px solid var(--hax-ui-border-color);
          font-weight: normal;
          font-size: var(--hax-ui-font-size-xs);
          line-height: 140%;
          padding: var(--hax-ui-spacing-sm);
        }
        .stat > * {
          display: block;
        }
        .stat *:first-child {
          font-weight: bold;
          font-size: 150%;
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          margin: 0;
          padding: 0;
        }
        li > hax-toolbar-item {
          width: 100%;
        }
        hax-toolbar-item[data-active-item]::part(button) {
          color: var(--hax-ui-color);
          background-color: var(--hax-ui-background-color-accent);
          border-color: var(--hax-ui-color-accent);
        }
        li > hax-toolbar-item::part(button),
        li > hax-toolbar-item.heading-level-page-break::part(button),
        li > hax-toolbar-item[icon="hax:h2"].heading-level-h2::part(button) {
          width: 100%;
          margin-left: 0px;
        }
        li > hax-toolbar-item.heading-level-h2::part(button),
        li > hax-toolbar-item[icon="hax:h3"].heading-level-h3::part(button) {
          width: calc(100% - 26px);
          margin-left: 26px;
        }
        li > hax-toolbar-item.heading-level-h3::part(button),
        li > hax-toolbar-item[icon="hax:h4"].heading-level-h4::part(button) {
          width: calc(100% - calc(2 * 26px));
          margin-left: calc(2 * 26px);
        }
        li > hax-toolbar-item.heading-level-h4::part(button),
        li > hax-toolbar-item[icon="hax:h5"].heading-level-h5::part(button) {
          width: calc(100% - calc(3 * 26px));
          margin-left: calc(3 * 26px);
        }
        li > hax-toolbar-item.heading-level-h5::part(button),
        li > hax-toolbar-item[icon="hax:h6"].heading-level-h6::part(button) {
          width: calc(100% - calc(4 * 26px));
          margin-left: calc(4 * 26px);
        }
        li > hax-toolbar-item.heading-level-h6::part(button) {
          width: calc(100% - calc(5 * 26px));
          margin-left: calc(5 * 26px);
        }
      `]}constructor(){super(),this.elementList=[],this.t={contentStatistics:"Content Statistics",words:"Words",headings:"Headings",pageBreaks:"Page breaks",paragraphs:"Paragraphs",widgets:"Widgets",characters:"Characters",listView:"List view"},this.registerLocalization({context:this,namespace:"hax"}),h((()=>{this.activeNodeIndex=c(s.activeNodeIndex)}))}async updateHAXMap(t){let a=[];for(var e=0;e<s.activeHaxBody.childNodes.length;e++){const t=s.activeHaxBody.childNodes[e];a.push(await o(t,null))}this.calcStats(a);let i=[];for(e=0;e<a.length;e++){let t=s.haxSchemaFromTag(a[e].tag);t.gizmo?i.push({tag:a[e].tag,icon:t.gizmo.icon,name:t.gizmo.title}):a[e].tag&&a[e].tag.includes("-")?i.push({tag:a[e].tag,icon:"hax:templates",name:"Widget"}):i.push({tag:a[e].tag,icon:"hax:paragraph",name:"HTML block"})}this.elementList=[...i]}calcStats(t){if(t&&s.activeHaxBody.innerText){let e={c:s.activeHaxBody.innerText.length,w:parseInt(s.activeHaxBody.innerText.split(/\s+/g).length-1),h:0,b:0,p:0,e:0};for(var a in t.forEach((t=>{switch(t.tag){case"blockquote":case"div":case"span":case"p":case"ul":case"ol":case"strong":case"em":e.p++;break;case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":e.h++;break;case"page-break":e.b++;break;default:e.e++}})),e)this[`${a}Count`]=e[a]}}render(){return t`
      <h5>${this.t.contentStatistics}</h5>
      <div class="stats">
        <div class="stat">
          <span>${this.wCount}</span>
          <span>${this.t.words}</span>
        </div>
        <div class="stat">
          <span>${this.pCount}</span>
          <span>${this.t.paragraphs}</span>
        </div>
        <div class="stat">
          <span>${this.cCount}</span>
          <span>${this.t.characters}</span>
        </div>
        <div class="stat">
          <span>${this.bCount}</span>
          <span>${this.t.pageBreaks}</span>
        </div>
        <div class="stat">
          <span>${this.hCount}</span>
          <span>${this.t.headings}</span>
        </div>
        <div class="stat">
          <span>${this.eCount}</span>
          <span>${this.t.widgets}</span>
        </div>
      </div>
      <h5>${this.t.listView}</h5>
      <ul>
        ${this.indentedElements.map(((a,e)=>t`
            <li>
              <hax-toolbar-item
                align-horizontal="left"
                class="heading-level-${a.parent||"h1"}"
                @click="${t=>this.goToItem(e)}"
                data-index="${e}"
                ?data-active-item="${e===this.activeNodeIndex}"
                icon="${a.icon}"
                label="${a.name}"
                show-text-label
              >
              </hax-toolbar-item>
            </li>
          `))}
      </ul>
    `}get indentedElements(){let t="h1";return this.elementList.map((a=>{let e=a;return e.parent=t,"page-break"===e.tag?(e.parent="page-break",t="page-break"):["h1","h2","h3","h4","h5","h6"].includes(e.tag)&&(e.parent=e.tag,t=e.tag),e}))}goToItem(t){if(!1!==t){let a=s.activeHaxBody.children[parseInt(t)];s.activeNode=a,a.classList.add("blinkfocus"),"function"==typeof a.scrollIntoViewIfNeeded?a.scrollIntoViewIfNeeded(!0):a.scrollIntoView({behavior:"smooth",inline:"center"}),setTimeout((()=>{a.classList.remove("blinkfocus")}),500)}}scrollInMap(){var t=n(e)[0];this.goToItem(t.getAttribute("data-index"))}static get tag(){return"hax-map"}static get properties(){return{opened:{type:Boolean},elementList:{type:Array},cCount:{type:String},wCount:{type:String},bCount:{type:String},hCount:{type:String},pCount:{type:String},eCount:{type:String},activeNodeIndex:{type:Number}}}}customElements.define(HaxMap.tag,HaxMap);export{HaxMap};