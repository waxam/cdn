import{html as t,css as e,LitElement as i}from"../../../lit-element/lit-element.js";import"../../simple-icon/lib/simple-icon-lite.js";import"../../hax-iconset/lib/simple-hax-iconset.js";import{HAXStore as a}from"./hax-store.js";import{normalizeEventPath as n}from"../../utils/utils.js";class HaxMap extends i{static get styles(){return[e`
        :host {
          display: block;
        }
        .title {
          position: relative;
          padding: 16px;
          outline: 0;
          font-weight: 600;
          text-align: left;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          font-size: 18px;
          line-height: 18px;
          font-family: "Noto Serif", serif;
        }
        .container {
          text-align: left;
        }
        table {
          font-size: 13px;
        }
        table caption {
          font-weight: bold;
        }
        table tr th {
          padding: 2px;
        }
        table td {
          font-size: 21px;
          font-weight: bold;
          text-align: center;
        }
        h4 {
          font-size: 14px;
          margin: 2px 0;
        }
        ul {
          list-style: none;
          padding: 0;
          margin: 0;
        }
        ul li {
          margin: 4px;
          padding: 0;
        }
        ul simple-icon-lite {
          padding: 0 8px;
        }
        a {
          font-size: 24px;
          line-height: 24px;
          text-decoration: none;
          color: black;
          padding: 4px;
          display: block;
        }
        a:focus,
        a:hover,
        a:active {
          cursor: pointer;
          font-weight: bold;
          outline: 2px solid black;
        }
      `]}constructor(){super(),this.elementList=[],this.title="Content map"}updateHAXMap(){let t=a.htmlToHaxElements(a.activeHaxBody.haxToContent());this.calcStats(t);let e=[];for(var i=0;i<t.length;i++){let n=a.haxSchemaFromTag(t[i].tag);n.gizmo?e.push({icon:n.gizmo.icon,name:n.gizmo.title}):t[i].tag&&t[i].tag.includes("-")?e.push({icon:"hax:templates",name:"Widget"}):e.push({icon:"hax:paragraph",name:"HTML block"})}this.elementList=[...e]}calcStats(t){if(t&&a.activeHaxBody.innerText){let i={c:a.activeHaxBody.innerText.length,w:parseInt(a.activeHaxBody.innerText.split(/\s+/g).length-1),h:0,p:0,e:0};for(var e in t.forEach(t=>{switch(t.tag){case"blockquote":case"div":case"span":case"p":i.p++;break;case"h1":case"h2":case"h3":case"h4":case"h5":case"h6":case"relative-heading":i.h++;break;default:i.e++}}),i)this[e+"Count"]=i[e]}}render(){return t`
      <h3 class="title">
        <simple-icon-lite icon="hax:map"></simple-icon-lite>
        ${this.title}
      </h3>
      <div class="container">
        <table>
          <caption>
            Content statistics
          </caption>
          <tr>
            <th>Words</th>
            <th>Headings</th>
            <th>Paragraphs</th>
            <th>Widgets</th>
            <th>Characters</th>
          </tr>
          <tr>
            <td>${this.wCount}</td>
            <td>${this.hCount}</td>
            <td>${this.pCount}</td>
            <td>${this.eCount}</td>
            <td>${this.cCount}</td>
          </tr>
        </table>
        <h4>List view</h4>
        <ul>
          ${this.elementList.map((e,i)=>t`
              <li>
                <a @click="${this.scrollInMap}" data-index="${i}"
                  ><simple-icon-lite
                    data-index="${i}"
                    icon="${e.icon}"
                  ></simple-icon-lite
                  >${e.name}</a
                >
              </li>
            `)}
        </ul>
      </div>
    `}scrollInMap(t){var e=n(t)[0];if(e.getAttribute("data-index")){let t=a.activeHaxBody.children[parseInt(e.getAttribute("data-index"))];t.classList.add("blinkfocus"),"function"==typeof t.scrollIntoViewIfNeeded?t.scrollIntoViewIfNeeded(!0):t.scrollIntoView({behavior:"smooth",inline:"center"}),setTimeout(()=>{t.classList.remove("blinkfocus")},500)}}static get tag(){return"hax-map"}static get properties(){return{title:{type:String},opened:{type:Boolean},elementList:{type:Array},cCount:{type:String},wCount:{type:String},hCount:{type:String},pCount:{type:String},eCount:{type:String}}}}window.customElements.define(HaxMap.tag,HaxMap);export{HaxMap};