const debug=!1,validNodeTypes=[Node.ELEMENT_NODE,Node.TEXT_NODE,Node.DOCUMENT_FRAGMENT_NODE];function findNode(s,parentNode,isLeft){const nodes=parentNode.childNodes||parentNode.children;if(!nodes)return parentNode;for(let i=0;i<nodes.length;++i){const childNode=nodes[isLeft?i:nodes.length-1-i];if(node=childNode,validNodeTypes.includes(node.nodeType)){if(debug&&console.debug("checking child",childNode,"IsLeft",isLeft),s.containsNode(childNode,!0))return s.containsNode(childNode,!1)?(debug&&console.info("found child",childNode),childNode):(debug&&console.info("descending child",childNode),findNode(s,childNode,isLeft));debug&&console.info(parentNode,"does NOT contain",childNode)}}var node;return parentNode}const addInternalListener=(()=>{if(document.createElement("div").attachShadow({mode:"open"}).getSelection)return document.addEventListener("selectionchange",ev=>{document.dispatchEvent(new CustomEvent("-shadow-selectionchange"))}),()=>{};let withinInternals=!1;const handlers=[];return document.addEventListener("selectionchange",ev=>{withinInternals||(document.dispatchEvent(new CustomEvent("-shadow-selectionchange")),withinInternals=!0,window.setTimeout(()=>{withinInternals=!1},0),handlers.forEach(fn=>fn(ev)))}),fn=>handlers.push(fn)})();let wasCaret=!1,resolveTask=null;function containsNextElement(s,node,walkForward){const start=node;for(;(node=walkFromNode(node,walkForward))&&node.contains(start););return!!node&&(node instanceof Element&&s.containsNode(node,!0))}function walkFromNode(node,walkForward){if(!walkForward)return node.previousSibling||node.parentNode||null;for(;node;){if(node.nextSibling)return node.nextSibling;node=node.parentNode}return null}function initialSpace(node){return node.nodeType!==Node.TEXT_NODE?0:/^\s*/.exec(node.textContent)[0].length}addInternalListener(ev=>{"Caret"===window.getSelection().type?wasCaret=!0:wasCaret&&!resolveTask&&(resolveTask=Promise.resolve(!0).then(()=>{wasCaret=!1,resolveTask=null}))});const cachedRange=new Map;export function getRange(root){if(root.getSelection){const s=root.getSelection();return s.rangeCount?s.getRangeAt(0):null}const thisFrame=cachedRange.get(root);if(thisFrame)return thisFrame;const initialText=window.getSelection().toString(),result=internalGetShadowSelection(root),rs=result.range&&result.range.toString()||null;return null!==rs&&rs!==initialText&&rs.replace(/\s/g,"")!==initialText.replace(/\s/g,"")&&(console.warn("invalid range, initial text:",initialText),console.warn("vs",rs,result.mode,result.range)),cachedRange.set(root,result.range),window.setTimeout(()=>{cachedRange.delete(root)},0),debug&&console.debug("getRange got",result),result.range}const fakeSelectionNode=document.createTextNode("");export function internalGetShadowSelection(root){const range=document.createRange(),s=window.getSelection();if(!s.containsNode(root.host,!0))return{range:null,mode:"none"};root.insertBefore(fakeSelectionNode,root.childNodes[0]);const includesBeforeRoot=s.containsNode(fakeSelectionNode);if(fakeSelectionNode.remove(),includesBeforeRoot)return{range:null,mode:"outside-before"};root.appendChild(fakeSelectionNode);const includesAfterRoot=s.containsNode(fakeSelectionNode);if(fakeSelectionNode.remove(),includesAfterRoot)return{range:null,mode:"outside-after"};const measure=()=>s.toString().length;s.toString();if("Caret"!==s.type&&"Range"!==s.type)throw new TypeError("unexpected type: "+s.type);s.type;const leftNode=findNode(s,root,!0);let rightNode,isNaturalDirection=void 0;if("Range"===s.type&&(rightNode=findNode(s,root,!1),isNaturalDirection=function getSelectionDirection(s,leftNode,rightNode){if("Range"!==s.type)return;const measure=()=>s.toString().length,initialSize=measure();if(debug&&console.info(`initial selection: "${s.toString()}"`),1===initialSize&&wasCaret&&leftNode===rightNode)return debug&&console.debug("resetting size=1"),s.extend(leftNode,0),void s.collapseToEnd();let updatedSize;return s.modify("extend","forward","character"),updatedSize=measure(),debug&&console.info(`forward selection: "${s.toString()}"`),updatedSize>initialSize||containsNextElement(s,rightNode,!0)?(debug&&console.info("got forward >, moving right"),s.modify("extend","backward","character"),!0):updatedSize<initialSize||!s.containsNode(leftNode)?(debug&&console.info("got forward <, moving left"),s.modify("extend","backward","character"),!1):(s.modify("extend","backward","character"),updatedSize=measure(),debug&&console.info(`backward selection: "${s.toString()}"`),updatedSize>initialSize||containsNextElement(s,leftNode,!1)?(debug&&console.info("got backwards >, moving left"),s.modify("extend","forward","character"),!1):updatedSize<initialSize||!s.containsNode(rightNode)?(debug&&console.info("got backwards <, moving right"),s.modify("extend","forward","character"),!0):void 0)}(s,leftNode,rightNode)),"Caret"===s.type){s.extend(leftNode,0);const at=measure();return s.collapseToEnd(),range.setStart(leftNode,at),range.setEnd(leftNode,at),{range:range,mode:"caret"}}if(void 0===isNaturalDirection){if("Range"!==s.type)throw new TypeError("unexpected type: "+s.type);return range.setStart(leftNode,0),range.setEnd(rightNode,rightNode.length),{range:range,mode:"all"}}const size=measure();let offsetLeft,offsetRight;const validRightLength=rightNode.length-function ignoredTrailingSpace(node){if(node.nodeType!==Node.TEXT_NODE)return 0;const trailingSpaceCount=/\s*$/.exec(node.textContent)[0].length;return trailingSpaceCount?trailingSpaceCount-1:0}(rightNode);return isNaturalDirection?(s.extend(leftNode,0),offsetLeft=measure()+initialSpace(leftNode),s.extend(rightNode,validRightLength),offsetRight=validRightLength-(measure()-size),s.extend(rightNode,offsetRight)):(s.extend(rightNode,validRightLength),offsetRight=validRightLength-measure(),s.extend(leftNode,0),offsetLeft=measure()-size+initialSpace(leftNode),s.extend(leftNode,offsetLeft)),debug&&(leftNode===rightNode?console.info("got string",leftNode.textContent.substr(offsetLeft,offsetRight-offsetLeft)):(console.info(">>> string",leftNode.textContent.substr(offsetLeft)),console.info("<<< string",rightNode.textContent.substr(0,offsetRight)))),range.setStart(leftNode,offsetLeft),range.setEnd(rightNode,offsetRight),{mode:isNaturalDirection?"right":"left",range:range}}