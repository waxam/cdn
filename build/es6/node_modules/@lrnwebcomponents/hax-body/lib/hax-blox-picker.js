import{LitElement,html,css}from"../../../lit-element/lit-element.js";class HaxPicker extends LitElement{constructor(){super(),this.opened=!1,import("../../../@polymer/iron-icons/iron-icons.js"),import("../../../@polymer/iron-icon/iron-icon.js"),import("../../../@polymer/paper-button/paper-button.js"),import("../../../@polymer/app-layout/app-drawer/app-drawer.js")}setupPicker(pickerProperty,pickerTag){this.dispatchEvent(new CustomEvent("hax-register-core-piece",{bubbles:!0,cancelable:!0,composed:!0,detail:{piece:pickerProperty,object:this}})),this.picker=document.createElement(pickerTag),this.appendChild(this.picker)}static get styles(){return[css`
        :host {
          display: block;
        }
        iron-icon:not(:defined),
        paper-button:not(:defined),
        app-drawer:not(:defined) {
          display: none;
        }
        #dialog {
          --app-drawer-width: 320px;
          z-index: 10000;
          margin-top: 56px;
        }
        #closedialog {
          float: right;
          top: 124px;
          right: 0;
          position: absolute;
          padding: 8px;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          background-color: transparent;
          width: 40px;
          height: 40px;
          min-width: unset;
        }
        .title {
          position: relative;
          padding: 16px;
          outline: 0;
          font-weight: 600;
          text-align: left;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg, #eeeeee);
          color: var(--hax-color-menu-heading-color, black);
          font-size: 18px;
          line-height: 18px;
          font-family: "Noto Serif", serif;
        }
        app-drawer {
          --app-drawer-width: 320px;
        }
        .pref-container {
          text-align: left;
          padding: 16px;
        }
      `]}render(){return html`
      <app-drawer
        id="dialog"
        @opened-changed="${this.openedChanged}"
        ?opened="${this.opened}"
        align="left"
        transition-duration="300"
      >
        <h3 class="title">
          <iron-icon icon="${this.icon}"></iron-icon> ${this.title}
        </h3>
        <div style="height: 100%; overflow: auto;" class="pref-container">
          <slot></slot>
        </div>
        <paper-button id="closedialog" @click="${this.closeEvent}">
          <iron-icon icon="icons:cancel" title="Close dialog"></iron-icon>
        </paper-button>
      </app-drawer>
    `}openedChanged(e){e.detail.value||window.HaxStore.instance.openDrawer!==this||window.HaxStore.write("openDrawer",!1,this),e.detail.value&&window.HaxStore.instance[this.refreshOnOpen]&&(this.picker[this.refreshOnOpen]=[...window.HaxStore.instance[this.refreshOnOpen]])}closeEvent(e){this.opened=!1}static get properties(){return{title:{type:String},icon:{type:String},opened:{type:Boolean}}}open(){this.opened=!0}close(){this.opened=!1}}class HaxBloxPicker extends HaxPicker{constructor(){super(),import("./hax-blox-browser.js"),this.title="Insert layout",this.icon="icons:view-column",this.refreshOnOpen="bloxList",this.setupPicker("haxBloxPicker","hax-blox-browser")}static get tag(){return"hax-blox-picker"}}window.customElements.define(HaxBloxPicker.tag,HaxBloxPicker);export{HaxPicker,HaxBloxPicker};