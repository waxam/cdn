import{LitElement as t,html as e,css as i}from"../../../lit/index.js";import{SimpleFilterMixin as r}from"../../simple-filter/simple-filter.js";import{haxElementToNode as a}from"../../utils/utils.js";import{HAXStore as s}from"./hax-store.js";import{autorun as o,toJS as l}from"../../../mobx/dist/mobx.esm.js";import"../../simple-fields/lib/simple-fields-field.js";import"../../simple-toolbar/lib/simple-button-grid.js";import{I18NMixin as n}from"../../i18n-manager/lib/I18NMixin.js";class HaxGizmoBrowser extends(n(r(t))){static get styles(){return[i`
        :host {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          flex: 0 1 auto;
          overflow-y: auto;
        }
        :host > * {
          max-width: 100%;
        }
        .toolbar-inner {
          display: flex;
          flex-direction: column;
          align-items: stretch;
          width: 100%;
          flex: 0 0 auto;
        }
        hax-tray-button::part(button) {
          font-size: var(hax-ui-font-size-xs);
        }
        simple-fields-field {
          margin-top: 0;
        }
      `]}constructor(){super(),this.where="title",this.t={filterContentTypes:"Filter Content Types"},this.registerLocalization({context:this,namespace:"hax"})}render(){return e`
      <div class="toolbar-inner" part="toolbar">
        <simple-fields-field
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          label="${this.t.filterContentTypes}"
          type="text"
          auto-validate=""
          part="filter"
        ></simple-fields-field>
      </div>
      <simple-button-grid columns="3" always-expanded part="grid">
        ${this.filtered.map(((t,i)=>e`
            <hax-tray-button
              show-text-label
              voice-command="insert ${t.title}"
              draggable="true"
              @dragstart="${this._dragStart}"
              @dragend="${this._dragEnd}"
              index="${i}"
              label="${t.title}"
              event-name="insert-tag"
              event-data="${t.tag}"
              data-demo-schema="true"
              icon-position="top"
              icon="${t.icon}"
              part="grid-button"
            ></hax-tray-button>
          `))}
      </simple-button-grid>
    `}static get tag(){return"hax-gizmo-browser"}_dragStart(t){let e=s.haxSchemaFromTag(t.target.eventData);var i;i=e.gizmo.tag&&e.demoSchema&&e.demoSchema[0]?a(e.demoSchema[0]):document.createElement(t.target.eventData),s.__dragTarget=i,t.dataTransfer&&(this.crt=i.cloneNode(!0),e.gizmo.tag&&e.demoSchema&&e.demoSchema[0]?(this.crt.style.width="200px",this.crt.style.height="200px"):(this.crt.style.position="absolute",this.crt.style.top="-1000px",this.crt.style.right="-1000px",this.crt.style.transform="scale(0.25)"),this.crt.style.opacity=".8",this.crt.style.backgroundColor=t.target.getAttribute("drag-color"),t.dataTransfer.effectAllowed="move",t.dataTransfer.dropEffect="move",t.dataTransfer.setDragImage(this.crt,0,0)),t.stopPropagation(),t.stopImmediatePropagation()}_dragEnd(t){this.crt.remove()}inputfilterChanged(t){this.like=t.target.value}updated(t){t.forEach(((t,e)=>{"activeApp"==e&&this._activeAppChanged(this[e],t),"filtered"==e&&this.requestUpdate()}))}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),o((()=>{this.resetList(l(s.gizmoList))}))}resetList(t){super.resetList(t),t&&(this.items=[...t.filter(((t,e)=>!t||!t.meta||!t.meta.inlineOnly&&!t.meta.hidden))])}}window.customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser);export{HaxGizmoBrowser};