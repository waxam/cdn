import{LitElement as t,html as e,css as r}from"../../../lit-element/lit-element.js";import{SimpleFilterMixin as i}from"../../simple-filter/simple-filter.js";import{haxElementToNode as a}from"../../utils/utils.js";import{HAXStore as s}from"./hax-store.js";import{autorun as o,toJS as d}from"../../../mobx/dist/mobx.esm.js";import"../../simple-fields/lib/simple-fields-field.js";class HaxGizmoBrowser extends(i(t)){static get styles(){return[r`
        :host {
          display: block;
        }
        .toolbar-inner {
          padding: 0;
          position: sticky;
          background-color: white;
          width: 100%;
          top: 0;
          z-index: 1;
        }
        .item-wrapper {
          text-align: center;
        }
      `]}constructor(){super(),this.where="title"}render(){return e`
      <div class="toolbar-inner">
        <simple-fields-field
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          label="Filter"
          type="text"
          auto-validate=""
        ></simple-fields-field>
      </div>
      <div class="item-wrapper">
        ${this.filtered.map((t,r)=>e`
            <hax-tray-button
              dark-bg
              voice-command="insert ${t.title}"
              draggable="true"
              @dragstart="${this._dragStart}"
              @dragend="${this._dragEnd}"
              index="${r}"
              label="${t.title}"
              event-name="insert-tag"
              event-data="${t.tag}"
              data-demo-schema="true"
              icon="${t.icon}"
              drag-color="${t.color}"
            ></hax-tray-button>
          `)}
      </div>
    `}static get tag(){return"hax-gizmo-browser"}_dragStart(t){let e=s.haxSchemaFromTag(t.target.eventData);var r;r=e.gizmo.tag&&e.demoSchema&&e.demoSchema[0]?a(e.demoSchema[0]):document.createElement(t.target.eventData),s.__dragTarget=r,t.dataTransfer&&(this.crt=r.cloneNode(!0),e.gizmo.tag&&e.demoSchema&&e.demoSchema[0]?(this.crt.style.width="200px",this.crt.style.height="200px"):(this.crt.style.position="absolute",this.crt.style.top="-1000px",this.crt.style.right="-1000px",this.crt.style.transform="scale(0.25)"),this.crt.style.opacity=".8",this.crt.style.backgroundColor=t.target.getAttribute("drag-color"),t.dataTransfer.effectAllowed="move",t.dataTransfer.dropEffect="move",t.dataTransfer.setDragImage(this.crt,0,0)),t.stopPropagation(),t.stopImmediatePropagation()}_dragEnd(t){this.crt.remove()}inputfilterChanged(t){this.like=t.target.value}updated(t){t.forEach((t,e)=>{"activeApp"==e&&this._activeAppChanged(this[e],t),"filtered"==e&&this.requestUpdate()})}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),o(()=>{this.resetList(d(s.gizmoList))})}resetList(t){super.resetList(t),t&&(this.items=[...t.filter((t,e)=>!t||!t.meta||!t.meta.inlineOnly&&!t.meta.hidden)])}}window.customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser);export{HaxGizmoBrowser};