import{html,PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{afterNextRender}from"../../../@polymer/polymer/lib/utils/render-status.js";import{microTask}from"../../../@polymer/polymer/lib/utils/async.js";import"../../simple-colors/simple-colors.js";import"../../grafitto-filter/grafitto-filter.js";import"../../../@polymer/iron-list/iron-list.js";import"./hax-shared-styles.js";class HaxGizmoBrowser extends PolymerElement{constructor(){super(),import("../../../@polymer/paper-input/paper-input.js"),import("../../dropdown-select/dropdown-select.js"),import("./hax-gizmo-browser-item.js")}static get template(){return html`
      <style include="hax-shared-styles">
        :host {
          display: block;
        }
        hax-gizmo-browser-item {
          margin: 10px;
          -webkit-transition: 0.3s all linear;
          transition: 0.3s all linear;
        }
        #ironlist {
          min-height: 50vh;
          margin: 0;
          padding: 16px;
        }
        .title {
          position: relative;
          padding: 16px;
          outline: 0;
          font-weight: 600;
          text-align: left;
          margin: 0;
          background-color: var(--hax-color-menu-heading-bg);
          font-size: 18px;
          line-height: 18px;
          font-family: "Noto Serif", serif;
          color: var(--hax-color-text);
        }
        .toolbar-inner {
          display: inline-flex;
          padding: 10px;
        }
      </style>
      <h3 class="title">[[title]]</h3>
      <div class="toolbar-inner">
        <dropdown-select id="filtertype" label="Filter by" value="title">
          <paper-item value="title">Title</paper-item>
        </dropdown-select>
        <paper-input
          label="Filter"
          id="inputfilter"
          aria-controls="filter"
          value=""
          always-float-label=""
        ></paper-input>
      </div>
      <grafitto-filter
        id="filter"
        items="[[__gizmoList]]"
        like=""
        where="title"
        as="filtered"
      >
        <template>
          <iron-list id="ironlist" items="[[filtered]]" as="gizmo" grid>
            <template>
              <div class="gizmo-container">
                <hax-gizmo-browser-item
                  index="[[gizmo.index]]"
                  title="[[gizmo.title]]"
                  tag-to-insert="[[gizmo.tag]]"
                  icon="[[gizmo.icon]]"
                  image="[[gizmo.image]]"
                  color="[[gizmo.color]]"
                  author="[[gizmo.author]]"
                  teaser="[[gizmo.teaser]]"
                  description="[[gizmo.description]]"
                  examples="[[gizmo.examples]]"
                  status="[[gizmo.status]]"
                ></hax-gizmo-browser-item>
              </div>
            </template>
          </iron-list>
        </template>
      </grafitto-filter>
    `}static get tag(){return"hax-gizmo-browser"}static get properties(){return{search:{type:String},title:{type:String,value:"Make"}}}connectedCallback(){super.connectedCallback(),this.resetBrowser(),afterNextRender(this,function(){this.shadowRoot.querySelector("#inputfilter").addEventListener("value-changed",e=>{this.shadowRoot.querySelector("#filter").like=e.target.value}),this.shadowRoot.querySelector("#filtertype").addEventListener("change",e=>{this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filter").where=e.detail.value,this.shadowRoot.querySelector("#filter").like=""}),document.body.addEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this))})}disconnectedCallback(){this.shadowRoot.querySelector("#inputfilter").removeEventListener("value-changed",e=>{this.shadowRoot.querySelector("#filter").like=e.target.value}),this.shadowRoot.querySelector("#filtertype").removeEventListener("change",e=>{this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filter").where=e.detail.value,this.shadowRoot.querySelector("#filter").like=""}),document.body.removeEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this)),super.disconnectedCallback()}_haxStorePropertyUpdated(e){e.detail&&void 0!==e.detail.value&&e.detail.property&&this.set(e.detail.property,e.detail.value)}resetBrowser(){void 0!==this.shadowRoot.querySelector("#filter")&&microTask.run(()=>{this.set("__gizmoList",window.HaxStore.instance.gizmoList),this.shadowRoot.querySelector("#filter").shadowRoot.querySelector("#ironlist")&&(this.shadowRoot.querySelector("#filter").shadowRoot.querySelector("#ironlist").filtered=this.__gizmoList),this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filtertype").value="title",this.shadowRoot.querySelector("#filter").value="",this.shadowRoot.querySelector("#filter").filter(),this.shadowRoot.querySelector("#filter").where="title",this.shadowRoot.querySelector("#filter").like="",setTimeout(()=>{this.shadowRoot.querySelector("#filter").shadowRoot.querySelector("#ironlist")&&(this.shadowRoot.querySelector("#filter").shadowRoot.querySelector("#ironlist").dispatchEvent(new CustomEvent("iron-resize",{bubbles:!0,cancelable:!0,composed:!0,detail:!0})),window.dispatchEvent(new Event("resize")))},100)})}}window.customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser);export{HaxGizmoBrowser};