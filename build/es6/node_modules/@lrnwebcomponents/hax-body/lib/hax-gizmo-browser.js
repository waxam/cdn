import{LitElement as t,html as e,css as i}from"../../../lit-element/lit-element.js";import"../../grafitto-filter/grafitto-filter.js";import{winEventsElement as r,haxElementToNode as a}from"../../utils/utils.js";class HaxGizmoBrowser extends(r(t)){static get styles(){return[i`
        :host {
          display: block;
        }
        .toolbar-inner {
          padding: 0;
          position: sticky;
          background-color: white;
          width: 100%;
          top: 0;
          z-index: 1;
        }
        .item-wrapper {
          text-align: center;
        }
      `]}constructor(){super(),this.__winEvents={"hax-store-property-updated":"_haxStorePropertyUpdated"},this.__gizmoList=[],this.filtered=[],import("../../simple-fields/lib/simple-fields-field.js")}render(){return e`
      <div class="toolbar-inner">
        <simple-fields-field
          id="inputfilter"
          @value-changed="${this.inputfilterChanged}"
          aria-controls="filter"
          label="Filter"
          type="text"
          auto-validate=""
        ></simple-fields-field>
      </div>
      <grafitto-filter
        id="filter"
        .items="${this.__gizmoList}"
        like=""
        where="title"
        like=""
        @filtered-changed="${this.filteredChanged}"
        ><template></template
      ></grafitto-filter>
      <div class="item-wrapper">
        ${this.filtered.map(t=>e`
            <hax-tray-button
              voice-command="insert ${t.title}"
              draggable="true"
              @dragstart="${this._dragStart}"
              @dragend="${this._dragEnd}"
              index="${t.index}"
              label="${t.title}"
              event-name="insert-tag"
              event-data="${t.tag}"
              icon="${t.icon}"
              color="${t.color}"
              drag-color="${t.color}"
            ></hax-tray-button>
          `)}
      </div>
    `}static get tag(){return"hax-gizmo-browser"}static get properties(){return{filtered:{type:Array},__gizmoList:{type:Array}}}_dragStart(t){let e=window.HaxStore.instance.haxSchemaFromTag(t.target.eventData);var i;if(i=e.gizmo.tag&&e.demoSchema&&e.demoSchema[0]?a(e.demoSchema[0]):document.createElement(t.target.eventData),window.HaxStore.instance.__dragTarget=i,t.dataTransfer&&(this.crt=i.cloneNode(!0),e.gizmo.tag&&e.demoSchema&&e.demoSchema[0]?(this.crt.style.width="200px",this.crt.style.height="200px"):(this.crt.style.position="absolute",this.crt.style.top="-1000px",this.crt.style.right="-1000px",this.crt.style.transform="scale(0.25)"),this.crt.style.opacity=".8",this.crt.style.backgroundColor=t.target.getAttribute("drag-color"),t.dataTransfer.dropEffect="move",document.body.appendChild(this.crt),t.dataTransfer.setDragImage(this.crt,0,0)),t.stopPropagation(),t.stopImmediatePropagation(),!window.HaxStore.instance.activeHaxBody.openDrawer&&window.HaxStore.instance.editMode){let t=window.HaxStore.instance.activeHaxBody.children;for(var r in t)t[r].classList&&i!==t[r]&&t[r].classList.add("hax-mover")}}_dragEnd(t){this.crt.remove();let e=window.HaxStore.instance.activeHaxBody.children;for(var i in e)void 0!==e[i].classList&&e[i].classList.remove("hax-mover","hax-hovered","hax-moving","grid-plate-active-item")}filteredChanged(t){this.filtered=[...t.detail.value]}inputfilterChanged(t){this.shadowRoot.querySelector("#filter").like=t.target.value}updated(t){t.forEach((t,e)=>{"activeApp"==e&&this._activeAppChanged(this[e],t),"filtered"==e&&this.requestUpdate()})}_haxStorePropertyUpdated(t){this.shadowRoot&&t.detail&&t.detail.value&&"gizmoList"===t.detail.property&&this.resetBrowser()}firstUpdated(t){super.firstUpdated&&super.firstUpdated(t),this.resetBrowser()}resetBrowser(){this.__gizmoList=window.HaxStore.instance.gizmoList.filter((t,e)=>!t.meta||!t.meta.inlineOnly&&!t.meta.hidden),this.filtered=[...this.__gizmoList],this.shadowRoot.querySelector("#inputfilter").value="",this.shadowRoot.querySelector("#filter").value="",this.shadowRoot.querySelector("#filter").filter(),this.shadowRoot.querySelector("#filter").where="title",this.shadowRoot.querySelector("#filter").like=""}}window.customElements.define(HaxGizmoBrowser.tag,HaxGizmoBrowser);export{HaxGizmoBrowser};