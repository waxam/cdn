import{observable,decorate,computed,autorun,action,toJS}from"../../../mobx/lib/mobx.module.js";class Store{constructor(){this.manifest=null;this.editMode=!1;this.activeItem=null;this.location=null}get routerManifest(){const manifest=this.manifest;document.body.dispatchEvent(new CustomEvent("json-outline-schema-changed",{bubbles:!0,detail:manifest}));if(manifest&&"undefined"!==typeof manifest.items){const manifestItems=manifest.items.map(i=>{let location=i.location.replace("pages/","").replace("/index.html","");return Object.assign({},i,{location:location})});return Object.assign({},manifest,{items:manifestItems})}}set activeItem(id){if(!this.editMode){let item=this.manifest.items.filter(item=>{if(item.id!==id){return!1}return!0});if(item){this.activeItem=item}}}findItem(id){if(this.manifest&&id){return this.manifest.items.find(item=>{if(item.id!==id){return!1}return!0})}else{return null}}}decorate(Store,{manifest:observable,editMode:observable,activeItem:observable,location:observable.ref,routerManifest:computed,changeActiveItem:action.bound});export const store=new Store;autorun(()=>{if(store.location){if(store.location.route){if(store.location.route.component){const id=store.location.route.name;if(!store.editMode){let found=store.manifest.items.filter(item=>{if(item.id!==id){return!1}return!0});if(found){store.activeItem=id}}}}}});autorun(()=>{const activeItem=store.activeItem;if(activeItem){const foundItem=toJS(store.findItem(activeItem));if(foundItem){document.body.dispatchEvent(new CustomEvent("json-outline-schema-active-item-changed",{bubbles:!0,detail:foundItem}))}}});