import{LitElement as e,html as t,css as i}from"../../../../lit/index.js";import{store as o}from"./haxcms-site-store.js";import{autorun as s,toJS as n}from"../../../../mobx/dist/mobx.esm.js";import"../../../json-outline-schema/json-outline-schema.js";import"../../../editable-outline/editable-outline.js";import"../../../simple-icon/simple-icon.js";import"../../../simple-icon/lib/simple-icons.js";class HAXCMSOutlineEditorDialog extends e{static get styles(){return[i`
        :host {
          display: block;
          height: 60vh;
          min-width: 50vw;
          overflow: auto;
        }
        .buttons {
          position: absolute;
          bottom: 0;
          z-index: 1000000;
          background-color: var(--simple-modal-titlebar-background, #000000);
          color: var(--simple-modal-titlebar-color, #ffffff);
          left: 0;
          right: 0;
        }
        .buttons button {
          color: black;
          background-color: white;
        }
        simple-icon {
          margin-right: 4px;
        }
        editable-outline:not(:defined) {
          display: none;
        }
        #toggle {
          float: right;
          text-transform: unset;
        }
        #savebtn {
          color: white;
          background-color: var(--haxcms-color, #2196f3);
        }
        editable-outline {
          margin-bottom: 32px;
        }
      `]}static get tag(){return"haxcms-outline-editor-dialog"}render(){return t`
      <editable-outline
        id="outline"
        edit-mode
        .hidden="${this.viewMode}"
        .items="${this.manifestItems}"
      ></editable-outline>
      <div class="buttons">
        <button id="savebtn" @click="${this._saveTap}">
          <simple-icon icon="icons:save" dark></simple-icon>Save
        </button>
        <button @click="${this._cancelTap}">
          <simple-icon icon="icons:cancel"></simple-icon>Cancel
        </button>
      </div>
    `}constructor(){super(),this.__disposer=[],this.viewMode=!1}static get properties(){return{opened:{type:Boolean},manifestItems:{type:Array},manifestItemsStatic:{type:String,attribute:"manifest-items-static"},viewLabel:{type:String,attribute:"view-label"},viewMode:{type:Boolean,attribute:"view-mode"}}}updated(e){e.forEach(((e,t)=>{"opened"==t&&this.dispatchEvent(new CustomEvent("opened-changed",{detail:this[t]})),"manifestItems"==t&&(this._manifestItemsChanged(this[t],e),this.dispatchEvent(new CustomEvent("manifest-edit-mode-changed",{detail:this[t]})))}))}_manifestItemsChanged(e){e&&(window.JSONOutlineSchema.requestAvailability().items=e,this.manifestItemsStatic=JSON.stringify(e,null,2))}firstUpdated(){this.shadowRoot.querySelector("#outline").importJsonOutlineSchemaItems()}connectedCallback(){super.connectedCallback(),s((e=>{this.manifestItems=[...n(o.manifest.items)],this.__disposer.push(e)}))}disconnectedCallback(){for(var e in this.__disposer)this.__disposer[e].dispose();super.disconnectedCallback()}_saveTap(e){o.playSound("click"),window.dispatchEvent(new CustomEvent("haxcms-save-outline",{bubbles:!0,composed:!0,detail:this.shadowRoot.querySelector("#outline").exportJsonOutlineSchemaItems(!0)})),setTimeout((()=>{this.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1}))}),0)}_cancelTap(e){o.playSound("error"),this.dispatchEvent(new CustomEvent("simple-modal-hide",{bubbles:!0,composed:!0,cancelable:!1,detail:!1}))}}window.customElements.define(HAXCMSOutlineEditorDialog.tag,HAXCMSOutlineEditorDialog);export{HAXCMSOutlineEditorDialog};