import{html,Polymer}from"../../../../@polymer/polymer/polymer-legacy.js";import{afterNextRender}from"../../../../@polymer/polymer/lib/utils/render-status.js";import{store}from"./haxcms-site-store.js";import{autorun,toJS}from"../../../../mobx/lib/mobx.module.js";import"../../../../@polymer/paper-button/paper-button.js";import"../../../../@polymer/iron-icon/iron-icon.js";import"../../../../@polymer/iron-icons/iron-icons.js";import"../../../json-editor/json-editor.js";import"../../../editable-outline/editable-outline.js";import"../../../json-outline-schema/json-outline-schema.js";Polymer({_template:html`
    <style>
      :host {
        display: block;
        height: 60vh;
      }
      .buttons {
        position: absolute;
        bottom: 0;
        z-index: 1000000;
        background-color: var(--simple-modal-titlebar-background, #ddd);
        left: 0;
        right: 0;
      }
      #toggle {
        float: right;
        text-transform: unset;
      }
      editable-outline,
      json-editor {
        margin-bottom: 32px;
      }
    </style>
    <editable-outline
      id="outline"
      edit-mode
      hidden$="[[viewMode]]"
      items="[[manifestItems]]"
    ></editable-outline>
    <json-editor
      id="editor"
      label="JSON Outline Schema items"
      value="[[manifestItemsStatic]]"
      hidden$="[[!viewMode]]"
    ></json-editor>
    <div class="buttons">
      <paper-button dialog-confirm on-tap="_saveTap">Save</paper-button>
      <paper-button dialog-dismiss>Cancel</paper-button>
      <paper-button id="toggle" on-tap="toggleView"
        ><iron-icon icon="[[_viewIcon]]"></iron-icon>[[viewLabel]]</paper-button
      >
    </div>
  `,is:"haxcms-outline-editor-dialog",properties:{opened:{type:Boolean,notify:!0},manifestItems:{type:Array,observer:"_manifestItemsChanged"},manifestItemsStatic:{type:String},viewLabel:{type:String,computed:"_getViewLabel(viewMode)"},viewMode:{type:Boolean,value:!1,observer:"_viewModeChanged"}},_manifestItemsChanged:function(newValue){if(newValue){window.JSONOutlineSchema.requestAvailability().items=newValue;this.manifestItemsStatic=JSON.stringify(newValue,null,2)}},attached:function(){this.__disposer=[];autorun(reaction=>{setTimeout(()=>{this.manifestItems=Object.assign([],toJS(store.manifest.items));this.__disposer.push(reaction)},500)});afterNextRender(this,function(){this.$.editor.addEventListener("current-data-changed",e=>{if(e.detail.value){this.set("manifestItems",e.detail.value);this.$.outline.importJsonOutlineSchemaItems()}})})},detached:function(){for(var i in this.__disposer){this.__disposer[i].dispose()}this.$.editor.removeEventListener("current-data-changed",e=>{if(e.detail.value){this.set("manifestItems",e.detail.value);this.$.outline.importJsonOutlineSchemaItems()}})},toggleView:function(){this.viewMode=!this.viewMode},_getViewLabel:function(mode){if(mode){this._viewIcon="icons:view-list";return"Outline mode"}else{this._viewIcon="icons:code";return"Developer mode"}},_viewModeChanged:function(newValue){if(!newValue){this.$.outline.importJsonOutlineSchemaItems()}else{const items=this.$.outline.exportJsonOutlineSchemaItems(!0);this.set("manifestItems",items)}},_saveTap:function(){this.fire("haxcms-save-outline",this.$.outline.exportJsonOutlineSchemaItems(!0))}});