import{LitElement as e,html as t,css as i}from"../../../../lit-element/lit-element.js";import{store as o}from"./haxcms-site-store.js";import{autorun as n,toJS as s}from"../../../../mobx/lib/mobx.module.js";import"../../../json-outline-schema/json-outline-schema.js";import"../../../json-editor/json-editor.js";import"../../../editable-outline/editable-outline.js";import"../../../../@polymer/paper-button/paper-button.js";import"../../../../@polymer/iron-icon/iron-icon.js";import"../../../../@polymer/iron-icons/iron-icons.js";class HAXCMSOutlineEditorDialog extends e{static get styles(){return[i`
        :host {
          display: block;
          height: 60vh;
          min-width: 50vw;
        }
        .buttons {
          position: absolute;
          bottom: 0;
          z-index: 1000000;
          background-color: var(--simple-modal-titlebar-background, #000000);
          color: var(--simple-modal-titlebar-color, #ffffff);
          left: 0;
          right: 0;
        }
        .buttons paper-button {
          color: #ffffff;
          background-color: var(--simple-modal-button-background, #000000);
        }
        editable-outline:not(:defined),
        json-editor:not(:defined),
        paper-button:not(:defined) {
          display: none;
        }
        #toggle {
          float: right;
          text-transform: unset;
        }
        #savebtn {
          color: white;
          background-color: var(--haxcms-color, #2196f3);
        }
        editable-outline,
        json-editor {
          margin-bottom: 32px;
        }
      `]}static get tag(){return"haxcms-outline-editor-dialog"}render(){return t`
      <editable-outline
        id="outline"
        edit-mode
        .hidden="${this.viewMode}"
        .items="${this.manifestItems}"
      ></editable-outline>
      <json-editor
        id="editor"
        @current-data-changed="${this.currentDataChangedEvent}"
        label="JSON Outline Schema items"
        value="${this.manifestItemsStatic}"
        .hidden="${!this.viewMode}"
      ></json-editor>
      <div class="buttons">
        <paper-button id="savebtn" dialog-confirm @click="${this._saveTap}"
          ><iron-icon icon="icons:save"></iron-icon>Save</paper-button
        >
        <paper-button dialog-dismiss
          ><iron-icon icon="icons:cancel"></iron-icon>Cancel</paper-button
        >
        <paper-button id="toggle" @click="${this.toggleView}"
          ><iron-icon icon="${this._viewIcon}"></iron-icon>${this.viewLabel}</paper-button
        >
      </div>
    `}constructor(){super(),this.__disposer=[],this.viewMode=!1}static get properties(){return{opened:{type:Boolean},manifestItems:{type:Array},manifestItemsStatic:{type:String,attribute:"manifest-items-static"},viewLabel:{type:String,attribute:"view-label"},viewMode:{type:Boolean,attribute:"view-mode"}}}currentDataChangedEvent(e){e.detail.value&&(this.manifestItems=[...e.detail.value],this.shadowRoot.querySelector("#outline").importJsonOutlineSchemaItems())}updated(e){e.forEach((e,t)=>{"opened"==t&&this.dispatchEvent(new CustomEvent("opened-changed",{detail:this[t]})),"manifestItems"==t&&(this._manifestItemsChanged(this[t],e),this.dispatchEvent(new CustomEvent("manifest-edit-mode-changed",{detail:this[t]}))),"viewMode"==t&&(this.viewLabel=this._getViewLabel(this[t]),this._viewModeChanged(this[t],e))})}_manifestItemsChanged(e){e&&(window.JSONOutlineSchema.requestAvailability().items=e,this.manifestItemsStatic=JSON.stringify(e,null,2))}connectedCallback(){super.connectedCallback(),n(e=>{this.manifestItems=[...s(o.manifest.items)],this.__disposer.push(e)})}disconnectedCallback(){for(var e in this.__disposer)this.__disposer[e].dispose();super.disconnectedCallback()}toggleView(e){this.viewMode=!this.viewMode}_getViewLabel(e){return e?(this._viewIcon="icons:view-list","Outline mode"):(this._viewIcon="icons:code","Developer mode")}_viewModeChanged(e,t){if(e){const e=this.shadowRoot.querySelector("#outline").exportJsonOutlineSchemaItems(!0);this.manifestItems=e}else this.shadowRoot.querySelector("#outline").importJsonOutlineSchemaItems()}_saveTap(e){window.dispatchEvent(new CustomEvent("haxcms-save-outline",{bubbles:!0,composed:!0,detail:this.shadowRoot.querySelector("#outline").exportJsonOutlineSchemaItems(!0)}))}}window.customElements.define(HAXCMSOutlineEditorDialog.tag,HAXCMSOutlineEditorDialog);export{HAXCMSOutlineEditorDialog};