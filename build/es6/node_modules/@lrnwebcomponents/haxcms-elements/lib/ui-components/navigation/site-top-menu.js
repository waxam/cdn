import{html,PolymerElement}from"../../../../../@polymer/polymer/polymer-element.js";import{store}from"../../core/haxcms-site-store.js";import{autorun,toJS}from"../../../../../mobx/lib/mobx.module.js";import"../query/site-query.js";import"../../../../../@polymer/polymer/lib/elements/dom-repeat.js";class SiteTopMenu extends PolymerElement{static get tag(){return"site-top-menu"}static get template(){return html`
      <style>
        :host {
          display: block;
          --site-top-menu-bg: var(--haxcms-color, #ffffff);
          --site-top-menu-indicator-arrow: 6px;
        }
        :host([sticky]) {
          position: fixed;
          top: 0;
          left: 0;
          right: 0;
          z-index: 1000;
          @apply --site-top-menu-sticky;
        }
        .wrapper {
          display: flex;
          justify-content: center;
          justify-items: space-evenly;
          background-color: var(--site-top-menu-bg);
          @apply --site-top-menu-wrapper;
        }
        :host .wrapper ::slotted(div.spacing) {
          display: inline-flex;
          @apply --site-top-menu-spacing;
        }
        .spacing {
          display: inline-flex;
          @apply --site-top-menu-spacing;
        }
        .link {
          color: var(--site-top-menu-link-color, #444444);
          @apply --site-top-menu-link;
        }
        paper-button {
          text-transform: unset;
          min-width: unset;
          @apply --site-top-menu-button;
        }
        .active {
          color: var(--site-top-menu-link-active-color, #000000);
          @apply --site-top-menu-link-active;
        }
        #indicator {
          transition: 0.4s ease-in-out all;
          transition-delay: 0.2s;
          position: relative;
          width: 0;
          height: 0;
          visibility: hidden;
        }
        :host([indicator="line"]) #indicator {
          border-bottom: 2px solid var(--site-top-menu-indicator-color, #000000);
          @apply --site-top-menu-indicator;
        }
        :host([indicator="arrow"]) #indicator {
          border-left: var(--site-top-menu-indicator-arrow) solid transparent;
          border-right: var(--site-top-menu-indicator-arrow) solid transparent;
          border-bottom: var(--site-top-menu-indicator-arrow) solid
            var(--site-top-menu-indicator-color, #000000);
          @apply --site-top-menu-indicator;
        }
        #indicator.activated {
          visibility: visible;
          position: absolute;
          @apply --site-top-menu-indicator-activated;
        }
      </style>
      <div class="wrapper">
        <slot name="prefix"></slot>
        <site-query
          result="{{__items}}"
          sort='{"order": "ASC"}'
          conditions='{"parent": null}'
        ></site-query>
        <dom-repeat items="[[__items]]" mutable-data>
          <template>
            <div class="spacing">
              <a
                data-id$="[[item.id]]"
                class="link"
                tabindex="-1"
                href$="[[item.location]]"
                ><paper-button noink="[[noink]]"
                  >[[item.title]]</paper-button
                ></a
              >
            </div>
          </template>
        </dom-repeat>
        <slot name="suffix"></slot>
      </div>
      <div id="indicator"></div>
    `}static get properties(){return{manifest:{type:Object},activeId:{type:String,observer:"_activeIdChanged"},sticky:{type:Boolean,reflectToAttribute:!0,value:!1},indicator:{type:String,reflectToAttribute:!0,value:"line"},noink:{type:Boolean,reflectToAttribute:!0,value:!1},arrowSize:{type:Number,value:6}}}_activeIdChanged(newValue){if("none"!=this.indicator){if(newValue){this.$.indicator.classList.add("activated");let el=null;if(this.shadowRoot.querySelector("[data-id=\""+newValue+"\"]")){el=this.shadowRoot.querySelector("[data-id=\""+newValue+"\"]")}else{let tmpItem=this.manifest.items.find(i=>i.id==newValue);while(null===el&&tmpItem&&null!=tmpItem.parent){tmpItem=this.manifest.items.find(i=>i.id==tmpItem.parent);if(tmpItem&&this.shadowRoot.querySelector("[data-id=\""+tmpItem.id+"\"]")){el=this.shadowRoot.querySelector("[data-id=\""+tmpItem.id+"\"]")}}}if(this._prevEl){this._prevEl.classList.remove("active")}if(el){el.classList.add("active");this._prevEl=el;if("arrow"==this.indicator){this.$.indicator.style.left=el.offsetLeft+el.offsetWidth/2-this.arrowSize+"px";this.$.indicator.style.top=el.offsetTop+el.offsetHeight-this.arrowSize+"px"}else{this.$.indicator.style.left=el.offsetLeft+"px";this.$.indicator.style.top=el.offsetTop+el.offsetHeight+"px";this.$.indicator.style.width=el.offsetWidth+"px"}}}else{this.$.indicator.classList.remove("activated")}}}connectedCallback(){super.connectedCallback();this.__disposer=autorun(()=>{this.manifest=toJS(store.manifest)});setTimeout(()=>{this.__disposer2=autorun(()=>{this.activeId=toJS(store.activeId)})},50);window.addEventListener("resize",()=>{this._activeIdChanged(this.activeId)},!0)}disconnectedCallback(){super.disconnectedCallback();this.__disposer();if(this.__disposer2){this.__disposer2()}window.removeEventListener("resize",()=>{this._activeIdChanged(this.activeId)},!0)}}window.customElements.define(SiteTopMenu.tag,SiteTopMenu);export{SiteTopMenu};