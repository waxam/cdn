const gulp=require("gulp"),fs=require("fs"),path=require("path"),_=require("lodash"),rename=require("gulp-rename"),replace=require("gulp-replace"),stripCssComments=require("strip-css-comments"),decomment=require("decomment"),sourcemaps=require("gulp-sourcemaps"),packageJson=require("./package.json");gulp.task("merge",()=>{return gulp.src("./src/"+packageJson.wcfactory.elementName+".js").pipe(replace(/extends\s+PolymerElement\s+{/g,(classStatement,character,jsFile)=>{const oneLineFile=jsFile.slice(character).split("\n").join(" "),[,templateUrl]=/templateUrl\([^)]*\)\s*{\s*return\s+"([^"]+)"/.exec(oneLineFile);let html=fs.readFileSync(path.join("./src",templateUrl)).toString().trim();html=decomment(html);const[,styleUrl]=/styleUrl\([^)]*\)\s*{\s*return\s+"([^"]+)"/.exec(oneLineFile),styleFilePath=path.join("./src",styleUrl);let cssResult=fs.readFileSync(styleFilePath);cssResult=stripCssComments(cssResult).trim();return`${classStatement}
  static get template() {
    return html\`
<style>
${cssResult}
</style>
${html}\`;
  }
  // properties available to the custom element for data binding
  static get properties() {
    return ${"{}"};
  }`})).pipe(gulp.dest("./"))});gulp.task("build",()=>{const spawn=require("child_process").spawn;let child=spawn("polymer",["build"]);return child.on("close",function(code){console.log("child process exited with code "+code)})});gulp.task("analyze",()=>{var exec=require("child_process").exec;return exec("polymer analyze --input demo/index.html > analysis.json",function(error){if(null!==error){console.log("exec error: "+error)}})});gulp.task("compile",()=>{gulp.src("./build/es6/"+packageJson.wcfactory.elementName+".js").pipe(rename({suffix:".es6"})).pipe(gulp.dest("./"));gulp.src("./build/es5-amd/"+packageJson.wcfactory.elementName+".js").pipe(rename({suffix:".amd"})).pipe(gulp.dest("./"));return gulp.src("./"+packageJson.wcfactory.elementName+".js").pipe(replace(/^(import .*?)(['"]\.\.\/(?!\.\.\/).*)(\.js['"];)$/gm,"$1$2.umd$3")).pipe(rename({suffix:".umd"})).pipe(gulp.dest("./"))});gulp.task("watch",()=>{return gulp.watch("./src/*",gulp.series("merge","analyze"))});gulp.task("sourcemaps",()=>{return gulp.src("./"+packageJson.wcfactory.elementName+".es6.js").pipe(sourcemaps.init()).pipe(sourcemaps.write("./"))});gulp.task("dev",gulp.series("merge","analyze","watch"));gulp.task("default",gulp.series("merge","analyze","build","compile","sourcemaps"));