/**
 * Copyright 2020 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as t,html as e,css as a}from"../../../lit-element/lit-element.js";import"../../../@polymer/iron-ajax/iron-ajax.js";import"../../accent-card/accent-card.js";import"../../nav-card/nav-card.js";import"../../progress-donut/progress-donut.js";import"../../lrndesign-avatar/lrndesign-avatar.js";class ElmslnStudioDashboard extends t{static get styles(){return[a`
        :host {
          font-family: var(--elmsln-studio-FontFamily, "Roboto", sans-serif);
          font-size: 13px;
        }
        .sr-only {
          position: absolute;
          left: -9999999px;
          width: 0;
          overflow: hidden;
        }
        h1,
        h2,
        h3,
        .card [slot="heading"] {
          font-size: 14px;
          font-weight: normal;
          margin: 0;
          color: var(--simple-colors-default-theme-grey-7, #666);
        }
        h2,
        #secondary [slot="heading"] {
          font-size: 18px;
        }
        .card {
          margin: calc(0.5 * var(--elmsln-studio-margin, 20px))
            var(--elmsln-studio-margin, 20px)
            calc(2 * var(--elmsln-studio-margin, 20px));
          flex: 1 0 calc(50% - 2 * var(--elmsln-studio-margin, 20px));
          --accent-card-footer-border-color: transparent;
        }
        .card [slot="subheading"] {
          text-decoration: underline;
          border: none;
          font-family: inherit;
          font-size: inherit;
          font-weight: normal;
        }
        .card [slot="subheading"]:focus,
        .card [slot="subheading"]:hover {
          text-decoration: none;
        }
        .card th,
        .card td {
          padding: 5px 0;
          text-align: left;
          min-height: 25px;
          border-bottom: 1px solid
            var(--simple-colors-default-theme-grey-4, #666);
        }
        #primary .card [slot="heading"],
        #primary .card [slot="subheading"] {
          text-align: center;
          display: block;
          margin: 0 auto;
        }
        #secondary {
          margin-top: 0;
          --accent-card-heading-padding-top: 0;
          --nav-card-linklist-margin-top: 0;
          --nav-card-linklist-left-size: 36px;
          --paper-avatar-width: var(--nav-card-linklist-left-size, 36px);
        }
        accent-card {
          --accent-card-heading-padding-top: 0;
        }
        progress-donut {
          max-width: 100px;
          margin: 0 auto;
        }
        accent-card table {
          width: 100%;
          border-collapse: collapse;
        }
        accent-card button,
        .linklist button {
          border: none;
          padding: 0;
          text-align: left;
          font-size: inherit;
          font-weight: inherit;
        }
        .linklist-footer {
          text-align: center;
          display: block;
          padding: 5px 10px;
          margin: 0 auto;
          border-radius: 3px;
          background-color: var(--simple-colors-default-theme-grey-2, #eee);
          color: var(--simple-colors-default-theme-grey11, #222);
        }
        .linklist-footer:focus,
        .linklist-footer:hover {
          background-color: var(--simple-colors-default-theme-grey-3, #ddd);
          color: var(--simple-colors-default-theme-grey12, #000);
        }
        @media screen and (min-width: 600px) {
          progress-donut {
            max-width: 150px;
          }
          :host {
            display: flex;
            align-items: stretch;
            justify-content: space-between;
          }
          #primary {
            flex: 0 0 calc(50%);
          }
          #secondary {
            flex: 0 0 calc(50%);
          }
          h1,
          h2 {
            flex: 0 0 calc(100% - var(--elmsln-studio-margin, 20px));
            padding: 0 var(--elmsln-studio-margin, 20px);
          }
        }
        @media screen and (min-width: 900px) {
          progress-donut {
            max-width: 200px;
          }
          #primary {
            flex: 0 0 calc(66.66666667%);
          }
          #secondary {
            flex: 0 0 calc(33.33333333%);
          }
          #primary > div {
            display: flex;
            align-items: stretch;
            justify-content: space-between;
            flex-wrap: wrap;
          }
        }
      `]}render(){return e`
      <iron-ajax
        auto
        url="${this.activitySrc}"
        @response="${t=>this._handleArrayData(t,"__activity")}"
      ></iron-ajax>
      <iron-ajax
        auto
        url="${this.assignmentsSrc}"
        @response="${t=>this._handleArrayData(t,"__assignments")}"
      ></iron-ajax>
      <iron-ajax
        auto
        url="${this.commentsSrc}"
        @response="${t=>this._handleArrayData(t,"__comments")}"
      ></iron-ajax>
      <iron-ajax
        auto
        url="${this.profileSrc}"
        @response="${t=>this._handleObjectData(t,"__profile")}"
      ></iron-ajax>
      <iron-ajax
        auto
        url="${this.submissionsSrc}"
        @response="${t=>this._handleObjectData(t,"__submissions")}"
      ></iron-ajax>
      <h1 class="sr-only">Overview</h1>
      <div id="primary">
        <div id="profile">
          <h2>${this.__profile.student.data.display_name}</h2>
          <accent-card accent-color="purple" class="card">
            <span slot="heading" class="sr-only">My Progress</span>
            <progress-donut
              accent-color="purple"
              slot="content"
              animation="500"
              animation-delay="500"
              complete="[5,3,2,6]"
              donut-width="25%"
              chart-padding="0"
              image-src="${this.__profile.student.data.sis.avatar_url}"
              image-alt="Profile picture for ${this.__profile.student.data.display_name}"
              start-angle="0"
              total="30"
            ></progress-donut>
            <table slot="content">
              <tbody>
                <tr>
                  <th scope="row">Course Progress</th>
                  <td>
                    ${Math.round(100*this.__profile.student.progress.submissions.reduce((t,e)=>t+e)/this.__profile.student.progress.totalAssignments)}%
                  </td>
                </tr>
                <tr>
                  <th scope="row">Comments</th>
                  <td>${this.__profile.student.progress.comments}</td>
                </tr>
                <tr>
                  <th scope="row">Submissions</th>
                  <td>
                    ${this.__profile.student.progress.submissions.reduce((t,e)=>t+e)}
                  </td>
                </tr>
              </tbody>
            </table>
          </accent-card>
          <nav-card accent-color="green" class="card">
            <span slot="heading">Work Due</span>
            <div slot="linklist">
              ${this.__assignments.map((t,a)=>e`
                  <nav-card-item icon="chevron-right">
                    <button
                      id="due-${a}"
                      aria-describedby="due-desc-${a}"
                      slot="label"
                    >
                      ${t.attributes.title}
                    </button>
                    <span id="due-desc-${a}" slot="description">
                      ${this._getDueDate(t)?e`
                            Due
                            ${this.date(1e3*parseInt(this._getDueDate(t)))}
                          `:""}
                    </span>
                  </nav-card-item>
                `)}
            </div>
          </nav-card>
        </div>
        <div id="work">
          <h2>Recent Work</h2>
          <nav-card accent-color="amber" class="card" link-icon="chevron-right">
            <span slot="heading">Submissions</span>
            <button slot="subheading">All submissions</button>
            <div slot="linklist">
              ${Object.keys(this.__submissions).map((t,a)=>e`
                  <nav-card-item icon="chevron-right">
                    <button
                      id="submission-${a}"
                      aria-describedby="submission-desc-${a}"
                      slot="label"
                    >
                      ${this.__submissions[t].attributes.title}
                    </button>
                    <span id="submission-desc-${a}" slot="description"
                      >${this.date(this.__submissions[t].meta.changed)}</span
                    >
                  </nav-card-item>
                `)}
            </div>
          </nav-card>
          <nav-card accent-color="cyan" class="card" link-icon="chevron-right">
            <span slot="heading">Comments</span>
            <button slot="subheading">All comments</button>
            <!-- TODO need a comments list where student is in the thread or thread is about student submission -->
            <div slot="linklist">
              ${this.__comments.map((t,a)=>e`
                  <nav-card-item icon="chevron-right">
                    <button
                      id="comment-${a}"
                      aria-describedby="comment-desc-${a}"
                      slot="label"
                    >
                      ${t.attributes.subject}
                    </button>
                    <span id="comment-${a}" slot="description"
                      >${this.date(t.attributes.changed)}</span
                    >
                  </nav-card-item>
                `)}
            </div>
          </nav-card>
        </div>
      </div>
      <nav-card
        id="secondary"
        flat
        no-border
        class="card"
        link-icon="chevron-right"
      >
        <span slot="heading">Recent Activity</span>
        <div slot="linklist">
          ${this.__activity.map((t,a)=>e`
              <nav-card-item
                icon="chevron-right"
                avatar="${t.relationships.author.data.avatar||""}"
                initials="${t.relationships.author.data.display_name||""}"
              >
                <button
                  id="activity-${a}"
                  aria-describedby="activity-desc-${a}"
                  slot="label"
                >
                  ${t.relationships.author.data.sis.sortable_name.replace(/.*,/,"")}
                  ${"comment"===t.type?"commented":"submitted"}
                  ${"comment"===t.type?t.attributes.subject:t.attributes.title}
                </button>
                <span id="activity-desc-${a}" slot="description">
                  ${this.date("comment"===t.type?t.attributes.changed:t.meta.changed)}
                </span>
              </nav-card-item>
            `)}
        </div>
        <button class="linklist-footer" slot="footer">Load More</button>
      </nav-card>
    `}static get properties(){return{activitySrc:{type:String,attribute:"activity-src"},assignmentsSrc:{type:String,attribute:"assignments-src"},commentsSrc:{type:String,attribute:"comments-src"},profileSrc:{type:String,attribute:"profile-src"},submissionsSrc:{type:String,attribute:"submissions-src"},__activity:{type:Array},__assignments:{type:Array},__comments:{type:Array},__profileSrc:{type:Object},__submissions:{type:Object}}}static get tag(){return"elmsln-studio-dashboard"}constructor(){super(),this.__activity=[],this.__assignments=[],this.__comments=[],this.__profile={student:{data:{type:"user",id:"371",name:"toc5234",display_name:"Tom Cat",avatar:"http://placekitten.com/300/150",sis:{id:6966348,name:"Tom Cat",created_at:"2019-07-24T16:16:51-04:00",sortable_name:"Cat, Tom",short_name:"Tom Cat",sis_user_id:"toc5234@psu.edu",integration_id:null,avatar_url:"http://placekitten.com/300/150"}},progress:{comments:22,submissions:[5,3,2,6],totalAssignments:30}}},this.__submissions=[],this.tag=ElmslnStudioDashboard.tag}_getDueDates(t){return t.meta.rationale&&t.meta.rationale.data?t.meta.rationale.data:void 0}_getDueDate(t){return this._getDueDates(t)?this._getDueDates(t)[1]||this._getDueDates(t)[0]:void 0}_handleArrayData(t,e){this[e]=t&&t.detail&&t.detail.response&&t.detail.response.data?t.detail.response.data:[]}_handleObjectData(t,e){this[e]=t&&t.detail&&t.detail.response&&t.detail.response.data?t.detail.response.data:{}}date(t){let e;if(t&&isNaN(t)){let a=t.split(/\D+/);e=new Date(...a)}else t&&(e=new Date(parseInt(t)));return e.toLocaleDateString(void 0,{year:"numeric",month:"long",day:"numeric"})}connectedCallback(){super.connectedCallback()}}customElements.define("elmsln-studio-dashboard",ElmslnStudioDashboard);export{ElmslnStudioDashboard};