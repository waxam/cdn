/**
 * Copyright 2020 The Pennsylvania State University
 * @license Apache-2.0, see License.md for full text.
 */
import{LitElement as s,html as e,css as t}from"../../../lit-element/lit-element.js";import{ElmslnStudioUtilities as i}from"./elmsln-studio-utilities.js";import{ElmslnStudioStyles as n}from"./elmsln-studio-styles.js";import"./elmsln-studio-link.js";import"./elmsln-studio-button.js";class ElmslnStudioAssignments extends(i(n(s))){static get tag(){return"elmsln-studio-assignments"}static get styles(){return[...super.styles,t`
        :host {
          display: flex;
          color: #2c2c2c;
          margin: 0 auto;
          justify-content: center;
        }
        h2 {
          color: #525252;
          margin-top: calc(0.5 * var(--elmsln-studio-margin, 20px));
        }
        nav-card [slot="heading"] {
          color: #4d4d4d;
        }
        nav-card-item [slot="label"] {
          font-weight: normal;
        }
        nav-card-item [slot="description"] {
          color: #95989a;
        }
        .lesson {
          background-color: #eee;
          padding: calc(0.5 * var(--elmsln-studio-margin, 20px));
          --lrndesign-avatar-border-radius: 0%;
          --nav-card-item-avatar-width: 20px;
          border: 1px solid var(--accent-card-border-color, #ddd);
          border-bottom: none;
        }
        .lesson > .assignment {
          background-color: #fff;
          border: 1px solid var(--accent-card-border-color, #ddd);
          padding: calc(0.5 * var(--elmsln-studio-margin, 20px))
            var(--elmsln-studio-margin, 20px);
          margin-bottom: 15px;
        }
        @media screen and (min-width: 400px) {
          #lessons {
            display: flex;
            align-items: stretch;
            justify-content: flex-start;
            overflow-x: auto;
            max-width: 100%;
            padding: 0 calc(0.5 * var(--elmsln-studio-margin, 20px));
          }
          .lesson {
            width: 300px;
            flex: 0 0 300px;
            margin: 0 var(--elmsln-studio-margin, 20px);
            border-bottom: 1px solid var(--accent-card-border-color, #ddd);
          }
        }
      `]}render(){return e`
      <h1 class="sr-only">Assignments</h1>
      <div id="lessons">
        ${Object.keys(this.lessons||{}).map(s=>e`
            <div class="lesson">
              <h2>${this.lessons[s].lesson}</h2>
              ${(this.lessons[s].assignments||[]).map(s=>s.assignments?e`
                      <nav-card flat no-border class="card secondary">
                        <span slot="heading" ?hidden="${!s.project}">
                          ${s.project}
                        </span>
                        <div slot="linklist">
                          ${this.sortDates(s.assignments||[],!0).map(s=>this.renderAssignment(s))}
                        </div>
                      </nav-card>
                    `:e`
                      <div class="assignment">${this.renderAssignment(s)}</div>
                    `)}
            </div>
          `)}
      </div>
    `}renderAssignment(s){return s?e`
          <nav-card-item
            accent-color="${this._incomplete(s.id)?this._late(s.date)?"red":"grey":"green"}"
            allow-grey
            avatar="${this._incomplete(s.id)?this._late(s.date)?"icons:assignment-late":"assignment":"assignment-turned-in"}"
            invert
          >
            <elmsln-studio-link
              id="act-${s.id}"
              aria-describedby="act-${s.id}-desc"
              slot="label"
              href="${s.link}"
            >
              ${s.assignment}
            </elmsln-studio-link>
            <div id="act-${s.id}-desc" slot="description">
              Due: ${this.dateFormat(s.date)}
            </div>
          </nav-card-item>
        `:""}_incomplete(s){return this.profile&&this.profile.due&&this.profile.due.filter(e=>e.id===s).length>0}static get properties(){return{...super.properties,lessons:{type:Object},profile:{type:Object}}}constructor(){super(),this.profile={},this.lessons={},this.tag=ElmslnStudioAssignments.tag}updated(s){super.updated&&super.updated(s),s.forEach((s,e)=>{}),console.log("updated",this.lessons,this.profile)}}customElements.define("elmsln-studio-assignments",ElmslnStudioAssignments);export{ElmslnStudioAssignments};