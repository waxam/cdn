import{html,PolymerElement}from"../../@polymer/polymer/polymer-element.js";import{pathFromUrl}from"../../@polymer/polymer/lib/utils/resolve-url.js";import"../es-global-bridge/es-global-bridge.js";class MomentElement extends PolymerElement{static get template(){return html`
      [[output]]
    `}static get tag(){return"moment-element"}static get properties(){return{datetime:{type:String,value:()=>new Date},inputFormat:{type:String,value:""},outputFormat:{type:String,value:""},from:{type:String,value:""},to:{type:String,value:""},output:{type:String,notify:!0},libraryLoaded:{type:Boolean}}}static get observers(){return["_computeOutput(datetime, inputFormat, outputFormat, from, to, libraryLoaded)"]}constructor(){super();const location=`${pathFromUrl(decodeURIComponent(import.meta.url))}lib/moment/moment.js`;window.addEventListener("es-bridge-moment-loaded",this._momentLoaded.bind(this)),window.ESGlobalBridge.requestAvailability(),window.ESGlobalBridge.instance.load("moment",location)}disconnectedCallback(){window.removeEventListener("es-bridge-moment-loaded",this._momentLoaded.bind(this)),super.disconnectedCallback()}_momentLoaded(){this.libraryLoaded=!0}update(){this._computeOutput(this.datetime,this.inputFormat,this.outputFormat,this.from,this.to,this.libraryLoaded)}_computeOutput(datetime,inputFormat,outputFormat,from,to,libraryLoaded){if(libraryLoaded){var output=inputFormat?moment(datetime,inputFormat):moment(datetime);outputFormat?output=output.format(outputFormat):from?output="now"===from?output.fromNow():output.from(moment(from)):to&&(output="now"===to?output.toNow():output.to(moment(to))),this.set("output",output)}}}window.customElements.define(MomentElement.tag,MomentElement);export{MomentElement};