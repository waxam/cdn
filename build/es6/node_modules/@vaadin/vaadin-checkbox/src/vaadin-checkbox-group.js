import{PolymerElement}from"../../../@polymer/polymer/polymer-element.js";import{FlattenedNodesObserver}from"../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js";import{ThemableMixin}from"../../vaadin-themable-mixin/vaadin-themable-mixin.js";import{CheckboxElement}from"./vaadin-checkbox.js";import{html}from"../../../@polymer/polymer/lib/utils/html-tag.js";class CheckboxGroupElement extends(ThemableMixin(PolymerElement)){static get template(){return html`
    <style>
      :host {
        display: inline-flex;
      }

      :host::before {
        content: "\\2003";
        width: 0;
        display: inline-block;
      }

      :host([hidden]) {
        display: none !important;
      }

      .vaadin-group-field-container {
        display: flex;
        flex-direction: column;
      }

      [part="label"]:empty {
        display: none;
      }
    </style>

    <div class="vaadin-group-field-container">
      <label part="label">[[label]]</label>

      <div part="group-field">
        <slot id="slot"></slot>
      </div>

      <div part="error-message" aria-live="assertive" aria-hidden\$="[[_getErrorMessageAriaHidden(invalid, errorMessage)]]">[[errorMessage]]</div>

    </div>
`}static get is(){return"vaadin-checkbox-group"}static get properties(){return{disabled:{type:Boolean,reflectToAttribute:!0,observer:"_disabledChanged"},label:{type:String,value:"",observer:"_labelChanged"},value:{type:Array,value:()=>[],notify:!0},errorMessage:{type:String,value:""},required:{type:Boolean,reflectToAttribute:!0},invalid:{type:Boolean,reflectToAttribute:!0,notify:!0,value:!1}}}static get observers(){return["_updateValue(value, value.splices)"]}ready(){super.ready(),this.addEventListener("focusout",e=>{this._checkboxes.some(checkbox=>e.relatedTarget===checkbox||checkbox.shadowRoot.contains(e.relatedTarget))||this.validate()});const checkedChangedListener=e=>{this._changeSelectedCheckbox(e.target)};this._observer=new FlattenedNodesObserver(this,info=>{const addedCheckboxes=this._filterCheckboxes(info.addedNodes);addedCheckboxes.forEach(checkbox=>{checkbox.addEventListener("checked-changed",checkedChangedListener),this.disabled&&(checkbox.disabled=!0),checkbox.checked&&this._addCheckboxToValue(checkbox.value)}),this._filterCheckboxes(info.removedNodes).forEach(checkbox=>{checkbox.removeEventListener("checked-changed",checkedChangedListener),checkbox.checked&&this._removeCheckboxFromValue(checkbox.value)}),addedCheckboxes.some(checkbox=>!checkbox.hasAttribute("value"))&&console.warn("Please add value attribute to all checkboxes in checkbox group")})}validate(){return this.invalid=this.required&&0===this.value.length,!this.invalid}get _checkboxes(){return this._filterCheckboxes(this.querySelectorAll("*"))}_filterCheckboxes(nodes){return Array.from(nodes).filter(child=>child instanceof CheckboxElement)}_disabledChanged(disabled){this.setAttribute("aria-disabled",disabled),this._checkboxes.forEach(checkbox=>checkbox.disabled=disabled)}_addCheckboxToValue(value){const update=this.value.slice(0);update.push(value),this.value=update}_removeCheckboxFromValue(value){const update=this.value.slice(0),index=update.indexOf(value);update.splice(index,1),this.value=update}_changeSelectedCheckbox(checkbox){this._updatingValue||(checkbox.checked?this._addCheckboxToValue(checkbox.value):this._removeCheckboxFromValue(checkbox.value))}_updateValue(value,splices){0===value.length&&void 0===this._oldValue||(value.length?this.setAttribute("has-value",""):this.removeAttribute("has-value"),this._oldValue=value,this._updatingValue=!0,this._checkboxes.forEach(checkbox=>{checkbox.checked=value.indexOf(checkbox.value)>-1}),this._updatingValue=!1,this.validate())}_labelChanged(label){label?this.setAttribute("has-label",""):this.removeAttribute("has-label")}_getErrorMessageAriaHidden(invalid,errorMessage){return(!errorMessage||!invalid).toString()}}customElements.define(CheckboxGroupElement.is,CheckboxGroupElement);export{CheckboxGroupElement};