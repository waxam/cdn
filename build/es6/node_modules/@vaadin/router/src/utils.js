export function toArray(objectOrArray){objectOrArray=objectOrArray||[];return Array.isArray(objectOrArray)?objectOrArray:[objectOrArray]}export function log(msg){return`[Vaadin.Router] ${msg}`}export function logValue(value){if("object"!==typeof value){return value+""}const stringType=Object.prototype.toString.call(value).match(/ (.*)\]$/)[1];if("Object"===stringType||"Array"===stringType){return`${stringType} ${JSON.stringify(value)}`}else{return stringType}}const MODULE="module",NOMODULE="nomodule",bundleKeys=[MODULE,NOMODULE];function ensureBundle(src){if(!src.match(/.+\.[m]?js$/)){throw new Error(log(`Unsupported type for bundle "${src}": .js or .mjs expected.`))}}export function ensureRoute(route){if(!route||!isString(route.path)){throw new Error(log(`Expected route config to be an object with a "path" string property, or an array of such objects`))}const bundle=route.bundle,stringKeys=["component","redirect","bundle"];if(!isFunction(route.action)&&!Array.isArray(route.children)&&!isFunction(route.children)&&!isObject(bundle)&&!stringKeys.some(key=>isString(route[key]))){throw new Error(log(`Expected route config "${route.path}" to include either "${stringKeys.join("\", \"")}" `+`or "action" function but none found.`))}if(bundle){if(isString(bundle)){ensureBundle(bundle)}else if(!bundleKeys.some(key=>key in bundle)){throw new Error(log("Expected route bundle to include either \""+NOMODULE+"\" or \""+MODULE+"\" keys, or both"))}else{bundleKeys.forEach(key=>key in bundle&&ensureBundle(bundle[key]))}}if(route.redirect){["bundle","component"].forEach(overriddenProp=>{if(overriddenProp in route){console.warn(log(`Route config "${route.path}" has both "redirect" and "${overriddenProp}" properties, `+`and "redirect" will always override the latter. Did you mean to only use "${overriddenProp}"?`))}})}}export function ensureRoutes(routes){toArray(routes).forEach(route=>ensureRoute(route))}function loadScript(src,key){let script=document.head.querySelector("script[src=\""+src+"\"][async]");if(!script){script=document.createElement("script");script.setAttribute("src",src);if(key===MODULE){script.setAttribute("type",MODULE)}else if(key===NOMODULE){script.setAttribute(NOMODULE,"")}script.async=!0}return new Promise((resolve,reject)=>{script.onreadystatechange=script.onload=e=>{script.__dynamicImportLoaded=!0;resolve(e)};script.onerror=e=>{if(script.parentNode){script.parentNode.removeChild(script)}reject(e)};if(null===script.parentNode){document.head.appendChild(script)}else if(script.__dynamicImportLoaded){resolve()}})}export function loadBundle(bundle){if(isString(bundle)){return loadScript(bundle)}else{return Promise.race(bundleKeys.filter(key=>key in bundle).map(key=>loadScript(bundle[key],key)))}}export function fireRouterEvent(type,detail){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${type}`,{cancelable:"go"===type,detail}))}export function isObject(o){// guard against null passing the typeof check
return"object"===typeof o&&!!o}export function isFunction(f){return"function"===typeof f}export function isString(s){return"string"===typeof s}export function getNotFoundError(context){const error=new Error(log(`Page not found (${context.pathname})`));error.context=context;error.code=404;return error}export const notFoundResult=new class NotFoundResult{};