export function toArray(e){return e=e||[],Array.isArray(e)?e:[e]}export function log(e){return`[Vaadin.Router] ${e}`}export function logValue(e){if("object"!=typeof e)return String(e);const t=Object.prototype.toString.call(e).match(/ (.*)\]$/)[1];return"Object"===t||"Array"===t?`${t} ${JSON.stringify(e)}`:t}const e=["module","nomodule"];function ensureBundle(e){if(!e.match(/.+\.[m]?js$/))throw new Error(log(`Unsupported type for bundle "${e}": .js or .mjs expected.`))}export function ensureRoute(t){if(!t||!isString(t.path))throw new Error(log('Expected route config to be an object with a "path" string property, or an array of such objects'));const o=t.bundle,r=["component","redirect","bundle"];if(!(isFunction(t.action)||Array.isArray(t.children)||isFunction(t.children)||isObject(o)||r.some((e=>isString(t[e])))))throw new Error(log(`Expected route config "${t.path}" to include either "${r.join('", "')}" or "action" function but none found.`));if(o)if(isString(o))ensureBundle(o);else{if(!e.some((e=>e in o)))throw new Error(log('Expected route bundle to include either "nomodule" or "module" keys, or both'));e.forEach((e=>e in o&&ensureBundle(o[e])))}t.redirect&&["bundle","component"].forEach((e=>{e in t&&console.warn(log(`Route config "${t.path}" has both "redirect" and "${e}" properties, and "redirect" will always override the latter. Did you mean to only use "${e}"?`))}))}export function ensureRoutes(e){toArray(e).forEach((e=>ensureRoute(e)))}function loadScript(e,t){let o=document.head.querySelector('script[src="'+e+'"][async]');return o||(o=document.createElement("script"),o.setAttribute("src",e),"module"===t?o.setAttribute("type","module"):"nomodule"===t&&o.setAttribute("nomodule",""),o.async=!0),new Promise(((e,t)=>{o.onreadystatechange=o.onload=t=>{o.__dynamicImportLoaded=!0,e(t)},o.onerror=e=>{o.parentNode&&o.parentNode.removeChild(o),t(e)},null===o.parentNode?document.head.appendChild(o):o.__dynamicImportLoaded&&e()}))}export function loadBundle(t){return isString(t)?loadScript(t):Promise.race(e.filter((e=>e in t)).map((e=>loadScript(t[e],e))))}export function fireRouterEvent(e,t){return!window.dispatchEvent(new CustomEvent(`vaadin-router-${e}`,{cancelable:"go"===e,detail:t}))}export function isObject(e){return"object"==typeof e&&!!e}export function isFunction(e){return"function"==typeof e}export function isString(e){return"string"==typeof e}export function getNotFoundError(e){const t=new Error(log(`Page not found (${e.pathname})`));return t.context=e,t.code=404,t}export const notFoundResult=new class NotFoundResult{};