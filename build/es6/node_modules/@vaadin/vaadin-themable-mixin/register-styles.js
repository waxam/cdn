import"../../@polymer/polymer/lib/elements/dom-module.js";import{CSSResult}from"../../lit-element/lit-element.js";export{css,unsafeCSS}from"../../lit-element/lit-element.js";let moduleIdIndex=0;const styleMap={};export const registerStyles=(themeFor,styles,options)=>{const themeId=options&&options.moduleId||`custom-style-module-${moduleIdIndex++}`;Array.isArray(styles)||(styles=styles?[styles]:[]),styles.forEach(cssResult=>{if(!(cssResult instanceof CSSResult))throw new Error("An item in styles is not of type CSSResult. Use `unsafeCSS` or `css`.");if(!styleMap[cssResult]){const styleModuleElement=document.createElement("dom-module");styleModuleElement.innerHTML=`\n        <template>\n          <style>${cssResult.toString()}</style>\n        </template>\n      `;const styleId=`custom-style-module-${moduleIdIndex++}`;styleModuleElement.register(styleId),styleMap[cssResult]=styleId}});const themeModuleElement=document.createElement("dom-module");if(themeFor){const elementClass=window.customElements&&window.customElements.get(themeFor);elementClass&&elementClass.hasOwnProperty("__finalized")&&console.warn(`The custom element definition for "${themeFor}"\n      was finalized before a style module was registered.\n      Make sure to add component specific style modules before\n      importing the corresponding custom element.`),themeModuleElement.setAttribute("theme-for",themeFor)}const moduleIncludes=options&&options.include||[];themeModuleElement.innerHTML=`\n    <template>\n      ${styles.map(style=>`<style include=${styleMap[style]}></style>`)}\n      ${moduleIncludes.map(include=>`<style include=${include}></style>`)}\n    </template>\n  `,themeModuleElement.register(themeId)};