import"../../vaadin-themable-mixin/vaadin-themable-mixin.js";import{ControlStateMixin}from"../../vaadin-control-state-mixin/vaadin-control-state-mixin.js";const $_documentContainer=document.createElement("template");$_documentContainer.innerHTML=`<dom-module id="vaadin-text-field-shared-styles">
  <template>
    <style>
      :host {
        display: inline-flex;
        outline: none;
      }

      :host::before {
        content: "\\2003";
        width: 0;
        display: inline-block;
        /* Size and position this element on the same vertical position as the input-field element
           to make vertical align for the host element work as expected */
      }

      :host([hidden]) {
        display: none !important;
      }

      .vaadin-text-field-container,
      .vaadin-text-area-container {
        display: flex;
        flex-direction: column;
        min-width: 100%;
        max-width: 100%;
        width: var(--vaadin-text-field-default-width, 12em);
      }

      [part="label"]:empty {
        display: none;
      }

      [part="input-field"] {
        display: flex;
        align-items: center;
        flex: auto;
      }

      /* Reset the native input styles */
      [part="value"] {
        -webkit-appearance: none;
        -moz-appearance: none;
        outline: none;
        margin: 0;
        padding: 0;
        border: 0;
        border-radius: 0;
        min-width: 0;
        font: inherit;
        font-size: 1em;
        line-height: normal;
        color: inherit;
        background-color: transparent;
        /* Disable default invalid style in Firefox */
        box-shadow: none;
      }

      [part="input-field"] ::slotted(*) {
        flex: none;
      }

      /* Slotted by vaadin-dropdown-menu-text-field */
      [part="value"],
      [part="input-field"] ::slotted([part="value"]) {
        flex: auto;
        white-space: nowrap;
        overflow: hidden;
        width: 100%;
        height: 100%;
      }

      [part="value"]::-ms-clear {
        display: none;
      }
    </style>
  </template>
</dom-module>`;document.head.appendChild($_documentContainer.content);export const TextFieldMixin=subclass=>class extends ControlStateMixin(subclass){static get properties(){return{autocomplete:{type:String},autocorrect:{type:String},autocapitalize:{type:String},errorMessage:{type:String,value:""},label:{type:String,value:"",observer:"_labelChanged"},maxlength:{type:Number},minlength:{type:Number},name:{type:String},placeholder:{type:String},readonly:{type:Boolean,reflectToAttribute:!0},required:{type:Boolean,reflectToAttribute:!0},value:{type:String,value:"",observer:"_valueChanged",notify:!0},invalid:{type:Boolean,reflectToAttribute:!0,notify:!0,value:!1},preventInvalidInput:{type:Boolean},_labelId:{type:String},_errorId:{type:String}}}get focusElement(){return this.root&&this.root.querySelector("[part=value]")}_onInput(){if(this.preventInvalidInput){const input=this.focusElement;if(0<input.value.length&&!this.checkValidity()){input.value=this.value||""}}}_onChange(e){const changeEvent=new CustomEvent("change",{detail:{sourceEvent:e},bubbles:e.bubbles,cancelable:e.cancelable});this.dispatchEvent(changeEvent)}_valueChanged(newVal,oldVal){if(""===newVal&&oldVal===void 0){return}if(this.invalid){this.validate()}if(""!==newVal&&null!=newVal){this.setAttribute("has-value","")}else{this.removeAttribute("has-value")}}_labelChanged(label){if(""!==label&&null!=label){this.setAttribute("has-label","")}else{this.removeAttribute("has-label")}}checkValidity(){if(this.required||this.pattern||this.maxlength||this.minlength){return this.focusElement.checkValidity()}else{return!this.invalid}}ready(){super.ready();if(!(window.ShadyCSS&&window.ShadyCSS.nativeCss)){this.updateStyles()}var uniqueId=TextFieldMixin._uniqueId=1+TextFieldMixin._uniqueId||0;this._errorId=`${this.constructor.is}-error-${uniqueId}`;this._labelId=`${this.constructor.is}-label-${uniqueId}`;if(navigator.userAgent.match(/Trident/)){this._addIEListeners()}}validate(){return!(this.invalid=!this.checkValidity())}_addIEListeners(){const prevent=e=>{e.stopImmediatePropagation();this.focusElement.removeEventListener("input",prevent)},shouldPreventInput=()=>this.placeholder&&this.focusElement.addEventListener("input",prevent);this.focusElement.addEventListener("focusin",shouldPreventInput);this.focusElement.addEventListener("focusout",shouldPreventInput);this._createPropertyObserver("placeholder",shouldPreventInput)}_getActiveErrorId(invalid,errorMessage,errorId){return errorMessage&&invalid?errorId:void 0}_getActiveLabelId(label,labelId){return label?labelId:void 0}_getErrorMessageAriaHidden(invalid,errorMessage,errorId){return(!this._getActiveErrorId(invalid,errorMessage,errorId)).toString()}attributeChangedCallback(prop,oldVal,newVal){super.attributeChangedCallback(prop,oldVal,newVal);if(!(window.ShadyCSS&&window.ShadyCSS.nativeCss)&&/^(focused|focus-ring|invalid|disabled|placeholder|has-value)$/.test(prop)){this.updateStyles()}const isSafari=/^((?!chrome|android).)*safari/i.test(navigator.userAgent);if(isSafari&&this.root){const WEBKIT_PROPERTY="-webkit-backface-visibility";this.root.querySelectorAll("*").forEach(el=>{el.style[WEBKIT_PROPERTY]="visible";el.style[WEBKIT_PROPERTY]=""})}}};