/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
import{noChange as e}from"./lit-html.js";import{isSingleExpression as t}from"./directive-helpers.js";import{Directive as i,PartType as n}from"./directive.js";export{directive}from"./directive.js";const setChildrenConnected=(e,t)=>{var i,n;const s=e._$disconnectableChildren;if(void 0===s)return!1;for(const e of s)null===(n=(i=e)._$setDirectiveConnected)||void 0===n||n.call(i,t,!1),setChildrenConnected(e,t);return!0},removeDisconnectableFromParent=e=>{let t,i;do{if(void 0===(t=e._$parent))break;i=t._$disconnectableChildren,i.delete(e),e=t}while(0===(null==i?void 0:i.size))},addDisconnectableToParent=e=>{for(let t;t=e._$parent;e=t){let i=t._$disconnectableChildren;if(void 0===i)t._$disconnectableChildren=i=new Set;else if(i.has(e))break;i.add(e),installDisconnectAPI(t)}};function reparentDisconnectables(e){void 0!==this._$disconnectableChildren?(removeDisconnectableFromParent(this),this._$parent=e,addDisconnectableToParent(this)):this._$parent=e}function setChildPartConnected(e,t=!1,i=0){const n=this._$committedValue,s=this._$disconnectableChildren;if(void 0!==s&&0!==s.size)if(t)if(Array.isArray(n))for(let e=i;e<n.length;e++)setChildrenConnected(n[e],!1),removeDisconnectableFromParent(n[e]);else null!=n&&(setChildrenConnected(n,!1),removeDisconnectableFromParent(n));else setChildrenConnected(this,e)}const installDisconnectAPI=e=>{var t,i,s,r;e.type==n.CHILD&&(null!==(t=(s=e)._$setChildPartConnected)&&void 0!==t||(s._$setChildPartConnected=setChildPartConnected),null!==(i=(r=e)._$reparentDisconnectables)&&void 0!==i||(r._$reparentDisconnectables=reparentDisconnectables))};export class AsyncDirective extends i{constructor(){super(...arguments),this.isConnected=!0,this._pendingValue=e,this._$disconnectableChildren=void 0}_$initialize(e,t,i){super._$initialize(e,t,i),addDisconnectableToParent(this)}_$setDirectiveConnected(e,t=!0){this._setConnected(e),t&&(setChildrenConnected(this,e),removeDisconnectableFromParent(this))}_setConnected(t){var i,n;t!==this.isConnected&&(t?(this.isConnected=!0,this._pendingValue!==e&&(this.setValue(this._pendingValue),this._pendingValue=e),null===(i=this.reconnected)||void 0===i||i.call(this)):(this.isConnected=!1,null===(n=this.disconnected)||void 0===n||n.call(this)))}_$resolve(e,t){if(!this.isConnected)throw new Error(`AsyncDirective ${this.constructor.name} was rendered while its tree was disconnected.`);return super._$resolve(e,t)}setValue(e){if(this.isConnected)if(t(this.__part))this.__part._$setValue(e,this);else{if(void 0===this.__attributeIndex)throw new Error("Expected this.__attributeIndex to be a number");const t=[...this.__part._$committedValue];t[this.__attributeIndex]=e,this.__part._$setValue(t,this,0)}else this._pendingValue=e}disconnected(){}reconnected(){}}