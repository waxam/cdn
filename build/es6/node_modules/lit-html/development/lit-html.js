/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
var t,e,i,n;const debugLogEvent=t=>{window.emitLitDebugLogEvents&&window.dispatchEvent(new CustomEvent("lit-debug",{detail:t}))};let s,o=0;export const INTERNAL=!0;null!==(t=globalThis.litIssuedWarnings)&&void 0!==t||(globalThis.litIssuedWarnings=new Set),s=(t,e)=>{e+=t?` See https://lit.dev/msg/${t} for more information.`:"",globalThis.litIssuedWarnings.has(e)||(console.warn(e),globalThis.litIssuedWarnings.add(e))},s("dev-mode","Lit is in dev mode. Not recommended for production!");const r=(null===(e=window.ShadyDOM)||void 0===e?void 0:e.inUse)&&!0===(null===(i=window.ShadyDOM)||void 0===i?void 0:i.noPatch)?window.ShadyDOM.wrap:t=>t,l=globalThis.trustedTypes,a=l?l.createPolicy("lit-html",{createHTML:t=>t}):void 0,identityFunction=t=>t,noopSanitizer=(t,e,i)=>identityFunction,setSanitizer=t=>{if(w!==noopSanitizer)throw new Error("Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.");w=t},_testOnlyClearSanitizerFactoryDoNotCallOrElse=()=>{w=noopSanitizer},createSanitizer=(t,e,i)=>w(t,e,i),d=`lit$${String(Math.random()).slice(9)}$`,h="?"+d,c=`<${h}>`,m=document,createMarker=(t="")=>m.createComment(t),isPrimitive=t=>null===t||"object"!=typeof t&&"function"!=typeof t,u=Array.isArray,isIterable=t=>{var e;return u(t)||"function"==typeof(null===(e=t)||void 0===e?void 0:e[Symbol.iterator])},p=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,v=/-->/g,_=/>/g,g=new RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),$=/'/g,f=/"/g,y=/^(?:script|style|textarea|title)$/i,tag=t=>(e,...i)=>(e.some((t=>void 0===t))&&console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences."),{_$litType$:t,strings:e,values:i});export const html=tag(1);export const svg=tag(2);export const noChange=Symbol.for("lit-noChange");export const nothing=Symbol.for("lit-nothing");const b=new WeakMap;export const render=(t,e,i)=>{var n,s,r;if(null==e)throw new TypeError(`The container to render into may not be ${e}`);const l=o++,a=null!==(n=null==i?void 0:i.renderBefore)&&void 0!==n?n:e;let d=a._$litPart$;if(null==debugLogEvent||debugLogEvent({kind:"begin render",id:l,value:t,container:e,options:i,part:d}),void 0===d){const t=null!==(s=null==i?void 0:i.renderBefore)&&void 0!==s?s:null;if(!0===(null===(r=i)||void 0===r?void 0:r.clearContainerForLit2MigrationOnly)){let i=e.firstChild;for(;i&&i!==t;){const t=i.nextSibling;i.remove(),i=t}}a._$litPart$=d=new ChildPart(e.insertBefore(createMarker(),t),t,void 0,null!=i?i:{})}return d._$setValue(t),null==debugLogEvent||debugLogEvent({kind:"end render",id:l,value:t,container:e,options:i,part:d}),d};render.setSanitizer=setSanitizer,render.createSanitizer=createSanitizer,render._testOnlyClearSanitizerFactoryDoNotCallOrElse=_testOnlyClearSanitizerFactoryDoNotCallOrElse;const x=m.createTreeWalker(m,129,null,!1);let w=noopSanitizer;const getTemplateHtml=(t,e)=>{const i=t.length-1,n=[];let s,o=2===e?"<svg>":"",r=p;for(let e=0;e<i;e++){const i=t[e];let l,a,h=-1,m=0;for(;m<i.length&&(r.lastIndex=m,a=r.exec(i),null!==a);)if(m=r.lastIndex,r===p){if("!--"===a[1])r=v;else if(void 0!==a[1])r=_;else if(void 0!==a[2])y.test(a[2])&&(s=new RegExp(`</${a[2]}`,"g")),r=g;else if(void 0!==a[3])throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions")}else r===g?">"===a[0]?(r=null!=s?s:p,h=-1):void 0===a[1]?h=-2:(h=r.lastIndex-a[2].length,l=a[1],r=void 0===a[3]?g:'"'===a[3]?f:$):r===f||r===$?r=g:r===v||r===_?r=p:(r=g,s=void 0);console.assert(-1===h||r===g||r===$||r===f,"unexpected parse state B");const u=r===g&&t[e+1].startsWith("/>")?" ":"";o+=r===p?i+c:h>=0?(n.push(l),i.slice(0,h)+"$lit$"+i.slice(h)+d+u):i+d+(-2===h?(n.push(void 0),e):u)}const l=o+(t[i]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(t)||!t.hasOwnProperty("raw")){let t="invalid template strings array";throw t="\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n\n          If you're using the html or svg tagged template functions normally\n          and and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        ".trim().replace(/\n */g,"\n"),new Error(t)}return[void 0!==a?a.createHTML(l):l,n]};class Template{constructor({strings:t,_$litType$:e},i){let n;this.parts=[];let o=0,r=0;const a=t.length-1,c=this.parts,[m,u]=getTemplateHtml(t,e);if(this.el=Template.createElement(m,i),x.currentNode=this.el.content,2===e){const t=this.el.content,e=t.firstChild;e.remove(),t.append(...e.childNodes)}for(;null!==(n=x.nextNode())&&c.length<a;){if(1===n.nodeType){{const t=n.localName;if(/^(?:textarea|template)$/i.test(t)&&n.innerHTML.includes(d)){const e=`Expressions are not supported inside \`${t}\` elements. See https://lit.dev/msg/expression-in-${t} for more information.`;if("template"===t)throw new Error(e);s("",e)}}if(n.hasAttributes()){const t=[];for(const e of n.getAttributeNames())if(e.endsWith("$lit$")||e.startsWith(d)){const i=u[r++];if(t.push(e),void 0!==i){const t=n.getAttribute(i.toLowerCase()+"$lit$").split(d),e=/([.?@])?(.*)/.exec(i);c.push({type:1,index:o,name:e[2],strings:t,ctor:"."===e[1]?PropertyPart:"?"===e[1]?BooleanAttributePart:"@"===e[1]?EventPart:AttributePart})}else c.push({type:6,index:o})}for(const e of t)n.removeAttribute(e)}if(y.test(n.tagName)){const t=n.textContent.split(d),e=t.length-1;if(e>0){n.textContent=l?l.emptyScript:"";for(let i=0;i<e;i++)n.append(t[i],createMarker()),x.nextNode(),c.push({type:2,index:++o});n.append(t[e],createMarker())}}}else if(8===n.nodeType){if(n.data===h)c.push({type:2,index:o});else{let t=-1;for(;-1!==(t=n.data.indexOf(d,t+1));)c.push({type:7,index:o}),t+=d.length-1}}o++}null==debugLogEvent||debugLogEvent({kind:"template prep",template:this,clonableTemplate:this.el,parts:this.parts,strings:t})}static createElement(t,e){const i=m.createElement("template");return i.innerHTML=t,i}}function resolveDirective(t,e,i=t,n){var s,o,r,l;if(e===noChange)return e;let a=void 0!==n?null===(s=i.__directives)||void 0===s?void 0:s[n]:i.__directive;const d=isPrimitive(e)?void 0:e._$litDirective$;return(null==a?void 0:a.constructor)!==d&&(null===(o=null==a?void 0:a._$notifyDirectiveConnectionChanged)||void 0===o||o.call(a,!1),void 0===d?a=void 0:(a=new d(t),a._$initialize(t,i,n)),void 0!==n?(null!==(r=(l=i).__directives)&&void 0!==r?r:l.__directives=[])[n]=a:i.__directive=a),void 0!==a&&(e=resolveDirective(t,a._$resolve(t,e.values),a,n)),e}class TemplateInstance{constructor(t,e){this._parts=[],this._$disconnectableChildren=void 0,this._$template=t,this._$parent=e}get parentNode(){return this._$parent.parentNode}get _$isConnected(){return this._$parent._$isConnected}_clone(t){var e;const{el:{content:i},parts:n}=this._$template,s=(null!==(e=null==t?void 0:t.creationScope)&&void 0!==e?e:m).importNode(i,!0);x.currentNode=s;let o=x.nextNode(),r=0,l=0,a=n[0];for(;void 0!==a;){if(r===a.index){let e;2===a.type?e=new ChildPart(o,o.nextSibling,this,t):1===a.type?e=new a.ctor(o,a.name,a.strings,this,t):6===a.type&&(e=new ElementPart(o,this,t)),this._parts.push(e),a=n[++l]}r!==(null==a?void 0:a.index)&&(o=x.nextNode(),r++)}return s}_update(t){let e=0;for(const i of this._parts)void 0!==i&&(null==debugLogEvent||debugLogEvent({kind:"set part",part:i,value:t[e],valueIndex:e,values:t,templateInstance:this}),void 0!==i.strings?(i._$setValue(t,i,e),e+=i.strings.length-2):i._$setValue(t[e])),e++}}class ChildPart{constructor(t,e,i,n){var s;this.type=2,this._$committedValue=nothing,this._$disconnectableChildren=void 0,this._$startNode=t,this._$endNode=e,this._$parent=i,this.options=n,this.__isConnected=null===(s=null==n?void 0:n.isConnected)||void 0===s||s,this._textSanitizer=void 0}get _$isConnected(){var t,e;return null!==(e=null===(t=this._$parent)||void 0===t?void 0:t._$isConnected)&&void 0!==e?e:this.__isConnected}get parentNode(){let t=r(this._$startNode).parentNode;const e=this._$parent;return void 0!==e&&11===t.nodeType&&(t=e.parentNode),t}get startNode(){return this._$startNode}get endNode(){return this._$endNode}_$setValue(t,e=this){if(null===this.parentNode)throw new Error("This `ChildPart` has no `parentNode` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's `innerHTML` or `textContent` can do this.");t=resolveDirective(this,t,e),isPrimitive(t)?t===nothing||null==t||""===t?(this._$committedValue!==nothing&&(null==debugLogEvent||debugLogEvent({kind:"commit nothing to child",start:this._$startNode,end:this._$endNode,parent:this._$parent,options:this.options}),this._$clear()),this._$committedValue=nothing):t!==this._$committedValue&&t!==noChange&&this._commitText(t):void 0!==t._$litType$?this._commitTemplateResult(t):void 0!==t.nodeType?this._commitNode(t):isIterable(t)?this._commitIterable(t):this._commitText(t)}_insert(t,e=this._$endNode){return r(r(this._$startNode).parentNode).insertBefore(t,e)}_commitNode(t){var e;if(this._$committedValue!==t){if(this._$clear(),w!==noopSanitizer){const t=null===(e=this._$startNode.parentNode)||void 0===e?void 0:e.nodeName;if("STYLE"===t||"SCRIPT"===t){let e="Forbidden";throw e="STYLE"===t?"Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css`...` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.":"Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.",new Error(e)}}null==debugLogEvent||debugLogEvent({kind:"commit node",start:this._$startNode,parent:this._$parent,value:t,options:this.options}),this._$committedValue=this._insert(t)}}_commitText(t){if(this._$committedValue!==nothing&&isPrimitive(this._$committedValue)){const e=r(this._$startNode).nextSibling;void 0===this._textSanitizer&&(this._textSanitizer=createSanitizer(e,"data","property")),t=this._textSanitizer(t),null==debugLogEvent||debugLogEvent({kind:"commit text",node:e,value:t,options:this.options}),e.data=t}else{const e=document.createTextNode("");this._commitNode(e),void 0===this._textSanitizer&&(this._textSanitizer=createSanitizer(e,"data","property")),t=this._textSanitizer(t),null==debugLogEvent||debugLogEvent({kind:"commit text",node:e,value:t,options:this.options}),e.data=t}this._$committedValue=t}_commitTemplateResult(t){var e;const{values:i,_$litType$:n}=t,s="number"==typeof n?this._$getTemplate(t):(void 0===n.el&&(n.el=Template.createElement(n.h,this.options)),n);if((null===(e=this._$committedValue)||void 0===e?void 0:e._$template)===s)null==debugLogEvent||debugLogEvent({kind:"template updating",template:s,instance:this._$committedValue,parts:this._$committedValue._parts,options:this.options,values:i}),this._$committedValue._update(i);else{const t=new TemplateInstance(s,this),e=t._clone(this.options);null==debugLogEvent||debugLogEvent({kind:"template instantiated",template:s,instance:t,parts:t._parts,options:this.options,fragment:e,values:i}),t._update(i),null==debugLogEvent||debugLogEvent({kind:"template instantiated and updated",template:s,instance:t,parts:t._parts,options:this.options,fragment:e,values:i}),this._commitNode(e),this._$committedValue=t}}_$getTemplate(t){let e=b.get(t.strings);return void 0===e&&b.set(t.strings,e=new Template(t)),e}_commitIterable(t){u(this._$committedValue)||(this._$committedValue=[],this._$clear());const e=this._$committedValue;let i,n=0;for(const s of t)n===e.length?e.push(i=new ChildPart(this._insert(createMarker()),this._insert(createMarker()),this,this.options)):i=e[n],i._$setValue(s),n++;n<e.length&&(this._$clear(i&&r(i._$endNode).nextSibling,n),e.length=n)}_$clear(t=r(this._$startNode).nextSibling,e){var i;for(null===(i=this._$notifyConnectionChanged)||void 0===i||i.call(this,!1,!0,e);t&&t!==this._$endNode;){const e=r(t).nextSibling;r(t).remove(),t=e}}setConnected(t){var e;if(void 0!==this._$parent)throw new Error("part.setConnected() may only be called on a RootPart returned from render().");this.__isConnected=t,null===(e=this._$notifyConnectionChanged)||void 0===e||e.call(this,t)}}class AttributePart{constructor(t,e,i,n,s){this.type=1,this._$committedValue=nothing,this._$disconnectableChildren=void 0,this.element=t,this.name=e,this._$parent=n,this.options=s,i.length>2||""!==i[0]||""!==i[1]?(this._$committedValue=new Array(i.length-1).fill(new String),this.strings=i):this._$committedValue=nothing,this._sanitizer=void 0}get tagName(){return this.element.tagName}get _$isConnected(){return this._$parent._$isConnected}_$setValue(t,e=this,i,n){const s=this.strings;let o=!1;if(void 0===s)t=resolveDirective(this,t,e,0),o=!isPrimitive(t)||t!==this._$committedValue&&t!==noChange,o&&(this._$committedValue=t);else{const n=t;let r,l;for(t=s[0],r=0;r<s.length-1;r++)l=resolveDirective(this,n[i+r],e,r),l===noChange&&(l=this._$committedValue[r]),o||(o=!isPrimitive(l)||l!==this._$committedValue[r]),l===nothing?t=nothing:t!==nothing&&(t+=(null!=l?l:"")+s[r+1]),this._$committedValue[r]=l}o&&!n&&this._commitValue(t)}_commitValue(t){t===nothing?r(this.element).removeAttribute(this.name):(void 0===this._sanitizer&&(this._sanitizer=w(this.element,this.name,"attribute")),t=this._sanitizer(null!=t?t:""),null==debugLogEvent||debugLogEvent({kind:"commit attribute",element:this.element,name:this.name,value:t,options:this.options}),r(this.element).setAttribute(this.name,null!=t?t:""))}}class PropertyPart extends AttributePart{constructor(){super(...arguments),this.type=3}_commitValue(t){void 0===this._sanitizer&&(this._sanitizer=w(this.element,this.name,"property")),t=this._sanitizer(t),null==debugLogEvent||debugLogEvent({kind:"commit property",element:this.element,name:this.name,value:t,options:this.options}),this.element[this.name]=t===nothing?void 0:t}}const T=l?l.emptyScript:"";class BooleanAttributePart extends AttributePart{constructor(){super(...arguments),this.type=4}_commitValue(t){null==debugLogEvent||debugLogEvent({kind:"commit boolean attribute",element:this.element,name:this.name,value:!(!t||t===nothing),options:this.options}),t&&t!==nothing?r(this.element).setAttribute(this.name,T):r(this.element).removeAttribute(this.name)}}class EventPart extends AttributePart{constructor(t,e,i,n,s){if(super(t,e,i,n,s),this.type=5,void 0!==this.strings)throw new Error(`A \`<${t.localName}>\` has a \`@${e}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`)}_$setValue(t,e=this){var i;if((t=null!==(i=resolveDirective(this,t,e,0))&&void 0!==i?i:nothing)===noChange)return;const n=this._$committedValue,s=t===nothing&&n!==nothing||t.capture!==n.capture||t.once!==n.once||t.passive!==n.passive,o=t!==nothing&&(n===nothing||s);null==debugLogEvent||debugLogEvent({kind:"commit event listener",element:this.element,name:this.name,value:t,options:this.options,removeListener:s,addListener:o,oldListener:n}),s&&this.element.removeEventListener(this.name,this,n),o&&this.element.addEventListener(this.name,this,t),this._$committedValue=t}handleEvent(t){var e,i;"function"==typeof this._$committedValue?this._$committedValue.call(null!==(i=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==i?i:this.element,t):this._$committedValue.handleEvent(t)}}class ElementPart{constructor(t,e,i){this.element=t,this.type=6,this._$disconnectableChildren=void 0,this._$parent=e,this.options=i}get _$isConnected(){return this._$parent._$isConnected}_$setValue(t){null==debugLogEvent||debugLogEvent({kind:"commit to element binding",element:this.element,value:t,options:this.options}),resolveDirective(this,t)}}export const _$LH={_boundAttributeSuffix:"$lit$",_marker:d,_markerMatch:h,_HTML_RESULT:1,_getTemplateHtml:getTemplateHtml,_TemplateInstance:TemplateInstance,_isIterable:isIterable,_resolveDirective:resolveDirective,_ChildPart:ChildPart,_AttributePart:AttributePart,_BooleanAttributePart:BooleanAttributePart,_EventPart:EventPart,_PropertyPart:PropertyPart,_ElementPart:ElementPart};const C=window.litHtmlPolyfillSupportDevMode;null==C||C(Template,ChildPart),(null!==(n=globalThis.litHtmlVersions)&&void 0!==n?n:globalThis.litHtmlVersions=[]).push("2.2.3"),globalThis.litHtmlVersions.length>1&&s("multiple-versions","Multiple versions of Lit loaded. Loading multiple versions is not recommended.");