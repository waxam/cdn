/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
import"../utils/boot.js";import{PropertyEffects}from"../mixins/property-effects.js";import{OptionalMutableData}from"../mixins/mutable-data.js";import{GestureEventListeners}from"../mixins/gesture-event-listeners.js";import{strictTemplatePolicy}from"../utils/settings.js";import{wrap}from"../utils/wrap.js";import{hideElementsGlobally}from"../utils/hide-template-controls.js";const domBindBase=GestureEventListeners(OptionalMutableData(PropertyEffects(HTMLElement)));export class DomBind extends domBindBase{static get observedAttributes(){return["mutable-data"]}constructor(){if(super(),strictTemplatePolicy)throw new Error("strictTemplatePolicy: dom-bind not allowed");this.root=null,this.$=null,this.__children=null}attributeChangedCallback(name,old,value,namespace){this.mutableData=!0}connectedCallback(){hideElementsGlobally()||(this.style.display="none"),this.render()}disconnectedCallback(){this.__removeChildren()}__insertChildren(){wrap(wrap(this).parentNode).insertBefore(this.root,this)}__removeChildren(){if(this.__children)for(let i=0;i<this.__children.length;i++)this.root.appendChild(this.__children[i])}render(){let template;if(!this.__children){if(template=template||this.querySelector("template"),!template){let observer=new MutationObserver(()=>{if(template=this.querySelector("template"),!template)throw new Error("dom-bind requires a <template> child");observer.disconnect(),this.render()});return void observer.observe(this,{childList:!0})}this.root=this._stampTemplate(template),this.$=this.root.$,this.__children=[];for(let n=this.root.firstChild;n;n=n.nextSibling)this.__children[this.__children.length]=n;this._enableProperties()}this.__insertChildren(),this.dispatchEvent(new CustomEvent("dom-change",{bubbles:!0,composed:!0}))}}customElements.define("dom-bind",DomBind);