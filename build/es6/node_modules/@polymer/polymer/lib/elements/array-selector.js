/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
import{PolymerElement}from"../../polymer-element.js";import{dedupingMixin}from"../utils/mixin.js";import{calculateSplices}from"../utils/array-splice.js";import{ElementMixin}from"../mixins/element-mixin.js";let ArraySelectorMixin=dedupingMixin(superClass=>{let elementBase=ElementMixin(superClass);return class ArraySelectorMixin extends elementBase{static get properties(){return{items:{type:Array},multi:{type:Boolean,value:!1},selected:{type:Object,notify:!0},selectedItem:{type:Object,notify:!0},toggle:{type:Boolean,value:!1}}}static get observers(){return["__updateSelection(multi, items.*)"]}constructor(){super(),this.__lastItems=null,this.__lastMulti=null,this.__selectedMap=null}__updateSelection(multi,itemsInfo){let path=itemsInfo.path;if(path==JSCompiler_renameProperty("items",this)){let newItems=itemsInfo.base||[],lastItems=this.__lastItems;if(multi!==this.__lastMulti&&this.clearSelection(),lastItems){let splices=calculateSplices(newItems,lastItems);this.__applySplices(splices)}this.__lastItems=newItems,this.__lastMulti=multi}else if(itemsInfo.path==`${JSCompiler_renameProperty("items",this)}.splices`)this.__applySplices(itemsInfo.value.indexSplices);else{let part=path.slice(`${JSCompiler_renameProperty("items",this)}.`.length),idx=parseInt(part,10);part.indexOf(".")<0&&part==idx&&this.__deselectChangedIdx(idx)}}__applySplices(splices){let selected=this.__selectedMap;for(let i=0;i<splices.length;i++){let s=splices[i];selected.forEach((idx,item)=>{idx<s.index||(idx>=s.index+s.removed.length?selected.set(item,idx+s.addedCount-s.removed.length):selected.set(item,-1))});for(let j=0;j<s.addedCount;j++){let idx=s.index+j;selected.has(this.items[idx])&&selected.set(this.items[idx],idx)}}this.__updateLinks();let sidx=0;selected.forEach((idx,item)=>{idx<0?(this.multi?this.splice(JSCompiler_renameProperty("selected",this),sidx,1):this.selected=this.selectedItem=null,selected.delete(item)):sidx++})}__updateLinks(){if(this.__dataLinkedPaths={},this.multi){let sidx=0;this.__selectedMap.forEach(idx=>{idx>=0&&this.linkPaths(`${JSCompiler_renameProperty("items",this)}.${idx}`,`${JSCompiler_renameProperty("selected",this)}.${sidx++}`)})}else this.__selectedMap.forEach(idx=>{this.linkPaths(JSCompiler_renameProperty("selected",this),`${JSCompiler_renameProperty("items",this)}.${idx}`),this.linkPaths(JSCompiler_renameProperty("selectedItem",this),`${JSCompiler_renameProperty("items",this)}.${idx}`)})}clearSelection(){this.__dataLinkedPaths={},this.__selectedMap=new Map,this.selected=this.multi?[]:null,this.selectedItem=null}isSelected(item){return this.__selectedMap.has(item)}isIndexSelected(idx){return this.isSelected(this.items[idx])}__deselectChangedIdx(idx){let sidx=this.__selectedIndexForItemIndex(idx);if(sidx>=0){let i=0;this.__selectedMap.forEach((idx,item)=>{sidx==i++&&this.deselect(item)})}}__selectedIndexForItemIndex(idx){let selected=this.__dataLinkedPaths[`${JSCompiler_renameProperty("items",this)}.${idx}`];if(selected)return parseInt(selected.slice(`${JSCompiler_renameProperty("selected",this)}.`.length),10)}deselect(item){let idx=this.__selectedMap.get(item);if(idx>=0){let sidx;this.__selectedMap.delete(item),this.multi&&(sidx=this.__selectedIndexForItemIndex(idx)),this.__updateLinks(),this.multi?this.splice(JSCompiler_renameProperty("selected",this),sidx,1):this.selected=this.selectedItem=null}}deselectIndex(idx){this.deselect(this.items[idx])}select(item){this.selectIndex(this.items.indexOf(item))}selectIndex(idx){let item=this.items[idx];this.isSelected(item)?this.toggle&&this.deselectIndex(idx):(this.multi||this.__selectedMap.clear(),this.__selectedMap.set(item,idx),this.__updateLinks(),this.multi?this.push(JSCompiler_renameProperty("selected",this),item):this.selected=this.selectedItem=item)}}});export{ArraySelectorMixin};let baseArraySelector=ArraySelectorMixin(PolymerElement);class ArraySelector extends baseArraySelector{static get is(){return"array-selector"}static get template(){return null}}customElements.define(ArraySelector.is,ArraySelector);export{ArraySelector};