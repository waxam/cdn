/**
 * @fileoverview
 * @suppress {checkPrototypalTypes}
 * @license Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt The complete set of authors may be found
 * at http://polymer.github.io/AUTHORS.txt The complete set of contributors may
 * be found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by
 * Google as part of the polymer project is also subject to an additional IP
 * rights grant found at http://polymer.github.io/PATENTS.txt
 */
import{PropertyAccessors}from"./property-accessors.js";import{dedupingMixin}from"../utils/mixin.js";const HOST_DIR=/:host\(:dir\((ltr|rtl)\)\)/g,EL_DIR=/([\s\w-#\.\[\]\*]*):dir\((ltr|rtl)\)/g,DIR_CHECK=/:dir\((?:ltr|rtl)\)/,SHIM_SHADOW=Boolean(window.ShadyDOM&&window.ShadyDOM.inUse),DIR_INSTANCES=[];let observer=null,documentDir="";function getRTL(){documentDir=document.documentElement.getAttribute("dir")}function setRTL(instance){if(!instance.__autoDirOptOut){instance.setAttribute("dir",documentDir)}}function updateDirection(){getRTL(),documentDir=document.documentElement.getAttribute("dir");for(let i=0;i<DIR_INSTANCES.length;i++)setRTL(DIR_INSTANCES[i])}export const DirMixin=dedupingMixin(base=>{SHIM_SHADOW||observer||(getRTL(),observer=new MutationObserver(updateDirection),observer.observe(document.documentElement,{attributes:!0,attributeFilter:["dir"]}));const elementBase=PropertyAccessors(base);class Dir extends elementBase{static _processStyleText(cssText,baseURI){return cssText=elementBase._processStyleText.call(this,cssText,baseURI),!SHIM_SHADOW&&DIR_CHECK.test(cssText)&&(cssText=this._replaceDirInCssText(cssText),this.__activateDir=!0),cssText}static _replaceDirInCssText(text){let replacedText=text;return replacedText=replacedText.replace(HOST_DIR,':host([dir="$1"])'),replacedText=replacedText.replace(EL_DIR,':host([dir="$2"]) $1'),replacedText}constructor(){super(),this.__autoDirOptOut=!1}ready(){super.ready(),this.__autoDirOptOut=this.hasAttribute("dir")}connectedCallback(){elementBase.prototype.connectedCallback&&super.connectedCallback(),this.constructor.__activateDir&&(!function takeRecords(){observer&&observer.takeRecords().length&&updateDirection()}(),DIR_INSTANCES.push(this),setRTL(this))}disconnectedCallback(){if(elementBase.prototype.disconnectedCallback&&super.disconnectedCallback(),this.constructor.__activateDir){const idx=DIR_INSTANCES.indexOf(this);idx>-1&&DIR_INSTANCES.splice(idx,1)}}}return Dir.__activateDir=!1,Dir});