/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/
import"./boot.js";let scheduled=!1,beforeRenderQueue=[],afterRenderQueue=[];function schedule(){scheduled=!0,requestAnimationFrame((function(){scheduled=!1,flushQueue(beforeRenderQueue),setTimeout((function(){!function runQueue(queue){for(let i=0,l=queue.length;i<l;i++)callMethod(queue.shift())}(afterRenderQueue)}))}))}function flushQueue(queue){for(;queue.length;)callMethod(queue.shift())}function callMethod(info){const context=info[0],callback=info[1],args=info[2];try{callback.apply(context,args)}catch(e){setTimeout(()=>{throw e})}}export function flush(){for(;beforeRenderQueue.length||afterRenderQueue.length;)flushQueue(beforeRenderQueue),flushQueue(afterRenderQueue);scheduled=!1}export function beforeNextRender(context,callback,args){scheduled||schedule(),beforeRenderQueue.push([context,callback,args])}export function afterNextRender(context,callback,args){scheduled||schedule(),afterRenderQueue.push([context,callback,args])}