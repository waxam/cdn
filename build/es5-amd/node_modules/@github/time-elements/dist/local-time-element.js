define(["exports", "./utils.js", "./extended-time-element.js"], function (_exports, _utils, _extendedTimeElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _extendedTimeElement = babelHelpers.interopRequireDefault(_extendedTimeElement);

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var formatters = new WeakMap();

  var LocalTimeElement = /*#__PURE__*/function (_ExtendedTimeElement) {
    babelHelpers.inherits(LocalTimeElement, _ExtendedTimeElement);

    var _super = _createSuper(LocalTimeElement);

    function LocalTimeElement() {
      babelHelpers.classCallCheck(this, LocalTimeElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LocalTimeElement, [{
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attrName, oldValue, newValue) {
        if (attrName === 'hour' || attrName === 'minute' || attrName === 'second' || attrName === 'time-zone-name') {
          formatters.delete(this);
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(LocalTimeElement.prototype), "attributeChangedCallback", this).call(this, attrName, oldValue, newValue);
      }
    }, {
      key: "getFormattedDate",
      value: function getFormattedDate() {
        var d = this.date;
        if (!d) return;
        var date = formatDate(this, d) || '';
        var time = formatTime(this, d) || '';
        return "".concat(date, " ").concat(time).trim();
      }
    }]);
    return LocalTimeElement;
  }(_extendedTimeElement.default);

  _exports.default = LocalTimeElement;

  function formatDate(el, date) {
    var props = {
      weekday: {
        short: '%a',
        long: '%A'
      },
      day: {
        numeric: '%e',
        '2-digit': '%d'
      },
      month: {
        short: '%b',
        long: '%B'
      },
      year: {
        numeric: '%Y',
        '2-digit': '%y'
      }
    };
    var format = (0, _utils.isDayFirst)() ? 'weekday day month year' : 'weekday month day, year';

    for (var prop in props) {
      var value = props[prop][el.getAttribute(prop) || ''];
      format = format.replace(prop, value || '');
    }

    format = format.replace(/(\s,)|(,\s$)/, '');
    return (0, _utils.strftime)(date, format).replace(/\s+/, ' ').trim();
  }

  function formatTime(el, date) {
    var options = {};
    var hour = el.getAttribute('hour');
    if (hour === 'numeric' || hour === '2-digit') options.hour = hour;
    var minute = el.getAttribute('minute');
    if (minute === 'numeric' || minute === '2-digit') options.minute = minute;
    var second = el.getAttribute('second');
    if (second === 'numeric' || second === '2-digit') options.second = second;
    var tz = el.getAttribute('time-zone-name');
    if (tz === 'short' || tz === 'long') options.timeZoneName = tz;

    if (Object.keys(options).length === 0) {
      return;
    }

    var factory = formatters.get(el);

    if (!factory) {
      factory = (0, _utils.makeFormatter)(options);
      formatters.set(el, factory);
    }

    var formatter = factory();

    if (formatter) {
      return formatter.format(date);
    } else {
      var timef = options.second ? '%H:%M:%S' : '%H:%M';
      return (0, _utils.strftime)(date, timef);
    }
  }

  if (!window.customElements.get('local-time')) {
    window.LocalTimeElement = LocalTimeElement;
    window.customElements.define('local-time', LocalTimeElement);
  }
});