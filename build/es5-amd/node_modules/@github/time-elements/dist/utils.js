define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isDayFirst = isDayFirst;
  _exports.isThisYear = isThisYear;
  _exports.isYearSeparator = isYearSeparator;
  _exports.localeFromElement = localeFromElement;
  _exports.makeFormatter = makeFormatter;
  _exports.makeRelativeFormat = makeRelativeFormat;
  _exports.strftime = strftime;
  var weekdays = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

  function pad(num) {
    return "0".concat(num).slice(-2);
  }

  function strftime(time, formatString) {
    var day = time.getDay();
    var date = time.getDate();
    var month = time.getMonth();
    var year = time.getFullYear();
    var hour = time.getHours();
    var minute = time.getMinutes();
    var second = time.getSeconds();
    return formatString.replace(/%([%aAbBcdeHIlmMpPSwyYZz])/g, function (_arg) {
      var match;
      var modifier = _arg[1];

      switch (modifier) {
        case '%':
          return '%';

        case 'a':
          return weekdays[day].slice(0, 3);

        case 'A':
          return weekdays[day];

        case 'b':
          return months[month].slice(0, 3);

        case 'B':
          return months[month];

        case 'c':
          return time.toString();

        case 'd':
          return pad(date);

        case 'e':
          return String(date);

        case 'H':
          return pad(hour);

        case 'I':
          return pad(strftime(time, '%l'));

        case 'l':
          if (hour === 0 || hour === 12) {
            return String(12);
          } else {
            return String((hour + 12) % 12);
          }

        case 'm':
          return pad(month + 1);

        case 'M':
          return pad(minute);

        case 'p':
          if (hour > 11) {
            return 'PM';
          } else {
            return 'AM';
          }

        case 'P':
          if (hour > 11) {
            return 'pm';
          } else {
            return 'am';
          }

        case 'S':
          return pad(second);

        case 'w':
          return String(day);

        case 'y':
          return pad(year % 100);

        case 'Y':
          return String(year);

        case 'Z':
          match = time.toString().match(/\((\w+)\)$/);
          return match ? match[1] : '';

        case 'z':
          match = time.toString().match(/\w([+-]\d\d\d\d) /);
          return match ? match[1] : '';
      }

      return '';
    });
  }

  function makeFormatter(options) {
    var format;
    return function () {
      if (format) return format;

      if ('Intl' in window) {
        try {
          format = new Intl.DateTimeFormat(undefined, options);
          return format;
        } catch (e) {
          if (!babelHelpers.instanceof(e, RangeError)) {
            throw e;
          }
        }
      }
    };
  }

  var dayFirst = null;
  var dayFirstFormatter = makeFormatter({
    day: 'numeric',
    month: 'short'
  });

  function isDayFirst() {
    if (dayFirst !== null) {
      return dayFirst;
    }

    var formatter = dayFirstFormatter();

    if (formatter) {
      var output = formatter.format(new Date(0));
      dayFirst = !!output.match(/^\d/);
      return dayFirst;
    } else {
      return false;
    }
  }

  var yearSeparator = null;
  var yearFormatter = makeFormatter({
    day: 'numeric',
    month: 'short',
    year: 'numeric'
  });

  function isYearSeparator() {
    if (yearSeparator !== null) {
      return yearSeparator;
    }

    var formatter = yearFormatter();

    if (formatter) {
      var output = formatter.format(new Date(0));
      yearSeparator = !!output.match(/\d,/);
      return yearSeparator;
    } else {
      return true;
    }
  }

  function isThisYear(date) {
    var now = new Date();
    return now.getUTCFullYear() === date.getUTCFullYear();
  }

  function makeRelativeFormat(locale, options) {
    if ('Intl' in window && 'RelativeTimeFormat' in window.Intl) {
      try {
        return new Intl.RelativeTimeFormat(locale, options);
      } catch (e) {
        if (!babelHelpers.instanceof(e, RangeError)) {
          throw e;
        }
      }
    }
  }

  function localeFromElement(el) {
    var container = el.closest('[lang]');

    if (babelHelpers.instanceof(container, HTMLElement) && container.lang) {
      return container.lang;
    }

    return 'default';
  }
});