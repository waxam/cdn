define(["exports", "./utils.js"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  var RelativeTime = /*#__PURE__*/function () {
    function RelativeTime(date, locale) {
      babelHelpers.classCallCheck(this, RelativeTime);
      this.date = date;
      this.locale = locale;
    }

    babelHelpers.createClass(RelativeTime, [{
      key: "toString",
      value: function toString() {
        var ago = this.timeElapsed();

        if (ago) {
          return ago;
        } else {
          var ahead = this.timeAhead();

          if (ahead) {
            return ahead;
          } else {
            return "on ".concat(this.formatDate());
          }
        }
      }
    }, {
      key: "timeElapsed",
      value: function timeElapsed() {
        var ms = new Date().getTime() - this.date.getTime();
        var sec = Math.round(ms / 1000);
        var min = Math.round(sec / 60);
        var hr = Math.round(min / 60);
        var day = Math.round(hr / 24);

        if (ms >= 0 && day < 30) {
          return this.timeAgoFromMs(ms);
        } else {
          return null;
        }
      }
    }, {
      key: "timeAhead",
      value: function timeAhead() {
        var ms = this.date.getTime() - new Date().getTime();
        var sec = Math.round(ms / 1000);
        var min = Math.round(sec / 60);
        var hr = Math.round(min / 60);
        var day = Math.round(hr / 24);

        if (ms >= 0 && day < 30) {
          return this.timeUntil();
        } else {
          return null;
        }
      }
    }, {
      key: "timeAgo",
      value: function timeAgo() {
        var ms = new Date().getTime() - this.date.getTime();
        return this.timeAgoFromMs(ms);
      }
    }, {
      key: "timeAgoFromMs",
      value: function timeAgoFromMs(ms) {
        var sec = Math.round(ms / 1000);
        var min = Math.round(sec / 60);
        var hr = Math.round(min / 60);
        var day = Math.round(hr / 24);
        var month = Math.round(day / 30);
        var year = Math.round(month / 12);

        if (ms < 0) {
          return formatRelativeTime(this.locale, 0, 'second');
        } else if (sec < 10) {
          return formatRelativeTime(this.locale, 0, 'second');
        } else if (sec < 45) {
          return formatRelativeTime(this.locale, -sec, 'second');
        } else if (sec < 90) {
          return formatRelativeTime(this.locale, -min, 'minute');
        } else if (min < 45) {
          return formatRelativeTime(this.locale, -min, 'minute');
        } else if (min < 90) {
          return formatRelativeTime(this.locale, -hr, 'hour');
        } else if (hr < 24) {
          return formatRelativeTime(this.locale, -hr, 'hour');
        } else if (hr < 36) {
          return formatRelativeTime(this.locale, -day, 'day');
        } else if (day < 30) {
          return formatRelativeTime(this.locale, -day, 'day');
        } else if (month < 18) {
          return formatRelativeTime(this.locale, -month, 'month');
        } else {
          return formatRelativeTime(this.locale, -year, 'year');
        }
      }
    }, {
      key: "microTimeAgo",
      value: function microTimeAgo() {
        var ms = new Date().getTime() - this.date.getTime();
        var sec = Math.round(ms / 1000);
        var min = Math.round(sec / 60);
        var hr = Math.round(min / 60);
        var day = Math.round(hr / 24);
        var month = Math.round(day / 30);
        var year = Math.round(month / 12);

        if (min < 1) {
          return '1m';
        } else if (min < 60) {
          return "".concat(min, "m");
        } else if (hr < 24) {
          return "".concat(hr, "h");
        } else if (day < 365) {
          return "".concat(day, "d");
        } else {
          return "".concat(year, "y");
        }
      }
    }, {
      key: "timeUntil",
      value: function timeUntil() {
        var ms = this.date.getTime() - new Date().getTime();
        return this.timeUntilFromMs(ms);
      }
    }, {
      key: "timeUntilFromMs",
      value: function timeUntilFromMs(ms) {
        var sec = Math.round(ms / 1000);
        var min = Math.round(sec / 60);
        var hr = Math.round(min / 60);
        var day = Math.round(hr / 24);
        var month = Math.round(day / 30);
        var year = Math.round(month / 12);

        if (month >= 18) {
          return formatRelativeTime(this.locale, year, 'year');
        } else if (month >= 12) {
          return formatRelativeTime(this.locale, year, 'year');
        } else if (day >= 45) {
          return formatRelativeTime(this.locale, month, 'month');
        } else if (day >= 30) {
          return formatRelativeTime(this.locale, month, 'month');
        } else if (hr >= 36) {
          return formatRelativeTime(this.locale, day, 'day');
        } else if (hr >= 24) {
          return formatRelativeTime(this.locale, day, 'day');
        } else if (min >= 90) {
          return formatRelativeTime(this.locale, hr, 'hour');
        } else if (min >= 45) {
          return formatRelativeTime(this.locale, hr, 'hour');
        } else if (sec >= 90) {
          return formatRelativeTime(this.locale, min, 'minute');
        } else if (sec >= 45) {
          return formatRelativeTime(this.locale, min, 'minute');
        } else if (sec >= 10) {
          return formatRelativeTime(this.locale, sec, 'second');
        } else {
          return formatRelativeTime(this.locale, 0, 'second');
        }
      }
    }, {
      key: "microTimeUntil",
      value: function microTimeUntil() {
        var ms = this.date.getTime() - new Date().getTime();
        var sec = Math.round(ms / 1000);
        var min = Math.round(sec / 60);
        var hr = Math.round(min / 60);
        var day = Math.round(hr / 24);
        var month = Math.round(day / 30);
        var year = Math.round(month / 12);

        if (day >= 365) {
          return "".concat(year, "y");
        } else if (hr >= 24) {
          return "".concat(day, "d");
        } else if (min >= 60) {
          return "".concat(hr, "h");
        } else if (min > 1) {
          return "".concat(min, "m");
        } else {
          return '1m';
        }
      }
    }, {
      key: "formatDate",
      value: function formatDate() {
        var format = (0, _utils.isDayFirst)() ? '%e %b' : '%b %e';

        if (!(0, _utils.isThisYear)(this.date)) {
          format += (0, _utils.isYearSeparator)() ? ', %Y' : ' %Y';
        }

        return (0, _utils.strftime)(this.date, format);
      }
    }, {
      key: "formatTime",
      value: function formatTime() {
        var formatter = timeFormatter();

        if (formatter) {
          return formatter.format(this.date);
        } else {
          return (0, _utils.strftime)(this.date, '%l:%M%P');
        }
      }
    }]);
    return RelativeTime;
  }();

  _exports.default = RelativeTime;

  function formatRelativeTime(locale, value, unit) {
    var formatter = (0, _utils.makeRelativeFormat)(locale, {
      numeric: 'auto'
    });

    if (formatter) {
      return formatter.format(value, unit);
    } else {
      return formatEnRelativeTime(value, unit);
    }
  }

  function formatEnRelativeTime(value, unit) {
    if (value === 0) {
      switch (unit) {
        case 'year':
        case 'quarter':
        case 'month':
        case 'week':
          return "this ".concat(unit);

        case 'day':
          return 'today';

        case 'hour':
        case 'minute':
          return "in 0 ".concat(unit, "s");

        case 'second':
          return 'now';
      }
    } else if (value === 1) {
      switch (unit) {
        case 'year':
        case 'quarter':
        case 'month':
        case 'week':
          return "next ".concat(unit);

        case 'day':
          return 'tomorrow';

        case 'hour':
        case 'minute':
        case 'second':
          return "in 1 ".concat(unit);
      }
    } else if (value === -1) {
      switch (unit) {
        case 'year':
        case 'quarter':
        case 'month':
        case 'week':
          return "last ".concat(unit);

        case 'day':
          return 'yesterday';

        case 'hour':
        case 'minute':
        case 'second':
          return "1 ".concat(unit, " ago");
      }
    } else if (value > 1) {
      switch (unit) {
        case 'year':
        case 'quarter':
        case 'month':
        case 'week':
        case 'day':
        case 'hour':
        case 'minute':
        case 'second':
          return "in ".concat(value, " ").concat(unit, "s");
      }
    } else if (value < -1) {
      switch (unit) {
        case 'year':
        case 'quarter':
        case 'month':
        case 'week':
        case 'day':
        case 'hour':
        case 'minute':
        case 'second':
          return "".concat(-value, " ").concat(unit, "s ago");
      }
    }

    throw new RangeError("Invalid unit argument for format() '".concat(unit, "'"));
  }

  var timeFormatter = (0, _utils.makeFormatter)({
    hour: 'numeric',
    minute: '2-digit'
  });
});