define(["exports", "./utils.js"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var datetimes = new WeakMap();

  var ExtendedTimeElement = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(ExtendedTimeElement, _HTMLElement);

    var _super = _createSuper(ExtendedTimeElement);

    function ExtendedTimeElement() {
      babelHelpers.classCallCheck(this, ExtendedTimeElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(ExtendedTimeElement, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var title = this.getFormattedTitle();

        if (title && !this.hasAttribute('title')) {
          this.setAttribute('title', title);
        }

        var text = this.getFormattedDate();

        if (text) {
          this.textContent = text;
        }
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attrName, oldValue, newValue) {
        var oldTitle = this.getFormattedTitle();

        if (attrName === 'datetime') {
          var millis = Date.parse(newValue);

          if (isNaN(millis)) {
            datetimes.delete(this);
          } else {
            datetimes.set(this, new Date(millis));
          }
        }

        var title = this.getFormattedTitle();
        var currentTitle = this.getAttribute('title');

        if (attrName !== 'title' && title && (!currentTitle || currentTitle === oldTitle)) {
          this.setAttribute('title', title);
        }

        var text = this.getFormattedDate();

        if (text) {
          this.textContent = text;
        }
      }
    }, {
      key: "date",
      get: function get() {
        return datetimes.get(this);
      }
    }, {
      key: "getFormattedTitle",
      value: function getFormattedTitle() {
        var date = this.date;
        if (!date) return;
        var formatter = titleFormatter();

        if (formatter) {
          return formatter.format(date);
        } else {
          try {
            return date.toLocaleString();
          } catch (e) {
            if (babelHelpers.instanceof(e, RangeError)) {
              return date.toString();
            } else {
              throw e;
            }
          }
        }
      }
    }, {
      key: "getFormattedDate",
      value: function getFormattedDate() {
        return;
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ['datetime', 'day', 'format', 'lang', 'hour', 'minute', 'month', 'second', 'title', 'weekday', 'year', 'time-zone-name'];
      }
    }]);
    return ExtendedTimeElement;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.default = ExtendedTimeElement;
  var titleFormatter = (0, _utils.makeFormatter)({
    day: 'numeric',
    month: 'short',
    year: 'numeric',
    hour: 'numeric',
    minute: '2-digit',
    timeZoneName: 'short'
  });
});