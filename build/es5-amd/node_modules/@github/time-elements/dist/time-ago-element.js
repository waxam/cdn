define(["exports", "./relative-time.js", "./relative-time-element.js", "./utils.js"], function (_exports, _relativeTime, _relativeTimeElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;
  _relativeTime = babelHelpers.interopRequireDefault(_relativeTime);
  _relativeTimeElement = babelHelpers.interopRequireDefault(_relativeTimeElement);

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var TimeAgoElement = /*#__PURE__*/function (_RelativeTimeElement) {
    babelHelpers.inherits(TimeAgoElement, _RelativeTimeElement);

    var _super = _createSuper(TimeAgoElement);

    function TimeAgoElement() {
      babelHelpers.classCallCheck(this, TimeAgoElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(TimeAgoElement, [{
      key: "getFormattedDate",
      value: function getFormattedDate() {
        var format = this.getAttribute('format');
        var date = this.date;
        if (!date) return;

        if (format === 'micro') {
          return new _relativeTime.default(date, (0, _utils.localeFromElement)(this)).microTimeAgo();
        } else {
          return new _relativeTime.default(date, (0, _utils.localeFromElement)(this)).timeAgo();
        }
      }
    }]);
    return TimeAgoElement;
  }(_relativeTimeElement.default);

  _exports.default = TimeAgoElement;

  if (!window.customElements.get('time-ago')) {
    window.TimeAgoElement = TimeAgoElement;
    window.customElements.define('time-ago', TimeAgoElement);
  }
});