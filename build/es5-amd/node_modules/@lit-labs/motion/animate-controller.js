define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.controllerMap = _exports.AnimateController = void 0;
  var i = new WeakMap();
  _exports.controllerMap = i;

  var t = /*#__PURE__*/function () {
    function t(_t, s) {
      babelHelpers.classCallCheck(this, t);
      this.startPaused = !1, this.disabled = !1, this.clients = new Set(), this.pendingComplete = !1, this.host = _t, this.defaultOptions = s.defaultOptions || {}, this.startPaused = !!s.startPaused, this.disabled = !!s.disabled, this.onComplete = s.onComplete, i.set(this.host, this);
    }

    babelHelpers.createClass(t, [{
      key: "add",
      value: function () {
        var _add = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(i) {
          var _t2, s;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.clients.add(i);
                  this.startPaused && (null === (_t2 = i.webAnimation) || void 0 === _t2 || _t2.pause());
                  this.pendingComplete = !0;
                  _context.next = 5;
                  return i.finished;

                case 5:
                  this.pendingComplete && !this.isAnimating && (this.pendingComplete = !1, null === (s = this.onComplete) || void 0 === s || s.call(this));

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function add(_x) {
          return _add.apply(this, arguments);
        }

        return add;
      }()
    }, {
      key: "remove",
      value: function remove(i) {
        this.clients.delete(i);
      }
    }, {
      key: "pause",
      value: function pause() {
        this.clients.forEach(function (i) {
          var _t3;

          return null === (_t3 = i.webAnimation) || void 0 === _t3 ? void 0 : _t3.pause();
        });
      }
    }, {
      key: "play",
      value: function play() {
        this.clients.forEach(function (i) {
          var _t4;

          return null === (_t4 = i.webAnimation) || void 0 === _t4 ? void 0 : _t4.play();
        });
      }
    }, {
      key: "cancel",
      value: function cancel() {
        this.clients.forEach(function (i) {
          var _t5;

          return null === (_t5 = i.webAnimation) || void 0 === _t5 ? void 0 : _t5.cancel();
        }), this.clients.clear();
      }
    }, {
      key: "finish",
      value: function finish() {
        this.clients.forEach(function (i) {
          var _t6;

          return null === (_t6 = i.webAnimation) || void 0 === _t6 ? void 0 : _t6.finish();
        }), this.clients.clear();
      }
    }, {
      key: "togglePlay",
      value: function togglePlay() {
        this.isPlaying ? this.pause() : this.play();
      }
    }, {
      key: "isAnimating",
      get: function get() {
        return this.clients.size > 0;
      }
    }, {
      key: "isPlaying",
      get: function get() {
        return Array.from(this.clients).some(function (i) {
          var _t7;

          return "running" === (null === (_t7 = i.webAnimation) || void 0 === _t7 ? void 0 : _t7.playState);
        });
      }
    }, {
      key: "finished",
      value: function () {
        var _finished = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return Promise.all(Array.from(this.clients).map(function (i) {
                    return i.finished;
                  }));

                case 2:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function finished() {
          return _finished.apply(this, arguments);
        }

        return finished;
      }()
    }]);
    return t;
  }();

  _exports.AnimateController = t;
});