define(["exports", "../../lit/html.js", "../../lit/directive.js", "../../lit/async-directive.js", "./animate-controller.js"], function (_exports, _html, _directive, _asyncDirective, _animateController) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Animate = void 0;
  Object.defineProperty(_exports, "AnimateController", {
    enumerable: true,
    get: function get() {
      return _animateController.AnimateController;
    }
  });
  _exports.transformProps = _exports.none = _exports.flyRight = _exports.flyLeft = _exports.flyBelow = _exports.flyAbove = _exports.fadeOut = _exports.fadeInSlow = _exports.fadeIn = _exports.fade = _exports.defaultKeyframeOptions = _exports.defaultCssProperties = _exports.animationFrame = _exports.animate = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var h = 0;

  var r = new Map(),
      n = new WeakSet(),
      a = function a() {
    return new Promise(function (t) {
      return requestAnimationFrame(t);
    });
  },
      l = [{
    transform: "translateY(100%) scale(0)",
    opacity: 0
  }],
      c = [{
    transform: "translateY(-100%) scale(0)",
    opacity: 0
  }],
      d = [{
    transform: "translateX(-100%) scale(0)",
    opacity: 0
  }],
      u = [{
    transform: "translateX(100%) scale(0)",
    opacity: 0
  }],
      v = [{}],
      f = [{
    opacity: 0
  }],
      m = f,
      p = [{
    opacity: 0
  }, {
    opacity: 1
  }],
      y = [{
    opacity: 0
  }, {
    opacity: .25,
    offset: .75
  }, {
    opacity: 1
  }],
      g = function g(t, i) {
    var s = t - i;
    return 0 === s ? void 0 : s;
  },
      w = function w(t, i) {
    var s = t / i;
    return 1 === s ? void 0 : s;
  },
      A = {
    left: function left(t, i) {
      var s = g(t, i);
      return {
        value: s,
        transform: s && "translateX(".concat(s, "px)")
      };
    },
    top: function top(t, i) {
      var s = g(t, i);
      return {
        value: s,
        transform: s && "translateY(".concat(s, "px)")
      };
    },
    width: function width(t, i) {
      var s = w(t, i);
      return {
        value: s,
        transform: s && "scaleX(".concat(s, ")")
      };
    },
    height: function height(t, i) {
      var s = w(t, i);
      return {
        value: s,
        transform: s && "scaleY(".concat(s, ")")
      };
    }
  },
      b = {
    duration: 333,
    easing: "ease-in-out"
  },
      j = ["left", "top", "width", "height", "opacity", "color", "background"],
      x = new WeakMap();

  _exports.defaultCssProperties = j;
  _exports.defaultKeyframeOptions = b;
  _exports.transformProps = A;
  _exports.fadeInSlow = y;
  _exports.fadeIn = p;
  _exports.fade = m;
  _exports.fadeOut = f;
  _exports.none = v;
  _exports.flyRight = u;
  _exports.flyLeft = d;
  _exports.flyAbove = c;
  _exports.flyBelow = l;
  _exports.animationFrame = a;

  var S = /*#__PURE__*/function (_e) {
    babelHelpers.inherits(S, _e);

    var _super = _createSuper(S);

    function S(t) {
      var _this;

      babelHelpers.classCallCheck(this, S);
      if (_this = _super.call(this, t), _this.t = null, _this.i = null, _this.o = !0, _this.shouldLog = !1, t.type === _directive.PartType.CHILD) throw Error("The `animate` directive must be used in attribute position.");

      _this.createFinished();

      return babelHelpers.possibleConstructorReturn(_this);
    }

    babelHelpers.createClass(S, [{
      key: "createFinished",
      value: function createFinished() {
        var _this2 = this;

        var t;
        null === (t = this.resolveFinished) || void 0 === t || t.call(this), this.finished = new Promise(function (t) {
          _this2.h = t;
        });
      }
    }, {
      key: "resolveFinished",
      value: function () {
        var _resolveFinished = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          var t;
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  null === (t = this.h) || void 0 === t || t.call(this), this.h = void 0;

                case 1:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function resolveFinished() {
          return _resolveFinished.apply(this, arguments);
        }

        return resolveFinished;
      }()
    }, {
      key: "render",
      value: function render(i) {
        return _html.nothing;
      }
    }, {
      key: "getController",
      value: function getController() {
        return _animateController.controllerMap.get(this.l);
      }
    }, {
      key: "isDisabled",
      value: function isDisabled() {
        var t;
        return this.options.disabled || (null === (t = this.getController()) || void 0 === t ? void 0 : t.disabled);
      }
    }, {
      key: "update",
      value: function update(t, _ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 1),
            i = _ref2[0];

        var s;
        var e = void 0 === this.l;
        return e && (this.l = null === (s = t.options) || void 0 === s ? void 0 : s.host, this.l.addController(this), this.element = t.element, x.set(this.element, this)), this.optionsOrCallback = i, (e || "function" != typeof i) && this.u(i), this.render(i);
      }
    }, {
      key: "u",
      value: function u(t) {
        var i, s;
        t = null != t ? t : {};
        var e = this.getController();
        void 0 !== e && ((t = _objectSpread(_objectSpread({}, e.defaultOptions), t)).keyframeOptions = _objectSpread(_objectSpread({}, e.defaultOptions.keyframeOptions), t.keyframeOptions)), null !== (i = (s = t).properties) && void 0 !== i || (s.properties = j), this.options = t;
      }
    }, {
      key: "v",
      value: function v() {
        var t = {},
            i = this.element.getBoundingClientRect(),
            s = getComputedStyle(this.element);
        return this.options.properties.forEach(function (e) {
          var o;
          var h = null !== (o = i[e]) && void 0 !== o ? o : A[e] ? void 0 : s[e],
              r = Number(h);
          t[e] = isNaN(r) ? h + "" : r;
        }), t;
      }
    }, {
      key: "p",
      value: function p() {
        var t,
            i = !0;
        return this.options.guard && (t = this.options.guard(), i = function (t, i) {
          if (Array.isArray(t)) {
            if (Array.isArray(i) && i.length === t.length && t.every(function (t, s) {
              return t === i[s];
            })) return !1;
          } else if (i === t) return !1;

          return !0;
        }(t, this.m)), this.o = this.l.hasUpdated && !this.isDisabled() && !this.isAnimating() && i && this.element.isConnected, this.o && (this.m = Array.isArray(t) ? Array.from(t) : t), this.o;
      }
    }, {
      key: "hostUpdate",
      value: function hostUpdate() {
        var t;
        "function" == typeof this.optionsOrCallback && this.u(this.optionsOrCallback()), this.p() && (this.g = this.v(), this.t = null !== (t = this.t) && void 0 !== t ? t : this.element.parentNode, this.i = this.element.nextSibling);
      }
    }, {
      key: "hostUpdated",
      value: function () {
        var _hostUpdated = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var t, i, s, e, _this$O, _s, _o, _s2, _this$O2, _o2, _n;

          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!(!this.o || !this.element.isConnected || this.options.skipInitial && !this.isHostRendered)) {
                    _context2.next = 2;
                    break;
                  }

                  return _context2.abrupt("return");

                case 2:
                  this.prepare();
                  _context2.next = 5;
                  return a;

                case 5:
                  i = this._(), s = this.A(this.options.keyframeOptions, i), e = this.v();

                  if (void 0 !== this.g) {
                    _this$O = this.O(this.g, e, i), _s = _this$O.from, _o = _this$O.to;
                    this.log("measured", [this.g, e, _s, _o]), t = this.calculateKeyframes(_s, _o);
                  } else {
                    _s2 = r.get(this.options.inId);

                    if (_s2) {
                      r.delete(this.options.inId);
                      _this$O2 = this.O(_s2, e, i), _o2 = _this$O2.from, _n = _this$O2.to;
                      t = this.calculateKeyframes(_o2, _n), t = this.options.in ? [_objectSpread(_objectSpread({}, this.options.in[0]), t[0])].concat(babelHelpers.toConsumableArray(this.options.in.slice(1)), [t[1]]) : t, h++, t.forEach(function (t) {
                        return t.zIndex = h;
                      });
                    } else this.options.in && (t = [].concat(babelHelpers.toConsumableArray(this.options.in), [{}]));
                  }

                  this.animate(t, s);

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function hostUpdated() {
          return _hostUpdated.apply(this, arguments);
        }

        return hostUpdated;
      }()
    }, {
      key: "resetStyles",
      value: function resetStyles() {
        var t;
        void 0 !== this.P && (this.element.setAttribute("style", null !== (t = this.P) && void 0 !== t ? t : ""), this.P = void 0);
      }
    }, {
      key: "commitStyles",
      value: function commitStyles() {
        var t, i;
        this.P = this.element.getAttribute("style"), null === (t = this.webAnimation) || void 0 === t || t.commitStyles(), null === (i = this.webAnimation) || void 0 === i || i.cancel();
      }
    }, {
      key: "reconnected",
      value: function reconnected() {}
    }, {
      key: "disconnected",
      value: function () {
        var _disconnected = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          var t, _t, _t2, _i, _s3, i;

          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  if (this.o) {
                    _context3.next = 2;
                    break;
                  }

                  return _context3.abrupt("return");

                case 2:
                  if (!(void 0 !== this.options.id && r.set(this.options.id, this.g), void 0 === this.options.out)) {
                    _context3.next = 4;
                    break;
                  }

                  return _context3.abrupt("return");

                case 4:
                  this.prepare();
                  _context3.next = 7;
                  return a();

                case 7:
                  if (!(null === (t = this.t) || void 0 === t ? void 0 : t.isConnected)) {
                    _context3.next = 10;
                    break;
                  }

                  _t = this.i && this.i.parentNode === this.t ? this.i : null;

                  if (this.t.insertBefore(this.element, _t), this.options.stabilizeOut) {
                    _t2 = this.v();
                    this.log("stabilizing out");
                    _i = this.g.left - _t2.left, _s3 = this.g.top - _t2.top;
                    !("static" === getComputedStyle(this.element).position) || 0 === _i && 0 === _s3 || (this.element.style.position = "relative"), 0 !== _i && (this.element.style.left = _i + "px"), 0 !== _s3 && (this.element.style.top = _s3 + "px");
                  }

                case 10:
                  i = this.A(this.options.keyframeOptions);
                  _context3.next = 13;
                  return this.animate(this.options.out, i);

                case 13:
                  this.element.remove();

                case 14:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function disconnected() {
          return _disconnected.apply(this, arguments);
        }

        return disconnected;
      }()
    }, {
      key: "prepare",
      value: function prepare() {
        this.createFinished();
      }
    }, {
      key: "start",
      value: function start() {
        var t, i;
        null === (i = (t = this.options).onStart) || void 0 === i || i.call(t, this);
      }
    }, {
      key: "didFinish",
      value: function didFinish(t) {
        var i, s;
        t && (null === (s = (i = this.options).onComplete) || void 0 === s || s.call(i, this)), this.g = void 0, this.animatingProperties = void 0, this.frames = void 0, this.resolveFinished();
      }
    }, {
      key: "_",
      value: function _() {
        var t = [];

        for (var _i2 = this.element.parentNode; _i2; _i2 = null == _i2 ? void 0 : _i2.parentNode) {
          var _s4 = x.get(_i2);

          _s4 && !_s4.isDisabled() && _s4 && t.push(_s4);
        }

        return t;
      }
    }, {
      key: "isHostRendered",
      get: function get() {
        var _this3 = this;

        var t = n.has(this.l);
        return t || this.l.updateComplete.then(function () {
          n.add(_this3.l);
        }), t;
      }
    }, {
      key: "A",
      value: function A(t) {
        var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._();

        var s = _objectSpread({}, b);

        return i.forEach(function (t) {
          return Object.assign(s, t.options.keyframeOptions);
        }), Object.assign(s, t), s;
      }
    }, {
      key: "O",
      value: function O(t, i, s) {
        t = _objectSpread({}, t), i = _objectSpread({}, i);
        var e = s.map(function (t) {
          return t.animatingProperties;
        }).filter(function (t) {
          return void 0 !== t;
        });
        var o = 1,
            h = 1;
        return void 0 !== e && (e.forEach(function (t) {
          t.width && (o /= t.width), t.height && (h /= t.height);
        }), void 0 !== t.left && void 0 !== i.left && (t.left = o * t.left, i.left = o * i.left), void 0 !== t.top && void 0 !== i.top && (t.top = h * t.top, i.top = h * i.top)), {
          from: t,
          to: i
        };
      }
    }, {
      key: "calculateKeyframes",
      value: function calculateKeyframes(t, i) {
        var s = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : !1;
        var e;
        var o = {},
            h = {};
        var r = !1;
        var n = {};

        for (var _s5 in i) {
          var _a = t[_s5],
              _l = i[_s5];

          if (_s5 in A) {
            var _t3 = A[_s5];
            if (void 0 === _a || void 0 === _l) continue;

            var _i3 = _t3(_a, _l);

            void 0 !== _i3.transform && (n[_s5] = _i3.value, r = !0, o.transform = "".concat(null !== (e = o.transform) && void 0 !== e ? e : "", " ").concat(_i3.transform));
          } else _a !== _l && void 0 !== _a && void 0 !== _l && (r = !0, o[_s5] = _a, h[_s5] = _l);
        }

        return o.transformOrigin = h.transformOrigin = s ? "center center" : "top left", this.animatingProperties = n, r ? [o, h] : void 0;
      }
    }, {
      key: "animate",
      value: function () {
        var _animate = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(t) {
          var i,
              s,
              _e2,
              _args4 = arguments;

          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  i = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : this.options.keyframeOptions;
                  this.start(), this.frames = t;
                  s = !1;

                  if (!(!this.isAnimating() && !this.isDisabled() && (this.options.onFrames && (this.frames = t = this.options.onFrames(this), this.log("modified frames", t)), void 0 !== t))) {
                    _context4.next = 15;
                    break;
                  }

                  this.log("animate", [t, i]), s = !0, this.webAnimation = this.element.animate(t, i);
                  _e2 = this.getController();
                  null == _e2 || _e2.add(this);
                  _context4.prev = 7;
                  _context4.next = 10;
                  return this.webAnimation.finished;

                case 10:
                  _context4.next = 14;
                  break;

                case 12:
                  _context4.prev = 12;
                  _context4.t0 = _context4["catch"](7);

                case 14:
                  null == _e2 || _e2.remove(this);

                case 15:
                  return _context4.abrupt("return", (this.didFinish(s), s));

                case 16:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this, [[7, 12]]);
        }));

        function animate(_x) {
          return _animate.apply(this, arguments);
        }

        return animate;
      }()
    }, {
      key: "isAnimating",
      value: function isAnimating() {
        var t, i;
        return "running" === (null === (t = this.webAnimation) || void 0 === t ? void 0 : t.playState) || (null === (i = this.webAnimation) || void 0 === i ? void 0 : i.pending);
      }
    }, {
      key: "log",
      value: function log(t, i) {
        this.shouldLog && !this.isDisabled() && console.log(t, this.options.id, i);
      }
    }]);
    return S;
  }(_asyncDirective.AsyncDirective);

  _exports.Animate = S;
  var $ = (0, _directive.directive)(S);
  _exports.animate = $;
});