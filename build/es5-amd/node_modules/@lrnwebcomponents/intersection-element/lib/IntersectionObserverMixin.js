define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IntersectionObserverMixin = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2020 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `IntersectionObserverMixin`
   * `Wiring to provide basic IntersectionObserver support to any web component`
   */
  var IntersectionObserverMixin = function IntersectionObserverMixin(SuperClass) {
    // SuperClass so we can write any web component library / base class
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      /**
       * Constructor
       */
      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this); // listen for this to be true in your element

        _this.elementVisible = false; // threasholds to check for, every 25%

        _this.IOThresholds = [0.0, 0.25, 0.5, 0.75, 1.0]; // margin from root element

        _this.IORootMargin = "0px"; // wait till at least 50% of the item is visible to claim visible

        _this.IOVisibleLimit = 0.5; // drop the observer once we are visible

        _this.IORemoveOnVisible = true; // delay in observing, performance reasons for minimum at 100

        _this.IODelay = 100; // root element of the viewport; null means the screen

        _this.IORoot = null;
        return _this;
      }
      /**
       * Properties, LitElement format
       */


      babelHelpers.createClass(_class, [{
        key: "connectedCallback",
        value:
        /**
         * HTMLElement specification
         */
        function connectedCallback() {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          } // setup the intersection observer, only if we are not visible


          if (!this.elementVisible) {
            this.intersectionObserver = new IntersectionObserver(this.handleIntersectionCallback.bind(this), {
              root: this.IORoot,
              rootMargin: this.IORootMargin,
              threshold: this.IOThresholds,
              delay: this.IODelay
            });
            this.intersectionObserver.observe(this);
          }
        }
        /**
         * HTMLElement specification
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          // if we have an intersection observer, disconnect it
          if (this.intersectionObserver) {
            this.intersectionObserver.disconnect(); // edge case where element is moved in the DOM so that
            // connnected will set the event back up accurately

            this.elementVisible = false;
          }

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
          }
        }
        /**
         * Very basic IntersectionObserver callback which will set elementVisible to true
         */

      }, {
        key: "handleIntersectionCallback",
        value: function handleIntersectionCallback(entries) {
          var _iterator = _createForOfIteratorHelper(entries),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var entry = _step.value;
              var ratio = Number(entry.intersectionRatio).toFixed(2); // ensure ratio is higher than our limit before trigger visibility

              if (ratio >= this.IOVisibleLimit) {
                this.elementVisible = true; // remove the observer if we've reached our target of being visible

                if (this.IORemoveOnVisible) {
                  this.intersectionObserver.disconnect();
                }
              } else {
                this.elementVisible = false;
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          var props = {};

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)) {
            props = babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this);
          }

          return _objectSpread(_objectSpread({}, props), {}, {
            elementVisible: {
              type: Boolean,
              attribute: "element-visible",
              reflect: true
            }
          });
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.IntersectionObserverMixin = IntersectionObserverMixin;
});