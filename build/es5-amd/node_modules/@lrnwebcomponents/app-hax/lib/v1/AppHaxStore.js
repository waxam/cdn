define(["exports", "require", "../../../utils/utils.js", "../../../../mobx/dist/mobx.esm.js", "../../../replace-tag/lib/PerformanceDetect.js"], function (_exports, _require, _utils, _mobxEsm, _PerformanceDetect) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.store = void 0;
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  (0, _mobxEsm.configure)({
    enforceActions: false,
    useProxies: "ifavailable"
  }); // strict mode off

  var Store = /*#__PURE__*/function () {
    function Store() {
      babelHelpers.classCallCheck(this, Store);
      this.badDevice = null;
      this.evaluateBadDevice();
      this.location = null;
      this.token = null;
      this.refreshSiteList = true;
      this.createSiteSteps = false;
      this.appSettings = window.appSettings || {}; // defer to local if we have it for JWT

      if (this.appSettings.jwt) {
        (0, _utils.localStorageSet)("jwt", this.appSettings.jwt);
      }

      this.jwt = (0, _utils.localStorageGet)("jwt", null); // placeholder for when the actual API Backend gets plugged in here

      this.AppHaxAPI = {};
      this.newSitePromiseList = [function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../i18n-manager/lib/I18NMixin.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../wc-autoload/wc-autoload.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../replace-tag/replace-tag.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../utils/utils.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../grid-plate/grid-plate.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../simple-fields/simple-fields.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../../mobx/dist/mobx.esm.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../h-a-x/h-a-x.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-store.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-router.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-builder.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/HAXCMSLitElementTheme.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-editor.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-editor-builder.js"], res, rej);
        });
      }, function () {
        return new Promise(function (res, rej) {
          return _require.default(["../../../haxcms-elements/lib/core/haxcms-site-editor-ui.js"], res, rej);
        });
      }];
      this.appEl = null;
      this.appReady = false;
      this.soundStatus = (0, _utils.localStorageGet)("app-hax-soundStatus", true); // If user is new, make sure they are on step 1

      this.appMode = "search";
      this.activeSiteOp = null;
      this.activeSiteId = null;
      this.baseRoutes = [{
        path: "createSite-step-1",
        component: "fake",
        step: 1,
        name: "step-1",
        label: "New Journey",
        statement: "What sort of journey is it?",
        title: "Step 1: Create"
      }, {
        path: "createSite-step-2",
        component: "fake",
        step: 2,
        name: "step-2",
        label: "Structure",
        statement: "How is this organized?",
        title: "Step 2: Structure"
      }, {
        path: "createSite-step-3",
        component: "fake",
        step: 3,
        name: "step-3",
        label: "Theme select",
        statement: "What your :structure feels like?",
        title: "Step 3: Theme"
      }, {
        path: "createSite-step-4",
        component: "fake",
        step: 4,
        name: "step-4",
        label: "Name",
        statement: "What do you want to call your :structure?",
        title: "Step 4: Name"
      }, {
        path: "createSite-step-5",
        component: "fake",
        step: 5,
        name: "step-5",
        label: "Building..",
        statement: "Getting your :structure ready to launch",
        title: "Step 5: Building site"
      }, {
        path: "home",
        component: "fake",
        name: "home",
        label: "Welcome back",
        statement: "Let's go on a HAX Journey",
        title: "Home"
      }, {
        path: "index.html",
        component: "fake",
        name: "home",
        label: "Welcome back",
        statement: "Let's go on a HAX Journey",
        title: "Home"
      }, {
        path: "index.php",
        component: "fake",
        name: "home",
        label: "Welcome back",
        statement: "Let's go on a HAX Journey",
        title: "Home"
      }, {
        path: "search",
        component: "fake",
        name: "search",
        label: "Search",
        statement: "Discover active adventures",
        title: "Search sites"
      }, {
        path: "/",
        component: "fake",
        name: "welcome",
        label: "Welcome",
        statement: "Let's build something awesome!",
        title: "Home"
      }, {
        path: "/(.*)",
        component: "fake",
        name: "404",
        label: "404 :[",
        statement: "it's not you.. it's me",
        title: "FoUr Oh FoUr"
      }];
      this.routes = this.baseRoutes;
      this.siteReady = false;
      this.manifest = {};
      this.searchTerm = "";
      this.user = {
        name: ""
      };
      this.site = !(0, _utils.localStorageGet)("app-hax-site") ? {
        structure: null,
        type: null,
        theme: null,
        name: null
      } : (0, _utils.localStorageGet)("app-hax-site");
      this.step = this.stepTest(null);
      this.darkMode = !(0, _utils.localStorageGet)("app-hax-darkMode") ? false : (0, _utils.localStorageGet)("app-hax-darkMode");
      (0, _mobxEsm.makeObservable)(this, {
        // internal state for routing
        location: _mobxEsm.observable.ref,
        // router location in url
        routes: _mobxEsm.observable,
        // routes that are valid
        // internal state requirements
        appSettings: _mobxEsm.observable,
        // endpoint connections to the backend app
        appReady: _mobxEsm.observable,
        // all ready to paint
        appMode: _mobxEsm.observable,
        // mode the app is in. search, create, etc
        createSiteSteps: _mobxEsm.observable,
        // if we're making a site or in another part of app
        step: _mobxEsm.observable,
        // step that we're on in our build
        site: _mobxEsm.observable,
        // information about the site being created
        newSitePromiseList: _mobxEsm.observable,
        // user related data
        jwt: _mobxEsm.observable,
        // JSON web token
        token: _mobxEsm.observable,
        // XSS prevention token
        manifest: _mobxEsm.observable,
        // sites the user has access to
        user: _mobxEsm.observable,
        // user object like name after login
        // user preferences
        searchTerm: _mobxEsm.observable,
        // current search term for filtering own list of sites
        darkMode: _mobxEsm.observable,
        // dark mode pref
        soundStatus: _mobxEsm.observable,
        // toggle sounds on and off
        activeItem: _mobxEsm.computed,
        // active item is route
        isNewUser: _mobxEsm.computed,
        // if they are new so we can auto kick to createSiteSteps if needed
        isLoggedIn: _mobxEsm.computed,
        // basic bool for logged in
        badDevice: _mobxEsm.observable,
        // if we have a terrible device or not based on detected speeds
        activeSiteOp: _mobxEsm.observable,
        // active operation for sites if working with them
        activeSiteId: _mobxEsm.observable,
        // active Item if working w/ sites
        activeSite: _mobxEsm.computed,
        // activeSite from ID
        siteReady: _mobxEsm.observable,
        // implied that we had a site and then it got built and we can leave app
        refreshSiteList: _mobxEsm.observable // used to force state to refresh sitelisting

      });
    }

    babelHelpers.createClass(Store, [{
      key: "setPageTitle",
      value: function setPageTitle(title) {
        if (document.querySelector('title')) {
          document.querySelector('title').innerText = "HAX: ".concat(title);
        }
      } // refresh

    }, {
      key: "refreshSiteListing",
      value: function refreshSiteListing() {
        this.refreshSiteList = false; // @todo this causes a reactive feedbackloop in

        this.refreshSiteList = true;
      } // filter to just get data about THIS site

    }, {
      key: "activeSite",
      get: function get() {
        var _this = this;

        if (this.activeSiteId && this.manifest && this.manifest.items) {
          var sites = this.manifest.items.filter(function (item) {
            return item.id === _this.activeSiteId;
          });

          if (sites.length === 1) {
            return sites.pop();
          }

          return null;
        }
      } // see if this device is poor

    }, {
      key: "evaluateBadDevice",
      value: function () {
        var _evaluateBadDevice = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return _PerformanceDetect.DeviceDetails.badDevice();

                case 2:
                  this.badDevice = _context.sent;

                  if (this.badDevice === true) {
                    this.soundStatus = false;
                  }

                case 4:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function evaluateBadDevice() {
          return _evaluateBadDevice.apply(this, arguments);
        }

        return evaluateBadDevice;
      }() // validate if they are on the right step via state
      // otherwise we need to force them to the correct step

    }, {
      key: "stepTest",
      value: function stepTest(current) {
        if (this.site.structure === null && current !== 1) {
          return 1;
        } else if (this.site.structure !== null && this.site.type === null && current !== 2) {
          return 2;
        } else if (this.site.structure !== null && this.site.type !== null && this.site.theme === null && current !== 3) {
          return 3;
        } else if (this.site.structure !== null && this.site.type !== null && this.site.theme !== null && this.site.name === null && current !== 4) {
          return 4;
        } else if (this.site.structure !== null && this.site.type !== null && this.site.theme !== null && this.site.name !== null) {
          return 5;
        }

        return current;
      }
    }, {
      key: "isLoggedIn",
      get: function get() {
        if (this.appReady && this.AppHaxAPI) {
          return this.jwt !== "null" && this.jwt;
        }
      }
    }, {
      key: "isNewUser",
      get: function get() {
        if (this.manifest && this.manifest.items) {
          return this.manifest.items.length === 0;
        }
      } // site{ structure, type, theme } (course, portfolio, buz, colors)

    }, {
      key: "activeItem",
      get: function get() {
        var _this2 = this;

        if (this.routes.length > 0 && this.location && this.location.route) {
          if (this.createSiteSteps) {
            var routeItem = this.routes.find(function (item) {
              if (item.step === undefined || item.step !== _this2.step) {
                return false;
              }

              return true;
            });
            return routeItem;
          } else {
            return this.location.route;
          }
        }
      } // centralize toast messages

    }, {
      key: "toast",
      value: function toast(msg) {
        var duration = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3000;
        var extras = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
        window.dispatchEvent(new CustomEvent("app-hax-toast-show", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: _objectSpread({
            text: msg,
            duration: duration
          }, extras)
        }));
      }
    }]);
    return Store;
  }();
  /**
   * Central store
   */


  var store = new Store();
  _exports.store = store;
});