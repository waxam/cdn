define(["exports", "../../../../lit/index.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-lite.js", "../../../simple-colors/simple-colors.js", "../../../rpg-character/rpg-character.js", "./AppHaxStore.js"], function (_exports, _index, _simpleIcons, _simpleIconLite, _simpleColors, _rpgCharacter, _AppHaxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxSiteLogin = void 0;

  var _templateObject_ea99bfe0ce4611ecb13bcf602138080f, _templateObject2_ea99bfe0ce4611ecb13bcf602138080f, _templateObject3_ea99bfe0ce4611ecb13bcf602138080f, _templateObject4_ea99bfe0ce4611ecb13bcf602138080f;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var AppHaxSiteLogin = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(AppHaxSiteLogin, _SimpleColors);

    var _super = _createSuper(AppHaxSiteLogin);

    // HTMLElement life-cycle, built in; use this for setting defaults
    function AppHaxSiteLogin() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxSiteLogin);
      _this = _super.call(this);
      _this.username = "";
      _this.password = "";
      _this.errorMSG = "Enter User name";
      _this.hidePassword = true;
      _this.hasPass = false;
      return _this;
    } // properties that you wish to use as data in HTML, CSS, and the updated life-cycle


    babelHelpers.createClass(AppHaxSiteLogin, [{
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin.prototype), "firstUpdated", this).call(this);
        setTimeout(function () {
          _this2.shadowRoot.querySelector("input").focus();
        }, 0);
      } // updated fires every time a property defined above changes
      // this allows you to react to variables changing and use javascript to perform logic
      // updated(changedProperties) {
      //   changedProperties.forEach((oldValue, propName) => {
      //   });
      // }
      // CSS - specific to Lit

    }, {
      key: "checkUsername",
      value: // eslint-disable-next-line class-methods-use-this
      function checkUsername() {
        var _this3 = this;

        // eslint-disable-next-line prefer-destructuring
        var value = this.shadowRoot.querySelector("#username").value;
        this.hidePassword = false;
        this.errorMSG = "";
        this.username = value;

        _AppHaxStore.store.appEl.playSound("click2");

        setTimeout(function () {
          _this3.shadowRoot.querySelector("input").focus();
        }, 0);
      } // eslint-disable-next-line class-methods-use-this

    }, {
      key: "checkPassword",
      value: function () {
        var _checkPassword = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var value;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _AppHaxStore.store.appEl.playSound("click2"); // eslint-disable-next-line prefer-destructuring


                  value = this.shadowRoot.querySelector("#password").value; // attempt login and wait for response from the jwt-login tag via
                  // jwt-logged-in event @see _jwtLoggedIn

                  window.dispatchEvent(new CustomEvent("jwt-login-login", {
                    composed: true,
                    bubbles: true,
                    cancelable: false,
                    detail: {
                      username: this.username,
                      password: value
                    }
                  }));

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function checkPassword() {
          return _checkPassword.apply(this, arguments);
        }

        return checkPassword;
      }() // eslint-disable-next-line class-methods-use-this

    }, {
      key: "reset",
      value: function reset() {
        this.errorMSG = "";
        this.username = "";
        this.hasPass = false;
        this.hidePassword = true;
      }
    }, {
      key: "nameChange",
      value: function nameChange() {
        this.username = this.shadowRoot.querySelector("#username").value;
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin.prototype), "connectedCallback", this).call(this);
        window.addEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        window.addEventListener("jwt-login-login-failed", this._jwtLoginFailed.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        window.removeEventListener("jwt-login-login-failed", this._jwtLoginFailed.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin.prototype), "disconnectedCallback", this).call(this);
      } // implies that it failed to connect via the login credentials

    }, {
      key: "_jwtLoginFailed",
      value: function _jwtLoginFailed(e) {
        this.hidePassword = true;
        this.errorMSG = "Invalid Username or Password";

        _AppHaxStore.store.appEl.playSound("error");
      }
    }, {
      key: "_jwtLoggedIn",
      value: function _jwtLoggedIn(e) {
        if (e.detail) {
          _AppHaxStore.store.user = {
            name: this.username
          };

          _AppHaxStore.store.appEl.playSound("success");

          this.dispatchEvent(new CustomEvent("simple-modal-hide", {
            bubbles: true,
            cancelable: true,
            detail: {}
          }));

          _AppHaxStore.store.toast("Welcome ".concat(this.username, "! Let's go!"), 5000, {
            hat: "construction"
          }); // just to be safe


          _AppHaxStore.store.appEl.reset();
        }
      }
    }, {
      key: "passChange",
      value: function passChange(e) {
        var value = this.shadowRoot.querySelector("#password").value;

        if (value) {
          this.hasPass = true;
        } else {
          this.hasPass = false;
        }
      }
    }, {
      key: "toggleViewPass",
      value: function toggleViewPass(e) {
        var password = this.shadowRoot.querySelector("#password");
        var type = password.getAttribute("type") === "password" ? "text" : "password";
        password.setAttribute("type", type);
        e.target.icon = type === "text" ? "lrn:visible" : "lrn:view-off";
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ea99bfe0ce4611ecb13bcf602138080f || (_templateObject_ea99bfe0ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <rpg-character seed=\"", "\"></rpg-character>\n      <p id=\"errorText\">", "</p>\n      <div id=\"inputcontainer\">\n        ", "\n        <div class=\"external\">\n          <slot name=\"externalproviders\"></slot>\n        </div>\n      </div>\n    "])), this.username, this.errorMSG, this.hidePassword ? (0, _index.html)(_templateObject2_ea99bfe0ce4611ecb13bcf602138080f || (_templateObject2_ea99bfe0ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["<input\n                id=\"username\"\n                type=\"text\"\n                placeholder=\"user name\"\n                aria-label=\"user name\"\n                @input=\"", "\"\n              />\n              <button\n                ?disabled=\"", "\"\n                @click=", "\n              >\n                Next &gt;\n              </button>"])), this.nameChange, !this.username, this.checkUsername) : (0, _index.html)(_templateObject3_ea99bfe0ce4611ecb13bcf602138080f || (_templateObject3_ea99bfe0ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["<div class=\"notyou\">\n                Hey ", "! <a @click=", ">not you?</a>\n              </div>\n              <input\n                id=\"password\"\n                type=\"password\"\n                placeholder=\"password\"\n                @input=\"", "\"\n              />\n              <simple-icon-button-lite\n                icon=\"lrn:view-off\"\n                title=\"Toggle password display\"\n                @click=\"", "\"\n                class=\"visibility-icon\"\n              ></simple-icon-button-lite>\n              <button ?disabled=\"", "\" @click=", ">\n                Login\n              </button>"])), this.username, this.reset, this.passChange, this.toggleViewPass, !this.hasPass, this.checkPassword));
      }
    }], [{
      key: "tag",
      get: // a convention I enjoy so you can change the tag name in 1 place
      function get() {
        return "app-hax-site-login";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin), "properties", this)), {}, {
          username: {
            type: String
          },
          password: {
            type: String
          },
          errorMSG: {
            type: String
          },
          hidePassword: {
            type: Boolean
          },
          hasPass: {
            type: Boolean
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(AppHaxSiteLogin), "styles", this)), [(0, _index.css)(_templateObject4_ea99bfe0ce4611ecb13bcf602138080f || (_templateObject4_ea99bfe0ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n        #inputcontainer {\n          display: flex;\n          flex-direction: column;\n          justify-content: center;\n          align-items: center;\n        }\n        a {\n          color: red;\n        }\n\n        // This does not work\n        #errorText > p {\n          visibility: hidden;\n          background-color: lightblue;\n          color: red;\n          font-weight: bold;\n        }\n        rpg-character {\n          display: block;\n          margin: 0px;\n        }\n        .external {\n          text-align: center;\n        }\n        input {\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 28px;\n          padding: 8px;\n          border: 4px solid black;\n          border-radius: 8px;\n          width: 75%;\n        }\n        button {\n          font-family: \"Press Start 2P\", sans-serif;\n          font-size: 30px;\n          padding: 8px;\n          border: 4px solid black;\n          border-radius: 8px;\n          min-width: 50%;\n          margin: 16px;\n        }\n        button:focus,\n        button:hover {\n          background-color: var(--simple-colors-default-theme-green-8);\n          color: var(--simple-colors-default-theme-grey-1);\n          outline: 2px solid var(--simple-colors-default-theme-grey-1);\n          cursor: pointer;\n        }\n        .notyou {\n          padding: 8px;\n        }\n        .visibility-icon {\n          color: var(--simple-colors-default-theme-grey-12);\n          background-color: var(--simple-colors-default-theme-grey-3);\n          border: 2px solid var(--simple-colors-default-theme-grey-12);\n          position: relative;\n          margin-top: -44px;\n          margin-bottom: 20px;\n          margin-left: 70%;\n          z-index: 1;\n          padding: 2px;\n          --simple-icon-width: 26px;\n          --simple-icon-height: 26px;\n        }\n      "])))]);
      }
    }]);
    return AppHaxSiteLogin;
  }(_simpleColors.SimpleColors);

  _exports.AppHaxSiteLogin = AppHaxSiteLogin;
  customElements.define(AppHaxSiteLogin.tag, AppHaxSiteLogin);
});