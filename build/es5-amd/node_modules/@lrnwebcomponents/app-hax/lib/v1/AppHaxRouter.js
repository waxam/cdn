define(["exports", "../../../../@vaadin/router/dist/vaadin-router.js", "../../../../mobx/dist/mobx.esm.js", "./AppHaxStore.js"], function (_exports, _vaadinRouter, _mobxEsm, _AppHaxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppHaxRouter = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `app-hax-router`
   */
  var AppHaxRouter = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(AppHaxRouter, _HTMLElement);

    var _super = _createSuper(AppHaxRouter);

    /**
     * ready life cycle
     */
    function AppHaxRouter() {
      var _this;

      babelHelpers.classCallCheck(this, AppHaxRouter);
      _this = _super.call(this); // create router

      var options = {};

      if (_this.baseURI) {
        options.baseUrl = _this.baseURI;
      }

      _this.router = new _vaadinRouter.Router(babelHelpers.assertThisInitialized(_this), options);
      (0, _mobxEsm.autorun)(function () {
        _this._updateRouter((0, _mobxEsm.toJS)(_AppHaxStore.store.routes));
      });
      (0, _mobxEsm.autorun)(function () {
        var manifest = (0, _mobxEsm.toJS)(_AppHaxStore.store.manifest);
        var baseURI = (0, _mobxEsm.toJS)(_AppHaxStore.store.AppHaxAPI.basePath);

        if (manifest && manifest.items && manifest.items.length > 0) {
          var siteItemRoutes = manifest.items.map(function (i) {
            return {
              path: i.slug.replace(baseURI, ""),
              // replacement of the basePath ensures routes match in haxiam / subdirs
              slug: i.slug,
              name: i.id,
              component: "fake-".concat(i.id, "-e")
            };
          });
          _AppHaxStore.store.routes = babelHelpers.toConsumableArray(siteItemRoutes).concat(_AppHaxStore.store.baseRoutes);
        }
      });
      return _this;
    }

    babelHelpers.createClass(AppHaxRouter, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        window.addEventListener("vaadin-router-location-changed", this._routerLocationChanged.bind(this));
      }
      /**
       * Detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("vaadin-router-location-changed", this._routerLocationChanged.bind(this));
      }
      /**
       * Update the router based on a manifest.
       */

    }, {
      key: "_updateRouter",
      value: function _updateRouter(routerItems) {
        this.router.setRoutes(babelHelpers.toConsumableArray(routerItems));
      }
      /**
       * React to page changes in the vaadin router and convert it
       * to a change in the mobx store.
       * @param {event} e
       */
      // eslint-disable-next-line class-methods-use-this

    }, {
      key: "_routerLocationChanged",
      value: function _routerLocationChanged(e) {
        _AppHaxStore.store.location = e.detail.location;
      }
    }], [{
      key: "tag",
      get:
      /**
       * Store the tag name to make it easier to obtain directly.
       */
      function get() {
        return "app-hax-router";
      }
    }]);
    return AppHaxRouter;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.AppHaxRouter = AppHaxRouter;
  customElements.define(AppHaxRouter.tag, AppHaxRouter);
});