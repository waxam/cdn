define(["exports", "../../lit-element/lit-element.js", "../../@polymer/paper-icon-button/paper-icon-button.js", "../../@polymer/iron-icons/iron-icons.js", "../../@polymer/paper-tooltip/paper-tooltip.js"], function (_exports, _litElement, _paperIconButton, _ironIcons, _paperTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yCollapse = void 0;

  function _templateObject4_d9ab85702da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"heading\">\n        <div id=\"text\"><slot name=\"heading\"></slot></div>\n        <paper-icon-button\n          id=\"expand\"\n          @click=\"", "\"\n          ?disabled=\"", "\"\n          ?rotated=\"", "\"\n          .label=\"", "\"\n          .icon=\"", "\"\n          aria-controls=\"content\"\n          aria-expanded=\"", "\"\n        >\n        </paper-icon-button>\n        <paper-tooltip for=\"expand\"\n          >", "</paper-tooltip\n        >\n      </div>\n    "]);

    _templateObject4_d9ab85702da211eaa247b36e11306899 = function _templateObject4_d9ab85702da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject3_d9ab85702da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div\n        id=\"heading\"\n        aria-controls=\"content\"\n        aria-expanded=\"", "\"\n        role=\"button\"\n        @click=\"", "\"\n        ?disabled=\"", "\"\n        .label=\"", "\"\n      >\n        <div id=\"text\"><slot name=\"heading\"></slot></div>\n        <iron-icon\n          id=\"expand\"\n          ?rotated=\"", "\"\n          .icon=\"", "\"\n          aria-hidden=\"true\"\n        >\n        </iron-icon>\n      </div>\n      <paper-tooltip for=\"heading\"\n        >", "</paper-tooltip\n      >\n    "]);

    _templateObject3_d9ab85702da211eaa247b36e11306899 = function _templateObject3_d9ab85702da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject2_d9ab85702da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: var(--a11y-collapse-margin, 15px 0);\n          border: var(--a11y-collapse-border, 1px solid);\n          transition: all 0.5s;\n        }\n        :host(:not(:first-of-type)) {\n          border-top: var(\n            --a11y-collapse-border-between,\n            var(--a11y-collapse-border, 1px solid)\n          );\n        }\n        :host([disabled]) {\n          opacity: 0.5;\n        }\n        *[aria-controls=\"content\"][disabled] {\n          cursor: not-allowed;\n        }\n        #heading {\n          display: flex;\n          justify-content: stretch;\n          align-items: center;\n          padding: 0\n            var(\n              --a11y-collapse-padding-right,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            )\n            0\n            var(\n              --a11y-collapse-padding-left,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            );\n          font-weight: var(--a11y-collapse-heading-font-weight, bold);\n          margin: var(--a11y-collapse-margin, unset);\n          color: var(--a11y-collapse-heading-color, unset);\n          background-color: var(\n            --a11y-collapse-heading-background-color,\n            unset\n          );\n        }\n        #text {\n          flex-grow: 1;\n        }\n        #expand {\n          transition: transform 0.5s;\n          padding: (--a11y-collapse-icon-padding, unset);\n        }\n        #expand[rotated] {\n          transform: rotate(-90deg);\n        }\n        #content {\n          max-height: 0;\n          overflow: hidden;\n          padding: 0\n            var(\n              --a11y-collapse-padding-right,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            )\n            0\n            var(\n              --a11y-collapse-padding-left,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            );\n          border-top: 0px solid rgba(255, 255, 255, 0);\n          transition: all 0.5s ease-in-out;\n        }\n        :host #content-inner {\n          overflow: hidden;\n        }\n        :host([expanded]) #content {\n          max-height: unset;\n          overflow: hidden;\n          padding: var(\n              --a11y-collapse-padding-top,\n              var(--a11y-collapse-vertical-padding, 16px)\n            )\n            var(\n              --a11y-collapse-padding-right,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            )\n            var(\n              --a11y-collapse-padding-bottom,\n              var(--a11y-collapse-vertical-padding, 16px)\n            )\n            var(\n              --a11y-collapse-padding-left,\n              var(--a11y-collapse-horizontal-padding, 16px)\n            );\n          border-top: var(--a11y-collapse-border, 1px solid);\n        }\n        :host([expanded]) #content-inner {\n          overflow: unset;\n        }\n      "]);

    _templateObject2_d9ab85702da211eaa247b36e11306899 = function _templateObject2_d9ab85702da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject_d9ab85702da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <div\n        id=\"content\"\n        aria-hidden=\"", "\"\n        aria-labelledby=\"heading\"\n        aria-live=\"polite\"\n      >\n        <div id=\"content-inner\">\n          <slot name=\"content\"></slot>\n          <slot></slot>\n        </div>\n      </div>\n    "]);

    _templateObject_d9ab85702da211eaa247b36e11306899 = function _templateObject_d9ab85702da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-collapse`
   * @customElement a11y-collapse
   * an accessible expand collapse
   * 
  ### Styling
  
  `<a11y-collapse>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--a11y-collapse-margin` | margin around a11y-collapse | 15px 0
  `--a11y-collapse-border` | border around a11y-collapse | 1px solid
  `--a11y-collapse-horizontal-padding` | horizontal padding inside a11y-collapse | 16px
  `--a11y-collapse-horizontal-padding-left` | left padding inside a11y-collapse | `--a11y-collapse-horizontal-padding`
  `--a11y-collapse-horizontal-padding-right` | right padding inside a11y-collapse | `--a11y-collapse-horizontal-padding`
  `--a11y-collapse-vertical-padding` | vertical padding inside a11y-collapse | 16px
  `--a11y-collapse-horizontal-padding-top` | top padding inside a11y-collapse | `--a11y-collapse-vertical-padding`
  `--a11y-collapse-horizontal-padding-bottom` | bottom padding inside a11y-collapse | --a11y-collapse-vertical-padding
  `--a11y-collapse-border-between` | border between a11y-collapse heading and content | --a11y-collapse-border
  `--a11y-collapse-heading-font-weight` | font-weight for a11y-collapse heading | bold
  `--a11y-collapse-heading-color` | text color for a11y-collapse heading | unset
  `--a11y-collapse-heading-background-color` | background-color for a11y-collapse heading | unset
   *
  
   * @demo ./demo/index.html demo
   * @demo ./demo/group.html collapse groups
   */
  var A11yCollapse =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(A11yCollapse, _LitElement);
    babelHelpers.createClass(A11yCollapse, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_d9ab85702da211eaa247b36e11306899(), this.accordion ? this._makeAccordionButton() : this._makeIconButton(), this.expanded ? "false" : "true");
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_d9ab85702da211eaa247b36e11306899())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "a11y-collapse";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * accordion-style: whole header acts as button? default is just icon.
           */
          accordion: {
            type: Boolean,
            reflect: true
          },

          /**
           * is disabled?
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * icon when expanded
           */
          expanded: {
            type: Boolean,
            reflect: true
          },

          /**
           * icon for the button
           */
          icon: {
            type: String
          },

          /**
           * icon when expanded
           */
          iconExpanded: {
            type: String,
            attribute: "icon-expanded"
          },

          /**
           * label for the button
           */
          label: {
            type: String
          },

          /**
           * optional label for the button when expanded
           */
          labelExpanded: {
            type: String,
            attribute: "label-expanded"
          },

          /**
           * tooltip for the button
           */
          tooltip: {
            type: String
          },

          /**
           * optional tooltip for the button when expanded
           */
          tooltipExpanded: {
            type: String,
            attribute: "tooltip-expanded"
          }
        };
      }
    }]);

    function A11yCollapse() {
      var _this;

      babelHelpers.classCallCheck(this, A11yCollapse);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yCollapse).call(this));
      _this.accordion = false;
      _this.disabled = false;
      _this.expanded = false;
      _this.icon = "expand-more";
      _this.iconExpanded = null;
      _this.label = "expand/collapse";
      _this.labelExpanded = null;
      _this.tooltip = "toggle expand/collapse";
      _this.tooltipExpanded = null;
      /**
       * Fires when constructed, so that parent radio group can listen for it.
       *
       * @event a11y-collapse-attached
       */

      _this.dispatchEvent(new CustomEvent("a11y-collapse-attached", {
        bubbles: true,
        cancelable: true,
        composed: true,
        detail: babelHelpers.assertThisInitialized(_this)
      }));

      return _this;
    }

    babelHelpers.createClass(A11yCollapse, [{
      key: "disconnectedCallback",

      /**
       * Let the group know that this is gone.
       */
      value: function disconnectedCallback() {
        /**
         * Fires when detatched, so that parent radio group will no longer listen for it.
         *
         * @event a11y-collapse-detached
         */
        this.dispatchEvent(new CustomEvent("a11y-collapse-detached", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yCollapse.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Collapses the content
       */

    }, {
      key: "collapse",
      value: function collapse() {
        this.toggle(false);
      }
      /**
       * Expands the content
       */

    }, {
      key: "expand",
      value: function expand() {
        this.toggle(true);
      }
      /**
       * Toggles based on mode
       * @param {boolean} open whether to toggle open
       */

    }, {
      key: "toggle",
      value: function toggle() {
        var open = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.expanded;
        this.expanded = open;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "expanded") _this2._fireToggleEvents();
        });
      }
      /**
       * Fires toggling events
       */

    }, {
      key: "_fireToggleEvents",
      value: function _fireToggleEvents() {
        /**
         * Fires when toggled.
         *
         * @event toggle
         */
        this.dispatchEvent(new CustomEvent("toggle", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
        /**
         * Deprecated. Fires when toggled.
         *
         * @event a11y-collapse-toggle
         */

        this.dispatchEvent(new CustomEvent("a11y-collapse-toggle", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));

        if (this.expanded) {
          /**
           * Fires when expanded.
           *
           * @event expand
           */
          this.dispatchEvent(new CustomEvent("expand", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        } else {
          /**
           * Fires when collapsed.
           *
           * @event collapse
           */
          this.dispatchEvent(new CustomEvent("collapse", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
      /**
       * determines the property based on expanded state
       * @param {string} defaultProp default property
       * @param {string} expandedProp property when expanded
       * @param {boolean} expanded whether a11y-collapse is expanded
       * @returns {string} property based on expanded state
       */

    }, {
      key: "_getExpanded",
      value: function _getExpanded(defaultProp, expandedProp, expanded) {
        return expanded && expandedProp !== null ? expandedProp : defaultProp;
      }
      /**
       * renders collapse item where only entire heading is clickable button
       * @returns {object} html template for a heading as a clickable button
       */

    }, {
      key: "_makeAccordionButton",
      value: function _makeAccordionButton() {
        return (0, _litElement.html)(_templateObject3_d9ab85702da211eaa247b36e11306899(), this.expanded ? "true" : "false", this._onClick, this.disabled, this._getExpanded(this.label, this.labelExpanded, this.expanded), !this.expanded && this.iconExpanded === null, this._getExpanded(this.icon, this.iconExpanded, this.expanded), this._getExpanded(this.tooltip, this.tooltipExpanded, this.expanded));
      }
      /**
       * renders collapse item where only icon is a clickable button
       * @returns {object} html template for a heading with an icon button
       */

    }, {
      key: "_makeIconButton",
      value: function _makeIconButton() {
        return (0, _litElement.html)(_templateObject4_d9ab85702da211eaa247b36e11306899(), this._onClick, this.disabled, !this.expanded && this.iconExpanded === null, this._getExpanded(this.label, this.labelExpanded, this.expanded), this._getExpanded(this.icon, this.iconExpanded, this.expanded), this.expanded ? "true" : "false", this._getExpanded(this.tooltip, this.tooltipExpanded, this.expanded));
      }
      /**
       * Handle click
       */

    }, {
      key: "_onClick",
      value: function _onClick() {
        if (!this.disabled) {
          this.toggle();
          /**
           * Fires when clicked.
           *
           * @event a11y-collapse-click
           */

          this.dispatchEvent(new CustomEvent("a11y-collapse-click", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Single Expand Collapse",
            description: "A single instance of an expand collapse.",
            icon: "view-day",
            color: "grey",
            groups: ["Text"]
          },
          settings: {
            quick: [{
              property: "accordion",
              title: "Heading Button",
              description: "Make entire heading clickble.",
              inputMethod: "boolean"
            }, {
              property: "expanded",
              title: "Expanded",
              description: "Expand by default",
              inputMethod: "boolean"
            }],
            configure: [{
              slot: "heading",
              title: "Heading",
              description: "The heading for the collapse.",
              inputMethod: "textfield"
            }, {
              slot: "content",
              title: "Content",
              description: "The content for the collapse.",
              inputMethod: "textfield"
            }, {
              property: "accordion",
              title: "Heading Button",
              description: "Make entire heading clickble.",
              inputMethod: "boolean"
            }, {
              property: "expanded",
              title: "Expanded",
              description: "Expand by default",
              inputMethod: "boolean"
            }, {
              property: "icon",
              title: "Icon",
              description: "The icon for the toggle expand/collapse button.",
              inputMethod: "textfield"
            }, {
              property: "iconExpanded",
              title: "Icon (when expanded)",
              description: "Optional: The icon for the toggle expand/collapse button when expanded",
              inputMethod: "textfield"
            }, {
              property: "label",
              title: "Label",
              description: "The label of the toggle expand/collapse button",
              inputMethod: "textfield"
            }, {
              property: "labelExpanded",
              title: "Label (when expanded)",
              description: "The label of the toggle expand/collapse button when expanded.",
              inputMethod: "textfield"
            }, {
              property: "tooltip",
              title: "Tooltip",
              description: "The tooltip for the toggle expand/collapse button",
              inputMethod: "textfield"
            }, {
              property: "tooltipExpanded",
              title: "Tooltip (when expanded)",
              description: "The tooltip for the toggle expand/collapse button when expanded",
              inputMethod: "textfield"
            }],
            advanced: []
          }
        };
      }
    }]);
    return A11yCollapse;
  }(_litElement.LitElement);

  _exports.A11yCollapse = A11yCollapse;
  window.customElements.define(A11yCollapse.tag, A11yCollapse);
});