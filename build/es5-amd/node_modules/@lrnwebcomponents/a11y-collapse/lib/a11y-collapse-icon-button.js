define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/paper-icon-button/paper-icon-button.js", "../../../@polymer/iron-icons/iron-icons.js", "../../../@polymer/paper-tooltip/paper-tooltip.js", "./a11y-collapse-button-styles.js"], function (_exports, _polymerElement, _renderStatus, _paperIconButton, _ironIcons, _paperTooltip, _a11yCollapseButtonStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yCollapseIconButton = void 0;

  function _templateObject_c726ff60aa5311e9b999174ecd579fc6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"a11y-collapse-button-styles\">\n        :host #expand:focus,\n        :host #expand:hover {\n          @apply --a11y-collapse-icon-focus;\n        }\n      </style>\n      <div id=\"heading\">\n        <div id=\"text\"><slot></slot></div>\n        <paper-icon-button\n          id=\"expand\"\n          alt$=\"[[label]]\"\n          aria-controls=\"content\"\n          aria-expanded$=\"[[exanded]]\"\n          disabled$=\"[[disabled]]\"\n          label$=\"[[label]]\"\n          icon$=\"[[icon]]\"\n          rotated$=\"[[rotated]]\"\n        >\n        </paper-icon-button>\n        <paper-tooltip for=\"expand\">[[tooltip]]</paper-tooltip>\n      </div>\n    "], ["\n      <style include=\"a11y-collapse-button-styles\">\n        :host #expand:focus,\n        :host #expand:hover {\n          @apply --a11y-collapse-icon-focus;\n        }\n      </style>\n      <div id=\"heading\">\n        <div id=\"text\"><slot></slot></div>\n        <paper-icon-button\n          id=\"expand\"\n          alt\\$=\"[[label]]\"\n          aria-controls=\"content\"\n          aria-expanded\\$=\"[[exanded]]\"\n          disabled\\$=\"[[disabled]]\"\n          label\\$=\"[[label]]\"\n          icon\\$=\"[[icon]]\"\n          rotated\\$=\"[[rotated]]\"\n        >\n        </paper-icon-button>\n        <paper-tooltip for=\"expand\">[[tooltip]]</paper-tooltip>\n      </div>\n    "]);

    _templateObject_c726ff60aa5311e9b999174ecd579fc6 = function _templateObject_c726ff60aa5311e9b999174ecd579fc6() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-collapse-icon-button`
   * An accessible expand collapse.
   * @microcopy - the mental model for this element```
    <ally-collapse-icon-button id="iconbutton" 
      expanded$="[[_setAriaExpanded(expanded)]]"
      label=""                        //The expand/collapse label. Default is "expand/collapse"
      icon=""                         //The expand/collapse icon. Default is "icons:expand-more"
      tooltip=""                      //The expand/collapse tooltip. Default is "toggle expand/collapse"
      rotated$="[[__rotateIcon]]">
    </ally-collapse-icon-button>
  
    <a11y-collapse-icon-button 
      accordion 
      disabled
      icon=""                         //The expand/collapse icon. Default is "icons:expand-more"
      icon-expanded=""                //The expand/collapse icon when expanded. Default is the same as when collapsed.
      label=""                        //The expand/collapse label. Default is "expand/collapse"
      label-expanded=""               //The expand/collapse label when expanded. Default is the same as when collapsed.
      tooltip=""                      //The expand/collapse tooltip. Default is "toggle expand/collapse"
      tooltip-expanded=""             //The expand/collapse tooltip when expanded. Default is the same as when collapsed.
      <p slot="heading">...</p>       //Named slot for a heading.
      ...                             //Unnamed slot for a collapsible content.
    </a11y-collapse-icon-button>
  
    CSS Variables: 
    --a11y-collapse-icon-button-horizontal-padding               //sets the horizontal padding (left and right) inside the a11y-collapse-icon-button
    --a11y-collapse-icon-button-vertical-padding                 //sets the horizontal padding (top and bottom) inside the a11y-collapse-icon-button
    --a11y-collapse-icon-button-border                           //sets the border style. Default is 0px solid black
  
    CSS Mixins: 
    --a11y-collapse-icon-button-icon-focus: { ... };             //sets CSS for the a11y-collapse-icon-button icon when button is focused or hovered
  ```
   * @customElement
   * @polymer
   * @see ../a11y-collapse.js
   * @see ./a11y-collapse-button-styles.js
   */
  var A11yCollapseIconButton =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(A11yCollapseIconButton, _PolymerElement);

    function A11yCollapseIconButton() {
      babelHelpers.classCallCheck(this, A11yCollapseIconButton);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yCollapseIconButton).apply(this, arguments));
    }

    babelHelpers.createClass(A11yCollapseIconButton, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yCollapseIconButton.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.$.expand.addEventListener("click", this._onTap.bind(this));
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.$.expand.removeEventListener("click", this._onTap.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yCollapseIconButton.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Handle tap
       */

    }, {
      key: "_onTap",
      value: function _onTap(e) {
        if (!this.disabled) {
          this.dispatchEvent(new CustomEvent("a11y-collapse-tap", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: this
          }));
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "a11y-collapse-icon-button";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_c726ff60aa5311e9b999174ecd579fc6());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * is disabled?
           */
          disabled: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * icon when expanded
           */
          expanded: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * icon for the button
           */
          icon: {
            type: String,
            value: "icons:expand-more"
          },

          /**
           * label for the button
           */
          label: {
            type: String,
            value: "expand/collapse"
          },

          /**
           * tooltip for the button
           */
          tooltip: {
            type: String,
            value: "toggle expand/collapse"
          },

          /**
           * If no expanded icon is set, the default icon will rotate when expanded
           */
          rotated: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return A11yCollapseIconButton;
  }(_polymerElement.PolymerElement);

  _exports.A11yCollapseIconButton = A11yCollapseIconButton;
  window.customElements.define(A11yCollapseIconButton.tag, A11yCollapseIconButton);
});