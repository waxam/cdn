define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js", "../../../@polymer/paper-button/paper-button.js", "./lrndesign-mapmenu-item.js", "./lrndesign-mapmenu-header.js"], function (_exports, _polymerElement, _flattenedNodesObserver, _paperButton, _lrndesignMapmenuItem, _lrndesignMapmenuHeader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignMapmenuSubmenu = void 0;

  function _templateObject_592bdfc0b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host([collapsable]) > lrndesign-mapmenu-header {\n          cursor: pointer;\n          display: block;\n        }\n        #container {\n          padding: 16px;\n        }\n        #container ::slotted(lrndesign-mapmenu-item) {\n          margin-top: 6.4px;\n        }\n      </style>\n      <lrndesign-mapmenu-header\n        on-click=\"_headerClickHandler\"\n        avatar-label=\"[[avatarLabel]]\"\n        title=\"[[title]]\"\n        label=\"[[label]]\"\n        opened=\"[[opened]]\"\n      ></lrndesign-mapmenu-header>\n      <iron-collapse id=\"container\"> <slot id=\"slot\"></slot> </iron-collapse>\n    "]);

    _templateObject_592bdfc0b3b911e9b58d79562a23326c = function _templateObject_592bdfc0b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  var LrndesignMapmenuSubmenu =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrndesignMapmenuSubmenu, _PolymerElement);

    function LrndesignMapmenuSubmenu() {
      babelHelpers.classCallCheck(this, LrndesignMapmenuSubmenu);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrndesignMapmenuSubmenu).apply(this, arguments));
    }

    babelHelpers.createClass(LrndesignMapmenuSubmenu, [{
      key: "_openChanged",
      value: function _openChanged(opened) {
        var target = this.$.container;
        if (opened) target.show();
        if (!opened) target.hide();
      }
    }, {
      key: "_headerClickHandler",
      value: function _headerClickHandler(e) {
        if (this.collapsable) {
          this.opened = !this.opened;
        }
      }
    }, {
      key: "ready",
      value: function ready() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignMapmenuSubmenu.prototype), "ready", this).call(this);
        this._observer = new _flattenedNodesObserver.FlattenedNodesObserver(this.$.slot, function (info) {
          var submenus = info.addedNodes.filter(function (item) {
            return item.nodeName === "LRNDESIGN-MAPMENU-SUBMENU";
          });

          if (_this.expandChildren) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
              for (var _iterator = submenus[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var menu = _step.value;
                menu.setAttribute("opened", true);
              }
            } catch (err) {
              _didIteratorError = true;
              _iteratorError = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion && _iterator.return != null) {
                  _iterator.return();
                }
              } finally {
                if (_didIteratorError) {
                  throw _iteratorError;
                }
              }
            }
          }
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_592bdfc0b3b911e9b58d79562a23326c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-mapmenu-submenu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          title: {
            type: String
          },
          avatarLabel: {
            type: String
          },
          label: {
            type: String
          },
          opened: {
            type: Boolean,
            value: false
          },
          collapsable: {
            type: Boolean,
            value: true
          },
          expandChildren: {
            type: Boolean,
            value: false
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_openChanged(opened)"];
      }
    }]);
    return LrndesignMapmenuSubmenu;
  }(_polymerElement.PolymerElement);

  _exports.LrndesignMapmenuSubmenu = LrndesignMapmenuSubmenu;
  window.customElements.define(LrndesignMapmenuSubmenu.tag, LrndesignMapmenuSubmenu);
});