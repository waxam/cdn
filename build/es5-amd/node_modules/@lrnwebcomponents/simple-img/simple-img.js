define(["exports", "meta", "../micro-frontend-registry/micro-frontend-registry.js", "../micro-frontend-registry/lib/microServices.js"], function (_exports, meta, _microFrontendRegistry, _microServices) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleImg = void 0;
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SimpleImg = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(SimpleImg, _HTMLElement);

    var _super = _createSuper(SimpleImg);

    function SimpleImg() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleImg);
      _this = _super.call(this); // core services so we can access image manipulation

      (0, _microServices.enableCoreServices)(); // simple-image
      // simple image conversion work

      _this.rendering = false; // progressive enhancement, tho less performant

      var img = _this.querySelector("img");

      if (!img) {
        // performance minded prog enhancement
        if (_this.querySelector("template") && _this.querySelector("template").content.children[0] && _this.querySelector("template").content.children[0].tagName === "IMG") {
          img = _this.querySelector("template").content.children[0];
        } else {
          img = {};
        }
      } // defaults, using img pulled in or default


      _this.alt = img.alt || _this.alt || "";
      _this.src = img.src || _this.src || "";
      _this.loading = img.loading || _this.loading || "lazy";
      _this.decoding = img.decoding || _this.decoding || "async";
      _this.fetchpriority = img.fetchpriority || _this.fetchpriority || "high";
      _this.width = parseInt(img.width || _this.width || 300);
      _this.height = parseInt(img.height || _this.height || 200); // defaults on the wrapper element

      _this.style.display = "inline-block";
      _this.style.width = _this.width + "px";
      _this.style.height = _this.height + "px"; // wipe anything that may be here from before as we'll replace with our own

      _this.innerHTML = null;
      _this.quality = _this.quality || 80;
      return _this;
    }
    /**
     * haxProperties integration via file reference
     */


    babelHelpers.createClass(SimpleImg, [{
      key: "updateconvertedurl",
      value: // user params to generate and set the converted src
      function updateconvertedurl() {
        // src is only actually required property
        if (this.src) {
          var params = {
            height: this.height,
            width: this.width,
            quality: this.quality,
            src: this.src,
            rotate: this.rotate,
            fit: this.fit,
            watermark: this.watermark,
            wmspot: this.wmspot,
            format: this.format
          };
          this.srcconverted = _microFrontendRegistry.MicroFrontendRegistry.url("@core/imgManipulate", params);
        }
      } // rerender when we get hits on these important aspects

    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        var _this2 = this;

        if (["width", "height", "quality", "src", "rotate", "fit", "format", "watermark", "wmspot"].includes(attr)) {
          this.updateconvertedurl();
        } // render when srcconverted is set


        if (attr === "srcconverted" && this.src != "" && !this.rendering) {
          this.rendering = true; // loads the image in the background in-case of quality change
          // also then supports failure events

          var i = new Image();

          i.onload = function () {
            _this2.render(_this2.srcconverted);
          }; // try loading just the normal one if this bombed


          i.onerror = function () {
            _this2.render(_this2.src);
          };

          i.src = this.srcconverted;
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleImg.prototype), "connectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleImg.prototype), "connectedCallback", this).call(this);
        }

        this.updateconvertedurl();
      } // render a given src as it will be calculated

    }, {
      key: "render",
      value: function render(src) {
        this.innerHTML = null;
        this.innerHTML = "\n    <img \n      src=\"".concat(src, "\" \n      height=\"").concat(this.height, "\" \n      width=\"").concat(this.width, "\" \n      alt=\"").concat(this.alt, "\" \n      fetchpriority=\"").concat(this.fetchpriority, "\"\n      decoding=\"").concat(this.decoding, "\"\n      loading=\"").concat(this.loading, "\"\n    />");
        this.rendering = false;
      } // getter and setter palooza

    }, {
      key: "rotate",
      get: function get() {
        return this.getAttribute("rotate");
      },
      set: function set(val) {
        this.setAttribute("rotate", val);
      }
    }, {
      key: "fit",
      get: function get() {
        return this.getAttribute("fit");
      },
      set: function set(val) {
        this.setAttribute("fit", val);
      }
    }, {
      key: "watermark",
      get: function get() {
        return this.getAttribute("watermark");
      },
      set: function set(val) {
        this.setAttribute("watermark", val);
      }
    }, {
      key: "wmspot",
      get: function get() {
        return this.getAttribute("wmspot");
      },
      set: function set(val) {
        this.setAttribute("wmspot", val);
      }
    }, {
      key: "format",
      get: function get() {
        return this.getAttribute("format");
      },
      set: function set(val) {
        this.setAttribute("format", val);
      }
    }, {
      key: "height",
      get: function get() {
        return this.getAttribute("height");
      },
      set: function set(val) {
        this.setAttribute("height", val);
      }
    }, {
      key: "width",
      get: function get() {
        return this.getAttribute("width");
      },
      set: function set(val) {
        this.setAttribute("width", val);
      }
    }, {
      key: "src",
      get: function get() {
        return this.getAttribute("src");
      },
      set: function set(val) {
        this.setAttribute("src", val);
      }
    }, {
      key: "srcconverted",
      get: function get() {
        return this.getAttribute("srcconverted");
      },
      set: function set(val) {
        this.setAttribute("srcconverted", val);
      }
    }, {
      key: "loading",
      get: function get() {
        return this.getAttribute("loading");
      },
      set: function set(val) {
        this.setAttribute("loading", val);
      }
    }, {
      key: "fetchpriority",
      get: function get() {
        return this.getAttribute("fetchpriority");
      },
      set: function set(val) {
        this.setAttribute("fetchpriority", val);
      }
    }, {
      key: "quality",
      get: function get() {
        return this.getAttribute("quality");
      },
      set: function set(val) {
        this.setAttribute("quality", val);
      }
    }, {
      key: "alt",
      get: function get() {
        return this.getAttribute("alt");
      },
      set: function set(val) {
        this.setAttribute("alt", val);
      }
    }, {
      key: "baseurl",
      get: function get() {
        return this.getAttribute("baseurl");
      },
      set: function set(val) {
        this.setAttribute("baseurl", val);
      }
    }, {
      key: "decoding",
      get: function get() {
        return this.getAttribute("decoding");
      },
      set: function set(val) {
        this.setAttribute("decoding", val);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-img";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      } // notice these changing

    }, {
      key: "observedAttributes",
      get: function get() {
        return ["srcconverted", "src", "loading", "fetchpriority", "decoding", "alt", "quality", "height", "width", "rotate", "fit", "watermark", "wmspot", "format"];
      }
    }]);
    return SimpleImg;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.SimpleImg = SimpleImg;
  customElements.define(SimpleImg.tag, SimpleImg);
});