define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../../@polymer/polymer/lib/utils/flattened-nodes-observer.js", "../schema-behaviors/schema-behaviors.js", "../simple-modal/simple-modal.js", "../hax-iconset/hax-iconset.js"], function (_exports, _require, _polymerElement, _renderStatus, _flattenedNodesObserver, _schemaBehaviors, _simpleModal, _haxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnVocab = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_03df88a0dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-flex;\n          --lrn-vocab-border: 1px dashed #ccc;\n        }\n        paper-button {\n          text-transform: none;\n          padding: 0;\n          min-width: unset;\n          margin: 0;\n          position: relative;\n          top: 0px;\n          border-radius: 0;\n          border-bottom: var(--lrn-vocab-border);\n          background: #f5f5f5;\n          @apply --lrn-vocab-button;\n        }\n        paper-button:hover {\n          background: #bbdefb;\n          border-bottom: 1px dashed #2196f3;\n          @apply --lrn-vocab-button-hover;\n        }\n      </style>\n      <paper-button id=\"button\" noink on-click=\"openDialog\"\n        >[[term]]</paper-button\n      >\n    "]);

    _templateObject_03df88a0dbdc11e9bcafdb98156fc1d6 = function _templateObject_03df88a0dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
  `lrn-vocab`
  Vocabulary term with visual treatment and semantic meaning.
  
  * @demo demo/index.html
  */
  var LrnVocab =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(LrnVocab, _SchemaBehaviors);

    function LrnVocab() {
      var _this;

      babelHelpers.classCallCheck(this, LrnVocab);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnVocab).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(LrnVocab, [{
      key: "openDialog",

      /**
       * Request the singleton dialog open
       */
      value: function openDialog(e) {
        var children = _flattenedNodesObserver.FlattenedNodesObserver.getFlattenedNodes(this).filter(function (n) {
          return n.nodeType === Node.ELEMENT_NODE;
        });

        var c = document.createElement("div");

        for (var child in children) {
          c.appendChild(children[child].cloneNode(true));
        }

        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          cancelable: true,
          detail: {
            title: this.term,
            elements: {
              content: c
            },
            invokedBy: this.shadowRoot.querySelector("#button")
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * Attached life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnVocab.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          window.SimpleModal.requestAvailability();
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_03df88a0dbdc11e9bcafdb98156fc1d6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrn-vocab";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Term to highlight / display
           */
          term: {
            type: String,
            reflectToAttribute: true
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(LrnVocab), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(LrnVocab), "properties", this));
        }

        return props;
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: false,
          gizmo: {
            title: "Vocab",
            description: "Vocabulary term",
            icon: "hax:vocab",
            color: "red",
            groups: ["Vocab"],
            handles: [{
              type: "inline",
              text: "term"
            }],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [{
              property: "term",
              title: "Term",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }],
            configure: [{
              property: "term",
              title: "Term",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }, {
              slot: "",
              title: "Contents",
              description: "The definitition to display when the term is clicked.",
              inputMethod: "code-editor",
              required: true
            }],
            advanced: []
          }
        };
      }
    }]);
    return LrnVocab;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.LrnVocab = LrnVocab;
  window.customElements.define(LrnVocab.tag, LrnVocab);
});