define(["exports", "require", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js", "../simple-modal/simple-modal.js"], function (_exports, _require, _litElement, _schemaBehaviors, _simpleModal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnVocab = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_86fecda0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <button>", "</button>\n    "]);

    _templateObject2_86fecda0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_86fecda0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_86fecda0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline;\n          --lrn-vocab-border: 1px dashed #ccc;\n        }\n        button {\n          text-transform: none;\n          min-width: unset;\n          margin: 0;\n          position: relative;\n          top: 0px;\n          border-radius: 0;\n          border-bottom: var(--lrn-vocab-border);\n          background: #f5f5f5;\n          font-size: 1.1em;\n          padding: 2px;\n        }\n        button:hover {\n          background: #bbdefb;\n          border-bottom: 1px dashed #2196f3;\n        }\n      "]);

    _templateObject_86fecda0c96f11ea8be5e1d5fe7ec787 = function _templateObject_86fecda0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
  `lrn-vocab`
  Vocabulary term with visual treatment and semantic meaning.
  
  * @demo demo/index.html
  */
  var LrnVocab =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(LrnVocab, _SchemaBehaviors);
    babelHelpers.createClass(LrnVocab, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_86fecda0c96f11ea8be5e1d5fe7ec787())];
      }
    }]);

    function LrnVocab() {
      var _this;

      babelHelpers.classCallCheck(this, LrnVocab);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnVocab).call(this));
      setTimeout(function () {
        _this.addEventListener("click", _this.openDialog.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(LrnVocab, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_86fecda0c96f11ea8be5e1d5fe7ec787(), this.term);
      }
    }, {
      key: "openDialog",

      /**
       * Request the singleton dialog open
       */
      value: function openDialog(e) {
        var c = document.createElement("div");

        for (var id in this.children) {
          if (this.children[id].cloneNode) {
            c.appendChild(this.children[id].cloneNode(true));
          }
        }

        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            title: this.term,
            elements: {
              content: c
            },
            styles: {
              "--simple-modal-width": "50vw",
              "--simple-modal-height": "50vh"
            },
            invokedBy: this
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * Attached life cycle
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(LrnVocab.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(LrnVocab.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        window.SimpleModal.requestAvailability();
      }
    }], [{
      key: "tag",
      get: function get() {
        return "lrn-vocab";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrnVocab), "properties", this), {
          term: {
            type: String,
            reflect: true
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        new Promise(function (res, rej) {
          return _require.default(["../hax-iconset/hax-iconset.js"], res, rej);
        });
        return {
          canScale: false,
          canPosition: false,
          canEditSource: false,
          gizmo: {
            title: "Vocab",
            description: "Vocabulary term",
            icon: "hax:vocab",
            color: "red",
            groups: ["Vocab"],
            handles: [{
              type: "inline",
              text: "term"
            }],
            meta: {
              author: "ELMS:LN",
              inlineOnly: true
            }
          },
          settings: {
            quick: [{
              property: "term",
              title: "Term",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }],
            configure: [{
              property: "term",
              title: "Term",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }, {
              slot: "",
              title: "Contents",
              description: "The definitition to display when the term is clicked.",
              inputMethod: "code-editor",
              required: true
            }],
            advanced: []
          }
        };
      }
    }]);
    return LrnVocab;
  }((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));

  _exports.LrnVocab = LrnVocab;
  window.customElements.define(LrnVocab.tag, LrnVocab);
});