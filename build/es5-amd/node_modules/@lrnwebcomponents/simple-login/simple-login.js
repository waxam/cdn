define(["exports","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/utils/render-status.js","../../@polymer/paper-button/paper-button.js","../../@polymer/paper-input/paper-input.js","../../@polymer/paper-progress/paper-progress.js","../../@polymer/paper-styles/shadow.js","../../@polymer/paper-styles/typography.js","../../@polymer/paper-styles/color.js"],function(_exports,_polymerElement,_renderStatus,_paperButton,_paperInput,_paperProgress,_shadow,_typography,_color){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.SimpleLogin=void 0;function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _templateObject_94ac2f5075c911eab6bfd9e4068a045e(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        #loginform {\n          width: var(--login-form-width, 450px);\n          height: var(--login-form-height, auto);\n          --simple-camera-snap-color: var(--login-form-color, #36bed4);\n          --simple-camera-snap-error: var(--login-form-error, red);\n          --simple-camera-snap-width: var(--login-form-image-width, 200px);\n          --simple-camera-snap-height: var(--login-form-image-height, 200px);\n          --simple-camera-snap-background: var(--login-form-background, white);\n          --simple-camera-snap-border-radius: var(\n            --login-form-image-bnorder-radius,\n            100%\n          );\n          box-shadow: 0 12px 16px 1px rgba(0, 0, 0, 0.14),\n            0 4px 22px 3px rgba(0, 0, 0, 0.12),\n            0 6px 7px -4px rgba(0, 0, 0, 0.4);\n        }\n\n        #loginformcontent {\n          padding: var(--login-form-padding, 48px);\n        }\n\n        #loginformcontent > * {\n          margin-top: var(\n            --login-form-margin-top,\n            var(--login-form-margin, 8px)\n          );\n          margin-bottom: var(\n            --login-form-margin-bottom,\n            var(--login-form-margin, 8px)\n          );\n        }\n\n        #loginbtn,\n        #buttons ::slotted(paper-button) {\n          background-color: var(\n            --login-btn-background-color,\n            var(--login-form-color, var(--paper-indigo-500))\n          );\n          color: var(\n            --login-btn-text-color,\n            var(--login-form-background, white)\n          );\n          width: var(--login-btn-width, auto);\n          margin: var(--login-btn-margin, 24px auto 0);\n          display: var(--login-btn-display, inline-flex);\n          --paper-button-raised-keyboard-focus: {\n            background-color: var(\n              --login-btn-raised-background-color,\n              var(--paper-pink-a200)\n            ) !important;\n            color: var(\n              --login-btn-text-color,\n              var(--login-form-background, white)\n            ) !important;\n          }\n          @apply --login-btn;\n        }\n\n        #loginbtn[disabled] {\n          background-color: var(\n            --login-btn-disabled-background-color,\n            var(--paper-indigo-100)\n          );\n        }\n\n        h1 {\n          @apply --paper-font-display1;\n          margin: 0;\n          @apply --login-title;\n        }\n\n        h2 {\n          @apply --paper-font-title;\n          margin: 0;\n          @apply --login-subtitle;\n        }\n\n        paper-progress {\n          width: 100%;\n        }\n\n        ::slotted(simple-login-avatar) {\n          margin: 0 auto;\n        }\n\n        #errormsg {\n          margin-top: 16px;\n          color: var(--login-error-label-color, var(--error-color));\n          @apply --paper-font-menu;\n        }\n      </style>\n      <div id=\"loginform\">\n        <paper-progress disabled=\"[[!loading]]\" indeterminate></paper-progress>\n        <div id=\"loginformcontent\">\n          <h1>[[title]]</h1>\n          <h2>[[subtitle]]</h2>\n          <div id=\"errormsg\">[[errorMsg]]</div>\n          <slot></slot>\n          <paper-input\n            id=\"userinput\"\n            value=\"{{username}}\"\n            disabled=\"[[loading]]\"\n            type=\"text\"\n            label=\"[[userInputLabel]]\"\n            required\n            error-message=\"[[userInputErrMsg]]\"\n          ></paper-input>\n          <paper-input\n            id=\"passinput\"\n            value=\"{{password}}\"\n            disabled=\"[[loading]]\"\n            type=\"password\"\n            label=\"[[passwordInputLabel]]\"\n            required\n            error-message=\"[[passwordInputErrMsg]]\"\n          ></paper-input>\n          <paper-button\n            on-click=\"_login\"\n            disabled=\"[[loading]]\"\n            id=\"loginbtn\"\n            raised\n            class=\"indigo\"\n            >[[loginBtnText]]\n          </paper-button>\n          <span id=\"buttons\"><slot name=\"buttons\"></slot></span>\n        </div>\n      </div>\n    "]);_templateObject_94ac2f5075c911eab6bfd9e4068a045e=function _templateObject_94ac2f5075c911eab6bfd9e4068a045e(){return data};return data}/**
 * `simple-login`
 * @element simple-login
 * `a simple login form`
 *
 * @microcopy - language worth noting:
 *  -
 *

 * @polymer
 * @demo demo/index.html
 */var SimpleLogin=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(SimpleLogin,_PolymerElement);babelHelpers.createClass(SimpleLogin,null,[{key:"template",// render function
get:function get(){return(0,_polymerElement.html)(_templateObject_94ac2f5075c911eab6bfd9e4068a045e())}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return _objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(SimpleLogin),"properties",this),{/**
       * Title of the loginscreen
       */title:String,/**
       * Subtitle of the loginscreen
       */subtitle:String,/**
       * Error message to show (example : "Invalid username")
       */errorMsg:String,/**
       * Content of the username field
       */username:{type:String,notify:!0},/**
       * Content of the password field
       */password:{type:String,notify:!0},/**
       * When true, all fields are disabled and the progress bar is visible
       */loading:{type:Boolean,value:!1},/**
       * Placeholder of the username field
       */userInputLabel:{type:String,value:"Username"},/**
       * Error message of the username field
       */userInputErrMsg:{type:String,value:"Username required"},/**
       * Placeholder of the password field
       */passwordInputLabel:{type:String,value:"Password"},/**
       * Error message of the password field
       */passwordInputErrMsg:{type:String,value:"Password required"},/**
       * Login button label
       */loginBtnText:{type:String,value:"Login"}})}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"simple-login"}/**
   * constructor
   */}]);function SimpleLogin(){var _this;babelHelpers.classCallCheck(this,SimpleLogin);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(SimpleLogin).call(this));(0,_renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this),function(){this.shadowRoot.querySelector("#loginform").addEventListener("keypress",this._keyPressLogin.bind(this))});return _this}/**
   * life cycle
   */babelHelpers.createClass(SimpleLogin,[{key:"disconnectedCallback",value:function disconnectedCallback(){this.shadowRoot.querySelector("#loginform").removeEventListener("keypress",this._keyPressLogin.bind(this));babelHelpers.get(babelHelpers.getPrototypeOf(SimpleLogin.prototype),"disconnectedCallback",this).call(this)}/**
   * Key pressed for the login
   */},{key:"_keyPressLogin",value:function _keyPressLogin(e){if(13==e.keyCode){//Enter
this._login();return!1}}/**
   * Login
   */},{key:"_login",value:function _login(){if(this.shadowRoot.querySelector("#userinput").validate()&&this.shadowRoot.querySelector("#passinput").validate()){this.dispatchEvent(new CustomEvent("simple-login-login",{cancelable:!0,bubbles:!0,composed:!0,detail:{u:this.shadowRoot.querySelector("#userinput").value,p:this.shadowRoot.querySelector("#passinput").value}}))}}}]);return SimpleLogin}(_polymerElement.PolymerElement);_exports.SimpleLogin=SimpleLogin;window.customElements.define(SimpleLogin.tag,SimpleLogin)});