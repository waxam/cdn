define(["exports", "meta", "./simple-login-avatar.js", "./simple-login-camera.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "../../simple-icon/lib/simple-icon-button-lite.js", "../../simple-tooltip/simple-tooltip.js"], function (_exports, meta, _simpleLoginAvatar, _simpleLoginCamera, _simpleIcon, _simpleIcons, _simpleIconButtonLite, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleCameraSnap = void 0;
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SimpleCameraSnap = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(SimpleCameraSnap, _HTMLElement);

    var _super = _createSuper(SimpleCameraSnap);

    function SimpleCameraSnap() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, SimpleCameraSnap);
      _this = _super.call(this);
      _this.tag = SimpleCameraSnap.tag;
      _this.t = {
        takePhoto: "Take Photo"
      };
      window.dispatchEvent(new CustomEvent("i18n-manager-register-element", {
        detail: {
          context: babelHelpers.assertThisInitialized(_this),
          namespace: "simple-login",
          localesPath: new URL("../locales", meta.url).href,
          updateCallback: "render",
          locales: ["es"]
        }
      }));
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }

    babelHelpers.createClass(SimpleCameraSnap, [{
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n      :host {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-direction: column;\n        /* style simple-login-camera according to simple-login-snap styles */\n        --simple-login-camera-background: var(--simple-camera-snap-color, #36bed4);\n        --simple-login-camera-error: var(--simple-camera-snap-error, red);\n        --simple-login-avatar-color: var(--simple-camera-snap-color, #36bed4);\n        --simple-login-camera-size: var(--simple-camera-snap-height, calc(var(--simple-camera-snap-width, unset) * 16/9));\n\n        /* style simple-login-avatar according to simple-login-snap styles */\n        --simple-login-avatar-background: var(--simple-camera-snap-background, white);\n        --simple-login-avatar-border-radius: var(--simple-camera-snap-border-radius,100%);\n      }\n      :host([hidden]) {\n        display: none !important;\n      }\n      #selfie {\n        position: absolute;\n        margin: 0;\n        display: flex;\n        justify-content: center;\n        width: 100%;\n        overflow: hidden;\n      }\n      #snap {\n        color: var(--simple-camera-snap-color, #36bed4);\n        background-color: var(--simple-camera-snap-background, white);\n        border-radius: var(--simple-camera-snap-button-border-radius);\n        opacity: var(--simple-camera-snap-button-opacity);\n      }\n      .has-snap {\n        z-index: 3;\n      }\n      #selfie img {\n        z-index: 2;        \n        width: calc(177.77777777777% / var(--simple-login-camera-aspect, 1));\n        background-color: rgba(0, 0, 0, 0);\n      }\n      .buttons {\n        display: flex;\n        width: 100%;\n        justify-content: space-around;\n        position: var(--simple-camera-snap-button-container-position);\n        bottom: var(--simple-camera-snap-button-container-bottom);\n        z-index: var(--simple-camera-snap-button-container-z-index);\n      }\n    </style>\n    <simple-login-avatar part=\"avatar\">\n      <div id=\"selfie\" part=\"selfie\"></div>\n      <simple-login-camera id=\"camera\" autoplay part=\"camera\"></simple-login-camera>\n    </simple-login-avatar>\n    <div class=\"buttons\">\n      <simple-icon-button-lite id=\"snap\" icon=\"image:camera-alt\" part=\"snap-button\"></simple-icon-button-lite>\n      <simple-tooltip for=\"snap\" part=\"snap-tooltip\">".concat(this.t.takePhoto, "</simple-tooltip>\n      <slot></slot>\n    </div>\n    ");
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        // ensure support for the camera snap functionality...
        // this would be an environment like http that doesn't support camera functionality
        if (!navigator.mediaDevices) {
          this.shadowRoot.querySelector("#snap").style.display = "none";
        }

        this.shadowRoot.querySelector("#snap").addEventListener("click", this.snapPhoto.bind(this));
        this._t = _objectSpread({}, this.t);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#snap").removeEventListener("click", this.snapPhoto.bind(this));
      }
    }, {
      key: "snapPhoto",
      value: function () {
        var _snapPhoto = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
          var camera, raw, img, selfie;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  camera = this.shadowRoot.querySelector("#camera");

                  if (!camera.hasAttribute("autoplay")) {
                    _context.next = 16;
                    break;
                  }

                  _context.next = 4;
                  return camera.takeASnap();

                case 4:
                  raw = _context.sent;
                  _context.next = 7;
                  return camera.takeASnap().then(camera.renderImage);

                case 7:
                  img = _context.sent;
                  camera.removeAttribute("autoplay");
                  selfie = this.shadowRoot.querySelector("#selfie");
                  selfie.innerHTML = "";
                  selfie.appendChild(img); // throw up event for other things to find the image

                  this.dispatchEvent(new CustomEvent("simple-camera-snap-image", {
                    bubbles: true,
                    composed: true,
                    cancelable: true,
                    detail: {
                      img: img,
                      raw: raw
                    }
                  }));
                  selfie.classList.add("has-snap");
                  _context.next = 17;
                  break;

                case 16:
                  this.clearPhoto(e);

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function snapPhoto(_x) {
          return _snapPhoto.apply(this, arguments);
        }

        return snapPhoto;
      }()
    }, {
      key: "clearPhoto",
      value: function clearPhoto(e) {
        var camera = this.shadowRoot.querySelector("#camera");
        camera.setAttribute("autoplay", "autoplay");
        var selfie = this.shadowRoot.querySelector("#selfie");
        selfie.innerHTML = "";
        selfie.classList.remove("has-snap");
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-camera-snap";
      }
    }]);
    return SimpleCameraSnap;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.SimpleCameraSnap = SimpleCameraSnap;
  window.customElements.define(SimpleCameraSnap.tag, SimpleCameraSnap);
});