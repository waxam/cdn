define(["exports", "require", "./simple-login-avatar.js", "./simple-login-camera.js", "../../../@polymer/paper-icon-button/paper-icon-button.js", "../../simple-tooltip/simple-tooltip.js"], function (_exports, _require, _simpleLoginAvatar, _simpleLoginCamera, _paperIconButton, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleCameraSnap = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  var SimpleCameraSnap =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(SimpleCameraSnap, _HTMLElement);

    function SimpleCameraSnap() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, SimpleCameraSnap);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleCameraSnap).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/image-icons.js"], res, rej);
      });
      _this.tag = SimpleCameraSnap.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }

    babelHelpers.createClass(SimpleCameraSnap, [{
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        // ensure support for the camera snap functionality...
        // this would be an environment like http that doesn't support camera functionality
        if (!navigator.mediaDevices) {
          this.shadowRoot.querySelector("#snap").style.display = "none";
        }

        this.shadowRoot.querySelector("#snap").addEventListener("click", this.snapPhoto.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#snap").removeEventListener("click", this.snapPhoto.bind(this));
      }
    }, {
      key: "snapPhoto",
      value: function () {
        var _snapPhoto = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee(e) {
          var camera, raw, img, selfie;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  camera = this.shadowRoot.querySelector("#camera");

                  if (!camera.hasAttribute("autoplay")) {
                    _context.next = 16;
                    break;
                  }

                  _context.next = 4;
                  return camera.takeASnap();

                case 4:
                  raw = _context.sent;
                  _context.next = 7;
                  return camera.takeASnap().then(camera.renderImage);

                case 7:
                  img = _context.sent;
                  camera.removeAttribute("autoplay");
                  selfie = this.shadowRoot.querySelector("#selfie");
                  selfie.innerHTML = "";
                  selfie.appendChild(img); // throw up event for other things to find the image

                  this.dispatchEvent(new CustomEvent("simple-camera-snap-image", {
                    bubbles: true,
                    composed: true,
                    cancelable: true,
                    detail: {
                      img: img,
                      raw: raw
                    }
                  }));
                  selfie.classList.add("has-snap");
                  _context.next = 17;
                  break;

                case 16:
                  this.clearPhoto(e);

                case 17:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function snapPhoto(_x) {
          return _snapPhoto.apply(this, arguments);
        }

        return snapPhoto;
      }()
    }, {
      key: "clearPhoto",
      value: function clearPhoto(e) {
        var camera = this.shadowRoot.querySelector("#camera");
        camera.setAttribute("autoplay", "autoplay");
        var selfie = this.shadowRoot.querySelector("#selfie");
        selfie.innerHTML = "";
        selfie.classList.remove("has-snap");
      }
    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n      :host {\n        /* style simple-login-camera according to simple-login-snap styles */\n        --simple-login-camera-background: var(--simple-camera-snap-color, #36bed4);\n        --simple-login-camera-error: var(--simple-camera-snap-error, red);\n        --simple-login-avatar-color: var(--simple-camera-snap-color, #36bed4);\n        --simple-login-camera-width: var(--simple-camera-snap-width, 200px);\n        --simple-login-camera-height: var(--simple-camera-snap-height, 200px);\n\n        /* style simple-login-avatar according to simple-login-snap styles */\n        --simple-login-avatar-background: var(--simple-camera-snap-background, white);\n        --simple-login-avatar-border-radius: var(--simple-camera-snap-border-radius,100%);\n        --simple-login-avatar-width: var(--simple-camera-snap-width, 200px);\n        --simple-login-avatar-height: var(--simple-camera-snap-height, 200px);\n      }\n      #selfie {\n        position: absolute;\n        margin: 0;\n        width: var(--simple-camera-snap-width, 200px);\n        height: var(--simple-camera-snap-height, 200px);\n        display: flex;\n        justify-content: center;\n      }\n      #snap {\n        color: var(--simple-camera-snap-color, #36bed4);\n        background-color: var(--simple-camera-snap-background, white);\n        border-radius: var(--simple-camera-snap-button-border-radius);\n        opacity: var(--simple-camera-snap-button-opacity);\n\n      }\n      .has-snap {\n        z-index: 3;\n      }\n      #selfie img {\n        z-index: 2;\n        position: absolute;\n        width: calc(var(--simple-camera-snap-height, 200px) * 16 / 9);\n        height: var(--simple-camera-snap-height, 200px);\n      }\n      .buttons {\n        display: flex;\n        width: var(--simple-camera-snap-width, 200px);\n        justify-content: space-evenly;\n        position: var(--simple-camera-snap-button-container-position);\n        bottom: var(--simple-camera-snap-button-container-bottom);\n        z-index: var(--simple-camera-snap-button-container-z-index);\n      }\n    </style>\n    <simple-login-avatar>\n      <div id=\"selfie\"></div>\n      <simple-login-camera id=\"camera\" autoplay></simple-login-camera>\n    </simple-login-avatar>\n    <div class=\"buttons\">\n      <paper-icon-button id=\"snap\" icon=\"image:camera-alt\"></paper-icon-button>\n      <simple-tooltip for=\"snap\">Take Photo</simple-tooltip>\n    </div>\n    ";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-camera-snap";
      }
    }]);
    return SimpleCameraSnap;
  }(babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.SimpleCameraSnap = SimpleCameraSnap;
  window.customElements.define(SimpleCameraSnap.tag, SimpleCameraSnap);
});