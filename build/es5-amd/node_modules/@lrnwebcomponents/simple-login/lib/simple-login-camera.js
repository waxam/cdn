define(["exports", "meta", "../../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleLoginCamera = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  /**
   * Inspiration from https://github.com/wanoo21/MyCamera
   */
  var SimpleLoginCamera =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(SimpleLoginCamera, _HTMLElement);
    babelHelpers.createClass(SimpleLoginCamera, [{
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-login-camera";
      }
    }]);

    function SimpleLoginCamera() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleLoginCamera);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleLoginCamera).call(this));

      var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

      var location = "".concat(basePath, "../../../msr/MediaStreamRecorder.min.js");
      window.ESGlobalBridge.requestAvailability();
      window.ESGlobalBridge.instance.load("msr", location);
      window.addEventListener("es-bridge-msr-loaded", _this._msrLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      _this._shadow = _this.attachShadow({
        mode: "closed"
      });
      _this._shadow.innerHTML = _this.html;
      _this._video = _this._shadow.querySelector("video");
      _this._error = _this._shadow.querySelector("p");
      _this._record = _this._shadow.querySelector("button.record");
      _this._pauseRecord = _this._shadow.querySelector("button.pause-record");
      document.addEventListener("DOMContentLoaded", _this.documentLoaded.bind(babelHelpers.assertThisInitialized(_this)));

      if (!_this.hasAttribute("record")) {
        _this._record.remove();

        _this._pauseRecord.remove();
      } else {
        _this._record.addEventListener("click", function () {
          if (!_this._record.hasAttribute("recording")) {
            _this._record.innerText = "Stop & Save";

            _this._record.setAttribute("recording", "");

            return _this._startRecording();
          } else {
            _this._record.innerText = "Record";

            _this._record.removeAttribute("recording");

            return _this._stopRecording();
          }
        });

        _this._pauseRecord.addEventListener("click", function () {
          if (!_this._pauseRecord.hasAttribute("resume")) {
            _this._pauseRecord.innerText = "Resume record";

            _this._pauseRecord.setAttribute("resume", "");

            return _this._pauseRecording();
          } else {
            _this._pauseRecord.innerText = "Pause record";

            _this._pauseRecord.removeAttribute("resume");

            return _this._resumeRecording();
          }
        });
      }

      return _this;
    }

    babelHelpers.createClass(SimpleLoginCamera, [{
      key: "_startRecording",
      value: function _startRecording() {
        this._pauseRecord.removeAttribute("hidden");

        this.MediaStreamRecorder.start(100);
      }
    }, {
      key: "_stopRecording",
      value: function _stopRecording() {
        this._pauseRecord.setAttribute("hidden", "");

        this._pauseRecord.removeAttribute("resume");

        this.MediaStreamRecorder.stop();
      }
    }, {
      key: "_pauseRecording",
      value: function _pauseRecording() {
        this._record.setAttribute("disabled", "");

        this.MediaStreamRecorder.pause();
      }
    }, {
      key: "_resumeRecording",
      value: function _resumeRecording() {
        this._record.removeAttribute("disabled");

        this.MediaStreamRecorder.resume();
      }
    }, {
      key: "_saveVideo",
      value: function _saveVideo(blob) {
        var type = blob.type.split("/").pop();
        this.MediaStreamRecorder.save(blob, "my-camera-".concat(new Date().toISOString().replace(/:|\./g, "-"), ".").concat(type));
      }
    }, {
      key: "_cameraStream",
      value: function _cameraStream() {
        if (!navigator.mediaDevices.getUserMedia) {
          return Promise.reject(new Error("getUserMedia is not implemented in this browser"));
        }

        return navigator.mediaDevices.getUserMedia({
          video: {
            width: {
              min: 320,
              ideal: 1280,
              max: 1920
            },
            height: {
              min: 240,
              ideal: 720,
              max: 1080
            },
            facingMode: "user"
          },
          audio: this.hasAttribute("audio")
        });
      }
    }, {
      key: "takeASnap",
      value: function takeASnap() {
        var canvas = document.createElement("canvas"); // create a canvas

        var ctx = canvas.getContext("2d"); // get its context

        canvas.width = this._video.videoWidth; // set its size to the one of the video

        canvas.height = this._video.videoHeight;
        ctx.drawImage(this._video, 0, 0); // the video

        return new Promise(function (res, rej) {
          canvas.toBlob(res, "image/jpeg"); // request a Blob from the canvas
        });
      }
    }, {
      key: "renderImage",
      value: function renderImage(blob) {
        // uses the <a download> to download a Blob
        var img = document.createElement("img");
        img.src = URL.createObjectURL(blob);
        return img;
      }
    }, {
      key: "imageBlob",
      value: function imageBlob(blob) {
        return blob;
      }
    }, {
      key: "download",
      value: function download(blob) {
        // uses the <a download> to download a Blob
        var a = document.createElement("a");
        a.href = URL.createObjectURL(blob);
        a.download = "screenshot.jpg";
        document.body.appendChild(a);
        a.click();
      }
    }, {
      key: "_addVideoAtributes",
      value: function _addVideoAtributes() {
        this._video.autoplay = this.hasAttribute("autoplay");
        this._video.controls = this.hasAttribute("controls");
      }
    }, {
      key: "_msrLoaded",
      value: function _msrLoaded(e) {
        this._applyMSR();
      }
    }, {
      key: "_applyMSR",
      value: function () {
        var _applyMSR2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.prev = 0;
                  _context.next = 3;
                  return this._cameraStream();

                case 3:
                  this._video.srcObject = _context.sent;

                  this._addVideoAtributes();

                  if (this.hasAttribute("record")) {
                    this.MediaStreamRecorder = new MediaStreamRecorder(this._video.srcObject); // this.MediaStreamRecorder.mimeType = 'video/webm';

                    this.MediaStreamRecorder.ondataavailable = this._saveVideo.bind(this);
                  }

                  this._error.remove();

                  _context.next = 24;
                  break;

                case 9:
                  _context.prev = 9;
                  _context.t0 = _context["catch"](0);

                  this._video.remove();

                  this._record.remove();

                  this._pauseRecord.remove();

                  if (!(_context.t0.name === "ConstraintNotSatisfiedError")) {
                    _context.next = 18;
                    break;
                  }

                  this._error.innerText = "The resolution is not supported by your device.";
                  _context.next = 24;
                  break;

                case 18:
                  if (!(_context.t0.name === "NotAllowedError")) {
                    _context.next = 22;
                    break;
                  }

                  this._error.innerText = "Permissions have not been granted to use your camera and " + "microphone, you need to allow the page access to your devices in " + "order for the demo to work.";
                  _context.next = 24;
                  break;

                case 22:
                  this._error.innerText = _context.t0.message;
                  throw Error(_context.t0);

                case 24:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[0, 9]]);
        }));

        function _applyMSR() {
          return _applyMSR2.apply(this, arguments);
        }

        return _applyMSR;
      }()
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ESGlobalBridge && window.ESGlobalBridge.imports["msr"]) {
          this._applyMSR();
        }
      }
      /**
       * Try to apply when fully loaded dom
       */

    }, {
      key: "documentLoaded",
      value: function documentLoaded(e) {
        if (window.ESGlobalBridge && window.ESGlobalBridge.imports["msr"]) {
          this._applyMSR();
        }
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        document.removeEventListener("DOMContentLoaded", this.documentLoaded.bind(this));
        window.removeEventListener("es-bridge-msr-loaded", this._msrLoaded.bind(this));
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(name, oldValue, newValue) {// console.log(newValue);
        // console.log(name);
        // console.log(typeof newValue);
        // // if (newValue === '' || newValue === null) return;
        // if (newValue || newValue === null) {
        //   this.setAttribute(name, '');
        // } else {
        //   this.removeAttribute(name);
        // }
        // this._addVideoAtributes();
      }
    }, {
      key: "html",
      get: function get() {
        return "\n      <style>\n        :host {\n          width: var(--simple-login-camera-width, 200px);\n          height: var(--simple-login-camera-height, 200px);\n        }\n        #wrapper {\n          display: flex;\n          justify-content: center;\n          align-items: center;\n          flex-direction: column;\n          position: relative;\n          background-color: var(--simple-login-camera-background, var(--background-color, #ccc));\n          width: var(--simple-login-camera-width, 200px);\n          height: var(--simple-login-camera-height, 200px);\n        }\n        video {\n          width: calc(var(--simple-login-camera-height, 200px) * 16 / 9);\n          height: var(--simple-login-camera-height, 200px);\n          background-color: rgba(0, 0, 0, 0);\n        }\n        .error {\n          color: var(-simple-login-camera-error, var(--color, red));\n          font-size: 1em;\n          text-align: center;\n        }\n        .custom-controls {\n          top: 8px;\n          right: 8px;\n          position: absolute;\n        }\n        .custom-controls button {\n          padding: 8px 10px;\n        }\n        [hidden] {\n          display: none;\n        }\n      </style>\n      <div id=\"wrapper\">\n        <video></video>\n        <p class=\"error\"></p>\n        <div class=\"custom-controls\">\n          <button class=\"record\">Record</button>\n          <button class=\"pause-record\" hidden>Pause record</button>\n        </div>\n      </div>\n    ";
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["autoplay", "controls", "audio"];
      }
    }]);
    return SimpleLoginCamera;
  }(babelHelpers.wrapNativeSuper(HTMLElement)); // only show this element if we're on a secure environment


  _exports.SimpleLoginCamera = SimpleLoginCamera;

  if (navigator.mediaDevices) {
    window.customElements.define(SimpleLoginCamera.tag, SimpleLoginCamera);
  }
});