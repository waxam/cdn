define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js","../../../@polymer/app-localize-behavior/app-localize-behavior.js","../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js","./eco-json-schema-array.js","./eco-json-schema-boolean.js","./eco-json-schema-enum.js","./eco-json-schema-file.js","./eco-json-schema-input.js"],function(_polymerLegacy,_polymerDom,_flattenedNodesObserver,_appLocalizeBehavior,_ironFlexLayoutClasses,_ecoJsonSchemaArray,_ecoJsonSchemaBoolean,_ecoJsonSchemaEnum,_ecoJsonSchemaFile,_ecoJsonSchemaInput){"use strict";function _templateObject_1cc19120685411e9b25d1735312af746(){var data=babelHelpers.taggedTemplateLiteral(["\n    <custom-style>\n      <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n        div.layout {\n          height: auto;\n        }\n        #form {\n          display: block;\n          @apply --eco-json-schema-object-form;\n          @apply --layout-vertical;\n          @apply --layout-wrap;\n        }\n        #form ::slotted(paper-input) {\n          --paper-input-container-shared-input-style: {\n            border: none !important;\n            width: 100% !important;\n            background-color: transparent !important;\n          }\n        }\n      </style>\n    </custom-style>\n\n    <template is=\"dom-if\" if=\"{{!wizard}}\">\n      <div class=\"header\" hidden$=\"[[!label]]\">[[label]]</div>\n    </template>\n    <div class=\"layout vertical flex start-justified\">\n      <div id=\"form\" class=\"layout horizontal flex start-justified\">\n        <slot></slot>\n      </div>\n    </div>\n  "],["\n    <custom-style>\n      <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n        div.layout {\n          height: auto;\n        }\n        #form {\n          display: block;\n          @apply --eco-json-schema-object-form;\n          @apply --layout-vertical;\n          @apply --layout-wrap;\n        }\n        #form ::slotted(paper-input) {\n          --paper-input-container-shared-input-style: {\n            border: none !important;\n            width: 100% !important;\n            background-color: transparent !important;\n          }\n        }\n      </style>\n    </custom-style>\n\n    <template is=\"dom-if\" if=\"{{!wizard}}\">\n      <div class=\"header\" hidden\\$=\"[[!label]]\">[[label]]</div>\n    </template>\n    <div class=\"layout vertical flex start-justified\">\n      <div id=\"form\" class=\"layout horizontal flex start-justified\">\n        <slot></slot>\n      </div>\n    </div>\n  "]);_templateObject_1cc19120685411e9b25d1735312af746=function _templateObject_1cc19120685411e9b25d1735312af746(){return data};return data}/**
`eco-json-schema-object` takes in a JSON schema of type object and builds a form,
exposing a `value` property that represents an object described by the schema.

Given the element:

```
<eco-json-schema-object schema="[[schema]]" value="{{value}}"></eco-json-schema-object>
```

And a JSON schema:

```
> this.schema = {
  "$schema": "http://json-schema.org/schema#",
  "title": "Contact",
  "type": "object",
  "properties": {
    "name": {
      "title": "Name",
      "type": "string"
    }
  }
}
```

A form will be generated, with the elements `value` looking something like this:

```
> this.value
{
  "name": "Eric"
}
```

Deep / nested schemas are supported for type array and object:

```
> this.schema = {
  "$schema": "http://json-schema.org/schema#",
  "title": "Contact",
  "type": "object",
    "phoneNumbers": {
      "title": "Phone numbers",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "phoneNumber": {
            "title": "Phone Number",
            "type": "string"
          }
        }
      }
    }
  }
}
```

Validation is handled for strings and number/integers by mapping JSON schema
validation keywords to `paper-input` attributes; form elements will automatically
try and validate themselves as users provide input:

```
> this.schema = {
  "$schema": "http://json-schema.org/schema#",
  "title": "Contact",
  "type": "object",
  "properties": {
    "name": {
      "title": "Name",
      "type": "string",
      "minLength": 2
    },
    "age": {
      "type": "integer",
      "minimum": 0,
      "exclusiveMinimum": true
    },
    "postalCode": {
      "title": "Postal/Zip Code",
      "type": "string",
      "pattern": "[a-zA-Z][0-9][a-zA-Z]\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?"
    },
    "email": {
      "title": "email",
      "type": "string",
      "format": "email"
    }
  }
}
```

Customizing components for schema properties is supported by extending your JSON
schema. For any schema sub-property (`properties` for `"type": "object"` and
`items` for `"type": "array"`) a `component` property may be specified, with
the following options:

- `component.name` - specifies the name of the custom component to use
- `component.valueProperty` - specifies which property of the custom element
  represents its value
- `component.properties` - properties that will be set on the element

Example schema using custom components (note that `"valueProperty": "value"` is
redundant in this case, `"valueProperty": "value"` will be the default if not specified):

```
> this.schema = {
  "$schema": "http://json-schema.org/schema#",
  "title": "Contact",
  "type": "object",
  "properties": {
    "phoneNumber": {
      "title": "Phone Number",
      "type": "string",
      "component": {
        "name": "gold-phone-input",
        "valueProperty": "value",
        "properties": {
          "countryCode": "1"
        }
      }
    }
  }
}
```

Items set in `component.properties` will override any attributes / properties set
by `eco-json-schema-form` elements, making it possible to override JSON schema
validation properties mapped to `paper-input` attributes:

```
> this.schema = {
  "$schema": "http://json-schema.org/schema#",
  "title": "Contact",
  "type": "object",
  "properties": {
    "postalCode": {
      "title": "Postal/Zip Code",
      "type": "string",
      "pattern": "[a-zA-Z][0-9][a-zA-Z]\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?",
      "component": {
        "properties": {
          "autoValidate": false
        }
      }
    }
  }
}
```

Putting it all together, this schema:

```
> this.schema = {
  "$schema": "http://json-schema.org/schema#",
  "title": "Contact",
  "type": "object",
  "properties": {
    "name": {
      "title": "Name",
      "type": "string",
      "minLength": 2
    },
    "age": {
      "type": "integer",
      "minimum": 0,
      "exclusiveMinimum": true
    },
    "postalCode": {
      "title": "Postal/Zip Code",
      "type": "string",
      "pattern": "[a-zA-Z][0-9][a-zA-Z]\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?",
      "component": {
        "properties": {
          "autoValidate": false
        }
      }
    },
    "phoneNumbers": {
      "title": "Phone numbers",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "phoneNumber": {
            "title": "Phone Number",
            "type": "string",
            "component": {
              "name": "gold-phone-input",
              "valueProperty": "value",
              "properties": {
                "countryCode": "1"
              }
            }
          }
        }
      }
    },
    "emailAddresses": {
      "title": "Emails",
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "type": {
            "title": "Type",
            "type": "string"
          },
          "email": {
            "title": "email",
            "type": "string",
            "format": "email"
          }
        }
      }
    }
  }
}
```

Will build a form describing an object:

```
> this.value
{
  "name": "Eric",
  "age": 28,
  "postalCode": "H1W 2C5",
  "phoneNumbers": [
    {
      "type": "Mobile",
      "phoneNumber": "123-456-7890"
    }
  ]
  "emailAddresses": [
    {
      "type": "Personal",
      "email": "eric@wat.com"
    }
  ]
}
```

External validation is supported via the `error` property. By providing an
object tree with each leaf representing an error message for properties, the
message will be attached to the appropriate element.

Example, for the Contact schema:

```
el.error = {
  "name": "String is too short (0 chars) minimum 2",
  "phoneNumbers": [
    {
      "phoneNumber": "String does not match required format"
    }
  ]
}
```

@group eco Elements
@element eco-json-schema-object
* @demo demo/index.html
*/(0,_polymerLegacy.Polymer)({is:"eco-json-schema-object",_template:(0,_polymerLegacy.html)(_templateObject_1cc19120685411e9b25d1735312af746()),behaviors:[_appLocalizeBehavior.AppLocalizeBehavior],properties:{language:{value:"en"},resources:{value:function value(){return{}}},schema:{type:Object,notify:!0,observer:"_schemaChanged"},label:{type:String},value:{type:Object,notify:!0,value:function value(){return{}}},error:{type:Object,observer:"_errorChanged"},wizard:{type:Boolean,notify:!0}},detached:function detached(){this._clearForm()},_buildSchemaProperties:function _buildSchemaProperties(){var ctx=this;this._schemaProperties=Object.keys(this.schema.properties||[]).map(function(key){var schema=ctx.schema.properties[key],property={property:key,label:schema.title||key,schema:schema,component:schema.component||{}};if(!property.component.valueProperty){property.component.valueProperty="value"}if(!property.component.slot){property.component.slot=""}if(ctx._isSchemaEnum(schema)){property.component.name=property.component.name||"eco-json-schema-enum";if(babelHelpers.typeof(schema.value)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.value=""}property.value=schema.value}else if(ctx._isSchemaBoolean(schema.type)){property.component.name=property.component.name||"eco-json-schema-boolean";if(babelHelpers.typeof(schema.value)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.value=!1}property.value=schema.value}else if(ctx._isSchemaFile(schema.type)){property.component.name=property.component.name||"eco-json-schema-file";if(babelHelpers.typeof(schema.value)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.value={}}property.value=schema.value}else if(ctx._isSchemaValue(schema.type)){property.component.name=property.component.name||"eco-json-schema-input";if(babelHelpers.typeof(schema.value)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.value=""}property.value=schema.value}else if(ctx._isSchemaObject(schema.type)){property.component.name=property.component.name||"eco-json-schema-object";if(babelHelpers.typeof(schema.value)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.value={}}property.value=schema.value}else if(ctx._isSchemaArray(schema.type)){property.component.name=property.component.name||"eco-json-schema-array";if(babelHelpers.typeof(schema.value)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.value=[]}property.value=schema.value}else{return console.error("Unknown property type %s",schema.type)}return property})},_schemaPropertyChanged:function _schemaPropertyChanged(event,detail){if(detail.path&&/\.length$/.test(detail.path)){return}var ctx=this,property=event.target.schemaProperty,path=["value",property.property];if(detail.path&&/\.splices$/.test(detail.path)){var parts=detail.path.split(".").slice(1,-1);while(parts.length){path.push(parts.shift());if(property.keyMap&&property.keyMap[path.join(".")]){path=property.keyMap[path.join(".")].split(".")}}if(detail.value.keySplices){if(property.keyMap){detail.value.keySplices.forEach(function(splice){splice.removed.forEach(function(k){delete property.keyMap[path.concat([k]).join(".")]})})}}if(detail.value){detail.value.indexSplices.forEach(function(splice){var args=[path.join("."),splice.index,splice.removed.length];if(splice.addedCount){for(var i=0,ii=splice.addedCount;i<ii;i++){if(splice.addedKeys&&splice.addedKeys[i]){property.keyMap=property.keyMap||{};property.keyMap[path.concat([splice.addedKeys[i]]).join(".")]=path.concat([i+splice.index]).join(".")}args.push(ctx._deepClone(splice.object[i+splice.index]))}}ctx.splice.apply(ctx,args)})}}else if(detail.path){var parts=detail.path.split(".").slice(1),v=this.value;if(!v.hasOwnProperty(property.property)){this.set("value."+property.property,{});this.notifyPath("value."+property.property)}while(parts.length){var k=parts.shift();path.push(k);if(property.keyMap&&property.keyMap[path.join(".")]){path=property.keyMap[path.join(".")].split(".")}}this.set(path.join("."),this._deepClone(detail.value));this.notifyPath(path.join("."))}else{property.value=detail.value;this.set(path,this._deepClone(detail.value));this.notifyPath(path)}},_setValue:function _setValue(){var _this=this,value={};this._schemaProperties.forEach(function(property){if(babelHelpers.typeof(property.value)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){value[property.property]=_this._deepClone(property.value)}});this.set("value",value);this.notifyPath("value.*")},_buildForm:function _buildForm(){var _this2=this;this._schemaProperties.forEach(function(property){var el=_this2.create(property.component.name,{label:property.label,schema:property.schema,schemaProperty:property,language:_this2.language,resources:_this2.resources});if("paper-input"===property.component.name){el.style["background-color"]="transparent";el.style.width="100%"}el.setAttribute("name",property.property);el.className="flex start-justified";// set the element's default value to be what was passed into the schema
el[property.component.valueProperty]=property.value;// support component attribute overrides
for(var attr in property.component.attributes){el.setAttribute(attr,property.component.attributes[attr])}// support component property overrides
for(var prop in property.component.properties){el[prop]=property.component.properties[prop]}_this2.listen(el,property.component.valueProperty.replace(/([A-Z])/g,"-$1").toLowerCase()+"-changed","_schemaPropertyChanged");if(babelHelpers.typeof(_this2.$)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){(0,_polymerDom.dom)(_this2).appendChild(el)}// support for slot injection too!
if(""!=property.component.slot){var temp=document.createElement("div");temp.innerHTML=property.component.slot;var cloneDiv=temp.cloneNode(!0);while(null!==(0,_polymerDom.dom)(cloneDiv).firstChild){(0,_polymerDom.dom)(el).appendChild((0,_polymerDom.dom)(cloneDiv).firstChild)}}})},_removePropertyEl:function _removePropertyEl(el){if(babelHelpers.typeof(el.schemaProperty)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.unlisten(el,el.schemaProperty.component.valueProperty.replace(/([A-Z])/g,"-$1").toLowerCase()+"-changed","_schemaPropertyChanged")}el.schemaProperty=null;(0,_polymerDom.dom)(this).removeChild(el)},_clearForm:function _clearForm(){if(babelHelpers.typeof(this.$)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var formEl=(0,_polymerDom.dom)(this);while(formEl.firstChild){this._removePropertyEl(formEl.firstChild)}}},_schemaChanged:function _schemaChanged(newValue,oldValue){if(newValue){this._clearForm();this._buildSchemaProperties();this._buildForm();this._setValue()}},_errorChanged:function _errorChanged(){var _this3=this;(0,_polymerDom.dom)(this).childNodes.forEach(function(el){var name=el.getAttribute("name");if(_this3.error&&_this3.error[name]){el.error=_this3.error[name]}else{el.error=null}})},_deepClone:function _deepClone(o){return JSON.parse(JSON.stringify(o))},_isSchemaValue:function _isSchemaValue(type){return this._isSchemaBoolean(type)||this._isSchemaNumber(type)||this._isSchemaString(type)||this._isSchemaFile(type)},_isSchemaFile:function _isSchemaFile(type){if(Array.isArray(type)){return-1!==type.indexOf("file")}else{return"file"===type}},_isSchemaBoolean:function _isSchemaBoolean(type){if(Array.isArray(type)){return-1!==type.indexOf("boolean")}else{return"boolean"===type}},_isSchemaEnum:function _isSchemaEnum(schema){return!!schema.enum},_isSchemaNumber:function _isSchemaNumber(type){if(Array.isArray(type)){return-1!==type.indexOf("number")||-1!==type.indexOf("integer")}else{return"number"===type||"integer"===type}},_isSchemaString:function _isSchemaString(type){if(Array.isArray(type)){return-1!==type.indexOf("string")}else{return"string"===type}},_isSchemaObject:function _isSchemaObject(type){return"object"===type},_isSchemaArray:function _isSchemaArray(type){return"array"===type}})});