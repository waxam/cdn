define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/utils/async.js","../../../@polymer/iron-flex-layout/iron-flex-layout-classes.js","../../../@polymer/app-localize-behavior/app-localize-behavior.js","../../../@polymer/paper-button/paper-button.js","../../../@polymer/paper-input/paper-input.js","../../../@polymer/iron-icon/iron-icon.js","../../../@polymer/iron-icons/iron-icons.js"],function(_polymerLegacy,async,_ironFlexLayoutClasses,_appLocalizeBehavior,_paperButton,_paperInput,_ironIcon,_ironIcons){"use strict";async=babelHelpers.interopRequireWildcard(async);function _templateObject_1c8dfe00685411e9b25d1735312af746(){var data=babelHelpers.taggedTemplateLiteral(["\n    <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n      paper-input {\n        padding: 2px;\n        --paper-input-container-label: {\n          white-space: normal;\n          position: static;\n          font-size: 22px;\n          color: #212121;\n        }\n      }\n\n      :host {\n        display: inline-block;\n      }\n\n      .enabled {\n        border: 1px dashed #555;\n        @apply --file-upload-upload-border-enabled;\n      }\n\n      .hover {\n        opacity: 0.7;\n        border: 1px dashed #111;\n        @apply --file-upload-upload-border-hover;\n      }\n\n      #UploadBorder {\n        vertical-align: middle;\n        color: #555;\n        padding: 20px;\n        max-height: 300px;\n        overflow-y: auto;\n        display: inline-block;\n        @apply --file-upload-upload-border;\n      }\n\n      #dropArea {\n        text-align: center;\n        @apply --file-upload-drop-area;\n      }\n\n      paper-button#button {\n        margin-bottom: 20px;\n        @apply --file-upload-button;\n      }\n\n      .file {\n        padding: 10px 0px;\n        @apply --file-upload-file;\n      }\n\n      .commands {\n        float: right;\n        @apply --file-upload-commands;\n      }\n\n      .commands iron-icon:not([icon=\"check-circle\"]) {\n        cursor: pointer;\n        opacity: 0.9;\n        @apply --file-upload-commands-faded;\n      }\n\n      .commands iron-icon:hover {\n        opacity: 1;\n        @apply --file-upload-commands-hovered;\n      }\n\n      [hidden] {\n        display: none;\n      }\n\n      .error {\n        color: #f40303;\n        font-size: 11px;\n        margin-top: 2px;\n        @apply --file-upload-error;\n      }\n\n      .progress-bar {\n        margin-top: 2px;\n      }\n\n      paper-progress {\n        --paper-progress-active-color: #03a9f4;\n      }\n\n      paper-progress[error] {\n        --paper-progress-active-color: #f40303;\n      }\n    </style>\n\n    <div class=\"layout horizontal nowrap\">\n      <div>\n        <paper-button\n          id=\"button\"\n          on-click=\"_fileClick\"\n          alt=\"{{paperButtonAlt}}\"\n          raised=\"\"\n        >\n          <iron-icon icon=\"editor:attach-file\"></iron-icon\n          >{{paperButtonTitle}}</paper-button\n        >\n        <div id=\"UploadBorder\">\n          <div id=\"dropArea\" hidden$=\"{{!_shownDropText}}\">{{dropText}}</div>\n          <template is=\"dom-repeat\" items=\"{{files}}\">\n            <div class=\"file\">\n              <div class=\"name\">\n                <span>{{item.name}}</span>\n                <div class=\"commands\">\n                  <iron-icon\n                    icon=\"autorenew\"\n                    title=\"{{retryText}}\"\n                    on-click=\"_retryUpload\"\n                    hidden$=\"{{!item.error}}\"\n                  ></iron-icon>\n                  <iron-icon\n                    icon=\"cancel\"\n                    title=\"{{removeText}}\"\n                    on-click=\"_cancelUpload\"\n                    hidden$=\"{{item.complete}}\"\n                  ></iron-icon>\n                  <iron-icon\n                    icon=\"check-circle\"\n                    title=\"{{successText}}\"\n                    hidden$=\"{{!item.complete}}\"\n                  ></iron-icon>\n                </div>\n              </div>\n              <div class=\"error\" hidden$=\"{{!item.error}}\">{{errorText}}</div>\n            </div>\n          </template>\n        </div>\n      </div>\n      <input\n        type=\"file\"\n        id=\"fileInput\"\n        on-change=\"_fileChange\"\n        hidden=\"\"\n        multiple=\"{{multi}}\"\n        accept=\"{{accept}}\"\n      />\n    </div>\n  "],["\n    <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n      paper-input {\n        padding: 2px;\n        --paper-input-container-label: {\n          white-space: normal;\n          position: static;\n          font-size: 22px;\n          color: #212121;\n        }\n      }\n\n      :host {\n        display: inline-block;\n      }\n\n      .enabled {\n        border: 1px dashed #555;\n        @apply --file-upload-upload-border-enabled;\n      }\n\n      .hover {\n        opacity: 0.7;\n        border: 1px dashed #111;\n        @apply --file-upload-upload-border-hover;\n      }\n\n      #UploadBorder {\n        vertical-align: middle;\n        color: #555;\n        padding: 20px;\n        max-height: 300px;\n        overflow-y: auto;\n        display: inline-block;\n        @apply --file-upload-upload-border;\n      }\n\n      #dropArea {\n        text-align: center;\n        @apply --file-upload-drop-area;\n      }\n\n      paper-button#button {\n        margin-bottom: 20px;\n        @apply --file-upload-button;\n      }\n\n      .file {\n        padding: 10px 0px;\n        @apply --file-upload-file;\n      }\n\n      .commands {\n        float: right;\n        @apply --file-upload-commands;\n      }\n\n      .commands iron-icon:not([icon=\"check-circle\"]) {\n        cursor: pointer;\n        opacity: 0.9;\n        @apply --file-upload-commands-faded;\n      }\n\n      .commands iron-icon:hover {\n        opacity: 1;\n        @apply --file-upload-commands-hovered;\n      }\n\n      [hidden] {\n        display: none;\n      }\n\n      .error {\n        color: #f40303;\n        font-size: 11px;\n        margin-top: 2px;\n        @apply --file-upload-error;\n      }\n\n      .progress-bar {\n        margin-top: 2px;\n      }\n\n      paper-progress {\n        --paper-progress-active-color: #03a9f4;\n      }\n\n      paper-progress[error] {\n        --paper-progress-active-color: #f40303;\n      }\n    </style>\n\n    <div class=\"layout horizontal nowrap\">\n      <div>\n        <paper-button\n          id=\"button\"\n          on-click=\"_fileClick\"\n          alt=\"{{paperButtonAlt}}\"\n          raised=\"\"\n        >\n          <iron-icon icon=\"editor:attach-file\"></iron-icon\n          >{{paperButtonTitle}}</paper-button\n        >\n        <div id=\"UploadBorder\">\n          <div id=\"dropArea\" hidden\\$=\"{{!_shownDropText}}\">{{dropText}}</div>\n          <template is=\"dom-repeat\" items=\"{{files}}\">\n            <div class=\"file\">\n              <div class=\"name\">\n                <span>{{item.name}}</span>\n                <div class=\"commands\">\n                  <iron-icon\n                    icon=\"autorenew\"\n                    title=\"{{retryText}}\"\n                    on-click=\"_retryUpload\"\n                    hidden\\$=\"{{!item.error}}\"\n                  ></iron-icon>\n                  <iron-icon\n                    icon=\"cancel\"\n                    title=\"{{removeText}}\"\n                    on-click=\"_cancelUpload\"\n                    hidden\\$=\"{{item.complete}}\"\n                  ></iron-icon>\n                  <iron-icon\n                    icon=\"check-circle\"\n                    title=\"{{successText}}\"\n                    hidden\\$=\"{{!item.complete}}\"\n                  ></iron-icon>\n                </div>\n              </div>\n              <div class=\"error\" hidden\\$=\"{{!item.error}}\">{{errorText}}</div>\n            </div>\n          </template>\n        </div>\n      </div>\n      <input\n        type=\"file\"\n        id=\"fileInput\"\n        on-change=\"_fileChange\"\n        hidden=\"\"\n        multiple=\"{{multi}}\"\n        accept=\"{{accept}}\"\n      />\n    </div>\n  "]);_templateObject_1c8dfe00685411e9b25d1735312af746=function _templateObject_1c8dfe00685411e9b25d1735312af746(){return data};return data}/**
`eco-json-schema-file` takes in a JSON schema of type number and string and
contains a `paper-input`, exposing a `value` property that represents the schema.

Validation is handled for strings and number/integers by mapping JSON schema
validation keywords to `paper-input` attributes; form elements will automatically
try and validate themselves as users provide input:

Please see the `eco-json-schema-object` documentation for further information.

@group eco Elements
@element eco-json-schema-file
* @demo demo/index.html
*/(0,_polymerLegacy.Polymer)({is:"eco-json-schema-file",_template:(0,_polymerLegacy.html)(_templateObject_1c8dfe00685411e9b25d1735312af746()),behaviors:[_appLocalizeBehavior.AppLocalizeBehavior],properties:{language:{value:"en",notify:!0},resources:{value:function value(){return{}},notify:!0},schema:{type:Object,observer:"_schemaChanged"},value:{type:Object,notify:!0,value:function value(){return{}},observer:"_valueChanged"},/**
    error: {
      type: String,
      observer: '_errorChanged',
      value: null
    },
    */ /**
     * `target` is the target url to upload the files to.
     * Additionally by adding '<name>' in your url, it will be replaced by
     * the file name.
     */target:{type:String,value:""},/**
     * `accept` is the set of comma separated file extensions or mime types
     * to filter as accepted.
     */accept:{type:String,value:""},/**
     * `droppable` indicates whether or not to allow file drop.
     */droppable:{type:Boolean,value:!1},/**
     * `dropText` is the  text to display in the file drop area.
     */dropText:{type:String,value:"Drop Files Here"},/**
     * `multi` indicates whether or not to allow multiple files to be uploaded.
     */multi:{type:Boolean,value:!0},/**
     * `files` is the list of files to be uploaded
     */files:{type:Array,notify:!0,value:function value(){return[]}},/**
     * `raised` indicates whether or not the button should be raised
     */raised:{type:Boolean,value:!0},/**
     * `noink` indicates that the button should not have an ink effect
     */noink:{type:Boolean,value:!1},/**
     * `headers` is a key value map of header names and values
     */headers:{type:Object,value:{}},/**
     * `retryText` is the text for the tooltip to retry an upload
     */retryText:{type:String,value:"Retry Upload"},/**
     * `removeText` is the text for the tooltip to remove an upload
     */removeText:{type:String,value:"Remove"},/**
     * `successText` is the text for the tooltip of a successful upload
     */successText:{type:String,value:"Success"},/**
     * `errorText` is the text to display for a failed upload
     */errorText:{type:String,value:"Error uploading file..."},/**
     * `_shownDropText` indicates whether or not the drop text should be shown
     */_shownDropText:{type:Boolean,value:!1},/**
     * `additional` object of key-pair values to send additional values along with file.
     */additional:{type:Object,value:{}},/**
     * `fileDataName` is the name for the file data in the `formData` object.
     */fileDataName:{type:String,value:"file"},/**
     * `paperButtonAlt` allows changing the alt property on the paper button
     */paperButtonAlt:{type:String,value:""},/**
     * `paperButtonTitle` allows changing the title property on the paper button
     */paperButtonTitle:{type:String,value:""}},/**
   * Clears the list of files
   */clear:function clear(){this.set("files",[]);this.$.fileInput.value="";this._showDropText()},ready:function ready(){if(this.raised){this.toggleAttribute("raised",!0,this.$.button)}if(this.noink){this.toggleAttribute("noink",!0,this.$.button)}if(this.droppable){this._showDropText();this.setupDrop()}},/**
   * A function to set up a drop area for drag-and-drop file uploads
   */setupDrop:function setupDrop(){var uploadBorder=this.$.UploadBorder;this.toggleClass("enabled",!0,uploadBorder);this.ondragover=function(e){e.stopPropagation();this.toggleClass("hover",!0,uploadBorder);// Workaround for allowgin drop from Chome's download footer on OSX
// See https://bugs.chromium.org/p/chromium/issues/detail?id=234931
var effect=e.dataTransfer&&e.dataTransfer.dropEffect,effectAllowed=e.dataTransfer&&e.dataTransfer.effectAllowed;if("none"===effect&&"none"!==effectAllowed){e.dataTransfer.dropEffect="move"===effectAllowed?"move":"copy"}// end of workaround
return!1};this.ondragleave=function(){this.toggleClass("hover",!1,uploadBorder);return!1};this.ondrop=function(event){this.toggleClass("hover",!1,uploadBorder);event.preventDefault();// Check if multiple upload is allowed
if(!this.multi&&0!==this.files.length){return}for(var length=event.dataTransfer.files.length,i=0;i<length;i++){var file=event.dataTransfer.files[i],mimeType=""!==file.type?file.type.match(/^[^\/]*\//)[0]:null,fileType=file.name.match(/\.[^\.]*$/)[0];//if (this.value.indexOf(window.btoa(unescape(encodeURIComponent(file.name)))) >= 0 ) {
//  continue;
//}
// Check if filetype is accepted
if(""!==this.accept&&!(-1<this.accept.indexOf(mimeType)||-1<this.accept.indexOf(fileType))){continue}file.progress=0;file.error=!1;file.complete=!1;this.push("files",file);this.uploadFile(file)}}},/**
   * Clicks the invisible file input
   */_fileClick:function _fileClick(){var elem=this.$.fileInput;if(elem&&document.createEvent){// sanity check
var evt=document.createEvent("MouseEvents");evt.initEvent("click",!0,!1);elem.dispatchEvent(evt)}},/**
   * Called whenever the list of selected files changes
   *
   * @param {object} e An event object
   */_fileChange:function _fileChange(e){for(var length=e.target.files.length,i=0,file;i<length;i++){file=e.target.files[i];file.progress=0;file.error=!1;file.complete=!1;this.push("files",file);if(!this.multi&&0!==this.files.length){this.set("files",[]);this.set("value",{})}this.uploadFile(file)}},/**
   * Cancels the file upload for a specific file
   *
   * @param {object} file An element of the files array
   */cancel:function cancel(file){if(file){if(file.xhr){file.xhr.abort()}this.splice("files",this.files.indexOf(file),1);this._showDropText()}},/**
   * Cancels the file upload
   *
   * @param {object} e An event object
   */_cancelUpload:function _cancelUpload(e){this.cancel(e.model.__data__.item)},/**
   * Retries to upload the file
   *
   * @param {object} e An event object
   */_retryUpload:function _retryUpload(e){e.model.set("item.error",!1);e.model.set("item.progress",0);// The async helps give visual feedback of a retry occurring, even though it's less efficient.
var self=this;async.microTask.run(function(){self.uploadFile(e.model.__data__.item)})},/**
   * Whether or not to display the drop text
   */_showDropText:function _showDropText(){this.set("_shownDropText",!this.files.length&&this.droppable)},/**
   * Uploads a file
   *
   * @param {object} file An element of the files array
   */uploadFile:function uploadFile(file){if(!file){return}this.fire("before-upload");this._showDropText();var prefix="files."+this.files.indexOf(file),self=this,reader=new FileReader;reader.addEventListener("load",function(){var r=reader.result;//self.push('value', {"name": unescape(encodeURIComponent( file.name )),"content":r});
//self.value.push({"name": unescape(encodeURIComponent( file.name )),"content":r});
//console.log('value.'+self.files.indexOf(file));
self.set("value."+self.attributes.name.value+"."+self.files.indexOf(file),r);//self.notifyPath('value');
},!1);if(!self.value.hasOwnProperty(self.attributes.name.value)){this.set("value."+self.attributes.name.value,{})}reader.readAsDataURL(file)},_valueChanged:function _valueChanged(){console.log("this.value: "+JSON.stringify(this.value))},_schemaChanged:function _schemaChanged(){var schema=this.schema;/*
    var inputEl = this.$.fileInput;
    if (schema.required) {
      inputEl.required = true;
    }
    //inputEl.type = 'file';

    if (schema.component && schema.component.properties) {
      Object.keys(schema.component.properties).forEach(function(prop) {
        inputEl[prop] = schema.component.properties[prop];
      });
    }
    */ /*
    inputEl.alwaysFloatLabel = true; // label doesn't float when value not set

    if (schema.title) {
      inputEl.label = schema.title;
    }
    */},/*
  _errorChanged: function() {
    if (this.error) {
      this.$.fileInput.errorMessage = this.error;
      this.$.fileInput.invalid = true;
    } else {
      this.$.fileInput.invalid = false;
      this.$.fileInput.errorMessage = null;
    }
  },
  */_isSchemaValue:function _isSchemaValue(type){return this._isSchemaFile(type)},_isSchemaFile:function _isSchemaFile(type){if(Array.isArray(type)){return-1!==type.indexOf("file")}else{return"file"===type}},_isSchemaBoolean:function _isSchemaBoolean(type){if(Array.isArray(type)){return-1!==type.indexOf("boolean")}else{return"boolean"===type}},_isSchemaNumber:function _isSchemaNumber(type){if(Array.isArray(type)){return-1!==type.indexOf("number")||-1!==type.indexOf("integer")}else{return"number"===type||"integer"===type}},_isSchemaString:function _isSchemaString(type){if(Array.isArray(type)){return-1!==type.indexOf("string")}else{return"string"===type}},_isSchemaObject:function _isSchemaObject(type){return"object"===type},_isSchemaArray:function _isSchemaArray(type){return"array"===type},stringify:function stringify(s){return JSON.stringify(s)}})});