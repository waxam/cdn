define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/app-localize-behavior/app-localize-behavior.js", "../../../@polymer/polymer/lib/legacy/class.js", "../../a11y-tabs/a11y-tabs.js"], function (_exports, _polymerElement, _polymerDom, _renderStatus, _appLocalizeBehavior, _class, _a11yTabs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EcoJsonSchemaTabs = void 0;

  function _templateObject_e5520230b46e11e9978b67ee5ebb8bc8() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style is=\"custom-style\" include=\"iron-flex iron-flex-alignment\">\n          :host{\n            color: var(--eco-json-form-color);\n            background-color: var(--eco-json-form-bg);\n            font-family: var(--eco-json-form-font-family);\n          }\n          :host ([hidden]) {\n            display: none;\n          }\n          :host #form {\n            --a11y-tabs-color: var(--eco-json-form-faded-color);\n            --a11y-tabs-focus-color: var(--eco-json-form-color);\n            --a11y-tabs-border-color: var(--eco-json-form-faded-color);\n            --a11y-tabs-border-radius: var(--eco-json-form-border-radius);\n            --a11y-tabs-background: var(--eco-json-form-bg);\n            --a11y-tabs-faded-background: var(--eco-json-form-faded-bg);\n            --a11y-tabs-justify-tabs: flex-start;\n            --ally-tabs-wrap: unset;\n            --a11y-tabs-content-padding: 8px 16px 16px;\n            --a11y-tabs-button-padding: 8px;\n            --a11y-tabs-vertical-button-padding: unset;\n            --a11y-tabs-horizontal-border-radius: unset;\n            --a11y-tabs-vertical-border-radius: unset;\n            --a11y-tabs-horizontal-button-padding: 2px 5px;\n          }\n          :host #form:focus,\n          :host #form:focus-within {\n            --a11y-tabs-border-color: : var(--eco-json-form-focus-color);\n          }\n          :host .tab-title {\n            position: absolute;\n            left: -99999px;\n            height: 0;\n            overflow: hidden;\n          }\n        </style>\n      </custom-style>\n      <a11y-tabs id=\"form\">\n        <template\n          is=\"dom-repeat\"\n          items=\"[[__validatedSchema]]\"\n          as=\"item\"\n          restamp\n        >\n          <a11y-tab\n            id$=\"item-[[index]]\"\n            icon$=\"[[item.icon]]\"\n            label$=\"[[item.title]]\"\n          >\n            <eco-json-schema-object\n              id=\"schemaobject\"\n              controls$=\"item-[[index]]\"\n              item=\"[[index]]\"\n              autofocus$=\"[[autofocus]]\"\n              on-value-changed=\"_valueChanged\"\n              hide-line-numbers$=\"[[hideLineNumbers]]\"\n              schema=\"[[item]]\"\n              value=\"{{item.value}}\"\n            >\n            </eco-json-schema-object>\n          </a11y-tab>\n        </template>\n      </a11y-tabs>\n    "]);

    _templateObject_e5520230b46e11e9978b67ee5ebb8bc8 = function _templateObject_e5520230b46e11e9978b67ee5ebb8bc8() {
      return data;
    };

    return data;
  }

  /**
  `eco-json-schema-tabs` takes in a JSON schema of type array and builds a form,
  exposing a `value` property that represents an array described by the schema.
  
  Please see the `eco-json-schema-object` documentation for further information.
  
  @group eco Elements
  @element eco-json-schema-tabs
  * @demo demo/index.html
  */
  var EcoJsonSchemaTabs =
  /*#__PURE__*/
  function (_mixinBehaviors) {
    babelHelpers.inherits(EcoJsonSchemaTabs, _mixinBehaviors);

    function EcoJsonSchemaTabs() {
      babelHelpers.classCallCheck(this, EcoJsonSchemaTabs);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EcoJsonSchemaTabs).apply(this, arguments));
    }

    babelHelpers.createClass(EcoJsonSchemaTabs, [{
      key: "_valueChanged",

      /**
       * Handles data changes
       * @param {event} e the change event
       */
      value: function _valueChanged(e) {
        var root = this,
            val = this.__validatedSchema.map(function (item) {
          return item.value;
        });

        this.notifyPath("value.*");
        this.set("value", val);
        this.dispatchEvent(new CustomEvent("value-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: root
        }));
      }
      /**
       * fires when the fields array changes
       * @param {object} oldValue the old value
       * @param {object} newValue the new value
       */

    }, {
      key: "_schemaChanged",
      value: function _schemaChanged(oldValue, newValue) {
        var root = this; //prevent a potential feedback loop

        if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
          this._setValues();
        }

        this.dispatchEvent(new CustomEvent("schema-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: root
        }));
      }
      /**
       * when either the fields or the value changes, updates the schema and form to match
       */

    }, {
      key: "_setValues",
      value: function _setValues() {
        var schema = [];

        for (var prop in this.schema.items.properties) {
          var tab = {
            title: this.schema.items.properties[prop].title,
            icon: this.schema.items.properties[prop].icon,
            properties: this.schema.items.properties[prop].items ? this.schema.items.properties[prop].items.properties : {},
            value: this.value && this.value[prop] ? JSON.parse(JSON.stringify(this.value[prop])) : {}
          };

          for (var subprop in tab.properties) {
            if (tab.properties.value) delete tab.properties.value;
            if (this.value && this.value[prop]) tab.properties[subprop].value = this.value[prop][subprop];
          }

          schema.push(tab);
        }

        this.notifyPath("__validatedSchema.*");
        this.__validatedSchema = [];
        this.__validatedSchema = schema;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "eco-json-schema-tabs";
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_e5520230b46e11e9978b67ee5ebb8bc8());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * automatically set focus on the first field if that field has autofocus
           */
          autofocus: {
            type: "Boolean",
            value: false
          },

          /**
           * hide code-editor line numbers
           */
          hideLineNumbers: {
            type: Boolean,
            value: false
          },
          schema: {
            type: Object,
            notify: true,
            observer: "_schemaChanged"
          },
          value: {
            type: Array,
            notify: true,
            value: {}
          },

          /**
           * Fields to conver to JSON Schema.
           */
          __validatedSchema: {
            type: Array,
            value: [],
            notify: true
          }
        };
      }
    }]);
    return EcoJsonSchemaTabs;
  }((0, _class.mixinBehaviors)([_appLocalizeBehavior.AppLocalizeBehavior], _polymerElement.PolymerElement));

  _exports.EcoJsonSchemaTabs = EcoJsonSchemaTabs;
  window.customElements.define(EcoJsonSchemaTabs.tag, EcoJsonSchemaTabs);
});