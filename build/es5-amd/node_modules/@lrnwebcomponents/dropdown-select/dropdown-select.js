define(["exports", "require", "../../lit-element/lit-element.js", "../simple-picker/simple-picker.js"], function (_exports, _require, _litElement, _simplePicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DropdownSelect = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_78af7920c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --simple-picker-border-width: 0;\n          --simple-picker-options-border-width: 1px;\n          --simple-picker-options-border-color: var(\n            --simple-fields-accent-color\n          );\n          --simple-picker-background-color: rgba(255, 255, 255, 0);\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_78af7920c96f11ea8be5e1d5fe7ec787 = function _templateObject2_78af7920c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_78af7920c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-fields-container\n        id=\"menu\"\n        .error-message=\"", "\"\n        .label=\"", "\"\n      >\n        <simple-picker\n          id=\"picker\"\n          slot=\"field\"\n          value=\"", "\"\n          @expand=\"", "\"\n          @collapse=\"", "\"\n          @changed=\"", "\"\n        >\n        </simple-picker>\n      </simple-fields-container>\n      <slot id=\"content\" hidden></slot>\n    "]);

    _templateObject_78af7920c96f11ea8be5e1d5fe7ec787 = function _templateObject_78af7920c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `dropdown-select`
   * an easy to use, works as expected dropdown menu.
   *
   * @element dropdown-select
   * @demo demo/index.html
   */
  var DropdownSelect =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(DropdownSelect, _LitElement);
    babelHelpers.createClass(DropdownSelect, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_78af7920c96f11ea8be5e1d5fe7ec787(), this.errorMessage, this.label, this.value, this._onOpen, this.onClose, this._dropDownChanged);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_78af7920c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "dropdown-select";
      }
    }]);

    function DropdownSelect() {
      var _this;

      babelHelpers.classCallCheck(this, DropdownSelect);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DropdownSelect).call(this));
      _this.label = "Select an option.";
      _this.options = [[]];
      _this.opened = false;

      _this.setOptions();

      _this.observer.observe(babelHelpers.assertThisInitialized(_this), {
        attributes: false,
        childList: true,
        subtree: false
      });

      new Promise(function (res, rej) {
        return _require.default(["../simple-fields/lib/simple-fields-container.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(DropdownSelect, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.observer.disconnect();
        babelHelpers.get(babelHelpers.getPrototypeOf(DropdownSelect.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "setOptions",
      value: function setOptions() {
        var options = [];
        this.querySelectorAll("paper-item").forEach(function (option, index) {
          options.push([{
            alt: option.innerHTML,
            style: option.getAttribute("style") || undefined,
            icon: option.querySelector("[icon]") ? option.querySelector("[icon]").getAttribute("icon") : undefined,
            value: option.getAttribute("value") || option.getAttribute("id") || index
          }]);
        });
        if (options === []) options = [[]];
        this.options = options;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        var picker = this.shadowRoot && this.shadowRoot.querySelector("#picker") ? this.shadowRoot.querySelector("#picker") : undefined;
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "value") _this2._valueChanged(_this2.value, oldValue);
          if (propName === "options" && _this2.options !== oldValue) picker.options = _this2.options;
        });
        this.dispatchEvent(new CustomEvent("change", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Sets the opened property to true
       */

    }, {
      key: "_onOpen",
      value: function _onOpen() {
        this.opened = true;
        this.dispatchEvent(new CustomEvent("open", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Sets the opened property to false
       */

    }, {
      key: "_onClose",
      value: function _onClose() {
        this.opened = false;
        this.dispatchEvent(new CustomEvent("close", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * updates value when dropdown-menu's selected item changes
       * @param {event} e change event
       */

    }, {
      key: "_dropDownChanged",
      value: function _dropDownChanged(e) {
        var picker = this.shadowRoot && this.shadowRoot.querySelector("#picker") ? this.shadowRoot.querySelector("#picker") : undefined;
        this.value = picker.value;
      }
      /**
       * Notice value has changed and ensure data model is accurate
       * @param {string} newValue
       * @param {string} oldValue
       * @fires dropdown-select-changed
       * @fires value-changed
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(newValue, oldValue) {
        var _this3 = this;

        var label = null,
            index = null,
            ctr = -1;
        this.selectedItem = this.value;
        this.options.forEach(function (row) {
          return row.forEach(function (item) {
            if (_this3.value === item.value) {
              label = item.alt || item.value;
              index = ctr++;
            }
          });
        });
        this.selectedItemLabel = label;
        this.selectedItemIndex = index;

        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.dispatchEvent(new CustomEvent("value-changed", {
            bubbles: true,
            cancelable: true,
            composed: true,
            target: this,
            detail: {
              value: newValue,
              oldValue: oldValue
            }
          }));
          this.dispatchEvent(new CustomEvent("dropdown-select-changed", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
      /**
       * @event awesome-change
       *
       * Fired when `element` changes its awesomeness level.
       */

      /**
       * @event value-changed
       *
       * fired when value has changed
       * @param {object} target dropdown-select instance
       * @param {object} detail `{ value: newValue, oldValue: oldValue }`
       */

      /**
       * @event dropdown-select-changed
       *
       * fired when value has changed (deprecated)
       * @param {object} detail dropdown-select instance
       */

    }, {
      key: "observer",

      /**
       * mutation observer for dropdown
       * @readonly
       * @returns {object}
       */
      get: function get() {
        var _this4 = this;

        var callback = function callback() {
          return _this4.setOptions();
        };

        return new MutationObserver(callback);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * The error message to display when invalid.
           */
          errorMessage: {
            attribute: "error-message",
            type: String
          },

          /**
           * The label of the select menu
           */
          label: {
            type: String
          },

          /**
           * True if the dropdown is open. Otherwise, false.
           */
          opened: {
            type: Boolean
          },

          /**
           * Optional options array
           */
          options: {
            type: Array
          },

          /**
           * The last selected item.
           */
          selectedItem: {
            attribute: "selected-item",
            type: Object
          },

          /**
           * The index of the selected item
           */
          selectedItemIndex: {
            attribute: "selected-item-index",
            type: Number
          },

          /**
           * The label of the selected item
           */
          selectedItemLabel: {
            attribute: "selected-item-label",
            type: String
          },

          /**
           * The default value
           */
          value: {
            type: String,
            reflect: true
          }
        };
      }
    }]);
    return DropdownSelect;
  }(_litElement.LitElement);

  _exports.DropdownSelect = DropdownSelect;
  window.customElements.define(DropdownSelect.tag, DropdownSelect);
});