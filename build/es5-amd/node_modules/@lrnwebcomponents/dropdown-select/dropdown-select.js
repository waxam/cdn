define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DropdownSelect = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_2cfd0b50494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        paper-listbox ::slotted(paper-item) {\n          display: block;\n          width: calc(100% - 32px);\n          padding: 0 16px;\n          min-height: 32px;\n          vertical-align: text-top;\n          line-height: 32px;\n        }\n      "]);

    _templateObject2_2cfd0b50494a11eab3124f20b4f7a7f7 = function _templateObject2_2cfd0b50494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  function _templateObject_2cfd0b50494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-dropdown-menu\n        id=\"menu\"\n        error-message=\"", "\"\n        horizontal-align=\"", "\"\n        label=\"", "\"\n        placeholder=\"", "\"\n        vertical-align=\"", "\"\n        vertical-offset=\"", "\"\n        ?allow-outside-scroll=\"", "\"\n        ?always-float-label=\"", "\"\n        ?dynamic-align=\"", "\"\n        ?no-animations=\"", "\"\n        ?no-label-float=\"", "\"\n        ?restore-focus-on-close=\"", "\"\n        @paper-dropdown-open=\"", "\"\n        @paper-dropdown-close=\"", "\"\n        @selected-item-changed=\"", "\"\n      >\n        <paper-listbox\n          id=\"listbox\"\n          slot=\"dropdown-content\"\n          class=\"dropdown-content\"\n          .selected=\"", "\"\n        >\n          <slot id=\"content\"></slot>\n        </paper-listbox>\n      </paper-dropdown-menu>\n    "]);

    _templateObject_2cfd0b50494a11eab3124f20b4f7a7f7 = function _templateObject_2cfd0b50494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  /**
   * `dropdown-select`
   * @customElement dropdown-select
   * an easy to use, works as expected dropdown menu.
   *
   * @demo demo/index.html
   */
  var DropdownSelect =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(DropdownSelect, _LitElement);
    babelHelpers.createClass(DropdownSelect, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_2cfd0b50494a11eab3124f20b4f7a7f7(), this.errorMessage, this.horizontalAlign, this.label, this.placeholder, this.verticalAlign, this.verticalOffset, this.allowOutsideScroll, this.alwaysFloatLabel, this.dynamicAlign, this.noAnimations, this.noLabelFloat, this.restoreFocusOnClose, this._onOpen, this.onClose, this._dropDownChanged, this.selectedItemIndex);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_2cfd0b50494a11eab3124f20b4f7a7f7())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "dropdown-select";
      }
    }]);

    function DropdownSelect() {
      var _this;

      babelHelpers.classCallCheck(this, DropdownSelect);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DropdownSelect).call(this));
      _this.allowOutsideScroll = false;
      _this.alwaysFloatLabel = false;
      _this.dynamicAlign = false;
      _this.horizontalAlign = "right";
      _this.label = "Select an option.";
      _this.noAnimations = false;
      _this.noLabelFloat = false;
      _this.opened = false;
      _this.restoreFocusOnClose = true;
      _this.selectedItemIndex = null;
      _this.selectedItemLabel = null;
      _this.value = null;
      _this.verticalAlign = "top";
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-item/paper-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-listbox/paper-listbox.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(DropdownSelect, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "value") _this2._valueChanged(_this2.value, oldValue);
        });
        this.dispatchEvent(new CustomEvent("change", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            value: this.value
          }
        }));
      }
      /**
       * Sets the opened property to true
       */

    }, {
      key: "_onOpen",
      value: function _onOpen() {
        this.opened = true;
        this.dispatchEvent(new CustomEvent("open", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Sets the opened property to false
       */

    }, {
      key: "_onClose",
      value: function _onClose() {
        this.opened = false;
        this.dispatchEvent(new CustomEvent("close", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * updates value when dropdown-menu's selected item changes
       * @param {event} e change event
       */

    }, {
      key: "_dropDownChanged",
      value: function _dropDownChanged(e) {
        this.value = e.detail.value ? e.detail.value.getAttribute("value") : null;
      }
      /**
       * Notice value has changed and ensure data model is accurate
       * @param {string} newValue
       * @param {string} oldValue
       * @fires dropdown-select-changed
       * @fires value-changed
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(newValue, oldValue) {
        var items = Array.prototype.slice.call(this.querySelectorAll("paper-item"));
        this.selectedItem = this.querySelector("paper-item[value=\"".concat(newValue, "\"]"));
        this.selectedItemLabel = this.selectedItem ? this.selectedItem.innerHTML : null;
        this.selectedItemIndex = this.selectedItem ? items.indexOf(this.selectedItem) : null;

        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.dispatchEvent(new CustomEvent("value-changed", {
            bubbles: true,
            cancelable: true,
            composed: true,
            target: this,
            detail: {
              value: newValue,
              oldValue: oldValue
            }
          }));
          this.dispatchEvent(new CustomEvent("dropdown-select-changed", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
      /**
       * @event awesome-change
       *
       * Fired when `element` changes its awesomeness level.
       */

      /**
       * @event value-changed
       *
       * fired when value has changed
       * @param {object} target dropdown-select instance
       * @param {object} detail `{ value: newValue, oldValue: oldValue }`
       */

      /**
       * @event dropdown-select-changed
       *
       * fired when value has changed (deprecated)
       * @param {object} detail dropdown-select instance
       */

    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * @property {boolean} allowOutsideScroll
           *
           * Set to true in order to prevent scroll from being constrained
           * to the dropdown when it opens.
           */
          allowOutsideScroll: {
            attribute: "allow-outside-scroll",
            type: Boolean
          },

          /**
           * Set to true to always float the label.
           */
          alwaysFloatLabel: {
            attribute: "always-float-label",
            type: Boolean
          },

          /**
           * If true, the `horizontalAlign` and `verticalAlign` properties will
           * be considered preferences instead of strict requirements when
           * positioning the dropdown and may be changed if doing so reduces
           * the area of the dropdown falling outside of `fitInto`.
           */
          dynamicAlign: {
            attribute: "dynamic-align",
            type: Boolean
          },

          /**
           * The error message to display when invalid.
           */
          errorMessage: {
            attribute: "error-message",
            type: String
          },

          /**
           * The orientation against which to align the menu dropdown
           * horizontally relative to the dropdown trigger.
           */
          horizontalAlign: {
            attribute: "horizontal-align",
            type: String
          },

          /**
           * The label of the select menu
           */
          label: {
            type: String
          },

          /**
           * Set to true to disable animations when opening and closing the
           * dropdown.
           */
          noAnimations: {
            attribute: "no-animations",
            type: Boolean
          },

          /**
           * Set to true to disable the floating label.
           */
          noLabelFloat: {
            attribute: "no-label-float",
            type: Boolean
          },

          /**
           * True if the dropdown is open. Otherwise, false.
           */
          opened: {
            type: Boolean
          },

          /**
           * The placeholder for the dropdown.
           */
          placeholder: {
            type: String
          },

          /**
           * Whether focus should be restored to the dropdown when the menu closes.
           */
          restoreFocusOnClose: {
            attribute: "restore-focus-on-close",
            type: Boolean
          },

          /**
           * The last selected item.
           */
          selectedItem: {
            attribute: "selected-item",
            type: Object
          },

          /**
           * The index of the selected item
           */
          selectedItemIndex: {
            attribute: "selected-item-index",
            type: Number
          },

          /**
           * The label of the selected item
           */
          selectedItemLabel: {
            attribute: "selected-item-label",
            type: String
          },

          /**
           * The default value
           */
          value: {
            type: String,
            reflect: true
          },

          /**
           * The orientation against which to align the menu dropdown
           * vertically relative to the dropdown trigger.
           */
          verticalAlign: {
            attribute: "vertical-align",
            type: String
          },

          /**
           * Overrides the vertical offset computed in
           * _computeMenuVerticalOffset.
           */
          verticalOffset: {
            attribute: "vertical-offset",
            type: Number
          }
        };
      }
    }]);
    return DropdownSelect;
  }(_litElement.LitElement);

  _exports.DropdownSelect = DropdownSelect;
  window.customElements.define(DropdownSelect.tag, DropdownSelect);
});