define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MapMenuSubmenu = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_90df5650c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <map-menu-header\n        .avatar-label=\"", "\"\n        id=\"", "\"\n        title=\"", "\"\n        label=\"", "\"\n        ?opened=\"", "\"\n        url=\"", "\"\n        icon=\"", "\"\n        selected=\"", "\"\n      ></map-menu-header>\n      <iron-collapse id=\"container\"> <slot></slot> </iron-collapse>\n    "]);

    _templateObject2_90df5650c96f11ea8be5e1d5fe7ec787 = function _templateObject2_90df5650c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_90df5650c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([collapsable]) > map-menu-header {\n          cursor: pointer;\n          display: block;\n        }\n        #container {\n          margin-left: 16px;\n        }\n        #container ::slotted(map-menu-item) {\n          margin-top: 0.4em;\n        }\n      "]);

    _templateObject_90df5650c96f11ea8be5e1d5fe7ec787 = function _templateObject_90df5650c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  var MapMenuSubmenu =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(MapMenuSubmenu, _LitElement);
    babelHelpers.createClass(MapMenuSubmenu, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_90df5650c96f11ea8be5e1d5fe7ec787())];
      }
    }]);

    function MapMenuSubmenu() {
      var _this;

      babelHelpers.classCallCheck(this, MapMenuSubmenu);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MapMenuSubmenu).call(this));
      _this.opened = false;
      _this.collapsable = true;
      _this.expandChildren = false;
      _this.avatarLabel = "";
      _this.label = "";
      new Promise(function (res, rej) {
        return _require.default(["./map-menu-header.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-collapse/iron-collapse.js"], res, rej);
      });
      setTimeout(function () {
        _this.addEventListener("active-item", _this.__activeChanged.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("toggle-header", _this.__toggleHeader.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("link-clicked", _this._headerClickHandler.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("map-menu-item-hidden-check", _this._mapMenuItemHiddenCheckHandler.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }
    /**
     * LitElement life cycle - render
     */


    babelHelpers.createClass(MapMenuSubmenu, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_90df5650c96f11ea8be5e1d5fe7ec787(), this.avatarLabel, this.id, this.title, this.label, this.opened, this.url, this.icon, this.selected);
      }
    }, {
      key: "updated",

      /**
       * LitElement life cycle - properties changed callback
       */
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened") {
            _this2._openedChanged(_this2[propName], oldValue);
          }
        });
      }
    }, {
      key: "_openedChanged",
      value: function _openedChanged(opened) {
        var target = this.shadowRoot.querySelector("#container");

        if (target) {
          if (opened && typeof target.show === "function") {
            target.show();
          } else if (typeof target.hide === "function") {
            target.hide();
          }
        }
      }
    }, {
      key: "_headerClickHandler",
      value: function _headerClickHandler(e) {
        if (!this.opened) {
          this.opened = !this.opened;
        }
      }
    }, {
      key: "_mapMenuItemHiddenCheckHandler",
      value: function _mapMenuItemHiddenCheckHandler(e) {
        var hiddenChild = e.detail.hiddenChild;
        var detail = Object.assign({}, e.detail);

        if (hiddenChild !== true && this.opened === false) {
          detail = Object.assign({}, detail, {
            hiddenChild: true
          });
        } else {
          detail = Object.assign({}, detail, {
            hiddenChild: false
          });
        }

        this.dispatchEvent(new CustomEvent("map-meu-item-hidden-check", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: detail
        }));
      }
    }, {
      key: "__toggleHeader",
      value: function __toggleHeader(e) {
        // catch the event and end propagation
        e.stopPropagation();
        this.opened = !this.opened;
        this.dispatchEvent(new CustomEvent("toggle-updated", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            opened: this.opened
          }
        }));
      }
    }, {
      key: "__activeChanged",
      value: function __activeChanged(e) {
        this.opened = true;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "map-menu-submenu";
      }
      /**
       * LitElement life cycle - properties definition
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          id: {
            type: String
          },
          title: {
            type: String
          },
          avatarLabel: {
            type: String,
            attribute: "avatar-label"
          },
          label: {
            type: String
          },
          icon: {
            type: String
          },
          url: {
            type: String
          },
          opened: {
            type: Boolean
          },
          collapsable: {
            type: Boolean
          },
          expandChildren: {
            type: Boolean,
            attribute: "expand-children"
          },
          selected: {
            type: String
          }
        };
      }
    }]);
    return MapMenuSubmenu;
  }(_litElement.LitElement);

  _exports.MapMenuSubmenu = MapMenuSubmenu;
  window.customElements.define(MapMenuSubmenu.tag, MapMenuSubmenu);
});