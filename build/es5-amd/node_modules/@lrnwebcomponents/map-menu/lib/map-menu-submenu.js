define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "./map-menu-item.js", "./map-menu-header.js"], function (_exports, _require, _polymerElement, _renderStatus, _mapMenuItem, _mapMenuHeader) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MapMenuSubmenu = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_4b9477a0dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([collapsable]) > map-menu-header {\n          cursor: pointer;\n          display: block;\n        }\n\n        #container {\n          margin-left: 16px;\n        }\n\n        #container ::slotted(map-menu-item) {\n          margin-top: 0.4em;\n        }\n      </style>\n      <map-menu-header\n        avatar-label=\"[[avatarLabel]]\"\n        id=\"[[id]]\"\n        title=\"[[title]]\"\n        label=\"[[label]]\"\n        opened=\"[[opened]]\"\n        url=\"[[url]]\"\n        icon=\"[[icon]]\"\n        selected=\"[[selected]]\"\n      ></map-menu-header>\n      <iron-collapse id=\"container\"> <slot></slot> </iron-collapse>\n    "]);

    _templateObject_4b9477a0dbdc11e9bcafdb98156fc1d6 = function _templateObject_4b9477a0dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  var MapMenuSubmenu =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(MapMenuSubmenu, _PolymerElement);

    function MapMenuSubmenu() {
      var _this;

      babelHelpers.classCallCheck(this, MapMenuSubmenu);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MapMenuSubmenu).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-collapse/iron-collapse.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(MapMenuSubmenu, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(MapMenuSubmenu.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          //this.addEventListener("child-deactivated", this.__childDeactivated.bind(this));
          // this.addEventListener("child-activated", this.__childActivated.bind(this));
          this.addEventListener("active-item", this.__activeChanged.bind(this));
          this.addEventListener("toggle-header", this.__toggleHeader.bind(this));
          this.addEventListener("link-clicked", this._headerClickHandler.bind(this)); //this.addEventListener("map-menu-active-item-changed", this._mapMenuActiveItemChangedHandler.bind(this));

          this.addEventListener("map-menu-item-hidden-check", this._mapMenuItemHiddenCheckHandler.bind(this));
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        //this.removeEventListener("child-deactivated", this.__childDeactivated.bind(this));
        //this.removeEventListener("child-activated", this.__childActivated.bind(this));
        this.removeEventListener("active-item", this.__activeChanged.bind(this));
        this.removeEventListener("toggle-header", this.__toggleHeader.bind(this));
        this.removeEventListener("link-clicked", this._headerClickHandler.bind(this)); //this.removeEventListener("map-menu-active-item-changed", this._mapMenuActiveItemChangedHandler.bind(this));

        this.removeEventListener("map-menu-item-hidden-check", this._mapMenuItemHiddenCheckHandler.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(MapMenuSubmenu.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_openChanged",
      value: function _openChanged(opened) {
        var target = this.shadowRoot.querySelector("#container");

        if (target) {
          if (opened && typeof target.show === "function") {
            target.show();
          } else if (typeof target.hide === "function") {
            target.hide();
          }
        }
      }
    }, {
      key: "_headerClickHandler",
      value: function _headerClickHandler(e) {
        if (!this.opened) {
          this.opened = !this.opened;
        }
      }
    }, {
      key: "_mapMenuItemHiddenCheckHandler",
      value: function _mapMenuItemHiddenCheckHandler(e) {
        var hiddenChild = e.detail.hiddenChild;
        var detail = Object.assign({}, e.detail);

        if (hiddenChild !== true && this.opened === false) {
          detail = Object.assign({}, detail, {
            hiddenChild: true
          });
        } else {
          detail = Object.assign({}, detail, {
            hiddenChild: false
          });
        }

        this.dispatchEvent(new CustomEvent("map-meu-item-hidden-check", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: detail
        }));
      }
    }, {
      key: "__toggleHeader",
      value: function __toggleHeader(e) {
        // catch the event and end propagation
        e.stopPropagation();
        this.opened = !this.opened;
        this.dispatchEvent(new CustomEvent("toggle-updated", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            opened: this.opened
          }
        }));
      }
    }, {
      key: "__activeChanged",
      value: function __activeChanged(e) {
        this.opened = true;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_4b9477a0dbdc11e9bcafdb98156fc1d6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "map-menu-submenu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          id: {
            type: String
          },
          title: {
            type: String
          },
          avatarLabel: {
            type: String
          },
          label: {
            type: String
          },
          icon: {
            type: String
          },
          opened: {
            type: Boolean,
            value: false
          },
          collapsable: {
            type: Boolean,
            value: true
          },
          expandChildren: {
            type: Boolean,
            value: false
          },
          selected: {
            type: String
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_openChanged(opened)"];
      }
    }]);
    return MapMenuSubmenu;
  }(_polymerElement.PolymerElement);

  _exports.MapMenuSubmenu = MapMenuSubmenu;
  window.customElements.define(MapMenuSubmenu.tag, MapMenuSubmenu);
});