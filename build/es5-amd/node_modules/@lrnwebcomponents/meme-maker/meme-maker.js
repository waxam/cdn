define(["exports", "../../lit-element/lit-element.js"], function (_exports, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MemeMaker = void 0;

  function _templateObject2_00d367f001c211eba2339b0c52070e79() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        * {\n          box-sizing: border-box;\n        }\n        figure {\n          position: relative;\n          width: 100%;\n          margin: 0;\n          padding: 0;\n          font-size: 20px;\n        }\n        img {\n          width: 100%;\n          height: auto;\n        }\n        .top-text,\n        .bottom-text {\n          position: absolute;\n          left: 0;\n          width: 100%;\n          padding: 3% 2%;\n          text-align: center;\n          text-transform: uppercase;\n          font-weight: 900;\n          font-family: \"Impact\", \"Arial Black\", \"sans serif\";\n          line-height: 1.2;\n          font-size: var(--meme-maker-font-size, 36px);\n          color: white;\n          text-shadow: -1px -1px 0 #000, 1px -1px 0 #000, -1px 1px 0 #000,\n            1px 1px 0 #000;\n          letter-spacing: 2px;\n        }\n        .top-text {\n          top: 0;\n        }\n        .bottom-text {\n          bottom: 0;\n        }\n        @media (max-width: 800px) {\n          .top-text,\n          .bottom-text {\n            font-size: var(--meme-maker-font-size-medium, 20px);\n          }\n        }\n        @media (max-width: 600px) {\n          .top-text,\n          .bottom-text {\n            font-size: var(--meme-maker-font-size-small, 20px);\n          }\n        }\n      "]);

    _templateObject2_00d367f001c211eba2339b0c52070e79 = function _templateObject2_00d367f001c211eba2339b0c52070e79() {
      return data;
    };

    return data;
  }

  function _templateObject_00d367f001c211eba2339b0c52070e79() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <figure>\n        <img\n          loading=\"lazy\"\n          src=\"", "\"\n          .alt=\"", "\"\n          aria-describedby=\"", "\"\n        />\n        <figcaption class=\"top-text\">", "</figcaption>\n        <figcaption class=\"bottom-text\">", "</figcaption>\n      </figure>\n    "]);

    _templateObject_00d367f001c211eba2339b0c52070e79 = function _templateObject_00d367f001c211eba2339b0c52070e79() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `meme-maker`
   * Connects lrndesign-gallery to HAX
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   *  - go forth and make dank memes yo
   * @element meme-maker
   */
  var MemeMaker = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(MemeMaker, _LitElement);

    var _super = _createSuper(MemeMaker);

    babelHelpers.createClass(MemeMaker, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_00d367f001c211eba2339b0c52070e79(), this.imageUrl, this.alt, this.describedBy || "", this.topText, this.bottomText);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_00d367f001c211eba2339b0c52070e79())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "meme-maker";
      }
    }]);

    function MemeMaker() {
      var _this;

      babelHelpers.classCallCheck(this, MemeMaker);
      _this = _super.call(this);
      _this.alt = "";
      return _this;
    }

    babelHelpers.createClass(MemeMaker, [{
      key: "haxProgressiveEnhancement",

      /**
       * Hook for HAX to support progressive enhancement and return a string
       * to place in the slot of this tag for RSS, bots and legacy formats
       */
      value: function haxProgressiveEnhancement() {
        return "\n    ".concat(this.topText ? "<div>".concat(this.topText, "</div>") : "", "\n      <img src=\"").concat(this.imageUrl, "\" alt=\"").concat(this.alt, "\" preload=\"lazy\" aria-describedby=\"").concat(this.describedBy || "", "\"/>\n    ").concat(this.bottomText ? "<div>".concat(this.bottomText, "</div>") : "");
      }
      /**
       * Attached to the DOM, now fire.
       */

    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * Alt data passed down to appropriate tag
           */
          alt: {
            type: String
          },

          /**
           * Aria-describedby data passed down to appropriate tag
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },

          /**
           * url to the meme image
           */
          imageUrl: {
            type: String,
            attribute: "image-url",
            reflect: true
          },

          /**
           * Text on top of the image.
           */
          topText: {
            type: String,
            attribute: "top-text",
            reflect: true
          },

          /**
           * Bottom text for the image.
           */
          bottomText: {
            type: String,
            attribute: "bottom-text",
            reflect: true
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Meme",
            description: "Make a meme out of an image",
            icon: "hax:meme",
            color: "orange",
            groups: ["Media", "Funny"],
            handles: [{
              type: "image",
              source: "imageUrl",
              title: "topText",
              author: "bottomText",
              alt: "alt",
              ariaDescribedby: "describedBy"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "topText",
              title: "Top text",
              description: "Top text of the meme.",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "bottomText",
              title: "Bottom text",
              description: "The date this was accessed.",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            configure: [{
              property: "imageUrl",
              title: "Source",
              description: "The source url for the element this is citing.",
              inputMethod: "haxupload",
              icon: "link"
            }, {
              property: "topText",
              title: "Top text",
              description: "Top text of the meme.",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "bottomText",
              title: "Bottom text",
              description: "The date this was accessed.",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: [{
              property: "describedBy",
              title: "aria-describedby",
              description: "Space-separated list of IDs for elements that describe the image.",
              inputMethod: "textfield"
            }]
          },
          saveOptions: {
            wipeSlot: true
          },
          demoSchema: [{
            tag: "meme-maker",
            content: "",
            properties: {
              alt: "Cat stalking a small toy",
              imageUrl: "https://cdn2.thecatapi.com/images/9j5.jpg",
              topText: "I bring you",
              bottomText: "the death"
            }
          }]
        };
      }
    }]);
    return MemeMaker;
  }(_litElement.LitElement);

  _exports.MemeMaker = MemeMaker;
  window.customElements.define(MemeMaker.tag, MemeMaker);
});