define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "./lib/rich-text-editor-styles.js", "./lib/toolbars/rich-text-editor-toolbar.js", "./lib/toolbars/rich-text-editor-toolbar-mini.js", "./lib/toolbars/rich-text-editor-toolbar-full.js"], function (_exports, _polymerElement, _ironA11yKeys, _richTextEditorStyles, _richTextEditorToolbar, _richTextEditorToolbarMini, _richTextEditorToolbarFull) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditor = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_64859500d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n<style>\n:host([hidden]) {\n  display: none;\n}\n:host {\n  display: block;\n  min-height: 20px;\n  cursor: pointer;\n  @apply --rich-text-editor-content;\n}\n:host([contenteditable=\"true\"]) {\n  border: var(--rich-text-editor-border);\n  overflow: auto;\n  @apply --rich-text-editor-content-edit;\n}\n:host(.heightmax[contenteditable=\"true\"]) {\n  max-height: calc(100vh - 200px);\n  overflow-y: scroll;\n  @apply --rich-text-editor-heightmax;\n}\n:host(:empty) {\n  border: 1px dashed var(--rich-text-editor-border-color);\n  @apply --rich-text-editor-empty;\n}\n:host(:not([contenteditable=\"true\"]):empty):before {\n  content: attr(placeholder);\n  padding: 0 5px;\n  display: block;\n  color: var(--rich-text-editor-button-disabled-color);\n  @apply --rich-text-editor-empty-placeholder;\n}\n:host([contenteditable=\"true\"]:empty):before {\n  @apply --rich-text-editor-empty-editable;\n}\n        </style>\n<style include=\"rich-text-editor-styles\"></style>\n<slot></slot>"]);

    _templateObject_64859500d34d11ea880ba1e93364c49c = function _templateObject_64859500d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `rich-text-editor`
   * @element rich-text-editor
   * `a standalone rich text editor`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   * @demo ./demo/index.html demo
   * @demo ./demo/mini.html mini floating toolbar
   * @demo ./demo/full.html toolbar with breadcrumb
   * @demo ./demo/config.html custom configuration
   */
  var RichTextEditor =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(RichTextEditor, _PolymerElement);

    function RichTextEditor() {
      babelHelpers.classCallCheck(this, RichTextEditor);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RichTextEditor).apply(this, arguments));
    }

    babelHelpers.createClass(RichTextEditor, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _polymerElement.html)(_templateObject_64859500d34d11ea880ba1e93364c49c());
      } // haxProperty definition

    }, {
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       * @returns {void}
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor.prototype), "connectedCallback", this).call(this);
        if (!this.id) this.id = this._generateUUID();
        window.RichTextEditorStyleManager.requestAvailability();
      }
      /**
       * ready
       * @returns {void}
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor.prototype), "ready", this).call(this);
        this.getEditor();
      }
      /**
       * connects the mini-toolbar to a mini editor
       * @returns {void}
       */

    }, {
      key: "getEditor",
      value: function getEditor() {
        var root = this,
            id = this.toolbar ? "#" + this.toolbar : "",
            both = document.querySelector(this.type + id),
            idOnly = id ? document.querySelector(id) : null,
            typeOnly = document.querySelector(this.type),
            //try to match both id and type, if no match try id only, and then type only
        toolbar = both || idOnly || typeOnly; //if still no match, create a region of type

        if (!this.toolbar) this.toolbar = this._generateUUID();

        if (!toolbar || !toolbar.addEditableRegion) {
          toolbar = document.createElement(this.type);
          toolbar.id = this.toolbar;
          root.parentNode.appendChild(toolbar);
        }

        toolbar.addEditableRegion(root);
      }
      /**
       * Normalizes selected range data.
       *
       * @returns {object} the selected range
       */

    }, {
      key: "_getRange",
      value: function _getRange() {
        var sel = window.getSelection();

        if (sel.getRangeAt && sel.rangeCount) {
          return sel.getRangeAt(0);
        } else if (sel) {
          return sel;
        } else false;
      }
      /**
       * Generate a UUID
       * @returns {string} a unique id
       */

    }, {
      key: "_generateUUID",
      value: function _generateUUID() {
        var hex = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        return "rte-" + "ss-s-s-s-sss".replace(/s/g, hex);
      }
    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          "canScale": true,
          "canPosition": true,
          "canEditSource": false,
          "gizmo": {
            "title": "Rich text-editor",
            "description": "a standalone rich text editor",
            "icon": "icons:android",
            "color": "green",
            "groups": ["Text"],
            "handles": [{
              "type": "todo:read-the-docs-for-usage"
            }],
            "meta": {
              "author": "nikkimk",
              "owner": "Penn State University"
            }
          },
          "settings": {
            "quick": [],
            "configure": [{
              "property": "title",
              "description": "",
              "inputMethod": "textfield",
              "required": false,
              "icon": "icons:android"
            }],
            "advanced": []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor), "properties", this), {
          /**
           * The editor's unique id
           */
          "id": {
            "name": "id",
            "type": String,
            "value": ""
          },

          /**
           * Placeholder text for empty editable regions
           */
          "placeholder": {
            "name": "placeholder",
            "type": String,
            "reflectToAttribute": true,
            "value": "Click to edit"
          },

          /**
           * The id for the toolbar
           */
          "toolbar": {
            "name": "toolbar",
            "type": String,
            "value": ""
          },

          /**
           * The type of editor toolbar, i.e.
           * full - full for full toolbar with breadcrumb,
           * mini - mini for mini floating toolbar, or
           * the default toolbar if neither.
           */
          "type": {
            "name": "type",
            "type": String,
            "value": "rich-text-editor-toolbar"
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor";
      }
    }]);
    return RichTextEditor;
  }(_polymerElement.PolymerElement);

  _exports.RichTextEditor = RichTextEditor;
  window.customElements.define(RichTextEditor.tag, RichTextEditor);
});