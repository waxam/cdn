define(["exports", "../../lit-element/lit-element.js", "./lib/singletons/rich-text-editor-selection.js", "./lib/rich-text-editor-styles.js", "./lib/toolbars/rich-text-editor-toolbar.js", "./lib/toolbars/rich-text-editor-toolbar-mini.js", "./lib/toolbars/rich-text-editor-toolbar-full.js", "../../shadow-selection-polyfill/shadow.js"], function (_exports, _litElement, _richTextEditorSelection, _richTextEditorStyles, _richTextEditorToolbar, _richTextEditorToolbarMini, _richTextEditorToolbarFull, shadow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditor = void 0;
  shadow = babelHelpers.interopRequireWildcard(shadow);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_6a820650545d11eba21e89082e94d7aa() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host([hidden]) {\n          display: none;\n        }\n\n        :host {\n          display: block;\n          cursor: pointer;\n          min-height: 40px;\n        }\n\n        :host([contenteditable=\"true\"]) {\n          border: var(--rich-text-editor-border);\n          overflow: auto;\n        }\n\n        :host([contenteditable=\"true\"]):focus-within,\n        :host([contenteditable=\"true\"]):focus {\n          padding: 2px;\n          margin-bottom: 2px;\n        }\n\n        :host(.heightmax[contenteditable=\"true\"]) {\n          max-height: calc(100vh - 200px);\n          overflow-y: scroll;\n        }\n\n        :host(:empty) {\n          border: 1px dashed var(--rich-text-editor-border-color);\n          outline: 1px dashed var(--rich-text-editor-border-color);\n        }\n\n        :host(:empty):before {\n          content: attr(placeholder);\n          padding: 0 5px;\n          display: block;\n          z-index: -1;\n          color: var(--rich-text-editor-button-disabled-color);\n        }\n\n        *::selection .rich-text-editor-selection {\n          background-color: var(--rich-text-editor-selection-bg);\n        }\n\n        ::slotted(*:first-child) {\n          margin-top: 0;\n        }\n\n        ::slotted(*:last-child) {\n          margin-bottom: 0;\n        }\n      "]);

    _templateObject2_6a820650545d11eba21e89082e94d7aa = function _templateObject2_6a820650545d11eba21e89082e94d7aa() {
      return data;
    };

    return data;
  }

  function _templateObject_6a820650545d11eba21e89082e94d7aa() {
    var data = babelHelpers.taggedTemplateLiteral([" <slot></slot>"]);

    _templateObject_6a820650545d11eba21e89082e94d7aa = function _templateObject_6a820650545d11eba21e89082e94d7aa() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor`
   * @element rich-text-editor
   * `a standalone rich text editor`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   * @demo ./demo/index.html demo
   * @demo ./demo/mini.html mini floating toolbar
   * @demo ./demo/full.html toolbar with breadcrumb
   * @demo ./demo/config.html custom configuration
   */
  var RichTextEditor = /*#__PURE__*/function (_RichTextEditorStyles) {
    babelHelpers.inherits(RichTextEditor, _RichTextEditorStyles);

    var _super = _createSuper(RichTextEditor);

    babelHelpers.createClass(RichTextEditor, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_6a820650545d11eba21e89082e94d7aa());
      } // haxProperty definition

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor), "styles", this)), [(0, _litElement.css)(_templateObject2_6a820650545d11eba21e89082e94d7aa())]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Rich text-editor",
            description: "a standalone rich text editor",
            icon: "icons:android",
            color: "green",
            groups: ["Text"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "nikkimk",
              owner: "Penn State University"
            }
          },
          settings: {
            configure: [{
              property: "title",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor), "properties", this)), {}, {
          /**
           * editor's unique id
           */
          id: {
            name: "id",
            type: String,
            reflect: true,
            attribute: "id"
          },

          /**
           * Maps to contenteditable attribute
           */
          contenteditable: {
            name: "contenteditable",
            type: Boolean,
            reflect: true,
            attribute: "contenteditable"
          },

          /**
           * Placeholder text for empty editable regions
           */
          placeholder: {
            name: "placeholder",
            type: String,
            reflect: true,
            attribute: "placeholder"
          },

          /**
           * id for toolbar
           */
          toolbar: {
            name: "toolbar",
            type: String,
            reflect: true,
            attribute: "toolbar"
          },

          /**
           * current range
           */
          range: {
            name: "range",
            type: Object,
            attribute: "range"
          },

          /**
           * type of editor toolbar, i.e.
           * full - full for full toolbar with breadcrumb,
           * mini - mini for mini floating toolbar, or
           * default toolbar if neither.
           */
          type: {
            name: "type",
            type: String,
            reflect: true,
            attribute: "type"
          },

          /**
           * whether to update range
           */
          updateRange: {
            type: Boolean
          },

          /**
           * contains cancelled edits
           */
          __canceledEdits: {
            type: Object
          },

          /**
           * connected toolbar
           */
          __connectedToolbar: {
            type: Object
          },

          /**
           * selection management
           */
          __selection: {
            type: Object
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor";
      }
    }]);

    function RichTextEditor() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditor);
      _this = _super.call(this);
      _this.haxUIElement = true;
      window.RichTextEditorStyleManager.requestAvailability();
      _this.placeholder = "Click to edit";
      _this.toolbar = "";
      _this.type = "rich-text-editor-toolbar";
      _this.id = "";
      _this.range = undefined;
      _this.__selection = window.RichTextEditorSelection.requestAvailability();
      document.addEventListener(shadow.eventName, _this._getRange.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(RichTextEditor, [{
      key: "_getRange",
      value: function _getRange() {
        var shadowRoot = function shadowRoot(el) {
          var parent = el.parentNode;
          return parent ? shadowRoot(parent) : el;
        };

        this.range = shadow.getRange(shadowRoot(this));
        this.updateRange();
      }
      /**
       * mutation observer
       *
       * @readonly
       * @memberof RichTextEditor
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor.prototype), "connectedCallback", this).call(this);
        this.register();
      }
      /**
       * life cycle, element is disconnected
       * @returns {void}
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor.prototype), "disconnectedCallback", this).call(this);
        this.register(true);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor.prototype), "firstUpdated", this).call(this);
        if (this.isEmpty()) this.innerHTML = "";

        this._editableChange();
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditor.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "contenteditable") _this2._editableChange();
          if (propName === "range") _this2._rangeChange();
        });
      }
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          activeElementChanged: "haxactiveElementChanged"
        };
      }
      /**
       * allow HAX to toggle edit state when activated
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        // overwrite the HAX dom w/ what our editor is supplying
        if (!val && el) {
          el.innerHTML = this.getValue();
        }

        return el;
      }
      /**
       * gets current value minus placeholder
       *
       * @returns {string}
       * @memberof RichTextEditor
       */

    }, {
      key: "getValue",
      value: function getValue() {
        return this.isEmpty || this.trimmerHTML(this) === "<p>".concat(editor.placeholder, "</p>") ? "" : this.innerHTML;
      }
      /**
       * determines if editor is empty
       *
       * @returns {string}
       * @memberof RichTextEditor
       */

    }, {
      key: "isEmpty",
      value: function isEmpty() {
        return !this.innerHTML || this.trimmerHTML(this) == "";
      }
      /**
       * allows editor to fit within a stick toolbar
       *
       * @param {boolean} sticky
       * @memberof RichTextEditor
       */

    }, {
      key: "makeSticky",
      value: function makeSticky() {
        var sticky = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (!sticky) {
          this.classList.add("heightmax");
        } else {
          this.classList.remove("heightmax");
        }
      }
      /**
       * set observer on or off
       *
       * @param {boolean} [on=true]
       * @memberof RichTextEditor
       */

    }, {
      key: "observeChanges",
      value: function observeChanges() {
        var on = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (on) {
          var _editor = this;

          this.observer.observe(_editor, {
            attributes: false,
            childList: true,
            subtree: true,
            characterData: false
          });
        } else {
          if (this.observer) this.observer.disconnect;
        }
      }
      /**
       *
       *
       * @memberof RichTextEditor
       */

    }, {
      key: "paste",
      value: function paste(pasteContent) {
        var sanitized = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        this._handlePaste(pasteContent);
      }
      /**
       * handles registration to selection singleton's toolbars list
       * @param {boolean} remove whether to remove
       * @event register
       */

    }, {
      key: "register",
      value: function register() {
        var remove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        window.dispatchEvent(new CustomEvent("register", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            remove: remove,
            editor: this
          }
        }));
      }
      /**
       * revert content to before contenteditable=true
       *
       * @memberof RichTextEditor
       */

    }, {
      key: "revert",
      value: function revert() {
        this.innerHTML = this.__canceledEdits;
      }
      /**
       * gets closet document oor shadowRoot
       *
       * @returns node
       * @memberof RichTextEditor
       */

    }, {
      key: "rootNode",
      value: function rootNode() {
        return !this.__selection ? document : this.__selection.getRoot(this);
      }
      /**
       * holds on to edits so cancel willwork
       *
       * @param {string} [html=this.innerHTML]
       * @memberof RichTextEditor
       */

    }, {
      key: "setCancelHTML",
      value: function setCancelHTML() {
        var html = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.innerHTML;
        this.__canceledEdits = html;
      }
      /**
       * gets trimmed version of innerHTML
       *
       * @param {obj} node
       * @returns string
       * @memberof RichTextEditor
       */

    }, {
      key: "trimmerHTML",
      value: function trimmerHTML(node) {
        return node.innerHTML.replace(/[\s\t\r\n]/gim, "");
      }
    }, {
      key: "updateRange",
      value: function updateRange(e) {
        this.dispatchEvent(new CustomEvent("getrange", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * updates editor placeholder and watches for range changes
       *
       * @memberof RichTextEditor
       */

    }, {
      key: "_editableChange",
      value: function _editableChange() {
        var placeholder = "<p>".concat(this.placeholder, "</p>");

        if (this.contenteditable) {
          this.setCancelHTML();
          if (this.isEmpty()) this.innerHTML = placeholder;
        } else {
          if (this.trimmerHTML(this) === placeholder) {
            this.setCancelHTML("");
          }
        }
      }
      /**
       * Handles paste.
       *
       * @param {event} e paste event
       * @returns {void}
       */

    }, {
      key: "_handlePaste",
      value: function _handlePaste(e) {
        var pasteContent = ""; // intercept paste event

        if (e && (e.clipboardData || e.originalEvent.clipboardData)) {
          pasteContent = (e.originalEvent || e).clipboardData.getData("text/html");
        } else if (window.clipboardData) {
          pasteContent = window.clipboardData.getData("Text");
        }

        this.dispatchEvent(new CustomEvent("pastefromclipboard", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
        e.preventDefault();
      }
    }, {
      key: "_rangeChange",
      value: function _rangeChange(e) {}
    }, {
      key: "observer",
      get: function get() {
        var root = this;
        return new MutationObserver(function (e) {
          return root._getRange(e);
        });
      }
    }]);
    return RichTextEditor;
  }((0, _richTextEditorStyles.RichTextEditorStyles)(_litElement.LitElement));

  _exports.RichTextEditor = RichTextEditor;
  window.customElements.define(RichTextEditor.tag, RichTextEditor);
});