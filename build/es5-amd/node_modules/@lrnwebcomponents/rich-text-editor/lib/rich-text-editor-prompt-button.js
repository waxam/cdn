define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/paper-tooltip/paper-tooltip.js","../../../@polymer/iron-icons/iron-icons.js","./rich-text-editor-button-styles.js","./rich-text-editor-button.js","./rich-text-editor-prompt.js","./rich-text-editor-selection.js"],function(_exports,_polymerElement,_paperTooltip,_ironIcons,_richTextEditorButtonStyles,_richTextEditorButton,_richTextEditorPrompt,_richTextEditorSelection){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.RichTextEditorPromptButton=void 0;/**
 * Copyright 2019 Penn State University
 * @license Apache-2.0, see License.md for full text.
 */ /**
 * `rich-text-editor-prompt-button`
 * `a button that prompts for more information for rich text editor (custom buttons can extend this)`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 */var RichTextEditorPromptButton=/*#__PURE__*/function(_RichTextEditorButton){babelHelpers.inherits(RichTextEditorPromptButton,_RichTextEditorButton);function RichTextEditorPromptButton(){babelHelpers.classCallCheck(this,RichTextEditorPromptButton);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(RichTextEditorPromptButton).apply(this,arguments))}babelHelpers.createClass(RichTextEditorPromptButton,[{key:"ready",/**
   * life cycle, element is ready
   */value:function ready(){babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorPromptButton.prototype),"ready",this).call(this);var root=this;this.__popover=window.richTextEditorPrompt.requestAvailability()}/**
   * Handles button tap;
   */},{key:"_buttonTap",value:function _buttonTap(e){e.preventDefault();this.selectText();this.__popover.setTarget(this)}/**
   * Handles selecting text and opening prompt
   * @param {boolean} whether or not the selection should be unwrapped from a tag
   */},{key:"deselectText",value:function deselectText(){var unwrap=0<arguments.length&&arguments[0]!==void 0?arguments[0]:!1;console.log("deselectText",this.__highlight,this.selection,this.selectedText,unwrap);if(this.__highlight)this.__highlight.deselect(this.selectedText,unwrap);this.__highlight=void 0;this.value={};this.selectedText=null;this.dispatchEvent(new CustomEvent("deselect",{detail:this}))}/**
   * updates prompt fields with selection data
   */},{key:"updatePrompt",value:function updatePrompt(){var _this=this;this.fields.forEach(function(field){if(field.property&&""!==field.property){_this.value[field.property]=_this.selectedText.getAttribute(field.property)}else if(field.property&&""!==field.property){_this.value[field.slot]=_this.selectedText.querySelector(field.slot)}else{_this.value[""]=_this.selectedText.innerHTML}})}/**
   * updates the insertion based on fields
   */},{key:"updateSelection",value:function updateSelection(){var _this2=this,hasVals=!1;this.selectedText.innerHTML="";this.fields.forEach(function(field){if(field.property&&""!==field.property){if(null!==_this2.value[field.property]&&""!==_this2.value[field.property].trim())hasVals=!0;_this2.selectedText.setAttribute(field.property,_this2.value[field.property].trim())}else if(field.slot&&""!==field.slot&&null!==_this2.value[field.slot]&&""!==_this2.value[field.slot].trim()){hasVals=!0;_this2.selectedText.innerHTML+="".concat(field.slot).concat(_this2.value[field.slot].trim()).concat(field.slot)}else{_this2.selectedText.innerHTML+="".concat(_this2.value[field.property])}});this.deselectText(!hasVals)}/**
   * Handles selecting text and opening prompt
   */},{key:"selectText",value:function selectText(){var sel=this.selection.commonAncestorContainer,parent=sel.tagName!==void 0&&sel.tagName.toLowerCase()===this.tag.toLowerCase()?sel:sel.parentNode;if(parent.tagName.toLowerCase()===this.tag.toLowerCase()){//if the selection is wrapped in this tag, no need to make a new one
this.selectedText=parent}else{//if not, wrap the selection in this tag
this.selectedText=document.createElement(this.tag.toLowerCase());this.selectedText.appendChild(this.selection.extractContents())}//highlight the selection for when prompt gets focus
this.__highlight=document.createElement("rich-text-editor-selection");this.__highlight.select(this.selection,this.selectedText);this.updatePrompt();//make sure there is a unique id so that the prompt popover appears near the selection
if(!this.selectedText.getAttribute("id"))this.selectedText.setAttribute("id","prompt"+Date.now());this.dispatchEvent(new CustomEvent("select",{detail:this}))}}],[{key:"properties",// properties available to the custom element for data binding
get:function get(){return{/**
       * fields for the prompt popover.
       */fields:{type:Array,value:[{property:"text",title:"Text",description:"The link text",inputMethod:"textfield"}]},/**
       * the selected text of the prompt
       */selectedText:{name:"selectedText",type:Object,value:null},/**
       * the tag that will wrap the selection
       */tag:{name:"tag",type:String,value:"span"},/**
       * The prefilled value of the prompt
       */value:{type:Object,value:{link:null}},/**
       * the rich-text-selection object that highlights the text
       */__highlight:{name:"__highlight",type:Object,value:null}}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"rich-text-editor-prompt-button"}}]);return RichTextEditorPromptButton}(_richTextEditorButton.RichTextEditorButton);_exports.RichTextEditorPromptButton=RichTextEditorPromptButton;window.customElements.define(RichTextEditorPromptButton.tag,RichTextEditorPromptButton)});