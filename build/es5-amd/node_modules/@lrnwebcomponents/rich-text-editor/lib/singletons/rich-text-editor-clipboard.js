define(["exports", "../../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorClipboard = void 0;

  var _templateObject_09c3a140feba11eb8439e3eec9305af7, _templateObject2_09c3a140feba11eb8439e3eec9305af7;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-clipboard`
   * `A textarea that holds clipboard.`
   *
   * @customElement
   * @lit-html
   * @lit-element
   * @element rich-text-editor-clipboard
   */
  var RichTextEditorClipboard = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(RichTextEditorClipboard, _LitElement);

    var _super = _createSuper(RichTextEditorClipboard);

    /**
     * Makes sure there is a utility ready and listening for elements.
     */
    function RichTextEditorClipboard() {
      babelHelpers.classCallCheck(this, RichTextEditorClipboard);
      return _super.call(this);
    }

    babelHelpers.createClass(RichTextEditorClipboard, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_09c3a140feba11eb8439e3eec9305af7 || (_templateObject_09c3a140feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["<textarea aria-hidden=\"true\"></textarea>"])));
      }
      /**
       * gets clipboard data and pastes into an editor's range
       *
       * @param {obj} editor
       * @memberof RichTextEditorSelection
       */

    }, {
      key: "setClipboard",
      value: function setClipboard() {
        var _this = this;

        this.__textarea = this.__textarea || this.shadowRoot.querySelector("textarea");
        setTimeout( /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return navigator.clipboard.readText();

                case 2:
                  _this.__textarea.value = _context.sent;

                  _this.__textarea.focus();

                  _this.__textarea.select();

                  document.execCommand("paste");

                case 6:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee);
        })), 1);
      }
    }, {
      key: "value",
      get: function get() {
        this.__textarea = this.__textarea || this.shadowRoot.querySelector("textarea");
        return this.__textarea.value;
      }
      /**
       * Store tag name to make it easier to obtain directly.
       */

    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject2_09c3a140feba11eb8439e3eec9305af7 || (_templateObject2_09c3a140feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none !important;\n        }\n        textarea {\n          position: absolute;\n          left: -9999px;\n          top: 0;\n          width: 0px;\n          height: 0px;\n          overflow: hidden;\n        }\n      "])))];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          __textarea: {
            type: Object
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-clipboard";
      }
    }]);
    return RichTextEditorClipboard;
  }(_index.LitElement);

  _exports.RichTextEditorClipboard = RichTextEditorClipboard;
  window.customElements.define(RichTextEditorClipboard.tag, RichTextEditorClipboard);
  // register globally so we can make sure there is only one
  window.RichTextEditorClipboard = window.RichTextEditorClipboard || {}; // request if this exists. This helps invoke element existing in dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through same modal

  window.RichTextEditorClipboard.requestAvailability = function () {
    if (!window.RichTextEditorClipboard.instance) {
      window.RichTextEditorClipboard.instance = document.createElement("rich-text-editor-clipboard");
      document.body.appendChild(window.RichTextEditorClipboard.instance);
    }

    return window.RichTextEditorClipboard.instance;
  };
});