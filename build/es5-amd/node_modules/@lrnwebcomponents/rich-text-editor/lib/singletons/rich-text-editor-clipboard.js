define(["exports", "../../../../@polymer/polymer/polymer-element.js"], function (_exports, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorClipboard = void 0;

  function _templateObject_753b63a0add011e983121daa910d1ce6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: none !important;\n        }\n      </style>\n      <textarea id=\"clipboard\" aria-hidden=\"true\"></textarea>\n    "]);

    _templateObject_753b63a0add011e983121daa910d1ce6 = function _templateObject_753b63a0add011e983121daa910d1ce6() {
      return data;
    };

    return data;
  }

  /**
   * `rich-text-editor-clipboard`
   * `a heading picker for the rich-text-editor`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   */
  var RichTextEditorClipboard =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(RichTextEditorClipboard, _PolymerElement);

    function RichTextEditorClipboard() {
      babelHelpers.classCallCheck(this, RichTextEditorClipboard);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RichTextEditorClipboard).apply(this, arguments));
    }

    babelHelpers.createClass(RichTextEditorClipboard, [{
      key: "ready",

      /**
       * component is ready
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorClipboard.prototype), "ready", this).call(this);
        var root = this;
        window.addEventListener("cut", root.handleCut.bind(root));
        window.addEventListener("copy", root.handleCopy.bind(root));
        window.addEventListener("paste", root.handlePaste.bind(root));
        window.addEventListener("cut-button", root.handleCopyButton.bind(root));
        window.addEventListener("copy-button", root.handleCopyButton.bind(root));
        window.addEventListener("paste-button", root.handlePasteButton.bind(root));
      }
    }, {
      key: "handleCut",
      value: function handleCut(e) {
        e.preventDefault();
        this.copyToClipboard(this.getRange(), true);
      }
    }, {
      key: "handleCopy",
      value: function handleCopy(e) {
        e.preventDefault();
        this.copyToClipboard(this.getRange());
      }
    }, {
      key: "handlePaste",
      value: function handlePaste(e) {
        e.preventDefault();
        this.pasteToClipboard(this.getRange());
      }
    }, {
      key: "handleCutButton",
      value: function handleCutButton(e) {
        this.copyToClipboard(e.detail.range, true);
      }
    }, {
      key: "handleCopyButton",
      value: function handleCopyButton(e) {
        this.copyToClipboard(e.detail.range);
      }
    }, {
      key: "handlePasteButton",
      value: function handlePasteButton(e) {
        this.pasteToClipboard(e.detail.range);
      }
    }, {
      key: "copyToClipboard",
      value: function copyToClipboard(range) {
        var cut = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        this.$.clipboard.innerHTML = "";
        if (range) this.$.clipboard.appendChild(range.cloneContents());
        if (cut && range.extractContents) range.extractContents();
      }
    }, {
      key: "pasteToClipboard",
      value: function pasteToClipboard(range) {
        var div = document.createElement("div"),
            parent = range.commonAncestorContainer.parentNode,
            closest = parent.closest("[contenteditable=true]:not([disabled]),input:not([disabled]),textarea:not([disabled])");

        if (closest) {
          div.innerHTML = this.$.clipboard.innerHTML;

          if (range && range.extractContents) {
            range.extractContents();
            range.insertNode(div);

            while (div.firstChild) {
              div.parentNode.insertBefore(div.firstChild, div);
            }

            div.parentNode.removeChild(div);
          }
        }
      }
      /**
       * Normalizes selected range data.
       * @returns {object} the selected range
       */

    }, {
      key: "getRange",
      value: function getRange() {
        var sel = window.getSelection();

        if (sel.getRangeAt && sel.rangeCount) {
          return sel.getRangeAt(0);
        } else if (sel) {
          return sel;
        } else false;
      }
    }], [{
      key: "properties",
      // properties available to the custom element for data binding
      get: function get() {
        return {};
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_753b63a0add011e983121daa910d1ce6());
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-clipboard";
      }
    }]);
    return RichTextEditorClipboard;
  }(_polymerElement.PolymerElement);

  _exports.RichTextEditorClipboard = RichTextEditorClipboard;
  window.customElements.define(RichTextEditorClipboard.tag, RichTextEditorClipboard);
  window.RichTextEditorClipboard = {};
  window.RichTextEditorClipboard.instance = null;
  /**
   * Checks to see if there is an instance available, and if not appends one
   */

  window.RichTextEditorClipboard.requestAvailability = function () {
    if (window.RichTextEditorClipboard.instance == null) {
      window.RichTextEditorClipboard.instance = document.createElement("rich-text-editor-clipboard");
      document.body.appendChild(window.RichTextEditorClipboard.instance);
    }

    return window.RichTextEditorClipboard.instance;
  };
});