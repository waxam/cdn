define(["exports", "../../../../lit-element/lit-element.js", "../rich-text-editor-styles.js", "../buttons/rich-text-editor-button-styles.js", "../../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "../../../simple-popover/simple-popover.js", "../../../simple-fields/simple-fields.js"], function (_exports, _litElement, _richTextEditorStyles, _richTextEditorButtonStyles, _ironA11yKeys, _simplePopover, _simpleFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorPrompt = void 0;

  function _templateObject2_4f840f00019d11eb9027c17497ee62cd() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          --paper-input-container-focus-color: var(\n            --rich-text-editor-focus-color,\n            #000\n          );\n          --paper-input-container-invalid-color: var(\n            --rich-text-editor-error-color,\n            #800\n          );\n        }\n        #prompt {\n          display: block;\n          width: 300px;\n          max-width: 300px;\n          --simple-popover-padding: 0px;\n          z-index: 2;\n        }\n        #prompt[hidden] {\n          display: none;\n        }\n        #prompt #form {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: space-between;\n          z-index: 2;\n        }\n        #formfields {\n          width: calc(100% - 20px);\n          padding: 10px 10px 0;\n          overflow: visible;\n        }\n        #prompt paper-input {\n          padding: 0;\n        }\n        #confirm,\n        #cancel {\n          min-width: unset;\n        }\n        #cancel {\n          color: var(--rich-text-editor-button-color);\n          background-color: var(--rich-text-editor-button-bg);\n        }\n        #cancel:focus,\n        #cancel:hover {\n          color: var(--rich-text-editor-button-hover-color);\n          background-color: var(--rich-text-editor-button-hover-bg);\n        }\n        #confirm {\n          color: var(--rich-text-editor-button-color);\n          background-color: var(--rich-text-editor-button-bg);\n        }\n        #confirm:focus,\n        #confirm:hover {\n          color: var(--rich-text-editor-button-hover-color);\n          background-color: var(--rich-text-editor-button-hover-bg);\n        }\n        .actions {\n          width: 100%;\n          padding-bottom: 3px;\n          display: flex;\n          align-items: center;\n          justify-content: flex-end;\n        }\n        .confirm-or-cancel {\n          min-width: 40px;\n        }\n      "]);

    _templateObject2_4f840f00019d11eb9027c17497ee62cd = function _templateObject2_4f840f00019d11eb9027c17497ee62cd() {
      return data;
    };

    return data;
  }

  function _templateObject_4f840f00019d11eb9027c17497ee62cd() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-popover id=\"prompt\" auto for=\"", "\" ?hidden=\"", "\">\n        <form id=\"form\">\n          <simple-fields\n            id=\"formfields\"\n            autofocus\n            hide-line-numbers\n            .fields=\"", "\"\n            .value=\"", "\"\n          ></simple-fields>\n          <div class=\"actions\">\n            <paper-button\n              id=\"cancel\"\n              class=\"rtebutton\"\n              controls=\"", "\"\n              @click=\"", "\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden=\"true\" icon=\"clear\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">Cancel</span>\n            </paper-button>\n            <simple-tooltip id=\"tooltip\" for=\"cancel\">Cancel</simple-tooltip>\n            <paper-button\n              id=\"confirm\"\n              class=\"rtebutton\"\n              controls=\"", "\"\n              @click=\"", "\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden=\"true\" icon=\"check\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">OK</span>\n            </paper-button>\n            <simple-tooltip id=\"tooltip\" for=\"confirm\">OK</simple-tooltip>\n          </div>\n        </form>\n      </simple-popover>\n    "]);

    _templateObject_4f840f00019d11eb9027c17497ee62cd = function _templateObject_4f840f00019d11eb9027c17497ee62cd() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-prompt`
   * `A utility that manages the state of multiple rich-text-prompts on one page.`
   *
   * @element rich-text-editor-prompt
   */
  var RichTextEditorPrompt = /*#__PURE__*/function (_RichTextEditorButton) {
    babelHelpers.inherits(RichTextEditorPrompt, _RichTextEditorButton);

    var _super = _createSuper(RichTextEditorPrompt);

    babelHelpers.createClass(RichTextEditorPrompt, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_4f840f00019d11eb9027c17497ee62cd(), this.for, !this.for, this.fields, this.value, this.for, this._cancel, this.for, this._confirm);
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorPrompt), "styles", this)), [(0, _litElement.css)(_templateObject2_4f840f00019d11eb9027c17497ee62cd())]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-prompt";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Is the  target id.
           */
          for: {
            type: String
          },

          /**
           * The selected text.
           */
          range: {
            type: Object
          },

          /**
           * fields for the prompt popover.
           */
          fields: {
            type: Array
          },

          /**
           * The prefilled value of the prompt
           */
          value: {
            type: Object
          },

          /**
           * The prefilled value of the prompt
           */
          __button: {
            type: Object
          }
        };
      }
      /**
       * Makes sure there is a utility ready and listening for elements.
       */

    }]);

    function RichTextEditorPrompt() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorPrompt);
      _this = _super.call(this); // sets the instance to the current instance

      if (!window.RichTextEditorPrompt.instance) {
        window.RichTextEditorPrompt.instance = babelHelpers.assertThisInitialized(_this);
        return babelHelpers.possibleConstructorReturn(_this, babelHelpers.assertThisInitialized(_this));
      }

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     * Makes sure there is a utility ready and listening for elements.
     */


    babelHelpers.createClass(RichTextEditorPrompt, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorPrompt.prototype), "connectedCallback", this).call(this);
      }
      /**
       * Associates a button and its selection data with the prompt
       * @param {object} button the button to associate with the prompt
       * @returns {void}
       */

    }, {
      key: "setTarget",
      value: function setTarget(button) {
        this.clearTarget();
        this.fields = button.__promptFields;
        this.value = button.value;
        this.__button = button;
        if (button.__selection) this.for = button.__selection.getAttribute("id");
      }
      /**
       * Disassociates the button and selection data from the prompt
       * @returns {void}
       */

    }, {
      key: "clearTarget",
      value: function clearTarget() {
        if (!this.__button) return;
        this.for = undefined;
        this.fields = undefined;
        this.value = undefined;
        this.__button = undefined;
      }
      /**
       * Handles cancel button
       * @param {event} e the event
       * @returns {void}
       */

    }, {
      key: "_cancel",
      value: function _cancel(e) {
        e.preventDefault();
        if (!this.__button) return;

        this.__button.cancel();

        this.clearTarget();
      }
      /**
       * Handles the confirm button
       * @param {event} e the event
       * @returns {void}
       */

    }, {
      key: "_confirm",
      value: function _confirm(e) {
        e.preventDefault();
        this.__button.value = this.value;

        this.__button.confirm();

        this.clearTarget();
      }
      /**
       * gets a field value (and trims it if it's a string)
       *
       * @param {string} prop field name
       * @returns {*}
       * @memberof RichTextEditorPrompt
       */

    }, {
      key: "getPromptValue",
      value: function getPromptValue(prop) {
        var val = !!this.value ? this.value : false,
            rawVal = !val || !val[prop] ? false : val[prop].trim ? val[prop].trim() : val[prop];
        return rawVal && rawVal !== "" ? rawVal : false;
      }
    }]);
    return RichTextEditorPrompt;
  }((0, _richTextEditorButtonStyles.RichTextEditorButtonStyles)((0, _richTextEditorStyles.RichTextEditorStyles)(_litElement.LitElement)));

  _exports.RichTextEditorPrompt = RichTextEditorPrompt;
  window.customElements.define(RichTextEditorPrompt.tag, RichTextEditorPrompt);
  // register globally so we can make sure there is only one
  window.RichTextEditorPrompt = window.RichTextEditorPrompt || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.RichTextEditorPrompt.requestAvailability = function () {
    if (!window.RichTextEditorPrompt.instance) {
      window.RichTextEditorPrompt.instance = document.createElement("rich-text-editor-prompt");
      document.body.appendChild(window.RichTextEditorPrompt.instance);
    }

    return window.RichTextEditorPrompt.instance;
  };
});