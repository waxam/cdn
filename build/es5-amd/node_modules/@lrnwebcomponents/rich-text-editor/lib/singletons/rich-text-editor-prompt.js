define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "../../../simple-popover/simple-popover.js", "../../../simple-fields/simple-fields.js", "../buttons/rich-text-editor-button-styles.js"], function (_exports, _polymerElement, _ironA11yKeys, _simplePopover, _simpleFields, _richTextEditorButtonStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorPrompt = void 0;

  function _templateObject_96965990c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"rich-text-editor-styles rich-text-editor-button-styles\">\n        :host {\n          --paper-input-container-focus-color: var(\n            --rich-text-editor-focus-color,\n            #000\n          );\n          --paper-input-container-invalid-color: var(\n            --rich-text-editor-error-color,\n            #800\n          );\n        }\n        :host #prompt {\n          display: none;\n          width: 300px;\n          max-width: 300px;\n          --simple-popover-padding: 0px;\n        }\n        :host #prompt[for]{\n          display: block;\n          z-index: 2;\n        }\n        :host #prompt[for] #form {\n          display: flex;\n          flex-direction: column;\n          align-items: center;\n          justify-content: space-between;\n          z-index: 2;\n        }\n        :host #formfields {\n          width: calc(100% - 20px);\n          padding: 10px 10px 0;\n        }\n        :host #prompt paper-input {\n          padding: 0;\n        }\n        :host #confirm, \n        :host #cancel {\n          min-width: unset;\n        }\n        :host #formfields {\n          overflow: visible;\n        }\n        :host #cancel {\n          color: var(--rich-text-editor-button-color);\n          background-color: var(--rich-text-editor-button-bg);\n\n        }\n        :host #cancel:focus,\n        :host #cancel:hover {\n          color: var(--rich-text-editor-button-hover-color);\n          background-color: var(--rich-text-editor-button-hover-bg);\n        }\n        :host #confirm {\n          color: var(--rich-text-editor-button-color);\n          background-color: var(--rich-text-editor-button-bg);\n\n        }\n        :host #confirm:focus,\n        :host #confirm:hover {\n          color: var(--rich-text-editor-button-hover-color);\n          background-color: var(--rich-text-editor-button-hover-bg);\n        }\n        :host .actions {\n          width: 100%;\n          padding-bottom: 3px;\n          display: flex;\n          align-items: center;\n          justify-content: flex-end;\n        }\n        :host .confirm-or-cancel {\n          min-width: 40px;\n        }\n      </style>\n      <simple-popover\n        id=\"prompt\"\n        auto\n        for$=\"[[for]]\"\n      >\n        <form id=\"form\">\n          <simple-fields\n            id=\"formfields\"\n            autofocus\n            hide-line-numbers\n            fields=\"[[fields]]\"\n            value=\"{{value}}\"\n          ></simple-fields>\n          <div class=\"actions\">\n            </iron-a11y-keys>\n            <paper-button\n              id=\"cancel\"\n              class=\"rtebutton\"\n              controls$=\"[[for]]\"\n              on-click=\"_cancel\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden icon=\"clear\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">Cancel</span>\n            </paper-button>\n            <simple-tooltip id=\"tooltip\" for=\"cancel\">Cancel</simple-tooltip>\n            <paper-button\n              id=\"confirm\"\n              class=\"rtebutton\"\n              controls$=\"[[for]]\"\n              on-click=\"_confirm\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden icon=\"check\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">OK</span>\n            </paper-button>\n            <simple-tooltip id=\"tooltip\" for=\"confirm\">OK</simple-tooltip>\n          </div>\n          <iron-a11y-keys\n            id=\"a11ycancel\"\n            target=\"[[__a11ycancel]]\"\n            keys=\"enter space\"\n            on-keys-pressed=\"_cancel\"\n          >\n          <iron-a11y-keys\n            id=\"a11yconfirm\"\n            target=\"[[__a11yconfirm]]\"\n            keys=\"enter space\"\n            on-keys-pressed=\"_confirm\"\n          >\n          </iron-a11y-keys>\n        </form>\n      </simple-popover>\n    "]);

    _templateObject_96965990c96f11ea8be5e1d5fe7ec787 = function _templateObject_96965990c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `rich-text-editor-prompt`
   * `A utility that manages the state of multiple rich-text-prompts on one page.`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   */
  var RichTextEditorPrompt =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(RichTextEditorPrompt, _PolymerElement);
    babelHelpers.createClass(RichTextEditorPrompt, null, [{
      key: "template",

      /* REQUIRED FOR TOOLING DO NOT TOUCH */
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_96965990c96f11ea8be5e1d5fe7ec787());
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-prompt";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Is the  target id.
           */
          for: {
            type: String
          },

          /**
           * The selected text.
           */
          range: {
            type: Object,
            value: null
          },

          /**
           * fields for the prompt popover.
           */
          fields: {
            type: Array,
            value: null
          },

          /**
           * The prefilled value of the prompt
           */
          value: {
            type: Object,
            value: null
          },

          /**
           * The prefilled value of the prompt
           */
          __button: {
            type: Object,
            value: null
          }
        };
      }
      /**
       * Makes sure there is a utility ready and listening for elements.
       */

    }]);

    function RichTextEditorPrompt() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorPrompt);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RichTextEditorPrompt).call(this));
      var root = babelHelpers.assertThisInitialized(_this); // sets the instance to the current instance

      if (!window.RichTextEditorPrompt.instance) {
        window.RichTextEditorPrompt.instance = babelHelpers.assertThisInitialized(_this);
        return babelHelpers.possibleConstructorReturn(_this, babelHelpers.assertThisInitialized(_this));
      }

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     * Makes sure there is a utility ready and listening for elements.
     */


    babelHelpers.createClass(RichTextEditorPrompt, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorPrompt.prototype), "connectedCallback", this).call(this);
        this.__a11yconfirm = this.shadowRoot.querySelector("#confirm");
        this.__a11ycancel = this.shadowRoot.querySelector("#cancel");
        /*
        TODO blur  doesnt work with select dropdowns
         this.addEventListener("blur", e => {
          console.log("blur", document.activeElement);
          this._cancel(e);
        });*/
      }
      /**
       * Associates a button and its selection data with the prompt
       * @param {object} button the button to associate with the prompt
       * @returns {void}
       */

    }, {
      key: "setTarget",
      value: function setTarget(button) {
        this.clearTarget();
        this.set("fields", button.__fields);
        this.set("value", button.value);
        this.__button = button;
        if (button.__selection) this.for = button.__selection.getAttribute("id");
      }
      /**
       * Disassociates the button and selection data from the prompt
       * @returns {void}
       */

    }, {
      key: "clearTarget",
      value: function clearTarget() {
        if (!this.__button) return;
        this.for = null;
        this.set("fields", null);
        this.set("value", null);
        this.__button = null;
      }
      /**
       * Handles cancel button
       * @param {event} e the event
       * @returns {void}
       */

    }, {
      key: "_cancel",
      value: function _cancel(e) {
        e.preventDefault();
        if (!this.__button) return;

        this.__button.cancel();

        this.clearTarget();
      }
      /**
       * Handles the confirm button
       * @param {event} e the event
       * @returns {void}
       */

    }, {
      key: "_confirm",
      value: function _confirm(e) {
        e.preventDefault();
        this.__button.value = this.value;

        this.__button.confirm();

        this.clearTarget();
      }
    }]);
    return RichTextEditorPrompt;
  }(_polymerElement.PolymerElement);

  _exports.RichTextEditorPrompt = RichTextEditorPrompt;
  window.customElements.define(RichTextEditorPrompt.tag, RichTextEditorPrompt);
  // register globally so we can make sure there is only one
  window.RichTextEditorPrompt = window.RichTextEditorPrompt || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.RichTextEditorPrompt.requestAvailability = function () {
    if (!window.RichTextEditorPrompt.instance) {
      window.RichTextEditorPrompt.instance = document.createElement("rich-text-editor-prompt");
      document.body.appendChild(window.RichTextEditorPrompt.instance);
    }

    return window.RichTextEditorPrompt.instance;
  };
});