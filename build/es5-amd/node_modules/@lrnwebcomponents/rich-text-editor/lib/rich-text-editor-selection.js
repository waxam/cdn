define(["exports","../../../@polymer/polymer/polymer-element.js","./rich-text-editor-styles.js"],function(_exports,_polymerElement,_richTextEditorStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.RichTextEditorSelection=void 0;function _templateObject_ec7756e075c211e99fd5555145028221(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style include=\"rich-text-editor-styles\">\n        :host {\n          background-color: var(--rich-text-editor-selection-bg);\n          @apply --rich-text-editor-content-selection;\n        }\n      </style>\n      <slot></slot>\n    "]);_templateObject_ec7756e075c211e99fd5555145028221=function _templateObject_ec7756e075c211e99fd5555145028221(){return data};return data}/**
 * `rich-text-editor-selection`
 * `a button for rich text editor (custom buttons can extend this)`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 */var RichTextEditorSelection=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(RichTextEditorSelection,_PolymerElement);function RichTextEditorSelection(){babelHelpers.classCallCheck(this,RichTextEditorSelection);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(RichTextEditorSelection).apply(this,arguments))}babelHelpers.createClass(RichTextEditorSelection,[{key:"connectedCallback",/**
   * life cycle, element is afixed to the DOM
   */value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSelection.prototype),"connectedCallback",this).call(this)}/**
   * removes the selection
   * @param {object} selection object
   * @param {object} contents of the selection object
   * @param {boolean} remove tag wrapping the content
   */},{key:"deselect",value:function deselect(contents){var unwrap=1<arguments.length&&arguments[1]!==void 0?arguments[1]:!1;while(unwrap&&contents.firstChild){this.insertBefore(contents.firstChild,contents);this.removeChild(contents)}this.parentNode.insertBefore(this.firstChild,this);this.parentNode.removeChild(this)}/**
   * removes the selection
   * @param {object} selection object
   * @param {object} contents of the selection object
   */},{key:"select",value:function select(selection,contents){this.appendChild(contents);selection.insertNode(this)}}],[{key:"template",// render function
get:function get(){return(0,_polymerElement.html)(_templateObject_ec7756e075c211e99fd5555145028221())}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return{}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"rich-text-editor-selection"}}]);return RichTextEditorSelection}(_polymerElement.PolymerElement);_exports.RichTextEditorSelection=RichTextEditorSelection;window.customElements.define(RichTextEditorSelection.tag,RichTextEditorSelection)});