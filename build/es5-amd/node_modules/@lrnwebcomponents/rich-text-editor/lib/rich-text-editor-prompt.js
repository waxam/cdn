define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/iron-resizable-behavior/iron-resizable-behavior.js","../../simple-popover/simple-popover.js","../../simple-fields/simple-fields.js","./rich-text-editor-styles.js"],function(_exports,_polymerElement,_ironResizableBehavior,_simplePopover,_simpleFields,_richTextEditorStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0/* transition */ /* transition */});_exports.richTextEditorPrompt=void 0;function _templateObject_d993509068f411e996b0af119cd7f5ea(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style include=\"rich-text-editor-styles\">\n        :host {\n          --simple-popover-padding: 0 10px;\n          --paper-input-container-focus-color: var(\n            --rich-text-editor-focus-color,\n            #000\n          );\n          --paper-input-container-invalid-color: var(\n            --rich-text-editor-error-color,\n            #800\n          );\n        }\n        :host .actions {\n          text-align: right;\n        }\n        :host #cancel.rtebutton:focus,\n        :host #cancel.rtebutton:hover {\n          color: var(\n            --rich-text-editor-cancel-color,\n            var(--rich-text-editor-error-color)\n          );\n          background-color: var(\n            --rich-text-editor-cancel-hover-color,\n            var(--rich-text-editor-button-hover-bg)\n          );\n        }\n        :host #confirm.rtebutton:focus,\n        :host #confirm.rtebutton:hover {\n          color: var(\n            --rich-text-editor-confirm-color,\n            var(--rich-text-editor-focus-color)\n          );\n          background-color: var(\n            --rich-text-editor-confirm-hover-color,\n            var(--rich-text-editor-button-hover-bg)\n          );\n        }\n      </style>\n      <simple-popover id=\"prompt\" hidden$=\"[[!target]]\" for$=\"[[for]]\" auto>\n        <form id=\"form\">\n          <simple-fields\n            id=\"formfields\"\n            fields=\"[[fields]]\"\n            value=\"{{value}}\"\n          ></simple-fields>\n          <div class=\"actions\">\n            <iron-a11y-keys\n              id=\"a11ycancel\"\n              target=\"[[__a11ycancel]]\"\n              keys=\"enter\"\n              on-keys-pressed=\"_cancel\"\n            >\n            </iron-a11y-keys>\n            <paper-button\n              id=\"cancel\"\n              class=\"rtebutton\"\n              controls=\"[[__targetId]]\"\n              on-tap=\"_cancel\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden icon=\"clear\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">Cancel</span>\n            </paper-button>\n            <paper-tooltip id=\"tooltip\" for=\"cancel\">Cancel</paper-tooltip>\n            <iron-a11y-keys\n              id=\"a11yconfirm\"\n              target=\"[[__a11yconfirm]]\"\n              keys=\"enter\"\n              on-keys-pressed=\"_confirm\"\n            >\n            </iron-a11y-keys>\n            <paper-button\n              id=\"confirm\"\n              class=\"rtebutton\"\n              controls=\"[[__targetId]]\"\n              on-tap=\"_confirm\"\n              tabindex=\"0\"\n            >\n              <iron-icon id=\"icon\" aria-hidden icon=\"check\"> </iron-icon>\n              <span id=\"label\" class=\"offscreen\">OK</span>\n            </paper-button>\n            <paper-tooltip id=\"tooltip\" for=\"confirm\">OK</paper-tooltip>\n          </div>\n        </form>\n      </simple-popover>\n    "]);_templateObject_d993509068f411e996b0af119cd7f5ea=function _templateObject_d993509068f411e996b0af119cd7f5ea(){return data};return data}// register globally so we can make sure there is only one
window.richTextEditorPrompt=window.richTextEditorPrompt||{};// request if this exists. This helps invoke the element existing in the dom
// as well as that there is only one of them. That way we can ensure everything
// is rendered through the same modal
window.richTextEditorPrompt.requestAvailability=function(){if(!window.richTextEditorPrompt.instance){window.richTextEditorPrompt.instance=document.createElement("rich-text-editor-prompt");document.body.appendChild(window.richTextEditorPrompt.instance)}return window.richTextEditorPrompt.instance};/**
 * `rich-text-editor-prompt`
 * `A utility that manages the state of multiple rich-text-prompts on one page.`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 */var richTextEditorPrompt=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(richTextEditorPrompt,_PolymerElement);babelHelpers.createClass(richTextEditorPrompt,null,[{key:"template",/* REQUIRED FOR TOOLING DO NOT TOUCH */ // render function
get:function get(){return(0,_polymerElement.html)(_templateObject_d993509068f411e996b0af119cd7f5ea())}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"rich-text-editor-prompt"}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return{/**
       * Is the  target id.
       */for:{type:String,value:null},/**
       * The selected text.
       */selection:{type:Object,value:null},/**
       * Is the  target selection for the prompt.
       */target:{type:Object,value:null},/**
       * fields for the prompt popover.
       */fields:{type:Array,value:null},/**
       * The prefilled value of the prompt
       */value:{type:Object,value:null,observer:"_valueChanged"}}}/**
   * Makes sure there is a utility ready and listening for elements.
   */}]);function richTextEditorPrompt(){var _this;babelHelpers.classCallCheck(this,richTextEditorPrompt);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(richTextEditorPrompt).call(this));var root=babelHelpers.assertThisInitialized(babelHelpers.assertThisInitialized(_this));// sets the instance to the current instance
if(!window.richTextEditorPrompt.instance){window.richTextEditorPrompt.instance=babelHelpers.assertThisInitialized(babelHelpers.assertThisInitialized(_this));return babelHelpers.possibleConstructorReturn(_this,babelHelpers.assertThisInitialized(babelHelpers.assertThisInitialized(_this)))}return _this}/**
   * life cycle, element is afixed to the DOM
   * Makes sure there is a utility ready and listening for elements.
   */babelHelpers.createClass(richTextEditorPrompt,[{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(richTextEditorPrompt.prototype),"connectedCallback",this).call(this);this.__a11yconfirm=this.$.confirm;this.__a11ycancel=this.$.cancel}},{key:"_valueChanged",value:function _valueChanged(){console.log("_valueChanged")}/**
   * Loads element into array
   */},{key:"setTarget",value:function setTarget(el){this.clearTarget();var fields=el.fields,vals=el.value;this.target=el.target;this.set("fields",fields);this.set("value",vals);this.__el=el;this.for=el.target.getAttribute("id")}/**
   * Unloads element from array
   */},{key:"clearTarget",value:function clearTarget(){console.log("clearTarget",this.for);if(!this.for)return;this.for=null;this.target=null;this.set("fields",null);this.set("value",null);this.__selection=null;this.__el=null}/**
   * Handles button tap;
   */},{key:"_cancel",value:function _cancel(e){e.preventDefault();this.clearTarget()}/**
   * Handles button tap;
   */},{key:"_confirm",value:function _confirm(e){e.preventDefault();this.__el.value=this.value;this.__el.doTextOperation();this.clearTarget()}}]);return richTextEditorPrompt}(_polymerElement.PolymerElement);_exports.richTextEditorPrompt=richTextEditorPrompt;window.customElements.define(richTextEditorPrompt.tag,richTextEditorPrompt)});