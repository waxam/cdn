define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/iron-resizable-behavior/iron-resizable-behavior.js","../../simple-popover/simple-popover.js","../../eco-json-schema-form/eco-json-schema-form.js","../../eco-json-schema-form/lib/eco-json-schema-object.js"],function(_exports,_polymerElement,_ironResizableBehavior,_simplePopover,_ecoJsonSchemaForm,_ecoJsonSchemaObject){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0/* transition */ /* transition */});_exports.RichTextPromptStateManager=void 0;function _templateObject_f5459b20620c11e99c573b9129e18660(){var data=babelHelpers.taggedTemplateLiteral(["\n      <simple-popover id=\"prompt\" hidden$=\"[[!target]]\" for$=\"[[for]]\" auto>\n        <eco-json-schema-object\n          id=\"schemaObj\"\n          schema=\"[[schema]]\"\n          value=\"{{value}}\"\n        ></eco-json-schema-object>\n        I'm a popover!\n      </simple-popover>\n    "]);_templateObject_f5459b20620c11e99c573b9129e18660=function _templateObject_f5459b20620c11e99c573b9129e18660(){return data};return data}// register globally so we can make sure there is only one
window.RichTextPromptStateManager=window.RichTextPromptStateManager||{};// request if this exists. This helps invoke the element existing in the dom
// as well as that there is only one of them. That way we can ensure everything
// is rendered through the same modal
window.RichTextPromptStateManager.requestAvailability=function(){if(!window.RichTextPromptStateManager.instance){window.RichTextPromptStateManager.instance=document.createElement("rich-text-prompt-state-manager");document.body.appendChild(window.RichTextPromptStateManager.instance)}return window.RichTextPromptStateManager.instance};/**
 * `rich-text-prompt-state-manager`
 * `A utility that manages the state of multiple rich-text-prompts on one page.`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 */var RichTextPromptStateManager=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(RichTextPromptStateManager,_PolymerElement);babelHelpers.createClass(RichTextPromptStateManager,null,[{key:"template",/* REQUIRED FOR TOOLING DO NOT TOUCH */ // render function
get:function get(){return(0,_polymerElement.html)(_templateObject_f5459b20620c11e99c573b9129e18660())}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"rich-text-prompt-state-manager"}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return{/**
       * Is the  target id.
       */for:{type:String,value:null},/**
       * The selected text.
       */selection:{type:Object,value:null},/**
       * Is the  target selection for the prompt.
       */target:{type:Object,value:null},/**
       * Eco-json-schema of the prompt.
       */schema:{type:Object,value:{$schema:"http://json-schema.org/schema#",title:"Link",type:"object",properties:{href:{title:"Href",type:"String",value:null},target:{title:"Href",type:"String",value:null}}}}}}/**
   * Makes sure there is a utility ready and listening for elements.
   */}]);function RichTextPromptStateManager(){var _this;babelHelpers.classCallCheck(this,RichTextPromptStateManager);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(RichTextPromptStateManager).call(this));var root=babelHelpers.assertThisInitialized(babelHelpers.assertThisInitialized(_this));// sets the instance to the current instance
if(!window.RichTextPromptStateManager.instance){window.RichTextPromptStateManager.instance=babelHelpers.assertThisInitialized(babelHelpers.assertThisInitialized(_this));return babelHelpers.possibleConstructorReturn(_this,babelHelpers.assertThisInitialized(babelHelpers.assertThisInitialized(_this)))}return _this}/**
   * life cycle, element is afixed to the DOM
   * Makes sure there is a utility ready and listening for elements.
   */babelHelpers.createClass(RichTextPromptStateManager,[{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(RichTextPromptStateManager.prototype),"connectedCallback",this).call(this)}/**
   * Loads element into array
   */},{key:"setTarget",value:function setTarget(el){var sel=el.selection,id="prompt"+Date.now();this.clearTarget();this.target=document.createElement("span");this.target.setAttribute("id",id);this.target.appendChild(sel.extractContents());el.selection.insertNode(this.target);this.for=id}/**
   * Unloads element from array
   */},{key:"clearTarget",value:function clearTarget(){if(!this.target)return;this.for=null;var parent=this.target.parentNode;parent.insertBefore(this.target.firstChild,this.target);parent.removeChild(this.target);this.target=null}}]);return RichTextPromptStateManager}(_polymerElement.PolymerElement);_exports.RichTextPromptStateManager=RichTextPromptStateManager;window.customElements.define(RichTextPromptStateManager.tag,RichTextPromptStateManager)});