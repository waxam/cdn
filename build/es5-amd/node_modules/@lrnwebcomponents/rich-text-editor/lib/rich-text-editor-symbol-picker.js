define(["exports","meta","../../../@polymer/polymer/polymer-element.js","./rich-text-editor-picker.js","../../es-global-bridge/es-global-bridge.js","../../../@polymer/polymer/lib/utils/resolve-url.js","../../../@polymer/iron-icons/editor-icons.js"],function(_exports,meta,_polymerElement,_richTextEditorPicker,_esGlobalBridge,_resolveUrl,_editorIcons){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0/* transition */ /* transition */});_exports.RichTextEditorSymbolPicker=void 0;meta=babelHelpers.interopRequireWildcard(meta);/**
 * Copyright 2019 Penn State University
 * @license Apache-2.0, see License.md for full text.
 */ /**
 * `rich-text-editor-symbol-picker`
 * `a symbol picker for the rich-text-editor`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 */var RichTextEditorSymbolPicker=/*#__PURE__*/function(_RichTextEditorPicker){babelHelpers.inherits(RichTextEditorSymbolPicker,_RichTextEditorPicker);function RichTextEditorSymbolPicker(){babelHelpers.classCallCheck(this,RichTextEditorSymbolPicker);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(RichTextEditorSymbolPicker).apply(this,arguments))}babelHelpers.createClass(RichTextEditorSymbolPicker,[{key:"connectedCallback",/**
   * life cycle, element is afixed to the DOM
   */value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorSymbolPicker.prototype),"connectedCallback",this).call(this);var name="symbols",basePath=(0,_resolveUrl.pathFromUrl)(decodeURIComponent(meta.url)),src=this.optionsSrc,location="".concat(basePath).concat(src);window.addEventListener("es-bridge-".concat(name,"-loaded"),this._setOptions.bind(this));window.ESGlobalBridge.requestAvailability();window.ESGlobalBridge.instance.load(name,location)}/**
   * Handles default options loaded from an external js file
   */},{key:"_setOptions",value:function _setOptions(){var optData=[];this.symbolTypes.forEach(function(type){optData=optData.concat(symbols[type])});this.set("options",this._getPickerOptions(optData,this.allowNull,this.icon))}/**
   * Converts option data to picker option data;
   * can be overridden in extended elements
   *
   * @param {object} data about the option
   * @returns {object} picker dato for the option
   */},{key:"_getOptionData",value:function _getOptionData(option){return{value:option,alt:option,icon:null,style:null}}}],[{key:"properties",// properties available to the custom element for data binding
get:function get(){return{/**
       * Optional icon for null value
       */icon:{name:"icon",type:"String",value:"editor:functions",readOnly:!0},/**
       * An optional JSON file with default options.
       */optionsSrc:{name:"optionsSrc",type:"String",value:"data/symbols.js"},/**
       * Symbol types to include
       */symbolTypes:{name:"symbolTypes",type:"Array",value:["symbols","math","characters","greek","misc"]},/**
       * Renders html as title. (Good for titles with HTML in them.)
       */titleAsHtml:{name:"titleAsHtml",type:"Boolean",value:!0,readOnly:!0},/**
       * The value
       */value:{name:"value",type:"String",value:"null"}}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   *
   */},{key:"tag",get:function get(){return"rich-text-editor-symbol-picker"}}]);return RichTextEditorSymbolPicker}(_richTextEditorPicker.RichTextEditorPicker);_exports.RichTextEditorSymbolPicker=RichTextEditorSymbolPicker;window.customElements.define(RichTextEditorSymbolPicker.tag,RichTextEditorSymbolPicker)});