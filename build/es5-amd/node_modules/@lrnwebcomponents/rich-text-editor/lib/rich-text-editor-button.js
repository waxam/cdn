define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/paper-button/paper-button.js","../../../@polymer/paper-tooltip/paper-tooltip.js","../../../@polymer/iron-icons/iron-icons.js"],function(_exports,_polymerElement){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.RichTextEditorButton=void 0;function _templateObject_17585b102f0111e9a03d3d2b23ab0894(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: flex;\n          flex: 0 0 auto;\n          align-items: stretch;\n          margin: 3px;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host #button {\n          text-transform: unset;\n          color: var(--rich-text-editor-button-color, #444);\n          border-color: var(--rich-text-editor-button-border, transparent);\n          padding: 0;\n          transition: all 0.5s;\n          min-width: 24px;\n          height: 24px;\n          @apply --rich-text-editor-button;\n        }\n        :host([disabled]) #button {\n          cursor: not-allowed;\n          color: var(--rich-text-editor-button-disabled-color, #666);\n          background-color: var(--rich-text-editor-button-disabled-bg, transparent);\n          @apply --rich-text-editor-button-disabled;\n        }\n        :host([toggled]) #button {\n          color: var(--rich-text-editor-button-toggled-color, #222);\n          background-color: var(--rich-text-editor-button-toggled-bg, #e0e0e0);\n          @apply --rich-text-editor-button-toggled;\n        }\n        :host #button:focus,\n        :host #button:hover {\n          color: var(--rich-text-editor-button-hover-color, #000);\n          background-color: var(--rich-text-editor-button-hover-bg, #f0f0f0);\n        }\n        :host #icon:not([icon]) {\n          display:none;\n        }\n        :host #label.offscreen {\n          position: absolute;\n          left: -999999px;\n          top: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n      </style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[__a11y]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_buttonTap\">\n      </iron-a11y-keys>\n      <paper-button id=\"button\"\n        disabled$=\"[[disabled]]\" \n        controls=\"[[controls]]\"\n        on-tap=\"_buttonTap\"\n        tabindex=\"0\"\n        toggled$=\"[[toggled]]\">\n        <iron-icon id=\"icon\" \n          aria-hidden\n          icon$=\"[[icon]]\">\n        </iron-icon>\n        <span id=\"label\" class$=\"[[labelStyle]]\">[[label]]</span>\n      </paper-button>\n      <paper-tooltip id=\"tooltip\" \n        for=\"button\">\n        [[label]]\n      </paper-button>\n    "]);_templateObject_17585b102f0111e9a03d3d2b23ab0894=function(){return data};return data}var RichTextEditorButton=function(_PolymerElement){babelHelpers.inherits(RichTextEditorButton,_PolymerElement);function RichTextEditorButton(){babelHelpers.classCallCheck(this,RichTextEditorButton);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(RichTextEditorButton).apply(this,arguments))}babelHelpers.createClass(RichTextEditorButton,[{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorButton.prototype),"connectedCallback",this).call(this);this.__a11y=this.$.button}},{key:"_buttonTap",value:function _buttonTap(){this.dispatchEvent(new CustomEvent("rich-text-button-tap",{detail:this}))}},{key:"_labelStyle",value:function _labelStyle(icon,showTextLabel){return icon!==void 0&&null!==icon&&""!==icon&&!1===showTextLabel?"offscreen":null}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_17585b102f0111e9a03d3d2b23ab0894())}},{key:"properties",get:function get(){return{disabled:{name:"disabled",type:"Boolean",value:!1},command:{name:"command",type:"String",value:null},event:{name:"event",type:"String",value:null},icon:{name:"icon",type:"String",value:null},label:{name:"label",type:"String",value:null},labelStyle:{name:"labelStyle",type:"String",computed:"_labelStyle(icon,showTextLabel)",readOnly:!0},showTextLabel:{name:"showTextLabel",type:"Boolean",value:!1},toggled:{name:"toggled",type:"Boolean",value:!1},toggles:{name:"toggles",type:"Boolean",value:!1}}}},{key:"tag",get:function get(){return"rich-text-editor-button"}}]);return RichTextEditorButton}(_polymerElement.PolymerElement);_exports.RichTextEditorButton=RichTextEditorButton;window.customElements.define(RichTextEditorButton.tag,RichTextEditorButton)});