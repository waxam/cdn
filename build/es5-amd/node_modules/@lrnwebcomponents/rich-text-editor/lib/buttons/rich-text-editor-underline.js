define(["exports", "../../../../@polymer/polymer/polymer-element.js", "./rich-text-editor-prompt-button.js"], function (_exports, _polymerElement, _richTextEditorPromptButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorUnderline = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `rich-text-editor-underline`
   * `a button for rich text editor (custom buttons can extend this)`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   */
  var RichTextEditorUnderline =
  /*#__PURE__*/
  function (_RichTextEditorPrompt) {
    babelHelpers.inherits(RichTextEditorUnderline, _RichTextEditorPrompt);

    function RichTextEditorUnderline() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorUnderline);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RichTextEditorUnderline).call(this));
      _this.fields = [{
        property: "",
        title: "Text",
        description: "The link text",
        inputMethod: "textfield"
      }, {
        property: "confirm",
        title: "Underline despite usability issues",
        description: "Underlines can be confused with links on the web. To prevent usability issues, we recommend using italics instead.",
        inputMethod: "boolean"
      }];
      _this.tag = "u";
      _this.icon = "editor:format-underlined";
      _this.label = "Underline (not recommended)";
      _this.toggles = true;
      _this.command = "underline";
      _this.shortcutKeys = "ctrl+u";
      _this.value = {
        tag: false
      };
      return _this;
    } // properties available to the custom element for data binding


    babelHelpers.createClass(RichTextEditorUnderline, [{
      key: "_getTagNeeded",

      /**
       * a <u> tag is only needed if there is text content
       * and the tag usability warning is confirmed
       * @param {object} value the prompt values
       * @returns {boolean} if the tag is needed for the element
       */
      value: function _getTagNeeded(value) {
        return value && this.getCleanValue("") && this.getCleanValue("") !== "" && this.getCleanValue("confirm") && this.getCleanValue("confirm");
      }
    }], [{
      key: "properties",
      get: function get() {
        return {};
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-underline";
      }
    }]);
    return RichTextEditorUnderline;
  }(_richTextEditorPromptButton.RichTextEditorPromptButton);

  _exports.RichTextEditorUnderline = RichTextEditorUnderline;
  window.customElements.define(RichTextEditorUnderline.tag, RichTextEditorUnderline);
});