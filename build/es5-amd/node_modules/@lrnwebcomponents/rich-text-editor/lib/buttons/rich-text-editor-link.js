define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-prompt-button.js"], function (_exports, _litElement, _richTextEditorPromptButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorLink = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-link`
   * a button for rich text editor (custom buttons can extend this)
   *
   * @element rich-text-editor-link
   * @demo ./demo/buttons.html
   */
  var RichTextEditorLink = /*#__PURE__*/function (_RichTextEditorPrompt) {
    babelHelpers.inherits(RichTextEditorLink, _RichTextEditorPrompt);

    var _super = _createSuper(RichTextEditorLink);

    babelHelpers.createClass(RichTextEditorLink, [{
      key: "render",
      // render function for template
      value: function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "render", this).call(this);
      } // properties available to the custom element for data binding

    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "rich-text-editor-link";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink), "properties", this));
      }
    }]);

    function RichTextEditorLink() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorLink);
      _this = _super.call(this);
      _this.fields = [{
        property: "linktext",
        title: "Text",
        description: "The link text",
        inputMethod: "textfield"
      }, {
        property: "href",
        title: "Link",
        description: "The link URL. (Leave blank to remove.)",
        inputMethod: "url",
        autoValidate: true
      }];
      _this.command = "CreateLink";
      _this.icon = "link";
      _this.label = "Link";
      _this.toggledCommand = "unlink";
      _this.toggledIcon = "mdextra:unlink";
      _this.toggledLabel = "Unlink";
      _this.toggles = "true", _this.tag = "a";
      _this.value = {
        link: null
      };
      _this.shortcutKeys = "ctrl+k";
      return _this;
    }
    /**
     * overrides default block selectors
     *
     * @readonly
     * @memberof RichTextEditorLink
     */


    babelHelpers.createClass(RichTextEditorLink, [{
      key: "updatePrompt",

      /**
       * updates prompt fields with selected range data
       */
      value: function updatePrompt() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorLink.prototype), "updatePrompt", this).call(this);
        this.value = {
          linktext: this.__selectionContents ? this.__selectionContents.innerHTML : this.__selection.innerHTML,
          href: this.__selectionContents && this.__selectionContents.getAttribute ? this.__selectionContents.getAttribute("href") : undefined
        };
      }
      /**
       * updates the insertion based on fields
       */

    }, {
      key: "updateSelection",
      value: function updateSelection() {
        var link = this.__prompt.getPromptValue("href"),
            text = this.__prompt.getPromptValue("linktext");

        this.setRange();
        this.__selectionContents.innerHTML = text;
        this.toggled = !link || !text;
        this.commandVal = link || undefined;
        this.execCommand();
      }
    }, {
      key: "blockSelectors",
      get: function get() {
        return "a";
      }
      /**
       * whether button is toggled
       *
       * @readonly
       * @memberof RichTextEditorButton
       */

    }, {
      key: "isToggled",
      get: function get() {
        return this.toggled;
      }
    }]);
    return RichTextEditorLink;
  }((0, _richTextEditorPromptButton.RichTextEditorPromptButtonBehaviors)(_litElement.LitElement));

  _exports.RichTextEditorLink = RichTextEditorLink;
  window.customElements.define(RichTextEditorLink.tag, RichTextEditorLink);
});