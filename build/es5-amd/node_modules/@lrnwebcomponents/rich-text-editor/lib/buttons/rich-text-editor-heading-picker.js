define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-picker.js"], function (_exports, _litElement, _richTextEditorPicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorHeadingPicker = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-heading-picker`
   * a heading picker for the rich-text-editor
   *
   * @element rich-text-editor-heading-picker
   * @demo ./demo/buttons.html
   */
  var RichTextEditorHeadingPicker = /*#__PURE__*/function (_RichTextEditorPicker) {
    babelHelpers.inherits(RichTextEditorHeadingPicker, _RichTextEditorPicker);

    var _super = _createSuper(RichTextEditorHeadingPicker);

    babelHelpers.createClass(RichTextEditorHeadingPicker, [{
      key: "render",
      // render function for template
      value: function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorHeadingPicker.prototype), "render", this).call(this);
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "rich-text-editor-heading-picker";
      }
    }, {
      key: "styles",
      get: function get() {
        return babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorHeadingPicker), "styles", this));
      }
    }]);

    function RichTextEditorHeadingPicker() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorHeadingPicker);
      _this = _super.call(this);
      _this.allowNull = true;
      _this.blocks = [{
        label: "Paragraph",
        tag: "p"
      }, {
        label: "Heading 1",
        tag: "h1"
      }, {
        label: "Heading 2",
        tag: "h2"
      }, {
        label: "Heading 3",
        tag: "h3"
      }, {
        label: "Heading 4",
        tag: "h4"
      }, {
        label: "Heading 5",
        tag: "h5"
      }, {
        label: "Heading 6",
        tag: "h6"
      }, {
        label: "Preformatted",
        tag: "pre"
      }];
      _this.command = "formatBlock";
      _this.icon = null;
      _this.label = "Block format";
      return _this;
    } // properties available to the custom element for data binding


    babelHelpers.createClass(RichTextEditorHeadingPicker, [{
      key: "_setOptions",

      /**
       * populates the picker
       */
      value: function _setOptions() {
        this.tag = this.blocks.map(function (block) {
          return block.tag;
        }).join(",");
        this.options = [[{
          alt: this.label,
          value: null
        }]].concat(babelHelpers.toConsumableArray(this.blocks.map(function (block) {
          return [{
            alt: block.label,
            value: block.tag
          }];
        })));
      }
    }, {
      key: "blockSelectors",
      get: function get() {
        var arr = [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorHeadingPicker.prototype), "blockSelectors", this).split(",")), babelHelpers.toConsumableArray((this.blocks || []).map(function (blocks) {
          return blocks.tag;
        }))).filter(function (v, i, s) {
          return s.indexOf(v) === i;
        });
        return arr.join(",");
      }
    }], [{
      key: "properties",
      get: function get() {
        var props = babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorHeadingPicker), "properties", this);
        delete props.block;
        return _objectSpread(_objectSpread({}, props), {}, {
          /**
           * block element options as array of objects,
           * eg. [ { label: "Paragraph", tag: "p" }, { label: "Heading 1", tag: "h1" }, ...]
           *
           */
          blocks: {
            name: "blocks",
            type: Array
          }
        });
      }
    }]);
    return RichTextEditorHeadingPicker;
  }((0, _richTextEditorPicker.RichTextEditorPickerBehaviors)(_litElement.LitElement));

  _exports.RichTextEditorHeadingPicker = RichTextEditorHeadingPicker;
  window.customElements.define(RichTextEditorHeadingPicker.tag, RichTextEditorHeadingPicker);
});