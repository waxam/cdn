define(["exports", "meta", "./rich-text-editor-picker.js", "../../../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _richTextEditorPicker, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorEmojiPicker = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `rich-text-editor-emoji-picker`
   * `an emoji picker for the rich-text-editor`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   */
  var RichTextEditorEmojiPicker =
  /*#__PURE__*/
  function (_RichTextEditorPicker) {
    babelHelpers.inherits(RichTextEditorEmojiPicker, _RichTextEditorPicker);

    function RichTextEditorEmojiPicker() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorEmojiPicker);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker).call(this));
      _this.label = "Insert emoji";
      _this.icon = "editor:insert-emoticon";
      return _this;
    } // properties available to the custom element for data binding


    babelHelpers.createClass(RichTextEditorEmojiPicker, [{
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker.prototype), "connectedCallback", this).call(this);
        var basePath = this.pathFromUrl(decodeURIComponent(meta.url));
        var src = this.optionsSrc;
        var location = "".concat(basePath).concat(src);
        window.addEventListener("es-bridge-emoji-loaded", this._setOptions.bind(this));
        window.ESGlobalBridge.requestAvailability();
        window.ESGlobalBridge.instance.load("emoji", location);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-emoji-loaded", this._setOptions.bind(this));
      }
      /**
       * gets a list of icons and load them in a format
       * that the simple-picker can take;
       * if no icons are provided, loads a list from iron-meta
       *
       * @param {array} a list of custom icons for the picker
       * @param {array} default list of icons for the picker
       * @param {boolean} allow a null value for the picker
       */

    }, {
      key: "_getPickerOptions",
      value: function _getPickerOptions() {
        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var allowNull = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var icon = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
        var temp = babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker.prototype), "_getPickerOptions", this).call(this, options, allowNull, icon);
        temp[0].unshift({
          alt: null,
          icon: this.icon,
          value: null
        });
        return temp;
      }
      /**
       * Handles default options loaded from an external js file
       */

    }, {
      key: "_setOptions",
      value: function _setOptions() {
        var optData = [];
        this.emojiTypes.forEach(function (type) {
          optData = optData.concat(Object.keys(emojis[type]));
        });
        this.set("options", this._getPickerOptions(optData, this.allowNull, this.icon));
      }
      /**
       * Converts option data to picker option data;
       * can be overridden in extended elements
       *
       * @param {object} data about the option
       * @returns {object} picker dato for the option
       */

    }, {
      key: "_getOptionData",
      value: function _getOptionData(option) {
        return {
          value: option,
          alt: option,
          icon: null,
          style: null
        };
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * Emoji types types to include
           */
          emojiTypes: {
            name: "emojiTypes",
            type: Array,
            value: ["emotions", "people", "nature", "food", "travel", "activities", "objects", "symbols", "flags"]
          },

          /**
           * An optional JSON file with default options.
           */
          optionsSrc: {
            name: "optionsSrc",
            type: String,
            value: "data/emojis.js"
          },

          /**
           * Renders html as title. (Good for titles with HTML in them.)
           */
          titleAsHtml: {
            name: "titleAsHtml",
            type: Boolean,
            value: true,
            readOnly: true
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       *
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-emoji-picker";
      }
    }]);
    return RichTextEditorEmojiPicker;
  }(_richTextEditorPicker.RichTextEditorPicker);

  _exports.RichTextEditorEmojiPicker = RichTextEditorEmojiPicker;
  window.customElements.define(RichTextEditorEmojiPicker.tag, RichTextEditorEmojiPicker);
});