define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-picker.js", "../../../simple-picker/lib/simple-emoji-picker.js"], function (_exports, _litElement, _richTextEditorPicker, _simpleEmojiPicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorEmojiPicker = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_eaa42800577c11eb974577f038855fc7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-emoji-picker\n        id=\"button\"\n        ?allow-null=\"", "\"\n        class=\"rtebutton ", "\"\n        ?disabled=\"", "\"\n        controls=\"", "\"\n        @mouseover=\"", "\"\n        @keydown=\"", "\"\n        @value-changed=\"", "\"\n        tabindex=\"0\"\n        ?title-as-html=\"", "\"\n      >\n        <span id=\"label\" class=\"", "\">", "</span>\n      </simple-emoji-picker>\n      <simple-tooltip id=\"tooltip\" for=\"button\"\n        >", "</simple-tooltip\n      >\n    "]);

    _templateObject_eaa42800577c11eb974577f038855fc7 = function _templateObject_eaa42800577c11eb974577f038855fc7() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-emoji-picker`
   * an emoji picker for the rich-text-editor
   *
   * @element rich-text-editor-emoji-picker
   * @demo ./demo/buttons.html
   */
  var RichTextEditorEmojiPicker = /*#__PURE__*/function (_RichTextEditorPicker) {
    babelHelpers.inherits(RichTextEditorEmojiPicker, _RichTextEditorPicker);

    var _super = _createSuper(RichTextEditorEmojiPicker);

    babelHelpers.createClass(RichTextEditorEmojiPicker, [{
      key: "render",
      // render function for template
      // render function for template
      value: function render() {
        return (0, _litElement.html)(_templateObject_eaa42800577c11eb974577f038855fc7(), this.allowNull, this.toggled ? "toggled" : "", this.disabled, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker.prototype), "controls", this), this._pickerFocus, this._pickerFocus, this._pickerChange, this.titleAsHtml, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker.prototype), "labelStyle", this), this.currentLabel, this.currentLabel);
      } // properties available to the custom element for data binding

    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       *
       */
      get: function get() {
        return "rich-text-editor-emoji-picker";
      }
    }, {
      key: "styles",
      get: function get() {
        return babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker), "styles", this));
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker), "properties", this)), {}, {
          /**
           * Emoji types types to include
           */
          emojiTypes: {
            name: "emojiTypes",
            type: Array
          }
        });
      }
    }]);

    function RichTextEditorEmojiPicker() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorEmojiPicker);
      _this = _super.call(this);
      _this.emojiTypes = ["emotions", "people", "nature", "food", "travel", "activities", "objects", "symbols", "flags"];
      _this.icon = "editor:insert-emoticon";
      _this.label = "Insert emoji";
      _this.titleAsHtml = true;
      _this.command = "insertHTML";
      return _this;
    }

    babelHelpers.createClass(RichTextEditorEmojiPicker, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorEmojiPicker.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "titleAsHtml" && !_this2.titleAsHtml) _this2.titleAsHtml = true;
        });
      }
    }]);
    return RichTextEditorEmojiPicker;
  }((0, _richTextEditorPicker.RichTextEditorPickerBehaviors)(_litElement.LitElement));

  _exports.RichTextEditorEmojiPicker = RichTextEditorEmojiPicker;
  window.customElements.define(RichTextEditorEmojiPicker.tag, RichTextEditorEmojiPicker);
});