define(["exports", "../../../../lit-element/lit-element.js"], function (_exports, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorButtonStyles = _exports.RichTextEditorButtonStylesEl = void 0;

  function _templateObject_284931c05a6e11eb8957f34616f75140() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            --rich-text-editor-button-min-width: 24px;\n            --rich-text-editor-button-height: 24px;\n            --rich-text-editor-button-margin: 3px;\n            --rich-text-editor-button-padding: 0;\n          }\n          :host([hidden]) {\n            display: none;\n          }\n          .offscreen {\n            position: absolute;\n            left: -999999px;\n            top: 0;\n            height: 0;\n            width: 0;\n            overflow: hidden;\n          }\n          :host(rich-text-editor-emoji-picker),\n          :host(rich-text-editor-symbol-picker) {\n            --simple-picker-option-label-padding: 2px;\n          }\n          simple-tooltip {\n            z-index: 2;\n          }\n          .rtebutton {\n            text-transform: unset;\n            transition: all 0.5s;\n            color: var(--rich-text-editor-button-color);\n            margin: 0;\n            border-width: 0px;\n            border-style: solid;\n            border-color: var(--rich-text-editor-border-color, transparent);\n            background-color: var(--rich-text-editor-button-bg, transparent);\n          }\n          .rtebutton[toggled] {\n            color: var(--rich-text-editor-button-toggled-color);\n            background-color: var(--rich-text-editor-button-toggled-bg);\n          }\n          .rtebutton:focus,\n          .rtebutton:hover {\n            color: var(--rich-text-editor-button-hover-color);\n            background-color: var(--rich-text-editor-button-hover-bg);\n          }\n          :host([disabled]) .rtebutton {\n            cursor: not-allowed;\n            color: var(--rich-text-editor-button-disabled-color);\n            background-color: var(--rich-text-editor-button-disabled-bg);\n          }\n          .rtebutton #icon:not([icon]) {\n            display: none;\n          }\n        "]);

    _templateObject_284931c05a6e11eb8957f34616f75140 = function _templateObject_284931c05a6e11eb8957f34616f75140() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var RichTextEditorButtonStyles = function RichTextEditorButtonStyles(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(_class, null, [{
        key: "tag",
        get: function get() {
          return "rich-text-editor-button-styles";
        }
      }, {
        key: "styles",
        get: function get() {
          return [(0, _litElement.css)(_templateObject_284931c05a6e11eb8957f34616f75140())];
        }
      }]);
      return _class;
    }(SuperClass);
  };
  /**
   * `rich-text-editor-button-styles`
   * @element rich-text-editor-button-styles
   * `a shared set of button styles for rich-text-editor`
   */


  _exports.RichTextEditorButtonStyles = RichTextEditorButtonStyles;

  var RichTextEditorButtonStylesEl = /*#__PURE__*/function (_RichTextEditorButton) {
    babelHelpers.inherits(RichTextEditorButtonStylesEl, _RichTextEditorButton);

    var _super2 = _createSuper(RichTextEditorButtonStylesEl);

    function RichTextEditorButtonStylesEl() {
      babelHelpers.classCallCheck(this, RichTextEditorButtonStylesEl);
      return _super2.apply(this, arguments);
    }

    return RichTextEditorButtonStylesEl;
  }(RichTextEditorButtonStyles(_litElement.LitElement));

  _exports.RichTextEditorButtonStylesEl = RichTextEditorButtonStylesEl;
  window.customElements.define(RichTextEditorButtonStylesEl.tag, RichTextEditorButtonStylesEl);
});