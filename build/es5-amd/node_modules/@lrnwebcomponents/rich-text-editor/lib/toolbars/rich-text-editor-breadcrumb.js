define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/paper-button/paper-button.js", "../../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "../buttons/rich-text-editor-button-styles.js"], function (_exports, _polymerElement, _paperButton, _ironA11yKeys, _richTextEditorButtonStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorBreadcrumb = void 0;

  function _templateObject_6f845ef0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"rich-text-editor-button-styles\">\n        :host #button {\n          @apply --rich-text-editor-breadcrumb;\n        }\n      </style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[__a11y]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_buttonTap\"\n      >\n      </iron-a11y-keys>\n      <paper-button\n        id=\"button\"\n        class=\"rtebutton rtebreadcrumb\"\n        controls$=\"[[controls]]\"\n        on-click=\"_buttonTap\"\n        tabindex=\"0\"\n      >\n        [[tag]]\n      </paper-button>\n    "]);

    _templateObject_6f845ef0d34d11ea880ba1e93364c49c = function _templateObject_6f845ef0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `rich-text-editor-breadcrumb`
   * `a button for rich text editor breadcrumbs`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   */
  var RichTextEditorBreadcrumb =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(RichTextEditorBreadcrumb, _PolymerElement);

    function RichTextEditorBreadcrumb() {
      babelHelpers.classCallCheck(this, RichTextEditorBreadcrumb);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RichTextEditorBreadcrumb).apply(this, arguments));
    }

    babelHelpers.createClass(RichTextEditorBreadcrumb, [{
      key: "ready",

      /**
       * life cycle, element is ready
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorBreadcrumb.prototype), "ready", this).call(this);
        var root = this;
        root.addEventListener("mousedown", function (e) {
          e.preventDefault();
        });
        root.addEventListener("keypress", function (e) {
          e.preventDefault();
        });
      }
      /**
       * life cycle, element is afixed to the DOM
       * @returns {void}
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorBreadcrumb.prototype), "connectedCallback", this).call(this);
        this.__a11y = this.shadowRoot.querySelector("#button");
      }
      /**
       * Handles button tap;
       * @param {event} e the button tab event
       * @returns {void}
       */

    }, {
      key: "_buttonTap",
      value: function _buttonTap(e) {
        e.preventDefault();
        this.dispatchEvent(new CustomEvent("breadcrumb-tap", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6f845ef0d34d11ea880ba1e93364c49c());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The text-editor that this breadcrumb controls.
           */
          controls: {
            name: "controls",
            type: String,
            value: null
          },

          /**
           * The tag for this breadcrumb.
           */
          tag: {
            name: "tag",
            type: String,
            value: ""
          },

          /**
           * The target node that this breadcrumb selects.
           */
          target: {
            name: "target",
            type: Object,
            value: null
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-breadcrumb";
      }
    }]);
    return RichTextEditorBreadcrumb;
  }(_polymerElement.PolymerElement);

  _exports.RichTextEditorBreadcrumb = RichTextEditorBreadcrumb;
  window.customElements.define(RichTextEditorBreadcrumb.tag, RichTextEditorBreadcrumb);
});