define(["exports", "../../../../lit-element/lit-element.js", "../rich-text-editor-styles.js", "./rich-text-editor-breadcrumb.js"], function (_exports, _litElement, _richTextEditorStyles, _richTextEditorBreadcrumb) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorBreadcrumbs = void 0;

  function _templateObject4_4f678650019d11eb9027c17497ee62cd() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          background-color: var(--rich-text-editor-bg);\n          color: var(--rich-text-editor-button-color);\n          border: var(--rich-text-editor-border);\n          padding: 3px 10px;\n        }\n        :host([sticky]) {\n          position: sticky;\n          bottom: 0;\n        }\n        .selectednode {\n          background-color: var(--rich-text-editor-bg);\n        }\n\xA0\xA0\xA0\xA0\xA0\xA0"]);

    _templateObject4_4f678650019d11eb9027c17497ee62cd = function _templateObject4_4f678650019d11eb9027c17497ee62cd() {
      return data;
    };

    return data;
  }

  function _templateObject3_4f678650019d11eb9027c17497ee62cd() {
    var data = babelHelpers.taggedTemplateLiteral([" <span class=\"divider\"> &gt; </span> "]);

    _templateObject3_4f678650019d11eb9027c17497ee62cd = function _templateObject3_4f678650019d11eb9027c17497ee62cd() {
      return data;
    };

    return data;
  }

  function _templateObject2_4f678650019d11eb9027c17497ee62cd() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <rich-text-editor-breadcrumb\n                controls=\"", "\"\n                tag=\"", "\"\n                .target=\"", "\"\n              >\n              </rich-text-editor-breadcrumb>\n              ", "\n            "]);

    _templateObject2_4f678650019d11eb9027c17497ee62cd = function _templateObject2_4f678650019d11eb9027c17497ee62cd() {
      return data;
    };

    return data;
  }

  function _templateObject_4f678650019d11eb9027c17497ee62cd() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      ", "\n    "]);

    _templateObject_4f678650019d11eb9027c17497ee62cd = function _templateObject_4f678650019d11eb9027c17497ee62cd() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-breadcrumbs`
   * `A utility that manages the state of multiple rich-text-prompts on one page.`
   *
   *  @element rich-text-editor-breadcrumbs
   */
  var RichTextEditorBreadcrumbs = /*#__PURE__*/function (_RichTextEditorStyles) {
    babelHelpers.inherits(RichTextEditorBreadcrumbs, _RichTextEditorStyles);

    var _super = _createSuper(RichTextEditorBreadcrumbs);

    babelHelpers.createClass(RichTextEditorBreadcrumbs, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject_4f678650019d11eb9027c17497ee62cd(), this.label, !this.ancestorNodes ? "" : (this.ancestorNodes || []).map(function (crumb, i) {
          return (0, _litElement.html)(_templateObject2_4f678650019d11eb9027c17497ee62cd(), _this2.controls, crumb.tag, crumb.target, i + 1 >= _this2.ancestorNodes.length ? "" : (0, _litElement.html)(_templateObject3_4f678650019d11eb9027c17497ee62cd()));
        }));
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "rich-text-editor-breadcrumbs";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorBreadcrumbs), "styles", this)), [(0, _litElement.css)(_templateObject4_4f678650019d11eb9027c17497ee62cd())]);
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The active rict-text-editor.
           */
          controls: {
            type: String
          },

          /**
           * Hide breadcrumbs
           */
          hidden: {
            type: Boolean,
            attribute: "hidden",
            reflect: true
          },

          /**
           * The breadcrumb labels.
           */
          label: {
            type: String
          },

          /**
           * The selected text.
           */
          range: {
            type: Object
          },

          /**
           * Should the breadcrumbs stick to the top so that it is always visible?
           */
          sticky: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }]);

    function RichTextEditorBreadcrumbs() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorBreadcrumbs);
      _this = _super.call(this);
      _this.hidden = false;
      _this.sticky = false;
      _this.label = "Expand selection: ";
      return _this;
    }
    /**
     * updates the breadcrumbs
     * @param {object} the selected range
     * @param {string} controls id of what the breadcrumbs control
     * @returns {void}
     */


    babelHelpers.createClass(RichTextEditorBreadcrumbs, [{
      key: "ancestorNodes",
      get: function get() {
        var nodes = [],
            ancestor = false,
            parent = false,
            controls = this.controls;
        if (!!this.range) ancestor = this.range.commonAncestorContainer;
        if (!!ancestor) parent = ancestor;
        this.hidden = !ancestor;

        while (!!parent && parent.nodeName !== "RICH-TEXT-EDITOR") {
          nodes.unshift({
            tag: parent.nodeName.toLowerCase(),
            target: parent
          });
          parent = parent.parentNode;
        }

        return nodes;
      }
    }]);
    return RichTextEditorBreadcrumbs;
  }((0, _richTextEditorStyles.RichTextEditorStyles)(_litElement.LitElement));

  _exports.RichTextEditorBreadcrumbs = RichTextEditorBreadcrumbs;
  window.customElements.define(RichTextEditorBreadcrumbs.tag, RichTextEditorBreadcrumbs);
});