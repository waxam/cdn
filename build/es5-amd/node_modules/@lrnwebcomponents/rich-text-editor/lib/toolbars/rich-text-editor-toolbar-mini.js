define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-toolbar.js", "../../../absolute-position-behavior/absolute-position-behavior.js"], function (_exports, _litElement, _richTextEditorToolbar, _absolutePositionBehavior) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorToolbarMini = void 0;

  function _templateObject2_ca1d201054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host #floating {\n          display: flex;\n        }\n      "]);

    _templateObject2_ca1d201054f111eba18757df1555c032 = function _templateObject2_ca1d201054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _templateObject_ca1d201054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <absolute-position-behavior\n        auto\n        id=\"floating\"\n        fit-to-visible-bounds\n        for=\"", "\"\n        position=\"top\"\n      >\n        ", "\n      </absolute-position-behavior>\n    "]);

    _templateObject_ca1d201054f111eba18757df1555c032 = function _templateObject_ca1d201054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-toolbar-mini`
   * `a mini floating toolbar for the rich text editor`
   *
   * @element rich-text-editor-toolbar-mini
   * @demo ./demo/mini.html mini floating toolbar
   */
  var RichTextEditorToolbarMini = /*#__PURE__*/function (_RichTextEditorToolba) {
    babelHelpers.inherits(RichTextEditorToolbarMini, _RichTextEditorToolba);

    var _super = _createSuper(RichTextEditorToolbarMini);

    babelHelpers.createClass(RichTextEditorToolbarMini, [{
      key: "render",
      // properties available to the custom element for data binding
      value: function render() {
        return (0, _litElement.html)(_templateObject_ca1d201054f111eba18757df1555c032(), this.controls, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarMini.prototype), "render", this).call(this));
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "rich-text-editor-toolbar-mini";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarMini), "baseStyles", this)), [(0, _litElement.css)(_templateObject2_ca1d201054f111eba18757df1555c032())]);
      }
    }]);

    function RichTextEditorToolbarMini() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorToolbarMini);
      _this = _super.call(this);
      _this.sticky = false;
      _this.config = [{
        label: "Basic Inline Operations",
        type: "button-group",
        buttons: [{
          command: "bold",
          icon: "editor:format-bold",
          label: "Bold",
          toggles: true,
          type: "rich-text-editor-button"
        }, {
          command: "italic",
          icon: "editor:format-italic",
          label: "Italics",
          toggles: true,
          type: "rich-text-editor-button"
        }, {
          collapsedUntil: "md",
          command: "removeFormat",
          icon: "editor:format-clear",
          label: "Erase Format",
          type: "rich-text-editor-button"
        }]
      }, {
        label: "Links",
        type: "button-group",
        buttons: [{
          command: "link",
          icon: "link",
          label: "Link",
          prompt: "href",
          toggledCommand: "unlink",
          toggledIcon: "mdextra:unlink",
          toggledLabel: "Unink",
          toggles: true,
          type: "rich-text-editor-link"
        }]
      }, {
        collapsedUntil: "md",
        label: "Subscript and Superscript",
        type: "button-group",
        buttons: [{
          command: "subscript",
          icon: "mdextra:subscript",
          label: "Subscript",
          toggles: true,
          type: "rich-text-editor-button"
        }, {
          command: "superscript",
          icon: "mdextra:superscript",
          label: "Superscript",
          toggles: true,
          type: "rich-text-editor-button"
        }]
      }, {
        collapsedUntil: "sm",
        label: "Lists and Indents",
        type: "button-group",
        buttons: [{
          command: "insertOrderedList",
          icon: "editor:format-list-numbered",
          label: "Ordered List",
          toggles: true,
          type: "rich-text-editor-button"
        }, {
          command: "insertUnorderedList",
          icon: "editor:format-list-bulleted",
          label: "Unordered List",
          toggles: true,
          type: "rich-text-editor-button"
        }]
      }];
      return _this;
    }

    babelHelpers.createClass(RichTextEditorToolbarMini, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarMini.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          //disable sticky for mini
          if (propName === "sticky" && _this2.sticky) _this2.sticky = false;
        });
      }
    }]);
    return RichTextEditorToolbarMini;
  }((0, _richTextEditorToolbar.RichTextEditorToolbarBehaviors)(_litElement.LitElement));

  _exports.RichTextEditorToolbarMini = RichTextEditorToolbarMini;
  window.customElements.define(RichTextEditorToolbarMini.tag, RichTextEditorToolbarMini);
});