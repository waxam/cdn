define(["exports", "../../../../@polymer/polymer/polymer-element.js", "./rich-text-editor-toolbar.js", "./rich-text-editor-breadcrumbs.js"], function (_exports, _polymerElement, _richTextEditorToolbar, _richTextEditorBreadcrumbs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorToolbarFull = void 0;

  function _templateObject_6f880870d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", " ", " ", "\n    "]);

    _templateObject_6f880870d34d11ea880ba1e93364c49c = function _templateObject_6f880870d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `rich-text-editor-toolbar-full`
   * `a full toolbar with breadcrumbs for the rich text editor`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   * @demo ../demo/index.html demo
   * @demo ./demo/full.html toolbar with breadcrumb
   */
  var RichTextEditorToolbarFull =
  /*#__PURE__*/
  function (_RichTextEditorToolba) {
    babelHelpers.inherits(RichTextEditorToolbarFull, _RichTextEditorToolba);

    function RichTextEditorToolbarFull() {
      babelHelpers.classCallCheck(this, RichTextEditorToolbarFull);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RichTextEditorToolbarFull).call(this));
    } // render function for template


    babelHelpers.createClass(RichTextEditorToolbarFull, [{
      key: "ready",

      /**
       * life cycle, element is ready
       * @returns {void}
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "ready", this).call(this);
        var root = this;
        root.__breadcrumbs = document.createElement("rich-text-editor-breadcrumbs");
        document.body.appendChild(root.__breadcrumbs);

        root.__breadcrumbs.addEventListener("breadcrumb-tap", root._handleBreadcrumb.bind(root));

        this._stickyChanged();
      }
      /**
       * Gets the updated selected range.
       *
       * @param {object} editableElement the editable element
       * @returns {void}
       */

    }, {
      key: "editTarget",
      value: function editTarget(editableElement) {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "editTarget", this).call(this, editableElement);
        var root = this;

        if (editableElement) {
          root.__breadcrumbs.controls = editableElement.getAttribute("id");
          editableElement.parentNode.insertBefore(root.__breadcrumbs, editableElement.nextSibling);

          if (!this.sticky) {
            editableElement.classList.add("heightmax");
          } else {
            editableElement.classList.remove("heightmax");
          }
        }
      }
      /**
       * Gets the updated selected range.
       * @returns {void}
       */

    }, {
      key: "_rangeChange",
      value: function _rangeChange(e) {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "_rangeChange", this).call(this, e);
        if (this.__breadcrumbs) this.__breadcrumbs.range = this.range;
      }
      /**
       * handle a breadcrumb tap by updating the selected text
       *
       * @param {object} e the breadcrumb tap event
       * @returns {void}
       */

    }, {
      key: "_handleBreadcrumb",
      value: function _handleBreadcrumb(e) {
        if (e.detail.target) this.range.selectNode(e.detail.target);
      }
      /**
       * Preserves the selected range when a button is pressed
       *
       * @param {object} the button
       * @returns {void}
       */

    }, {
      key: "_preserveSelection",
      value: function _preserveSelection() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "_preserveSelection", this).call(this);
        if (this.__breadcrumbs) this.__breadcrumbs.range = temp;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6f880870d34d11ea880ba1e93364c49c(), this.styleTemplate, this.stickyTemplate, this.toolbarTemplate);
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The label for the breadcrums area.
           */
          breadcrumbsLabel: {
            name: "breadcrumbsLabel",
            type: String,
            value: "Expand selection: "
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "rich-text-editor-toolbar-full";
      }
    }]);
    return RichTextEditorToolbarFull;
  }(_richTextEditorToolbar.RichTextEditorToolbar);

  _exports.RichTextEditorToolbarFull = RichTextEditorToolbarFull;
  window.customElements.define(RichTextEditorToolbarFull.tag, RichTextEditorToolbarFull);
});