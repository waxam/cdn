define(["exports", "../../../../lit-element/lit-element.js", "./rich-text-editor-toolbar.js", "./rich-text-editor-breadcrumbs.js"], function (_exports, _litElement, _richTextEditorToolbar, _richTextEditorBreadcrumbs) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorToolbarFull = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `rich-text-editor-toolbar-full`
   * `a full toolbar with breadcrumbs for the rich text editor`
   *
   * @element rich-text-editor-toolbar-full
   * @demo ./demo/index.html demo
   * @demo ./demo/full.html toolbar with breadcrumb
   */
  var RichTextEditorToolbarFull = /*#__PURE__*/function (_RichTextEditorToolba) {
    babelHelpers.inherits(RichTextEditorToolbarFull, _RichTextEditorToolba);

    var _super = _createSuper(RichTextEditorToolbarFull);

    babelHelpers.createClass(RichTextEditorToolbarFull, [{
      key: "render",
      // render function for template
      value: function render() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "render", this).call(this);
      } // properties available to the custom element for data binding

    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "rich-text-editor-toolbar-full";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull), "baseStyles", this)), babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull), "stickyStyles", this)));
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull), "properties", this)), {}, {
          /**
           * The label for the breadcrums area.
           */
          breadcrumbsLabel: {
            name: "breadcrumbsLabel",
            type: String,
            attribute: "breadcrumbs-label"
          }
        });
      }
    }]);

    function RichTextEditorToolbarFull() {
      var _this;

      babelHelpers.classCallCheck(this, RichTextEditorToolbarFull);
      _this = _super.call(this);
      _this.breadcrumbsLabel = "Expand selection: ";
      _this.__breadcrumbs = document.createElement("rich-text-editor-breadcrumbs");
      document.body.appendChild(_this.__breadcrumbs);

      _this.__breadcrumbs.addEventListener("breadcrumb-tap", _this._handleBreadcrumb.bind(babelHelpers.assertThisInitialized(_this)));

      _this._stickyChanged();

      return _this;
    }
    /**
     * Gets the updated selected range.
     *
     * @param {object} editableElement the editable element
     * @returns {void}
     */


    babelHelpers.createClass(RichTextEditorToolbarFull, [{
      key: "editTarget",
      value: function editTarget(editableElement) {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "editTarget", this).call(this, editableElement);

        if (editableElement) {
          this.__breadcrumbs.controls = editableElement.getAttribute("id");
          editableElement.parentNode.insertBefore(this.__breadcrumbs, editableElement.nextSibling);

          if (!this.sticky) {
            editableElement.classList.add("heightmax");
          } else {
            editableElement.classList.remove("heightmax");
          }
        }
      }
      /**
       * Gets the updated selected range.
       * @returns {void}
       */

    }, {
      key: "_rangeChange",
      value: function _rangeChange(e) {
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "_rangeChange", this).call(this, e);
        if (this.__breadcrumbs) this.__breadcrumbs.range = this.range;
      }
      /**
       * handle a breadcrumb tap by updating the selected text
       *
       * @param {object} e the breadcrumb tap event
       * @returns {void}
       */

    }, {
      key: "_handleBreadcrumb",
      value: function _handleBreadcrumb(e) {
        console.log("_handleBreadcrumb", e.detail.target);

        if (e.detail.target) {
          this.range.selectNode(e.detail.target);

          this._rangeChange(e);
        }
      }
      /**
       * Preserves the selected range when a button is pressed
       *
       * @param {object} the button
       * @returns {void}
       */

    }, {
      key: "_preserveSelection",
      value: function _preserveSelection() {
        console.log("_preserveSelection", this.__breadcrumbs.range);
        babelHelpers.get(babelHelpers.getPrototypeOf(RichTextEditorToolbarFull.prototype), "_preserveSelection", this).call(this);
        if (this.__breadcrumbs) this.__breadcrumbs.range = temp;
      }
    }]);
    return RichTextEditorToolbarFull;
  }((0, _richTextEditorToolbar.RichTextEditorToolbarBehaviors)(_litElement.LitElement));

  _exports.RichTextEditorToolbarFull = RichTextEditorToolbarFull;
  window.customElements.define(RichTextEditorToolbarFull.tag, RichTextEditorToolbarFull);
});