define(["exports", "require", "../../../../lit-element/lit-element.js", "../rich-text-editor-styles.js", "../../../responsive-utility/responsive-utility.js", "../../rich-text-editor.js", "../singletons/rich-text-editor-selection.js"], function (_exports, _require, _litElement, _richTextEditorStyles, _responsiveUtility, _richTextEditor, _richTextEditorSelection) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorToolbarBehaviors = _exports.RichTextEditorToolbar = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject4_16fcc6c001c211eba2339b0c52070e79() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          :host([hidden]) {\n            display: none;\n          }\n          #toolbar {\n            display: flex;\n            opacity: 1;\n            z-index: 1;\n            margin: 0;\n            align-items: stretch;\n            flex-wrap: wrap;\n            justify-content: flex-start;\n            background-color: var(--rich-text-editor-bg);\n            border: var(--rich-text-editor-border);\n            font-size: 12px;\n            transition: all 0.5s;\n          }\n          #toolbar[aria-hidden=\"true\"] {\n            visibility: hidden;\n            opacity: 0;\n            height: 0;\n          }\n          #toolbar .group {\n            display: flex;\n            flex-wrap: nowrap;\n            justify-content: space-evenly;\n            align-items: stretch;\n            padding: 0 3px;\n          }\n          #toolbar .group:not(:last-of-type) {\n            margin-right: 3px;\n            border-right: var(--rich-text-editor-border);\n          }\n          #toolbar .button {\n            display: flex;\n            flex: 0 0 auto;\n            align-items: stretch;\n          }\n          #toolbar #morebutton {\n            flex: 1 0 auto;\n            justify-content: flex-end;\n          }\n          /* hide more button if all buttons are displayed */\n          #toolbar[responsive-size=\"xs\"] #morebutton[collapse-max=\"xs\"],\n          #toolbar[responsive-size=\"sm\"] #morebutton[collapse-max*=\"s\"],\n          #toolbar[responsive-size=\"md\"] #morebutton:not([collapse-max*=\"l\"]),\n          #toolbar[responsive-size=\"lg\"] #morebutton:not([collapse-max=\"xl\"]),\n          #toolbar[responsive-size=\"xl\"] #morebutton,\n          /* hide buttons if they should be collaped until */\n          #toolbar[responsive-size=\"xs\"][collapsed] *[collapsed-until*=\"m\"],\n          #toolbar[responsive-size=\"xs\"][collapsed] *[collapsed-until*=\"l\"],\n          #toolbar[responsive-size=\"sm\"][collapsed] *[collapsed-until=\"md\"],\n          #toolbar[responsive-size=\"sm\"][collapsed] *[collapsed-until*=\"l\"],\n          #toolbar[responsive-size=\"md\"][collapsed] *[collapsed-until*=\"l\"],\n          #toolbar[responsive-size=\"lg\"][collapsed] *[collapsed-until=\"xl\"] {\n            display: none;\n          }\n        "]);

    _templateObject4_16fcc6c001c211eba2339b0c52070e79 = function _templateObject4_16fcc6c001c211eba2339b0c52070e79() {
      return data;
    };

    return data;
  }

  function _templateObject3_16fcc6c001c211eba2339b0c52070e79() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          :host([sticky]) {\n            position: sticky;\n            top: 0;\n          }\n        "]);

    _templateObject3_16fcc6c001c211eba2339b0c52070e79 = function _templateObject3_16fcc6c001c211eba2339b0c52070e79() {
      return data;
    };

    return data;
  }

  function _templateObject2_16fcc6c001c211eba2339b0c52070e79() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        <div\n          id=\"toolbar\"\n          aria-live=\"polite\"\n          aria-hidden=\"", "\"\n          ?collapsed=\"", "\"\n          @focus=\"", "\"\n        >\n          <rich-text-editor-more-button\n            id=\"morebutton\"\n            class=\"button\"\n            controls=\"toolbar\"\n            icon=\"", "\"\n            label=\"", "\"\n            ?show-text-label=\"", "\"\n            ?label-toggled=\"", "\"\n            ?toggled=\"", "\"\n            @click=\"", "\"\n          >\n          </rich-text-editor-more-button>\n        </div>\n      "]);

    _templateObject2_16fcc6c001c211eba2339b0c52070e79 = function _templateObject2_16fcc6c001c211eba2339b0c52070e79() {
      return data;
    };

    return data;
  }

  function _templateObject_16fcc6c001c211eba2339b0c52070e79() {
    var data = babelHelpers.taggedTemplateLiteral([" ", " "]);

    _templateObject_16fcc6c001c211eba2339b0c52070e79 = function _templateObject_16fcc6c001c211eba2339b0c52070e79() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var RichTextEditorToolbarBehaviors = function RichTextEditorToolbarBehaviors(SuperClass) {
    return /*#__PURE__*/function (_RichTextEditorStyles) {
      babelHelpers.inherits(_class, _RichTextEditorStyles);

      var _super = _createSuper(_class);

      babelHelpers.createClass(_class, [{
        key: "render",
        // render function for template
        value: function render() {
          return (0, _litElement.html)(_templateObject_16fcc6c001c211eba2339b0c52070e79(), this.toolbarTemplate);
        } // properties available to custom element for data binding

      }, {
        key: "toolbarTemplate",
        // render function for toolbar
        get: function get() {
          return (0, _litElement.html)(_templateObject2_16fcc6c001c211eba2339b0c52070e79(), this.controls //|| this.alwaysVisible
          ? "false" : "true", this.collapsed, this._addHighlight, this.moreIcon, this.moreLabel, this.moreShowTextLabel, this.moreLabelToggled, !this.collapsed, this._toggleMore);
        }
      }], [{
        key: "tag",

        /**
         * Store tag name to make it easier to obtain directly.
         */
        get: function get() {
          return "rich-text-editor-toolbar";
        } // render function for styles

      }, {
        key: "stickyStyles",
        get: function get() {
          return [(0, _litElement.css)(_templateObject3_16fcc6c001c211eba2339b0c52070e79())];
        } // render function for styles

      }, {
        key: "baseStyles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this)), [(0, _litElement.css)(_templateObject4_16fcc6c001c211eba2339b0c52070e79())]);
        }
      }, {
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(this.baseStyles), babelHelpers.toConsumableArray(this.stickyStyles));
        }
      }, {
        key: "properties",
        get: function get() {
          return {
            /**
             * keep toolbar visible even when not editor not focused
             * /
            alwaysVisible: {
              type: Boolean,
              attribute: "always-visible",
              reflect: true
            },
            /**
             * editable content, if edits are canceled
             */
            canceled: {
              type: Object
            },

            /**
             * is toolbar collapsed?
             */
            collapsed: {
              name: "collapsed",
              type: Boolean,
              attribute: "collapsed"
            },

            /**
             * Custom configuration of toolbar groups and buttons.
             * (See default value for example using default configuration.)
             */
            config: {
              name: "config",
              type: Object,
              attribute: "config"
            },

            /**
             * `id` of `rich-text-editor` that toolbar controls.
             */
            controls: {
              name: "controls",
              type: String,
              attribute: "controls"
            },

            /**
             * `rich-text-editor` element that is currently in `contenteditable` mode
             */
            editor: {
              name: "editor",
              type: Object,
              attribute: "editor"
            },

            /**
             * `rich-text-editor` unique id
             */
            id: {
              name: "id",
              type: String,
              attribute: "id",
              reflect: true
            },

            /**
             * icon for more button.
             */
            moreIcon: {
              name: "moreIcon",
              type: String,
              attribute: "more-icon"
            },

            /**
             * label for more button.
             */
            moreLabel: {
              name: "moreLabel",
              type: String,
              attribute: "more-label"
            },

            /**
             * label for more button when toggled.
             */
            moreLabelToggled: {
              name: "moreLabelToggled",
              type: String,
              attribute: "more-label-toggled",
              value: "Fewer Buttons"
            },

            /**
             * show text label for more button.
             */
            moreShowTextLabel: {
              name: "moreShowTextLabel",
              type: Boolean,
              attribute: "more-show-text-label"
            },

            /**
             * size of editor.
             */
            responsiveSize: {
              name: "responsiveSize",
              type: String,
              attribute: "responsive-size",
              reflect: true
            },

            /**
             * current text selected range.
             */
            savedSelection: {
              name: "savedSelection",
              type: Object
            },

            /**
             * current text selected range, which is actually a range.
             */
            range: {
              name: "range",
              type: Object
            },

            /**
             * Should toolbar stick to top so that it is always visible?
             */
            sticky: {
              name: "sticky",
              type: Boolean,
              attribute: "sticky",
              reflect: true
            },

            /**
             * raw array of buttons
             */
            __buttons: {
              name: "__buttons",
              type: Array
            },

            /**
             * Tracks inline widgets that require selection data
             */
            __inlineWidgets: {
              name: "__inlineWidgets",
              type: Array
            },

            /**
             * highlight surrounding selected range
             */
            __selection: {
              type: Object
            },

            /**
             * Optional space-sperated list of keyboard shortcuts for editor
             * to fire this button, see iron-a11y-keys for more info.
             */
            __shortcutKeys: {
              name: "__shortcutKeys",
              type: Array
            }
          };
        }
      }]);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-more-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-heading-picker.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-symbol-picker.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-underline.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-image.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-link.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-button-styles.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../../@polymer/iron-icons/iron-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../../@polymer/iron-icons/editor-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../../@polymer/iron-icons/image-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../md-extra-icons/md-extra-icons.js"], res, rej);
        });
        _this.__selection = window.RichTextEditorSelection.requestAvailability(); //this.alwaysVisible = false;

        _this.canceled = true;
        _this.collapsed = true;
        _this.config = [{
          label: "History",
          type: "button-group",
          buttons: [{
            command: "undo",
            icon: "undo",
            label: "Undo",
            shortcutKeys: "ctrl+z",
            type: "rich-text-editor-button"
          }, {
            command: "redo",
            icon: "redo",
            label: "Redo",
            shortcutKeys: "ctrl+shift+z",
            type: "rich-text-editor-button"
          }]
        }, {
          label: "Basic Inline Operations",
          type: "button-group",
          buttons: [{
            label: "Format",
            type: "rich-text-editor-heading-picker"
          }, {
            command: "bold",
            icon: "editor:format-bold",
            label: "Bold",
            shortcutKeys: "ctrl+b",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "italic",
            icon: "editor:format-italic",
            label: "Italics",
            shortcutKeys: "ctrl+i",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "removeFormat",
            icon: "editor:format-clear",
            label: "Erase Format",
            type: "rich-text-editor-button"
          }]
        }, {
          label: "Links",
          type: "button-group",
          buttons: [{
            icon: "link",
            label: "Link",
            shortcutKeys: "ctrl+k",
            type: "rich-text-editor-link"
          }]
        }, {
          label: "Clipboard Operations",
          type: "button-group",
          buttons: [{
            command: "cut",
            icon: "content-cut",
            label: "Cut",
            shortcutKeys: "ctrl+x",
            type: "rich-text-editor-button"
          }, {
            command: "copy",
            icon: "content-copy",
            label: "Copy",
            shortcutKeys: "ctrl+c",
            type: "rich-text-editor-button"
          }, {
            command: "paste",
            icon: "content-paste",
            label: "Paste",
            shortcutKeys: "ctrl+v",
            type: "rich-text-editor-button"
          }]
        }, {
          collapsedUntil: "md",
          label: "Subscript and Superscript",
          type: "button-group",
          buttons: [{
            command: "subscript",
            icon: "mdextra:subscript",
            label: "Subscript",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "superscript",
            icon: "mdextra:superscript",
            label: "Superscript",
            toggles: true,
            type: "rich-text-editor-button"
          }]
        }, {
          collapsedUntil: "sm",
          icon: "editor:functions",
          label: "Insert Symbol",
          symbolTypes: ["symbols"],
          type: "rich-text-editor-symbol-picker"
        }, {
          collapsedUntil: "sm",
          label: "Lists and Indents",
          type: "button-group",
          buttons: [{
            command: "insertOrderedList",
            icon: "editor:format-list-numbered",
            label: "Ordered List",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "insertUnorderedList",
            icon: "editor:format-list-bulleted",
            label: "Unordered List",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            collapsedUntil: "lg",
            command: "formatBlock",
            commandVal: "blockquote",
            label: "Blockquote",
            icon: "editor:format-quote",
            shortcutKeys: "ctrl+'",
            type: "rich-text-editor-button"
          }, {
            command: "indent",
            icon: "editor:format-indent-increase",
            event: "text-indent",
            label: "Increase Indent",
            shortcutKeys: "ctrl+]",
            type: "rich-text-editor-button"
          }, {
            command: "outdent",
            event: "text-outdent",
            icon: "editor:format-indent-decrease",
            label: "Decrease Indent",
            shortcutKeys: "ctrl+[",
            type: "rich-text-editor-button"
          }]
        }];
        _this.moreIcon = "more-vert";
        _this.moreLabel = "More Buttons";
        _this.moreLabelToggled = "Fewer Buttons";
        _this.moreShowTextLabel = false;
        _this.responsiveSize = "xs";
        _this.sticky = false;
        _this.__inlineWidgets = [];
        _this.__shortcutKeys = [];
        _this.__clipboard = document.createElement("textarea");

        _this.__clipboard.setAttribute("aria-hidden", true);

        _this.__clipboard.style.position = "absolute";
        _this.__clipboard.style.left = "-9999px";
        _this.__clipboard.style.top = "0px";
        _this.__clipboard.style.width = "0px";
        _this.__clipboard.style.height = "0px";
        document.body.appendChild(_this.__clipboard);
        window.addEventListener("paste", _this._handlePaste.bind(babelHelpers.assertThisInitialized(_this)));

        if (navigator.clipboard) {
          _this.addEventListener("paste-button", _this._handlePasteButton);
        }

        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);
          this.__buttons = this._getButtons();
          window.ResponsiveUtility.requestAvailability();
          window.dispatchEvent(new CustomEvent("responsive-element", {
            detail: {
              element: this.shadowRoot.querySelector("#toolbar")
            }
          }));
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this2 = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "sticky") _this2._stickyChanged(_this2.sticky, oldValue);
            if (propName === "range") _this2._rangeChange();
          });
        }
      }, {
        key: "connectedCallback",
        value: function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
        }
        /**
         * Gets editor buttons array, as determined by `config`.
         * @readonly
         */

      }, {
        key: "_getButtons",
        value: function _getButtons() {
          var _this3 = this;

          var toolbar = this.shadowRoot && this.shadowRoot.querySelector("#toolbar") ? this.shadowRoot.querySelector("#toolbar") : undefined;

          if (!!toolbar) {
            var more = toolbar.querySelector("#morebutton"),
                max = 0,
                sizes = ["xs", "sm", "md", "lg", "xl"],
                temp = [];
            toolbar.innerHTML = "";
            this.__shortcutKeys = [];
            this.config.forEach(function (item) {
              if (item.type === "button-group") {
                var group = document.createElement("div");
                group.setAttribute("class", "group");
                if (item.collapsedUntil !== undefined && item.collapsedUntil !== null) group.setAttribute("collapsed-until", item.collapsedUntil);
                max = Math.max(max, sizes.indexOf(item.collapsedUntil));
                item.buttons.forEach(function (button) {
                  max = Math.max(max, sizes.indexOf(button.collapsedUntil));
                  if (navigator.clipboard || button.command !== "paste") temp.push(_this3._addButton(button, group)); //firefox doesn't allow for clipboard button
                });
                toolbar.appendChild(group);
              } else {
                max = Math.max(max, sizes.indexOf(item.collapsedUntil));
                if (navigator.clipboard || item.command !== "paste") temp.push(_this3._addButton(item, toolbar)); //firefox doesn't allow for clipboard button
              }

              toolbar.appendChild(more);
              more.collapseMax = sizes[max];
            });
            return temp;
          }

          return [];
        }
        /**
         * life cycle, element is disconnected
         * @returns {void}
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this); //unbind toolbar to rich-text-editor-selection

          this.dispatchEvent(new CustomEvent("deselect-rich-text-editor-editor", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              toolbar: this,
              editor: this.editor
            }
          }));
        }
        /**
         * adds an editor
         *
         * @param {object} an HTML object that can be edited
         * @returns {void}
         */

      }, {
        key: "addEditableRegion",
        value: function addEditableRegion(editor) {
          var _this4 = this;

          editor.addEventListener("mousedown", function (e) {
            _this4.editTarget(editor);
          });
          editor.addEventListener("focus", function (e) {
            _this4.editTarget(editor);
          });
          editor.addEventListener("keydown", function (e) {
            _this4._handleShortcutKeys(editor, e);
          });
          editor.addEventListener("blur", function (e) {
            if (e.relatedTarget === null || !e.relatedTarget.startsWith === "rich-text-editor") _this4.editTarget(null);
          });
          editor.addEventListener("click", function (e) {
            return _this4._handleEditorClick(editor, e);
          });
        }
      }, {
        key: "_handleEditorClick",
        value: function _handleEditorClick(editor, e) {
          if (editor.contentEditable && e.path[0] !== editor) {
            var button = this.buttons.filter(function (button) {
              return button.tag === e.path[0].tagName.toLowerCase();
            }),
                range = this.__selection && this.__selection.range ? this.__selection.range : false,
                start = range && range.startContainer ? range.startContainer.childNodes[range.startOffset] : false,
                end = range && range.endContainer ? range.endContainer.childNodes[range.endOffset - 1] : false;

            if (button && button[0] && start === end && start === e.path[0]) {
              button[0]._buttonTap(e);
            } else if (button && button[0]) {
              this.__selection.selectNode(e.path[0]);
            }
          }
        }
        /**
         * cancels edits to active editor
         * @returns {void}
         */

      }, {
        key: "cancel",
        value: function cancel() {
          this.editor.innerHTML = this.canceled;
          this.editTarget(null);
        }
        /**
         * makes a editor editable
         *
         * @param {object} an HTML object that can be edited
         * @returns {void}
         */

      }, {
        key: "editTarget",
        value: function editTarget(editor) {
          var _this5 = this;

          if ("editTarget", this.editor !== editor) {
            //save changes to previous editor
            if (!!this.editor) {
              this.editor.contentEditable = false;
              this.editor = null;
            } //bind toolbar to rich-text-editor-selection


            this.dispatchEvent(new CustomEvent("select-rich-text-editor-editor", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: {
                toolbar: this,
                editor: this.editor
              }
            }));
            this.editor = editor;

            if (!!editor) {
              editor.parentNode.insertBefore(this, editor);
              this.canceled = editor.innerHTML;
              this.editor.contentEditable = true;
              this.controls = editor.getAttribute("id");

              this._removeHighlight();
            } else {
              this.controls = null;
            }

            console.log("editor change");
            this.buttons.forEach(function (button) {
              button.target = editor;
              button.controls = _this5.controls;
              button.range = null;
              button.range = _this5.range;
            });
          }
        }
        /**
         * Normalizes selected range data.
         * @returns {object} selected range
         */

      }, {
        key: "getRange",
        value: function getRange() {
          var sel = window.getSelection();

          if (sel.getRangeAt && sel.rangeCount) {
            return sel.getRangeAt(0);
          } else if (sel) {
            return sel;
          } else false;
        }
        /**
         * paste content into a range;
         * override this function to make your own filters
         *
         * @param {string} pasteContent html to be pasted
         * @returns {string} filtered html as string
         */

      }, {
        key: "getSanitizeClipboard",
        value: function getSanitizeClipboard(pasteContent) {
          var regex = "<body(.*\n)*>(.*\n)*</body>";
          if (pasteContent.match(regex) && pasteContent.match(regex).length > 0) pasteContent = pasteContent.match(regex)[0].replace(/<\?body(.*\n)*\>/i);
          return pasteContent;
        }
        /**
         * make an new editable element
         *
         * @param {object} editor an HTML object that can be edited
         * @returns {void}
         */

      }, {
        key: "makeEditableRegion",
        value: function makeEditableRegion(editor) {
          var content = document.createElement("rich-text-editor");
          editor.parentNode.insertBefore(content, editor);
          content.appendChild(editor);
          this.addEditableRegion(content);
        }
        /**
         * paste content into a range
         *
         * @param {object} range where content will be pasted
         * @param {string} pasteContent html to be pasted
         * @returns {void}
         */

      }, {
        key: "pasteIntoRange",
        value: function pasteIntoRange(range, pasteContent) {
          var div = document.createElement("div"),
              sel = window.getSelection(),
              parent = range.commonAncestorContainer.parentNode,
              closest = parent.closest("[contenteditable=true]:not([disabled]),input:not([disabled]),textarea:not([disabled])");

          if (this.editor = closest) {
            div.innerHTML = pasteContent;

            if (range && range.extractContents) {
              range.extractContents();
            }

            range.insertNode(div);

            while (div.firstChild) {
              div.parentNode.insertBefore(div.firstChild, div);
            }

            div.parentNode.removeChild(div);
          }
        }
        /**
         * removes an editor
         *
         * @param {object} editor an HTML object that can be edited
         * @returns {void}
         */

      }, {
        key: "removeEditableRegion",
        value: function removeEditableRegion(editor) {
          var _this6 = this;

          editor.removeEventListener("mouseout", function (e) {
            _this6.getUpdatedSelection();
          });
          editor.removeEventListener("focus", function (e) {
            _this6.editTarget(editor);
          });
          editor.removeEventListener("mousedown", function (e) {
            _this6.editTarget(editor);
          });
          editor.removeEventListener("keydown", function (e) {
            _this6._handleShortcutKeys(editor, e);
          });
          editor.removeEventListener("blur", function (e) {
            if (e.relatedTarget === null || !e.relatedTarget.startsWith === "rich-text-editor") _this6.editTarget(null);

            _this6.getUpdatedSelection();
          });
        }
        /**
         * Adds a button to toolbar
         *
         * @param {object} child child object in config object
         * @param {object} parent parent object in config object
         * @returns {object} button
         */

      }, {
        key: "_addButton",
        value: function _addButton(child, parent) {
          var _this7 = this;

          var button = document.createElement(child.type),
              keys = button.shortcutKeys ? button.shortcutKeys.replace(/ctrl\+[xcv]/g, "") : ""; //disable clipboard keys since we're already listening for them

          this.__shortcutKeys[keys] = button;

          for (var key in child) {
            button[key] = child[key];
          }

          button.setAttribute("class", "button");
          button.addEventListener("deselect", function (e) {
            console.log("button deselect", _this7.range, _this7.range.isCollapsed);

            _this7._removeHighlight();

            console.log("button deselect 2", _this7.range, _this7.range.isCollapsed);
          });
          if (button.inlineWidget) this.push("__inlineWidgets", button.tag);
          parent.appendChild(button);
          return button;
        }
      }, {
        key: "_addHighlight",
        value: function _addHighlight() {
          console.log("_addHighlight", this.range);
          if (this.__selection) this.__selection.addHighlight();
        }
      }, {
        key: "_removeHighlight",
        value: function _removeHighlight() {
          console.log("_removeHighlight", this.range);
          if (this.__selection) this.__selection.removeHighlight();
        }
      }, {
        key: "_handleKeyboardShortcuts",
        value: function _handleKeyboardShortcuts(e) {
          console.log("_handleKeyboardShortcuts", e);
        }
        /**
         * when a shortcut key is pressed, fire keypressed event on button associated with it
         * @param {object} editor editor that detects a shortcut key
         * @param {event} e key event
         */

      }, {
        key: "_handleShortcutKeys",
        value: function _handleShortcutKeys(editor, e) {
          if (editor.contentEditable) {
            var key = e.key;
            if (e.shiftKey) key = "shift+" + key;
            if (e.altKey) key = "alt+" + key;

            if (window.navigator.platform === "MacIntel" && e.metaKey || e.ctrlKey) {
              key = "ctrl+" + key;
            }

            if (this.__shortcutKeys[key]) this.__shortcutKeys[key]._keysPressed(e);
          }
        }
        /**
         * Handles paste.
         *
         * @param {event} e paste event
         * @returns {void}
         */

      }, {
        key: "_handlePaste",
        value: function _handlePaste(e) {
          var pasteContent = ""; // intercept paste event

          if (e && (e.clipboardData || e.originalEvent.clipboardData)) {
            pasteContent = (e.originalEvent || e).clipboardData.getData("text/html");
          } else if (window.clipboardData) {
            pasteContent = window.clipboardData.getData("Text");
          }

          this.pasteIntoRange(this.__selection.getRange(), this.getSanitizeClipboard(pasteContent));
          e.preventDefault();
        }
        /**
         * Handles paste button.
         *
         * @param {event} e paste button event
         * @returns {void}
         */

      }, {
        key: "_handlePasteButton",
        value: function _handlePasteButton(e) {
          var _this8 = this;

          setTimeout( /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var range, sel, text;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    range = e.detail.range;
                    sel = window.getSelection();
                    _context.next = 4;
                    return navigator.clipboard.readText();

                  case 4:
                    text = _context.sent;
                    _this8.__clipboard.value = text;

                    _this8.__clipboard.focus();

                    _this8.__clipboard.select();

                    document.execCommand("paste");
                    sel.removeAllRanges();
                    sel.addRange(range);

                    _this8.pasteIntoRange(range, _this8.getSanitizeClipboard(_this8.__clipboard.value));

                  case 12:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          })), 2000);
          e.preventDefault();
        }
        /**
         * Gets updated selected range.
         * @returns {void}
         */

      }, {
        key: "_rangeChange",
        value: function _rangeChange() {
          var _this9 = this;

          if (document.activeElement === this.editor) {
            console.log("toolbar _rangeChange", this.range);
            this.buttons.forEach(function (button) {
              button.range = null;
              button.range = _this9.range;
            });
          }
        }
        /**
         * updates breadcrumb sticky when sticky property changes
         *
         * @param {boolean} newVal new value
         * @param {boolean} oldVal old value
         * @returns {void}
         */

      }, {
        key: "_stickyChanged",
        value: function _stickyChanged(newVal, oldVal) {
          if (this.__breadcrumbs) this.__breadcrumbs.sticky = this.sticky;
        }
        /**
         * Toggles collapsed mode when `rich-text-editor-more-button` is tapped
         * @param {event} e `rich-text-editor-more-button` tap event
         * @returns {void}
         */

      }, {
        key: "_toggleMore",
        value: function _toggleMore(e) {
          this.collapsed = !this.collapsed;
        }
      }, {
        key: "buttons",
        get: function get() {
          return this.__buttons;
        }
      }]);
      return _class;
    }((0, _richTextEditorStyles.RichTextEditorStyles)(SuperClass));
  };
  /**
   * `rich-text-editor-toolbar`
   * `default toolbar for rich text editor`
   *
   * @element rich-text-editor-toolbar
   */


  _exports.RichTextEditorToolbarBehaviors = RichTextEditorToolbarBehaviors;

  var RichTextEditorToolbar = /*#__PURE__*/function (_RichTextEditorToolba) {
    babelHelpers.inherits(RichTextEditorToolbar, _RichTextEditorToolba);

    var _super2 = _createSuper(RichTextEditorToolbar);

    function RichTextEditorToolbar() {
      babelHelpers.classCallCheck(this, RichTextEditorToolbar);
      return _super2.apply(this, arguments);
    }

    return RichTextEditorToolbar;
  }(RichTextEditorToolbarBehaviors(_litElement.LitElement));

  _exports.RichTextEditorToolbar = RichTextEditorToolbar;
  window.customElements.define(RichTextEditorToolbar.tag, RichTextEditorToolbar);
});