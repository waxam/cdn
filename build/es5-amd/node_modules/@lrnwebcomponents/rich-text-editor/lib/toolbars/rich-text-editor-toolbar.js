define(["exports", "require", "../../../../lit-element/lit-element.js", "../rich-text-editor-styles.js", "../../../responsive-utility/responsive-utility.js", "../singletons/rich-text-editor-selection.js", "../../../simple-icon/lib/simple-icon-lite.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button-lite.js", "../../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _require, _litElement, _richTextEditorStyles, _responsiveUtility, _richTextEditorSelection, _simpleIconLite, _simpleIcons, _simpleIconButtonLite, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RichTextEditorToolbarBehaviors = _exports.RichTextEditorToolbar = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject4_28b512f05a6e11eb8957f34616f75140() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          :host([hidden]) {\n            display: none;\n          }\n          #toolbar {\n            display: flex;\n            opacity: 1;\n            z-index: 1;\n            margin: 0;\n            align-items: stretch;\n            flex-wrap: wrap;\n            justify-content: flex-start;\n            background-color: var(--rich-text-editor-bg);\n            border: var(--rich-text-editor-border);\n            font-size: 12px;\n            transition: all 0.5s;\n          }\n          #toolbar[aria-hidden=\"true\"] {\n            visibility: hidden;\n            opacity: 0;\n            height: 0;\n          }\n          #toolbar .group {\n            display: flex;\n            flex-wrap: nowrap;\n            justify-content: space-evenly;\n            align-items: stretch;\n            padding: 0 3px;\n          }\n          #toolbar .group:not(:last-of-type) {\n            margin-right: 3px;\n            border-right: var(--rich-text-editor-border);\n          }\n          #toolbar .button {\n            display: flex;\n            flex: 0 0 auto;\n            align-items: stretch;\n          }\n          #toolbar #morebutton {\n            flex: 1 0 auto;\n            justify-content: flex-end;\n          }\n          /* hide more button if all buttons are displayed */\n          #toolbar[responsive-size=\"xs\"] #morebutton[collapse-max=\"xs\"],\n          #toolbar[responsive-size=\"sm\"] #morebutton[collapse-max*=\"s\"],\n          #toolbar[responsive-size=\"md\"] #morebutton:not([collapse-max*=\"l\"]),\n          #toolbar[responsive-size=\"lg\"] #morebutton:not([collapse-max=\"xl\"]),\n          #toolbar[responsive-size=\"xl\"] #morebutton,\n          /* hide buttons if they should be collaped until */\n          #toolbar[responsive-size=\"xs\"][collapsed] *[collapsed-until*=\"m\"],\n          #toolbar[responsive-size=\"xs\"][collapsed] *[collapsed-until*=\"l\"],\n          #toolbar[responsive-size=\"sm\"][collapsed] *[collapsed-until=\"md\"],\n          #toolbar[responsive-size=\"sm\"][collapsed] *[collapsed-until*=\"l\"],\n          #toolbar[responsive-size=\"md\"][collapsed] *[collapsed-until*=\"l\"],\n          #toolbar[responsive-size=\"lg\"][collapsed] *[collapsed-until=\"xl\"] {\n            display: none;\n          }\n        "]);

    _templateObject4_28b512f05a6e11eb8957f34616f75140 = function _templateObject4_28b512f05a6e11eb8957f34616f75140() {
      return data;
    };

    return data;
  }

  function _templateObject3_28b512f05a6e11eb8957f34616f75140() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          :host([sticky]) {\n            position: sticky;\n            top: 0;\n          }\n        "]);

    _templateObject3_28b512f05a6e11eb8957f34616f75140 = function _templateObject3_28b512f05a6e11eb8957f34616f75140() {
      return data;
    };

    return data;
  }

  function _templateObject2_28b512f05a6e11eb8957f34616f75140() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        <div\n          id=\"toolbar\"\n          aria-live=\"polite\"\n          aria-hidden=\"", "\"\n          ?collapsed=\"", "\"\n          @selectnode=\"", "\"\n          @selectnodecontents=\"", "\"\n          @selectrange=\"", "\"\n        >\n          <rich-text-editor-more-button\n            id=\"morebutton\"\n            class=\"button\"\n            aria-controls=\"toolbar\"\n            icon=\"", "\"\n            label=\"", "\"\n            ?show-text-label=\"", "\"\n            ?label-toggled=\"", "\"\n            ?toggled=\"", "\"\n            @click=\"", "\"\n          >\n          </rich-text-editor-more-button>\n        </div>\n      "]);

    _templateObject2_28b512f05a6e11eb8957f34616f75140 = function _templateObject2_28b512f05a6e11eb8957f34616f75140() {
      return data;
    };

    return data;
  }

  function _templateObject_28b512f05a6e11eb8957f34616f75140() {
    var data = babelHelpers.taggedTemplateLiteral([" ", " "]);

    _templateObject_28b512f05a6e11eb8957f34616f75140 = function _templateObject_28b512f05a6e11eb8957f34616f75140() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var RichTextEditorToolbarBehaviors = function RichTextEditorToolbarBehaviors(SuperClass) {
    return /*#__PURE__*/function (_RichTextEditorStyles) {
      babelHelpers.inherits(_class, _RichTextEditorStyles);

      var _super = _createSuper(_class);

      babelHelpers.createClass(_class, [{
        key: "render",
        // render function for template
        value: function render() {
          return (0, _litElement.html)(_templateObject_28b512f05a6e11eb8957f34616f75140(), this.toolbarTemplate);
        } // properties available to custom element for data binding

      }, {
        key: "toolbarTemplate",
        // render function for toolbar
        get: function get() {
          var _this2 = this;

          return (0, _litElement.html)(_templateObject2_28b512f05a6e11eb8957f34616f75140(), !!this.controls || !!this.alwaysVisible ? "false" : "true", this.collapsed, function (e) {
            return _this2.selectNode(e.detail);
          }, function (e) {
            return _this2.selectNodeContents(e.detail);
          }, function (e) {
            return _this2.selectRange(e.detail);
          }, this.moreIcon, this.moreLabel, this.moreShowTextLabel, this.moreLabelToggled, !this.collapsed, this._toggleMore);
        }
      }], [{
        key: "tag",

        /**
         * Store tag name to make it easier to obtain directly.
         */
        get: function get() {
          return "rich-text-editor-toolbar";
        } // render function for styles

      }, {
        key: "stickyStyles",
        get: function get() {
          return [(0, _litElement.css)(_templateObject3_28b512f05a6e11eb8957f34616f75140())];
        } // render function for styles

      }, {
        key: "baseStyles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(_class), "styles", this)), [(0, _litElement.css)(_templateObject4_28b512f05a6e11eb8957f34616f75140())]);
        }
      }, {
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(this.baseStyles), babelHelpers.toConsumableArray(this.stickyStyles));
        }
      }, {
        key: "properties",
        get: function get() {
          return {
            /**
             * keep toolbar visible even when not editor not focused
             */
            alwaysVisible: {
              type: Boolean,
              attribute: "always-visible",
              reflect: true
            },

            /**
             * raw array of buttons
             */
            buttons: {
              name: "buttons",
              type: Array
            },

            /**
             * is toolbar collapsed?
             */
            collapsed: {
              name: "collapsed",
              type: Boolean,
              attribute: "collapsed"
            },

            /**
             * Custom configuration of toolbar groups and buttons.
             * (See default value for example using default configuration.)
             */
            config: {
              name: "config",
              type: Object,
              attribute: "config"
            },

            /**
             * `rich-text-editor` element that is currently in `contenteditable` mode
             */
            editor: {
              name: "editor",
              type: Object,
              attribute: "editor"
            },

            /**
             * `rich-text-editor` unique id
             */
            id: {
              name: "id",
              type: String,
              attribute: "id",
              reflect: true
            },

            /**
             * icon for more button.
             */
            moreIcon: {
              name: "moreIcon",
              type: String,
              attribute: "more-icon"
            },

            /**
             * label for more button.
             */
            moreLabel: {
              name: "moreLabel",
              type: String,
              attribute: "more-label"
            },

            /**
             * label for more button when toggled.
             */
            moreLabelToggled: {
              name: "moreLabelToggled",
              type: String,
              attribute: "more-label-toggled",
              value: "Fewer Buttons"
            },

            /**
             * show text label for more button.
             */
            moreShowTextLabel: {
              name: "moreShowTextLabel",
              type: Boolean,
              attribute: "more-show-text-label"
            },

            /**
             * size of editor.
             */
            responsiveSize: {
              name: "responsiveSize",
              type: String,
              attribute: "responsive-size",
              reflect: true
            },

            /**
             * current text selected range.
             */
            savedSelection: {
              name: "savedSelection",
              type: Object
            },

            /**
             * current text selected range, which is actually a range.
             */
            range: {
              name: "range",
              type: Object
            },

            /**
             * selection singleton
             */
            registered: {
              type: Boolean
            },

            /**
             * currently selected node
             */
            selectedNode: {
              type: Object
            },

            /**
             * array of ancestors of currently selected node
             */
            selectionAncestors: {
              type: Array
            },

            /**
             * Optional space-sperated list of keyboard shortcuts for editor
             * to fire this button, see iron-a11y-keys for more info.
             */
            shortcutKeys: {
              name: "shortcutKeys",
              type: Array
            },

            /**
             * Should toolbar stick to top so that it is always visible?
             */
            sticky: {
              name: "sticky",
              type: Boolean,
              attribute: "sticky",
              reflect: true
            },

            /**
             * Tracks inline widgets that require selection data
             */
            __clickableElement: {
              name: "__clickableElement",
              type: Array
            },

            /**
             * selection singleton
             */
            __selection: {
              type: Object
            }
          };
        }
      }]);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-more-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-heading-picker.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-symbol-picker.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-underline.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-image.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-link.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../buttons/rich-text-editor-button-styles.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../../@polymer/iron-icons/iron-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../../@polymer/iron-icons/editor-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../../@polymer/iron-icons/image-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../md-extra-icons/md-extra-icons.js"], res, rej);
        });
        window.ResponsiveUtility.requestAvailability();
        _this.alwaysVisible = false;
        _this.collapsed = true;
        _this.config = [{
          label: "History",
          type: "button-group",
          buttons: [{
            command: "undo",
            icon: "undo",
            label: "Undo",
            shortcutKeys: "ctrl+z",
            type: "rich-text-editor-button"
          }, {
            command: "redo",
            icon: "redo",
            label: "Redo",
            shortcutKeys: "ctrl+shift+z",
            type: "rich-text-editor-button"
          }]
        }, {
          label: "Basic Inline Operations",
          type: "button-group",
          buttons: [{
            label: "Format",
            type: "rich-text-editor-heading-picker"
          }, {
            command: "bold",
            icon: "editor:format-bold",
            label: "Bold",
            shortcutKeys: "ctrl+b",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "italic",
            icon: "editor:format-italic",
            label: "Italics",
            shortcutKeys: "ctrl+i",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "removeFormat",
            icon: "editor:format-clear",
            label: "Erase Format",
            type: "rich-text-editor-button"
          }]
        }, {
          label: "Links",
          type: "button-group",
          buttons: [{
            icon: "link",
            label: "Link",
            shortcutKeys: "ctrl+k",
            type: "rich-text-editor-link"
          }]
        }, {
          label: "Clipboard Operations",
          type: "button-group",
          buttons: [{
            command: "cut",
            icon: "content-cut",
            label: "Cut",
            shortcutKeys: "ctrl+x",
            type: "rich-text-editor-button"
          }, {
            command: "copy",
            icon: "content-copy",
            label: "Copy",
            shortcutKeys: "ctrl+c",
            type: "rich-text-editor-button"
          }, {
            command: "paste",
            icon: "content-paste",
            label: "Paste",
            shortcutKeys: "ctrl+v",
            type: "rich-text-editor-button"
          }]
        }, {
          collapsedUntil: "md",
          label: "Subscript and Superscript",
          type: "button-group",
          buttons: [{
            command: "subscript",
            icon: "mdextra:subscript",
            label: "Subscript",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "superscript",
            icon: "mdextra:superscript",
            label: "Superscript",
            toggles: true,
            type: "rich-text-editor-button"
          }]
        }, {
          collapsedUntil: "sm",
          icon: "editor:functions",
          label: "Insert Symbol",
          symbolTypes: ["symbols"],
          type: "rich-text-editor-symbol-picker"
        }, {
          collapsedUntil: "sm",
          label: "Lists and Indents",
          type: "button-group",
          buttons: [{
            command: "insertOrderedList",
            icon: "editor:format-list-numbered",
            label: "Ordered List",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            command: "insertUnorderedList",
            icon: "editor:format-list-bulleted",
            label: "Unordered List",
            toggles: true,
            type: "rich-text-editor-button"
          }, {
            collapsedUntil: "lg",
            command: "formatBlock",
            commandVal: "blockquote",
            label: "Blockquote",
            icon: "editor:format-quote",
            shortcutKeys: "ctrl+'",
            type: "rich-text-editor-button"
          }, {
            command: "indent",
            icon: "editor:format-indent-increase",
            event: "text-indent",
            label: "Increase Indent",
            shortcutKeys: "ctrl+]",
            type: "rich-text-editor-button"
          }, {
            command: "outdent",
            event: "text-outdent",
            icon: "editor:format-indent-decrease",
            label: "Decrease Indent",
            shortcutKeys: "ctrl+[",
            type: "rich-text-editor-button"
          }]
        }];
        _this.moreIcon = "more-vert";
        _this.moreLabel = "More Buttons";
        _this.moreLabelToggled = "Fewer Buttons";
        _this.moreShowTextLabel = false;
        _this.responsiveSize = "xs";
        _this.sticky = false;
        _this.__clickableElement = [];
        _this.shortcutKeys = [];
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);
          this.buttons = this._getButtons();
          window.dispatchEvent(new CustomEvent("responsive-element", {
            detail: {
              element: this.shadowRoot.querySelector("#toolbar")
            }
          }));
          this.__selection = window.RichTextEditorSelection.requestAvailability();
          this.register();
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          var _this3 = this;

          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {
            if (propName === "range") _this3._rangeChange();
            if (propName === "editor") _this3._editorChange();
          });
        }
      }, {
        key: "connectedCallback",
        value: function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          this.register();
        }
        /**
         * life cycle, element is disconnected
         * @returns {void}
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
          this.register(true);
        }
        /**
         * id of editor currently being controlled
         * @readonly
         */

      }, {
        key: "cancel",

        /**
         * cancels edits to active editor
         * @returns {void}
         */
        value: function cancel() {
          this.dispatchEvent(new c("cancel", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
        /**
         * uses selection to create a range placeholder that keeps range highlighted
         *
         * @param {boolean} [add=true] add highlight?
         * @returns {void}
         */

      }, {
        key: "highlight",
        value: function highlight() {
          var add = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
          this.dispatchEvent(new CustomEvent("highlight", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: add
          }));
        }
        /**
         * handles registration to selection singleton's toolbars list
         * @param {boolean} remove whether to remove
         * @event register
         */

      }, {
        key: "register",
        value: function register() {
          var remove = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
          window.dispatchEvent(new CustomEvent("register", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              remove: remove,
              toolbar: this
            }
          }));
        }
        /**
         * selects a given node inside connected editor
         *
         * @param {object} node
         * @returns {void}
         */

      }, {
        key: "selectNode",
        value: function selectNode(node) {
          this.dispatchEvent(new CustomEvent("selectnode", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: node
          }));
        }
        /**
         * selects a given node inside connected editor
         *
         * @param {object} node
         * @returns {void}
         */

      }, {
        key: "selectNodeContents",
        value: function selectNodeContents(node) {
          this.dispatchEvent(new CustomEvent("selectnodecontents", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: node
          })); //if (this.__selection) this.__selection.selectNodeContents(node, this.editor);
        }
        /**
         * selects a given node inside connected editor
         *
         * @param {object} node
         * @returns {void}
         */

      }, {
        key: "selectRange",
        value: function selectRange(range) {
          this.dispatchEvent(new CustomEvent("selectrange", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: range
          })); //if (this.__selection) this.__selection.selectRange(range, this.editor);
        }
        /**
         * make an new editable element
         *
         * @param {object} editor an HTML object that can be edited
         * @returns {void}
         */

      }, {
        key: "newEditor",
        value: function newEditor(editor) {
          var content = document.createElement("rich-text-editor");
          editor.parentNode.insertBefore(content, editor);
          content.appendChild(editor);
        }
        /**
         * pastes sanitized clipboard contents into current editor's selected range
         * @param {object} editor an HTML object that can be edited
         * @returns {void}
         */

      }, {
        key: "pasteFromClipboard",
        value: function pasteFromClipboard() {
          this.dispatchEvent(new CustomEvent("pastefromclipboard", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this.editor
          }));
        }
        /**
         * Adds a button to toolbar
         *
         * @param {object} child child object in config object
         * @param {object} parent parent object in config object
         * @returns {object} button
         */

      }, {
        key: "_addButton",
        value: function _addButton(child, parent) {
          var button = document.createElement(child.type),
              keys = button.shortcutKeys ? button.shortcutKeys.replace(/ctrl\+[xcv]/g, "") : ""; //disable clipboard keys since we're already listening for them

          this.shortcutKeys[keys] = button;

          for (var key in child) {
            button[key] = child[key];
          }

          button.setAttribute("class", "button");
          button.addEventListener("button-command", this._handleButton);
          if (button.inlineWidget) this.push("__clickableElement", button.tag);
          parent.appendChild(button);
          return button;
        }
        /**
         * creates buttons based on config
         *
         * @returns {array}
         */

      }, {
        key: "_getButtons",
        value: function _getButtons() {
          var _this4 = this;

          var toolbar = this.shadowRoot && this.shadowRoot.querySelector("#toolbar") ? this.shadowRoot.querySelector("#toolbar") : undefined;

          if (!!toolbar) {
            var more = toolbar.querySelector("#morebutton"),
                max = 0,
                sizes = ["xs", "sm", "md", "lg", "xl"],
                temp = [];
            toolbar.innerHTML = "";
            this.shortcutKeys = [];
            this.config.forEach(function (item) {
              if (item.type === "button-group") {
                var group = document.createElement("div");
                group.setAttribute("class", "group");
                if (item.collapsedUntil !== undefined && item.collapsedUntil !== null) group.setAttribute("collapsed-until", item.collapsedUntil);
                max = Math.max(max, sizes.indexOf(item.collapsedUntil));
                item.buttons.forEach(function (button) {
                  max = Math.max(max, sizes.indexOf(button.collapsedUntil));
                  if (navigator.clipboard || button.command !== "paste") temp.push(_this4._addButton(button, group)); //firefox doesn't allow for clipboard button
                });
                toolbar.appendChild(group);
              } else {
                max = Math.max(max, sizes.indexOf(item.collapsedUntil));
                if (navigator.clipboard || item.command !== "paste") temp.push(_this4._addButton(item, toolbar)); //firefox doesn't allow for clipboard button
              }

              toolbar.appendChild(more);
              more.collapseMax = sizes[max];
            });
            return temp;
          }

          return [];
        }
        /**
         * sets up breadcrumbs when editor changes
         * @returns {void}
         */

      }, {
        key: "_editorChange",
        value: function _editorChange() {
          this.range = undefined;

          if (this.c) {
            this.breadcrumbs.controls = this.controls;
            this.breadcrumbs.sticky = this.sticky;
            this.breadcrumbs.controls = this.controls;
            this.breadcrumbs.hidden = !this.controls && !this.alwaysVisible;
            if (!!this.editor) this.editor.parentNode.insertBefore(this.breadcrumbs, this.editor.nextSibling);
          }
        }
        /**
         * Gets updated selected range.
         * @returns {void}
         */

      }, {
        key: "_rangeChange",
        value: function _rangeChange() {
          var _this5 = this;

          if (this.range && this.range.commonAncestorContainer && this.editor && this.editor.contains(this.range.commonAncestorContainer)) {
            this.buttons.forEach(function (button) {
              button.range = undefined;
              button.range = _this5.range;
              button.selectedNode = _this5.selectedNode;
              button.selectionAncestors = _this5.selectionAncestors;
            });

            if (this.breadcrumbs) {
              this.breadcrumbs.controls = this.controls;
              this.breadcrumbs.selectionAncestors = this.selectionAncestors;
              this.breadcrumbs.hidden = !this.controls && !this.alwaysVisible;
            }
          }
        }
        /**
         * Toggles collapsed mode when `rich-text-editor-more-button` is tapped
         * @param {event} e `rich-text-editor-more-button` tap event
         * @returns {void}
         */

      }, {
        key: "_toggleMore",
        value: function _toggleMore(e) {
          this.collapsed = !this.collapsed;
        }
      }, {
        key: "controls",
        get: function get() {
          return !this.editor ? undefined : this.editor.getAttribute("id");
        }
      }]);
      return _class;
    }((0, _richTextEditorStyles.RichTextEditorStyles)(SuperClass));
  };
  /**
   * `rich-text-editor-toolbar`
   * `default toolbar for rich text editor`
   *
   * @element rich-text-editor-toolbar
   */


  _exports.RichTextEditorToolbarBehaviors = RichTextEditorToolbarBehaviors;

  var RichTextEditorToolbar = /*#__PURE__*/function (_RichTextEditorToolba) {
    babelHelpers.inherits(RichTextEditorToolbar, _RichTextEditorToolba);

    var _super2 = _createSuper(RichTextEditorToolbar);

    function RichTextEditorToolbar() {
      babelHelpers.classCallCheck(this, RichTextEditorToolbar);
      return _super2.apply(this, arguments);
    }

    return RichTextEditorToolbar;
  }(RichTextEditorToolbarBehaviors(_litElement.LitElement));

  _exports.RichTextEditorToolbar = RichTextEditorToolbar;
  window.customElements.define(RichTextEditorToolbar.tag, RichTextEditorToolbar);
});