define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RadioBehaviors = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  /**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  var RadioBehaviors = function RadioBehaviors(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass) {
        babelHelpers.inherits(_class, _SuperClass);
        babelHelpers.createClass(_class, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
            this.observer.observe(this, {
              attributes: true,
              childList: true,
              subtree: true
            });
          }
          /**
           * listen for change event
           */

        }, {
          key: "firstUpdated",
          value: function firstUpdated(changedProperties) {
            if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);
            this.selectItem(this.selected);
          }
          /**
           * handle updates
           */

        }, {
          key: "attributeChangedCallback",
          value: function attributeChangedCallback(name, oldVal, newVal) {
            if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "attributeChangedCallback", this)) babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "attributeChangedCallback", this).call(this, name, oldVal, newVal);
            if (name === "selection" && this.selection !== oldValue) this._handleSelectionChange();
          }
        }]);

        function _class() {
          var _this;

          babelHelpers.classCallCheck(this, _class);
          _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class).call(this));

          _this.addEventListener(_this._selectEvent, _this._handleSelectItem);

          return _this;
        }

        babelHelpers.createClass(_class, [{
          key: "render",
          value: function render() {
            return "";
          }
          /**
           * mutation observer for tabs
           * @readonly
           * @returns {object}
           */

        }, {
          key: "_getDataFromItems",

          /**
           * updates array of items
           * @returns
           */
          value: function _getDataFromItems() {
            var _this2 = this;

            var slotted = this.querySelectorAll("".concat(this._query));
            return Object.keys(slotted || {}).map(function (key) {
              return _this2._getDataFromItem(slotted[key], key, _this2.selected);
            });
          }
          /**
           * updates iitem for item array
           * @returns
           */

        }, {
          key: "_getDataFromItem",
          value: function _getDataFromItem(item, index, selected) {
            var data = {
              id: item.id,
              index: parseInt(index),
              node: item,
              innerHTML: item.innerHTML,
              selected: item.getAttribute(selected)
            };
            return data;
          }
          /**
           * selects an item
           * @param {string|object} item id or node
           */

        }, {
          key: "selectItem",
          value: function selectItem(item) {
            if (typeof item === "string") item = this.querySelector("".concat(this._query, "#").concat(item));

            if (item && item.id && !item.disabled && item.id !== this.selection) {
              this.setAttribute("selection", item.id);

              this._handleSelectionChange();
            } else if (!this.querySelector("".concat(this._query, "#").concat(this.selection))) {
              var sel = this.querySelector("".concat(this._query, "[").concat(this._selected, "]")) || this.querySelector("".concat(this._query));
              this.setAttribute("selection", sel ? sel.id : undefined);

              this._handleSelectionChange();
            } else if (this.querySelectorAll("".concat(this._query, "[").concat(this._selected, "]")).length > 1) {
              this._handleSelectionChange();
            }

            this._updateItemData();
          }
          /**
           * updates when slotted item changes
           * @param {*} mutationsList
           * @param {*} observer
           */

        }, {
          key: "_handleItemChange",
          value: function _handleItemChange(mutationsList, observer) {
            var _this3 = this;

            var changed = false;
            mutationsList.forEach(function (m) {
              var added = m.type === "childList" ? m.addedNodes.length > 0 : false,
                  removed = m.type === "childList" && m.removedNodes.length > 0 ? Object.keys(m.removedNodes || {}).filter(function (n) {
                return m.removedNodes[n].id === _this3.selection;
              }).length > 0 : false,
                  id = m.type === "attributes" && m.attributeName === "id";
              changed = changed || added || removed || id;
            });

            if (changed) {
              this.querySelectorAll("".concat(this._query)).forEach(function (i) {
                if (!i.id) i.id = "item-".concat(_this3._generateUUID());
              });
              this.selectItem(this.selection);
            }

            this._updateItemData();
          }
          /**
           * handles item selection event
           * @param {event} e
           */

        }, {
          key: "_handleSelectItem",
          value: function _handleSelectItem(e) {
            e.stopPropagation();
            this.selectItem(e.detail.controls);
          }
          /**
           * shows or hides items based on selection
           */

        }, {
          key: "_handleSelectionChange",
          value: function _handleSelectionChange() {
            var _this4 = this;

            this.querySelectorAll("".concat(this._query)).forEach(function (i) {
              i.id !== _this4.selection ? i.removeAttribute(_this4._selected) : i.setAttribute(_this4._selected, true);
            });
            /**
             * Fires when selection update, so that parent radio group can listen for it.
             * @event selection-changed
             */

            this.dispatchEvent(new CustomEvent("selection-changed", {
              bubbles: false,
              cancelable: true,
              composed: true,
              detail: this
            }));
          }
          /**
           * updates items list and rerenders as needed;
           */

        }, {
          key: "_updateItemData",
          value: function _updateItemData() {
            this.itemData = this._getDataFromItems();
            if (this.render) this.render();
          }
          /**
           * generates a unique id
           * @returns {string } unique id
           */

        }, {
          key: "_generateUUID",
          value: function _generateUUID() {
            return "ss-s-s-s-sss".replace(/s/g, Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1));
          }
          /**
           * life cycle, element is removed from the DOM
           */

        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            if (this.observer && this.observer.disconnect) this.observer.disconnect();
            this.removeEventListener(this._selectEvent, this._handleSelectItem);
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
          }
        }, {
          key: "observer",
          get: function get() {
            var _this5 = this;

            var callback = function callback(mutationsList, observer) {
              return _this5._handleItemChange(mutationsList, observer);
            };

            return new MutationObserver(callback);
          } // properties available to the custom element for data binding

        }, {
          key: "_query",

          /**
           * query selector for slotted children, can be overridden
           * @readonly
           */
          get: function get() {
            return "> item";
          }
          /**
           * attribute to apply to selected item, can be overridden
           * @readonly
           */

        }, {
          key: "_selected",
          get: function get() {
            return "selected";
          }
          /**
           * name of event that selects item, can be overridden
           * @readonly
           */

        }, {
          key: "_selectEvent",
          get: function get() {
            return "select-item";
          }
          /**
           * index of selected item
           * @readonly
           */

        }, {
          key: "selectedIndex",
          get: function get() {
            var _this6 = this;

            var item = this.itemData.filter(function (i) {
              return i.id === _this6.selection;
            });
            return item && item[0] ? item[0].index : 0;
          }
          /**
           * id of selected item
           * @readonly
           */

        }, {
          key: "selection",
          get: function get() {
            return this.getAttribute("selection");
          }
          /**
           * sets id of selected item
           * @readonly
           */
          ,
          set: function set(value) {
            this.setAttribute("selection", value);
          }
        }], [{
          key: "properties",
          get: function get() {
            return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this), {
              itemData: {
                type: Array
              }
            });
          }
        }]);
        return _class;
      }(SuperClass)
    );
  };
  /**
   * RadioBehaviors
   * Provides state management when only one child can be selected at a time.
   */


  _exports.RadioBehaviors = RadioBehaviors;
});