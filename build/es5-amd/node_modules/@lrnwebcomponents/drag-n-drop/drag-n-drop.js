define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DragNDrop = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   *
   * Inspiration from: https://codepen.io/bradtraversy/pen/odmVgN
   */

  /**
   * `drag-n-drop`
   * @element drag-n-drop
   * `drag and drop elements and manager`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @demo demo/index.html
   */
  var DragNDrop =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(DragNDrop, _HTMLElement);
    babelHelpers.createClass(DragNDrop, [{
      key: "html",
      // render function
      get: function get() {
        return "\n<style>\n:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([editing]) .items ::slotted(.hold) {\n  border: solid 5px #ccc;\n}\n\n:host([editing]) .items ::slotted([data-droppable]) {\n  margin: 10px;\n  border: solid 3px salmon;\n  background: white;\n}\n\n:host([editing]) .items ::slotted(.hovered) {\n  background: #f4f4f4;\n  border-style: dashed;\n}\n        </style>\n<div class=\"items\">\n  <slot></slot>\n</div>";
      } // properties available to the custom element for data binding

    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(DragNDrop), "properties", this), {
          editing: {
            name: "editing",
            type: Boolean
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "drag-n-drop";
      }
      /**
       * life cycle
       */

    }]);

    function DragNDrop() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, DragNDrop);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(DragNDrop).call(this)); // dragging tracker

      _this.__dragging = {}; // set tag for later use

      _this.tag = DragNDrop.tag; // map our imported properties json to real props on the element
      // @notice static getter of properties is built via tooling
      // to edit modify src/DragNDrop-properties.json

      var obj = DragNDrop.properties;

      for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
          if (_this.hasAttribute(p)) {
            _this[p] = _this.getAttribute(p);
          } else {
            _this.setAttribute(p, obj[p].value);

            _this[p] = obj[p].value;
          }
        }
      }

      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(DragNDrop, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }
      }
    }, {
      key: "_copyAttribute",
      value: function _copyAttribute(name, to) {
        var recipients = this.shadowRoot.querySelectorAll(to);
        var value = this.getAttribute(name);
        var fname = value == null ? "removeAttribute" : "setAttribute";
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = recipients[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var node = _step.value;
            node[fname](name, value);
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }, {
      key: "_setProperty",
      value: function _setProperty(_ref) {
        var name = _ref.name,
            value = _ref.value;
        this[name] = value;
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "attributeChangedCallback",
      // disconnectedCallback() {}
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        if (attr === "editing") {
          var draggable = this.querySelectorAll("[data-draggable]");
          var droppable = this.querySelectorAll("[data-droppable]");

          if (newValue) {
            // Loop through empty boxes and add listeners
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = droppable[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var dropArea = _step2.value;
                dropArea.setAttribute("droppable", "true");
                dropArea.addEventListener("dragover", this.dragOver.bind(this));
                dropArea.addEventListener("dragenter", this.dragEnter.bind(this));
                dropArea.addEventListener("dragleave", this.dragLeave.bind(this));
                dropArea.addEventListener("drop", this.dragDrop.bind(this));
              } // Loop through fills and add listeners

            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
                  _iterator2.return();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
              for (var _iterator3 = draggable[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                var dragItem = _step3.value;
                dragItem.setAttribute("draggable", "true");
                dragItem.addEventListener("dragstart", this.dragStart.bind(this));
                dragItem.addEventListener("dragend", this.dragEnd.bind(this));
              }
            } catch (err) {
              _didIteratorError3 = true;
              _iteratorError3 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                  _iterator3.return();
                }
              } finally {
                if (_didIteratorError3) {
                  throw _iteratorError3;
                }
              }
            }
          } else {
            // Loop through empty boxes and add listeners
            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
              for (var _iterator4 = droppable[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                var _dropArea = _step4.value;

                _dropArea.removeAttribute("droppable");

                _dropArea.removeEventListener("dragover", this.dragOver.bind(this));

                _dropArea.removeEventListener("dragenter", this.dragEnter.bind(this));

                _dropArea.removeEventListener("dragleave", this.dragLeave.bind(this));

                _dropArea.removeEventListener("drop", this.dragDrop.bind(this));
              } // Loop through fills and add listeners

            } catch (err) {
              _didIteratorError4 = true;
              _iteratorError4 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
                  _iterator4.return();
                }
              } finally {
                if (_didIteratorError4) {
                  throw _iteratorError4;
                }
              }
            }

            var _iteratorNormalCompletion5 = true;
            var _didIteratorError5 = false;
            var _iteratorError5 = undefined;

            try {
              for (var _iterator5 = draggable[Symbol.iterator](), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {
                var _dragItem = _step5.value;

                _dragItem.removeAttribute("draggable");

                _dragItem.removeEventListener("dragstart", this.dragStart.bind(this));

                _dragItem.removeEventListener("dragend", this.dragEnd.bind(this));
              }
            } catch (err) {
              _didIteratorError5 = true;
              _iteratorError5 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion5 && _iterator5.return != null) {
                  _iterator5.return();
                }
              } finally {
                if (_didIteratorError5) {
                  throw _iteratorError5;
                }
              }
            }
          }
        }
      } // Drag Functions

    }, {
      key: "dragStart",
      value: function dragStart(e) {
        var _this2 = this;

        this.__dragging = e.target;
        this.__dragging.className += " hold";
        setTimeout(function () {
          return _this2.__dragging.className = "invisible";
        }, 0);
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }, {
      key: "dragEnd",
      value: function dragEnd(e) {
        this.__dragging.className = "fill";
      }
    }, {
      key: "dragOver",
      value: function dragOver(e) {
        e.preventDefault();
      }
    }, {
      key: "dragEnter",
      value: function dragEnter(e) {
        e.preventDefault();
        e.target.className += " hovered";
      }
    }, {
      key: "dragLeave",
      value: function dragLeave(e) {
        e.target.className = "empty";
      }
    }, {
      key: "dragDrop",
      value: function dragDrop(e) {
        e.target.className = "empty";
        e.target.appendChild(this.__dragging);
      }
    }, {
      key: "editing",
      get: function get() {
        this.getAttribute("editing");
      },
      set: function set(val) {
        if (!val) {
          this.removeAttribute("editing");
        } else {
          this.setAttribute("editing", val);
        }
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["editing"];
      }
    }]);
    return DragNDrop;
  }(babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.DragNDrop = DragNDrop;
  window.customElements.define(DragNDrop.tag, DragNDrop);
});