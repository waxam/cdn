define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DragNDrop = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   *
   * Inspiration from: https://codepen.io/bradtraversy/pen/odmVgN
   */

  /**
   * `drag-n-drop`
   * @element drag-n-drop
   * `drag and drop elements and manager`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @demo demo/index.html
   */
  var DragNDrop = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(DragNDrop, _HTMLElement);

    var _super = _createSuper(DragNDrop);

    /**
     * life cycle
     */
    function DragNDrop() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, DragNDrop);
      _this = _super.call(this); // dragging tracker

      _this.__dragging = {}; // set tag for later use

      _this.tag = DragNDrop.tag; // map our imported properties json to real props on the element
      // @notice static getter of properties is built via tooling
      // to edit modify src/DragNDrop-properties.json

      var obj = DragNDrop.properties;

      for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
          if (_this.hasAttribute(p)) {
            _this[p] = _this.getAttribute(p);
          } else {
            _this.setAttribute(p, obj[p].value);

            _this[p] = obj[p].value;
          }
        }
      }

      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(DragNDrop, [{
      key: "html",
      get: // render function
      function get() {
        return "\n<style>\n:host {\n  display: block;\n}\n\n:host([hidden]) {\n  display: none;\n}\n\n:host([editing]) .items ::slotted(.hold) {\n  border: solid 5px #ccc;\n}\n\n:host([editing]) .items ::slotted([data-droppable]) {\n  margin: 10px;\n  border: solid 3px salmon;\n  background: white;\n}\n\n:host([editing]) .items ::slotted(.hovered) {\n  background: #f4f4f4;\n  border-style: dashed;\n}\n        </style>\n<div class=\"items\">\n  <slot></slot>\n</div>";
      } // properties available to the custom element for data binding

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }
      }
    }, {
      key: "_copyAttribute",
      value: function _copyAttribute(name, to) {
        var recipients = this.shadowRoot.querySelectorAll(to);
        var value = this.getAttribute(name);
        var fname = value == null ? "removeAttribute" : "setAttribute";

        var _iterator = _createForOfIteratorHelper(recipients),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var node = _step.value;
            node[fname](name, value);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
    }, {
      key: "_setProperty",
      value: function _setProperty(_ref) {
        var name = _ref.name,
            value = _ref.value;
        this[name] = value;
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "editing",
      get: function get() {
        return this.getAttribute("editing");
      },
      set: function set(val) {
        if (!val) {
          this.removeAttribute("editing");
        } else {
          this.setAttribute("editing", val);
        }
      } // disconnectedCallback() {}

    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        if (attr === "editing") {
          var draggable = this.querySelectorAll("[data-draggable]");
          var droppable = this.querySelectorAll("[data-droppable]");

          if (newValue) {
            // Loop through empty boxes and add listeners
            var _iterator2 = _createForOfIteratorHelper(droppable),
                _step2;

            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                var dropArea = _step2.value;
                dropArea.setAttribute("droppable", "true");
                dropArea.addEventListener("dragover", this.dragOver.bind(this));
                dropArea.addEventListener("dragenter", this.dragEnter.bind(this));
                dropArea.addEventListener("dragleave", this.dragLeave.bind(this));
                dropArea.addEventListener("drop", this.dragDrop.bind(this));
              } // Loop through fills and add listeners

            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }

            var _iterator3 = _createForOfIteratorHelper(draggable),
                _step3;

            try {
              for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
                var dragItem = _step3.value;
                dragItem.setAttribute("draggable", "true");
                dragItem.addEventListener("dragstart", this.dragStart.bind(this));
                dragItem.addEventListener("dragend", this.dragEnd.bind(this));
              }
            } catch (err) {
              _iterator3.e(err);
            } finally {
              _iterator3.f();
            }
          } else {
            // Loop through empty boxes and add listeners
            var _iterator4 = _createForOfIteratorHelper(droppable),
                _step4;

            try {
              for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {
                var _dropArea = _step4.value;

                _dropArea.removeAttribute("droppable");

                _dropArea.removeEventListener("dragover", this.dragOver.bind(this));

                _dropArea.removeEventListener("dragenter", this.dragEnter.bind(this));

                _dropArea.removeEventListener("dragleave", this.dragLeave.bind(this));

                _dropArea.removeEventListener("drop", this.dragDrop.bind(this));
              } // Loop through fills and add listeners

            } catch (err) {
              _iterator4.e(err);
            } finally {
              _iterator4.f();
            }

            var _iterator5 = _createForOfIteratorHelper(draggable),
                _step5;

            try {
              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {
                var _dragItem = _step5.value;

                _dragItem.removeAttribute("draggable");

                _dragItem.removeEventListener("dragstart", this.dragStart.bind(this));

                _dragItem.removeEventListener("dragend", this.dragEnd.bind(this));
              }
            } catch (err) {
              _iterator5.e(err);
            } finally {
              _iterator5.f();
            }
          }
        }
      } // Drag Functions

    }, {
      key: "dragStart",
      value: function dragStart(e) {
        var _this2 = this;

        this.__dragging = e.target;
        this.__dragging.className += " hold";
        setTimeout(function () {
          return _this2.__dragging.className = "invisible";
        }, 0);
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }, {
      key: "dragEnd",
      value: function dragEnd(e) {
        this.__dragging.className = "fill";
      }
    }, {
      key: "dragOver",
      value: function dragOver(e) {
        e.preventDefault();
      }
    }, {
      key: "dragEnter",
      value: function dragEnter(e) {
        e.preventDefault();
        e.target.className += " hovered";
      }
    }, {
      key: "dragLeave",
      value: function dragLeave(e) {
        e.target.className = "empty";
      }
    }, {
      key: "dragDrop",
      value: function dragDrop(e) {
        e.target.className = "empty";
        e.target.appendChild(this.__dragging);
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(DragNDrop), "properties", this)), {}, {
          editing: {
            name: "editing",
            type: Boolean
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "drag-n-drop";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["editing"];
      }
    }]);
    return DragNDrop;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.DragNDrop = DragNDrop;
  window.customElements.define(DragNDrop.tag, DragNDrop);
});