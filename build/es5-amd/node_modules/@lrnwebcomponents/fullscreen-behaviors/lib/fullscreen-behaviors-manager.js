define(["exports", "meta", "../../../lit-element/lit-element.js", "../../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _litElement, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FullscreenBehaviorsManager = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `fullscreen-behaviors-manager`
   *
   * @demo demo/viewer.html
   * @element fullscreen-behaviors-manager
   *
   */
  var FullscreenBehaviorsManager = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(FullscreenBehaviorsManager, _LitElement);

    var _super = _createSuper(FullscreenBehaviorsManager);

    babelHelpers.createClass(FullscreenBehaviorsManager, null, [{
      key: "tag",
      get: function get() {
        return "fullscreen-behaviors-manager";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          __loaded: {
            type: Boolean
          },
          __callbacks: {
            type: Array
          },
          __fullscreen: {
            type: Boolean
          }
        };
      }
    }]);

    function FullscreenBehaviorsManager() {
      var _this;

      babelHelpers.classCallCheck(this, FullscreenBehaviorsManager);
      _this = _super.call(this);
      _this.__callbacks = [];
      _this.__loaded = false;
      _this.__fullscreen = false;

      if ((typeof screenfull === "undefined" ? "undefined" : babelHelpers.typeof(screenfull)) === "object") {
        _this._setLoaded();
      } else {
        var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

        var location = "".concat(basePath, "screenfull/dist/screenfull.js");
        window.ESGlobalBridge.requestAvailability();
        window.ESGlobalBridge.instance.load("screenfullLib", location);
        window.addEventListener("es-bridge-screenfullLib-loaded", _this._setLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      }

      return _this;
    } // simple path from a url modifier


    babelHelpers.createClass(FullscreenBehaviorsManager, [{
      key: "pathFromUrl",
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
      /**
       * whether or not the fullscreen mode is be disabled
       * @returns {boolean}
       */

    }, {
      key: "disconnectedCallback",

      /**
       * life cycle, element is removed from the DOM
       */
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-screenfullLib-loaded", this._setLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(FullscreenBehaviorsManager.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * once screenfull is loaded, sets the element's __loaded property to true and runs array callbacks
       * @param {event} e screenfull load
       */

    }, {
      key: "_setLoaded",
      value: function _setLoaded(e) {
        this.__loaded = true;
        (this.__callbacks || []).forEach(function (callback) {
          return callback();
        });
      }
    }, {
      key: "enabled",
      get: function get() {
        var mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        return (typeof screenfull === "undefined" ? "undefined" : babelHelpers.typeof(screenfull)) === "object" && screenfull.isEnabled && !mobile;
      }
    }, {
      key: "fullscreen",
      get: function get() {
        return this.__fullscreen;
      }
    }]);
    return FullscreenBehaviorsManager;
  }(_litElement.LitElement);

  _exports.FullscreenBehaviorsManager = FullscreenBehaviorsManager;
  window.customElements.define(FullscreenBehaviorsManager.tag, FullscreenBehaviorsManager);
  // register globally so we can make sure there is only one
  window.FullscreenBehaviorsManager = window.FullscreenBehaviorsManager || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.FullscreenBehaviorsManager.requestAvailability = function () {
    if (!window.FullscreenBehaviorsManager.instance) {
      window.FullscreenBehaviorsManager.instance = document.createElement("fullscreen-behaviors-manager");
      document.body.appendChild(window.FullscreenBehaviorsManager.instance);
    }

    return window.FullscreenBehaviorsManager.instance;
  };
});