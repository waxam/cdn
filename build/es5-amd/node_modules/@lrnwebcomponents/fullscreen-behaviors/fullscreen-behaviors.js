define(["exports", "../../lit-element/lit-element.js", "./lib/fullscreen-behaviors-manager.js"], function (_exports, _litElement, _fullscreenBehaviorsManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FullscreenBehaviors = _exports.FullscreenBehaviorsEl = void 0;

  function _templateObject_cdde5150576311eba9ce094baa5ca644() {
    var data = babelHelpers.taggedTemplateLiteral([" <slot></slot> "]);

    _templateObject_cdde5150576311eba9ce094baa5ca644 = function _templateObject_cdde5150576311eba9ce094baa5ca644() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var FullscreenBehaviors = function FullscreenBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      babelHelpers.createClass(_class, [{
        key: "render",
        value: function render() {
          return (0, _litElement.html)(_templateObject_cdde5150576311eba9ce094baa5ca644());
        }
      }], [{
        key: "properties",
        // properties available to the custom element for data binding
        get: function get() {
          return {
            __fullscreen: {
              type: Boolean,
              attribute: "fullscreen"
            },
            __fullscreenEnabled: {
              type: Boolean,
              attribute: "fullscreen-enabled"
            }
          };
        }
      }]);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.__fullscreen = false;
        _this.__fullscreenEnabled = false;

        if (!_this.fullscreenManager.__loaded) {
          var callback = function callback() {
            _this._updateEnabled();

            window.removeEventListener("es-bridge-screenfullLib-loaded", callback.bind(babelHelpers.assertThisInitialized(_this)));
          };

          window.addEventListener("es-bridge-screenfullLib-loaded", callback.bind(babelHelpers.assertThisInitialized(_this)));
        } else {
          _this._updateEnabled();
        }

        return _this;
      }
      /**
       * life cycle, element is removed from the DOM
       */


      babelHelpers.createClass(_class, [{
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          screenfull.off("change", this._updateFullscreen.bind(this));
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
        }
      }, {
        key: "_updateFullscreen",
        value: function _updateFullscreen() {
          var fullscreen = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : screenfull && screenfull.isFullscreen;
          this.__fullscreen = fullscreen;
        }
      }, {
        key: "_updateEnabled",
        value: function _updateEnabled() {
          this.__fullscreenEnabled = this.fullscreenManager && this.fullscreenManager.enabled;

          if (screenfull && screenfull.isEnabled) {
            screenfull.on("change", this._updateFullscreen.bind(this));
          }
        }
      }, {
        key: "toggleFullscreen",
        value: function toggleFullscreen() {
          var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !screenfull.isFullscreen;

          if (this.fullscreenEnabled && screenfull) {
            if (mode) {
              screenfull.request(this.fullscreenTarget);
            } else {
              screenfull.exit(this.fullscreenTarget);
            }

            this._updateFullscreen(mode);
          }
        }
      }, {
        key: "fullscreenManager",

        /**
         * gets the fullscreen fullscreenManager singleton
         *
         * @readonly
         * @returns {object}
         */
        get: function get() {
          return window.FullscreenBehaviorsManager.requestAvailability();
        }
        /**
         * element to make fullscreen, can be overidden
         *
         * @readonly
         */

      }, {
        key: "fullscreenTarget",
        get: function get() {
          return this;
        }
        /**
         * whether device is ready and capable for fullscreen
         *
         * @readonly
         */

      }, {
        key: "fullscreenEnabled",
        get: function get() {
          return this.__fullscreenEnabled;
        }
      }], [{
        key: "tag",
        get: function get() {
          return "fullscreen-behaviors";
        }
      }]);
      return _class;
    }(SuperClass);
  };
  /**
   * `fullscreen-behaviors`
   * abstracted fullscreen behaviors
   *
   * @element fullscreen-behaviors
   */


  _exports.FullscreenBehaviors = FullscreenBehaviors;

  var FullscreenBehaviorsEl = /*#__PURE__*/function (_FullscreenBehaviors) {
    babelHelpers.inherits(FullscreenBehaviorsEl, _FullscreenBehaviors);

    var _super2 = _createSuper(FullscreenBehaviorsEl);

    function FullscreenBehaviorsEl() {
      babelHelpers.classCallCheck(this, FullscreenBehaviorsEl);
      return _super2.apply(this, arguments);
    }

    return FullscreenBehaviorsEl;
  }(FullscreenBehaviors(_litElement.LitElement));

  _exports.FullscreenBehaviorsEl = FullscreenBehaviorsEl;
  window.customElements.define(FullscreenBehaviorsEl.tag, FullscreenBehaviorsEl);
});