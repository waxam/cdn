define(["exports", "meta", "../es-global-bridge/es-global-bridge.js", "../../lit-element/lit-element.js"], function (_exports, meta, _esGlobalBridge, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FullscreenBehaviors = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  /**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `fullscreen-behaviors`
   *
   * @demo demo/viewer.html
   * @element fullscreen-behaviors
   *
   */
  var FullscreenBehaviors =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(FullscreenBehaviors, _LitElement);
    babelHelpers.createClass(FullscreenBehaviors, null, [{
      key: "tag",
      get: function get() {
        return "fullscreen-behaviors";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          __fullscreenBehaviorsLoaded: {
            type: Boolean
          }
        };
      }
    }]);

    function FullscreenBehaviors() {
      var _this;

      babelHelpers.classCallCheck(this, FullscreenBehaviors);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(FullscreenBehaviors).call(this));
      _this.__fullscreenBehaviorsLoaded = false;

      if ((typeof screenfull === "undefined" ? "undefined" : babelHelpers.typeof(screenfull)) === "object") {
        _this._onFullscreenBehaviorsLoaded();
      } else {
        var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

        var location = "".concat(basePath, "screenfull/dist/screenfull.js");
        window.ESGlobalBridge.requestAvailability();
        window.ESGlobalBridge.instance.load("screenfullLib", location);
        window.addEventListener("es-bridge-screenfullLib-loaded", _this._onFullscreenBehaviorsLoaded);
      }

      return _this;
    }
    /**
     * life cycle, element is removed from the DOM
     */


    babelHelpers.createClass(FullscreenBehaviors, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-screenfullLib-loaded", this._onFullscreenBehaviorsLoaded);
        babelHelpers.get(babelHelpers.getPrototypeOf(FullscreenBehaviors.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * whether or not the fullscreen mode is be disabled
       * @returns {boolean}
       */

    }, {
      key: "_onFullscreenBehaviorsLoaded",

      /**
       * sets the element's __screenfullLoaded variable to true once screenfull is loaded
       * and adds an event listener for screenfull
       * @param {event} e screenfull load
       */
      value: function _onFullscreenBehaviorsLoaded() {
        this.__fullscreenBehaviorsLoaded = true;
      }
    }, {
      key: "fullscreenEnabled",
      get: function get() {
        var mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        return (typeof screenfull === "undefined" ? "undefined" : babelHelpers.typeof(screenfull)) === "object" && !mobile;
      }
    }]);
    return FullscreenBehaviors;
  }(_litElement.LitElement);

  _exports.FullscreenBehaviors = FullscreenBehaviors;
  window.customElements.define(FullscreenBehaviors.tag, FullscreenBehaviors);
  // register globally so we can make sure there is only one
  window.FullscreenBehaviors = window.FullscreenBehaviors || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.FullscreenBehaviors.requestAvailability = function () {
    if (!window.FullscreenBehaviors.instance) {
      window.FullscreenBehaviors.instance = document.createElement("fullscreen-behaviors");
      document.body.appendChild(window.FullscreenBehaviors.instance);
    }

    return window.FullscreenBehaviors.instance;
  };
});