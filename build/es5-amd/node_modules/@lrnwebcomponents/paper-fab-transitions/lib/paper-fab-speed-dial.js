define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/wrap.js", "../../../@polymer/iron-flex-layout/iron-flex-layout.js", "../../../@polymer/iron-dropdown/iron-dropdown.js", "../../../@polymer/neon-animation/neon-animations.js", "./paper-square-grow-animation.js"], function (_exports, _polymerElement, _wrap, _ironFlexLayout, _ironDropdown, _neonAnimations, _paperSquareGrowAnimation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperFabSpeedDial = void 0;

  function _templateObject_6aa08a30d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style>\n          :host .vertical ::content .dropdown-content {\n            @apply --layout-vertical;\n          }\n          :host .horizontal ::content .dropdown-content {\n            @apply --layout-horizontal;\n          }\n          :host ::content .dropdown-content > * {\n            margin: 8px;\n            @apply --paper-fab-speed-dial-option;\n          }\n        </style>\n      </custom-style>\n      <slot id=\"fabContainer\" name=\"dropdown-trigger\"></slot>\n      <iron-dropdown\n        id=\"dropdown\"\n        open-animation-config=\"[[openAnimationConfig]]\"\n        close-animation-config=\"[[closeAnimationConfig]]\"\n      >\n        <slot id=\"contentContainer\" name=\"dropdown-content\"></slot>\n      </iron-dropdown>\n    "]);

    _templateObject_6aa08a30d34d11ea880ba1e93364c49c = function _templateObject_6aa08a30d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
  `paper-fab-speed-dial` builds on `iron-dropdown` to allow showing a list of
  speed dial actions when tapping on a floating action button.
  
  This element expects its content to contain two children: one with the class
  `dropdown-trigger` , which is initially visible and acts as the trigger, and
  another one with the class `dropdown-content` , which will be hidden until the
  trigger is tapped, and will contain the speed dial option elements.
  
  Example:
  
      <paper-fab-speed-dial>
        <paper-fab icon="add" class="dropdown-trigger"></paper-fab>
        <div class="dropdown-content">
          <paper-fab mini icon="star-border"></paper-fab>
          <paper-fab mini icon="star-half"></paper-fab>
          <paper-fab mini icon="star"></paper-fab>
        </div>
      </paper-fab-speed-dial>
  
  The `direction` property can be set to `top`, `bottom`, `left` or `right` to
  control the direction in which the options dropdown is expanded.
  
  ### Styling
  
  The following custom properties and mixins are also available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--paper-fab-speed-dial-option` | Mixin applied to each option element | `{}`
  
  @hero hero.svg
  * @demo demo/index.html
  */
  var PaperFabSpeedDial =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(PaperFabSpeedDial, _PolymerElement);

    function PaperFabSpeedDial() {
      babelHelpers.classCallCheck(this, PaperFabSpeedDial);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PaperFabSpeedDial).apply(this, arguments));
    }

    babelHelpers.createClass(PaperFabSpeedDial, [{
      key: "getDistributedNodes",
      value: function getDistributedNodes(node) {
        return node.localName === "slot" ? (0, _wrap.wrap)(node).assignedNodes({
          flatten: true
        }) : [];
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(PaperFabSpeedDial.prototype), "ready", this).call(this);
        var fab = this.getDistributedNodes(this.shadowRoot.querySelector("#fabContainer"))[0];
        fab.addEventListener("click", function () {
          this.shadowRoot.querySelector("#dropdown").open();
        }.bind(this));
        var content = this.getDistributedNodes(this.shadowRoot.querySelector("#contentContainer"))[0];
        content.addEventListener("click", function () {
          this.shadowRoot.querySelector("#dropdown").close();
        }.bind(this));
      }
      /**
       * Show the speed dial options.
       */

    }, {
      key: "open",
      value: function open() {
        this.shadowRoot.querySelector("#dropdown").open();
      }
      /**
       * Hide the speed dial options.
       */

    }, {
      key: "close",
      value: function close() {
        this.shadowRoot.querySelector("#dropdown").close();
      }
    }, {
      key: "_updateDropdown",
      value: function _updateDropdown(direction, offset) {
        var d = this.shadowRoot.querySelector("#dropdown");

        switch (direction) {
          case "bottom":
            d.verticalAlign = "top";
            d.horizontalOffset = 0;
            d.verticalOffset = offset;
            d.classList.add("vertical");
            d.classList.remove("horizontal");
            break;

          case "top":
            d.verticalAlign = "bottom";
            d.horizontalOffset = 0;
            d.verticalOffset = offset;
            d.classList.add("vertical");
            d.classList.remove("horizontal");
            break;

          case "right":
            d.horizontalAlign = "left";
            d.horizontalOffset = offset;
            d.verticalOffset = 0;
            d.classList.add("horizontal");
            d.classList.remove("vertical");
            break;

          case "left":
            d.horizontalAlign = "right";
            d.horizontalOffset = offset;
            d.verticalOffset = 0;
            d.classList.add("horizontal");
            d.classList.remove("vertical");
            break;

          default:
            throw "Invalid direction. Must be one of [top, bottom, left, right].";
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6aa08a30d34d11ea880ba1e93364c49c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "paper-fab-speed-dial";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The direction in which to expand the options. One of `top`, `bottom`
           * `left`
           * @element left and `right`.
           */
          direction: {
            type: String,
            value: "bottom"
          },

          /**
           * A pixel value for the distance of the first option fron the trigger
           * button.
           */
          offset: {
            type: Number,
            value: 66
          },

          /**
           * An animation config. If provided, this will be used to animate the
           * opening of the options dropdown.
           */
          openAnimationConfig: {
            type: Array,
            value: function value() {
              return [{
                name: "fade-in-animation",
                timing: {
                  delay: 150,
                  duration: 50
                }
              }, {
                name: "paper-square-grow-animation",
                startSize: 56,
                timing: {
                  delay: 150,
                  duration: 200
                }
              }];
            }
          },

          /**
           * An animation config. If provided, this will be used to animate the
           * closing of the options dropdown.
           */
          closeAnimationConfig: {
            type: Array,
            value: function value() {
              return [{
                name: "fade-out-animation",
                timing: {
                  duration: 200
                }
              }];
            }
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_updateDropdown(direction, offset)"];
      }
    }]);
    return PaperFabSpeedDial;
  }(_polymerElement.PolymerElement);

  _exports.PaperFabSpeedDial = PaperFabSpeedDial;
  window.customElements.define(PaperFabSpeedDial.tag, PaperFabSpeedDial);
});