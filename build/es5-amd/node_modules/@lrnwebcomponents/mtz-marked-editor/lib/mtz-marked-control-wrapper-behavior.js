define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.mtzMarkedControlWrapperBehaviorImpl = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var mtzMarkedControlWrapperBehaviorImpl = function mtzMarkedControlWrapperBehaviorImpl(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass) {
        babelHelpers.inherits(_class, _SuperClass);

        function _class() {
          babelHelpers.classCallCheck(this, _class);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class).apply(this, arguments));
        }

        babelHelpers.createClass(_class, [{
          key: "_handleCommand",

          /**
           * Toggles a wrapping syntax around selected text
           * @param {MouseEvent|KeyboardEvent} event
           * @protected
           */
          value: function _handleCommand(event) {
            event.preventDefault();
            event.stopPropagation();
            var cursor = 0;
            var editor = this.__editor;
            var selected = editor.getSelection();
            var content = editor.getContent(); // Toggle syntax

            if (content.substr(selected.start - this.syntaxPrefix.length, this.syntaxPrefix.length) === this.syntaxPrefix && content.substr(selected.end, this.syntaxSuffix.length) === this.syntaxSuffix) {
              editor.setSelection(selected.start - this.syntaxPrefix.length, selected.end + this.syntaxSuffix.length);
              editor.replaceSelection(selected.text);
              cursor = selected.start - this.syntaxPrefix.length;
            } else {
              editor.replaceSelection("".concat(this.syntaxPrefix).concat(selected.text).concat(this.syntaxSuffix));
              cursor = selected.start + this.syntaxSuffix.length;
            } // Set Cursor location


            editor.setSelection(cursor, cursor + selected.text.length);
            editor.getTextarea().focus();
          }
        }], [{
          key: "properties",
          get: function get() {
            return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this), {
              syntaxPrefix: String,
              // Must implement
              syntaxSuffix: {
                // Optionally implement
                type: String,
                value: ""
              }
            });
          }
        }]);
        return _class;
      }(SuperClass)
    );
  };

  _exports.mtzMarkedControlWrapperBehaviorImpl = mtzMarkedControlWrapperBehaviorImpl;
});