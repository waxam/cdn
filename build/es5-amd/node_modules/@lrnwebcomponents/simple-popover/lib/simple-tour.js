define(["exports", "../../../lit-element/lit-element.js", "../../../lit-html/lib/render.js", "../../../lit-html/directives/unsafe-html.js", "./simple-popover-manager.js"], function (_exports, _litElement, _render, _unsafeHtml, _simplePopoverManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleTourManager = _exports.TourStop = _exports.SimpleTour = void 0;

  function _templateObject2_fd8da9f0512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral(["", "\n          <h3>\n            ", "\n          </h3>\n          ", "", ""]);

    _templateObject2_fd8da9f0512d11eba3cb872b69c5cbbb = function _templateObject2_fd8da9f0512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _templateObject_fd8da9f0512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral([" <h3>\n        ", "\n        <span style=\"margin-left:16px\"\n          >", "/", "</span\n        >\n      </h3>\n      <button\n        @click=\"", "\"\n        ?disabled=\"", "\"\n      >\n        Previous\n      </button>\n      <button\n        @click=\"", "\"\n        ?disabled=\"", "\"\n      >\n        Next</button\n      ><button @click=\"", "\">Stop tour</button>"]);

    _templateObject_fd8da9f0512d11eba3cb872b69c5cbbb = function _templateObject_fd8da9f0512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var SimpleTour = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(SimpleTour, _LitElement);

    var _super = _createSuper(SimpleTour);

    function SimpleTour() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleTour);
      _this = _super.call(this);
      _this.stacks = {};
      _this.orientation = "lr";
      _this.active = null;
      _this.tourInfo = {};
      _this.activeElementDelay = 500;
      _this.stop = -1;
      window.addEventListener("simple-tour-register", _this.registerNewTourEvent.bind(babelHelpers.assertThisInitialized(_this)));
      window.addEventListener("simple-tour-create-tour-stop", _this.createTourStopEvent.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(SimpleTour, [{
      key: "registerNewTourEvent",
      value: function registerNewTourEvent(e) {
        this.registerNewTour(e.detail);
      }
    }, {
      key: "registerNewTour",
      value: function registerNewTour(newTour) {
        if (!this.stacks[newTour.key]) {
          this.stacks[newTour.key] = [];
        }

        if (!this.tourInfo[newTour.key]) {
          this.tourInfo[newTour.key] = newTour;
        }

        return this.stacks[newTour.key];
      }
      /**
       * create tour stop via events
       */

    }, {
      key: "createTourStopEvent",
      value: function createTourStopEvent(e) {
        this.createTourStop(e.detail.name, e.detail.target, e.detail.title, e.detail.description);
      }
      /**
       * Create a tour stop, add to the stack, then return the stop object
       */

    }, {
      key: "createTourStop",
      value: function createTourStop(name, target, title, description) {
        var s = new TourStop();
        s.target = target;
        s.title = title;
        s.description = description;
        this.addStops(name, [s]);
        return s;
      }
      /**
       * It's possible we drop a target from the DOM and then
       * have to remove it from the tour
       */

    }, {
      key: "removeTarget",
      value: function removeTarget(name, target) {
        var _this2 = this;

        var dropList = [];
        this.stacks[name].forEach(function (item, index) {
          if (item.target === target) {
            dropList.push(index);
          }
        });
        dropList.forEach(function (i) {
          _this2.stacks[name].splice(i, 1);
        });
      }
      /**
       * Add stops to the tour
       */

    }, {
      key: "addStops",
      value: function addStops(name, stops) {
        if (!this.stacks[name]) {
          this.stacks[name] = [];
        }

        this.stacks[name] = this.stacks[name].concat(stops);
      }
    }, {
      key: "hasNext",
      value: function hasNext() {
        return this.stop < this.stacks[this.active].length - 1;
      }
    }, {
      key: "hasPrev",
      value: function hasPrev() {
        return this.stop > 0;
      }
      /**
       * Move ahead or back in the stack
       */

    }, {
      key: "nextStop",
      value: function nextStop(e) {
        if (this.stop < this.stacks[this.active].length) {
          this.stop += 1;
        }
      }
    }, {
      key: "prevStop",
      value: function prevStop(e) {
        if (this.stop > 0) {
          this.stop -= 1;
        }
      }
    }, {
      key: "startTour",
      value: function startTour(name) {
        this.active = name;
      }
    }, {
      key: "stopTour",
      value: function stopTour(e) {
        window.SimplePopoverManager.requestAvailability().setPopover(this, this, false, this.orientation);
        this.stop = -1;
        this.active = null;
      }
      /**
       * Render tour buttons as block
       */

    }, {
      key: "tourButtons",
      value: function tourButtons() {
        return (0, _litElement.html)(_templateObject_fd8da9f0512d11eba3cb872b69c5cbbb(), this.tourInfo[this.active].name, this.stop + 1, this.stacks[this.active].length, this.prevStop.bind(this), !this.hasPrev(), this.nextStop.bind(this), !this.hasNext(), this.stopTour.bind(this));
      }
      /**
       * Simple utility to do nice scrolling or only scroll if we can't see it
       * as that is better behavior but not in all browsers
       */

    }, {
      key: "scrollHere",
      value: function scrollHere(node) {
        // scroll to it
        if (typeof node.scrollIntoViewIfNeeded === "function") {
          node.scrollIntoViewIfNeeded(true);
        } else {
          node.scrollIntoView({
            behavior: "smooth",
            inline: "center"
          });
        }
      }
      /**
       * The manager was called and he's pissed. Do not cross Go, do not collect $200 in tips.
       * You're fired. Me, you, every body. We're fired because someone just asked for the manager
       * to do something else and we were already taking people on a tour and now the kitchen
       * is on fire and someone must be blamed.
       *
       * Also, global calls this to clean up local state when global is hijacked by another project
       * that also leverages the singleton and wants to ensure everyone cleans up after themselves
       * instead of flipping tables on their way out the door. We'll call this function pack up
       * on a Friday to avoid incidents.
       */

    }, {
      key: "managerReset",
      value: function managerReset() {
        this.stopTour();
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "active" && _this3.active) {
            _this3.stop = 0;
          }

          if (propName == "stop" && _this3.stop != -1 || propName == "active" && _this3.active) {
            (0, _render.render)(document.createElement("div"), window.SimplePopoverManager.requestAvailability());
            var content = (0, _litElement.html)(_templateObject2_fd8da9f0512d11eba3cb872b69c5cbbb(), _this3.tourButtons(), (0, _unsafeHtml.unsafeHTML)("<span>" + _this3.stacks[_this3.active][_this3.stop].title + "</span>"), (0, _unsafeHtml.unsafeHTML)("<p>" + _this3.stacks[_this3.active][_this3.stop].description + "</p>"), _this3.tourInfo[_this3.active].style ? (0, _unsafeHtml.unsafeHTML)("<style>" + _this3.tourInfo[_this3.active].style + "</style>") : "");
            (0, _render.render)(content, window.SimplePopoverManager.requestAvailability());
            window.SimplePopoverManager.requestAvailability().setPopover(_this3, _this3.stacks[_this3.active][_this3.stop].target, true, _this3.orientation);

            _this3.scrollHere(_this3.stacks[_this3.active][_this3.stop].target);

            var target = _this3.stacks[_this3.active][_this3.stop].target;

            var part = _this3.stacks[_this3.active][_this3.stop].target.getAttribute("part");

            target.setAttribute("part", "simple-tour-active");
            setTimeout(function () {
              if (part == null || part == "simple-tour-active") {
                target.removeAttribute("part");
              } else {
                target.setAttribute("part", part);
              }
            }, _this3.activeElementDelay);
          }
        });
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          stop: {
            type: Number
          },
          active: {
            type: String
          },
          stacks: {
            type: Object
          },
          activeElementDelay: {
            type: Number
          }
        };
      }
    }]);
    return SimpleTour;
  }(_litElement.LitElement);
  /**
   * Simple Tour Stop object for consistency
   */


  _exports.SimpleTour = SimpleTour;

  var TourStop = function TourStop() {
    babelHelpers.classCallCheck(this, TourStop);
    this.target = null;
    this.title = "Title";
    this.description = "<p>Description</p>";
  };

  _exports.TourStop = TourStop;
  customElements.define("simple-tour", SimpleTour);
  // register globally so we can make sure there is only one
  window.SimpleTourManager = window.SimpleTourManager || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.SimpleTourManager.requestAvailability = function () {
    if (!window.SimpleTourManager.instance) {
      window.SimpleTourManager.instance = document.createElement("simple-tour");
      document.body.appendChild(window.SimpleTourManager.instance);
    }

    return window.SimpleTourManager.instance;
  }; // self append


  var SimpleTourManager = window.SimpleTourManager.requestAvailability();
  _exports.SimpleTourManager = SimpleTourManager;
});