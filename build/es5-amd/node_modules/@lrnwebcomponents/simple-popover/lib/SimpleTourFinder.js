define(["exports", "./simple-tour.js"], function (_exports, _simpleTour) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleTourFinder = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SimpleTourFinder = function SimpleTourFinder(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.tourName = "default";
        return _this;
      }
      /**
       * Called every time the element is inserted into the DOM. Useful for
       * running setup code, such as fetching resources or rendering.
       * Generally, you should try to delay work until this time.
       */


      babelHelpers.createClass(_class, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          }

          if (!babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) {
            this.discoverSimpleTourStops();
          }
        }
        /**
         * Called every time the element is removed from the DOM. Useful for
         * running clean up code (removing event listeners, etc.).
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          // @todo make sure we remove the items from the tour if the
          // element they are related to gets removed from the page
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
        }
        /**
         * LitElement ready life cycle
         */

      }, {
        key: "firstUpdated",
        value: function firstUpdated(changedProperties) {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "firstUpdated", this).call(this, changedProperties);
          }

          this.discoverSimpleTourStops();
        } // find all items and automatically register with the tour

      }, {
        key: "discoverSimpleTourStops",
        value: function discoverSimpleTourStops() {
          var _this2 = this;

          var items = this.shadowRoot.querySelectorAll("[data-simple-tour-stop]");
          items.forEach(function (el) {
            try {
              // cascade title selection so it can be an already established attribute
              var title = "";

              if (el.getAttribute("data-stop-title") && el.getAttribute(el.getAttribute("data-stop-title"))) {
                title = el.getAttribute(el.getAttribute("data-stop-title"));
              } else if (el.querySelector("[data-stop-title]")) {
                title = el.querySelector("[data-stop-title]").innerHTML;
              }

              var content = el.querySelector("[data-stop-content]").innerHTML ? el.querySelector("[data-stop-content]").innerHTML : "";

              _simpleTour.SimpleTourManager.createTourStop(_this2.tourName, el, title, content, "live");
            } catch (e) {
              console.warn(e);
            }
          });
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.SimpleTourFinder = SimpleTourFinder;
});