define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/flattened-nodes-observer.js", "../../@polymer/iron-ajax/iron-ajax.js", "../h-a-x/h-a-x.js", "../simple-toast/simple-toast.js"], function (_exports, _require, _polymerElement, _flattenedNodesObserver, _ironAjax, _hAX, _simpleToast) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CmsHax = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_95177f50e48111e9b5c6f7b0a264592f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          font-size: 16px;\n          box-sizing: content-box;\n        }\n      </style>\n      <iron-ajax\n        id=\"pageupdateajax\"\n        url=\"[[endPoint]]\"\n        method=\"[[method]]\"\n        body=\"[[updatePageData]]\"\n        content-type=\"application/json\"\n        handle-as=\"json\"\n        on-response=\"_handleUpdateResponse\"\n      ></iron-ajax>\n      <h-a-x app-store$=\"[[appStoreConnection]]\"></h-a-x>\n    "]);

    _templateObject_95177f50e48111e9b5c6f7b0a264592f = function _templateObject_95177f50e48111e9b5c6f7b0a264592f() {
      return data;
    };

    return data;
  }

  /**
   * `cms-hax`
   * @demo ../../demo/index.html
   */
  var CmsHax =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(CmsHax, _PolymerElement);
    babelHelpers.createClass(CmsHax, [{
      key: "_activeHaxBodyUpdated",

      /**
       * Ensure we've imported our content on initial setup
       */
      value: function _activeHaxBodyUpdated(newValue, oldValue) {
        // ensure we import our content once we get an initial registration of active body
        if (newValue != null && !this.__imported) {
          this.__imported = true; // see what's inside of this, in a template tag

          var children = this.querySelector("template"); // convert this template content into the real thing
          // this helps with correctly preserving everything on the way down

          if (children != null) {
            newValue.importContent(children.innerHTML);
          }
        }
      }
      /**
       * Calculate if we have anywhere to redirect to.
       */

    }, {
      key: "_computeRedirectOnSave",
      value: function _computeRedirectOnSave(redirectLocation) {
        if (babelHelpers.typeof(redirectLocation) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return true;
        }

        return false;
      }
      /**
       * Break the shadow root for this element (by design)
       */

    }, {
      key: "_attachDom",
      value: function _attachDom(dom) {
        this.appendChild(dom);
      }
      /**
       * Set certain data bound values to the store once it's ready
       */

    }, {
      key: "_noticeTagChanges",
      value: function _noticeTagChanges(openDefault, allowedTags, hideExportButton, hidePanelOps, hidePreferencesButton, align) {
        if (window.HaxStore.ready) {
          // double check because this can cause issues
          if (allowedTags) {
            window.HaxStore.instance.validTagList = allowedTags;
          }

          window.HaxStore.instance.haxPanel.hideExportButton = hideExportButton;
          window.HaxStore.instance.haxPanel.hidePanelOps = hidePanelOps;
          window.HaxStore.instance.haxPanel.hidePreferencesButton = hidePreferencesButton;
          window.HaxStore.instance.haxPanel.align = align;

          if (openDefault) {
            window.HaxStore.write("editMode", openDefault, this);
          }
        }
      }
      /**
       * Set certain data bound values to the store once it's ready
       */

    }, {
      key: "_storeReady",
      value: function _storeReady(e) {
        var _this2 = this;

        // delay as there can be some timing issues with attributes in CMSs
        setTimeout(function () {
          // trigger the update of different parts of the global state
          _this2._noticeTagChanges(_this2.openDefault, _this2.allowedTags, _this2.hideExportButton, _this2.hidePanelOps, _this2.hidePreferencesButton, _this2.align);
        }, 250);
      }
      /**
       * Created life cycle
       */

    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_95177f50e48111e9b5c6f7b0a264592f());
      }
    }, {
      key: "tag",
      get: function get() {
        return "cms-hax";
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_noticeTagChanges(openDefault, allowedTags, hideExportButton, hidePanelOps, hidePreferencesButton, align)"];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Default the panel to open
           */
          openDefault: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * Hide the export button, showing it is good for developers
           * or those doing QA testing of new elements.
           */
          hideExportButton: {
            type: Boolean,
            value: true
          },

          /**
           * Hide the panel operations (save and cancel),
           */
          hidePanelOps: {
            type: Boolean,
            value: false
          },

          /**
           * Hide preferences button
           */
          hidePreferencesButton: {
            type: Boolean,
            value: false
          },

          /**
           * Direction to align the hax edit panel
           */
          align: {
            type: String,
            value: "right"
          },

          /**
           * allowed Tags, usually as dictated by the input filtering
           * layer of the backend system that HAX is riding on.
           * While not fullproof, this at least will enforce front-end
           * filtering to match what actually is going to be allowed
           * to be saved in the first place.
           */
          allowedTags: {
            type: Array
          },

          /**
           * Location to save content to.
           */
          endPoint: {
            type: String
          },

          /**
           * Method to save content.
           */
          method: {
            type: String,
            value: "PUT"
          },

          /**
           * Page data, body of text as a string.
           */
          updatePageData: {
            type: String
          },

          /**
           * Connection object for talking to an app store.
           */
          appStoreConnection: {
            type: Object
          },

          /**
           * State of the panel
           */
          editMode: {
            type: Boolean,
            reflectToAttribute: true
          },

          /**
           * syncBody
           */
          syncBody: {
            type: Boolean,
            value: false
          },

          /**
           * Only available if syncBody is true; this allows data binding to the value being worked on in hax-body tag
           */
          bodyValue: {
            type: String,
            value: ""
          },

          /**
           * Flag to hide the toast.
           */
          hideMessage: {
            type: Boolean,
            value: false
          },

          /**
           * Optional URL to redirect to once we save.
           */
          redirectLocation: {
            type: String
          },

          /**
           * Option to redirect once we save successfully
           */
          redirectOnSave: {
            type: Boolean,
            computed: "_computeRedirectOnSave(redirectLocation)"
          },

          /**
           * Reference to activeBody.
           */
          activeHaxBody: {
            type: Object,
            observer: "_activeHaxBodyUpdated"
          },
          __imported: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);

    function CmsHax() {
      var _this;

      babelHelpers.classCallCheck(this, CmsHax);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(CmsHax).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./lib/cms-token.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/cms-block.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/cms-views.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/cms-entity.js"], res, rej);
      });
      return _this;
    }
    /**
     * detached life cycle
     */


    babelHelpers.createClass(CmsHax, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this._observer) {
          this._observer.disconnect();

          this._observer = null;
        }

        window.removeEventListener("hax-store-ready", this._storeReady.bind(this));
        window.removeEventListener("hax-save", this._saveFired.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(CmsHax.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Attached to the DOM; now we can fire event to the store that
       * we exist and are the thing being edited.
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(CmsHax.prototype), "connectedCallback", this).call(this);
        window.addEventListener("hax-store-property-updated", this._haxStorePropertyUpdated.bind(this));
        window.addEventListener("hax-store-ready", this._storeReady.bind(this));
        window.SimpleToast.requestAvailability();
        this.__lock = false;
        window.addEventListener("hax-save", this._saveFired.bind(this)); // notice ANY change to body and bubble up, only when we are attached though

        if (this.syncBody) {
          this._observer = (0, _flattenedNodesObserver.FlattenedNodesObserver)(window.HaxStore.instance.activeHaxBody, function (info) {
            if (!_this3.__lock) {
              _this3.__lock = true;

              _this3.dispatchEvent(new CustomEvent("hax-body-content-changed", {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: window.HaxStore.instance.activeHaxBody.haxToContent()
              }));

              setTimeout(function () {
                _this3.__lock = false;
              }, 100);
            }
          });
        }
      }
      /**
       * Store updated, sync.
       */

    }, {
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          if (babelHelpers.typeof(e.detail.value) === "object") {
            this.set(e.detail.property, null);
          }

          this.set(e.detail.property, e.detail.value);
          this.notifyPath(e.detail.property);
        }
      }
      /**
       * _saveFired
       */

    }, {
      key: "_saveFired",
      value: function _saveFired(e) {
        // generate sanitized content
        this.updatePageData = window.HaxStore.instance.activeHaxBody.haxToContent(); // send the request

        this.$.pageupdateajax.generateRequest();
      }
      /**
       * _handleUpdateResponse
       */

    }, {
      key: "_handleUpdateResponse",
      value: function _handleUpdateResponse(e) {
        var _this4 = this;

        if (!this.hideMessage) {
          var evt = new CustomEvent("simple-toast-show", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              text: "Saved!",
              duration: 3000
            }
          });
          this.dispatchEvent(evt); // support auto redirecting on save if that's been requested
          // in the integration point

          if (this.redirectOnSave) {
            setTimeout(function () {
              // trigger redirect
              window.location = _this4.redirectLocation;
            }, 500);
          }
        }
      }
    }]);
    return CmsHax;
  }(_polymerElement.PolymerElement);

  _exports.CmsHax = CmsHax;
  window.customElements.define(CmsHax.tag, CmsHax);
});