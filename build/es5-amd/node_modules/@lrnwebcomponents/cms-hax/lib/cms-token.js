define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/polymer/lib/utils/async.js","../../../@polymer/iron-ajax/iron-ajax.js","../../../@polymer/paper-spinner/paper-spinner.js","../../hax-body-behaviors/lib/HAXWiring.js"],function(_polymerLegacy,_polymerDom,async,_ironAjax,_paperSpinner,_HAXWiring){"use strict";async=babelHelpers.interopRequireWildcard(async);var $_documentContainer=document.createElement("div");$_documentContainer.setAttribute("style","display: none;");$_documentContainer.innerHTML="<dom-module id=\"cms-token\">\n    <template strip-whitespace=\"\">\n        <style>\n            :host {\n                display: inline;\n                min-width: 112px;\n                min-height: 112px;\n                transition: .6s all ease;\n                background-color: transparent;\n            }\n\n            paper-spinner {\n                transition: .6s all ease;\n                position: absolute;\n                visibility: hidden;\n                display: none;\n                opacity: 0;\n                height: 0;\n                width: 0;\n            }\n\n            #replacementcontent {\n                transition: .6s all ease;\n                visibility: visible;\n                opacity: 1;\n                height: auto;\n                width: auto;\n            }\n\n            :host([loading]) {\n                text-align: center;\n            }\n\n            :host([loading]) paper-spinner {\n                visibility: visible;\n                opacity: 1;\n                position: relative;\n                height: 80px;\n                width: 80px;\n                padding: 16px;\n                display: flex;\n            }\n\n            :host([loading]) #replacementcontent {\n                opacity: 0;\n                visibility: hidden;\n                height: 0;\n                width: 0;\n            }\n        </style>\n        <iron-ajax id=\"tokenrequest\" method=\"GET\" params=\"[[bodyData]]\" url=\"[[tokenEndPoint]]\" handle-as=\"json\" last-response=\"{{tokenData}}\"></iron-ajax>\n        <paper-spinner active=\"[[loading]]\"></paper-spinner>\n        <span id=\"replacementcontent\">\n            <slot></slot>\n        </span>\n    </template>\n\n    \n</dom-module>";document.head.appendChild($_documentContainer);/**
`cms-token`
Render and process a shortcode / token from a content management system.

* @demo demo/index.html

@microcopy - the mental model for this element
 - cms - Content management system, while writen against Drupal should be
         abstract enough to work with just about anything.
 - token - a snippet / shortcode of logic to unpack and turn into something
           more complex. Usually of the form [actual:thing:here] or
           [[action|thing=stuff|here=place]] style. Either way, it's a
           snippet which will get sent to a backend and dynamically replaced.
*/(0,_polymerLegacy.Polymer)({is:"cms-token",behaviors:[HAXBehaviors.PropertiesBehaviors],properties:{/**
     * Loading state
     */loading:{type:Boolean,reflectToAttribute:!0,value:!1},/**
     * Token changed (somehow) do the token processing.
     */token:{type:String,reflectToAttribute:!0},/**
     * Token end point updated, change the way we do processing.
     */tokenEndPoint:{type:String},/**
     * Body data which is just token with some encapsulation.
     */bodyData:{type:Object,computed:"_generateBodyData(token, _clickInvoked)",observer:"_tokenChanged"},/**
     * internal tracking for edit button being clicked in HAX presentation
     */_clickInvoked:{type:String,value:!1},/**
     * Token data from the end point.
     */tokenData:{type:String,observer:"_handleTokenResponse"},/**
     * Prefix for the token to be processed
     */tokenPrefix:{type:String,value:"["},/**
     * Suffix for the token to be processed
     */tokenSuffix:{type:String,value:"]"},/**
     *
     */_displayMode:{type:String,value:"full",observer:"_displayModeChanged"}},/**
   * Display mode value updated.
   */_displayModeChanged:function _displayModeChanged(newValue,oldValue){if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&""!=newValue&&babelHelpers.typeof(this.token)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// @todo need more sanity checks then this to get default and replace better
this.token=this.token.replace(oldValue,newValue)}},/**
   * Generate body data.
   */_generateBodyData:function _generateBodyData(token,$editingState){if(null!==token&&""!==token){var tokenPrefix=this.tokenPrefix,tokenSuffix=this.tokenSuffix;return{token:"".concat(tokenPrefix).concat(token).concat(tokenSuffix),cachedResponse:$editingState}}},/**
   * Handle the response from the token processing endpoint
   */_handleTokenResponse:function _handleTokenResponse(newValue,oldValue){var _this=this;if(null!==newValue&&babelHelpers.typeof(newValue.content)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// store the text and url callbacks in the event we're in an editing mode
if(null!=document.getElementById("cmstokenidtolockonto")){document.getElementById("cmstokenidtolockonto").setAttribute("href",newValue.editEndpoint);document.getElementById("cmstokenidtolockonto").innerHTML=newValue.editText;document.getElementById("cmstokenidtolockonto").addEventListener("click",this.__tokenClicked.bind(this))}// wipe our own slot here
this.wipeSlot((0,_polymerDom.dom)(this));// now inject the content we got
async.microTask.run(function(){var template=document.createElement("template");template.innerHTML=newValue.content;(0,_polymerDom.dom)(_this).appendChild(document.importNode(template.content,!0));_this.loading=!1})}},/**
   * wipe out the slot
   */wipeSlot:function wipeSlot(element){while(null!==element.firstChild){element.removeChild(element.firstChild)}},/**
   * Token end point changed
   */_tokenChanged:function _tokenChanged(newValue,oldValue){var _this2=this;// ensure we have something and are not loading currently
if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&""!==newValue&&!this.loading){// support going from a null element to a real one
if(babelHelpers.typeof(this.tokenEndPoint)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.cmstokenEndPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.tokenEndPoint=window.cmstokenEndPoint}if(this.tokenEndPoint){this.loading=!0;async.microTask.run(function(){_this2.$.tokenrequest.generateRequest()})}}},/**
   * Window visibility callback to monitor when we are being seen
   */_windowVisibilityChanged:function _windowVisibilityChanged(e){// ensure we aren't already loading
if(!this.loading&&this._clickInvoked){// generate request which will kick off "loading" state
this.$.tokenrequest.generateRequest();// kill our clickInvoked handler so we aren't generating requests until the
// user clicks to edit the thing again
this._clickInvoked=!1}},/**
   * Notice a click on our edit button and set a flag.
   */__tokenClicked:function __tokenClicked(e){// set flag so we know to generate a new request when we come back into focus
this._clickInvoked=!0},/**
   * Detatched life cycle.
   */detached:function detached(){// remove event listener for clean up
document.removeEventListener("visibilitychange",this._windowVisibilityChanged.bind(this))},/**
   * Attached to the DOM, now fire.
   */attached:function attached(){var _this3=this;// notice visibilty change
document.addEventListener("visibilitychange",this._windowVisibilityChanged.bind(this));if(babelHelpers.typeof(this.token)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&null!==this.token&&""!==this.token){var slot=(0,_polymerDom.dom)(this).getEffectiveChildNodes();// only kick off request if there's nothing in it
// if it has something in it that means we did some
// remote rendering ahead of time
if(0===slot.length&&!this.loading){// support for autoloading the token data needed for the request from globals
if(babelHelpers.typeof(this.tokenEndPoint)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.cmstokenEndPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.tokenEndPoint=window.cmstokenEndPoint}if(this.tokenEndPoint){this.loading=!0;async.microTask.run(function(){_this3.$.tokenrequest.generateRequest()})}}}// Establish hax property binding
var props={canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"CMS Token",description:"CMS token rendered on the backend",icon:"icons:code",color:"light-blue",groups:["CMS"],handles:[{type:"cmstoken",token:"token"}],meta:{author:"LRNWebComponents"}},settings:{quick:[],configure:[{property:"token",title:"Token",description:"Token from our CMS",inputMethod:"textfield",icon:"editor:title"}],advanced:[]},saveOptions:{wipeSlot:!0,unsetAttributes:["loading","token-data","body-data","token-end-point"]}};this.setHaxProperties(props)},/**
   * Implements getHaxJSONSchema post processing callback.
   */postProcessgetHaxJSONSchema:function postProcessgetHaxJSONSchema(schema){var href="",slot="Edit";// if we have values populate them
if(babelHelpers.typeof(this.tokenData)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){href=this.tokenData.editEndpoint;slot=this.tokenData.editText;for(var i in this.tokenData.schema){schema.properties[i]=this.tokenData.schema[i]}}schema.properties.__editThis={type:"string",component:{name:"a",properties:{id:"cmstokenidtolockonto",href:href,target:"_blank"},slot:slot}};return schema}})});