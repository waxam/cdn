define(["exports","require","../../../lit-element/lit-element.js","../../utils/utils.js","../../../@polymer/iron-ajax/iron-ajax.js"],function(_exports,_require,_litElement,_utils,_ironAjax){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.CMSToken=void 0;_require=babelHelpers.interopRequireWildcard(_require);function _templateObject4_675eb6b068d311ea888313be08922d62(){var data=babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline;\n          min-width: 112px;\n          min-height: 112px;\n          transition: 0.6s all ease;\n          background-color: transparent;\n        }\n        #replacementcontent {\n          transition: 0.6s all ease;\n          visibility: visible;\n          opacity: 1;\n          height: auto;\n          width: auto;\n        }\n        :host([loading]) {\n          text-align: center;\n        }\n        :host([loading]) #replacementcontent {\n          opacity: 0;\n          visibility: hidden;\n          height: 0;\n          width: 0;\n        }\n      "]);_templateObject4_675eb6b068d311ea888313be08922d62=function _templateObject4_675eb6b068d311ea888313be08922d62(){return data};return data}function _templateObject3_675eb6b068d311ea888313be08922d62(){var data=babelHelpers.taggedTemplateLiteral([""]);_templateObject3_675eb6b068d311ea888313be08922d62=function _templateObject3_675eb6b068d311ea888313be08922d62(){return data};return data}function _templateObject2_675eb6b068d311ea888313be08922d62(){var data=babelHelpers.taggedTemplateLiteral(["\n            <hexagon-loader\n              item-count=\"4\"\n              loading\n              size=\"small\"\n            ></hexagon-loader>\n          "]);_templateObject2_675eb6b068d311ea888313be08922d62=function _templateObject2_675eb6b068d311ea888313be08922d62(){return data};return data}function _templateObject_675eb6b068d311ea888313be08922d62(){var data=babelHelpers.taggedTemplateLiteral(["\n      <iron-ajax\n        id=\"tokenrequest\"\n        method=\"GET\"\n        url=\"","\"\n        handle-as=\"json\"\n        @last-response-changed=\"","\"\n      ></iron-ajax>\n      ","\n      <span id=\"replacementcontent\"><slot></slot></span>\n    "]);_templateObject_675eb6b068d311ea888313be08922d62=function _templateObject_675eb6b068d311ea888313be08922d62(){return data};return data}/**
 * `cms-token`
 * `Render and process a shortcode / token from a content management system.`
 * @microcopy - the mental model for this element
 * - cms   Content management system, while writen against Drupal should be
 *         abstract enough to work with just about anything.
 * - token a snippet / shortcode of logic to unpack and turn into something
 *         more complex. Usually of the form [actual:thing:here] or
 *         [[action|thing=stuff|here=place]] style. Either way, it's a
 *         snippet which will get sent to a backend and dynamically replaced.
 * @customElement cms-token
 */var CMSToken=/*#__PURE__*/function(_LitElement){babelHelpers.inherits(CMSToken,_LitElement);babelHelpers.createClass(CMSToken,[{key:"render",/**
   * LitElement render
   */value:function render(){return(0,_litElement.html)(_templateObject_675eb6b068d311ea888313be08922d62(),this.tokenEndPoint,this.tokenDataChanged,this.loading?(0,_litElement.html)(_templateObject2_675eb6b068d311ea888313be08922d62()):(0,_litElement.html)(_templateObject3_675eb6b068d311ea888313be08922d62()))}},{key:"tokenDataChanged",value:function tokenDataChanged(e){this.tokenData=e.detail.value}/**
   * HTMLElement
   */}],[{key:"styles",/**
   * LitElement constructable styles enhancement
   */get:function get(){return[(0,_litElement.css)(_templateObject4_675eb6b068d311ea888313be08922d62())]}}]);function CMSToken(){var _this;babelHelpers.classCallCheck(this,CMSToken);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(CMSToken).call(this));_this.loading=!1;_this.tokenPrefix="[";_this.tokenSuffix="]";_this._clickInvoked=!1;_this._displayMode="full";new Promise(function(res,rej){return _require.default(["../../hexagon-loader/hexagon-loader.js"],res,rej)});return _this}babelHelpers.createClass(CMSToken,[{key:"updated",/**
   * LitElement properties changed
   */value:function updated(changedProperties){var _this2=this;changedProperties.forEach(function(oldValue,propName){if(["token","_clickInvoked"].includes(propName)){_this2.bodyData=_this2._generateBodyData(_this2.token,_this2._clickInvoked)}if("bodyData"==propName){_this2._bodyDataChanged(_this2[propName])}if("tokenData"==propName){_this2._handleTokenResponse(_this2[propName])}if("_displayMode"==propName){_this2._displayModeChanged(_this2[propName])}})}},{key:"_displayModeChanged",/**
   * Display mode value updated.
   */value:function _displayModeChanged(newValue,oldValue){if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&""!=newValue&&babelHelpers.typeof(this.token)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// @todo need more sanity checks then this to get default and replace better
this.token=this.token.replace(oldValue,newValue)}}/**
   * Generate body data.
   */},{key:"_generateBodyData",value:function _generateBodyData(token,$editingState){if(null!==token&&""!==token){var tokenPrefix=this.tokenPrefix,tokenSuffix=this.tokenSuffix;return{token:"".concat(tokenPrefix).concat(token).concat(tokenSuffix),cachedResponse:$editingState}}}/**
   * Handle the response from the token processing endpoint
   */},{key:"_handleTokenResponse",value:function _handleTokenResponse(newValue){if(null!==newValue&&babelHelpers.typeof(newValue.content)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// store the text and url callbacks in the event we're in an editing mode
if(null!=document.getElementById("cmstokenidtolockonto")){document.getElementById("cmstokenidtolockonto").setAttribute("href",newValue.editEndpoint);document.getElementById("cmstokenidtolockonto").innerHTML=newValue.editText;document.getElementById("cmstokenidtolockonto").addEventListener("click",this.__tokenClicked.bind(this))}// wipe our own slot here
(0,_utils.wipeSlot)(this);// now inject the content we got
var template=document.createElement("template");template.innerHTML=newValue.content;this.appendChild(document.importNode(template.content,!0));this.loading=!1}}/**
   * Body data changed end point changed
   */},{key:"_bodyDataChanged",value:function _bodyDataChanged(newValue){// ensure we have something and are not loading currently
if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&""!==newValue&&!this.loading){// support going from a null element to a real one
if(babelHelpers.typeof(this.tokenEndPoint)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.cmstokenEndPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.tokenEndPoint=window.cmstokenEndPoint}if(this.tokenEndPoint){this.loading=!0;this.shadowRoot.querySelector("#tokenrequest").body=newValue;this.shadowRoot.querySelector("#tokenrequest").generateRequest()}}}/**
   * Window visibility callback to monitor when we are being seen
   */},{key:"_windowVisibilityChanged",value:function _windowVisibilityChanged(e){// ensure we aren't already loading
if(!this.loading&&this._clickInvoked){// generate request which will kick off "loading" state
this.shadowRoot.querySelector("#tokenrequest").generateRequest();// kill our clickInvoked handler so we aren't generating requests until the
// user clicks to edit the thing again
this._clickInvoked=!1}}/**
   * Notice a click on our edit button and set a flag.
   */},{key:"__tokenClicked",value:function __tokenClicked(e){// set flag so we know to generate a new request when we come back into focus
this._clickInvoked=!0}/**
   * HTMLElement
   */},{key:"connectedCallback",value:function connectedCallback(){var _this3=this;babelHelpers.get(babelHelpers.getPrototypeOf(CMSToken.prototype),"connectedCallback",this).call(this);setTimeout(function(){document.addEventListener("visibilitychange",_this3._windowVisibilityChanged.bind(_this3))},0)}/**
   * HTMLElement
   */},{key:"disconnectedCallback",value:function disconnectedCallback(){document.removeEventListener("visibilitychange",this._windowVisibilityChanged.bind(this));babelHelpers.get(babelHelpers.getPrototypeOf(CMSToken.prototype),"disconnectedCallback",this).call(this)}},{key:"postProcessgetHaxJSONSchema",/**
   * Implements getHaxJSONSchema post processing callback.
   */value:function postProcessgetHaxJSONSchema(schema){var href="",slot="Edit";// if we have values populate them
if(babelHelpers.typeof(this.tokenData)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){href=this.tokenData.editEndpoint;slot=this.tokenData.editText;for(var i in this.tokenData.schema){schema.properties[i]=this.tokenData.schema[i]}}schema.properties.__editThis={type:"string",component:{name:"a",properties:{id:"cmstokenidtolockonto",href:href,target:"_blank"},slot:slot}};return schema}}],[{key:"tag",get:function get(){return"cms-token"}},{key:"properties",get:function get(){return{/**
       * Loading state
       */loading:{type:Boolean,reflect:!0},/**
       * Token changed (somehow) do the token processing.
       */token:{type:String,reflect:!0},/**
       * Token end point updated, change the way we do processing.
       */tokenEndPoint:{type:String,attribute:"token-end-point"},/**
       * Body data which is just token with some encapsulation.
       */bodyData:{type:Object},/**
       * internal tracking for edit button being clicked in HAX presentation
       */_clickInvoked:{type:String},/**
       * Token data from the end point.
       */tokenData:{type:String,attribute:"token-data"},/**
       * Prefix for the token to be processed
       */tokenPrefix:{type:String,attribute:"token-prefix"},/**
       * Suffix for the token to be processed
       */tokenSuffix:{type:String,attribute:"token-suffix"},_displayMode:{type:String}}}},{key:"haxProperties",get:function get(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"CMS Token",description:"CMS token rendered on the backend",icon:"icons:code",color:"light-blue",groups:["CMS"],handles:[{type:"cmstoken",token:"token"}],meta:{author:"ELMS:LN"}},settings:{quick:[],configure:[{property:"token",title:"Token",description:"Token from our CMS",inputMethod:"textfield",icon:"editor:title"}],advanced:[]},saveOptions:{wipeSlot:!0,unsetAttributes:["loading","token-data","body-data","token-end-point"]}}}}]);return CMSToken}(_litElement.LitElement);_exports.CMSToken=CMSToken;window.customElements.define(CMSToken.tag,CMSToken)});