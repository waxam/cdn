define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/polymer/lib/utils/async.js","../../../@polymer/iron-ajax/iron-ajax.js","../../../@polymer/paper-spinner/paper-spinner.js","../../hax-body-behaviors/lib/HAXWiring.js","../../hax-body/lib/haxutils.js"],function(_exports,_polymerElement,_renderStatus,_polymerDom,_async,_ironAjax,_paperSpinner,_HAXWiring,_haxutils){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.CMSViews=void 0;function _templateObject_f8a16450984611e9810e6d9eee9273ff(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          min-width: 112px;\n          min-height: 112px;\n          transition: 0.6s all ease;\n          background-color: transparent;\n        }\n        paper-spinner {\n          visibility: hidden;\n          opacity: 0;\n          height: 80px;\n          width: 80px;\n          padding: 16px;\n        }\n        #replacementcontent {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([loading]) {\n          text-align: center;\n        }\n        :host([loading]) paper-spinner {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([loading]) #replacementcontent {\n          opacity: 0;\n          visibility: hidden;\n        }\n      </style>\n      <iron-ajax\n        id=\"viewsrequest\"\n        method=\"GET\"\n        params=\"[[bodyData]]\"\n        url=\"[[viewsEndPoint]]\"\n        handle-as=\"json\"\n        last-response=\"{{viewsData}}\"\n      ></iron-ajax>\n      <paper-spinner active=\"[[loading]]\"></paper-spinner>\n      <span id=\"replacementcontent\"><slot></slot></span>\n    "]);_templateObject_f8a16450984611e9810e6d9eee9273ff=function _templateObject_f8a16450984611e9810e6d9eee9273ff(){return data};return data}/**
 * `cms-views`
 * `Render and process a  / views from a content management system.`
 */var CMSViews=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(CMSViews,_PolymerElement);function CMSViews(){babelHelpers.classCallCheck(this,CMSViews);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(CMSViews).apply(this,arguments))}babelHelpers.createClass(CMSViews,[{key:"_generateBodyData",/**
   * Generate body data.
   */value:function _generateBodyData(name,display){if(null!==name&&""!==name){return{name:"".concat(name),display:"".concat(display)}}}/**
   * Handle the response from the views processing endpoint
   */},{key:"_handleviewsResponse",value:function _handleviewsResponse(newValue,oldValue){var _this=this;if(null!==newValue&&babelHelpers.typeof(newValue.content)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// store the text and url callbacks
if(null!=document.getElementById("cmstokenidtolockonto")){document.getElementById("cmstokenidtolockonto").setAttribute("href",newValue.editEndpoint);document.getElementById("cmstokenidtolockonto").innerHTML=newValue.editText}// wipe our own slot here
(0,_haxutils.wipeSlot)((0,_polymerDom.dom)(this));// now inject the content we got
_async.microTask.run(function(){var frag=document.createElement("span");frag.innerHTML=newValue.content;var newNode=frag.cloneNode(!0);(0,_polymerDom.dom)(_this).appendChild(newNode);setTimeout(function(){_this.loading=!1},600)})}}/**
   * views end point changed
   */},{key:"_viewsChanged",value:function _viewsChanged(newValue,oldValue){var _this2=this;// ensure we have something and are not loading currently
if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&""!==newValue&&!this.loading){// support going from a null element to a real one
if(babelHelpers.typeof(this.viewsEndPoint)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.cmsviewsEndPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.viewsEndPoint=window.cmsviewsEndPoint}if(this.viewsEndPoint){this.loading=!0;_async.microTask.run(function(){_this2.$.viewsrequest.generateRequest()})}}}/**
   * Attached to the DOM, now fire.
   */},{key:"connectedCallback",value:function connectedCallback(){var _this3=this;babelHelpers.get(babelHelpers.getPrototypeOf(CMSViews.prototype),"connectedCallback",this).call(this);if(babelHelpers.typeof(this.viewsName)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&null!==this.viewsName&&""!==this.viewsName){var slot=(0,_polymerDom.dom)(this).getEffectiveChildNodes();// only kick off request if there's nothing in it
// if it has something in it that means we did some
// remote rendering ahead of time
if(0===slot.length&&!this.loading){// support for autoloading the views data needed for the request from globals
if(babelHelpers.typeof(this.viewsEndPoint)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.cmsviewsEndPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.viewsEndPoint=window.cmsviewsEndPoint}if(this.viewsEndPoint){this.loading=!0;_async.microTask.run(function(){_this3.$.viewsrequest.generateRequest()})}}}(0,_renderStatus.afterNextRender)(this,function(){this.HAXWiring=new _HAXWiring.HAXWiring;this.HAXWiring.setup(CMSViews.haxProperties,CMSViews.tag,this)})}},{key:"postProcessgetHaxJSONSchema",/**
   * Implements getHaxJSONSchema post processing callback.
   */value:function postProcessgetHaxJSONSchema(schema){schema.properties.__editThis={type:"string",component:{name:"a",properties:{id:"cmstokenidtolockonto",href:"",target:"_blank"},slot:"Edit this view"}};return schema}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_f8a16450984611e9810e6d9eee9273ff())}},{key:"tag",get:function get(){return"cms-views"}},{key:"properties",get:function get(){return{/**
       * Loading state
       */loading:{type:Boolean,reflectToAttribute:!0,value:!1},/**
       * Name of the views to render
       */viewsName:{type:String,reflectToAttribute:!0},/**
       * Display from the views
       */viewsDisplay:{type:String,reflectToAttribute:!0},/**
       * views end point updated, change the way we do processing.
       */viewsEndPoint:{type:String},/**
       * Body data which is just views with some encapsulation.
       */bodyData:{type:Object,computed:"_generateBodyData(viewsName, viewsDisplay)",observer:"_viewsChanged"},/**
       * views data from the end point.
       */viewsData:{type:String,observer:"_handleviewsResponse"},/**
       * Prefix for the views to be processed
       */viewsPrefix:{type:String,observer:"["},/**
       * Suffix for the views to be processed
       */viewsSuffix:{type:String,observer:"]"}}}},{key:"haxProperties",get:function get(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"CMS View",description:"CMS views rendered on the backend",icon:"icons:view-module",color:"light-blue",groups:["CMS"],handles:[{type:"cmsviews",views:"views"}],meta:{author:"LRNWebComponents"}},settings:{quick:[],configure:[{property:"viewsName",title:"Name",description:"Name of the view from our CMS",inputMethod:"textfield",icon:"editor:title"},{property:"viewsDisplay",title:"Display",description:"Display within that view from our CMS",inputMethod:"textfield",icon:"editor:title"}],advanced:[]},saveOptions:{wipeSlot:!0,unsetAttributes:["loading","views-data","body-data","views-end-point"]}}}}]);return CMSViews}(_polymerElement.PolymerElement);_exports.CMSViews=CMSViews;window.customElements.define(CMSViews.tag,CMSViews)});