define(["exports", "require", "../../../lit-element/lit-element.js", "../../utils/utils.js", "../../../@polymer/iron-ajax/iron-ajax.js"], function (_exports, _require, _litElement, _utils, _ironAjax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CMSEntity = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject4_49520120494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          min-width: 112px;\n          min-height: 112px;\n          transition: 0.6s all ease;\n          background-color: transparent;\n        }\n        #replacementcontent {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([loading]) {\n          text-align: center;\n        }\n        :host([loading]) #replacementcontent {\n          opacity: 0;\n          visibility: hidden;\n        }\n      "]);

    _templateObject4_49520120494a11eab3124f20b4f7a7f7 = function _templateObject4_49520120494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  function _templateObject3_49520120494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject3_49520120494a11eab3124f20b4f7a7f7 = function _templateObject3_49520120494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  function _templateObject2_49520120494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <hexagon-loader\n              item-count=\"4\"\n              loading\n              size=\"small\"\n            ></hexagon-loader>\n          "]);

    _templateObject2_49520120494a11eab3124f20b4f7a7f7 = function _templateObject2_49520120494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  function _templateObject_49520120494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <iron-ajax\n        id=\"entityrequest\"\n        method=\"GET\"\n        url=\"", "\"\n        handle-as=\"json\"\n        @last-response-changed=\"", "\"\n      ></iron-ajax>\n      ", "\n      <span id=\"replacementcontent\"><slot></slot></span>\n    "]);

    _templateObject_49520120494a11eab3124f20b4f7a7f7 = function _templateObject_49520120494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  /**
   * `cms-entity`
   * @customElement cms-entity
   * `Render and process a  / entity from a content management system.`
   */
  var CMSEntity =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(CMSEntity, _LitElement);
    babelHelpers.createClass(CMSEntity, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_49520120494a11eab3124f20b4f7a7f7(), this.entityEndPoint, this.entityDataChanged, this.loading ? (0, _litElement.html)(_templateObject2_49520120494a11eab3124f20b4f7a7f7()) : (0, _litElement.html)(_templateObject3_49520120494a11eab3124f20b4f7a7f7()));
      }
    }, {
      key: "entityDataChanged",
      value: function entityDataChanged(e) {
        this.entityData = e.detail.value;
      }
      /**
       * HTMLElement
       */

    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject4_49520120494a11eab3124f20b4f7a7f7())];
      }
    }]);

    function CMSEntity() {
      var _this;

      babelHelpers.classCallCheck(this, CMSEntity);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(CMSEntity).call(this));
      _this.loading = false;
      _this.entityPrefix = "[";
      _this.entitySuffix = "]";
      new Promise(function (res, rej) {
        return _require.default(["../../hexagon-loader/hexagon-loader.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(CMSEntity, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["entityType", "entityId", "entityDisplayMode"].includes(propName)) {
            _this2.bodyData = _this2._generateBodyData(_this2.entityType, _this2.entityId, _this2.entityDisplayMode);
          }

          if (propName == "bodyData") {
            _this2._entityChanged(_this2[propName]);
          }

          if (propName == "entityData") {
            _this2._handleEntityResponse(_this2[propName]);
          }
        });
      }
    }, {
      key: "_generateBodyData",

      /**
       * Generate body data.
       */
      value: function _generateBodyData(entityType, entityId, entityDisplayMode) {
        if (entityType !== null && entityType !== "" && entityId !== null && entityId !== "") {
          return {
            type: "".concat(entityType),
            id: "".concat(entityId),
            display_mode: "".concat(entityDisplayMode)
          };
        }
      }
      /**
       * Handle the response from the entity processing endpoint
       */

    }, {
      key: "_handleEntityResponse",
      value: function _handleEntityResponse(newValue, oldValue) {
        if (newValue !== null && babelHelpers.typeof(newValue.content) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // store the text and url callbacks
          if (document.getElementById("cmstokenidtolockonto") != null) {
            document.getElementById("cmstokenidtolockonto").setAttribute("href", newValue.editEndpoint);
            document.getElementById("cmstokenidtolockonto").innerHTML = newValue.editText;
          } // wipe our own slot here


          (0, _utils.wipeSlot)(this); // now inject the content we got

          var frag = document.createElement("span");
          frag.innerHTML = newValue.content;
          var newNode = frag.cloneNode(true);
          this.appendChild(newNode);
          this.loading = false;
        }
      }
      /**
       * entity end point changed
       */

    }, {
      key: "_entityChanged",
      value: function _entityChanged(newValue) {
        // ensure we have something and are not loading currently
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue !== "" && !this.loading) {
          // support going from a null element to a real one
          if (babelHelpers.typeof(this.entityEndPoint) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(window.cmsentityEndPoint) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.entityEndPoint = window.cmsentityEndPoint;
          }

          if (this.entityEndPoint) {
            this.loading = true;
            this.shadowRoot.querySelector("#entityrequest").body = newValue;
            this.shadowRoot.querySelector("#entityrequest").generateRequest();
          }
        }
      }
    }, {
      key: "postProcessgetHaxJSONSchema",

      /**
       * Implements getHaxJSONSchema post processing callback.
       */
      value: function postProcessgetHaxJSONSchema(schema) {
        schema.properties["__editThis"] = {
          type: "string",
          component: {
            name: "a",
            properties: {
              id: "cmstokenidtolockonto",
              href: "",
              target: "_blank"
            },
            slot: "Edit this content"
          }
        };
        return schema;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "cms-entity";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Loading state
           */
          loading: {
            type: Boolean,
            reflect: true
          },

          /**
           * Type of entity to load
           */
          entityType: {
            type: String,
            reflect: true,
            attribute: "entity-type"
          },

          /**
           * ID of the item to load
           */
          entityId: {
            type: String,
            reflect: true,
            attribute: "entity-id"
          },

          /**
           * Display mode of the entity
           */
          entityDisplayMode: {
            type: String,
            reflect: true,
            attribute: "entity-display-mode"
          },

          /**
           * entity end point updated, change the way we do processing.
           */
          entityEndPoint: {
            type: String,
            attribute: "entity-end-point"
          },

          /**
           * Prefix for the entity to be processed
           */
          entityPrefix: {
            type: String,
            attribute: "entity-prefix"
          },

          /**
           * Suffix for the entity to be processed
           */
          entitySuffix: {
            type: String,
            attribute: "entity-suffix"
          },

          /**
           * Body data which is just entity with some encapsulation.
           */
          bodyData: {
            type: Object
          },

          /**
           * entity data from the end point.
           */
          entityData: {
            type: String,
            attribute: "entity-data"
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "CMS Entity",
            description: "CMS entity rendered on the backend",
            icon: "places:spa",
            color: "light-blue",
            groups: ["CMS"],
            handles: [{
              type: "cmsentity",
              entity: "entity"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "entityType",
              title: "Type",
              description: "type from our CMS",
              inputMethod: "select",
              options: {
                node: "Node",
                user: "User",
                file: "File"
              },
              icon: "editor:title"
            }, {
              property: "entityID",
              title: "ID",
              description: "id from our CMS",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "entityDisplayMode",
              title: "Display mode",
              description: "display mode from our CMS",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: []
          },
          saveOptions: {
            wipeSlot: true,
            unsetAttributes: ["loading", "entity-data", "body-data", "entity-end-point"]
          }
        };
      }
    }]);
    return CMSEntity;
  }(_litElement.LitElement);

  _exports.CMSEntity = CMSEntity;
  window.customElements.define(CMSEntity.tag, CMSEntity);
});