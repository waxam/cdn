define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/polymer/lib/utils/async.js","../../../@polymer/iron-ajax/iron-ajax.js","../../../@polymer/paper-spinner/paper-spinner.js","../../hax-body-behaviors/lib/HAXWiring.js"],function(_polymerLegacy,_polymerDom,async,_ironAjax,_paperSpinner,_HAXWiring){"use strict";async=babelHelpers.interopRequireWildcard(async);var $_documentContainer=document.createElement("div");$_documentContainer.setAttribute("style","display: none;");$_documentContainer.innerHTML="<dom-module id=\"cms-block\">\n  <template strip-whitespace=\"\">\n    <style>\n      :host {\n        display: block;\n        min-width: 112px;\n        min-height: 112px;\n        transition: .6s all ease;\n        background-color: transparent;\n      }\n      paper-spinner {\n        visibility: hidden;\n        opacity: 0;\n        height: 80px;\n        width: 80px;\n        padding: 16px;\n      }\n      #replacementcontent {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) {\n        text-align: center;\n      }\n      :host([loading]) paper-spinner {\n        visibility: visible;\n        opacity: 1;\n      }\n      :host([loading]) #replacementcontent {\n        opacity: 0;\n        visibility: hidden;\n      }\n    </style>\n    <iron-ajax id=\"blockrequest\" method=\"GET\" params=\"[[bodyData]]\" url=\"[[blockEndPoint]]\" handle-as=\"json\" last-response=\"{{blockData}}\"></iron-ajax>\n    <paper-spinner active=\"[[loading]]\"></paper-spinner>\n    <span id=\"replacementcontent\"><slot></slot></span>\n  </template>\n\n  \n</dom-module>";document.head.appendChild($_documentContainer);/**
`cms-block`
Render and process a  / block from a content management system.

* @demo demo/index.html

@microcopy - the mental model for this element
 -
 -

*/(0,_polymerLegacy.Polymer)({is:"cms-block",behaviors:[HAXBehaviors.PropertiesBehaviors],properties:{/**
     * Loading state
     */loading:{type:Boolean,reflectToAttribute:!0,value:!1},/**
     * Module supplying the block
     */blockModule:{type:String,reflectToAttribute:!0},/**
     * A delta value relative to the module
     */blockDelta:{type:String,reflectToAttribute:!0},/**
     * block end point updated, change the way we do processing.
     */blockEndPoint:{type:String},/**
     * Body data which is just block with some encapsulation.
     */bodyData:{type:Object,computed:"_generateBodyData(blockModule, blockDelta)",observer:"_blockChanged"},/**
     * block data from the end point.
     */blockData:{type:String,observer:"_handleblockResponse"},/**
     * Prefix for the block to be processed
     */blockPrefix:{type:String,observer:"["},/**
     * Suffix for the block to be processed
     */blockSuffix:{type:String,observer:"]"}},/**
   * Generate body data.
   */_generateBodyData:function _generateBodyData(blockModule,blockDelta){if(null!==blockModule&&""!==blockModule&&null!==blockDelta&&""!==blockDelta){return{module:"".concat(blockModule),delta:"".concat(blockDelta)}}},/**
   * Handle the response from the block processing endpoint
   */_handleblockResponse:function _handleblockResponse(newValue,oldValue){var _this=this;if(null!==newValue&&babelHelpers.typeof(newValue.content)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// store the text and url callbacks
if(null!=document.getElementById("cmstokenidtolockonto")){document.getElementById("cmstokenidtolockonto").setAttribute("href",newValue.editEndpoint);document.getElementById("cmstokenidtolockonto").innerHTML=newValue.editText}// wipe our own slot here
this.wipeSlot((0,_polymerDom.dom)(this));// now inject the content we got
async.microTask.run(function(){var frag=document.createElement("span");frag.innerHTML=newValue.content;var newNode=frag.cloneNode(!0);(0,_polymerDom.dom)(_this).appendChild(newNode);setTimeout(function(){_this.loading=!1},600)})}},/**
   * wipe out the slot
   */wipeSlot:function wipeSlot(element){while(null!==element.firstChild){element.removeChild(element.firstChild)}},/**
   * block end point changed
   */_blockChanged:function _blockChanged(newValue,oldValue){var _this2=this;// ensure we have something and are not loading currently
if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&""!==newValue&&!this.loading){// support going from a null element to a real one
if(babelHelpers.typeof(this.blockEndPoint)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.cmsblockEndPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.blockEndPoint=window.cmsblockEndPoint}if(this.blockEndPoint){this.loading=!0;async.microTask.run(function(){_this2.$.blockrequest.generateRequest()})}}},/**
   * Attached to the DOM, now fire.
   */attached:function attached(){var _this3=this;if(babelHelpers.typeof(this.blockModule)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&null!==this.blockModule&&""!==this.blockModule){var slot=(0,_polymerDom.dom)(this).getEffectiveChildNodes();// only kick off request if there's nothing in it
// if it has something in it that means we did some
// remote rendering ahead of time
if(0===slot.length&&!this.loading){// support for autoloading the block data needed for the request from globals
if(babelHelpers.typeof(this.blockEndPoint)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.cmsblockEndPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.blockEndPoint=window.cmsblockEndPoint}if(this.blockEndPoint){this.loading=!0;async.microTask.run(function(){_this3.$.blockrequest.generateRequest()})}}}// Establish hax property binding
var props={canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"CMS Block",description:"CMS block rendered on the backend",icon:"image:crop-square",color:"light-blue",groups:["CMS"],handles:[{type:"cmsblock",block:"block"}],meta:{author:"LRNWebComponents"}},settings:{quick:[],configure:[{property:"blockModule",title:"Module",description:"Module to load from our CMS",inputMethod:"textfield",icon:"editor:title"},{property:"blockDelta",title:"Delta",description:"Delta of the block to load from our CMS",inputMethod:"textfield",icon:"editor:title"}],advanced:[]},saveOptions:{wipeSlot:!0,unsetAttributes:["loading","block-data","body-data","block-end-point"]}};this.setHaxProperties(props)},/**
   * Implements getHaxJSONSchema post processing callback.
   */postProcessgetHaxJSONSchema:function postProcessgetHaxJSONSchema(schema){schema.properties.__editThis={type:"string",component:{name:"a",properties:{id:"cmstokenidtolockonto",href:"",target:"_blank"},slot:"Edit this block"}};return schema}})});