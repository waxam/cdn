define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/flattened-nodes-observer.js", "../../../@polymer/polymer/lib/utils/async.js", "../../../@polymer/iron-ajax/iron-ajax.js", "../../../@polymer/paper-spinner/paper-spinner.js", "../../utils/utils.js"], function (_exports, _polymerElement, _flattenedNodesObserver, _async, _ironAjax, _paperSpinner, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CMSBlock = void 0;

  function _templateObject_8d3eaff0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          min-width: 112px;\n          min-height: 112px;\n          transition: 0.6s all ease;\n          background-color: transparent;\n        }\n        paper-spinner {\n          visibility: hidden;\n          opacity: 0;\n          height: 80px;\n          width: 80px;\n          padding: 16px;\n        }\n        #replacementcontent {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([loading]) {\n          text-align: center;\n        }\n        :host([loading]) paper-spinner {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([loading]) #replacementcontent {\n          opacity: 0;\n          visibility: hidden;\n        }\n      </style>\n      <iron-ajax\n        id=\"blockrequest\"\n        method=\"GET\"\n        params=\"[[bodyData]]\"\n        url=\"[[blockEndPoint]]\"\n        handle-as=\"json\"\n        last-response=\"{{blockData}}\"\n      ></iron-ajax>\n      <paper-spinner active=\"[[loading]]\"></paper-spinner>\n      <span id=\"replacementcontent\"><slot></slot></span>\n    "]);

    _templateObject_8d3eaff0c96f11ea8be5e1d5fe7ec787 = function _templateObject_8d3eaff0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `cms-block`
   * @element cms-block
   * `Render and process a  / block from a content management system.`
   */
  var CMSBlock =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(CMSBlock, _PolymerElement);

    function CMSBlock() {
      babelHelpers.classCallCheck(this, CMSBlock);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(CMSBlock).apply(this, arguments));
    }

    babelHelpers.createClass(CMSBlock, [{
      key: "_generateBodyData",

      /**
       * Generate body data.
       */
      value: function _generateBodyData(blockModule, blockDelta) {
        if (blockModule !== null && blockModule !== "" && blockDelta !== null && blockDelta !== "") {
          return {
            module: "".concat(blockModule),
            delta: "".concat(blockDelta)
          };
        }
      }
      /**
       * Handle the response from the block processing endpoint
       */

    }, {
      key: "_handleblockResponse",
      value: function _handleblockResponse(newValue, oldValue) {
        var _this = this;

        if (newValue !== null && babelHelpers.typeof(newValue.content) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // store the text and url callbacks
          if (document.getElementById("cmstokenidtolockonto") != null) {
            document.getElementById("cmstokenidtolockonto").setAttribute("href", newValue.editEndpoint);
            document.getElementById("cmstokenidtolockonto").innerHTML = newValue.editText;
          } // wipe our own slot here


          (0, _utils.wipeSlot)(this); // now inject the content we got

          _async.microTask.run(function () {
            var frag = document.createElement("span");
            frag.innerHTML = newValue.content;
            var newNode = frag.cloneNode(true);

            _this.appendChild(newNode);

            setTimeout(function () {
              _this.loading = false;

              if (window.WCAutoload) {
                window.WCAutoload.process();
              }
            }, 600);
          });
        }
      }
      /**
       * block end point changed
       */

    }, {
      key: "_blockChanged",
      value: function _blockChanged(newValue, oldValue) {
        var _this2 = this;

        // ensure we have something and are not loading currently
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue !== "" && !this.loading) {
          // support going from a null element to a real one
          if (babelHelpers.typeof(this.blockEndPoint) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(window.cmsblockEndPoint) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.blockEndPoint = window.cmsblockEndPoint;
          }

          if (this.blockEndPoint) {
            this.loading = true;

            _async.microTask.run(function () {
              _this2.shadowRoot.querySelector("#blockrequest").generateRequest();
            });
          }
        }
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(CMSBlock.prototype), "connectedCallback", this).call(this);

        if (babelHelpers.typeof(this.blockModule) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this.blockModule !== null && this.blockModule !== "") {
          var slot = _flattenedNodesObserver.FlattenedNodesObserver.getFlattenedNodes(this); // only kick off request if there's nothing in it
          // if it has something in it that means we did some
          // remote rendering ahead of time


          if (slot.length === 0 && !this.loading) {
            // support for autoloading the block data needed for the request from globals
            if (babelHelpers.typeof(this.blockEndPoint) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(window.cmsblockEndPoint) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.blockEndPoint = window.cmsblockEndPoint;
            }

            if (this.blockEndPoint) {
              this.loading = true;

              _async.microTask.run(function () {
                _this3.shadowRoot.querySelector("#blockrequest").generateRequest();
              });
            }
          }
        }
      }
    }, {
      key: "postProcessgetHaxJSONSchema",

      /**
       * Implements getHaxJSONSchema post processing callback.
       */
      value: function postProcessgetHaxJSONSchema(schema) {
        schema.properties["__editThis"] = {
          type: "string",
          component: {
            name: "a",
            properties: {
              id: "cmstokenidtolockonto",
              href: "",
              target: "_blank"
            },
            slot: "Edit this block"
          }
        };
        return schema;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_8d3eaff0c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "tag",
      get: function get() {
        return "cms-block";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Loading state
           */
          loading: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * Module supplying the block
           */
          blockModule: {
            type: String,
            reflectToAttribute: true
          },

          /**
           * A delta value relative to the module
           */
          blockDelta: {
            type: String,
            reflectToAttribute: true
          },

          /**
           * block end point updated, change the way we do processing.
           */
          blockEndPoint: {
            type: String
          },

          /**
           * Body data which is just block with some encapsulation.
           */
          bodyData: {
            type: Object,
            computed: "_generateBodyData(blockModule, blockDelta)",
            observer: "_blockChanged"
          },

          /**
           * block data from the end point.
           */
          blockData: {
            type: String,
            observer: "_handleblockResponse"
          },

          /**
           * Prefix for the block to be processed
           */
          blockPrefix: {
            type: String,
            observer: "["
          },

          /**
           * Suffix for the block to be processed
           */
          blockSuffix: {
            type: String,
            observer: "]"
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "CMS Block",
            description: "CMS block rendered on the backend",
            icon: "image:crop-square",
            color: "light-blue",
            groups: ["CMS"],
            handles: [{
              type: "cmsblock",
              block: "block"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "blockModule",
              title: "Module",
              description: "Module to load from our CMS",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "blockDelta",
              title: "Delta",
              description: "Delta of the block to load from our CMS",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: []
          },
          saveOptions: {
            wipeSlot: true,
            unsetAttributes: ["loading", "block-data", "body-data", "block-end-point"]
          }
        };
      }
    }]);
    return CMSBlock;
  }(_polymerElement.PolymerElement);

  _exports.CMSBlock = CMSBlock;
  window.customElements.define(CMSBlock.tag, CMSBlock);
});