define(["exports", "../../@polymer/polymer/polymer-element.js", "../rich-text-editor/rich-text-editor.js", "./lib/hax-text-editor-toolbar.js"], function (_exports, _polymerElement, _richTextEditor, _haxTextEditorToolbar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTextEditor = void 0;

  function _templateObject_ecebade0dbdb11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style></style>\n      ", "\n    "]);

    _templateObject_ecebade0dbdb11e9bcafdb98156fc1d6 = function _templateObject_ecebade0dbdb11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
   * `hax-text-editor`
   * `rich-text-editor configured for HAX`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var HaxTextEditor =
  /*#__PURE__*/
  function (_RichTextEditor) {
    babelHelpers.inherits(HaxTextEditor, _RichTextEditor);
    babelHelpers.createClass(HaxTextEditor, null, [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_ecebade0dbdb11e9bcafdb98156fc1d6(), babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditor), "template", this));
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {};
      }
    }]);

    function HaxTextEditor() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTextEditor);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxTextEditor).call(this));
      _this.type = "hax-text-editor-toolbar";
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(HaxTextEditor, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxTextEditor.prototype), "connectedCallback", this).call(this);
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "tag",
      get: function get() {
        return "hax-text-editor";
      }
    }]);
    return HaxTextEditor;
  }(_richTextEditor.RichTextEditor);

  _exports.HaxTextEditor = HaxTextEditor;
  window.customElements.define(HaxTextEditor.tag, HaxTextEditor);
});