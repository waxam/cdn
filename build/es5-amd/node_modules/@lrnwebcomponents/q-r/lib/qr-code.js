define(["exports", "meta", "../../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.QRCodeElement = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  var QRCodeElement =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(QRCodeElement, _HTMLElement);

    function QRCodeElement() {
      var _this;

      babelHelpers.classCallCheck(this, QRCodeElement);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(QRCodeElement).call(this)); // method bindings

      _this._defineProperty = _this._defineProperty.bind(babelHelpers.assertThisInitialized(_this)); // Shadow DOM

      _this.attachShadow({
        mode: "open"
      }); // Define Properties


      Object.keys(QRCodeElement.defaultAttributes).map(_this._defineProperty);

      var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

      var location = "".concat(basePath, "/qr.js");
      window.addEventListener("es-bridge-qr-loaded", _this._qrLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability();
      window.ESGlobalBridge.instance.load("qr", location);
      return _this;
    } // simple path from a url modifier


    babelHelpers.createClass(QRCodeElement, [{
      key: "pathFromUrl",
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-qr-loaded", this._qrLoaded.bind(this));

        if (babelHelpers.get(babelHelpers.getPrototypeOf(QRCodeElement.prototype), "disconnectedCallback", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(QRCodeElement.prototype), "disconnectedCallback", this).call(this);
        }
      }
    }, {
      key: "_qrLoaded",
      value: function _qrLoaded() {
        // q-r library has loaded, now try to generate
        this.generate();
      }
    }, {
      key: "attributeChangedCallback",
      // LifeCycle Callbacks
      //
      value: function attributeChangedCallback(attributeName, oldValue, newValue) {
        var fn = this[attributeName + "Changed"];

        if (fn && typeof fn === "function") {
          fn.call(this, oldValue, newValue);
        }

        if (window.ESGlobalBridge.imports["qr"]) {
          this.generate();
        }
      } // Methods
      //

    }, {
      key: "_defineProperty",
      value: function _defineProperty(attributeName) {
        var _this2 = this;

        Object.defineProperty(this, attributeName, {
          get: function get() {
            var value = _this2.getAttribute(attributeName);

            return value === null ? QRCodeElement.defaultAttributes[attributeName] : value;
          },
          set: function set(value) {
            _this2.setAttribute(attributeName, value);
          }
        });
      }
    }, {
      key: "getOptions",
      value: function getOptions() {
        var modulesize = this.modulesize,
            margin = this.margin;
        return {
          modulesize: modulesize !== null ? parseInt(modulesize) : modulesize,
          margin: margin !== null ? parseInt(margin) : margin
        };
      }
    }, {
      key: "generate",
      value: function generate() {
        if (this.data !== null) {
          if (this.format === "png") {
            this.generatePNG();
          } else if (this.format === "html") {
            this.generateHTML();
          } else if (this.format === "svg") {
            this.generateSVG();
          } else {
            this.shadowRoot.innerHTML = "<div>qr-code: " + this.format + " not supported!</div>";
          }
        } else {
          this.shadowRoot.innerHTML = "<div>qr-code: no data!</div>";
        }
      }
    }, {
      key: "generatePNG",
      value: function generatePNG() {
        try {
          var img = document.createElement("img");
          img.src = window.QRCode.generatePNG(this.data, this.getOptions());
          this.clear();
          this.shadowRoot.appendChild(img);
        } catch (e) {
          this.shadowRoot.innerHTML = "<div>qr-code: no canvas support!</div>";
        }
      }
    }, {
      key: "generateHTML",
      value: function generateHTML() {
        var div = window.QRCode.generateHTML(this.data, this.getOptions());
        this.clear();
        this.shadowRoot.appendChild(div);
      }
    }, {
      key: "generateSVG",
      value: function generateSVG() {
        var div = window.QRCode.generateSVG(this.data, this.getOptions());
        this.clear();
        this.shadowRoot.appendChild(div);
      }
    }, {
      key: "clear",
      value: function clear() {
        while (this.shadowRoot.lastChild) {
          this.shadowRoot.removeChild(this.shadowRoot.lastChild);
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "qr-code";
      }
    }, {
      key: "defaultAttributes",
      get: function get() {
        return {
          data: null,
          format: "png",
          modulesize: 5,
          margin: 4
        };
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return Object.keys(QRCodeElement.defaultAttributes);
      }
    }]);
    return QRCodeElement;
  }(babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.QRCodeElement = QRCodeElement;
  window.customElements.define(QRCodeElement.tag, QRCodeElement);
});