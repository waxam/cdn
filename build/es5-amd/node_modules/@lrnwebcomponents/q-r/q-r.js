define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.QR = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_4007f7b0577b11ebb66acdcaf78a5691() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <qr-code\n        id=\"qr\"\n        data=\"", "\"\n        modulesize=\"", "\"\n        margin=\"", "\"\n        format=\"", "\"\n      ></qr-code>\n      <a href=\"", "\" id=\"link\">", "</a>\n    "]);

    _templateObject2_4007f7b0577b11ebb66acdcaf78a5691 = function _templateObject2_4007f7b0577b11ebb66acdcaf78a5691() {
      return data;
    };

    return data;
  }

  function _templateObject_4007f7b0577b11ebb66acdcaf78a5691() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        #link {\n          visibility: hidden;\n          opacity: 0;\n        }\n      "]);

    _templateObject_4007f7b0577b11ebb66acdcaf78a5691 = function _templateObject_4007f7b0577b11ebb66acdcaf78a5691() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `q-r`
   * `Polymer wrapper for a qr code.`
   *
   * @demo demo/index.html
   * @element q-r
   */
  var QR = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(QR, _LitElement);

    var _super = _createSuper(QR);

    babelHelpers.createClass(QR, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_4007f7b0577b11ebb66acdcaf78a5691())];
      }
    }]);

    function QR() {
      var _this;

      babelHelpers.classCallCheck(this, QR);
      _this = _super.call(this);
      _this.modulesize = 4;
      _this.margin = 2;
      _this.format = "png";
      new Promise(function (res, rej) {
        return _require.default(["./lib/qr-code.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(QR, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_4007f7b0577b11ebb66acdcaf78a5691(), this.data, this.modulesize, this.margin, this.format, this.data, this.title);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "q-r";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Data to code via QR code
           */
          data: {
            type: String
          },

          /**
           * Alternate title for the data
           */
          title: {
            type: String
          },

          /**
           * module size of the square
           */
          modulesize: {
            type: Number
          },

          /**
           * Margin on the square
           */
          margin: {
            type: Number
          },

          /**
           * format to output
           */
          format: {
            type: String
          }
        };
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "haxProperties",
      get: function get() {
        // Establish hax property binding
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "QR Code",
            description: "A code to scan from a smartphone.",
            icon: "hax:qr-code",
            color: "grey",
            groups: ["QR"],
            handles: [{
              type: "video",
              source: "data",
              title: "title"
            }, {
              type: "image",
              source: "data",
              title: "title"
            }, {
              type: "link",
              source: "data",
              title: "title"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "data",
              title: "QR data",
              description: "Source of the data for the QR code.",
              inputMethod: "haxupload",
              icon: "hardware:developer-board"
            }, {
              property: "title",
              title: "Alternate title",
              description: "An alternate title to go to the source of the QR code.",
              inputMethod: "alt",
              icon: "editor:title"
            }, {
              property: "modulesize",
              title: "Size",
              description: "Size of the QR code",
              inputMethod: "number",
              icon: "image:photo-size-select-small"
            }, {
              property: "margin",
              title: "Margin",
              description: "Wrapper to the code.",
              inputMethod: "number",
              icon: "icons:settings-overscan"
            }, {
              property: "format",
              title: "Output format",
              description: "Format to put it out.",
              inputMethod: "select",
              options: {
                png: "PNG",
                html: "HTML",
                svg: "SVG"
              },
              icon: "editor:bubble-chart"
            }],
            advanced: []
          }
        };
      }
    }]);
    return QR;
  }(_litElement.LitElement);

  _exports.QR = QR;
  window.customElements.define(QR.tag, QR);
});