define(["exports", "meta", "require", "../../lit-element/lit-element.js", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _require, _litElement, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImgPanZoom = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject4_8300c500c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          position: relative;\n          height: 500px;\n        }\n        #viewer {\n          position: relative;\n          height: 100%;\n          width: 100%;\n        }\n\n        hexagon-loader {\n          opacity: 0;\n          display: block;\n          transition: opacity 700ms;\n          position: absolute;\n          margin: auto;\n          top: 0;\n          left: 0;\n          bottom: 0;\n          right: 0;\n          z-index: 1;\n          height: 70px;\n          width: 70px;\n        }\n        hexagon-loader[hidden] {\n          display: none;\n        }\n        hexagon-loader[loading] {\n          opacity: 1;\n        }\n      "]);

    _templateObject4_8300c500c96f11ea8be5e1d5fe7ec787 = function _templateObject4_8300c500c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject3_8300c500c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                  <hexagon-loader\n                    ?loading=", "\n                    item-count=\"4\"\n                    size=\"small\"\n                  ></hexagon-loader>\n                "]);

    _templateObject3_8300c500c96f11ea8be5e1d5fe7ec787 = function _templateObject3_8300c500c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject2_8300c500c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            ", "\n            <img-loader\n              loaded=\"", "\"\n              @loaded-changed=\"", "\"\n              ?loading=\"", "\"\n              @loading-changed=\"", "\"\n              src=\"", "\"\n              described-by=\"", "\"\n            ></img-loader>\n          "]);

    _templateObject2_8300c500c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8300c500c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8300c500c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <!-- Only preload regular images -->\n      ", "\n\n      <!-- Openseadragon -->\n      <div id=\"viewer\"></div>\n    "]);

    _templateObject_8300c500c96f11ea8be5e1d5fe7ec787 = function _templateObject_8300c500c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `img-pan-zoom` Image pan zoom element
   * Images are preloaded by `img-loader` and a spinner is shown until loaded
   * Deep Zoom Images are supported
   * ### Credits
   * <a href="https://openseadragon.github.io">openSeadragon</a>
   * @demo demo/index.html
   * @element img-pan-zoom
   */
  var ImgPanZoom =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(ImgPanZoom, _LitElement);
    babelHelpers.createClass(ImgPanZoom, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8300c500c96f11ea8be5e1d5fe7ec787(), !this.dzi ? (0, _litElement.html)(_templateObject2_8300c500c96f11ea8be5e1d5fe7ec787(), this.hideSpinner || this.loaded ? "" : (0, _litElement.html)(_templateObject3_8300c500c96f11ea8be5e1d5fe7ec787(), this.loading || !this.loaded), this.loaded, this.loadedChangedEvent, this.loading, this.loadingChangedEvent, this.src, this.describedBy || "") : "");
      }
    }, {
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
      /**
       * HTMLElement
       */

    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject4_8300c500c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "img-pan-zoom";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          // Image source
          src: {
            type: String
          },

          /**
           * aria-describedby attribute
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },
          // Set to true if you are using a deep zoom image
          dzi: {
            type: Boolean
          },
          // Fade in new items added to the viewer
          fadeIn: {
            type: Boolean,
            attribute: "fade-in"
          },
          // loading
          loading: {
            type: Boolean
          },
          // hides spinner
          hideSpinner: {
            type: Boolean,
            attribute: "hide-spinner"
          },
          // loaded
          loaded: {
            type: Boolean
          },
          // Set to false to prevent the appearance of the default navigation controls. Note that if set to false, the customs buttons set by the options zoomInButton, zoomOutButton etc, are rendered inactive.
          showNavigationControl: {
            type: Boolean,
            attribute: "show-navigation-control"
          },
          // Set to true to make the navigator minimap appear.
          showNavigator: {
            type: Boolean,
            attribute: "show-navigator"
          },
          // The "zoom distance" per mouse click or touch tap. Note: Setting this to 1.0 effectively disables the click-to-zoom feature (also see gestureSettings[Mouse|Touch|Pen].clickToZoom/dblClickToZoom).
          zoomPerClick: {
            type: Number,
            attribute: "zoom-per-click"
          },
          // The "zoom distance" per mouse scroll or touch pinch. Note: Setting this to 1.0 effectively disables the mouse-wheel zoom feature (also see gestureSettings[Mouse|Touch|Pen].scrollToZoom}).
          zoomPerScroll: {
            type: Number,
            attribute: "zoom-per-scroll"
          },
          // Specifies the animation duration per each OpenSeadragon.Spring which occur when the image is dragged or zoomed.
          animationTime: {
            type: Number,
            attribute: "animation-time"
          },
          // If true then the 'previous' button will wrap to the last image when viewing the first image and the 'next' button will wrap to the first image when viewing the last image.
          navPrevNextWrap: {
            type: Boolean,
            attribute: "nav-prev-next-wrap"
          },
          // If true then the rotate left/right controls will be displayed as part of the standard controls. This is also subject to the browser support for rotate (e.g. viewer.drawer.canRotate()).
          showRotationControl: {
            type: Boolean,
            attribute: "show-rotation-control"
          },
          // The minimum percentage ( expressed as a number between 0 and 1 ) of the viewport height or width at which the zoom out will be constrained. Setting it to 0, for example will allow you to zoom out infinity.
          minZoomImageRatio: {
            type: Number,
            attribute: "min-zoom-image-ratio"
          },
          // The maximum ratio to allow a zoom-in to affect the highest level pixel ratio. This can be set to Infinity to allow 'infinite' zooming into the image though it is less effective visually if the HTML5 Canvas is not availble on the viewing device.
          maxZoomPixelRatio: {
            type: Number,
            attribute: "max-zoom-pixel-ratio"
          },
          // Constrain during pan
          constrainDuringPan: {
            type: Boolean,
            attribute: "constrain-during-pan"
          },
          // The percentage ( as a number from 0 to 1 ) of the source image which must be kept within the viewport. If the image is dragged beyond that limit, it will 'bounce' back until the minimum visibility ratio is achieved. Setting this to 0 and wrapHorizontal ( or wrapVertical ) to true will provide the effect of an infinitely scrolling viewport.
          visibilityRatio: {
            type: Number,
            attribute: "visibility-ratio"
          }
        };
      }
    }]);

    function ImgPanZoom() {
      var _this;

      babelHelpers.classCallCheck(this, ImgPanZoom);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ImgPanZoom).call(this));
      _this.loading = false;
      _this.dzi = false;
      _this.fadeIn = true;
      _this.hideSpinner = false;
      _this.showNavigationControl = false;
      _this.showNavigator = false;
      _this.zoomPerClick = 2.0;
      _this.zoomPerScroll = 1.2;
      _this.animationTime = 1.2;
      _this.navPrevNextWrap = false;
      _this.showRotationControl = false;
      _this.minZoomImageRatio = 1;
      _this.maxZoomPixelRatio = 1.1;
      _this.constrainDuringPan = false;
      _this.visibilityRatio = 1;

      var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

      var location = "".concat(basePath, "lib/openseadragon/build/openseadragon/openseadragon.min.js");
      window.addEventListener("es-bridge-openseadragon-loaded", _this._openseadragonLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability();
      window.ESGlobalBridge.instance.load("openseadragon", location);
      new Promise(function (res, rej) {
        return _require.default(["../hexagon-loader/hexagon-loader.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/img-loader.js"], res, rej);
      });
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(ImgPanZoom, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "loading") {
            // notify
            _this2.dispatchEvent(new CustomEvent("loading-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "loaded") {
            _this2._loadedChanged(_this2[propName], oldValue); // notify


            _this2.dispatchEvent(new CustomEvent("loaded-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "_openseadragonLoaded",
      value: function _openseadragonLoaded() {
        var _this3 = this;

        try {
          if (OpenSeadragon) {
            this._initOpenSeadragon();
          } else {
            var check = function check() {
              console.log("OpenSeadragon", OpenSeadragon);

              if (OpenSeadragon) {
                _this3._initOpenSeadragon();

                clearInterval(interval);
              }
            },
                interval = setInterval(check, 1);
          }
        } catch (e) {
          console.warn(e);
        }
      }
      /**
       * life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this4 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(ImgPanZoom.prototype), "connectedCallback", this).call(this);
        this.animationConfig = {
          fade: {
            name: "fade-in-animation",
            node: this.shadowRoot.querySelector("#viewer")
          }
        };
        setTimeout(function () {
          // Init openseadragon if we are using a deep zoom image
          if (_this4.dzi) _this4._initOpenSeadragon();
        }, 0);
      }
      /**
       * life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ImgPanZoom.prototype), "disconnectedCallback", this).call(this);
        window.removeEventListener("es-bridge-openseadragon-loaded", this._openseadragonLoaded.bind(this));
      } // Init openseadragon

    }, {
      key: "_initOpenSeadragon",
      value: function _initOpenSeadragon() {
        var _this5 = this;

        setTimeout(function () {
          var tileSources = _this5.src;

          if (!_this5.dzi) {
            tileSources = {
              type: "image",
              url: _this5.src,
              buildPyramid: false
            };
          }

          _this5.viewer = new OpenSeadragon({
            element: _this5.shadowRoot.querySelector("#viewer"),
            visibilityRatio: _this5.visibilityRatio,
            constrainDuringPan: _this5.constrainDuringPan,
            showNavigationControl: _this5.showNavigationControl,
            showNavigator: _this5.showNavigator,
            zoomPerClick: _this5.zoomPerClick,
            zoomPerScroll: _this5.zoomPerScroll,
            animationTime: _this5.animationTime,
            navPrevNextWrap: _this5.navPrevNextWrap,
            showRotationControl: _this5.showRotationControl,
            minZoomImageRatio: _this5.minZoomImageRatio,
            maxZoomPixelRatio: _this5.maxZoomPixelRatio,
            tileSources: tileSources
          });
          _this5.init = true;
        }, 100);
      } //Function to destroy the viewer and clean up everything created by OpenSeadragon.

    }, {
      key: "destroy",
      value: function destroy() {
        this.viewer.destroy();
      } // Zoom in

    }, {
      key: "zoomIn",
      value: function zoomIn() {
        // TODO: Replace with native openseadragon zoomIn
        var currentZoom = this.viewer.viewport.getZoom();
        var maxZoom = this.viewer.viewport.getMaxZoom();
        var zoomTo = currentZoom + 0.7;

        if (zoomTo < maxZoom) {
          this.viewer.viewport.zoomTo(zoomTo);
        }
      } // Zoom out

    }, {
      key: "zoomOut",
      value: function zoomOut() {
        // TODO: Replace with openseadragon native zoomOut
        var currentZoom = this.viewer.viewport.getZoom();
        var minZoom = this.viewer.viewport.getMinZoom();
        var zoomTo = currentZoom - 0.7;

        if (zoomTo > minZoom) {
          this.viewer.viewport.zoomTo(zoomTo);
        } else {
          if (minZoom != currentZoom) {
            this.resetZoom();
          }
        }
      } // reset zoom

    }, {
      key: "resetZoom",
      value: function resetZoom() {
        this.viewer.viewport.goHome();
      }
    }, {
      key: "_srcChanged",
      value: function _srcChanged() {
        if (this.dzi && this.init) {
          // add tiled image
          this._addTiledImage();
        }
      }
    }, {
      key: "loadedChangedEvent",
      value: function loadedChangedEvent(e) {
        this.loaded = e.detail.value;

        if (this.loaded) {
          this.loading = false;
        }
      }
    }, {
      key: "loadingChangedEvent",
      value: function loadingChangedEvent(e) {
        this.loading = e.detail.value;
      } // Add loaded images to viewer

    }, {
      key: "_loadedChanged",
      value: function _loadedChanged() {
        var _this6 = this;

        if (this.loaded) {
          if (!this.init) {
            setTimeout(function () {
              _this6._openseadragonLoaded();
            }, 100);
          } else {
            this._addImage();
          }
        }
      }
    }, {
      key: "_addImage",
      value: function _addImage() {
        this.viewer.addSimpleImage({
          url: this.src,
          index: 0,
          replace: true
        });
      }
    }, {
      key: "_addTiledImage",
      value: function _addTiledImage() {
        this.viewer.addTiledImage({
          tileSource: this.src,
          index: 0,
          replace: true
        });
      }
    }]);
    return ImgPanZoom;
  }(_litElement.LitElement);

  _exports.ImgPanZoom = ImgPanZoom;
  window.customElements.define(ImgPanZoom.tag, ImgPanZoom);
});