define(["exports", "../../../@polymer/polymer/polymer-element.js"], function (_exports, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImgLoader = void 0;

  function _templateObject_0cccf1b0e48211e9b5c6f7b0a264592f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <img id=\"img\" hidden=\"\" src=\"[[src]]\" />\n    "]);

    _templateObject_0cccf1b0e48211e9b5c6f7b0a264592f = function _templateObject_0cccf1b0e48211e9b5c6f7b0a264592f() {
      return data;
    };

    return data;
  }

  /*
  `img-loader` preloads images
  
  all `img-loader` code comes from <a href="https://github.com/PolymerElements/iron-image/blob/master/iron-image.html">iron image</a>
  */
  var ImgLoader =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(ImgLoader, _PolymerElement);

    function ImgLoader() {
      babelHelpers.classCallCheck(this, ImgLoader);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ImgLoader).apply(this, arguments));
    }

    babelHelpers.createClass(ImgLoader, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ImgLoader.prototype), "ready", this).call(this);
        var img = this.$.img;

        img.onload = function () {
          if (this.$.img.src !== this._resolveSrc(this.src)) return;

          this._setLoading(false);

          this._setLoaded(true);

          this._setError(false);
        }.bind(this);

        img.onerror = function () {
          if (this.$.img.src !== this._resolveSrc(this.src)) return;

          this._reset();

          this._setLoading(false);

          this._setLoaded(false);

          this._setError(true);
        }.bind(this);

        this._resolvedSrc = "";
      }
    }, {
      key: "_srcChanged",
      value: function _srcChanged(newSrc, oldSrc) {
        var newResolvedSrc = this._resolveSrc(newSrc);

        if (newResolvedSrc === this._resolvedSrc) return;
        this._resolvedSrc = newResolvedSrc;

        this._reset();

        this._load(newSrc);
      }
    }, {
      key: "_load",
      value: function _load(src) {
        if (src) {
          this.$.img.src = src;
        } else {
          this.$.img.removeAttribute("src");
        }

        this._setLoading(!!src);

        this._setLoaded(false);

        this._setError(false);
      }
    }, {
      key: "_reset",
      value: function _reset() {
        this.$.img.removeAttribute("src");

        this._setLoading(false);

        this._setLoaded(false);

        this._setError(false);
      }
    }, {
      key: "_resolveSrc",
      value: function _resolveSrc(testSrc) {
        var baseURI =
        /** @type {string} */
        this.ownerDocument.baseURI;
        return new URL(this.resolveUrl(testSrc, baseURI), baseURI).href;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_0cccf1b0e48211e9b5c6f7b0a264592f());
      }
    }, {
      key: "tag",
      get: function get() {
        return "img-loader";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          src: {
            observer: "_srcChanged",
            type: String
          },

          /**
           * Read-only value that is true when the image is loaded.
           */
          loaded: {
            notify: true,
            readOnly: true,
            type: Boolean,
            value: false
          },

          /**
           * Read-only value that tracks the loading state of the image when the `preload`
           * option is used.
           */
          loading: {
            notify: true,
            readOnly: true,
            type: Boolean,
            value: false
          },

          /**
           * Read-only value that indicates that the last set `src` failed to load.
           */
          error: {
            notify: true,
            readOnly: true,
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return ImgLoader;
  }(_polymerElement.PolymerElement);

  _exports.ImgLoader = ImgLoader;
  window.customElements.define(ImgLoader.tag, ImgLoader);
});