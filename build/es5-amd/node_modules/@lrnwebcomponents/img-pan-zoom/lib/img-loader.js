define(["exports", "../../../lit-element/lit-element.js"], function (_exports, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImgLoader = void 0;

  function _templateObject_6911acd0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <img\n        loading=\"lazy\"\n        id=\"img\"\n        hidden=\"\"\n        src=\"", "\"\n        aria-describedby=\"", "\"\n      />\n    "]);

    _templateObject_6911acd0d34d11ea880ba1e93364c49c = function _templateObject_6911acd0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /*
  `img-loader` preloads images
  */
  var ImgLoader =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(ImgLoader, _LitElement);
    babelHelpers.createClass(ImgLoader, [{
      key: "render",

      /**
       * LitElement render
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_6911acd0d34d11ea880ba1e93364c49c(), this.src, this.describedBy || "");
      }
      /**
       * convention
       */

    }], [{
      key: "tag",
      get: function get() {
        return "img-loader";
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          src: {
            type: String
          },

          /**
           * Read-only value that is true when the image is loaded.
           */
          loaded: {
            type: Boolean
          },

          /**
           * Read-only value that tracks the loading state of the image when the `preload`
           * option is used.
           */
          loading: {
            type: Boolean
          },

          /**
           * aria-describedby attribute
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },

          /**
           * Read-only value that indicates that the last set `src` failed to load.
           */
          error: {
            type: Boolean
          }
        };
      }
      /**
       * HTMLElement
       */

    }]);

    function ImgLoader() {
      var _this;

      babelHelpers.classCallCheck(this, ImgLoader);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ImgLoader).call(this));
      _this.loaded = false;
      _this.error = false;
      _this.loading = false;
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(ImgLoader, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "src") {
            _this2._srcChanged(_this2[propName], oldValue);
          }

          if (["error", "loaded", "loading"].includes(propName)) {
            // notify
            _this2.dispatchEvent(new CustomEvent("".concat(propName, "-changed"), {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this3 = this;

        var img = this.shadowRoot.querySelector("#img");

        img.onload = function () {
          _this3.loading = false;
          _this3.loaded = true;
          _this3.error = false;
        };

        img.onerror = function () {
          _this3._reset();

          _this3.loading = false;
          _this3.loaded = false;
          _this3.error = true;
        };

        this._resolvedSrc = "";
      }
    }, {
      key: "_srcChanged",
      value: function _srcChanged(newSrc, oldSrc) {
        this._resolvedSrc = newSrc;

        this._reset();

        this._load(newSrc);
      }
    }, {
      key: "_load",
      value: function _load(src) {
        if (src) {
          this.shadowRoot.querySelector("#img").src = src;
        } else {
          this.shadowRoot.querySelector("#img").removeAttribute("src");
        }

        this.loading = !!src;
        this.loaded = false;
        this.error = false;
      }
    }, {
      key: "_reset",
      value: function _reset() {
        this.shadowRoot.querySelector("#img").removeAttribute("src");
        this.loading = false;
        this.loaded = false;
        this.error = false;
      }
    }]);
    return ImgLoader;
  }(_litElement.LitElement);

  _exports.ImgLoader = ImgLoader;
  window.customElements.define(ImgLoader.tag, ImgLoader);
});