define(["exports", "meta", "../../lit-element/lit-element.js"], function (_exports, meta, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AwesomeExplosion = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  function _templateObject2_73f636d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <img\n        loading=\"lazy\"\n        src=\"", "\"\n        id=\"image\"\n        class=\"image-tag\"\n        alt=\"\"\n      />\n    "]);

    _templateObject2_73f636d0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_73f636d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_73f636d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n        :host([size=\"tiny\"]) #image {\n          width: 80px;\n          height: 80px;\n        }\n        :host([size=\"small\"]) #image {\n          width: 160px;\n          height: 160px;\n        }\n        :host([size=\"medium\"]) #image {\n          width: 240px;\n          height: 240px;\n        }\n        :host([size=\"large\"]) #image {\n          width: 320px;\n          height: 320px;\n        }\n        :host([size=\"epic\"]) #image {\n          width: 720px;\n          height: 720px;\n        }\n\n        :host([color=\"red\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(30deg);\n        }\n        :host([color=\"purple\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(290deg);\n        }\n        :host([color=\"blue\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(210deg);\n        }\n        :host([color=\"orange\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(320deg);\n        }\n        :host([color=\"yellow\"]) #image {\n          filter: sepia() saturate(10000%) hue-rotate(70deg);\n        }\n        #image {\n          width: 240px;\n          height: 240px;\n        }\n      "]);

    _templateObject_73f636d0c96f11ea8be5e1d5fe7ec787 = function _templateObject_73f636d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `awesome-explosion`
   * `An awesome, explosion.`
   *
   * @silly
   * @demo demo/index.html
   * @element awesome-explosion
   */
  var AwesomeExplosion =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(AwesomeExplosion, _LitElement);
    babelHelpers.createClass(AwesomeExplosion, [{
      key: "pathFromUrl",
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_73f636d0c96f11ea8be5e1d5fe7ec787())];
      }
    }]);

    function AwesomeExplosion() {
      var _this;

      babelHelpers.classCallCheck(this, AwesomeExplosion);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(AwesomeExplosion).call(this));

      var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

      _this.state = "stop";
      _this.image = basePath + "assets/explode.gif";
      _this.sound = basePath + "assets/273320__clagnut__fireworks.mp3";
      _this.size = "medium";
      _this.color = "";
      _this.resetSound = false;
      setTimeout(function () {
        _this.addEventListener("click", _this._setPlaySound.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseover", _this._setPlaySound.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseout", _this._setStopSound.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(AwesomeExplosion, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_73f636d0c96f11ea8be5e1d5fe7ec787(), this.image);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "state") {
            _this2.stopped = _this2._calculateStopped(_this2.state);
            _this2.playing = _this2._calculatePlaying(_this2.state);
            _this2.paused = _this2._calculatePaused(_this2.state);
          }
        });
      }
    }, {
      key: "_calculateStopped",

      /**
       * calculate if it is stopped
       */
      value: function _calculateStopped(newValue, oldValue) {
        if (newValue == "stop") {
          this.stopped = true;

          if (babelHelpers.typeof(window.audio) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            window.audio.currentTime = 0;
          }

          this._stopSound();

          this.dispatchEvent(new CustomEvent("awesome-event", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              message: "Sound stopped"
            }
          }));
        } else {
          this.stopped = false;
        }
      }
      /**
       * calculate if it is stopped
       */

    }, {
      key: "_calculatePlaying",
      value: function _calculatePlaying(newValue, oldValue) {
        if (newValue == "play") {
          this.playing = true;

          this._playSound();

          this.dispatchEvent(new CustomEvent("awesome-event", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              message: "Sound played"
            }
          }));
        } else {
          this.playing = false;
        }
      }
      /**
       * calculate if it is stopped
       */

    }, {
      key: "_calculatePaused",
      value: function _calculatePaused(newValue, oldValue) {
        if (newValue == "pause") {
          this.paused = true;

          this._stopSound();

          this.dispatchEvent(new CustomEvent("awesome-event", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              message: "Sound paused"
            }
          }));
        } else {
          this.paused = false;
        }
      }
      /**
       * Stop the sound effect.
       */

    }, {
      key: "_stopSound",
      value: function _stopSound() {
        if (babelHelpers.typeof(window.audio) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          window.audio.pause();

          if (this.resetSound) {
            window.audio.currentTime = 0;
          }
        }
      }
      /**
       * Set the state to play from an event.
       */

    }, {
      key: "_setPlaySound",
      value: function _setPlaySound(e) {
        this.state = "play";
      }
      /**
       * Set the state to play from an event.
       */

    }, {
      key: "_setStopSound",
      value: function _setStopSound(e) {
        this.state = "pause";
      }
      /**
       * Play the sound effect.
       */

    }, {
      key: "_playSound",
      value: function _playSound() {
        if (babelHelpers.typeof(window.audio) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          window.audio = new Audio(this.sound);
        }

        window.audio.play();
      }
    }], [{
      key: "tag",
      get: function get() {
        return "awesome-explosion";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * State is for setting:
           * Possible values: play, pause, stop
           */
          state: {
            type: String,
            reflect: true
          },

          /**
           * Allow for stopping the sound effect.
           */
          stopped: {
            type: Boolean
          },

          /**
           * Allow for playing the sound effect.
           */
          playing: {
            type: Boolean
          },

          /**
           * Allow for pausing the sound effect.
           */
          paused: {
            type: Boolean
          },

          /**
           * This allows you to swap out the image
           */
          image: {
            type: String
          },

          /**
           * This allows you to swap out the sound.
           */
          sound: {
            type: String
          },

          /**
           * This is the size of the element. Possible values are:
           * tiny, small, medium, large, epic
           */
          size: {
            type: String,
            reflect: true
          },

          /**
           * This is to change the color of the element. Possible values are:
           * red, blue, orange, yellow
           */
          color: {
            type: String,
            reflect: true
          },

          /**
           * Allow for resetting the sound effect.
           */
          resetSound: {
            type: Boolean,
            reflect: true,
            attribute: "reset-sound"
          }
        };
      }
    }]);
    return AwesomeExplosion;
  }(_litElement.LitElement);

  _exports.AwesomeExplosion = AwesomeExplosion;
  window.customElements.define(AwesomeExplosion.tag, AwesomeExplosion);
});