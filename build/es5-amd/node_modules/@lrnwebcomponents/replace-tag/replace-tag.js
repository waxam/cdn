define(["exports", "require", "./lib/PerformanceDetect.js", "./lib/loading-styles.js"], function (_exports, _require, _PerformanceDetect, _loadingStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ReplaceTag = void 0;
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `replace-tag`
   * `Loading helpers and css`
   *
   * This is a powerful little helper that can detect device performance
   * and then conditionally load / import accordingly.
   * The API has two key methods. The default, is used as <replace-tag with="new-tag"></replace-tag>
   * This will ensure that when visible (via IntersectionObserver) that new-tag will get imported.
   * This requires the use of the wc-registry.json setup used in unbundled-webcomponents.
   * The second methodology is to simply do the import on visibility. This is to avoid possible layout
   * thrashing. This looks like `<replace-tag with="new-tag" import-only></replace-tag>` which will NOT
   * render a `new-tag` element but instead simply import the definition. This is useful when you want
   * to avoid layout thrashing OR you want to import assets conditionally based on visibility of any kind.
   * @api import-only     @boolean   - will trigger an import of the tag and then self removal.
   *  This is useful for NOT replacing the tag in context but ensuring the definition loads based on
   *  passing into the viewport
   * @api importing-text  @string - what it says as it is visible to the user while importing.
   *  This also is the "Click to view" on low power environments
   * @api import-method   @string  - if it should import on view or device capabilities
   *  (or automatic, default). View will FORCE a load even on low performance environments while
   * things without this set (like a meme in content) would only load if it's been clicked on
   * for low performance unless the `import-method="view"` is specifically set.
   * @element replace-tag
   * @customElement
   * @demo demo/magicDeviceMethod.html magic method 2.0
   * @demo demo/magicMethod.html magic method
   * @demo demo/traditionalMethod.html traditional
   */
  var ReplaceTagSuper = function ReplaceTagSuper(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.call(this);
      } // define the scafold for how this will self-replace when updated


      babelHelpers.createClass(_class, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          }

          this.evaluateReplaceMethod();
        }
      }, {
        key: "performanceBasedReplacement",
        value: function performanceBasedReplacement() {
          this.setAttribute("laser-loader", "laser-loader");

          if (!this.importingText) {
            this.importingText = "Loading...";
          }

          this.render();
          this.runReplacement();
        }
        /**
         * evaluate based on user device and other settings HOW to handle the replacement
         */

      }, {
        key: "evaluateReplaceMethod",
        value: function () {
          var _evaluateReplaceMethod = babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var badDevice;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    // ensure that ANY replace-tag gets this applied
                    (0, _loadingStyles.WCRegistryLoaderCSS)();
                    _context.next = 3;
                    return _PerformanceDetect.DeviceDetails.badDevice();

                  case 3:
                    badDevice = _context.sent;

                    if (this.getAttribute("import-method") != "view" && this.getAttribute("import-only") == null) {
                      // look at browser performance
                      // if below a threashold display message to replace on click
                      if (badDevice) {
                        if (!this.importingText) {
                          this.importingText = "Click to load";
                        }

                        this.addEventListener("click", this.performanceBasedReplacement);
                      }
                    } // if we don't have a poor device or another setting is used, then we are
                    // expected to use lazy loading as it comes into the viewport like the rest


                    if (!badDevice || this.getAttribute("import-only") != null || this.getAttribute("import-method") == "view") {
                      this.setAttribute("laser-loader", "laser-loader");

                      if (!this.importingText) {
                        this.importingText = "Loading...";
                      }

                      if (!this.intersectionObserver) {
                        this.intersectionObserver = new IntersectionObserver(this.handleIntersectionCallback.bind(this), {
                          rootMargin: "0px",
                          threshold: [0.0, 0.25, 0.5, 0.75, 1.0],
                          delay: 150
                        });
                        this.intersectionObserver.observe(this);
                      }
                    }

                    this.render();

                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function evaluateReplaceMethod() {
            return _evaluateReplaceMethod.apply(this, arguments);
          }

          return evaluateReplaceMethod;
        }()
        /**
         * Very basic IntersectionObserver callback which will replace on visible
         */

      }, {
        key: "handleIntersectionCallback",
        value: function handleIntersectionCallback(entries) {
          var _iterator = _createForOfIteratorHelper(entries),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var entry = _step.value;
              var ratio = Number(entry.intersectionRatio).toFixed(2); // ensure ratio is higher than our limit before trigger visibility

              if (ratio >= 0.25) {
                if (this.intersectionObserver) {
                  this.intersectionObserver.disconnect();
                }

                this.intersectionObserver = null;
                this.runReplacement();
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        /**
         * replacement callback; avoiding use of replace bc of built in JS expectation for this method
         */

      }, {
        key: "runReplacement",
        value: function runReplacement() {
          var _this = this;

          // ensure we have something to replace this with
          if (this.getAttribute("with")) {
            // inject autoload tag which self appends
            new Promise(function (res, rej) {
              return _require.default(["../wc-autoload/wc-autoload.js"], res, rej);
            }).then(function () {
              // force a process to occur if this is the 1st time
              window.WCAutoload.process().then(function () {
                // kicks off the definition to load from the registry if its in there
                // the promise ensures everyting in the registry is teed up before
                // the DOM is asked to be processed w/ a definition
                window.WCAutoload.requestAvailability().registry.loadDefinition(_this.getAttribute("with"));
              });
            });
          } else {
            console.warn("replace-tag requires use of with attribute for what to upgrade to");
          }
        }
      }]);
      return _class;
    }(SuperClass);
  };

  var ReplaceTag = /*#__PURE__*/function (_ReplaceTagSuper) {
    babelHelpers.inherits(ReplaceTag, _ReplaceTagSuper);

    var _super2 = _createSuper(ReplaceTag);

    function ReplaceTag() {
      var _this2;

      babelHelpers.classCallCheck(this, ReplaceTag);
      _this2 = _super2.call(this);

      if (_this2.getAttribute("importing-text")) {
        _this2.importingText = _this2.getAttribute("importing-text");
      } // support for element being defined prior to view


      if (customElements.get(_this2.getAttribute("with"))) {
        var props = {};

        if (_this2.getAttribute("import-only") != null) {
          _this2.remove();
        } else {
          for (var i = 0, atts = _this2.attributes, n = atts.length; i < n; i++) {
            props[atts[i].nodeName] = atts[i].nodeValue;
          }

          var replacement = document.createElement(props.with); // set the value in the new object

          for (var i in props) {
            if (props[i] != null) {
              replacement.setAttribute(i, props[i]);
            }
          }

          replacement.removeAttribute("laser-loader");
          replacement.removeAttribute("with");
          replacement.removeAttribute("import-method");
          replacement.removeAttribute("importing-text");
          replacement.innerHTML = _this2.innerHTML;

          _this2.replaceWith(replacement);
        }
      } else {
        customElements.whenDefined(_this2.getAttribute("with")).then(function (response) {
          var props = {};

          if (_this2.getAttribute("import-only") != null) {
            _this2.remove();
          } else {
            // just the props off of this for complex state
            for (var i = 0, atts = _this2.attributes, n = atts.length; i < n; i++) {
              props[atts[i].nodeName] = atts[i].nodeValue;
            }

            var _replacement = document.createElement(props.with);

            _replacement.setAttribute("popup-loader", "popup-loader"); // set the value in the new object


            for (var i in props) {
              if (props[i] != null) {
                _replacement.setAttribute(i, props[i]);
              }
            }

            _replacement.removeAttribute("laser-loader");

            _replacement.innerHTML = _this2.innerHTML;

            _this2.replaceWith(_replacement); // variable / attribute clean up on the element that got replaced as
            // "this" is still valid for this loop


            setTimeout(function () {
              _replacement.removeAttribute("popup-loader");

              _replacement.removeAttribute("with");

              _replacement.removeAttribute("import-method");

              _replacement.removeAttribute("importing-text");

              _replacement.removeAttribute("laser-loader");

              _replacement.style.setProperty("--laserEdgeAni-width", null);

              _replacement.style.setProperty("--laserEdgeAni-innerWidth", null);

              _replacement.style.setProperty("--laserEdgeAni-height", null);

              _replacement.style.setProperty("--laserEdgeAni-innerHeight", null);
            }, 250);
          } // we resolved 1 definition so now we know it's safe to do all of them


          setTimeout(function () {
            document.body.querySelectorAll('replace-tag[with="' + props.with + '"]').forEach(function (el) {
              el.runReplacement();
            });
          }, 0);
        });
      }

      _this2.template = document.createElement("template");

      _this2.attachShadow({
        mode: "open"
      });

      return _this2;
    }
    /**
     * Convention we use
     */


    babelHelpers.createClass(ReplaceTag, [{
      key: "html",
      get: function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      opacity: .3;\n      transition: .3s linear opacity,.3s linear outline,.3s linear visibility,.3s linear display;\n    }\n    :host([import]) {\n      opacity: .1 !important;\n      background-color: transparent !important;\n      color: transparent !important;\n      padding: 0 !important;\n      margin: 0 !important;\n      font-size: 2px !important;\n      line-height: 2px !important;\n      height:2px;\n    }\n    :host(:not([import-method=\"click\"])) {\n      background-color: #EEEEEE;\n      color: #444444;\n      font-size: 16px;\n      opacity: .8;\n      margin: 16px;\n      padding: 16px;\n    }\n    :host(:not([import-method=\"click\"]):hover) {\n      opacity: 1 !important;\n      outline: 1px solid black;\n      cursor: pointer;\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    </style>\n<div>".concat(this.importingText, "</div>");
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }], [{
      key: "tag",
      get: function get() {
        return "replace-tag";
      }
    }]);
    return ReplaceTag;
  }(ReplaceTagSuper(HTMLElement));

  _exports.ReplaceTag = ReplaceTag;
  customElements.define(ReplaceTag.tag, ReplaceTag);
});