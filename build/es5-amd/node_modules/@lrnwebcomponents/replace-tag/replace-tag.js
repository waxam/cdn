define(["exports", "require", "./lib/PerformanceDetect.js", "./lib/loading-styles.js"], function (_exports, _require, _PerformanceDetect, _loadingStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ReplaceTag = void 0;
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `replace-tag`
   * `Loading helpers and css`
   *
   * This is a powerful little helper that can detect device performance
   * and then conditionally load / import accordingly.
   * The API has two key methods. The default, is used as <replace-tag with="new-tag"></replace-tag>
   * This will ensure that when visible (via IntersectionObserver) that new-tag will get imported.
   * This requires the use of the wc-registry.json setup used in unbundled-webcomponents.
   * The second methodology is to simply do the import on visibility. This is to avoid possible layout
   * thrashing. This looks like `<replace-tag with="new-tag" import-only></replace-tag>` which will NOT
   * render a `new-tag` element but instead simply import the definition. This is useful when you want
   * to avoid layout thrashing OR you want to import assets conditionally based on visibility of any kind.
   * @api import-only     @boolean   - will trigger an import of the tag and then self removal.
   *  This is useful for NOT replacing the tag in context but ensuring the definition loads based on
   *  passing into the viewport
   * @api importing-text  @string - what it says as it is visible to the user while importing.
   *  This also is the "Click to view" on low power environments
   * @api import-method   @string  - if it should import on view or device capabilities
   *  (or automatic, default). View will FORCE a load even on low performance environments while
   * things without this set (like a meme in content) would only load if it's been clicked on
   * for low performance unless the `import-method="view"` is specifically set.
   * @element replace-tag
   * @customElement
   * @demo demo/magicDeviceMethod.html magic method 2.0
   * @demo demo/magicMethod.html magic method
   * @demo demo/traditionalMethod.html traditional
   */
  var ReplaceTagSuper = function ReplaceTagSuper(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.call(this);
      } // define the scafold for how this will self-replace when updated


      babelHelpers.createClass(_class, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          }

          this.evaluateReplaceMethod();
        }
      }, {
        key: "performanceBasedReplacement",
        value: function performanceBasedReplacement() {
          this.setAttribute("laser-loader", "laser-loader");

          if (!this.importingText) {
            this.importingText = "Loading...";
          }

          this.render();
          this.runReplacement();
        }
        /**
         * evaluate based on user device and other settings HOW to handle the replacement
         */

      }, {
        key: "evaluateReplaceMethod",
        value: function () {
          var _evaluateReplaceMethod = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
            var badDevice;
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    // ensure that ANY replace-tag gets this applied
                    (0, _loadingStyles.WCRegistryLoaderCSS)();
                    _context.next = 3;
                    return _PerformanceDetect.DeviceDetails.badDevice();

                  case 3:
                    badDevice = _context.sent;

                    if (this.getAttribute("import-method") != "view" && this.getAttribute("import-only") == null) {
                      // look at browser performance
                      // if below a threashold display message to replace on click
                      if (badDevice) {
                        if (!this.importingText) {
                          this.importingText = "Click to load";
                        }

                        this.addEventListener("click", this.performanceBasedReplacement);
                      }
                    } // if we don't have a poor device or another setting is used, then we are
                    // expected to use lazy loading as it comes into the viewport like the rest


                    if (!badDevice || this.getAttribute("import-only") != null || this.getAttribute("import-method") == "view") {
                      this.setAttribute("laser-loader", "laser-loader");

                      if (!this.importingText) {
                        this.importingText = "Loading...";
                      }

                      if (!this.intersectionObserver) {
                        this.intersectionObserver = new IntersectionObserver(this.handleIntersectionCallback.bind(this), {
                          rootMargin: "0px",
                          threshold: [0.0, 0.25, 0.5, 0.75, 1.0],
                          delay: 150
                        });
                        this.intersectionObserver.observe(this);
                      }
                    }

                    this.render();

                  case 7:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee, this);
          }));

          function evaluateReplaceMethod() {
            return _evaluateReplaceMethod.apply(this, arguments);
          }

          return evaluateReplaceMethod;
        }()
        /**
         * Very basic IntersectionObserver callback which will replace on visible
         */

      }, {
        key: "handleIntersectionCallback",
        value: function handleIntersectionCallback(entries) {
          var _iterator = _createForOfIteratorHelper(entries),
              _step;

          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              var entry = _step.value;
              var ratio = Number(entry.intersectionRatio).toFixed(2); // ensure ratio is higher than our limit before trigger visibility

              if (ratio >= 0.25) {
                if (this.intersectionObserver) {
                  this.intersectionObserver.disconnect();
                }

                this.intersectionObserver = null;
                this.runReplacement();
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
        }
        /**
         * replacement callback; avoiding use of replace bc of built in JS expectation for this method
         */

      }, {
        key: "runReplacement",
        value: function runReplacement() {
          var _this = this;

          // ensure we have something to replace this with
          if (this.getAttribute("with")) {
            // inject autoload tag which self appends
            new Promise(function (res, rej) {
              return _require.default(["../wc-autoload/wc-autoload.js"], res, rej);
            }).then(function () {
              // force a process to occur if this is the 1st time
              window.WCAutoload.process().then(function () {
                // kicks off the definition to load from the registry if its in there
                // the promise ensures everyting in the registry is teed up before
                // the DOM is asked to be processed w/ a definition
                window.WCAutoload.requestAvailability().registry.loadDefinition(_this.getAttribute("with"));
              });
            });
          } else {
            console.warn("replace-tag requires use of with attribute for what to upgrade to");
          }
        }
      }]);
      return _class;
    }(SuperClass);
  };

  var ReplaceTag = /*#__PURE__*/function (_ReplaceTagSuper) {
    babelHelpers.inherits(ReplaceTag, _ReplaceTagSuper);

    var _super2 = _createSuper(ReplaceTag);

    function ReplaceTag() {
      var _this2;

      babelHelpers.classCallCheck(this, ReplaceTag);
      _this2 = _super2.call(this);

      if (_this2.getAttribute("importing-text")) {
        _this2.importingText = _this2.getAttribute("importing-text");
      } // support for element being defined prior to view


      if (customElements.get(_this2.getAttribute("with"))) {
        var props = {};

        if (_this2.getAttribute("import-only") != null) {
          _this2.remove();
        } else {
          for (var i = 0, atts = _this2.attributes, n = atts.length; i < n; i++) {
            props[atts[i].nodeName] = atts[i].nodeValue;
          }

          var replacement = document.createElement(props.with); // set the value in the new object

          for (var i in props) {
            if (props[i] != null) {
              replacement.setAttribute(i, props[i]);
            }
          }

          replacement.removeAttribute("laser-loader");
          replacement.removeAttribute("with");
          replacement.removeAttribute("import-method");
          replacement.removeAttribute("importing-text");
          replacement.innerHTML = _this2.innerHTML;

          _this2.replaceWith(replacement);
        }
      } else {
        customElements.whenDefined(_this2.getAttribute("with")).then(function (response) {
          var props = {};

          if (_this2.getAttribute("import-only") != null) {
            _this2.remove();
          } else {
            // just the props off of this for complex state
            for (var i = 0, atts = _this2.attributes, n = atts.length; i < n; i++) {
              props[atts[i].nodeName] = atts[i].nodeValue;
            }

            var _replacement = document.createElement(props.with);

            _replacement.setAttribute("popup-loader", "popup-loader"); // set the value in the new object


            for (var i in props) {
              if (props[i] != null) {
                _replacement.setAttribute(i, props[i]);
              }
            }

            _replacement.removeAttribute("laser-loader");

            _replacement.innerHTML = _this2.innerHTML;

            _this2.replaceWith(_replacement); // variable / attribute clean up on the element that got replaced as
            // "this" is still valid for this loop


            setTimeout(function () {
              _replacement.removeAttribute("popup-loader");

              _replacement.removeAttribute("with");

              _replacement.removeAttribute("import-method");

              _replacement.removeAttribute("importing-text");

              _replacement.removeAttribute("laser-loader");

              _replacement.style.setProperty("--laserEdgeAni-width", null);

              _replacement.style.setProperty("--laserEdgeAni-innerWidth", null);

              _replacement.style.setProperty("--laserEdgeAni-height", null);

              _replacement.style.setProperty("--laserEdgeAni-innerHeight", null);
            }, 250);
          } // we resolved 1 definition so now we know it's safe to do all of them


          setTimeout(function () {
            document.body.querySelectorAll('replace-tag[with="' + props.with + '"]').forEach(function (el) {
              el.runReplacement();
            });
          }, 0);
        });
      }

      _this2.template = document.createElement("template");

      _this2.attachShadow({
        mode: "open"
      });

      return _this2;
    }
    /**
     * Convention we use
     */


    babelHelpers.createClass(ReplaceTag, [{
      key: "html",
      get: function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      opacity: .3;\n      transition: .3s linear opacity,.3s linear outline,.3s linear visibility,.3s linear display;\n    }\n    :host([import]) {\n      opacity: .1 !important;\n      background-color: transparent !important;\n      color: transparent !important;\n      padding: 0 !important;\n      margin: 0 !important;\n      font-size: 2px !important;\n      line-height: 2px !important;\n      height:2px;\n    }\n    :host(:not([import-method=\"click\"])) {\n      background-color: #EEEEEE;\n      color: #444444;\n      font-size: 16px;\n      opacity: .8;\n      margin: 16px;\n      padding: 16px;\n    }\n    :host(:not([import-method=\"click\"]):hover) {\n      opacity: 1 !important;\n      outline: 1px solid black;\n      cursor: pointer;\n    }\n    :host([hidden]) {\n      display: none;\n    }\n    </style>\n<div>".concat(this.importingText, "</div>");
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }], [{
      key: "tag",
      get: function get() {
        return "replace-tag";
      }
    }]);
    return ReplaceTag;
  }(ReplaceTagSuper(HTMLElement));

  _exports.ReplaceTag = ReplaceTag;
  customElements.define(ReplaceTag.tag, ReplaceTag);
});