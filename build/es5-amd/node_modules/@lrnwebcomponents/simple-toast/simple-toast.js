define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleToast = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_8c0b11f0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        paper-button:not(:defined),\n        paper-toast:not(:defined) {\n          display: none;\n        }\n\n        paper-toast {\n          width: var(--simple-toast-width, inherit);\n          height: var(--simple-toast-height, inherit);\n          color: var(--simple-toast-color, white);\n          background-color: var(--simple-toast-bg, black);\n          top: var(--simple-toast-top, inherit);\n          margin: var(--simple-toast-margin, 16px);\n          padding: var(--simple-toast-padding, 16px);\n          left: var(--simple-toast-left, inherit);\n          bottom: var(--simple-toast-bottom, inherit);\n          right: var(--simple-toast-right, inherit);\n          border: var(--simple-toast-border, inherit);\n          z-index: var(--simple-toast-z-index, inherit);\n          font-size: var(--simple-toast-font-size, inherit);\n        }\n      "]);

    _templateObject2_8c0b11f0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8c0b11f0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8c0b11f0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-toast\n        id=\"toast\"\n        text=\"", "\"\n        duration=\"", "\"\n        ?opened=\"", "\"\n        @opened-changed=\"", "\"\n        .class=\"", "\"\n      >\n        <slot></slot>\n        <paper-button .hidden=\"", "\" @click=\"", "\"\n          >", "</paper-button\n        >\n      </paper-toast>\n    "]);

    _templateObject_8c0b11f0c96f11ea8be5e1d5fe7ec787 = function _templateObject_8c0b11f0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  // register globally so we can make sure there is only one
  window.SimpleToast = window.SimpleToast || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same simple-toast element, making it a singleton.

  window.SimpleToast.requestAvailability = function () {
    // if there is no single instance, generate one and append it to end of the document
    if (!window.SimpleToast.instance) {
      window.SimpleToast.instance = document.createElement("simple-toast");
      document.body.appendChild(window.SimpleToast.instance);
    }

    return window.SimpleToast.instance;
  };
  /**
   * `simple-toast`
   * `A singular toast / message for conistency`
   * @demo demo/index.html
   * @element simple-toast
   */


  var SimpleToast =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(SimpleToast, _LitElement);
    babelHelpers.createClass(SimpleToast, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_8c0b11f0c96f11ea8be5e1d5fe7ec787(), this.text, this.duration, this.opened, this.openedChanged, this.classStyle, !this.closeButton, this.hide, this.closeText);
      } // properties available to the custom element for data binding

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_8c0b11f0c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToast), "properties", this), {
          /**
           * Opened state of the toast, use event to change
           */
          opened: {
            type: Boolean,
            reflect: true
          },

          /**
           * Plain text based message to display
           */
          text: {
            type: String
          },

          /**
           * Class name, fit-bottom being a useful one
           */
          classStyle: {
            type: String,
            attribute: "class-style"
          },

          /**
           * Text for the close button
           */
          closeText: {
            type: String,
            attribute: "close-text"
          },

          /**
           * How long the toast message should be displayed
           */
          duration: {
            type: Number
          },

          /**
           * Event callback when hide is called
           */
          eventCallback: {
            type: String,
            attribute: "event-callback"
          },

          /**
           * If there should be a close button shown
           */
          closeButton: {
            type: Boolean,
            reflect: true,
            attribute: "close-button"
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-toast";
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }]);

    function SimpleToast() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleToast);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleToast).call(this));

      _this.setDefaultToast();

      return _this;
    }

    babelHelpers.createClass(SimpleToast, [{
      key: "firstUpdated",
      value: function firstUpdated() {
        setTimeout(function () {
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/paper-toast/paper-toast.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/paper-button/paper-button.js"], res, rej);
          });
        }, 0);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToast.prototype), "connectedCallback", this).call(this);
        window.addEventListener("simple-toast-hide", this.hideSimpleToast.bind(this));
        window.addEventListener("simple-toast-show", this.showSimpleToast.bind(this));
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("simple-toast-hide", this.hideSimpleToast.bind(this));
        window.removeEventListener("simple-toast-show", this.showSimpleToast.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleToast.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Hide callback
       */

    }, {
      key: "hideSimpleToast",
      value: function hideSimpleToast(e) {
        this.hide();
      }
    }, {
      key: "openedChanged",
      value: function openedChanged(e) {
        this.opened = e.detail.value;
      }
    }, {
      key: "setDefaultToast",
      value: function setDefaultToast() {
        this.opened = false;
        this.text = "Saved";
        this.classStyle = "";
        this.closeText = "Close";
        this.duration = 4000;
        this.eventCallback = null;
        this.closeButton = true;

        while (this.firstChild !== null) {
          this.removeChild(this.firstChild);
        }
      }
      /**
       * Show / available callback
       */

    }, {
      key: "showSimpleToast",
      value: function showSimpleToast(e) {
        var _this2 = this;

        // establish defaults and then let event change settings
        this.setDefaultToast(); // add your code to run when the singleton is called for

        if (e.detail.duration) {
          this.duration = e.detail.duration;
        }

        if (e.detail.text) {
          this.text = e.detail.text;
        }

        if (e.detail.classStyle) {
          this.classStyle = e.detail.classStyle;
        }

        if (e.detail.closeText) {
          this.closeText = e.detail.closeText;
        }

        if (e.detail.closeButton) {
          this.closeButton = e.detail.closeButton;
        }

        if (e.detail.eventCallback) {
          this.eventCallback = e.detail.eventCallback;
        }

        if (e.detail.slot) {
          this.appendChild(e.detail.slot);
        }

        setTimeout(function () {
          _this2.show();
        }, 5);
      }
    }, {
      key: "show",
      value: function show(e) {
        this.opened = true;
      }
    }, {
      key: "hide",
      value: function hide(e) {
        if (this.eventCallback) {
          var evt = new CustomEvent(this.eventCallback, {
            bubbles: true,
            cancelable: true,
            detail: true,
            composed: true
          });
          this.dispatchEvent(evt);
        }

        this.opened = false;
      }
    }]);
    return SimpleToast;
  }(_litElement.LitElement);

  _exports.SimpleToast = SimpleToast;
  window.customElements.define(SimpleToast.tag, SimpleToast);
});