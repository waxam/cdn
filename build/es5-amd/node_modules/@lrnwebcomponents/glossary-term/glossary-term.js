define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GlossaryTerm = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_573f9a30d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        lrn-vocab {\n          display: inline;\n        }\n      "]);

    _templateObject3_573f9a30d34d11ea880ba1e93364c49c = function _templateObject3_573f9a30d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject2_573f9a30d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <slot></slot>\n          "]);

    _templateObject2_573f9a30d34d11ea880ba1e93364c49c = function _templateObject2_573f9a30d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_573f9a30d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", "\n    "]);

    _templateObject_573f9a30d34d11ea880ba1e93364c49c = function _templateObject_573f9a30d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `glossary-term`
   * `Glossary term that shows a popup for the answer`
   * @demo demo/index.html
   * @element glossary-term
   */
  var GlossaryTerm =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(GlossaryTerm, _LitElement);
    babelHelpers.createClass(GlossaryTerm, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_573f9a30d34d11ea880ba1e93364c49c(), this._fallback ? (0, _litElement.html)(_templateObject2_573f9a30d34d11ea880ba1e93364c49c()) : "\n<lrn-vocab term=\"".concat(this.display, "\">\n  <div>").concat(this.definition, "</div>\n</lrn-vocab>\n"));
      } // haxProperty definition

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject3_573f9a30d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Glossary term",
            description: "",
            icon: "icons:android",
            color: "green",
            groups: ["Term"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "heyMP",
              owner: "PSU"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "name",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "definition",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "display",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(GlossaryTerm), "properties", this), {
          name: {
            name: "name",
            type: String,
            value: "",
            reflectToAttribute: false
          },
          definition: {
            name: "display",
            type: String,
            value: "",
            reflectToAttribute: false
          },
          display: {
            name: "display",
            type: String,
            value: "",
            reflectToAttribute: false
          },
          serviceType: {
            name: "serviceType",
            type: String,
            value: "file"
          },
          endpoint: {
            name: "endpoint",
            type: String,
            value: ""
          },
          _fallback: {
            name: "_fallback",
            type: Boolean,
            value: true,
            reflectToAttribute: false,
            observer: false
          }
        });
      }
    }]);

    function GlossaryTerm() {
      var _this;

      babelHelpers.classCallCheck(this, GlossaryTerm);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(GlossaryTerm).call(this));
      _this.name = "";
      _this.definition = "";
      _this.display = "";
      _this.serviceType = "file";
      _this.endpoint = "";
      _this._fallback = true;
      new Promise(function (res, rej) {
        return _require.default(["../lrn-vocab/lrn-vocab.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(GlossaryTerm, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["endpoint", "serviceType"].includes(propName)) {
            _this2.__endpointMethodChanged(_this2.endpoint, _this2.serviceType);
          }
        });
      }
      /**
       * convention
       */

    }, {
      key: "__endpointMethodChanged",

      /**
       * Ensure end point is correct based on method requested
       */
      value: function __endpointMethodChanged(endpoint, serviceType) {
        var _this3 = this;

        // fetch definition
        if (endpoint) {
          if (serviceType === "file") {
            fetch(endpoint, {
              method: "GET",
              headers: {
                "Content-Type": "application/json"
              }
            }).then(function (r) {
              return r.json();
            }).then(function (r) {
              var foundterm = r.terms.find(function (i) {
                return i.name === _this3.name;
              });

              if (foundterm) {
                _this3.definition = foundterm.definition;
                _this3._fallback = false;
              } else {
                _this3._fallback = true;
              }
            });
          } else if (serviceType === "graphql") {
            fetch(this.endpoint, {
              method: "POST",
              headers: {
                "Content-Type": "application/json"
              },
              body: JSON.stringify({
                query: "{ term(name: \"".concat(this.name, "\") { name definition } }")
              })
            }).then(function (r) {
              return r.json();
            }).then(function (r) {
              try {
                _this3.definition = r.data.term.definition;
                _this3._fallback = false;
              } catch (error) {}
            });
          }
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "glossary-term";
      }
    }]);
    return GlossaryTerm;
  }(_litElement.LitElement);

  _exports.GlossaryTerm = GlossaryTerm;
  window.customElements.define(GlossaryTerm.tag, GlossaryTerm);
});