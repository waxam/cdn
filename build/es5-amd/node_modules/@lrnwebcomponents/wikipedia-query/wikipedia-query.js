define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/iron-ajax/iron-ajax.js"], function (_exports, _require, _polymerElement, _ironAjax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WikipediaQuery = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_36a127d0dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --wikipedia-query-body-height: 160px;\n        }\n        :host [hidden] {\n          display: none;\n        }\n        #result {\n          height: var(--wikipedia-query-body-height);\n          overflow: scroll;\n          border: 1px grey solid;\n          padding: 8px 16px;\n        }\n        citation-element {\n          background-color: #f8f8f8;\n          padding: 16px 8px;\n          font-size: 12px;\n        }\n      </style>\n      <iron-ajax\n        auto\n        url$=\"https://en.wikipedia.org/w/api.php?origin=*&amp;action=query&amp;titles=[[search]]&amp;prop=extracts&amp;format=json\"\n        handle-as=\"json\"\n        on-response=\"handleResponse\"\n        debounce-duration=\"250\"\n        last-response=\"{{searchResponse}}\"\n      ></iron-ajax>\n      <h3 hidden$=\"[[!showTitle]]\">[[search]] Wikipedia article</h3>\n      <div id=\"result\" hidden$=\"[[!__rendercontent]]\"></div>\n      <citation-element\n        hidden$=\"[[!__rendercontent]]\"\n        creator=\"{Wikipedia contributors}\"\n        scope=\"sibling\"\n        license=\"by-sa\"\n        title=\"[[search]] --- {Wikipedia}{,} The Free Encyclopedia\"\n        source=\"https://en.wikipedia.org/w/index.php?title=[[search]]\"\n        date=\"[[__now]]\"\n      ></citation-element>\n    "]);

    _templateObject_36a127d0dbdc11e9bcafdb98156fc1d6 = function _templateObject_36a127d0dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
   * `wikipedia-query`
   * `Query and present information from wikipedia.`
   *
   * @demo demo/index.html
   */
  var WikipediaQuery =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(WikipediaQuery, _PolymerElement);

    function WikipediaQuery() {
      var _this;

      babelHelpers.classCallCheck(this, WikipediaQuery);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(WikipediaQuery).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../citation-element/citation-element.js"], res, rej);
      });
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(WikipediaQuery, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(WikipediaQuery.prototype), "connectedCallback", this).call(this);
        var date = new Date(Date.now());
        this.__now = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
      }
      /**
       * Convert renderas into a variable.
       */

    }, {
      key: "_renderAsUpdated",
      value: function _renderAsUpdated(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this._resetRenderMethods();
        }
      }
      /**
       * Validate input method.
       */

    }, {
      key: "_validRenderMethods",
      value: function _validRenderMethods() {
        var methods = ["content"];
        return methods;
      }
      /**
       * Reset all our meta attributes.
       */

    }, {
      key: "_resetRenderMethods",
      value: function _resetRenderMethods() {
        var methods = this._validRenderMethods();

        for (var i = 0; i < methods.length; i++) {
          this["__render" + methods[i]] = false;
        }
      }
      /**
       * Process response from wikipedia.
       */

    }, {
      key: "handleResponse",
      value: function handleResponse(response) {
        // the key of pages is a number so need to look for it
        if (babelHelpers.typeof(this.searchResponse) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this.searchResponse.query) {
          this["__render".concat(this.renderAs)] = true;

          for (var key in this.searchResponse.query.pages) {
            // skip anything that's prototype object
            if (!this.searchResponse.query.pages.hasOwnProperty(key)) continue; // load object response, double check we have an extract

            if (this.searchResponse.query.pages[key].extract) {
              var _html = this.searchResponse.query.pages[key].extract;
              _html = _html.replace(/<script[\s\S]*?>/gi, "&lt;script&gt;");
              _html = _html.replace(/<\/script>/gi, "&lt;/script&gt;");
              _html = _html.replace(/<style[\s\S]*?>/gi, "&lt;style&gt;");
              _html = _html.replace(/<\/style>/gi, "&lt;/style&gt;"); // need to innerHTML this or it won't set

              this.shadowRoot.querySelector("#result").innerHTML = _html;
            }
          }
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "wikipedia-query";
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_36a127d0dbdc11e9bcafdb98156fc1d6());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * ShowTitle
           */
          showTitle: {
            type: Boolean,
            value: true
          },

          /**
           * Search string.
           */
          search: {
            type: String,
            value: "Polymer (library)"
          },

          /**
           * Render the response as..
           */
          renderAs: {
            type: String,
            value: "content",
            observer: "_renderAsUpdated"
          },

          /**
           * Response to parse.
           */
          searchResponse: {
            type: Object
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Wikipedia article",
            description: "This can display a wikipedia article in context in a variety of formats.",
            icon: "book",
            color: "green",
            groups: ["Content", "Creative Commons"],
            handles: [{
              type: "content",
              title: "search"
            }],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [{
              property: "search",
              title: "Search term",
              description: "Word to search wikipedia for.",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }, {
              property: "showTitle",
              title: "Show title",
              description: "Whether or not to render the title of the article.",
              inputMethod: "boolean",
              icon: "editor:title"
            }],
            configure: [{
              property: "search",
              title: "Search term",
              description: "Word to search wikipedia for.",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }]
          },
          saveOptions: {
            wipeSlot: true
          }
        };
      }
    }]);
    return WikipediaQuery;
  }(_polymerElement.PolymerElement);

  _exports.WikipediaQuery = WikipediaQuery;
  window.customElements.define(WikipediaQuery.tag, WikipediaQuery);
});