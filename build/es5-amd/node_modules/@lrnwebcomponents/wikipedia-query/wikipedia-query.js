define(["exports", "require", "../../lit-element/lit-element.js", "../intersection-element/lib/IntersectionObserverMixin.js"], function (_exports, _require, _litElement, _IntersectionObserverMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WikipediaQuery = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_eea5cc70544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral([" <h3 .hidden=\"", "\">", "</h3>\n          <div id=\"result\"></div>\n          <citation-element\n            creator=\"{Wikipedia contributors}\"\n            scope=\"sibling\"\n            license=\"by-sa\"\n            title=\"", " --- {Wikipedia}{,} The Free Encyclopedia\"\n            source=\"https://en.wikipedia.org/w/index.php?title=", "\"\n            date=\"", "\"\n          ></citation-element>"]);

    _templateObject3_eea5cc70544211ebad6c77197a564a47 = function _templateObject3_eea5cc70544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _templateObject2_eea5cc70544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral([" ", ""]);

    _templateObject2_eea5cc70544211ebad6c77197a564a47 = function _templateObject2_eea5cc70544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _templateObject_eea5cc70544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --wikipedia-query-body-height: 160px;\n          --wikipedia-query-background-color: #f8f8f8;\n        }\n        :host [hidden] {\n          display: none;\n        }\n        #result {\n          height: var(--wikipedia-query-body-height);\n          overflow: scroll;\n          border: 1px grey solid;\n          padding: 8px 16px;\n        }\n        citation-element {\n          background-color: var(--wikipedia-query-background-color);\n          padding: 16px 8px;\n          font-size: 12px;\n        }\n      "]);

    _templateObject_eea5cc70544211ebad6c77197a564a47 = function _templateObject_eea5cc70544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `wikipedia-query`
   * `Query and present information from wikipedia.`
   * @demo demo/index.html
   * @element wikipedia-query
   */
  var WikipediaQuery = /*#__PURE__*/function (_IntersectionObserver) {
    babelHelpers.inherits(WikipediaQuery, _IntersectionObserver);

    var _super = _createSuper(WikipediaQuery);

    babelHelpers.createClass(WikipediaQuery, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_eea5cc70544211ebad6c77197a564a47())];
      }
    }]);

    function WikipediaQuery() {
      var _this;

      babelHelpers.classCallCheck(this, WikipediaQuery);
      _this = _super.call(this);
      _this.hideTitle = false;
      var date = new Date(Date.now());
      _this.__now = date.getDate() + "/" + (date.getMonth() + 1) + "/" + date.getFullYear();
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(WikipediaQuery, [{
      key: "render",
      // LitElement render function
      value: function render() {
        return (0, _litElement.html)(_templateObject2_eea5cc70544211ebad6c77197a564a47(), this.elementVisible ? (0, _litElement.html)(_templateObject3_eea5cc70544211ebad6c77197a564a47(), this.hideTitle, this._title, this.search, this.search, this.__now) : "");
      }
    }, {
      key: "updateArticle",
      value: function updateArticle(search) {
        var _this2 = this;

        fetch("https://en.wikipedia.org/w/api.php?origin=*&action=query&titles=".concat(search, "&prop=extracts&format=json")).then(function (response) {
          if (response.ok) return response.json();
        }).then(function (json) {
          _this2.handleResponse(json);
        });
      }
      /**
       * LitElement properties updated
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // element is visible, now we can search
          if (propName == "elementVisible" && _this3[propName]) {
            new Promise(function (res, rej) {
              return _require.default(["../citation-element/citation-element.js"], res, rej);
            });
          }

          if (["elementVisible", "search"].includes(propName) && _this3.search && _this3.elementVisible) {
            clearTimeout(_this3._debounce);
            _this3._debounce = setTimeout(function () {
              _this3.updateArticle(_this3.search);
            }, 25);
          }

          if (propName == "search") {
            if (_this3.title) {
              _this3._title = _this3.title;
            } else {
              _this3._title = _this3[propName].replace("_", " ") + " Wikipedia article";
            }
          }

          if (propName == "title") {
            if (_this3.title) {
              _this3._title = _this3.title;
            }
          }
        });
      }
    }, {
      key: "handleResponse",

      /**
       * Process response from wikipedia.
       */
      value: function handleResponse(response) {
        // the key of pages is a number so need to look for it
        if (babelHelpers.typeof(response) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && response.query) {
          for (var key in response.query.pages) {
            // skip anything that's prototype object
            if (!response.query.pages.hasOwnProperty(key)) continue; // load object response, double check we have an extract

            if (response.query.pages[key].extract) {
              var _html = response.query.pages[key].extract;
              _html = _html.replace(/<script[\s\S]*?>/gi, "&lt;script&gt;");
              _html = _html.replace(/<\/script>/gi, "&lt;/script&gt;");
              _html = _html.replace(/<style[\s\S]*?>/gi, "&lt;style&gt;");
              _html = _html.replace(/<\/style>/gi, "&lt;/style&gt;"); // need to innerHTML this or it won't set

              this.shadowRoot.querySelector("#result").innerHTML = _html;
            }
          }
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "wikipedia-query";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {};

        if (babelHelpers.get(babelHelpers.getPrototypeOf(WikipediaQuery), "properties", this)) {
          props = babelHelpers.get(babelHelpers.getPrototypeOf(WikipediaQuery), "properties", this);
        }

        return _objectSpread(_objectSpread({}, props), {}, {
          title: {
            type: String
          },
          __now: {
            type: String
          },
          _title: {
            type: String
          },

          /**
           * hideTitle
           */
          hideTitle: {
            type: Boolean,
            attribute: "hide-title"
          },

          /**
           * Search string.
           */
          search: {
            type: String
          }
        });
      }
      /**
       * HAXproperties
       */

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Wikipedia article",
            description: "This can display a wikipedia article in context in a variety of formats.",
            icon: "book",
            color: "green",
            groups: ["Content", "Creative Commons"],
            handles: [{
              type: "wikipedia",
              type_exclusive: true,
              title: "search"
            }, {
              type: "content",
              title: "search"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "search",
              title: "Article name",
              description: "Word to search wikipedia for.",
              inputMethod: "textfield",
              icon: "editor:title",
              required: true
            }, {
              property: "hideTitle",
              title: "Hide title",
              description: "Whether or not to render the title of the article.",
              inputMethod: "boolean",
              icon: "editor:title"
            }]
          },
          saveOptions: {
            wipeSlot: true,
            unsetAttributes: ["_title"]
          },
          demoSchema: [{
            tag: "wikipedia-query",
            properties: {
              hideTitle: false,
              search: "Internet"
            },
            content: ""
          }]
        };
      }
    }]);
    return WikipediaQuery;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_litElement.LitElement));

  _exports.WikipediaQuery = WikipediaQuery;
  window.customElements.define(WikipediaQuery.tag, WikipediaQuery);
});