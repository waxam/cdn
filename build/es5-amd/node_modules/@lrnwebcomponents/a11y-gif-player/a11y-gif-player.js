define(["exports", "require", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js", "../a11y-details/a11y-details.js"], function (_exports, _require, _litElement, _schemaBehaviors, _a11yDetails) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yGifPlayer = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_47ded5b0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        .sr-only {\n          position: absolute;\n          left: -9999999px;\n          top: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        #container {\n          padding: 0;\n          margin: 0;\n          position: relative;\n          width: min-content;\n          border: var(--a11y-gif-player-border, none);\n          border-radius: var(--a11y-gif-player-border-radius, 0);\n        }\n        button {\n          position: absolute;\n          width: 100%;\n          top: 0;\n          left: 0;\n          bottom: 0;\n          right: 0;\n          background-size: contain;\n          background-color: var(--a11y-gif-player-button-bg, #cccccc);\n        }\n        button:active,\n        button:focus,\n        button:hover {\n          border: var(--a11y-gif-player-focus-border, none);\n          outline: var(--a11y-gif-player-outline, 3px solid);\n        }\n        button[disabled] {\n          cursor: var(--a11y-gif-player-disabled-cursor, not-allowed);\n        }\n        button[aria-pressed=\"true\"] {\n          opacity: 0;\n        }\n        svg {\n          position: absolute;\n          top: 35%;\n          left: 35%;\n          width: var(--a11y-gif-player-arrow-size, 30%);\n          height: var(--a11y-gif-player-arrow-size, 30%);\n        }\n        g {\n          opacity: var(--a11y-gif-player-arrow-opacity, 0.5);\n        }\n        button:not([disabled]):active g,\n        button:not([disabled]):hover g,\n        button:not([disabled]):focus g {\n          opacity: var(--a11y-gif-player-button-focus-opacity, 0.7);\n        }\n        polygon {\n          fill: var(--a11y-gif-player-button-color, #000000);\n          stroke: var(--a11y-gif-player-arrow-border-color, #ffffff);\n          stroke-width: var(--a11y-gif-player-arrow-border-width, 15px);\n        }\n        text {\n          fill: var(--a11y-gif-player-button-text-color, #ffffff);\n        }\n        #longdesc {\n          position: absolute;\n          left: 2px;\n          bottom: 2px;\n          width: calc(100% - 2px);\n          font-size: 80%;\n        }\n        simple-tooltip {\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n        }\n      "]);

    _templateObject2_47ded5b0d34d11ea880ba1e93364c49c = function _templateObject2_47ded5b0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_47ded5b0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"container\">\n        <iron-image\n          id=\"gif\"\n          src=\"", "\"\n          alt=\"", "\"\n          aria-describedby=\"", " ", "\"\n          ?hidden=\"", "\"\n          slot=\"summary\"\n        >\n        </iron-image>\n        <button\n          id=\"button\"\n          aria-controls=\"gif\"\n          aria-pressed=\"", "\"\n          @click=\"", "\"\n          ?disabled=\"", "\"\n          style=\"background-image: url('", "')\"\n        >\n          <svg\n            id=\"svg\"\n            aria-hidden=\"true\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 200 200\"\n          >\n            <g>\n              <polygon points=\"30,20 30,180 170,100\"></polygon>\n              <text x=\"50\" y=\"115\" font-size=\"40px\">GIF</text>\n            </g>\n          </svg>\n          <span class=\"sr-only\">\n            ", "\n          </span>\n        </button>\n        <a11y-details\n          id=\"longdesc\"\n          ?hidden=\"", "\"\n          style=\"opacity:", "\"\n        >\n          <div slot=\"summary\">info</div>\n          <div slot=\"details\">", "</div>\n        </a11y-details>\n      </div>\n      <simple-tooltip for=\"button\" offset=\"30\" animation-delay=\"0\">\n        ", "\n      </simple-tooltip>\n    "]);

    _templateObject_47ded5b0d34d11ea880ba1e93364c49c = function _templateObject_47ded5b0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-gif-player`
   * plays gifs in an accessible way by having the user click to play their animation
  ### Styling
  
  `<a11y-gif-player>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--a11y-gif-player-border` | border around player/button | none
  `--a11y-gif-player-border-radius` | border-radius for player/button | 0
  `--a11y-gif-player-focus-border` | border-radius for player/button when hovered or focused | none
  `--a11y-gif-player-cursor` | cursor for player/button when hovered or focused | pointer
  `--a11y-gif-player-outline` | outline for player/button when hovered or focused | 
  `--a11y-gif-player-disabled-cursor` | cursor for player/button when disabled | not-allowed
  `--a11y-gif-player-arrow-size` | arrow icon size | 30%
  `--a11y-gif-player-arrow-opacity` | default arrow icon opacity | 0.5
  `--a11y-gif-player-button-focus-opacity` | arrow icon opacity when hovered or focused | 0.7
  `--a11y-gif-player-button-color` | arrow icon color | #000000
  `--a11y-gif-player-arrow-border-color` | arrow icon border color | #ffffff
  `--a11y-gif-player-arrow-border-width` | arrow icon border width | 15px
  `--a11y-gif-player-button-text-color` | arrow icon text color | #ffffff
  `--a11y-gif-player-button-bg` | button background color when no static image | #cccccc
   *
   * @demo ./demo/index.html
   * @element a11y-gif-player
   */
  var A11yGifPlayer =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(A11yGifPlayer, _SchemaBehaviors);

    function A11yGifPlayer() {
      var _this;

      babelHelpers.classCallCheck(this, A11yGifPlayer);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yGifPlayer).call(this));
      _this.alt = null;
      _this.disabled = false;
      _this.src = null;
      _this.tooltip = "Toggle animation";
      _this.tooltipPlaying = null;
      _this.srcWithoutAnimation = null;
      _this.__playing = false;
      new Promise(function (res, rej) {
        return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-image/iron-image.js"], res, rej);
      });
      return _this;
    }
    /**
     * LitElement render styles
     */


    babelHelpers.createClass(A11yGifPlayer, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_47ded5b0d34d11ea880ba1e93364c49c(), this.src, this.alt, this.longdesc ? "longdesc" : "", (this.describedBy || "").trim(), !this.src, this.__playing ? "true" : "false", this.toggle, this.disabled || !this.src, this.srcWithoutAnimation, this.__playing && this.tooltipPlaying ? this.tooltipPlaying : this.tooltip, !this.src || !this.longdesc, this.__playing ? 0 : 1, this.longdesc, this.__playing && this.tooltipPlaying ? this.tooltipPlaying : this.tooltip);
      }
      /**
       * Convention
       */

    }, {
      key: "play",

      /**
       * plays the animation regarless of previous state
       */
      value: function play() {
        this.__playing = true;
      }
      /**
       * stops the animation regarless of previous state
       */

    }, {
      key: "stop",
      value: function stop() {
        this.__playing = false;
      }
      /**
       * toggles the animation based on current state
       */

    }, {
      key: "toggle",
      value: function toggle() {
        if (this.__playing) {
          this.stop();
        } else {
          this.play();
        }
      }
      /**
       * deprecated. toggles the animation based on current state
       */

    }, {
      key: "toggleAnimation",
      value: function toggleAnimation() {
        if (this.__playing) {
          this.stop();
        } else {
          this.play();
        }
      }
      /**
       * HAX
       */

    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_47ded5b0d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "a11y-gif-player";
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer), "properties", this), {
          /**
           * Alt text of gif
           */
          alt: {
            type: String
          },

          /**
           * Whether button is disabled
           */
          disabled: {
            type: Boolean
          },

          /*
           * other id's to add to aria-describedby
           */
          describedBy: {
            attribute: "described-by",
            type: String
          },

          /**
           * longer image description for accesibility
           */
          longdesc: {
            type: String,
            attribute: "longdesc"
          },

          /**
           * Source of animated gif
           */
          src: {
            type: String
          },

          /**
           * Source of static version of image
           */
          srcWithoutAnimation: {
            type: String,
            attribute: "src-without-animation"
          },

          /**
           * default tooltip
           */
          tooltip: {
            type: String
          },

          /**
           * tooltip when playing
           */
          tooltipPlaying: {
            type: String,
            attribute: "tooltip-playing"
          },

          /**
           * whether GIF is playing
           */
          __playing: {
            type: Boolean
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Accessible GIF",
            description: "Makes animated GIFs accessible.",
            icon: "gif",
            color: "grey",
            groups: ["Images", "Media"],
            handles: [{
              type: "image",
              source: "src",
              source2: "srcWithoutAnimation",
              alt: "alt",
              ariaDescribedby: "describedBy"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "src",
              title: "Animated GIF",
              description: "The URL to your animated GIF.",
              inputMethod: "textfield",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "srcWithoutAnimation",
              title: "Still Image",
              description: "The URL to a still image version of your GIF.",
              inputMethod: "textfield",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "alt",
              title: "Alt Text",
              description: "Alternative text for the image.",
              inputMethod: "textfield",
              icon: "accessibility",
              required: true
            }],
            configure: [{
              property: "src",
              title: "Animated GIF",
              description: "The URL to your animated GIF.",
              inputMethod: "haxupload",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "srcWithoutAnimation",
              title: "Still Image",
              description: "The URL to a still image version of your GIF.",
              inputMethod: "haxupload",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "alt",
              title: "Alt Text",
              description: "Alternative text for the image.",
              inputMethod: "alt",
              icon: "accessibility",
              required: true
            }, {
              property: "longdesc",
              title: "Long Description",
              description: "Long descriptions of the GOF for accessibiility",
              inputMethod: "textarea"
            }],
            advanced: [{
              property: "describedBy",
              title: "aria-decsribedby",
              description: "Space-separated id list for long descriptions that appear elsewhere",
              inputMethod: "textfield"
            }]
          },
          demoSchema: [{
            tag: "a11y-gif-player",
            properties: {
              alt: "It's Always Sunny in Philadelphia Pepe Silvia Meme with GIFs",
              src: "https://media0.giphy.com/media/zHaPZZvl6cVHi/giphy.gif",
              srcWithoutAnimation: "https://media0.giphy.com/media/zHaPZZvl6cVHi/480w_s.jpg",
              longdesc: "Pepe Silvia scene from It's Always Sunny in Philadelphia. Jesus, dude, you're still making GIFs. The GIF's don't stop.",
              style: "max-width:400px"
            }
          }]
        };
      }
    }]);
    return A11yGifPlayer;
  }((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));

  _exports.A11yGifPlayer = A11yGifPlayer;
  window.customElements.define(A11yGifPlayer.tag, A11yGifPlayer);
});