define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../hax-body-behaviors/lib/HAXWiring.js", "../schema-behaviors/schema-behaviors.js", "../../@polymer/iron-a11y-keys/iron-a11y-keys.js"], function (_exports, _require, _polymerElement, _renderStatus, _HAXWiring, _schemaBehaviors, _ironA11yKeys) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yGifPlayer = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_f7e91d40b49411e9bfd4f79a8a57e0f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host #gifbutton > * {\n          position: relative;\n        }\n        :host #svg {\n          position: absolute;\n          top: 35%;\n          left: 35%;\n        }\n        :host #gifbutton:active,\n        :host #gifbutton:focus,\n        :host #gifbutton:hover {\n          cursor: pointer;\n          outline: 1px solid blue;\n        }\n        :host #preload {\n          display: none;\n        }\n      </style>\n      <div id=\"gifbutton\" aria-role=\"button\" aria-controls=\"gif\" tabindex=\"0\">\n        <div>\n          <img\n            id=\"gif\"\n            alt$=\"[[alt]]\"\n            src$=\"[[srcWithoutAnimation]]\"\n            style=\"width:100%;height:100%;\"\n          />\n          <svg\n            id=\"svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 200 200\"\n            width=\"30%\"\n            height=\"30%\"\n          >\n            <g opacity=\".5\">\n              <polygon\n                points=\"30,20 30,180 170,100\"\n                fill=\"#000000\"\n                stroke=\"#ffffff\"\n                stroke-width=\"15px\"\n              ></polygon>\n              <text x=\"50\" y=\"115\" fill=\"#ffffff\" font-size=\"40px\">GIF</text>\n            </g>\n          </svg>\n        </div>\n      </div>\n      <iron-image id=\"preload\" src$=\"[[src]]\" hidden=\"\"></iron-image>\n      <iron-a11y-keys\n        id=\"a11y\"\n        keys=\"enter space\"\n        on-keys-pressed=\"toggleAnimation\"\n      ></iron-a11y-keys>\n    "], ["\n      <style>\n        :host {\n          display: block;\n        }\n        :host #gifbutton > * {\n          position: relative;\n        }\n        :host #svg {\n          position: absolute;\n          top: 35%;\n          left: 35%;\n        }\n        :host #gifbutton:active,\n        :host #gifbutton:focus,\n        :host #gifbutton:hover {\n          cursor: pointer;\n          outline: 1px solid blue;\n        }\n        :host #preload {\n          display: none;\n        }\n      </style>\n      <div id=\"gifbutton\" aria-role=\"button\" aria-controls=\"gif\" tabindex=\"0\">\n        <div>\n          <img\n            id=\"gif\"\n            alt\\$=\"[[alt]]\"\n            src\\$=\"[[srcWithoutAnimation]]\"\n            style=\"width:100%;height:100%;\"\n          />\n          <svg\n            id=\"svg\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 200 200\"\n            width=\"30%\"\n            height=\"30%\"\n          >\n            <g opacity=\".5\">\n              <polygon\n                points=\"30,20 30,180 170,100\"\n                fill=\"#000000\"\n                stroke=\"#ffffff\"\n                stroke-width=\"15px\"\n              ></polygon>\n              <text x=\"50\" y=\"115\" fill=\"#ffffff\" font-size=\"40px\">GIF</text>\n            </g>\n          </svg>\n        </div>\n      </div>\n      <iron-image id=\"preload\" src\\$=\"[[src]]\" hidden=\"\"></iron-image>\n      <iron-a11y-keys\n        id=\"a11y\"\n        keys=\"enter space\"\n        on-keys-pressed=\"toggleAnimation\"\n      ></iron-a11y-keys>\n    "]);

    _templateObject_f7e91d40b49411e9bfd4f79a8a57e0f7 = function _templateObject_f7e91d40b49411e9bfd4f79a8a57e0f7() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-gif-player`
   * `Play gifs in an accessible way by having the user click to play their animation`
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var A11yGifPlayer =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(A11yGifPlayer, _SchemaBehaviors);

    function A11yGifPlayer() {
      var _this;

      babelHelpers.classCallCheck(this, A11yGifPlayer);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yGifPlayer).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-image/iron-image.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(A11yGifPlayer, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("click", this.toggleAnimation.bind(this));
          this.HAXWiring = new _HAXWiring.HAXWiring();
          this.HAXWiring.setup(A11yGifPlayer.haxProperties, A11yGifPlayer.tag, this);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("click", this.toggleAnimation.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Ready life cycle
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer.prototype), "ready", this).call(this);
        this.stop();
        this.shadowRoot.querySelector("#a11y").target = this.shadowRoot.querySelector("#gifbutton");
      }
      /**
       * plays the animation regarless of previous state
       */

    }, {
      key: "play",
      value: function play() {
        this.__stopped = true;
        this.toggleAnimation();
      }
      /**
       * stops the animation regarless of previous state
       */

    }, {
      key: "stop",
      value: function stop() {
        this.__stopped = false;
        this.toggleAnimation();
      }
      /**
       * toggles the animation based on current state
       */

    }, {
      key: "toggleAnimation",
      value: function toggleAnimation() {
        if (this.__stopped) {
          this.__stopped = false;
          this.shadowRoot.querySelector("#svg").style.visibility = "hidden";

          if (this.src != null) {
            this.shadowRoot.querySelector("#gif").src = this.src;
          }

          this.shadowRoot.querySelector("#gif").alt = this.alt + " (Stop animation.)";
        } else {
          this.__stopped = true;
          this.shadowRoot.querySelector("#svg").style.visibility = "visible";

          if (this.srcWithoutAnimation != null) {
            this.shadowRoot.querySelector("#gif").src = this.srcWithoutAnimation;
          }

          this.shadowRoot.querySelector("#gif").alt = this.alt + " (Play animation.)";
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_f7e91d40b49411e9bfd4f79a8a57e0f7());
      }
    }, {
      key: "tag",
      get: function get() {
        return "a11y-gif-player";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Source of the animated gif
           */
          src: {
            type: String,
            value: null
          },

          /**
           * Source of a version that is not animated
           */
          srcWithoutAnimation: {
            type: String,
            value: null
          },

          /**
           * Alt text of the gif
           */
          alt: {
            type: String,
            value: null
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(A11yGifPlayer), "properties", this));
        }

        return props;
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Accessible GIF",
            description: "Makes animated GIFs accessible.",
            icon: "gif",
            color: "grey",
            groups: ["Images", "Media"],
            handles: [{
              type: "image",
              source: "src",
              source2: "srcWithoutAnimation",
              alt: "alt"
            }],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [{
              property: "src",
              title: "Animated GIF",
              description: "The URL to your animated GIF.",
              inputMethod: "textfield",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "srcWithoutAnimation",
              title: "Still Image",
              description: "The URL to a still image version of your GIF.",
              inputMethod: "textfield",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "alt",
              title: "Alt Text",
              description: "Alternative text for the image.",
              inputMethod: "textfield",
              icon: "accessibility",
              required: true
            }],
            configure: [{
              property: "src",
              title: "Animated GIF",
              description: "The URL to your animated GIF.",
              inputMethod: "haxupload",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "srcWithoutAnimation",
              title: "Still Image",
              description: "The URL to a still image version of your GIF.",
              inputMethod: "haxupload",
              icon: "link",
              validationType: "url",
              required: true
            }, {
              property: "alt",
              title: "Alt Text",
              description: "Alternative text for the image.",
              inputMethod: "alt",
              icon: "accessibility",
              required: true
            }],
            advanced: []
          }
        };
      }
    }]);
    return A11yGifPlayer;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.A11yGifPlayer = A11yGifPlayer;
  window.customElements.define(A11yGifPlayer.tag, A11yGifPlayer);
});