define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../simple-modal/lib/simple-modal-template.js", "../../../@polymer/paper-button/paper-button.js", "../../img-pan-zoom/img-pan-zoom.js", "../../../@polymer/paper-tooltip/paper-tooltip.js"], function (_exports, _polymerElement, _simpleModalTemplate, _paperButton, _imgPanZoom, _paperTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignGalleryZoom = void 0;

  function _templateObject_435958d0b49011e9ae0d876050e9d419() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host paper-button {\n          width: 100%;\n        }\n        simple-modal-template[modal-id=\"zoomdialog\"] {\n          --simple-modal-width: 75vw;\n          --simple-modal-height: 75vh;\n          --simple-modal-titlebar-color: var(\n            --lrndesign-gallery-dialog-titlebar-color\n          );\n          --simple-modal-titlebar-background: var(\n            --lrndesign-gallery-dialog-titlebar-background-color\n          );\n          --simple-modal-header-color: var(\n            --lrndesign-gallery-dialog-header-color\n          );\n          --simple-modal-header-background: var(\n            --lrndesign-gallery-dialog-header-background-color\n          );\n          --simple-modal-content-container-color: var(\n            --lrndesign-gallery-dialog-color\n          );\n          --simple-modal-content-container-background: var(\n            --lrndesign-gallery-dialog-background-color\n          );\n        }\n        #zoombtn {\n          padding: 0px;\n          margin: 0;\n          min-width: unset;\n        }\n      </style>\n      <paper-button\n        id=\"zoombtn\"\n        label$=\"[[tooltip]]\"\n        title=\"\"\n        controls=\"zoomdialog\"\n      >\n        <slot></slot>\n      </paper-button>\n      <paper-tooltip for=\"zoombtn\" position=\"right\">[[tooltip]]</paper-tooltip>\n      <simple-modal-template\n        id=\"zoomtpl\"\n        modal-id=\"zoomdialog\"\n        title$=\"[[heading]]\"\n      >\n        <div\n          id=\"details\"\n          slot=\"header\"\n          hidden$=\"[[!_isAttrSet(details)]]\"\n        ></div>\n        <div slot=\"content\" hidden$=\"[[!_isAttrSet(src)]]\">\n          <img-pan-zoom\n            id=\"img\"\n            alt$=\"[[zoomAlt]]\"\n            src$=\"[[src]]\"\n            max-zoom-pixel-ratio=\"1.5\"\n            min-zoom-image-ratio=\"0.5\"\n            zoom-per-click=\"1.2\"\n            zoom-per-scroll=\"0.6\"\n          >\n          </img-pan-zoom>\n          <div>\n            Swipe, use a mouse or use the +/- and arrow keys to zoom and pan the\n            image above.\n          </div>\n        </div>\n      </simple-modal-template>\n    "]);

    _templateObject_435958d0b49011e9ae0d876050e9d419 = function _templateObject_435958d0b49011e9ae0d876050e9d419() {
      return data;
    };

    return data;
  }

  /**
   * `lrndesign-gallery-zoom`
   * `An element that renders the zoom feature for the gallery.`
   *
   * @microcopy - language worth noting:```
  <lrndesign-gallery-zoom 
    details="Text details about the image." //optional text about the image
    heading$="Image title"                  //required, image dialog title
    item-id="0"                             //required, index of the item to view
    src$="[[item.large]]"                   //required, full-sized image
    tooltip$="[[item.tooltip]]"             //required, tooltip text
    zoom-alt$="[[item.alt]]"                //required, alt text for the image
    tooltip="ZOOM"                       
  </lrndesign-gallery-zoom>```
   *
   * CSS Variables: ```
  --lrndesign-gallery-dialog-color                        //text color of dialog
  --lrndesign-gallery-dialog-background-color             //background-color of dialog
  --lrndesign-gallery-dialog-titlebar-color               //text color of dialog titlebar
  --lrndesign-gallery-dialog-titlebar-background-color    //background-color of dialog titlebar
  --lrndesign-gallery-dialog-header-color                 //text color of dialog header
  --lrndesign-gallery-dialog-header-background-color      //background-color of dialog header```
   * 
   * @customElement
   * @polymer
   */
  var LrndesignGalleryZoom =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrndesignGalleryZoom, _PolymerElement);

    function LrndesignGalleryZoom() {
      babelHelpers.classCallCheck(this, LrndesignGalleryZoom);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrndesignGalleryZoom).apply(this, arguments));
    }

    babelHelpers.createClass(LrndesignGalleryZoom, [{
      key: "ready",

      /**
       * life cycle, element is ready
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignGalleryZoom.prototype), "ready", this).call(this);

        this._detailsChanged();

        this.$.zoomtpl.associateEvents(this.$.zoombtn);

        if (this.scrolled) {
          this.dispatchEvent(new CustomEvent("gallery-scroll"));
          if (!this.zoomed) this.$.zoombtn.focus();
        }

        if (this.zoomed) {
          this.zoom();
        }
      }
      /**
       * opens the modal
       */

    }, {
      key: "zoom",
      value: function zoom() {
        var root = this;
        root.$.zoombtn.dispatchEvent(new CustomEvent("gallery-zoom", {
          detail: {
            root: root
          }
        }));
      }
      /**
       * updates the details.
       */

    }, {
      key: "_detailsChanged",
      value: function _detailsChanged(e) {
        this.$.details.innerHTML = this.details;
      }
      /**
       * returns true if the given attribute is not null
       *
       * @param {string} the attribute to test
       * @returns {boolean} if there is a non-null value for the attribute
       */

    }, {
      key: "_isAttrSet",
      value: function _isAttrSet() {
        var attr = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        return attr !== null && attr !== undefined;
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "lrndesign-gallery-zoom";
      } //get gallery behaviors

    }, {
      key: "behaviors",
      get: function get() {
        return [LrndesignGalleryBehaviors];
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_435958d0b49011e9ae0d876050e9d419());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * optional: details for zooming
           */
          details: {
            type: String,
            value: null,
            observer: "_detailsChanged"
          },

          /**
           * heading for the zoom modal
           */
          heading: {
            type: String,
            value: "Image Zoom"
          },

          /**
           * heading for the zoom modal
           */
          itemId: {
            type: String,
            value: null //observer: "_itemChanged"

          },

          /**
           * The zoom modal
           */
          modal: {
            type: Object,
            value: null
          },

          /**
           * scrolled to by default (for grid)?
           */
          scrolled: {
            type: Boolean,
            value: false
          },

          /**
           * Image source.
           */
          src: {
            type: String,
            reflectToAttribute: true
          },

          /**
           * tooltip for the zoom button
           */
          tooltip: {
            type: String,
            value: "Zoom In"
          },

          /**
           * gallery item's alt text
           */
          zoomAlt: {
            type: String,
            value: null
          },

          /**
           * zoomed by default?
           */
          zoomed: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return LrndesignGalleryZoom;
  }(_polymerElement.PolymerElement);

  _exports.LrndesignGalleryZoom = LrndesignGalleryZoom;
  window.customElements.define(LrndesignGalleryZoom.tag, LrndesignGalleryZoom);
});