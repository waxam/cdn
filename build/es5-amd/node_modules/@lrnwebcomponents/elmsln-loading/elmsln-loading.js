define(["exports", "../../@polymer/polymer/polymer-element.js", "../lrn-icons/lrn-icons.js", "../../@polymer/iron-icon/iron-icon.js", "../simple-colors/simple-colors.js"], function (_exports, _polymerElement, _lrnIcons, _ironIcon, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnLoading = void 0;

  function _templateObject_8122ae50e53211e9a0cfefb808989d41() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles\">\n        @-moz-keyframes spin {\n          100% {\n            -moz-transform: rotate(60deg);\n            filter: saturate(10) invert(0.9);\n          }\n        }\n        @-webkit-keyframes spin {\n          100% {\n            -webkit-transform: rotate(60deg);\n            filter: saturate(10) invert(0.9);\n          }\n        }\n        @keyframes spin {\n          100% {\n            -webkit-transform: rotate(60deg);\n            transform: rotate(60deg);\n          }\n        }\n        :host iron-icon {\n          color: var(--simple-colors-default-theme-accent-6);\n          display: block;\n          -webkit-animation: spin 1.25s ease-out infinite;\n          -moz-animation: spin 1.25s ease-out infinite;\n          animation: spin 1.25s ease-out infinite;\n        }\n        :host([size=\"tiny\"]) iron-icon {\n          width: 16px;\n          height: 16px;\n          -webkit-animation: spin 0.75s ease-out infinite;\n          -moz-animation: spin 0.75s ease-out infinite;\n          animation: spin 0.75s ease-out infinite;\n        }\n        :host([size=\"small\"]) iron-icon {\n          width: 32px;\n          height: 32px;\n          -webkit-animation: spin 1s ease-out infinite;\n          -moz-animation: spin 1s ease-out infinite;\n          animation: spin 1s ease-out infinite;\n        }\n        :host([size=\"medium\"]) iron-icon {\n          width: 64px;\n          height: 64px;\n          -webkit-animation: spin 1.25s ease-out infinite;\n          -moz-animation: spin 1.25s ease-out infinite;\n          animation: spin 1.25s ease-out infinite;\n        }\n        :host([size=\"large\"]) iron-icon {\n          width: 80px;\n          height: 80px;\n          -webkit-animation: spin 1.25s ease-out infinite;\n          -moz-animation: spin 1.25s ease-out infinite;\n          animation: spin 1.25s ease-out infinite;\n        }\n        :host([size=\"epic\"]) iron-icon {\n          width: 400px;\n          height: 400px;\n          -webkit-animation: spin 2s ease-out infinite;\n          -moz-animation: spin 2s ease-out infinite;\n          animation: spin 2s ease-out infinite;\n        }\n      </style>\n      <iron-icon icon=\"lrn:network\"></iron-icon>\n    "]);

    _templateObject_8122ae50e53211e9a0cfefb808989d41 = function _templateObject_8122ae50e53211e9a0cfefb808989d41() {
      return data;
    };

    return data;
  }

  /**
   * `elmsln-loading`
   * A spinner to tell the user that something is loading.
   * This is just the spinner though and doesn't provide any text or anything else.
   *
   * @microcopy - language worth noting:
   *  - elmsln - an open source NGDLE to save education
   *
   * @customElement
   * @polymer
   * @polymerLegacy
   * @demo demo/index.html
   */
  var ElmslnLoading =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(ElmslnLoading, _SimpleColors);

    function ElmslnLoading() {
      babelHelpers.classCallCheck(this, ElmslnLoading);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ElmslnLoading).apply(this, arguments));
    }

    babelHelpers.createClass(ElmslnLoading, [{
      key: "_getAccentColor",
      value: function _getAccentColor(color) {
        color = color.replace("-text", "");

        if ((!this.accentColor || this.accentColor === "grey") && this.colors[color]) {
          this.accentColor = color;
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "elmsln-loading";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * materialize class names for color
           */
          color: {
            type: String,
            observer: "_getAccentColor"
          },

          /**
           * tiny, small, medium, large, epic sizing.
           */
          size: {
            type: String,
            reflectToAttribute: true,
            value: "medium"
          }
        };
      }
    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_8122ae50e53211e9a0cfefb808989d41());
      }
    }]);
    return ElmslnLoading;
  }(_simpleColors.SimpleColors);

  _exports.ElmslnLoading = ElmslnLoading;
  window.customElements.define(ElmslnLoading.tag, ElmslnLoading);
});