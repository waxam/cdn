define(["exports", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _litElement, _simpleColors, _simpleIcon, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnLoading = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_df1d34a0544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-icon\n        icon=\"lrn:network\"\n        accent-color=\"", "\"\n        contrast=\"", "\"\n        dark=\"", "\"\n      ></simple-icon>\n    "]);

    _templateObject2_df1d34a0544211ebad6c77197a564a47 = function _templateObject2_df1d34a0544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _templateObject_df1d34a0544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        @-moz-keyframes spin {\n          100% {\n            -moz-transform: rotate(60deg);\n            filter: saturate(10) invert(0.9);\n          }\n        }\n        @-webkit-keyframes spin {\n          100% {\n            -webkit-transform: rotate(60deg);\n            filter: saturate(10) invert(0.9);\n          }\n        }\n        @keyframes spin {\n          100% {\n            -webkit-transform: rotate(60deg);\n            transform: rotate(60deg);\n          }\n        }\n        :host simple-icon {\n          display: block;\n          -webkit-animation: spin 1.25s ease-out infinite;\n          -moz-animation: spin 1.25s ease-out infinite;\n          animation: spin 1.25s ease-out infinite;\n        }\n        :host([size=\"tiny\"]) simple-icon {\n          --simple-icon-width: 16px;\n          --simple-icon-height: 16px;\n          -webkit-animation: spin 0.75s ease-out infinite;\n          -moz-animation: spin 0.75s ease-out infinite;\n          animation: spin 0.75s ease-out infinite;\n        }\n        :host([size=\"small\"]) simple-icon {\n          --simple-icon-width: 32px;\n          --simple-icon-height: 32px;\n          -webkit-animation: spin 1s ease-out infinite;\n          -moz-animation: spin 1s ease-out infinite;\n          animation: spin 1s ease-out infinite;\n        }\n        :host([size=\"medium\"]) simple-icon {\n          --simple-icon-width: 64px;\n          --simple-icon-height: 64px;\n          -webkit-animation: spin 1.25s ease-out infinite;\n          -moz-animation: spin 1.25s ease-out infinite;\n          animation: spin 1.25s ease-out infinite;\n        }\n        :host([size=\"large\"]) simple-icon {\n          --simple-icon-width: 80px;\n          --simple-icon-height: 80px;\n          -webkit-animation: spin 1.25s ease-out infinite;\n          -moz-animation: spin 1.25s ease-out infinite;\n          animation: spin 1.25s ease-out infinite;\n        }\n        :host([size=\"epic\"]) simple-icon {\n          --simple-icon-width: 400px;\n          --simple-icon-height: 400px;\n          -webkit-animation: spin 2s ease-out infinite;\n          -moz-animation: spin 2s ease-out infinite;\n          animation: spin 2s ease-out infinite;\n        }\n      "]);

    _templateObject_df1d34a0544211ebad6c77197a564a47 = function _templateObject_df1d34a0544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `elmsln-loading`
   * A spinner to tell the user that something is loading.
   * This is just the spinner though and doesn't provide any text or anything else.
   *
   * @microcopy - language worth noting:
   *  - elmsln - an open source NGDLE to save education
   *
   * @demo demo/index.html
   * @element elmsln-loading
   */
  var ElmslnLoading = /*#__PURE__*/function (_SimpleColors) {
    babelHelpers.inherits(ElmslnLoading, _SimpleColors);

    var _super = _createSuper(ElmslnLoading);

    babelHelpers.createClass(ElmslnLoading, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnLoading), "styles", this)), [(0, _litElement.css)(_templateObject_df1d34a0544211ebad6c77197a564a47())]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "elmsln-loading";
      }
      /**
       * HTMLElement
       */

    }]);

    function ElmslnLoading() {
      var _this;

      babelHelpers.classCallCheck(this, ElmslnLoading);
      _this = _super.call(this);
      _this.size = "medium";
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(ElmslnLoading, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "color") {
            _this2._getAccentColor(_this2[propName]);
          }
        });
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "render",

      /**
       * LitElement render
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject2_df1d34a0544211ebad6c77197a564a47(), this.accentColor, this.contrast, this.dark);
      }
    }, {
      key: "_getAccentColor",
      value: function _getAccentColor(color) {
        color = color.replace("-text", "");

        if ((!this.accentColor || this.accentColor === "grey") && this.colors[color]) {
          this.accentColor = color;
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnLoading), "properties", this)), {}, {
          /**
           * dark
           */
          dark: {
            type: Boolean
          },

          /**
           * color
           */
          color: {
            type: String
          },

          /**
           * contrast
           */
          contrast: {
            type: Number
          },

          /**
           * tiny, small, medium, large, epic sizing.
           */
          size: {
            type: String,
            reflect: true
          }
        });
      }
    }]);
    return ElmslnLoading;
  }(_simpleColors.SimpleColors);

  _exports.ElmslnLoading = ElmslnLoading;
  window.customElements.define(ElmslnLoading.tag, ElmslnLoading);
});