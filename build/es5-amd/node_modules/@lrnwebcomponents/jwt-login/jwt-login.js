define(["exports", "../../lit-element/lit-element.js", "../../@polymer/iron-ajax/iron-ajax.js"], function (_exports, _litElement, _ironAjax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.JwtLogin = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_5d74ce20d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <iron-ajax\n        reject-with-request\n        ?auto=\"", "\"\n        id=\"request\"\n        method=\"", "\"\n        url=\"", "\"\n        handle-as=\"json\"\n        content-type=\"application/json\"\n        @response=\"", "\"\n        @last-error-changed=\"", "\"\n      >\n      </iron-ajax>\n    "]);

    _templateObject_5d74ce20d34d11ea880ba1e93364c49c = function _templateObject_5d74ce20d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `jwt-login`
   * `a simple element to check for and fetch JWTs`
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   * @element jwt-login
   */
  var JwtLogin =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(JwtLogin, _LitElement);

    function JwtLogin() {
      var _this;

      babelHelpers.classCallCheck(this, JwtLogin);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(JwtLogin).call(this));
      _this.auto = false;
      _this.method = "GET";
      _this.body = {};
      _this.key = "jwt";
      _this.jwt = null;
      return _this;
    }
    /**
     * Handle the last error rolling in
     */


    babelHelpers.createClass(JwtLogin, [{
      key: "lastErrorChanged",
      value: function lastErrorChanged(e) {
        if (e.detail.value) {
          // check for JWT needing refreshed vs busted but must be 403
          console.error(e);
          this.dispatchEvent(new CustomEvent("jwt-login-refresh-error", {
            composed: true,
            bubbles: true,
            cancelable: false,
            detail: {
              value: e.detail.value
            }
          }));
        }
      }
      /**
       * LitElement
       */

    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_5d74ce20d34d11ea880ba1e93364c49c(), this.auto, this.method, this.url, this.loginResponse, this.lastErrorChanged);
      }
    }, {
      key: "updated",

      /**
       * LitElement life cycle - properties changed callback
       */
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "jwt") {
            _this2._jwtChanged(_this2[propName], oldValue); // notify


            _this2.dispatchEvent(new CustomEvent("jwt-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "_jwtChanged",
      value: function _jwtChanged(newValue, oldValue) {
        if ((newValue == null || newValue == "" || newValue == "null") && babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // remove this key from local storage bin
          localStorage.removeItem(this.key); // jwt was invalid some how

          this.dispatchEvent(new CustomEvent("jwt-logged-in", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: false
          }));
        } else if (newValue) {
          // set the jwt into local storage so we can reference later
          localStorage.setItem(this.key, newValue);
          this.dispatchEvent(new CustomEvent("jwt-token", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: newValue
          }));
          this.dispatchEvent(new CustomEvent("jwt-logged-in", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: true
          }));
        }
      }
      /**
       * HTMLElement
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(JwtLogin.prototype), "connectedCallback", this).call(this);
        window.addEventListener("jwt-login-refresh-token", this.requestRefreshToken.bind(this));
        window.addEventListener("jwt-login-toggle", this.toggleLogin.bind(this));
        window.addEventListener("jwt-login-login", this.loginRequest.bind(this));
        window.addEventListener("jwt-login-logout", this.logoutRequest.bind(this));
      }
      /**
       * HTMLElement
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("jwt-login-refresh-token", this.requestRefreshToken.bind(this));
        window.removeEventListener("jwt-login-login", this.loginRequest.bind(this));
        window.removeEventListener("jwt-login-toggle", this.toggleLogin.bind(this));
        window.removeEventListener("jwt-login-logout", this.logoutRequest.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(JwtLogin.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * LitElement life cycle - ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        // set jwt from local storage bin
        this.jwt = localStorage.getItem(this.key);
      }
      /**
       * Request a refresh token
       */

    }, {
      key: "requestRefreshToken",
      value: function requestRefreshToken(e) {
        this.__context = "refresh";

        if (e.detail.element) {
          this.__element = e.detail.element;
        }

        this.shadowRoot.querySelector("#request").url = this.refreshUrl;
        this.shadowRoot.querySelector("#request").body = {};
        this.shadowRoot.querySelector("#request").generateRequest();
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "toggleLogin",
      value: function toggleLogin(e) {
        // null is default, if we don't have anything go get one
        if (this.jwt == null) {
          this.loginRequest(e);
        } else {
          this.logoutRequest(e);
        }
      }
    }, {
      key: "loginRequest",
      value: function loginRequest(e) {
        this.__context = "login"; // detail of a login request event is the body which should have
        // the authorization data in it

        this.body = e.detail;
        this.shadowRoot.querySelector("#request").url = this.url;
        this.shadowRoot.querySelector("#request").body = _objectSpread({}, this.body);
        this.shadowRoot.querySelector("#request").generateRequest();
      }
    }, {
      key: "logoutRequest",
      value: function logoutRequest(e) {
        this.__context = "logout";
        this.__redirect = e.detail.redirect; // we were told to logout, reset body

        this.body = {}; // reset jwt which will do all the events / local storage work

        this.jwt = null;
        this.shadowRoot.querySelector("#request").url = this.logoutUrl;
        this.shadowRoot.querySelector("#request").body = {};
        this.shadowRoot.querySelector("#request").generateRequest();
      }
      /**
       * Login bridge to get a JWT and hang onto it
       */

    }, {
      key: "loginResponse",
      value: function loginResponse(e) {
        var _this3 = this;

        // trap in case front end thinks this is a valid response..
        if (e.detail.status == 200 && e.detail.response != "Access denied") {
          switch (this.__context) {
            case "login":
              this.jwt = e.detail.response;
              break;

            case "refresh":
              // jwt change events will propagate and do their thing
              this.jwt = e.detail.response; // if we had a requesting element, let's let it do its thing

              if (this.__element) {
                var _this$__element$obj;

                (_this$__element$obj = this.__element.obj)[this.__element.callback].apply(_this$__element$obj, [this.jwt].concat(babelHelpers.toConsumableArray(this.__element.params)));

                this.__element = false;
              }

              break;

            case "logout":
              if (this.__redirect && this.redirectUrl) {
                setTimeout(function () {
                  window.location.href = _this3.redirectUrl;
                }, 100);
              }

              break;
          }
        } else {
          this.lastErrorChanged(e);
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "jwt-login";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * auto, useful for demos
           */
          auto: {
            type: Boolean
          },

          /**
           * refreshUrl to get a new JSON web token
           */
          refreshUrl: {
            type: String,
            attribute: "refresh-url"
          },

          /**
           * where to redirect for a login token if we REALLY are logged out
           */
          redirectUrl: {
            type: String,
            attribute: "redirect-url"
          },

          /**
           * logout url
           */
          logoutUrl: {
            type: String,
            attribute: "logout-url"
          },

          /**
           * url to get the JWT
           */
          url: {
            type: String
          },

          /**
           * Request method
           */
          method: {
            type: String
          },

          /**
           * Optional body, useful when doing posts
           */
          body: {
            type: Object
          },

          /**
           * Key that contains the token in local storage
           */
          key: {
            type: String
          },

          /**
           * JSON Web token to securely pass around
           */
          jwt: {
            type: String
          }
        };
      }
    }]);
    return JwtLogin;
  }(_litElement.LitElement);

  _exports.JwtLogin = JwtLogin;
  window.customElements.define(JwtLogin.tag, JwtLogin);
});