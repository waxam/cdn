define(["exports", "../../lit-element/lit-element.js", "../../@polymer/iron-ajax/iron-ajax.js"], function (_exports, _litElement, _ironAjax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.JwtLogin = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_5307c5a02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <iron-ajax\n        ?auto=\"", "\"\n        id=\"loginrequest\"\n        method=\"", "\"\n        url=\"", "\"\n        handle-as=\"json\"\n        content-type=\"application/json\"\n        @response=\"", "\"\n      >\n      </iron-ajax>\n    "]);

    _templateObject2_5307c5a02d8511ea80ccf124101da415 = function _templateObject2_5307c5a02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  function _templateObject_5307c5a02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: none;\n        }\n      </style>\n      "]);

    _templateObject_5307c5a02d8511ea80ccf124101da415 = function _templateObject_5307c5a02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  /**
   * `jwt-login`
   * @customElement jwt-login
   * `a simple element to check for and fetch JWTs`
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   */
  var JwtLogin =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(JwtLogin, _LitElement);
    babelHelpers.createClass(JwtLogin, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_5307c5a02d8511ea80ccf124101da415())];
      }
    }]);

    function JwtLogin() {
      var _this;

      babelHelpers.classCallCheck(this, JwtLogin);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(JwtLogin).call(this));
      _this.auto = false;
      _this.method = "GET";
      _this.body = {};
      _this.key = "jwt";
      _this.jwt = null;
      return _this;
    }
    /**
     * LitElement
     */


    babelHelpers.createClass(JwtLogin, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_5307c5a02d8511ea80ccf124101da415(), this.auto, this.method, this.url, this.loginResponse);
      }
    }, {
      key: "updated",

      /**
       * LitElement life cycle - properties changed callback
       */
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "jwt") {
            _this2._jwtChanged(_this2[propName], oldValue); // notify


            _this2.dispatchEvent(new CustomEvent("jwt-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "_jwtChanged",
      value: function _jwtChanged(newValue, oldValue) {
        if ((newValue == null || newValue == "" || newValue == "null") && babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // remove this key from local storage bin
          localStorage.removeItem(this.key); // jwt was invalid some how

          this.dispatchEvent(new CustomEvent("jwt-logged-in", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: false
          }));
        } else if (newValue) {
          // set the jwt into local storage so we can reference later
          localStorage.setItem(this.key, newValue);
          this.dispatchEvent(new CustomEvent("jwt-token", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: newValue
          }));
          this.dispatchEvent(new CustomEvent("jwt-logged-in", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: true
          }));
        }
      }
      /**
       * LitElement life cycle - ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        // set jwt from local storage bin
        this.jwt = localStorage.getItem(this.key);
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "toggleLogin",
      value: function toggleLogin() {
        // null is default, if we don't have anything go get one
        if (this.jwt == null) {
          this.shadowRoot.querySelector("#loginrequest").body = _objectSpread({}, this.body);
          this.shadowRoot.querySelector("#loginrequest").generateRequest();
        } else {
          // we were told to logout, reset body
          this.body = {}; // reset jwt which will do all the events / local storage work

          this.jwt = null;
        }
      }
      /**
       * Login bridge to get a JWT and hang onto it
       */

    }, {
      key: "loginResponse",
      value: function loginResponse(e) {
        this.jwt = e.detail.response;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "jwt-login";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * auto, useful for demos
           */
          auto: {
            type: Boolean
          },

          /**
           * url
           */
          url: {
            type: String
          },

          /**
           * Request method
           */
          method: {
            type: String
          },

          /**
           * Optional body, useful when doing posts
           */
          body: {
            type: Object
          },

          /**
           * Key that contains the token in local storage
           */
          key: {
            type: String
          },

          /**
           * JSON Web token to securely pass around
           */
          jwt: {
            type: String
          }
        };
      }
    }]);
    return JwtLogin;
  }(_litElement.LitElement);

  _exports.JwtLogin = JwtLogin;
  window.customElements.define(JwtLogin.tag, JwtLogin);
});