define(["exports", "../../lit-element/lit-element.js", "../intersection-element/lib/IntersectionObserverMixin.js"], function (_exports, _litElement, _IntersectionObserverMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TypeWriter = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_8c76cc10c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n          margin: 0px 0.1em;\n        }\n\n        @keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n        @-o-keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n        @-moz-keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n        @-webkit-keyframes flickerAnimation {\n          0% {\n            opacity: 1;\n          }\n\n          50% {\n            opacity: 0;\n          }\n\n          100% {\n            opacity: 1;\n          }\n        }\n\n        #cursor {\n          display: none;\n          opacity: 0;\n        }\n\n        :host([typing]) #cursor {\n          display: inline;\n          -webkit-animation: flickerAnimation 1s infinite;\n          -moz-animation: flickerAnimation 1s infinite;\n          -o-animation: flickerAnimation 1s infinite;\n          animation: flickerAnimation 1s infinite;\n        }\n      "]);

    _templateObject2_8c76cc10c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8c76cc10c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8c76cc10c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <span id=\"text\"></span><span id=\"cursor\">|</span>\n    "]);

    _templateObject_8c76cc10c96f11ea8be5e1d5fe7ec787 = function _templateObject_8c76cc10c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `type-writer`
   * `typewritter effect`
   * based off of https://github.com/PolymerEl/type-writer
   *
   * @demo demo/index.html
   * @element type-writer
   */
  var TypeWriter =
  /*#__PURE__*/
  function (_IntersectionObserver) {
    babelHelpers.inherits(TypeWriter, _IntersectionObserver);
    babelHelpers.createClass(TypeWriter, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_8c76cc10c96f11ea8be5e1d5fe7ec787());
      } // haxProperty definition

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_8c76cc10c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Type writer",
            description: "typewritter effect",
            icon: "icons:android",
            color: "green",
            groups: ["Writer"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "delay",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "cursorDuration",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "text",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "speed",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "typing",
              description: "",
              inputMethod: "boolean",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(TypeWriter), "properties", this), {
          delay: {
            type: Number
          },
          cursorDuration: {
            type: Number,
            attribute: "cursor-duration"
          },
          text: {
            type: String
          },
          speed: {
            type: Number
          },
          elementVisible: {
            type: Boolean
          },
          eraseSpeed: {
            type: Number,
            attribute: "erase-speed"
          },
          typing: {
            type: Boolean,
            reflect: true
          },
          _length: {
            type: Number
          },
          _oldText: {
            type: String
          }
        });
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "type-writer";
      }
      /**
       * HTMLElement
       */

    }]);

    function TypeWriter() {
      var _this;

      babelHelpers.classCallCheck(this, TypeWriter);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TypeWriter).call(this));
      _this.delay = 100;
      _this.cursorDuration = 0;
      _this.speed = 150;
      _this.eraseSpeed = 80;
      _this.typing = false;
      return _this;
    }

    babelHelpers.createClass(TypeWriter, [{
      key: "_observeText",
      value: function _observeText(text, delay, elementVisible) {
        var _this2 = this;

        if (text && delay !== undefined && elementVisible) {
          if (this.shadowRoot.querySelector("#text").textContent) {
            this._oldText = this.shadowRoot.querySelector("#text").textContent;

            if (this.typing && this._cancel) {
              clearTimeout(this._cancel);
              this._cancel = null;
            }

            return this.erase();
          }

          this._length = 0;
          setTimeout(function () {
            _this2.type();
          }, this.delay);
        }
      }
    }, {
      key: "type",
      value: function type() {
        var _this3 = this;

        this.typing = true;
        this.shadowRoot.querySelector("#text").textContent = this.text.substr(0, this._length++);

        if (this._length < this.text.length + 1) {
          this._cancel = setTimeout(function () {
            _this3.type();
          }, this.speed + (Math.random() - 0.5) * this.speed / 2);
          return;
        }

        setTimeout(function () {
          _this3.typing = false;

          _this3.dispatchEvent(new CustomEvent("type-writer-end", {
            detail: _this3.text,
            bubbles: true,
            composed: true
          }));
        }, this.cursorDuration);
      }
    }, {
      key: "erase",
      value: function erase() {
        var _this4 = this;

        this.typing = true;
        this.shadowRoot.querySelector("#text").textContent = this._oldText.substr(0, this._length--);

        if (this._length >= 0) {
          this._cancel = setTimeout(function () {
            _this4.erase();
          }, this.eraseSpeed || this.speed);
          return;
        }

        this.type();
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this5 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["text", "delay", "elementVisible"].includes(propName)) {
            _this5._observeText(_this5.text, _this5.delay, _this5.elementVisible);
          }
        });
      }
    }]);
    return TypeWriter;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_litElement.LitElement));

  _exports.TypeWriter = TypeWriter;
  customElements.define(TypeWriter.tag, TypeWriter);
});