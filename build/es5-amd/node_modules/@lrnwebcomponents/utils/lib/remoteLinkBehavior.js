define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.remoteLinkBehavior = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var remoteLinkBehavior = function remoteLinkBehavior(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.call(this);
      }

      babelHelpers.createClass(_class, [{
        key: "updated",
        value:
        /**
         * Updated is LitElement specific but could use this without LitElement
         */
        function updated(changedProperties) {
          var _this = this;

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          }

          changedProperties.forEach(function (oldValue, propName) {
            if (propName == "remoteLinkTarget" || propName == "remoteLinkURL") {
              _this._remoteLinkURLTarget(_this.remoteLinkTarget, _this.remoteLinkURL);
            }
          });
        }
        /**
         * Evaluates url for correct targeting.
         */

      }, {
        key: "_remoteLinkURLTarget",
        value: function _remoteLinkURLTarget(target, url) {
          if (target && url && this.remoteLinkURLisExternalLink(url)) {
            target.setAttribute("target", "_blank");
            target.setAttribute("rel", "noopener noreferrer");
          }
        }
        /**
         * Internal function to check if a url is external
         */

      }, {
        key: "remoteLinkURLisExternalLink",
        value: function remoteLinkURLisExternalLink(url) {
          if (url.indexOf("http") != 0) return false;
          var loc = location.href,
              path = location.pathname,
              root = loc.substring(0, loc.indexOf(path));
          return url.indexOf(root) != 0;
        }
      }], [{
        key: "properties",
        get: function get() {
          var prop = {};

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class), "prop", this)) {
            prop = babelHelpers.get(babelHelpers.getPrototypeOf(_class), "prop", this);
          }

          prop.remoteLinkTarget = {
            type: String
          };
          prop.remoteLinkURL = {
            type: String
          };
          return prop;
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.remoteLinkBehavior = remoteLinkBehavior;
});