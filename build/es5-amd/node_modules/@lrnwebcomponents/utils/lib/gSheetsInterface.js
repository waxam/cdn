define(["exports", "../utils.js"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.gSheetInterface = void 0;

  var gSheetInterface = /*#__PURE__*/function () {
    function gSheetInterface() {
      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var sheet = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
      var sheetGids = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      babelHelpers.classCallCheck(this, gSheetInterface);
      // sheet
      this.sheet = sheet; // machineName you want to use => gid from google

      this.sheetGids = sheetGids; // element target

      this.target = target;
    }
    /**
     * load data from sheet via API
     */


    babelHelpers.createClass(gSheetInterface, [{
      key: "loadSheetData",
      value: function () {
        var _loadSheetData = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(page) {
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return this.loadCSVData("https://docs.google.com/spreadsheets/d/e/".concat(this.sheet, "/pub?output=csv&gid=").concat(this.sheetGids[page]), page);

                case 2:
                  return _context.abrupt("return", _context.sent);

                case 3:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadSheetData(_x) {
          return _loadSheetData.apply(this, arguments);
        }

        return loadSheetData;
      }()
      /**
       * generate appstore query
       */

    }, {
      key: "loadCSVData",
      value: function () {
        var _loadCSVData = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(source, sheet) {
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  _context2.next = 2;
                  return fetch(source, {
                    method: this.method
                  }).then(function (response) {
                    if (response.ok) return response.text();
                  }).then(function (text) {
                    return (0, _utils.CSVtoArray)(text);
                  });

                case 2:
                  return _context2.abrupt("return", _context2.sent);

                case 3:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function loadCSVData(_x2, _x3) {
          return _loadCSVData.apply(this, arguments);
        }

        return loadCSVData;
      }()
    }]);
    return gSheetInterface;
  }();

  _exports.gSheetInterface = gSheetInterface;
});