define(["exports", "../../lit-element/lit-element.js", "../hax-body-behaviors/lib/HAXWiring.js", "../accent-card/accent-card.js", "../../@polymer/iron-icon/iron-icon.js", "../../@polymer/iron-icons/iron-icons.js"], function (_exports, _litElement, _HAXWiring, _accentCard, _ironIcon, _ironIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.NavCard = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_841b0160864111ea89c13be6dda9e306() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        ::slotted([slot=\"linklist\"]) {\n          display: none;\n        }\n        h1,\n        h2,\n        h3,\n        accent-card > [slot=\"heading\"] {\n          font-size: 14px;\n          font-weight: normal;\n          color: var(--simple-colors-default-theme-grey-7, #666);\n          margin: 0;\n        }\n        accent-card {\n          margin: var(--elmsln-studio--Margin, 20px);\n          flex: 1 0 calc(50% - 2 * var(--elmsln-studio--Margin, 20px));\n          --accent-card-footer-border-color: transparent;\n        }\n        .linklist {\n          list-style-type: none;\n          padding-inline-start: 0;\n        }\n        .linklist li {\n          position: relative;\n          padding: 5px 0;\n          margin-bottom: 1px;\n          opacity: 0.8;\n        }\n        .linklist li {\n          padding: 5px 0;\n          text-align: left;\n          min-height: 25px;\n          border-bottom: 1px solid\n            var(--simple-colors-default-theme-grey-4, #666);\n        }\n        button[slot=\"subheading\"] {\n          text-decoration: underline;\n        }\n        button[slot=\"subheading\"]:focus,\n        button[slot=\"subheading\"]:hover {\n          text-decoration: none;\n        }\n        ::slotted(button),\n        .linklist button {\n          border: none;\n          padding: 0;\n          text-align: left;\n          font-size: inherit;\n          font-weight: inherit;\n        }\n        .linklist iron-icon {\n          position: absolute;\n          width: 24px;\n          height: 24px;\n          right: 0px;\n          top: calc(50% - 12px);\n        }\n        .linklist-heading::after {\n          content: \" \";\n          position: absolute;\n          left: 0;\n          right: 0;\n          top: 0;\n          bottom: 0;\n        }\n        .linklist-heading:focus {\n          outline: none;\n        }\n        .linklist li:focus,\n        .linklist li:focus-within .linklist-heading::after {\n          outline: 1px solid blue;\n        }\n        .linklist li:hover .linklist-heading,\n        .linklist li:focus .linklist-heading,\n        .linklist li:focus-within .linklist-heading {\n          text-decoration: underline;\n        }\n        .linklist-heading,\n        .linklist-subheading {\n          display: block;\n          width: calc(100% - 24px);\n        }\n        .linklist-heading {\n          font-weight: bold;\n        }\n        .linklist-subheading {\n          font-size: 11px;\n        }\n      "]);

    _templateObject2_841b0160864111ea89c13be6dda9e306 = function _templateObject2_841b0160864111ea89c13be6dda9e306() {
      return data;
    };

    return data;
  }

  function _templateObject_841b0160864111ea89c13be6dda9e306() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <accent-card\n        accent-color=\"", "\"\n        ?dark=\"", "\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n      >\n        <div slot=\"heading\"><slot name=\"heading\"></slot></div>\n        <div slot=\"subheading\"><slot name=\"subheading\"></slot></div>\n        <div slot=\"content\">\n          <slot name=\"body\"></slot>\n          <slot name=\"linklist\"></slot>\n          <div id=\"linklist\"></div>\n        </div>\n        <div slot=\"footer\"><slot name=\"footer\"></slot></div>\n      </accent-card>\n    "]);

    _templateObject_841b0160864111ea89c13be6dda9e306 = function _templateObject_841b0160864111ea89c13be6dda9e306() {
      return data;
    };

    return data;
  }

  /**
   * `nav-card`
   * an accent card of link lists
   *
   * @customElement nav-card
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */
  var NavCard =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(NavCard, _LitElement);
    babelHelpers.createClass(NavCard, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_841b0160864111ea89c13be6dda9e306(), this.accentColor, this.dark, this.disabled, this.hidden);
      } // haxProperty definition

    }, {
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      value: function tag() {
        return "nav-card";
      } // life cycle

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_841b0160864111ea89c13be6dda9e306())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Nav card",
            description: "an accent card of link lists",
            icon: "icons:android",
            color: "green",
            groups: ["Card"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "nikkimk",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "hidden",
              description: "",
              inputMethod: "boolean",
              required: false,
              icon: "icons:android"
            }, {
              property: "disabled",
              description: "",
              inputMethod: "boolean",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(NavCard), "properties", this), {
          dark: {
            attribute: "dark",
            type: Boolean
          },
          accentColor: {
            attribute: "accent-color",
            type: String
          },
          hidden: {
            attribute: "hidden",
            type: Boolean
          },
          linkIcon: {
            attribute: "link-icon",
            type: String
          },
          disabled: {
            attribute: "disabled",
            type: Boolean
          }
        });
      }
    }]);

    function NavCard() {
      var _this;

      babelHelpers.classCallCheck(this, NavCard);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(NavCard).call(this));
      _this.accentColor = "grey";
      _this.dark = false;
      _this.disabled = false;
      _this.hidden = false;
      _this.tag = NavCard.tag;

      _this.observer.observe(babelHelpers.assertThisInitialized(_this), {
        attributes: false,
        childList: true,
        subtree: false
      });

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(NavCard, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(NavCard.prototype), "connectedCallback", this).call(this);
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(NavCard.haxProperties, NavCard.tag, this);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(NavCard.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(NavCard.prototype), "firstUpdated", this).call(this, changedProperties);
        this.updateList();
      }
      /**
       * mutation observer for tabs
       * @readonly
       * @returns {object}
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "linkIcon" && _this2.shadowRoot) _this2.shadowRoot.querySelectorAll("#linklist li > iron-icon").forEach(function (icon) {
            return icon.icon = _this2.linkIcon;
          });
        });
      }
    }, {
      key: "updateList",
      value: function updateList() {
        var _this3 = this;

        if (this.shadowRoot && this.shadowRoot.querySelector("#linklist")) {
          var linklist = this.shadowRoot.querySelector("#linklist"),
              ul = this.querySelector('ul[slot="linklist"],ol[slot="linklist"]').cloneNode(true);
          ul.querySelectorAll("li").forEach(function (li, i) {
            return _this3._getLi(li, i);
          });
          linklist.innerHTML = "";

          if (ul) {
            ul.classList.add("linklist");
            linklist.appendChild(ul);
          }
        }
      }
      /**
       * formats each list item
       *
       * @param {object} li list item
       * @param {number} i index
       * @memberof NavCard
       */

    }, {
      key: "_getLi",
      value: function _getLi(li, i) {
        var heading = this._getHeading(li, i),
            subheading = this._getSubheading(li);

        heading.id = heading.id || "".concat(this.id || "nav-card", "-heading").concat(i);

        if (subheading) {
          subheading.id = "subheading".concat(i);
          subheading.id = subheading.id || "".concat(this.id || "nav-card", "-subheading").concat(i);
          heading.setAttribute("aria-describedby", subheading.id);
        }

        this._makeIcon(li, heading);
      }
      /**
       * formats each heading
       *
       * @param {object} li list item
       * @returns
       * @memberof NavCard
       */

    }, {
      key: "_getHeading",
      value: function _getHeading(li) {
        var heading = li.querySelector(".linklist-heading"),
            button = li.querySelector("button,a");

        if (!heading) {
          if (button) {
            //preferred: set heading to whatever the link or button is
            heading = button;
          } else {
            //last resort: just use dump all contents into heading
            heading = document.createElement("span");
            heading.innerHTML = li.innerHTML;
            li.innerHTML = "";
            li.appendChild(heading);
          }

          heading.classList.add(".linklist-heading");
        }

        return heading;
      }
      /**
       * formats each subheading
       *
       * @param {object} li list item
       * @returns
       * @memberof NavCard
       */

    }, {
      key: "_getSubheading",
      value: function _getSubheading(li) {
        var subheading = li.querySelector(".linklist-subheading");

        if (!subheading) {
          var contents = li.querySelectorAll(":not(.linklist-heading)");

          if (contents) {
            subheading = document.createElement("div");
            contents.forEach(function (item) {
              return subheading.append(item);
            });
            subheading.classList.add(".linklist-subheading");
          }
        }

        return subheading;
      }
      /**
       * adds icon to li
       *
       * @param {object} li list-item
       * @param {object} heading heading inside list item
       * @memberof NavCard
       */

    }, {
      key: "_makeIcon",
      value: function _makeIcon(li, heading) {
        if (li && heading) {
          var icon = document.createElement("iron-icon");
          icon.icon = this.linkIcon;
          icon.setAttribute("aria-hidden", true);
          li.insertBefore(icon, heading);
        }
      } // static get observedAttributes() {
      //   return [];
      // }

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(NavCard.prototype), "disconnectedCallback", this).call(this);
        if (this.observer && this.observer.disconnect) this.observer.disconnect();
      } // attributeChangedCallback(attr, oldValue, newValue) {}

    }, {
      key: "observer",
      get: function get() {
        var _this4 = this;

        var callback = function callback() {
          return _this4.updateList();
        };

        return new MutationObserver(callback);
      }
    }]);
    return NavCard;
  }(_litElement.LitElement);

  _exports.NavCard = NavCard;
  customElements.define("nav-card", NavCard);
});