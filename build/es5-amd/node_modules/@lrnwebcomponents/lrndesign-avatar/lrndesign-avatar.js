define(["exports", "require", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js"], function (_exports, _require, _litElement, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignAvatar = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_a8a7a2603ee611ea9b2edd59a4f93ed0() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-avatar\n        label=\"", "\"\n        src=\"", "\"\n        ?two-chars=\"", "\"\n        style=\"background-color:", " !important;\"\n        ?jdenticon=\"", "\"\n      ></paper-avatar>\n    "]);

    _templateObject2_a8a7a2603ee611ea9b2edd59a4f93ed0 = function _templateObject2_a8a7a2603ee611ea9b2edd59a4f93ed0() {
      return data;
    };

    return data;
  }

  function _templateObject_a8a7a2603ee611ea9b2edd59a4f93ed0() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        paper-avatar {\n          color: var(--simple-colors-default-theme-grey-1);\n          --paper-avatar-width: var(--lrndesign-avatar-width, 40px);\n          --paper-avatar-height: var(--lrndesign-avatar-height, 40px);\n          --paper-avatar-text-color: var(--simple-colors-default-theme-grey-1);\n        }\n      "]);

    _templateObject_a8a7a2603ee611ea9b2edd59a4f93ed0 = function _templateObject_a8a7a2603ee611ea9b2edd59a4f93ed0() {
      return data;
    };

    return data;
  }

  /**
   * `lrndesign-avatar`
   * `Visualize a user account eitehr with an image, a label, or as abstract art.`
   * @demo demo/index.html
   * @customElement lrndesign-avatar
   */
  var LrndesignAvatar =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(LrndesignAvatar, _SimpleColors);
    babelHelpers.createClass(LrndesignAvatar, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar), "styles", this)), [(0, _litElement.css)(_templateObject_a8a7a2603ee611ea9b2edd59a4f93ed0())]);
      }
    }]);

    function LrndesignAvatar() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignAvatar);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrndesignAvatar).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../paper-avatar/paper-avatar.js"], res, rej);
      });
      _this.label = "avatar";
      _this.twoChars = false;
      _this.color = "blue";
      _this.jdenticon = false;
      return _this;
    }

    babelHelpers.createClass(LrndesignAvatar, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_a8a7a2603ee611ea9b2edd59a4f93ed0(), this.label, this.src, this.twoChars, this.hexColor, this.jdenticon);
      }
    }, {
      key: "_getAccentColor",
      value: function _getAccentColor(color) {
        // legacy API bridge
        color = color.replace("-text", "");

        if ((!this.accentColor || this.accentColor === "grey") && this.colors[color]) {
          this.accentColor = color;
        }
      }
    }, {
      key: "_getHexColor",
      value: function _getHexColor(color) {
        var name = color.replace("-text", "");
        var tmp = new _simpleColors.SimpleColors();

        if (tmp.colors[name]) {
          return tmp.colors[name][6];
        }

        return "#000000";
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "color") {
            _this2._getAccentColor(_this2[propName]);
          }

          if (propName == "accentColor") {
            _this2.hexColor = _this2._getHexColor(_this2[propName]);
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "lrndesign-avatar";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAvatar), "properties", this), {
          hexColor: {
            type: String
          },

          /**
           * text to use for avatar
           */
          label: {
            type: String
          },

          /**
           * link to an image, optional
           */
          src: {
            type: String
          },

          /**
           * Mode for presenting 1st two letters
           */
          twoChars: {
            type: Boolean,
            attribute: "two-chars"
          },

          /**
           * Color class work to apply
           */
          color: {
            type: String,
            reflect: true
          },

          /**
           * Form abstract art from hash of label
           */
          jdenticon: {
            type: Boolean
          }
        });
      }
    }]);
    return LrndesignAvatar;
  }(_simpleColors.SimpleColors);

  _exports.LrndesignAvatar = LrndesignAvatar;
  window.customElements.define(LrndesignAvatar.tag, LrndesignAvatar);
});