define(["exports", "../../../lit-element/lit-element.js", "../../../@polymer/iron-ajax/iron-ajax.js", "../../../@polymer/iron-icon/iron-icon.js", "../../../@polymer/iron-icons/iron-icons.js", "../../nav-card/nav-card.js", "../../lrndesign-avatar/lrndesign-avatar.js", "../../accent-card/accent-card.js"], function (_exports, _litElement, _ironAjax, _ironIcon, _ironIcons, _navCard, _lrndesignAvatar, _accentCard) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnStudioUtilities = void 0;

  /**
   * Copyright 2020 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  var ElmslnStudioUtilities = function ElmslnStudioUtilities(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass) {
        babelHelpers.inherits(_class, _SuperClass);

        function _class() {
          babelHelpers.classCallCheck(this, _class);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class).apply(this, arguments));
        }

        babelHelpers.createClass(_class, [{
          key: "sortDates",

          /**
           * sorts array by most recent (or by oldest)
           * @param {array} arr array
           * @param {boolean} sort by most recent? (default is true)
           * @returns {arr} sorted array
           */
          value: function sortDates(arr) {
            var recent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
            return arr.sort(function (a, b) {
              return recent ? b.date - a.date : a.date - b.date;
            });
          }
          /**
           * gets date x days from start date
           * @param {date} start starting date
           * @param {number} days number of weeks
           * @returns {date}
           */

        }, {
          key: "addDays",
          value: function addDays() {
            var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
            var amt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return new Date(Date.parse(start) + amt * 86400000);
          }
          /**
           * gets date x weeks from start date
           * @param {date} start starting date
           * @param {number} weeks number of weeks
           * @returns {date}
           */

        }, {
          key: "addWeeks",
          value: function addWeeks() {
            var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
            var amt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return new Date(Date.parse(start) + amt * 604800000);
          }
          /**
           * convert object to array
           * @param {object} obj object to convert
           * @param {props} additional properties to set
           * @returns {array}
           */

        }, {
          key: "toArray",
          value: function toArray(obj, props) {
            return Object.keys(obj || {}).map(function (i) {
              var item = obj[i];
              item.id = i;
              Object.keys(props || {}).forEach(function (j) {
                return item[j] = props[j];
              });
              return item;
            });
          }
          /**
           * converts and sorts arrat
           * @param {object} obj object to convert
           * @returns {array}
           */

        }, {
          key: "_recentArray",
          value: function _recentArray(arr) {
            return this.sortDates(this.toArray(arr));
          } //submission  assignmnent assignmentId

        }, {
          key: "getAncestor",
          value: function getAncestor(child, path) {
            if (child && path && path.length > 0) {
              var foreignkey = path[0][1],
                  parent = path[0][0],
                  key = child["".concat(path[0][1])];
              return this.getAncestor(parent[key], path.slice(1));
            } else {
              return child;
            }
          }
          /**
           * gets fullname from user data
           * @param {object} user data containing firstName and lastName
           * @param {boolean} sortable last name first
           * @returns {string} `Firstname Lastname` (or if sortable, `Lastname, Firstname`)
           */

        }, {
          key: "fullName",
          value: function fullName(user) {
            var sortable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return user && !sortable ? "".concat(user.firstName, " ").concat(user.lastName) : user ? "".concat(user.lastName, ", ").concat(user.firstName) : "";
          }
          /**
           * gets formatted date
           * @param {object} date
           * @param {format} long (Weekday, Month, Day, Year), short (Month, Day), or default (Month, Day, Year)
           * @returns {string} date as string
           */

        }, {
          key: "dateFormat",
          value: function dateFormat(d, format) {
            if (typeof d === "string") d = new Date(d);
            return !d ? "" : format === "long" ? d.toLocaleDateString(undefined, {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric"
            }) : format === "short" ? d.toLocaleDateString(undefined, {
              month: "long",
              day: "numeric"
            }) : d.toLocaleDateString(undefined, {
              year: "numeric",
              month: "long",
              day: "numeric"
            });
          }
          /**
           * gets a custom accent color based on a string
           * @param {string} string used to calculate accent color
           * @returns {string} accent color
           */

        }, {
          key: "accentColor",
          value: function accentColor(str) {
            var card = new _accentCard.AccentCard(),
                colors = !card || !card.colors ? [""] : Object.keys(card.colors),
                i = str && str.charCodeAt(0) ? str.charCodeAt(0) : Math.floor(Math.random() * 16);
            return colors[i % 16 + 1] ? colors[i % 16 + 1] : colors[Math.floor(Math.random() * colors.length)];
          }
          /**
           * gets link of a given activity
           * @param {object} activity object
           * @param {string} type of activtiy
           * @returns {string} link
           */

        }, {
          key: "activityLink",
          value: function activityLink(activity, type) {
            if (type === "submission") {
              return this.submissionLink(activity);
            } else if (activity.activity === "feedback") {
              return this.feedbackLink(activity);
            } else {
              return this.replyLink(activity);
            }
          }
          /**
           * gets title of a given activity
           * @param {object} activity object
           * @param {string} type of activtiy
           * @returns {string} title
           */

        }, {
          key: "activityTitle",
          value: function activityTitle(activity, type) {
            if (type === "submission") {
              return this.submissionTitle(activity);
            } else if (activity.activity === "feedback") {
              return this.feedbackTitle(activity);
            } else {
              return this.replyTitle(activity);
            }
          }
          /**
           * gets link to given submission
           * @param {object} submission object
           * @returns {string} link
           */

        }, {
          key: "submissionLink",
          value: function submissionLink(submission) {
            return "/portfolios/".concat(submission.userId, "-").concat(submission.projectId, "?submission=").concat(submission.id);
          }
          /**
           * gets title of a given submission
           * @param {object} submission object
           * @returns {string} title
           */

        }, {
          key: "submissionTitle",
          value: function submissionTitle(submission) {
            return "".concat(submission.firstName, " submitted ").concat(submission.assignment);
          }
          /**
           * gets link to given feedback
           * @param {object} feedback object
           * @returns {string} link
           */

        }, {
          key: "feedbackLink",
          value: function feedbackLink(feedback) {
            return "/portfolios/".concat(feedback.creator, "-").concat(feedback.projectId, "?submission=").concat(feedback.submissionId, "&comment=").concat(feedback.id);
          }
          /**
           * gets title of given feedback
           * @param {object} feedback object
           * @returns {string} title
           */

        }, {
          key: "feedbackTitle",
          value: function feedbackTitle(feedback) {
            return "".concat(feedback.firstName, " left feedback on ").concat(feedback.creatorFirstName, "'s\n        ").concat(feedback.assignment);
          }
          /**
           * gets link to given reply
           * @param {object} reply object
           * @returns {string} link
           */

        }, {
          key: "replyLink",
          value: function replyLink(reply) {
            return "/portfolios/".concat(reply.creator, "-").concat(reply.projectId, "?submission=").concat(reply.submissionId, "&comment=").concat(reply.id);
          }
          /**
           * gets title of a given reply
           * @param {object} reply object
           * @returns {string} title
           */

        }, {
          key: "replyTitle",
          value: function replyTitle(reply) {
            return "".concat(reply.firstName, " replied to ").concat(reply.feedbackFirstName, "'s feedback");
          }
        }, {
          key: "_getValign",
          value: function _getValign(gravity) {
            return gravity && gravity.indexOf("top") > -1 ? "top" : gravity && gravity.indexOf("bottom") > -1 ? "bottom" : "center";
          }
        }, {
          key: "_getAlign",
          value: function _getAlign(gravity) {
            return gravity && gravity.indexOf("left") > -1 ? "left" : gravity && gravity.indexOf("right") > -1 ? "right" : "center";
          }
          /**
           * handles buttons that work like links
           *
           * @param {*} e event
           * @param {string} path
           */

        }, {
          key: "_handleLinkButton",
          value: function _handleLinkButton(e, path) {
            location.href = path;
            /**
             * Fires when button is clicked
             *
             * @event link-button-click
             */

            this.dispatchEvent(new CustomEvent("link-button-click", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: path
            }));
          }
        }]);
        return _class;
      }(SuperClass)
    );
  };

  _exports.ElmslnStudioUtilities = ElmslnStudioUtilities;
});