define(["exports", "../../../lit-element/lit-element.js", "../../../@polymer/iron-ajax/iron-ajax.js", "../../../@polymer/iron-icon/iron-icon.js", "../../../@polymer/iron-icons/iron-icons.js", "../../nav-card/nav-card.js", "../../lrndesign-avatar/lrndesign-avatar.js", "../../accent-card/accent-card.js"], function (_exports, _litElement, _ironAjax, _ironIcon, _ironIcons, _navCard, _lrndesignAvatar, _accentCard) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnStudioUtilities = void 0;

  function _templateObject_c58f9310dc1b11eaa3fed925a584e92f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        ", "\n        ", "\n      "]);

    _templateObject_c58f9310dc1b11eaa3fed925a584e92f = function _templateObject_c58f9310dc1b11eaa3fed925a584e92f() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  var ElmslnStudioUtilities = function ElmslnStudioUtilities(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass) {
        babelHelpers.inherits(_class, _SuperClass);
        babelHelpers.createClass(_class, null, [{
          key: "properties",
          // properties available to the custom element for data binding
          get: function get() {
            return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this), {
              demoMode: {
                type: Boolean,
                attribute: "demo-mode",
                reflect: true
              }
            });
          }
        }]);

        function _class() {
          var _this;

          babelHelpers.classCallCheck(this, _class);
          _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class).call(this));
          _this.demoMode = false;
          return _this;
        }
        /**
         * sorts array by most recent (or by oldest)
         * @param {array} arr array
         * @param {boolean} sort by most recent? (default is true)
         * @returns {arr} sorted array
         */


        babelHelpers.createClass(_class, [{
          key: "sortDates",
          value: function sortDates(arr) {
            var oldest = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return arr.sort(function (a, b) {
              var aa = typeof a.date === "string" ? Date.parse(a.date) : a.date,
                  bb = typeof b.date === "string" ? Date.parse(b.date) : b.date;
              return !oldest ? bb - aa : aa - bb;
            });
          }
          /**
           * gets date x days from start date
           * @param {date} start starting date
           * @param {number} days number of weeks
           * @returns {date}
           */

        }, {
          key: "addDays",
          value: function addDays() {
            var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
            var amt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return new Date(Date.parse(start) + amt * 86400000);
          }
          /**
           * gets date x weeks from start date
           * @param {date} start starting date
           * @param {number} weeks number of weeks
           * @returns {date}
           */

        }, {
          key: "addWeeks",
          value: function addWeeks() {
            var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();
            var amt = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
            return new Date(Date.parse(start) + amt * 604800000);
          }
          /**
           * convert object to array
           * @param {object} obj object to convert
           * @param {props} additional properties to set
           * @returns {array}
           */

        }, {
          key: "toArray",
          value: function toArray(obj, props) {
            return Object.keys(obj || {}).map(function (i) {
              var item = obj[i];
              item.id = i;
              Object.keys(props || {}).forEach(function (j) {
                return item[j] = props[j];
              });
              return item;
            });
          }
        }, {
          key: "_late",
          value: function _late(date) {
            return new Date(date) < new Date();
          }
          /**
           * converts and sorts arrat
           * @param {object} obj object to convert
           * @returns {array}
           */

        }, {
          key: "_recentArray",
          value: function _recentArray(arr) {
            return this.sortDates(this.toArray(arr));
          } //submission  assignmnent assignmentId

        }, {
          key: "getAncestor",
          value: function getAncestor(child, path) {
            if (child && path && path.length > 0) {
              var foreignkey = path[0][1],
                  parent = path[0][0],
                  key = child["".concat(path[0][1])];
              return this.getAncestor(parent[key], path.slice(1));
            } else {
              return child;
            }
          }
          /**
           * gets fullname from user data
           * @param {object} user data containing firstName and lastName
           * @param {boolean} sortable last name first
           * @returns {string} `Firstname Lastname` (or if sortable, `Lastname, Firstname`)
           */

        }, {
          key: "fullName",
          value: function fullName(user) {
            var sortable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return user && !sortable ? "".concat(user.firstName, " ").concat(user.lastName) : user ? "".concat(user.lastName, ", ").concat(user.firstName) : "";
          }
          /**
           * gets formatted date
           * @param {object} date
           * @param {format} long (Weekday, Month, Day, Year), short (Month, Day), or default (Month, Day, Year)
           * @returns {string} date as string
           */

        }, {
          key: "dateFormat",
          value: function dateFormat(d, format) {
            if (typeof d === "string") d = new Date(d);
            return !d ? "" : format === "long" ? d.toLocaleDateString(undefined, {
              weekday: "long",
              year: "numeric",
              month: "long",
              day: "numeric"
            }) : format === "short" ? d.toLocaleDateString(undefined, {
              month: "long",
              day: "numeric"
            }) : d.toLocaleDateString(undefined, {
              year: "numeric",
              month: "long",
              day: "numeric"
            });
          }
          /**
           * gets a custom accent color based on a string
           * @param {string} string used to calculate accent color
           * @returns {string} accent color
           */

        }, {
          key: "accentColor",
          value: function accentColor(str) {
            var card = new _accentCard.AccentCard(),
                colors = !card || !card.colors ? [""] : Object.keys(card.colors),
                i = str && str.charCodeAt(0) ? str.charCodeAt(0) : Math.floor(Math.random() * 16);
            return colors[i % 16 + 1] ? colors[i % 16 + 1] : colors[Math.floor(Math.random() * colors.length)];
          }
        }, {
          key: "getActivityLink",
          value: function getActivityLink(activity) {
            var nocomment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
            return activity.activity === "submission" ? "/portfolios/".concat(activity.portfolioId || activity.id).concat(activity.portfolioId ? "?submission=".concat(activity.id) : "").concat(nocomment ? "" : activity.portfolioId ? "&comment=true" : "?comment=true") : activity.activity === "discussion" ? "/portfolios/".concat(activity.portfolioId || activity.submissionId).concat(activity.portfolioId ? "?submission=".concat(activity.submissionId, "&") : "?", "comment=").concat(activity.id) : "/portfolios/".concat(activity.portfolioId || activity.submissionId).concat(activity.portfolioId ? "?submission=".concat(activity.submissionId, "&") : "?", "comment=").concat(activity.feedbackId);
          }
        }, {
          key: "getActivityTitle",
          value: function getActivityTitle(activity) {
            return (0, _litElement.html)(_templateObject_c58f9310dc1b11eaa3fed925a584e92f(), [activity.firstName, activity.lastName].join(" "), activity.activity === "submission" ? " submitted ".concat(activity.assignment) : activity.activity === "discussion" ? " left feedback for ".concat([activity.creatorFirstName, activity.creatorLastName].join(" ")) : " replied to ".concat([activity.reviewerFirstName, activity.reviewerLastName].join(" ")));
          }
          /**
           * gets link of a given activity
           * @param {object} activity object
           * @param {string} type of activtiy
           * @returns {string} link
           */

        }, {
          key: "activityLink",
          value: function activityLink(activity, type) {
            if (type === "submission") {
              return this.submissionLink(activity);
            } else if (activity.activity === "feedback") {
              return this.feedbackLink(activity);
            } else {
              return this.replyLink(activity);
            }
          }
          /**
           * gets title of a given activity
           * @param {object} activity object
           * @param {string} type of activtiy
           * @returns {string} title
           */

        }, {
          key: "activityTitle",
          value: function activityTitle(activity, type) {
            if (type === "submission") {
              return this.submissionTitle(activity);
            } else if (activity.activity === "feedback") {
              return this.feedbackTitle(activity);
            } else {
              return this.replyTitle(activity);
            }
          }
          /**
           * gets link to given submission
           * @param {object} submission object
           * @returns {string} link
           */

        }, {
          key: "submissionLink",
          value: function submissionLink(submission) {
            return "/portfolios/".concat(submission.userId, "-").concat(submission.projectId, "?submission=").concat(submission.id);
          }
          /**
           * gets title of a given submission
           * @param {object} submission object
           * @returns {string} title
           */

        }, {
          key: "submissionTitle",
          value: function submissionTitle(submission) {
            return "".concat(submission.firstName, " submitted ").concat(submission.assignment);
          }
          /**
           * gets link to given feedback
           * @param {object} feedback object
           * @returns {string} link
           */

        }, {
          key: "feedbackLink",
          value: function feedbackLink(feedback) {
            return "/portfolios/".concat(feedback.creator, "-").concat(feedback.projectId, "?submission=").concat(feedback.submissionId, "&comment=").concat(feedback.id);
          }
          /**
           * gets title of given feedback
           * @param {object} feedback object
           * @returns {string} title
           */

        }, {
          key: "feedbackTitle",
          value: function feedbackTitle(feedback) {
            return "".concat(feedback.firstName, " left feedback on ").concat(feedback.creatorFirstName, "'s\n        ").concat(feedback.assignment);
          }
          /**
           * gets link to given reply
           * @param {object} reply object
           * @returns {string} link
           */

        }, {
          key: "replyLink",
          value: function replyLink(reply) {
            return "/portfolios/".concat(reply.creator, "-").concat(reply.projectId, "?submission=").concat(reply.submissionId, "&comment=").concat(reply.id);
          }
          /**
           * gets title of a given reply
           * @param {object} reply object
           * @returns {string} title
           */

        }, {
          key: "replyTitle",
          value: function replyTitle(reply) {
            return "".concat(reply.firstName, " replied to ").concat(reply.feedbackFirstName, "'s feedback");
          }
        }, {
          key: "_getValign",
          value: function _getValign(gravity) {
            return gravity && gravity.indexOf("top") > -1 ? "top" : gravity && gravity.indexOf("bottom") > -1 ? "bottom" : "center";
          }
        }, {
          key: "_getAlign",
          value: function _getAlign(gravity) {
            return gravity && gravity.indexOf("left") > -1 ? "left" : gravity && gravity.indexOf("right") > -1 ? "right" : "center";
          }
          /**
           * handles buttons that work like links
           *
           * @param {*} e event
           * @param {string} path
           */

        }, {
          key: "_handleLinkButton",
          value: function _handleLinkButton(e, path) {
            location.href = path;
            /**
             * Fires when button is clicked
             *
             * @event link-button-click
             */

            this.dispatchEvent(new CustomEvent("link-button-click", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: path
            }));
          }
        }]);
        return _class;
      }(SuperClass)
    );
  };

  _exports.ElmslnStudioUtilities = ElmslnStudioUtilities;
});