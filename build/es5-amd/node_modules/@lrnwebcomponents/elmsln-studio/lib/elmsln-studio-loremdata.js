define(["exports", "../../../lit-element/lit-element.js", "./elmsln-studio-utilities.js", "../../lorem-data/lorem-data.js"], function (_exports, _litElement, _elmslnStudioUtilities, _loremData) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnStudioLoremdata = void 0;

  function _templateObject2_a3897e10e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject2_a3897e10e8ab11eabe6cb3de058a4220 = function _templateObject2_a3897e10e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject_a3897e10e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <lorem-data id=\"lorem\" .schemas=\"", "\"></lorem-data>\n    "]);

    _templateObject_a3897e10e8ab11eabe6cb3de058a4220 = function _templateObject_a3897e10e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  /**
   * `elmsln-studio-loremdata`
   * Generates fake data for ELMS:LN Studio
   *
   * @customElement elmsln-studio-loremdata
   * @demo demo/loremdata.html
   * @lit-html
   * @lit-element
   */
  var ElmslnStudioLoremdata =
  /*#__PURE__*/
  function (_ElmslnStudioUtilitie) {
    babelHelpers.inherits(ElmslnStudioLoremdata, _ElmslnStudioUtilitie);
    babelHelpers.createClass(ElmslnStudioLoremdata, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "elmsln-studio-loremdata";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          endDate: {
            type: Object
          },
          lessonData: {
            type: Array
          },
          lorem: {
            type: Object
          },
          startDate: {
            type: Object
          },
          lessons: {
            type: Object
          },
          projects: {
            type: Object
          },
          assignments: {
            type: Object
          },
          portfolios: {
            type: Object
          },
          submissions: {
            type: Object
          },
          discussions: {
            type: Object
          },
          profile: {
            type: Object
          },
          users: {
            type: Object
          },
          activity: {
            type: Array
          }
        };
      }
    }]);

    function ElmslnStudioLoremdata() {
      var _this;

      babelHelpers.classCallCheck(this, ElmslnStudioLoremdata);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ElmslnStudioLoremdata).call(this));
      _this.users = {
        ixp23: {
          id: "ixp23",
          lastName: "Instructor",
          firstName: "Person",
          instructor: true,
          image: "//placekitten.com/300/400"
        },
        hxb5122: {
          id: "hxb5122",
          lastName: "Brown",
          firstName: "Havana"
        },
        tmn823: {
          id: "tmn823",
          lastName: "Nebelung",
          firstName: "Tabby"
        },
        kmk5124: {
          id: "kmk5124",
          lastName: "Korat",
          firstName: "Kitty",
          image: "//placekitten.com/g/400/300"
        },
        tjm5488: {
          id: "tjm5488",
          lastName: "Manx",
          firstName: "Tortie",
          image: "//placekitten.com/400/300"
        },
        fms9811: {
          id: "fms9811",
          lastName: "Sphinx",
          firstName: "Felix"
        },
        tjc5167: {
          id: "tjc5167",
          lastName: "Cat",
          firstName: "Tom",
          image: "//placekitten.com/g/400/400"
        },
        cac488: {
          id: "cac488",
          lastName: "Coe",
          firstName: "Callie"
        },
        srf325: {
          id: "srf325",
          lastName: "Fold",
          firstName: "Scott",
          image: "//placekitten.com/400/400"
        }
      };
      _this.lessonData = [{
        id: "lesson-1",
        lesson: "Lesson 1",
        assignments: [{
          id: "assignment-1",
          assignment: "Lesson 1 Reading"
        }, {
          id: "project-1",
          project: "Hypertext Narrative Project",
          assignments: [{
            id: "assignment-2",
            assignment: "Discover: Word-Pairs"
          }, {
            id: "assignment-3",
            assignment: "Define: Synopsis"
          }, {
            id: "assignment-4",
            assignment: "Develop: Story and Plot Elements"
          }, {
            id: "assignment-5",
            assignment: "Develop: Characters"
          }, {
            id: "assignment-6",
            assignment: "Deliver: Hypertext Narrative Draft"
          }, {
            id: "assignment-7",
            assignment: "Deliver: Feedback"
          }, {
            id: "assignment-8",
            assignment: "Deliver: Iterate"
          }, {
            id: "assignment-9",
            assignment: "Deliver: Iterate critique"
          }, {
            id: "assignment-10",
            assignment: "Deliver: Iterate critique"
          }, {
            id: "assignment-11",
            assignment: "Deliver: Hypertext Narrative"
          }]
        }, {
          id: "assignment-12",
          assignment: "Lesson 1 Wrap-Up"
        }]
      }, {
        id: "lesson-2",
        lesson: "Lesson 2",
        assignments: [{
          id: "assignment-13",
          assignment: "Lesson 2 Reading"
        }, {
          id: "project-2",
          project: "Ritual Project",
          assignments: [{
            id: "assignment-14",
            assignment: "Discover: Interview"
          }, {
            id: "assignment-15",
            assignment: "Discover: Journey Map"
          }, {
            id: "assignment-16",
            assignment: "Define: Themes & Insights"
          }, {
            id: "assignment-17",
            assignment: "Define: HMW"
          }, {
            id: "assignment-18",
            assignment: "Develop: Brainstorm"
          }, {
            id: "assignment-19",
            assignment: "Develop: Storyboard"
          }, {
            id: "assignment-20",
            assignment: "Develop: Prototype"
          }, {
            id: "assignment-21",
            assignment: "Develop: Test and Iterate"
          }, {
            id: "assignment-22",
            assignment: "Deliver: Final Prototype"
          }]
        }, {
          id: "assignment-23",
          assignment: "Lesson 2 Wrap-Up"
        }]
      }, {
        id: "lesson-3",
        lesson: "Lesson 3",
        assignments: [{
          id: "assignment-24",
          assignment: "Lesson 2 Reading"
        }, {
          id: "project-3",
          project: "Open Kit Project",
          assignments: [{
            id: "assignment-25",
            assignment: "Discover: Toy Research"
          }, {
            id: "assignment-26",
            assignment: "Discover: Modular Research"
          }, {
            id: "assignment-27",
            assignment: "Discover: Resources"
          }, {
            id: "assignment-28",
            assignment: "Define: Product Pitch"
          }, {
            id: "assignment-29",
            assignment: "Develop: Prototyping"
          }, {
            id: "assignment-30",
            assignment: "Develop: Instructions"
          }, {
            id: "assignment-31",
            assignment: "Develop: Test"
          }, {
            id: "assignment-32",
            assignment: "Develop: Iterate"
          }, {
            id: "assignment-33",
            assignment: "Deliver: Open Toy"
          }]
        }, {
          id: "assignment-34",
          assignment: "Lesson 2 Wrap-Up"
        }]
      }];
      _this.activity = [];
      _this.profile = {};
      _this.projects = {};
      _this.lessons = {};
      _this.assignments = {};
      _this.portfolios = {};
      _this.submissions = {};
      _this.discussions = {};
      return _this;
    }

    babelHelpers.createClass(ElmslnStudioLoremdata, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_a3897e10e8ab11eabe6cb3de058a4220(), this.schemas || []);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioLoremdata.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudioLoremdata.prototype), "firstUpdated", this).call(this, changedProperties);
        var lorem = this.shadowRoot.getElementById("lorem"),
            startDate = lorem.addDays(undefined, -4 - 3 * this.lessonData.length),
            lessonDate = startDate;
        this.lessonData.forEach(function (l, i) {
          var assignDate = lessonDate,
              assignments = l.assignments.map(function (a, ai) {
            if (a.project) {
              var project = _this2._project(a, l.id, ai, assignDate, lorem);

              _this2.projects[a.id] = project;
              assignDate = lorem.addDays(assignDate, a.assignments.length);
              return project;
            } else {
              var assignment = _this2._assignment(a, l.id, undefined, ai, assignDate, lorem);

              assignDate = lorem.addDays(assignDate, 1);
              return assignment;
            }
          });
          _this2.lessons[l.id] = {
            id: l.id,
            order: i,
            lesson: l.lesson,
            body: lorem.randomParagraph(2, 6),
            assignments: assignments
          };
          lessonDate = lorem.addWeeks(lessonDate, 1);
        });
        Object.keys(this.assignments || {}).forEach(function (a, i) {
          var some = function some(arr) {
            return Math.round(arr.length * 0.333);
          },
              most = function most(arr) {
            return Math.round(arr.length * 0.667);
          },
              topic = lorem.randomOption(["animals", "arch", "nature", "people", "tech"]),
              type = lorem.randomOption(["links", "body", "sources"]),
              creators = i > most(Object.keys(_this2.assignments || {})) ? [] : i > some(Object.keys(_this2.assignments || {})) ? lorem.draw(_this2.students, some(_this2.students), most(_this2.students)) : _this2.students;

          creators.forEach(function (creator) {
            return _this2._submission(a, creator.id, topic, type, a.date, lorem);
          });
        });
        Object.keys(this.submissions).forEach(function (key) {
          var s = _this2.submissions[key];
          s.activity = "submission";

          _this2.activity.push(s);
        });
        Object.keys(this.discussions).forEach(function (key) {
          var d = _this2.discussions[key];
          d.activity = "discussion";

          _this2.activity.push(d);

          d.replies.forEach(function (reply) {
            var r = reply;
            r.activity = "reply";

            _this2.activity.push(r);
          });
        });
        this.activity = lorem.sortDates(this.activity);
        this.profile = JSON.parse(JSON.stringify(lorem.randomOption(this.students)));
        this.profile.submissions = lorem.sortDates(Object.keys(this.submissions).filter(function (key) {
          return _this2.submissions[key].userId === _this2.profile.id;
        }).map(function (key) {
          return _this2.submissions[key];
        }));
        this.profile.completed = this.profile.submissions.map(function (submission) {
          return submission.assignmentId;
        });
        this.profile.due = Object.keys(this.assignments).filter(function (key) {
          return !_this2.profile.completed.includes(key);
        }).map(function (key) {
          return _this2.assignments[key];
        });
        this.profile.features = this.profile.submissions.filter(function (submission) {
          return submission.feature;
        }).map(function (submission) {
          return submission.id;
        });
        this.profile.feedback = lorem.sortDates(this.profile.submissions.map(function (submission) {
          return submission.feedback;
        }).flat().map(function (key) {
          return _this2.discussions[key];
        }));
        this.profile.given = Object.keys(this.discussions).filter(function (key) {
          return _this2.discussions[key].userId === _this2.profile.id;
        });
        this.profile.replies = Object.keys(this.discussions).map(function (key) {
          return _this2.discussions[key].replies.filter(function (reply) {
            return reply.userId === _this2.profile.id;
          });
        }).flat().map(function (discussion) {
          return discussion.id;
        });
        this.profile.discussions = [].concat(babelHelpers.toConsumableArray(this.profile.given), babelHelpers.toConsumableArray(this.profile.replies));
      }
    }, {
      key: "_assets",
      value: function _assets(type, topic, lorem) {
        if (!lorem) {
          return [];
        } else if (type === "body") {
          return lorem.randomParagraph(2, 6);
        } else {
          var x = lorem.randomNumber(1, 7),
              assets = [];

          for (var i = 0; i < x; i++) {
            if (type === "links") {
              assets.push(lorem.randomLink());
            } else {
              assets.push(lorem.randomImageData(lorem.randomAspect(200, 600, 200, 600), topic));
            }
          }

          return assets;
        }
      }
    }, {
      key: "_project",
      value: function _project(project, lessonId, order, date, lorem) {
        var _this3 = this;

        if (!lorem) {
          return undefined;
        } else {
          return {
            id: project.id,
            order: order,
            lessonId: lessonId,
            project: project.project,
            body: lorem.randomParagraph(2, 6),
            assignments: project.assignments.map(function (a, i) {
              return _this3._assignment(a, lessonId, project.id, i, lorem.addDays(date, i), lorem);
            })
          };
        }
      }
    }, {
      key: "_assignment",
      value: function _assignment(assignment, lessonId, projectId, order, date, lorem) {
        if (!lorem) {
          return undefined;
        } else {
          var criteria = lorem.randomNumber(3, 7),
              rubric = {
            key: ["Distinguished (4)", "Proficient (3)", "Apprentice (2)", "Novice (1)"],
            values: []
          };

          for (var i = 0; i < criteria; i++) {
            rubric.values.push(["".concat(lorem.randomWord(), " ").concat(lorem.randomWord()), lorem.randomSentence(3, 6)]);
          }

          this.assignments[assignment.id] = {
            id: assignment.id,
            order: order,
            lessonId: lessonId,
            projectId: projectId,
            assignment: assignment.assignment,
            showDate: Math.random > 0.8 ? lorem.addWeeks(date, -2) : undefined,
            hideDate: Math.random > 0.8 ? lorem.addWeeks(date, 2) : undefined,
            date: date,
            rubric: rubric,
            body: lorem.randomParagraph(2, 6)
          };
          return this.assignments[assignment.id];
        }
      }
    }, {
      key: "_feedback",
      value: function _feedback(submissionId, reviewerId, date, lorem) {
        if (!lorem) {
          return undefined;
        } else {
          var id = "feedback-".concat(Object.keys(this.discussions).length + 1),
              repliers = lorem.draw([].concat(babelHelpers.toConsumableArray(this.students), babelHelpers.toConsumableArray(this.instructors)), 0, 2),
              user = this.users[reviewerId],
              submission = this.submissions[submissionId],
              creator = this.users[submission.userId],
              feedback = {
            id: id,
            userId: reviewerId,
            firstName: user && user.firstName ? user.firstName : "",
            lastName: user && user.lastName ? user.lastName : "",
            avatar: user && user.image ? user.image : undefined,
            submissionId: submissionId,
            portfolioId: submission.portfolioId,
            assignment: submission.assignment,
            creatorId: submission.userId,
            creatorFirstName: creator && creator.firstName ? creator.firstName : "",
            creatorLastName: creator && creator.lastName ? creator.lastName : "",
            creatorAvatar: creator && creator.image ? creator.image : undefined,
            date: date,
            body: lorem.randomParagraph(1, 4),
            read: Math.random() < 0.5,
            like: Math.random() < 0.5,
            replies: repliers.map(function (replier, i) {
              var _reply;

              var rid = "".concat(id, "-reply-").concat(i + 1),
                  reply;
              date = lorem.addMinutes(date, (i + 1) * lorem.randomNumber(1, 3000));
              reply = (_reply = {
                id: rid,
                feedbackId: id,
                userId: replier.id,
                firstName: replier && replier.firstName ? replier.firstName : "",
                lastName: replier && replier.lastName ? replier.lastName : "",
                avatar: replier && replier.image ? replier.image : undefined,
                reviewerId: reviewerId,
                reviewerFirstName: user && user.firstName ? user.firstName : "",
                reviewerLastName: user && user.lastName ? user.lastName : "",
                reviewerAvatar: user && user.image ? user.image : undefined,
                submissionId: submissionId
              }, babelHelpers.defineProperty(_reply, "submissionId", submissionId), babelHelpers.defineProperty(_reply, "portfolioId", submission.portfolioId), babelHelpers.defineProperty(_reply, "date", date), babelHelpers.defineProperty(_reply, "body", lorem.randomParagraph(2, 6)), babelHelpers.defineProperty(_reply, "read", Math.random() < 0.5), babelHelpers.defineProperty(_reply, "like", Math.random() < 0.5), _reply);
              return reply;
            })
          };
          this.discussions[id] = feedback;
          return id;
        }
      }
    }, {
      key: "_submission",
      value: function _submission(assignmentId, creatorId, topic, type, date, lorem) {
        var _this4 = this;

        if (lorem) {
          var id = "".concat(assignmentId, "-").concat(creatorId),
              image = lorem.randomImageData(lorem.randomAspect(400, 1200, 400, 1200), topic),
              reviewers = lorem.draw(this.students.filter(function (s) {
            return s.id !== creatorId;
          }), 0, 5),
              instructors = Math.round() > 0.75 ? lorem.draw(this.instructors, 1, 1) : [],
              submitDate = lorem.addHours(date, lorem.randomNumber(-40, 48)),
              a = this.assignments && this.assignments[assignmentId] ? this.assignments[assignmentId] : undefined,
              projectId = a && a.projectId ? a.projectId : undefined,
              lessonId = a && a.lessonId ? a.lessonId : undefined,
              p = this.projects && this.projects[projectId] ? this.projects[projectId] : undefined,
              l = this.lessons && this.lessons[lessonId] ? this.lessons[lessonId] : undefined,
              creator = this.users[creatorId],
              submission = {
            id: id,
            assignment: a && a.assignment ? a.assignment : "",
            project: p && p.project ? p.project : "",
            lesson: l && l.lesson ? l.lesson : "",
            portfolio: projectId ? "".concat(projectId, "-").concat(creatorId) : id,
            portfolioId: projectId ? "".concat(projectId, "-").concat(creatorId) : id,
            assignmentId: assignmentId,
            projectId: projectId,
            lessonId: lessonId,
            userId: creatorId,
            firstName: creator && creator.firstName ? creator.firstName : "",
            lastName: creator && creator.lastName ? creator.lastName : "",
            avatar: creator && creator.image ? creator.image : "",
            date: submitDate,
            image: image.src,
            thumbnail: image.src,
            full: image.src,
            imageAlt: image.alt,
            imageLongdesc: image.longdesc
          };
          if (Math.random() < 0.2) submission.feature = lorem.randomParagraph(2, 6);
          this.portfolios[submission.portfolioId] = this.portfolios[submission.portfolioId] || {
            id: submission.portfolioId,
            projectId: projectId,
            project: p && p.project ? p.project : "",
            userId: creatorId,
            firstName: creator && creator.firstName ? creator.firstName : "",
            lastName: creator && creator.lastName ? creator.lastName : "",
            avatar: creator && creator.image ? creator.image : "",
            submissions: []
          };
          submission[type] = this._assets(type, topic, lorem);
          this.activity.push({
            id: id,
            activity: "submission",
            date: submission.date
          });
          this.submissions[id] = submission;
          this.submissions[id].feedback = lorem.shuffle([].concat(babelHelpers.toConsumableArray(reviewers), babelHelpers.toConsumableArray(instructors))).map(function (reviewer, i) {
            return _this4._feedback(id, reviewer.id, lorem.addMinutes(submitDate, (i + 1) * 64), lorem);
          });
          this.portfolios[submission.portfolioId].submissions.push(submission);
        }
      }
    }, {
      key: "students",
      get: function get() {
        var _this5 = this;

        return Object.keys(this.users || {}).filter(function (u) {
          return !_this5.users[u].instructor;
        }).map(function (s) {
          return _this5.users[s];
        });
      }
    }, {
      key: "instructors",
      get: function get() {
        var _this6 = this;

        return Object.keys(this.users || {}).filter(function (u) {
          return _this6.users[u].instructor;
        }).map(function (s) {
          return _this6.users[s];
        });
      }
    }, {
      key: "schemas",
      get: function get() {
        return {
          "users.json": {
            type: "data",
            data: this.users
          },
          "profile.json": {
            type: "data",
            data: this.profile
          },
          "activity.json": {
            type: "data",
            data: this.activity
          },
          "lessons.json": {
            type: "data",
            data: this.lessons
          },
          "projects.json": {
            type: "data",
            data: this.projects
          },
          "assignments.json": {
            type: "data",
            data: this.assignments
          },
          "portfolios.json": {
            type: "data",
            data: this.portfolios
          },
          "submissions.json": {
            type: "data",
            data: this.submissions
          },
          "discussion.json": {
            type: "data",
            data: this.discussions
          }
        };
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_a3897e10e8ab11eabe6cb3de058a4220())];
      }
    }]);
    return ElmslnStudioLoremdata;
  }((0, _elmslnStudioUtilities.ElmslnStudioUtilities)(_litElement.LitElement));

  _exports.ElmslnStudioLoremdata = ElmslnStudioLoremdata;
  customElements.define("elmsln-studio-loremdata", ElmslnStudioLoremdata);
});