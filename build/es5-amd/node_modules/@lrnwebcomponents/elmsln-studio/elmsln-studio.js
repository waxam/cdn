define(["exports", "require", "../../lit-element/lit-element.js", "../../lit-element-router/lit-element-router.js", "./lib/elmsln-studio-utilities.js", "./lib/elmsln-studio-styles.js", "./lib/elmsln-studio-main.js", "./lib/elmsln-studio-link.js", "./lib/elmsln-studio-button.js"], function (_exports, _require, _litElement, _litElementRouter, _elmslnStudioUtilities, _elmslnStudioStyles, _elmslnStudioMain, _elmslnStudioLink, _elmslnStudioButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnStudio = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_e54a44c0512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"studio-nav\">\n        <elmsln-studio-link ?active=\"", "\" href=\"/\"\n          >Dashboard</elmsln-studio-link\n        >\n        <elmsln-studio-link\n          ?active=\"", "\"\n          href=\"/submissions\"\n          >Submissions</elmsln-studio-link\n        >\n        <elmsln-studio-link\n          ?active=\"", "\"\n          href=\"/assignments\"\n          >Assignments</elmsln-studio-link\n        >\n        <elmsln-studio-link\n          ?active=\"", "\"\n          href=\"/activity\"\n          >Activity Index</elmsln-studio-link\n        >\n      </div>\n      <br />\n      <elmsln-studio-main active-route=\"", "\">\n        <elmsln-studio-dashboard\n          ?demo-mode=\"", "\"\n          .discussion=\"", "\"\n          @fetch-data=\"", "\"\n          route=\"dashboard\"\n          .profile=\"", "\"\n          .submissions=\"", "\"\n        >\n        </elmsln-studio-dashboard>\n        <elmsln-studio-submissions\n          assignment-filter=\"", "\"\n          .comments=\"", "\"\n          ?demo-mode=\"", "\"\n          @fetch-data=\"", "\"\n          ?grid=\"", "\"\n          route=\"submissions\"\n          project-filter=\"", "\"\n          student-filter=\"", "\"\n          .submissions=\"", "\"\n        >\n        </elmsln-studio-submissions>\n        <elmsln-studio-portfolio\n          comment=\"", "\"\n          ?demo-mode=\"", "\"\n          .feedback=\"", "\"\n          @fetch-data=\"", "\"\n          .portfolio=\"", "\"\n          route=\"project\"\n          ?sort-latest=\"", "\"\n          submission-filter=\"", "\"\n        >\n        </elmsln-studio-portfolio>\n        <elmsln-studio-assignments\n          ?demo-mode=\"", "\"\n          @fetch-data=\"", "\"\n          .lessons=\"", "\"\n          .profile=\"", "\"\n          route=\"assignments\"\n        >\n        </elmsln-studio-assignments>\n        <elmsln-studio-assignment\n          .assignment=\"", "\"\n          .assignments=\"", "\"\n          ?demo-mode=\"", "\"\n          @fetch-data=\"", "\"\n          route=\"assignment\"\n          .submission=\"", "\"\n        >\n        </elmsln-studio-assignment>\n      </elmsln-studio-main>\n    "]);

    _templateObject_e54a44c0512d11eba3cb872b69c5cbbb = function _templateObject_e54a44c0512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `elmsln-studio`
   * Studio App for ELMS:LN
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement elmsln-studio
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */
  var ElmslnStudio = /*#__PURE__*/function (_router) {
    babelHelpers.inherits(ElmslnStudio, _router);

    var _super = _createSuper(ElmslnStudio);

    babelHelpers.createClass(ElmslnStudio, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject_e54a44c0512d11eba3cb872b69c5cbbb(), this.route === "dashboard", this.route === "submissions" || this.route === "portfolios", this.route === "assignments" || this.route === "assignment", this.route === "activity", this.route, this.demoMode, this.recentDiscussions, this._handleFetch, this.profile, this.recentSubmissions, this.query.assignment || "", !this.discussion ? undefined : Object.keys(this.discussion || {}).map(function (key) {
          return _this2.discussion[key];
        }), this.demoMode, this._handleFetch, this.query.grid || false, this.query.project || "", this.query.student || "", this.completedSubmissions, this.query.comment || "", this.demoMode, this.submissionFeedback, this._handleFetch, this.portfolio, this.query.sort === "latest", this.query.submission || "", this.demoMode, this._handleFetch, this.lessons, this.profile, this.assignment, this.assignments, this.demoMode, this._handleFetch, this.submission);
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "elmsln-studio";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio), "properties", this)), {}, {
          assignments: {
            type: Object
          },
          assignmentsSource: {
            type: String,
            reflect: true,
            attribute: "assignments-source"
          },
          discussion: {
            type: Object
          },
          discussionSource: {
            type: String,
            reflect: true,
            attribute: "discussion-source"
          },
          lessons: {
            type: Object
          },
          lessonsSource: {
            type: String,
            reflect: true,
            attribute: "lessons-source"
          },
          portfolios: {
            type: Object
          },
          portfoliosSource: {
            type: String,
            reflect: true,
            attribute: "portfolios-source"
          },
          profile: {
            type: Object
          },
          profileSource: {
            type: String,
            reflect: true,
            attribute: "profile-source"
          },
          profiles: {
            type: Object
          },
          profilesSource: {
            type: String,
            reflect: true,
            attribute: "profiles-source"
          },
          sourcePath: {
            type: String,
            reflect: true,
            attribute: "source-path"
          },
          submissions: {
            type: Object
          },
          submissionsSource: {
            type: String,
            reflect: true,
            attribute: "submissions-source"
          },
          users: {
            type: Object
          },
          usersSource: {
            type: String,
            reflect: true,
            attribute: "users-source"
          },
          route: {
            type: String
          },
          params: {
            type: Object
          },
          query: {
            type: Object
          },
          data: {
            type: Object
          }
        });
      }
    }, {
      key: "routes",
      get: function get() {
        return [{
          name: "assignments",
          pattern: "assignments"
        }, {
          name: "assignment",
          pattern: "assignments/:assignment"
        }, {
          name: "submissions",
          pattern: "submissions"
        }, {
          name: "project",
          pattern: "project/:portfolio"
        }, {
          name: "dashboard",
          pattern: "*",
          data: {
            title: "Home"
          }
        }];
      }
    }]);

    function ElmslnStudio() {
      var _this;

      babelHelpers.classCallCheck(this, ElmslnStudio);
      _this = _super.call(this);
      window.ElmslnStudioPath = "";
      _this.route = "";
      _this.params = {};
      _this.query = {};
      _this.data = {};
      _this.refreshDates = {};
      return _this;
    }

    babelHelpers.createClass(ElmslnStudio, [{
      key: "router",
      value: function router(route, params, query, data) {
        console.log("ElmslnStudioPath router", route);
        this.route = route;
        this.params = params;
        this.query = query;
        this.data = data;
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio.prototype), "firstUpdated", this).call(this, changedProperties);
        new Promise(function (res, rej) {
          return _require.default(["./lib/elmsln-studio-dashboard.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/elmsln-studio-submissions.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/elmsln-studio-assignments.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/elmsln-studio-assignment.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./lib/elmsln-studio-portfolio.js"], res, rej);
        });
        this.fetchData(this.usersSource, "users");
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {//if (propName === "params") console.log("params", this.params);
          //if (propName === "query") console.log("query", this.query);
        });
      }
    }, {
      key: "getLesson",
      value: function getLesson(lessonId) {
        return !lessonId ? undefined : this.lessons[lessonId] || {
          assignments: []
        };
      }
    }, {
      key: "getProject",
      value: function getProject(lessonId, projectId) {
        var lesson = this.getLesson(lessonId),
            projects = !lesson || !projectId ? [] : (lesson.assignments || []).filter(function (assignment) {
          return assignment.id === projectId;
        });
        return projects ? projects[0] : undefined;
      }
    }, {
      key: "_filterBy",
      value: function _filterBy(lookup, query) {
        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return lookup && query && lookup["".concat(prefix).concat(query)] ? lookup["".concat(prefix).concat(query)] : {};
      }
    }, {
      key: "fetchData",
      value: function fetchData(source, propName, params) {
        var _this3 = this;

        fetch(this._getPath(source, params)).then(function (response) {
          if (response && response.json) return response.json();
          return false;
        }).then(function (data) {
          if (data) {
            _this3[propName] = data;
            _this3.refreshDates[propName] = new Date();
            console.log("".concat(propName, " Loaded"), source, data, _this3[propName], _this3.refreshDates);
          }
        });
      }
    }, {
      key: "_handleFetch",
      value: function _handleFetch() {
        var e = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
          detail: {}
        };
        var type = e.detail.type,
            refresh = e.detail.refresh,
            source = "".concat(type, "Source");

        if (refresh || !this.refreshDates[type]) {
          this.fetchData(this[source], type);
        }
      }
    }, {
      key: "_getPath",
      value: function _getPath(path, params) {
        var query = Object.keys(params || {}).map(function (p) {
          return "".concat(encodeURI(p), "=").concat(encodeURI(params[p]));
        }).join("&");
        return query ? "".concat(path, "?").concat(query) : path;
      }
    }, {
      key: "assignment",
      get: function get() {
        return this.assignments && this.params.assignment ? this.assignments[this.params.assignment] : undefined;
      }
    }, {
      key: "lesson",
      get: function get() {
        var lessonId = (this.assignment || {}).lessonId;
        return this.getLesson(lessonId);
      }
    }, {
      key: "project",
      get: function get() {
        var projectId = (this.assignment || {}).projectId,
            lessonId = (this.assignment || {}).lessonId;
        return this.getProject(lessonId, projectId);
      }
    }, {
      key: "recentDiscussions",
      get: function get() {
        var _this4 = this;

        if (this.discussion) {
          var discussions = [];
          discussions = Object.keys(this.discussion || {}).map(function (key) {
            return _this4.discussion[key];
          });
          discussions.forEach(function (d) {
            return (d.replies || []).forEach(function (r) {
              return discussions.push(r);
            });
          });
          return this.sortDates(discussions).slice(0, 10);
        }

        return undefined;
      }
    }, {
      key: "filteredPortfolios",
      get: function get() {
        var _this5 = this;

        var prev,
            portfolios = {},
            getPrefix = function getPrefix(id) {
          return !id ? undefined : id.replace(/-\w+$/, "");
        },
            portfolioId = !this.params.portfolio ? undefined : getPrefix(this.params.portfolio),
            assignmentId = !this.query.submission ? undefined : getPrefix(this.query.submission);

        if (!portfolioId || !this.portfolios) {
          return undefined;
        } else {
          Object.keys(this.portfolios || {}).forEach(function (i) {
            var portfolio = _this5.portfolios[i],
                project = getPrefix(i) === portfolioId,
                assignment = !project || !assignmentId || !portfolio.userId ? undefined : "".concat(assignmentId, "-").concat(portfolio.userId),
                submission = project || _this5.portfolios[i].submissions && assignment && _this5.portfolios[i].submissions.includes(assignment);

            if (submission) {
              portfolios[i] = portfolio;
              portfolios[i].prev = prev;
              if (prev) prev.next = portfolios[i];
              prev = portfolios[i];
            }
          });
          return portfolios;
        }
      }
    }, {
      key: "recentSubmissions",
      get: function get() {
        var _this6 = this;

        return !this.completedSubmissions ? undefined : this.sortDates(Object.keys(this.completedSubmissions || {}).map(function (key) {
          return _this6.completedSubmissions[key];
        })).slice(0, 5);
      }
    }, {
      key: "completedSubmissions",
      get: function get() {
        var _this7 = this;

        return !this.submissions ? undefined : Object.keys(this.submissions || {}).filter(function (key) {
          return !!_this7.submissions[key].date;
        }).map(function (key) {
          return _this7.submissions[key];
        });
      }
    }, {
      key: "submission",
      get: function get() {
        var _this8 = this;

        var submissions = this.profile && this.profile.submissions && this.params.assignment ? this.profile.submissions.filter(function (s) {
          return s.assignmentId === _this8.params.assignment;
        }) : undefined;
        return submissions && submissions[0] ? submissions[0] : undefined;
      }
    }, {
      key: "portfolio",
      get: function get() {
        return this.params.portfolio && this.filteredPortfolios ? this.filteredPortfolios[this.params.portfolio] : undefined;
      }
    }, {
      key: "submissionFeedback",
      get: function get() {
        var _this9 = this;

        return !this.query.submission || !this.discussion ? undefined : Object.keys(this.discussion || {}).filter(function (key) {
          return _this9.discussion[key].submissionId == _this9.query.submission;
        }).map(function (key) {
          return _this9.discussion[key];
        });
      }
    }]);
    return ElmslnStudio;
  }((0, _litElementRouter.router)((0, _elmslnStudioUtilities.ElmslnStudioUtilities)((0, _elmslnStudioStyles.ElmslnStudioStyles)(_litElement.LitElement))));

  _exports.ElmslnStudio = ElmslnStudio;
  customElements.define(ElmslnStudio.tag, ElmslnStudio);
});