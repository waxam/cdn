define(["exports", "../../lit-element/lit-element.js", "../../lit-element-router/lit-element-router.js", "./lib/elmsln-studio-utilities.js", "./lib/elmsln-studio-styles.js", "../../@polymer/iron-ajax/iron-ajax.js", "./lib/elmsln-studio-main.js", "./lib/elmsln-studio-link.js", "./lib/elmsln-studio-button.js", "./lib/elmsln-studio-dashboard.js", "./lib/elmsln-studio-submissions.js", "./lib/elmsln-studio-assignments.js", "./lib/elmsln-studio-portfolio.js"], function (_exports, _litElement, _litElementRouter, _elmslnStudioUtilities, _elmslnStudioStyles, _ironAjax, _elmslnStudioMain, _elmslnStudioLink, _elmslnStudioButton, _elmslnStudioDashboard, _elmslnStudioSubmissions, _elmslnStudioAssignments, _elmslnStudioPortfolio) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmslnStudio = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_1abd31f0e18811eaa5662328babf1f8b() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"studio-nav\">\n        <elmsln-studio-link ?active=\"", "\" href=\"/\"\n          >Dashboard</elmsln-studio-link\n        >\n        <elmsln-studio-link\n          ?active=\"", "\"\n          href=\"/submissions\"\n          >Submissions</elmsln-studio-link\n        >\n        <elmsln-studio-link\n          ?active=\"", "\"\n          href=\"/assignments\"\n          >Assignments</elmsln-studio-link\n        >\n        <elmsln-studio-link\n          ?active=\"", "\"\n          href=\"/activity\"\n          >Activity Index</elmsln-studio-link\n        >\n      </div>\n      <br />\n      <elmsln-studio-main active-route=\"", "\">\n        <elmsln-studio-dashboard\n          ?demo-mode=\"", "\"\n          route=\"dashboard\"\n          .profile=\"", "\"\n          .activity=\"", "\"\n          route=\"dashboard\"\n        >\n        </elmsln-studio-dashboard>\n        <elmsln-studio-submissions\n          ?demo-mode=\"", "\"\n          route=\"submissions\"\n          .submissions=\"", "\"\n          .comments=\"", "\"\n          ?grid=\"", "\"\n          student-filter=\"", "\"\n          assignment-filter=\"", "\"\n          project-filter=\"", "\"\n        >\n        </elmsln-studio-submissions>\n        <elmsln-studio-portfolio\n          ?demo-mode=\"", "\"\n          route=\"portfolios\"\n          .portfolio=\"", "\"\n          .submission=\"", "\"\n          ?sort-latest=\"", "\"\n          submission-filter=\"", "\"\n          comment=\"", "\"\n        >\n        </elmsln-studio-portfolio>\n        <elmsln-studio-assignments\n          ?demo-mode=\"", "\"\n          route=\"assignments\"\n          .lessons=\"", "\"\n          .profile=\"", "\"\n        >\n        </elmsln-studio-assignments>\n      </elmsln-studio-main>\n    "]);

    _templateObject_1abd31f0e18811eaa5662328babf1f8b = function _templateObject_1abd31f0e18811eaa5662328babf1f8b() {
      return data;
    };

    return data;
  }

  /**
   * `elmsln-studio`
   * Studio App for ELMS:LN
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement elmsln-studio
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */
  var ElmslnStudio =
  /*#__PURE__*/
  function (_router) {
    babelHelpers.inherits(ElmslnStudio, _router);
    babelHelpers.createClass(ElmslnStudio, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject_1abd31f0e18811eaa5662328babf1f8b(), this.route === "dashboard", this.route === "submissions" || this.route === "portfolios", this.route === "assignments", this.route === "activity", this.route, this.demoMode, this.profile, this.activity, this.demoMode, Object.keys(this.submissions || {}).map(function (key) {
          return _this2.submissions[key];
        }), Object.keys(this.discussion || {}).map(function (key) {
          return _this2.discussion[key];
        }), this.query.grid || false, this.query.student || "", this.query.assignment || "", this.query.project || "", this.demoMode, this.portfolio, this.submissionFeedback, this.query.sort === "latest", this.query.submission || "", this.query.comment || "", this.demoMode, this.lessons || {}, this.profile || {});
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "elmsln-studio";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio), "properties", this), {
          activity: {
            type: Array
          },
          activitySource: {
            type: String,
            reflect: true,
            attribute: "activity-source"
          },
          assignments: {
            type: Object
          },
          assignmentsSource: {
            type: String,
            reflect: true,
            attribute: "assignments-source"
          },
          discussion: {
            type: Object
          },
          discussionSource: {
            type: String,
            reflect: true,
            attribute: "discussion-source"
          },
          lessons: {
            type: Object
          },
          lessonsSource: {
            type: String,
            reflect: true,
            attribute: "lessons-source"
          },
          portfolios: {
            type: Object
          },
          portfoliosSource: {
            type: String,
            reflect: true,
            attribute: "portfolios-source"
          },
          profile: {
            type: Object
          },
          profileSource: {
            type: String,
            reflect: true,
            attribute: "profile-source"
          },
          projects: {
            type: Array
          },
          projectsSource: {
            type: String,
            reflect: true,
            attribute: "projects-source"
          },
          sourcePath: {
            type: String,
            reflect: true,
            attribute: "source-path"
          },
          submissions: {
            type: Object
          },
          submissionsSource: {
            type: String,
            reflect: true,
            attribute: "submissions-source"
          },
          users: {
            type: Object
          },
          usersSource: {
            type: String,
            reflect: true,
            attribute: "users"
          },
          route: {
            type: String
          },
          params: {
            type: Object
          },
          query: {
            type: Object
          },
          data: {
            type: Object
          }
        });
      }
    }, {
      key: "routes",
      get: function get() {
        return [{
          name: "assignments",
          pattern: "assignments"
        }, {
          name: "submissions",
          pattern: "submissions"
        }, {
          name: "portfolios",
          pattern: "portfolios/:portfolio"
        }, {
          name: "dashboard",
          pattern: "*",
          data: {
            title: "Home"
          }
        }];
      }
    }]);

    function ElmslnStudio() {
      var _this;

      babelHelpers.classCallCheck(this, ElmslnStudio);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ElmslnStudio).call(this));
      _this.activity = [];
      _this.assignments = {};
      _this.discussion = {};
      _this.lessons = {};
      _this.portfolios = {};
      _this.projects = {};
      _this.profile = {};
      _this.submissions = {};
      _this.users = {};
      _this.route = "";
      _this.params = {};
      _this.query = {};
      _this.data = {};
      console.log(babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio.prototype), "properties", babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(ElmslnStudio, [{
      key: "router",
      value: function router(route, params, query, data) {
        this.route = route;
        this.params = params;
        this.query = query;
        this.data = data;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ElmslnStudio.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "params") console.log("params", _this3.params);
          if (propName === "query") console.log("query", _this3.query);
          if (propName === "usersSource") _this3.fetchData(_this3.usersSource, "users");
          if (propName === "profileSource") _this3.fetchData(_this3.profileSource, "profile");
          if (propName === "activitySource") _this3.fetchData(_this3.activitySource, "activity");
          if (propName === "lessonsSource") _this3.fetchData(_this3.lessonsSource, "lessons");
          if (propName === "projectsSource") _this3.fetchData(_this3.projectsSource, "projects");
          if (propName === "assignmentsSource") _this3.fetchData(_this3.assignmentsSource, "assignments");
          if (propName === "portfoliosSource") _this3.fetchData(_this3.portfoliosSource, "portfolios");
          if (propName === "submissionsSource") _this3.fetchData(_this3.submissionsSource, "submissions");
          if (propName === "discussionSource") _this3.fetchData(_this3.discussionSource, "discussion");
        });
      }
    }, {
      key: "_filterBy",
      value: function _filterBy(lookup, query) {
        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        return lookup && query && lookup["".concat(prefix).concat(query)] ? lookup["".concat(prefix).concat(query)] : {};
      }
    }, {
      key: "fetchData",
      value: function fetchData(source, propName, params) {
        var _this4 = this;

        fetch(this._getPath(source, params)).then(function (response) {
          return response.json();
        }).then(function (data) {
          console.log("".concat(propName, " Loaded"), data);
          _this4[propName] = data;
        });
      }
    }, {
      key: "_getPath",
      value: function _getPath(path, params) {
        var query = Object.keys(params || {}).map(function (p) {
          return "".concat(encodeURI(p), "=").concat(encodeURI(params[p]));
        }).join("&");
        return query ? "".concat(path, "?").concat(query) : path;
      }
    }, {
      key: "portfolio",
      get: function get() {
        return this.params.portfolio ? this.portfolios[this.params.portfolio] : {};
      }
    }, {
      key: "submissionFeedback",
      get: function get() {
        var _this5 = this;

        return !this.query.submission ? [] : Object.keys(this.discussion || {}).filter(function (key) {
          return _this5.discussion[key].submissionId == _this5.query.submission;
        }).map(function (key) {
          return _this5.discussion[key];
        });
      }
    }]);
    return ElmslnStudio;
  }((0, _litElementRouter.router)((0, _elmslnStudioUtilities.ElmslnStudioUtilities)((0, _elmslnStudioStyles.ElmslnStudioStyles)(_litElement.LitElement))));

  _exports.ElmslnStudio = ElmslnStudio;
  customElements.define(ElmslnStudio.tag, ElmslnStudio);
});