define(["exports", "../../@polymer/polymer/polymer-element.js", "../hax-iconset/hax-iconset.js", "../../@polymer/paper-input/paper-input.js", "../../@polymer/paper-button/paper-button.js", "../../@polymer/iron-icon/iron-icon.js", "../../@polymer/iron-icons/av-icons.js"], function (_exports, _polymerElement, _haxIconset, _paperInput, _paperButton, _ironIcon, _avIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleDatepicker = void 0;

  function _templateObject_d5677790dedc11e9bf5a076df0f16721() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host paper-button {\n          padding: 5px;\n          margin: 0;\n          cursor: pointer;\n          border-radius: 0;\n          min-width: 30px;\n        }\n        :host #calendar {\n          font-size: 12px;\n          border-collapse: collapse;\n        }\n        :host #calendar caption {\n          padding: 0;\n        }\n        :host #calendar caption div {\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n        :host #calendar caption paper-button {\n          flex: 0 1 auto;\n          --iron-icon-width: 16px;\n          --iron-icon-height: 16px;\n        }\n        :host #calendarlabel {\n          flex: 1 1 auto;\n          text-align: center;\n          margin: 0 5px;\n        }\n        :host #calendarlabel p {\n          width: 100%;\n          margin: 0;\n        }\n        :host #calendar {\n          border: var(--simple-datepicker-calendar-border, 1px solid black);\n        }\n        :host #calendar,\n        :host #calendar th,\n        :host #calendar td {\n          border: var(--simple-datepicker-calendar-days-border, none);\n        }\n        :host #calendar th {\n          padding: 2px;\n        }\n        :host #calendar td {\n          padding: 0;\n        }\n        :host #calendar td paper-button {\n          width: 100%;\n          height: 30px;\n          cursor: pointer;\n        }\n      </style>\n      <paper-input\n        id=\"dateinput\"\n        label$=\"[[label]]\"\n        slot=\"heading\"\n        value$=\"{{value}}\"\n        type=\"date\"\n      >\n        <paper-button\n          id=\"expand\"\n          controls=\"content\"\n          label=\"toggle datepicker\"\n          tooltip=\"toggle datepicker\"\n          slot=\"suffix\"\n        >\n          <iron-icon icon=\"hax:calendar\"></iron-icon>\n        </paper-button>\n      </paper-input>\n      <div id=\"content\" role=\"application\">\n        <table id=\"calendar\">\n          <caption>\n            <div>\n              <paper-button\n                controls=\"calendar\"\n                label=\"previous year\"\n                on-tap=\"prevYear\"\n              >\n                <iron-icon icon=\"av:fast-rewind\"></iron-icon>\n              </paper-button>\n              <paper-button\n                controls=\"calendar\"\n                label=\"previous month\"\n                on-tap=\"prevMonth\"\n              >\n                <iron-icon icon=\"hax:arrow-left\"></iron-icon>\n              </paper-button>\n              <div id=\"calendarlabel\"><p>[[__calendarLabel]]</p></div>\n              <paper-button\n                controls=\"calendar\"\n                label=\"next month\"\n                on-tap=\"nextMonth\"\n              >\n                <iron-icon icon=\"hax:arrow-right\"></iron-icon>\n              </paper-button>\n              <paper-button\n                controls=\"calendar\"\n                label=\"next year\"\n                on-tap=\"nextYear\"\n              >\n                <iron-icon\n                  icon=\"av:fast-forward\"\n                  controls=\"calendar\"\n                ></iron-icon>\n              </paper-button>\n            </div>\n          </caption>\n          <thead>\n            <tr>\n              <template is=\"dom-repeat\" items=\"[[weekdays]]\" as=\"weekday\">\n                <th scope=\"col\">[[weekday]]</th>\n              </template>\n            </tr>\n          </thead>\n          <tbody>\n            <template is=\"dom-repeat\" items=\"[[__calendar]]\" as=\"week\" restamp>\n              <tr>\n                <template is=\"dom-repeat\" items=\"[[week]]\" as=\"day\" restamp>\n                  <td scope=\"row\">\n                    <paper-button\n                      class=\"day\"\n                      controls=\"dateinput\"\n                      day$=\"[[day]]\"\n                      disabled$=\"[[!disabled]]\"\n                      hidden$=\"[[!day]]\"\n                    >\n                      [[day]]\n                    </paper-button>\n                  </td>\n                </template>\n              </tr>\n            </template>\n          </tbody>\n        </table>\n      </div>\n    "]);

    _templateObject_d5677790dedc11e9bf5a076df0f16721 = function _templateObject_d5677790dedc11e9bf5a076df0f16721() {
      return data;
    };

    return data;
  }

  /**
   * `simple-datepicker`
   * `a simple datepicker field`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var SimpleDatepicker =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SimpleDatepicker, _PolymerElement);

    function SimpleDatepicker() {
      babelHelpers.classCallCheck(this, SimpleDatepicker);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleDatepicker).apply(this, arguments));
    }

    babelHelpers.createClass(SimpleDatepicker, [{
      key: "nextMonth",
      value: function nextMonth() {
        var date = new Date(this.__calendarDate),
            month = date.getMonth(),
            year = date.getFullYear();

        if (month < 11) {
          date.setMonth(month + 1);
        } else {
          date.setMonth(0);
          date.setYear(year + 1);
        }

        this.__calendarDate = date.toString();
      }
    }, {
      key: "prevMonth",
      value: function prevMonth() {
        var date = new Date(this.__calendarDate),
            month = date.getMonth(),
            year = date.getFullYear();

        if (month > 0) {
          date.setMonth(month - 1);
        } else {
          date.setMonth(11);
          date.setYear(year - 1);
        }

        this.__calendarDate = date.toString();
      }
    }, {
      key: "nextYear",
      value: function nextYear() {
        var date = new Date(this.__calendarDate),
            year = date.getFullYear();
        date.setYear(year + 1);
        this.__calendarDate = date.toString();
      }
    }, {
      key: "prevYear",
      value: function prevYear() {
        var date = new Date(this.__calendarDate),
            year = date.getFullYear();
        date.setYear(year - 1);
        this.__calendarDate = date.toString();
      }
    }, {
      key: "updateCalendar",
      value: function updateCalendar(__calendarDate) {
        var label = this.shadowRoot ? this.shadowRoot.querySelector("#calendarlabel > p") : null,
            date = new Date(__calendarDate),
            month = this.monthNames[date.getMonth()],
            year = date.getFullYear();
        if (label) label.innerHTML = "".concat(month, " ").concat(year);
        return "".concat(month, " ").concat(year);
      }
    }, {
      key: "_getCalendarDate",
      value: function _getCalendarDate(value) {
        var date = value ? new Date(value) : new Date();
        this.updateCalendar(date);
        return date.toString();
      }
    }, {
      key: "_getCalendar",
      value: function _getCalendar(__calendarDate) {
        var first = new Date(__calendarDate),
            last = new Date(__calendarDate),
            weeks = [],
            start,
            end,
            cells,
            rows;
        first.setDate(1);
        last.setDate(0);
        start = first.getDay();
        end = 6 - last.getDay();
        cells = start + end + last.getDate();
        rows = cells / 7;

        for (var i = 0; i < rows - 1; i++) {
          weeks[i] = [];

          for (var j = 0; j < 7; j++) {
            var cell = j + i * 7,
                day = 1 + cell - start;
            weeks[i][j] = day < 0 || day > last.getDate() ? false : day;
          }
        }

        return weeks;
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d5677790dedc11e9bf5a076df0f16721());
      } // haxProperty definition

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Simple datepicker",
            description: "a simple datepicker field",
            icon: "hax:calendar",
            color: "green",
            groups: ["Datepicker"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "nikkimk",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          dateFormat: {
            name: "dateFormat",
            type: String,
            value: "mm-dd-yyyy"
          },
          monthNames: {
            name: "monthNames",
            type: Array,
            value: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]
          },
          value: {
            name: "value",
            type: String,
            value: null
          },
          weekStart: {
            name: "weekStart",
            type: Number,
            value: 0
          },
          weekdays: {
            name: "weekdays",
            type: Array,
            value: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
          },
          __calendar: {
            name: "__calendar",
            type: Array,
            computed: "_getCalendar(__calendarDate)"
          },
          __calendarDate: {
            name: "__calendarDate",
            type: String,
            computed: "_getCalendarDate(value)"
          },
          __calendarLabel: {
            name: "__calendarLabel",
            type: String,
            computed: "updateCalendar(__calendarDate)"
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-datepicker";
      }
    }]);
    return SimpleDatepicker;
  }(_polymerElement.PolymerElement);

  _exports.SimpleDatepicker = SimpleDatepicker;
  window.customElements.define(SimpleDatepicker.tag, SimpleDatepicker);
});