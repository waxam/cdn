define(["exports", "../format/format.js", "./aliases.js", "./priorities.js", "../parse/regex.js", "../parse/token.js", "./week-calendar-utils.js", "../utils/to-int.js", "../utils/hooks.js", "../create/local.js", "../create/date-from-array.js"], function (_exports, _format, _aliases, _priorities, _regex, _token, _weekCalendarUtils, _toInt, _hooks, _local, _dateFromArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.getISOWeeksInYear = getISOWeeksInYear;
  _exports.getSetISOWeekYear = getSetISOWeekYear;
  _exports.getSetWeekYear = getSetWeekYear;
  _exports.getWeeksInYear = getWeeksInYear;
  _toInt = babelHelpers.interopRequireDefault(_toInt);
  // FORMATTING
  (0, _format.addFormatToken)(0, ["gg", 2], 0, function () {
    return this.weekYear() % 100;
  });
  (0, _format.addFormatToken)(0, ["GG", 2], 0, function () {
    return this.isoWeekYear() % 100;
  });

  function addWeekYearFormatToken(token, getter) {
    (0, _format.addFormatToken)(0, [token, token.length], 0, getter);
  }

  addWeekYearFormatToken("gggg", "weekYear");
  addWeekYearFormatToken("ggggg", "weekYear");
  addWeekYearFormatToken("GGGG", "isoWeekYear");
  addWeekYearFormatToken("GGGGG", "isoWeekYear"); // ALIASES

  (0, _aliases.addUnitAlias)("weekYear", "gg");
  (0, _aliases.addUnitAlias)("isoWeekYear", "GG"); // PRIORITY

  (0, _priorities.addUnitPriority)("weekYear", 1);
  (0, _priorities.addUnitPriority)("isoWeekYear", 1); // PARSING

  (0, _regex.addRegexToken)("G", _regex.matchSigned);
  (0, _regex.addRegexToken)("g", _regex.matchSigned);
  (0, _regex.addRegexToken)("GG", _regex.match1to2, _regex.match2);
  (0, _regex.addRegexToken)("gg", _regex.match1to2, _regex.match2);
  (0, _regex.addRegexToken)("GGGG", _regex.match1to4, _regex.match4);
  (0, _regex.addRegexToken)("gggg", _regex.match1to4, _regex.match4);
  (0, _regex.addRegexToken)("GGGGG", _regex.match1to6, _regex.match6);
  (0, _regex.addRegexToken)("ggggg", _regex.match1to6, _regex.match6);
  (0, _token.addWeekParseToken)(["gggg", "ggggg", "GGGG", "GGGGG"], function (input, week, config, token) {
    week[token.substr(0, 2)] = (0, _toInt.default)(input);
  });
  (0, _token.addWeekParseToken)(["gg", "GG"], function (input, week, config, token) {
    week[token] = _hooks.hooks.parseTwoDigitYear(input);
  }); // MOMENTS

  function getSetWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy);
  }

  function getSetISOWeekYear(input) {
    return getSetWeekYearHelper.call(this, input, this.isoWeek(), this.isoWeekday(), 1, 4);
  }

  function getISOWeeksInYear() {
    return (0, _weekCalendarUtils.weeksInYear)(this.year(), 1, 4);
  }

  function getWeeksInYear() {
    var weekInfo = this.localeData()._week;

    return (0, _weekCalendarUtils.weeksInYear)(this.year(), weekInfo.dow, weekInfo.doy);
  }

  function getSetWeekYearHelper(input, week, weekday, dow, doy) {
    var weeksTarget;

    if (input == null) {
      return (0, _weekCalendarUtils.weekOfYear)(this, dow, doy).year;
    } else {
      weeksTarget = (0, _weekCalendarUtils.weeksInYear)(input, dow, doy);

      if (week > weeksTarget) {
        week = weeksTarget;
      }

      return setWeekAll.call(this, input, week, weekday, dow, doy);
    }
  }

  function setWeekAll(weekYear, week, weekday, dow, doy) {
    var dayOfYearData = (0, _weekCalendarUtils.dayOfYearFromWeeks)(weekYear, week, weekday, dow, doy),
        date = (0, _dateFromArray.createUTCDate)(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
    this.year(date.getUTCFullYear());
    this.month(date.getUTCMonth());
    this.date(date.getUTCDate());
    return this;
  }
});