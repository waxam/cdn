define(["exports", "../utils/is-function.js", "../utils/extend.js", "../utils/is-object.js", "../utils/has-own-prop.js"], function (_exports, _isFunction, _extend, _isObject, _hasOwnProp) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.mergeConfigs = mergeConfigs;
  _exports.set = set;
  _isFunction = babelHelpers.interopRequireDefault(_isFunction);
  _extend = babelHelpers.interopRequireDefault(_extend);
  _isObject = babelHelpers.interopRequireDefault(_isObject);
  _hasOwnProp = babelHelpers.interopRequireDefault(_hasOwnProp);

  function set(config) {
    var prop, i;

    for (i in config) {
      prop = config[i];

      if ((0, _isFunction.default)(prop)) {
        this[i] = prop;
      } else {
        this["_" + i] = prop;
      }
    }

    this._config = config; // Lenient ordinal parsing accepts just a number in addition to
    // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
    // TODO: Remove "ordinalParse" fallback in next major release.

    this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source);
  }

  function mergeConfigs(parentConfig, childConfig) {
    var res = (0, _extend.default)({}, parentConfig),
        prop;

    for (prop in childConfig) {
      if ((0, _hasOwnProp.default)(childConfig, prop)) {
        if ((0, _isObject.default)(parentConfig[prop]) && (0, _isObject.default)(childConfig[prop])) {
          res[prop] = {};
          (0, _extend.default)(res[prop], parentConfig[prop]);
          (0, _extend.default)(res[prop], childConfig[prop]);
        } else if (childConfig[prop] != null) {
          res[prop] = childConfig[prop];
        } else {
          delete res[prop];
        }
      }
    }

    for (prop in parentConfig) {
      if ((0, _hasOwnProp.default)(parentConfig, prop) && !(0, _hasOwnProp.default)(childConfig, prop) && (0, _isObject.default)(parentConfig[prop])) {
        // make sure changes to properties don't modify parent config
        res[prop] = (0, _extend.default)({}, res[prop]);
      }
    }

    return res;
  }
});