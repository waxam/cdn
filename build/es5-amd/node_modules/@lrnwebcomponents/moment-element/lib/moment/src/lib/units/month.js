define(["exports", "../moment/get-set.js", "../utils/has-own-prop.js", "../format/format.js", "./aliases.js", "./priorities.js", "../parse/regex.js", "../parse/token.js", "../utils/hooks.js", "./constants.js", "../utils/to-int.js", "../utils/is-array.js", "../utils/is-number.js", "../utils/mod.js", "../utils/index-of.js", "../create/utc.js", "../create/parsing-flags.js", "./year.js"], function (_exports, _getSet, _hasOwnProp, _format, _aliases, _priorities, _regex, _token, _hooks, _constants, _toInt, _isArray, _isNumber, _mod, _indexOf, _utc, _parsingFlags, _year) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.daysInMonth = daysInMonth;
  _exports.defaultLocaleMonthsShort = _exports.defaultLocaleMonths = void 0;
  _exports.getDaysInMonth = getDaysInMonth;
  _exports.getSetMonth = getSetMonth;
  _exports.localeMonths = localeMonths;
  _exports.localeMonthsParse = localeMonthsParse;
  _exports.localeMonthsShort = localeMonthsShort;
  _exports.monthsRegex = monthsRegex;
  _exports.monthsShortRegex = monthsShortRegex;
  _exports.setMonth = setMonth;
  _hasOwnProp = babelHelpers.interopRequireDefault(_hasOwnProp);
  _toInt = babelHelpers.interopRequireDefault(_toInt);
  _isArray = babelHelpers.interopRequireDefault(_isArray);
  _isNumber = babelHelpers.interopRequireDefault(_isNumber);
  _mod = babelHelpers.interopRequireDefault(_mod);
  _indexOf = babelHelpers.interopRequireDefault(_indexOf);
  _parsingFlags = babelHelpers.interopRequireDefault(_parsingFlags);

  function daysInMonth(year, month) {
    if (isNaN(year) || isNaN(month)) {
      return NaN;
    }

    var modMonth = (0, _mod.default)(month, 12);
    year += (month - modMonth) / 12;
    return modMonth === 1 ? (0, _year.isLeapYear)(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
  } // FORMATTING


  (0, _format.addFormatToken)("M", ["MM", 2], "Mo", function () {
    return this.month() + 1;
  });
  (0, _format.addFormatToken)("MMM", 0, 0, function (format) {
    return this.localeData().monthsShort(this, format);
  });
  (0, _format.addFormatToken)("MMMM", 0, 0, function (format) {
    return this.localeData().months(this, format);
  }); // ALIASES

  (0, _aliases.addUnitAlias)("month", "M"); // PRIORITY

  (0, _priorities.addUnitPriority)("month", 8); // PARSING

  (0, _regex.addRegexToken)("M", _regex.match1to2);
  (0, _regex.addRegexToken)("MM", _regex.match1to2, _regex.match2);
  (0, _regex.addRegexToken)("MMM", function (isStrict, locale) {
    return locale.monthsShortRegex(isStrict);
  });
  (0, _regex.addRegexToken)("MMMM", function (isStrict, locale) {
    return locale.monthsRegex(isStrict);
  });
  (0, _token.addParseToken)(["M", "MM"], function (input, array) {
    array[_constants.MONTH] = (0, _toInt.default)(input) - 1;
  });
  (0, _token.addParseToken)(["MMM", "MMMM"], function (input, array, config, token) {
    var month = config._locale.monthsParse(input, token, config._strict); // if we didn't find a month name, mark the date as invalid.


    if (month != null) {
      array[_constants.MONTH] = month;
    } else {
      (0, _parsingFlags.default)(config).invalidMonth = input;
    }
  }); // LOCALES

  var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
  var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split("_");
  _exports.defaultLocaleMonths = defaultLocaleMonths;

  function localeMonths(m, format) {
    if (!m) {
      return (0, _isArray.default)(this._months) ? this._months : this._months["standalone"];
    }

    return (0, _isArray.default)(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? "format" : "standalone"][m.month()];
  }

  var defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");
  _exports.defaultLocaleMonthsShort = defaultLocaleMonthsShort;

  function localeMonthsShort(m, format) {
    if (!m) {
      return (0, _isArray.default)(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
    }

    return (0, _isArray.default)(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format) ? "format" : "standalone"][m.month()];
  }

  function handleStrictParse(monthName, format, strict) {
    var i,
        ii,
        mom,
        llc = monthName.toLocaleLowerCase();

    if (!this._monthsParse) {
      // this is not used
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];

      for (i = 0; i < 12; ++i) {
        mom = (0, _utc.createUTC)([2000, i]);
        this._shortMonthsParse[i] = this.monthsShort(mom, "").toLocaleLowerCase();
        this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
      }
    }

    if (strict) {
      if (format === "MMM") {
        ii = _indexOf.default.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = _indexOf.default.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    } else {
      if (format === "MMM") {
        ii = _indexOf.default.call(this._shortMonthsParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = _indexOf.default.call(this._longMonthsParse, llc);
        return ii !== -1 ? ii : null;
      } else {
        ii = _indexOf.default.call(this._longMonthsParse, llc);

        if (ii !== -1) {
          return ii;
        }

        ii = _indexOf.default.call(this._shortMonthsParse, llc);
        return ii !== -1 ? ii : null;
      }
    }
  }

  function localeMonthsParse(monthName, format, strict) {
    var i, mom, regex;

    if (this._monthsParseExact) {
      return handleStrictParse.call(this, monthName, format, strict);
    }

    if (!this._monthsParse) {
      this._monthsParse = [];
      this._longMonthsParse = [];
      this._shortMonthsParse = [];
    } // TODO: add sorting
    // Sorting makes sure if one month (or abbr) is a prefix of another
    // see sorting in computeMonthsParse


    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = (0, _utc.createUTC)([2000, i]);

      if (strict && !this._longMonthsParse[i]) {
        this._longMonthsParse[i] = new RegExp("^" + this.months(mom, "").replace(".", "") + "$", "i");
        this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(mom, "").replace(".", "") + "$", "i");
      }

      if (!strict && !this._monthsParse[i]) {
        regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
        this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
      } // test the regex


      if (strict && format === "MMMM" && this._longMonthsParse[i].test(monthName)) {
        return i;
      } else if (strict && format === "MMM" && this._shortMonthsParse[i].test(monthName)) {
        return i;
      } else if (!strict && this._monthsParse[i].test(monthName)) {
        return i;
      }
    }
  } // MOMENTS


  function setMonth(mom, value) {
    var dayOfMonth;

    if (!mom.isValid()) {
      // No op
      return mom;
    }

    if (typeof value === "string") {
      if (/^\d+$/.test(value)) {
        value = (0, _toInt.default)(value);
      } else {
        value = mom.localeData().monthsParse(value); // TODO: Another silent failure?

        if (!(0, _isNumber.default)(value)) {
          return mom;
        }
      }
    }

    dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));

    mom._d["set" + (mom._isUTC ? "UTC" : "") + "Month"](value, dayOfMonth);

    return mom;
  }

  function getSetMonth(value) {
    if (value != null) {
      setMonth(this, value);

      _hooks.hooks.updateOffset(this, true);

      return this;
    } else {
      return (0, _getSet.get)(this, "Month");
    }
  }

  function getDaysInMonth() {
    return daysInMonth(this.year(), this.month());
  }

  var defaultMonthsShortRegex = _regex.matchWord;

  function monthsShortRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!(0, _hasOwnProp.default)(this, "_monthsRegex")) {
        computeMonthsParse.call(this);
      }

      if (isStrict) {
        return this._monthsShortStrictRegex;
      } else {
        return this._monthsShortRegex;
      }
    } else {
      if (!(0, _hasOwnProp.default)(this, "_monthsShortRegex")) {
        this._monthsShortRegex = defaultMonthsShortRegex;
      }

      return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
    }
  }

  var defaultMonthsRegex = _regex.matchWord;

  function monthsRegex(isStrict) {
    if (this._monthsParseExact) {
      if (!(0, _hasOwnProp.default)(this, "_monthsRegex")) {
        computeMonthsParse.call(this);
      }

      if (isStrict) {
        return this._monthsStrictRegex;
      } else {
        return this._monthsRegex;
      }
    } else {
      if (!(0, _hasOwnProp.default)(this, "_monthsRegex")) {
        this._monthsRegex = defaultMonthsRegex;
      }

      return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
    }
  }

  function computeMonthsParse() {
    function cmpLenRev(a, b) {
      return b.length - a.length;
    }

    var shortPieces = [],
        longPieces = [],
        mixedPieces = [],
        i,
        mom;

    for (i = 0; i < 12; i++) {
      // make the regex if we don't have it already
      mom = (0, _utc.createUTC)([2000, i]);
      shortPieces.push(this.monthsShort(mom, ""));
      longPieces.push(this.months(mom, ""));
      mixedPieces.push(this.months(mom, ""));
      mixedPieces.push(this.monthsShort(mom, ""));
    } // Sorting makes sure if one month (or abbr) is a prefix of another it
    // will match the longer piece.


    shortPieces.sort(cmpLenRev);
    longPieces.sort(cmpLenRev);
    mixedPieces.sort(cmpLenRev);

    for (i = 0; i < 12; i++) {
      shortPieces[i] = (0, _regex.regexEscape)(shortPieces[i]);
      longPieces[i] = (0, _regex.regexEscape)(longPieces[i]);
    }

    for (i = 0; i < 24; i++) {
      mixedPieces[i] = (0, _regex.regexEscape)(mixedPieces[i]);
    }

    this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
    this._monthsShortRegex = this._monthsRegex;
    this._monthsStrictRegex = new RegExp("^(" + longPieces.join("|") + ")", "i");
    this._monthsShortStrictRegex = new RegExp("^(" + shortPieces.join("|") + ")", "i");
  }
});