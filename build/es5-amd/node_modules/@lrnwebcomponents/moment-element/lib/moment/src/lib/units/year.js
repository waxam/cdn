define(["exports", "../moment/get-set.js", "../format/format.js", "./aliases.js", "./priorities.js", "../parse/regex.js", "../parse/token.js", "../utils/hooks.js", "./constants.js", "../utils/to-int.js"], function (_exports, _getSet, _format, _aliases, _priorities, _regex, _token, _hooks, _constants, _toInt) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.daysInYear = daysInYear;
  _exports.getIsLeapYear = getIsLeapYear;
  _exports.getSetYear = void 0;
  _exports.isLeapYear = isLeapYear;
  _toInt = babelHelpers.interopRequireDefault(_toInt);
  // FORMATTING
  (0, _format.addFormatToken)("Y", 0, 0, function () {
    var y = this.year();
    return y <= 9999 ? "" + y : "+" + y;
  });
  (0, _format.addFormatToken)(0, ["YY", 2], 0, function () {
    return this.year() % 100;
  });
  (0, _format.addFormatToken)(0, ["YYYY", 4], 0, "year");
  (0, _format.addFormatToken)(0, ["YYYYY", 5], 0, "year");
  (0, _format.addFormatToken)(0, ["YYYYYY", 6, true], 0, "year"); // ALIASES

  (0, _aliases.addUnitAlias)("year", "y"); // PRIORITIES

  (0, _priorities.addUnitPriority)("year", 1); // PARSING

  (0, _regex.addRegexToken)("Y", _regex.matchSigned);
  (0, _regex.addRegexToken)("YY", _regex.match1to2, _regex.match2);
  (0, _regex.addRegexToken)("YYYY", _regex.match1to4, _regex.match4);
  (0, _regex.addRegexToken)("YYYYY", _regex.match1to6, _regex.match6);
  (0, _regex.addRegexToken)("YYYYYY", _regex.match1to6, _regex.match6);
  (0, _token.addParseToken)(["YYYYY", "YYYYYY"], _constants.YEAR);
  (0, _token.addParseToken)("YYYY", function (input, array) {
    array[_constants.YEAR] = input.length === 2 ? _hooks.hooks.parseTwoDigitYear(input) : (0, _toInt.default)(input);
  });
  (0, _token.addParseToken)("YY", function (input, array) {
    array[_constants.YEAR] = _hooks.hooks.parseTwoDigitYear(input);
  });
  (0, _token.addParseToken)("Y", function (input, array) {
    array[_constants.YEAR] = parseInt(input, 10);
  }); // HELPERS

  function daysInYear(year) {
    return isLeapYear(year) ? 366 : 365;
  }

  function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  } // HOOKS


  _hooks.hooks.parseTwoDigitYear = function (input) {
    return (0, _toInt.default)(input) + ((0, _toInt.default)(input) > 68 ? 1900 : 2000);
  }; // MOMENTS


  var getSetYear = (0, _getSet.makeGetSet)("FullYear", true);
  _exports.getSetYear = getSetYear;

  function getIsLeapYear() {
    return isLeapYear(this.year());
  }
});