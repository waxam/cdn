define(["exports", "./extend.js", "./hooks.js", "./is-undefined.js"], function (_exports, _extend, _hooks, _isUndefined) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.deprecate = deprecate;
  _exports.deprecateSimple = deprecateSimple;
  _extend = babelHelpers.interopRequireDefault(_extend);
  _isUndefined = babelHelpers.interopRequireDefault(_isUndefined);

  function warn(msg) {
    if (_hooks.hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
      console.warn("Deprecation warning: " + msg);
    }
  }

  function deprecate(msg, fn) {
    var firstTime = true;
    return (0, _extend.default)(function () {
      if (_hooks.hooks.deprecationHandler != null) {
        _hooks.hooks.deprecationHandler(null, msg);
      }

      if (firstTime) {
        var args = [];
        var arg;

        for (var i = 0; i < arguments.length; i++) {
          arg = "";

          if (babelHelpers.typeof(arguments[i]) === "object") {
            arg += "\n[" + i + "] ";

            for (var key in arguments[0]) {
              arg += key + ": " + arguments[0][key] + ", ";
            }

            arg = arg.slice(0, -2); // Remove trailing comma and space
          } else {
            arg = arguments[i];
          }

          args.push(arg);
        }

        warn(msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack);
        firstTime = false;
      }

      return fn.apply(this, arguments);
    }, fn);
  }

  var deprecations = {};

  function deprecateSimple(name, msg) {
    if (_hooks.hooks.deprecationHandler != null) {
      _hooks.hooks.deprecationHandler(name, msg);
    }

    if (!deprecations[name]) {
      warn(msg);
      deprecations[name] = true;
    }
  }

  _hooks.hooks.suppressDeprecationWarnings = false;
  _hooks.hooks.deprecationHandler = null;
});