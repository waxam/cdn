define(["exports", "../utils/is-array.js", "../utils/is-object.js", "../utils/is-object-empty.js", "../utils/is-undefined.js", "../utils/is-number.js", "../utils/is-date.js", "../utils/map.js", "./valid.js", "../moment/constructor.js", "../locale/locales.js", "../utils/hooks.js", "./check-overflow.js", "./from-string-and-array.js", "./from-string-and-format.js", "./from-string.js", "./from-array.js", "./from-object.js"], function (_exports, _isArray, _isObject, _isObjectEmpty, _isUndefined, _isNumber, _isDate, _map, _valid, _constructor, _locales, _hooks, _checkOverflow, _fromStringAndArray, _fromStringAndFormat, _fromString, _fromArray, _fromObject) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.createLocalOrUTC = createLocalOrUTC;
  _exports.prepareConfig = prepareConfig;
  _isArray = babelHelpers.interopRequireDefault(_isArray);
  _isObject = babelHelpers.interopRequireDefault(_isObject);
  _isObjectEmpty = babelHelpers.interopRequireDefault(_isObjectEmpty);
  _isUndefined = babelHelpers.interopRequireDefault(_isUndefined);
  _isNumber = babelHelpers.interopRequireDefault(_isNumber);
  _isDate = babelHelpers.interopRequireDefault(_isDate);
  _map = babelHelpers.interopRequireDefault(_map);
  _checkOverflow = babelHelpers.interopRequireDefault(_checkOverflow);

  function createFromConfig(config) {
    var res = new _constructor.Moment((0, _checkOverflow.default)(prepareConfig(config)));

    if (res._nextDay) {
      // Adding is smart enough around DST
      res.add(1, "d");
      res._nextDay = undefined;
    }

    return res;
  }

  function prepareConfig(config) {
    var input = config._i,
        format = config._f;
    config._locale = config._locale || (0, _locales.getLocale)(config._l);

    if (input === null || format === undefined && input === "") {
      return (0, _valid.createInvalid)({
        nullInput: true
      });
    }

    if (typeof input === "string") {
      config._i = input = config._locale.preparse(input);
    }

    if ((0, _constructor.isMoment)(input)) {
      return new _constructor.Moment((0, _checkOverflow.default)(input));
    } else if ((0, _isDate.default)(input)) {
      config._d = input;
    } else if ((0, _isArray.default)(format)) {
      (0, _fromStringAndArray.configFromStringAndArray)(config);
    } else if (format) {
      (0, _fromStringAndFormat.configFromStringAndFormat)(config);
    } else {
      configFromInput(config);
    }

    if (!(0, _valid.isValid)(config)) {
      config._d = null;
    }

    return config;
  }

  function configFromInput(config) {
    var input = config._i;

    if ((0, _isUndefined.default)(input)) {
      config._d = new Date(_hooks.hooks.now());
    } else if ((0, _isDate.default)(input)) {
      config._d = new Date(input.valueOf());
    } else if (typeof input === "string") {
      (0, _fromString.configFromString)(config);
    } else if ((0, _isArray.default)(input)) {
      config._a = (0, _map.default)(input.slice(0), function (obj) {
        return parseInt(obj, 10);
      });
      (0, _fromArray.configFromArray)(config);
    } else if ((0, _isObject.default)(input)) {
      (0, _fromObject.configFromObject)(config);
    } else if ((0, _isNumber.default)(input)) {
      // from milliseconds
      config._d = new Date(input);
    } else {
      _hooks.hooks.createFromInputFallback(config);
    }
  }

  function createLocalOrUTC(input, format, locale, strict, isUTC) {
    var c = {};

    if (locale === true || locale === false) {
      strict = locale;
      locale = undefined;
    }

    if ((0, _isObject.default)(input) && (0, _isObjectEmpty.default)(input) || (0, _isArray.default)(input) && input.length === 0) {
      input = undefined;
    } // object construction must be done this way.
    // https://github.com/moment/moment/issues/1423


    c._isAMomentObject = true;
    c._useUTC = c._isUTC = isUTC;
    c._l = locale;
    c._i = input;
    c._f = format;
    c._strict = strict;
    return createFromConfig(c);
  }
});