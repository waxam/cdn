define(["exports", "../utils/hooks.js", "../utils/has-own-prop.js", "../utils/is-undefined.js", "../create/parsing-flags.js"], function (_exports, _hooks, _hasOwnProp, _isUndefined, _parsingFlags) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Moment = Moment;
  _exports.copyConfig = copyConfig;
  _exports.isMoment = isMoment;
  _hasOwnProp = babelHelpers.interopRequireDefault(_hasOwnProp);
  _isUndefined = babelHelpers.interopRequireDefault(_isUndefined);
  _parsingFlags = babelHelpers.interopRequireDefault(_parsingFlags);
  // Plugins that add properties should also add the key here (null value),
  // so we can properly clone ourselves.
  var momentProperties = _hooks.hooks.momentProperties = [];

  function copyConfig(to, from) {
    var i, prop, val;

    if (!(0, _isUndefined.default)(from._isAMomentObject)) {
      to._isAMomentObject = from._isAMomentObject;
    }

    if (!(0, _isUndefined.default)(from._i)) {
      to._i = from._i;
    }

    if (!(0, _isUndefined.default)(from._f)) {
      to._f = from._f;
    }

    if (!(0, _isUndefined.default)(from._l)) {
      to._l = from._l;
    }

    if (!(0, _isUndefined.default)(from._strict)) {
      to._strict = from._strict;
    }

    if (!(0, _isUndefined.default)(from._tzm)) {
      to._tzm = from._tzm;
    }

    if (!(0, _isUndefined.default)(from._isUTC)) {
      to._isUTC = from._isUTC;
    }

    if (!(0, _isUndefined.default)(from._offset)) {
      to._offset = from._offset;
    }

    if (!(0, _isUndefined.default)(from._pf)) {
      to._pf = (0, _parsingFlags.default)(from);
    }

    if (!(0, _isUndefined.default)(from._locale)) {
      to._locale = from._locale;
    }

    if (momentProperties.length > 0) {
      for (i = 0; i < momentProperties.length; i++) {
        prop = momentProperties[i];
        val = from[prop];

        if (!(0, _isUndefined.default)(val)) {
          to[prop] = val;
        }
      }
    }

    return to;
  }

  var updateInProgress = false; // Moment prototype object

  function Moment(config) {
    copyConfig(this, config);
    this._d = new Date(config._d != null ? config._d.getTime() : NaN);

    if (!this.isValid()) {
      this._d = new Date(NaN);
    } // Prevent infinite loop in case updateOffset creates new moment
    // objects.


    if (updateInProgress === false) {
      updateInProgress = true;

      _hooks.hooks.updateOffset(this);

      updateInProgress = false;
    }
  }

  function isMoment(obj) {
    return babelHelpers.instanceof(obj, Moment) || obj != null && obj._isAMomentObject != null;
  }
});