define(["exports", "meta", "../../lit-element/lit-element.js", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _litElement, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MomentElement = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  function _templateObject_8a7e5770c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", "\n    "]);

    _templateObject_8a7e5770c96f11ea8be5e1d5fe7ec787 = function _templateObject_8a7e5770c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * @license
   * Copyright (c) 2016 Abdón Rodríguez Davila (@abdonrd). All rights reserved.
   * This code may only be used under the MIT style license found at https://abdonrd.github.io/LICENSE.txt
   */

  /**
  Polymer element wrapper for the [moment](https://github.com/moment/moment) library.
  
  Examples:
  
      <moment-element></moment-element>
      <moment-element datetime="1991-12-31" output-format="MMM DD[,] YYYY"></moment-element>
  
  * @demo demo/index.html
  */
  var MomentElement =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(MomentElement, _LitElement);
    babelHelpers.createClass(MomentElement, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8a7e5770c96f11ea8be5e1d5fe7ec787(), this.output);
      }
    }, {
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "moment-element";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          datetime: {
            type: String
          },
          inputFormat: {
            type: String,
            attribute: "input-format"
          },
          outputFormat: {
            type: String,
            attribute: "output-format"
          },
          from: {
            type: String
          },
          to: {
            type: String
          },
          output: {
            type: String
          },
          libraryLoaded: {
            type: Boolean
          }
        };
      }
    }]);

    function MomentElement() {
      var _this;

      babelHelpers.classCallCheck(this, MomentElement);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MomentElement).call(this));
      _this.datetime = new Date();
      _this.inputFormat = "";
      _this.outputFormat = "";
      _this.from = "";
      _this.to = "";

      var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

      var location = "".concat(basePath, "lib/moment/moment.js");
      window.addEventListener("es-bridge-moment-loaded", _this._momentLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability();
      window.ESGlobalBridge.instance.load("moment", location);
      return _this;
    }

    babelHelpers.createClass(MomentElement, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["output"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (["datetime", "inputFormat", "outputFormat", "from", "to", "libraryLoaded"].includes(propName)) {
            _this2.output = _this2._computeOutput(_this2.datetime, _this2.inputFormat, _this2.outputFormat, _this2.from, _this2.to, _this2.libraryLoaded);
          }
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-moment-loaded", this._momentLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(MomentElement.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_momentLoaded",
      value: function _momentLoaded() {
        this.libraryLoaded = true;
      }
    }, {
      key: "_computeOutput",
      value: function _computeOutput(datetime, inputFormat, outputFormat, from, to, libraryLoaded) {
        if (libraryLoaded) {
          var output = inputFormat ? moment(datetime, inputFormat) : moment(datetime);

          if (outputFormat) {
            output = output.format(outputFormat);
          } else if (from) {
            output = from === "now" ? output.fromNow() : output.from(moment(from));
          } else if (to) {
            output = to === "now" ? output.toNow() : output.to(moment(to));
          }

          return output;
        }
      }
    }]);
    return MomentElement;
  }(_litElement.LitElement);

  _exports.MomentElement = MomentElement;
  window.customElements.define(MomentElement.tag, MomentElement);
});