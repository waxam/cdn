define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperInputFlagged = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_64045710d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-input\n        label=\"", "\"\n        value=\"", "\"\n        @value-changed=\"", "\"\n        ?char-counter=\"", "\"\n        ?disabled=\"", "\"\n        minlength=\"", "\"\n        maxlength=\"", "\"\n      >\n        <iron-icon id=\"icon\" icon=\"", "\" slot=\"prefix\"></iron-icon>\n      </paper-input>\n      <div class=\"element-invisible\">", "</div>\n      <simple-tooltip\n        for=\"icon\"\n        position=\"top\"\n        offset=\"20\"\n        fit-to-visible-bounds\n      >\n        ", "\n      </simple-tooltip>\n    "]);

    _templateObject2_64045710d34d11ea880ba1e93364c49c = function _templateObject2_64045710d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_64045710d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        iron-icon {\n          transition: 0.6s all ease-in;\n          width: 24px;\n          height: 24px;\n          margin-right: 4px;\n        }\n        simple-tooltip {\n          --simple-tooltip-delay-in: 100;\n          font-size: 11px;\n        }\n        #icon {\n          color: var(--paper-grey-400);\n          background-color: transparent;\n        }\n        :host([status=\"info\"]) #icon {\n          color: var(--paper-green-400);\n        }\n        :host([status=\"notice\"]) #icon {\n          color: var(--paper-grey-400);\n        }\n        :host([status=\"warning\"]) #icon {\n          color: var(--paper-yellow-700);\n        }\n        :host([status=\"error\"]) #icon {\n          color: var(--paper-red-900);\n        }\n        .element-invisible {\n          position: absolute !important;\n          clip: rect(1px, 1px, 1px, 1px);\n          overflow: hidden;\n          height: 1px;\n        }\n      "]);

    _templateObject_64045710d34d11ea880ba1e93364c49c = function _templateObject_64045710d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
  `paper-input-flagged`
  A LRN element
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - flagged - a piece of content with a status message indicating there's an issue with the input by the user. This isn't formal validation but more of feedback or suggestions about what they are entering. The default is feedback for alt metadata, useful for images.
  */
  var PaperInputFlagged =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(PaperInputFlagged, _LitElement);
    babelHelpers.createClass(PaperInputFlagged, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_64045710d34d11ea880ba1e93364c49c())];
      }
    }]);

    function PaperInputFlagged() {
      var _this;

      babelHelpers.classCallCheck(this, PaperInputFlagged);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PaperInputFlagged).call(this));
      _this.disabled = false;
      _this.label = "";
      _this.value = "";
      _this.inputSuccess = {
        message: "You passed our simple accessibility checks.",
        status: "info"
      };
      _this.flaggedInput = [{
        match: null,
        message: "Alt data is required for everything except decoration images.",
        status: "notice"
      }, {
        match: "image",
        message: "Screenreaders will say the word image, don't put it in the descriptive text",
        status: "error"
      }, {
        match: "photo",
        message: "Screenreaders will say the word image, don't put photo in the descriptive text",
        status: "error"
      }, {
        match: "picture",
        message: "Screenreaders will say the word image, don't put picture in the descriptive text",
        status: "error"
      }, {
        match: 3,
        message: "Description not effective enough. This should be at least a sentance about what the image is.",
        status: "error"
      }, {
        match: 10,
        message: "Make sure your alt text is descriptive enough for those that can't see the media.",
        status: "warning"
      }];
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-input/paper-input.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(PaperInputFlagged, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["value"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "status") {
            _this2.icon = _this2._iconFromStatus(_this2.status);
          }

          if (propName == "flaggedInput" || propName == "value") {
            _this2.status = _this2.testStatus(_this2.flaggedInput, _this2.value);
          }
        });
      }
    }, {
      key: "valueEvent",
      value: function valueEvent(e) {
        this.value = e.detail.value;
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_64045710d34d11ea880ba1e93364c49c(), this.label, this.value, this.valueEvent, this.charCounter, this.disabled, this.minlength, this.maxlength, this.icon, this.__activeMessage, this.__activeMessage);
      }
    }, {
      key: "testStatus",

      /**
       * testStatus based on current input
       */
      value: function testStatus(test, value) {
        for (var i in test) {
          // special case for null if testing empty
          if (test[i].match === null && (value === "" || value === null)) {
            this.__activeMessage = test[i].message;
            return test[i].status;
          } else if (!isNaN(test[i].match) && value.split(/\s+/g).length < parseInt(test[i].match)) {
            this.__activeMessage = test[i].message;
            return test[i].status;
          } // see if we match on a piece of the rest of it
          else if (value.toLowerCase().includes(test[i].match)) {
              this.__activeMessage = test[i].message;
              return test[i].status;
            }
        } // if we beat all the test then display some nominal woo msg


        this.__activeMessage = this.inputSuccess.message;
        return this.inputSuccess.status;
      }
      /**
       * Compute icon from status
       */

    }, {
      key: "_iconFromStatus",
      value: function _iconFromStatus(status) {
        switch (status) {
          case "error":
            return "icons:error";
            break;

          case "warning":
          case "notice":
            return "icons:warning";
            break;

          case "info":
            return "icons:info-outline";
            break;

          default:
            return "icons:info";
            break;
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "paper-input-flagged";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          label: {
            type: String
          },
          disabled: {
            type: Boolean
          },

          /**
           * Icon based on status
           */
          icon: {
            type: String
          },
          maxlength: {
            type: Number
          },
          minlength: {
            type: Number
          },

          /**
           * Status based on test for flagged words
           */
          status: {
            type: String,
            reflect: true
          },

          /**
           * value
           */
          value: {
            type: String
          },

          /**
           * Input to trap and offer feedback about.
           */
          flaggedInput: {
            type: Array,
            attribute: "flagged-input"
          },

          /**
           * Passed tests / success data.
           */
          inputSuccess: {
            type: Object,
            attribute: "input-success"
          },
          __activeMessage: {
            type: String
          }
        };
      }
    }]);
    return PaperInputFlagged;
  }(_litElement.LitElement);

  _exports.PaperInputFlagged = PaperInputFlagged;
  window.customElements.define(PaperInputFlagged.tag, PaperInputFlagged);
});