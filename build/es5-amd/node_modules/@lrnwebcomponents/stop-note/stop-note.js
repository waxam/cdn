define(["exports", "meta", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js", "../utils/lib/remoteLinkBehavior.js", "../simple-icon/lib/simple-iconset.js", "../simple-icon/simple-icon.js"], function (_exports, meta, _litElement, _schemaBehaviors, _remoteLinkBehavior2, _simpleIconset, _simpleIcon) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.StopNote = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  function _templateObject3_41139b50577b11ebb66acdcaf78a5691() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          width: auto;\n          --background-color: #f7f7f7;\n          --accent-color: #d32f2f;\n          margin-bottom: 20px;\n        }\n\n        simple-icon {\n          --simple-icon-height: 100px;\n          --simple-icon-width: 100px;\n        }\n\n        :host([icon=\"stopnoteicons:stop-icon\"]) {\n          --accent-color: #d8261c;\n        }\n\n        :host([icon=\"stopnoteicons:warning-icon\"]) {\n          --accent-color: #ffeb3b;\n        }\n\n        :host([icon=\"stopnoteicons:confirm-icon\"]) {\n          --accent-color: #81c784;\n        }\n\n        :host([icon=\"stopnoteicons:book-icon\"]) {\n          --accent-color: #21a3db;\n        }\n\n        .container {\n          display: flex;\n          width: auto;\n        }\n\n        .message_wrap {\n          border-right: 7px solid var(--accent-color);\n          padding: 10px 25px;\n          flex: 1 1 auto;\n          background-color: var(--background-color);\n        }\n\n        .main_message {\n          font-size: 32px;\n          margin-top: 10px;\n        }\n\n        .secondary_message {\n          margin-top: 5px;\n          font-size: 19.2px;\n          float: left;\n        }\n\n        .link a {\n          margin-top: 5px;\n          font-size: 19.2px;\n          float: left;\n          clear: left;\n          text-decoration: none;\n          color: #2196f3;\n        }\n\n        .link a:hover {\n          color: #1976d2;\n        }\n\n        .svg {\n          display: flex;\n          justify-content: center;\n        }\n\n        .svg_wrap {\n          background-color: var(--accent-color);\n          padding: 5px;\n          width: auto;\n        }\n      "]);

    _templateObject3_41139b50577b11ebb66acdcaf78a5691 = function _templateObject3_41139b50577b11ebb66acdcaf78a5691() {
      return data;
    };

    return data;
  }

  function _templateObject2_41139b50577b11ebb66acdcaf78a5691() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <div class=\"link\">\n                  <a href=\"", "\" id=\"link\"> More Information &gt; </a>\n                </div>\n              "]);

    _templateObject2_41139b50577b11ebb66acdcaf78a5691 = function _templateObject2_41139b50577b11ebb66acdcaf78a5691() {
      return data;
    };

    return data;
  }

  function _templateObject_41139b50577b11ebb66acdcaf78a5691() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"container\">\n        <div class=\"svg_wrap\">\n          <div class=\"svg\">\n            <simple-icon icon=\"", "\" no-colorize></simple-icon>\n          </div>\n        </div>\n        <div class=\"message_wrap\">\n          <div class=\"main_message\" id=\"title\">", "</div>\n          <div class=\"secondary_message\"><slot name=\"message\"></slot></div>\n          ", "\n        </div>\n      </div>\n    "]);

    _templateObject_41139b50577b11ebb66acdcaf78a5691 = function _templateObject_41139b50577b11ebb66acdcaf78a5691() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  // register the iconset
  _simpleIconset.SimpleIconsetStore.registerIconset("stopnoteicons", "".concat((0, _simpleIconset.pathResolver)(meta.url), "lib/svgs/stopnoteicons/"));

  var iconObj = {
    "stopnoteicons:stop-icon": "Stop",
    "stopnoteicons:warning-icon": "Warning",
    "stopnoteicons:confirm-icon": "Confirmation",
    "stopnoteicons:book-icon": "Notice"
  };
  /**
   * `stop-note`
   * `A note that directs people to an action item of different warning levels`
   * @demo demo/index.html
   * @element stop-note
   */

  var StopNote = /*#__PURE__*/function (_remoteLinkBehavior) {
    babelHelpers.inherits(StopNote, _remoteLinkBehavior);

    var _super = _createSuper(StopNote);

    babelHelpers.createClass(StopNote, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_41139b50577b11ebb66acdcaf78a5691(), this.icon, this.title, this.url ? (0, _litElement.html)(_templateObject2_41139b50577b11ebb66acdcaf78a5691(), this.url) : "");
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject3_41139b50577b11ebb66acdcaf78a5691())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "stop-note";
      }
    }]);

    function StopNote() {
      var _this;

      babelHelpers.classCallCheck(this, StopNote);
      _this = _super.call(this);
      _this.url = null;
      _this.title = "";
      _this.icon = "stopnoteicons:stop-icon";
      return _this;
    }

    babelHelpers.createClass(StopNote, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "url") {
            _this2.remoteLinkURL = _this2[propName];
          }
        });
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(StopNote.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.remoteLinkTarget = this.shadowRoot.querySelector("#link");
      }
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */

    }, {
      key: "haxHooks",
      value: function haxHooks() {
        return {
          activeElementChanged: "haxactiveElementChanged",
          inlineContextMenu: "haxinlineContextMenu"
        };
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        // flag for HAX to not trigger active on changes
        var container = this.shadowRoot.querySelector("#title");
        var svgWrap = this.shadowRoot.querySelector(".svg_wrap");

        if (val) {
          svgWrap.addEventListener("click", this.haxtoggleIcon.bind(this));
          container.setAttribute("contenteditable", true);
        } else {
          svgWrap.removeEventListener("click", this.haxtoggleIcon.bind(this));
          container.removeAttribute("contenteditable");
          this.title = container.innerText;
        }

        return false;
      }
    }, {
      key: "haxinlineContextMenu",
      value: function haxinlineContextMenu(ceMenu) {
        ceMenu.ceButtons = [{
          icon: "image:style",
          callback: "haxtoggleIcon",
          label: "Toggle icon"
        }];
      }
    }, {
      key: "haxtoggleIcon",
      value: function haxtoggleIcon(e) {
        var iconAry = Object.keys(iconObj);
        var icon = iconAry[0];

        if (iconAry.lastIndexOf(this.icon) != iconAry.length - 1) {
          icon = iconAry[iconAry.lastIndexOf(this.icon) + 1];
        }

        this.icon = icon;
        return true;
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * Title Message
           */
          title: {
            type: String,
            reflect: true
          },

          /**
           * url to additional resources
           */
          url: {
            type: String
          },

          /**
           * Icon selected
           */
          icon: {
            type: String,
            reflect: true
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          contentEditable: true,
          gizmo: {
            title: "Stop Note",
            description: "A message to alert readers to specific directions.",
            icon: "icons:report",
            color: "orange",
            groups: ["Education", "Content"],
            handles: [{
              type: "text",
              title: "label"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "Enter title for stop-note.",
              inputMethod: "textfield",
              required: true
            }, {
              property: "url",
              title: "URL",
              description: "Enter an external url.",
              inputMethod: "haxupload",
              required: true
            }, {
              property: "icon",
              title: "Action Icon",
              description: "Icon used for stop-note",
              inputMethod: "select",
              options: iconObj
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["colors"]
          },
          demoSchema: [{
            tag: "stop-note",
            properties: {
              title: "Hold up there"
            },
            content: '<p slot="message"><strong>Read these important things!</strong>\n</p>\n'
          }, {
            tag: "stop-note",
            properties: {
              title: "Warning",
              icon: "stopnoteicons:warning-icon"
            },
            content: '<p slot="message">You can write any warning message you want here.</p>\n'
          }]
        };
      }
    }]);
    return StopNote;
  }((0, _remoteLinkBehavior2.remoteLinkBehavior)((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement)));

  _exports.StopNote = StopNote;
  window.customElements.define(StopNote.tag, StopNote);
});