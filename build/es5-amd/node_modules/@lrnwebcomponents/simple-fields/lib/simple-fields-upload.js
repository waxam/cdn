define(["exports", "require", "../../../lit-element/lit-element.js", "../../simple-colors/simple-colors.js", "../../simple-picker/simple-picker.js", "./simple-fields-field.js", "../../../@vaadin/vaadin-upload/vaadin-upload.js"], function (_exports, _require, _litElement, _simpleColors, _simplePicker, _simpleFieldsField, _vaadinUpload) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsUpload = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_6d641700d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <fieldset id=\"fieldset\">\n        <legend id=\"label\" ?hidden=\"", "\">", "</legend>\n        <div>\n          <simple-picker\n            id=\"picker\"\n            aria-label=\"Source...\"\n            required\n            value=\"", "\"\n            @value-changed=\"", "\"\n            .options=\"", "\"\n          >\n          </simple-picker>\n          <simple-fields-field\n            id=\"url\"\n            ?hidden=\"", "\"\n            value=\"", "\"\n            @value-changed=\"", "\"\n            label=\"URL\"\n            type=\"url\"\n            auto-validate=\"\"\n          ></simple-fields-field>\n          <vaadin-upload\n            capture\n            form-data-name=\"file-upload\"\n            ?hidden=\"", "\"\n            id=\"fileupload\"\n            @upload-before=\"", "\"\n            @upload-response=\"", "\"\n          ></vaadin-upload>\n          <div id=\"camerahole\" ?hidden=\"", "\"></div>\n          <div id=\"voicerecorder\" ?hidden=\"", "\"></div>\n          <div id=\"description\" ?hidden=\"", "\">\n            ", "\n          </div>\n        </div>\n      </fieldset>\n    "]);

    _templateObject2_6d641700d34d11ea880ba1e93364c49c = function _templateObject2_6d641700d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_6d641700d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          visibility: visible;\n          transition: 0.3s all ease;\n          box-sizing: border-box;\n          pointer-events: all;\n          overflow: visible;\n          font-family: var(--simple-fields-font-family, sans-serif);\n          --simple-camera-snap-width: 100px;\n          --simple-camera-snap-height: calc(100px * 9 / 16);\n          --simple-camera-snap-color: var(--simple-fields-color, black);\n          --simple-camera-snap-background: var(\n            --simple-fields-background-color,\n            #fff\n          );\n          --simple-camera-snap-border-radius: 2px;\n          --lumo-font-family: var(--simple-fields-font-family, sans-serif);\n          --lumo-error-color: var(--simple-fields-error-color, #dd2c00);\n          --lumo-primary-font-color: var(--simple-fields-color, black);\n          --lumo-base-color: var(--simple-fields-background-color, #fff);\n          --lumo-primary-contrast-color: var(\n            --simple-fields-background-color,\n            #fff\n          );\n          --lumo-primary-color: var(--simple-fields-color, black);\n          --lumo-dark-primary-color: ar(--simple-fields-color, black);\n          --lumo-light-primary-color: var(--simple-fields-color, black);\n          --lumo-primary-text-color: var(--simple-fields-color, black);\n          --lumo-body-text-color: var(--simple-fields-color, black);\n          --lumo-header-text-color: var(--simple-fields-color, black);\n          --lumo-secondary-text-color: var(--simple-fields-color, black);\n          --lumo-disabled-text-color: var(--simple-fields-border-color, #999);\n          color: var(--simple-fields-color, black);\n          background-color: var(--simple-fields-background-color, #fff);\n        }\n        vaadin-upload[dragover] {\n          border-color: var(--simple-colors-default-theme-accent-3, #77e2ff);\n        }\n        vaadin-upload-file {\n          --disabled-text-color: #var(--simple-fields-border-color, #999);\n        }\n        :host(:last-of-type) {\n          margin-bottom: 0;\n        }\n        #description {\n          font-family: var(--simple-fields-detail-font-family, sans-serif);\n          font-size: var(--simple-fields-detail-font-size, 12px);\n          line-height: var(--simple-fields-detail-line-height, 22px);\n        }\n        fieldset {\n          padding: var(--simple-fields-margin-small, 8px)\n            var(--simple-fields-margin, 16px);\n          margin: var(--simple-fields-margin-small, 8px) 0\n            var(--simple-fields-margin, 16px);\n          border: 1px solid var(--simple-fields-border-color-light, #ccc);\n          border-radius: var(--simple-fields-border-radius, 2px);\n          transition: all 0.3s ease-in-out;\n        }\n        fieldset > div {\n          display: flex;\n          flex-wrap: wrap;\n          align-items: center;\n          justify-content: space-between;\n        }\n        fieldset > div > *:not(#picker) {\n          flex: 1 1 auto;\n        }\n        #label {\n          font-family: var(--simple-fields-font-family, sans-serif);\n          font-size: var(--simple-fields-font-size, 16px);\n          line-height: var(--simple-fields-line-height, 22px);\n        }\n        :host([error]) #label {\n          color: var(--simple-fields-error-color, #dd2c00);\n          transition: all 0.3s ease-in-out;\n        }\n        #picker {\n          margin-bottom: 0;\n          margin-right: 5px;\n        }\n        vaadin-upload {\n          padding: 5px;\n          margin: 0;\n        }\n        simple-camera-snap {\n          position: relative;\n          --simple-camera-snap-button-container-position: absolute;\n          --simple-camera-snap-button-container-bottom: 2px;\n          --simple-camera-snap-button-container-z-index: 5;\n          --simple-camera-snap-button-border-radius: 100%;\n          --simple-camera-snap-button-opacity: 0.7;\n        }\n      "]);

    _templateObject_6d641700d34d11ea880ba1e93364c49c = function _templateObject_6d641700d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `simple-fields-upload` takes in a JSON schema of type array and builds a form,
   * exposing a `value` property that represents an array described by the schema.
   *
   * @group simple-fields
   * @element simple-fields-upload
   * @extends a11y-tab
   * @extends simple-fields-fieldset
   */
  var SimpleFieldsUpload =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(SimpleFieldsUpload, _SimpleColors);
    babelHelpers.createClass(SimpleFieldsUpload, null, [{
      key: "tag",
      get: function get() {
        return "simple-fields-upload";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload), "styles", this)), [(0, _litElement.css)(_templateObject_6d641700d34d11ea880ba1e93364c49c())]);
      }
      /**
       * HTMLElement life cycle
       */

    }]);

    function SimpleFieldsUpload() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsUpload);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFieldsUpload).call(this));
      _this.label = null;
      _this.noCamera = false;
      _this.options = []; // @todo leave this off until we can do more testing
      // the wiring is all there but the UI pattern is not

      _this.noVoiceRecord = true;
      return _this;
    }
    /**
     * LitElement life cycle - render callback
     */


    babelHelpers.createClass(SimpleFieldsUpload, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_6d641700d34d11ea880ba1e93364c49c(), !this.label, this.label, this.option, this.optionChanged, this.options, this.option !== "url", this.value || "", this.valueChanged, this.option !== "fileupload", this._fileAboutToUpload, this._fileUploadResponse, this.option !== "selfie", this.option !== "audio", !this.description, this.description);
      }
    }, {
      key: "optionChanged",
      value: function optionChanged(e) {
        this.option = e.detail.value; // make sure there's not null here, possible when dynamically  built

        if (e.detail.value == null || e.detail.value == "null") {
          if (this.options && this.options[0] && this.options[0][0] && this.options[0][0].value) {
            this.option = this.options[0][0].value;
          }
        }
      }
    }, {
      key: "valueChanged",
      value: function valueChanged(e) {
        this.value = e.detail.value;
      }
      /**
       * LitElement life cycle - properties changed callback
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          // notify
          if (propName == "value") {
            _this2.dispatchEvent(new CustomEvent("value-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "_fileAboutToUpload",

      /**
       * Respond to uploading a file
       */
      value: function _fileAboutToUpload(e) {
        this.dispatchEvent(new CustomEvent("upload-before", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: e.detail
        }));
      }
      /**
       * Respond to successful file upload, now inject url into url field and
       * do a gizmo guess from there!
       */

    }, {
      key: "_fileUploadResponse",
      value: function _fileUploadResponse(e) {
        // set the value of the url which will update our URL and notify
        this.shadowRoot.querySelector("#url").value = item.url;
        this.dispatchEvent(new CustomEvent("upload-response", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: e.detail
        }));
      }
      /**
       * Set the input options as far as url, upload, or webcam input
       */

    }, {
      key: "_setInputOptions",
      value: function _setInputOptions() {
        // hide the button if this environment can't support it anyway
        var options = [[{
          alt: "URL",
          icon: "icons:link",
          value: "url"
        }], [{
          alt: "Upload",
          icon: "icons:file-upload",
          value: "fileupload"
        }]];

        if (!navigator.mediaDevices || this.noCamera) {
          this.shadowRoot.querySelector("#camerahole").style.display = "none";
        } else {
          options.push([{
            alt: "Camera",
            icon: "image:photo-camera",
            value: "selfie"
          }]);
        }

        if (!navigator.mediaDevices || this.noVoiceRecord) {
          this.shadowRoot.querySelector("#voicerecorder").style.display = "none";
        } else {
          /*options.push([
            {
              alt: "Audio",
              icon: "hardware:keyboard-voice",
              value: "audio"
            }
          ]);*/
        }

        return options;
      }
      /**
       * LitElement
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsUpload.prototype), "firstUpdated", this).call(this, changedProperties);
        } // test on load for if we have a media device


        this.options = babelHelpers.toConsumableArray(this._setInputOptions()); // default to URL if we have a value of any kind

        if (this.value) {
          this.option = "url";
        } else {
          this.option = "fileupload";
        }

        this.shadowRoot.querySelector("#picker").addEventListener("change", function (e) {
          if (e && e.detail && e.detail.value === "selfie") _this3._takeSelfie(e);
          if (e && e.detail && e.detail.value === "audio") _this3._voiceRecorder(e);
        });
      }
      /**
       * We got a new photo
       */

    }, {
      key: "__newPhotoShowedUp",
      value: function __newPhotoShowedUp(e) {
        var file = new File([e.detail.raw], "headshot" + e.timeStamp + ".jpg");

        this.shadowRoot.querySelector("#fileupload")._addFile(file);
      }
      /**
       * We got a new photo
       */

    }, {
      key: "__newAudioShowedUp",
      value: function __newAudioShowedUp(e) {
        var file = new File([e.detail.value], "voice-memo" + e.timeStamp + ".mp3");

        this.shadowRoot.querySelector("#fileupload")._addFile(file);
      }
      /**
       * Invoke the camera to set itself up
       */

    }, {
      key: "_takeSelfie",
      value: function _takeSelfie(e) {
        if (!this.camera) {
          new Promise(function (res, rej) {
            return _require.default(["../../simple-login/lib/simple-camera-snap.js"], res, rej);
          });
          this.camera = document.createElement("simple-camera-snap");
          this.camera.autoplay = true;
          this.camera.addEventListener("simple-camera-snap-image", this.__newPhotoShowedUp.bind(this));
          this.shadowRoot.querySelector("#camerahole").appendChild(this.camera);
        }
      }
    }, {
      key: "_voiceRecorder",
      value: function _voiceRecorder(e) {
        if (!this.voice) {
          new Promise(function (res, rej) {
            return _require.default(["../../voice-recorder/voice-recorder.js"], res, rej);
          });
          this.voice = document.createElement("voice-recorder");
          this.voice.addEventListener("voice-recorder-recording", this.__newAudioShowedUp.bind(this));
          this.shadowRoot.querySelector("#voicerecorder").appendChild(this.voice);
        }
      }
      /**
       * Helper to take a multi-dimensional object and convert
       * it's reference into the real value. This allows for variable input defined
       * in a string to actually hit the deeper part of an object structure.
       */

    }, {
      key: "_resolveObjectPath",
      value: function _resolveObjectPath(path, obj) {
        return path.split(".").reduce(function (prev, curr) {
          return prev ? prev[curr] : null;
        }, obj || self);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          label: {
            type: String
          },
          description: {
            type: String
          },
          value: {
            type: String
          },
          option: {
            type: String
          },
          options: {
            type: Array
          },

          /**
           * Used when we want to ensure there is not a web cam option like video upload.
           */
          noCamera: {
            type: Boolean,
            attribute: "no-camera"
          },

          /**
           * No Voice Recording
           */
          noVoiceRecord: {
            type: Boolean,
            attribute: "no-voice-record"
          }
        };
      }
    }]);
    return SimpleFieldsUpload;
  }(_simpleColors.SimpleColors);

  _exports.SimpleFieldsUpload = SimpleFieldsUpload;
  window.customElements.define(SimpleFieldsUpload.tag, SimpleFieldsUpload);
});