define(["exports", "require", "../../../lit-element/lit-element.js", "./simple-fields-container.js", "./simple-fields-fieldset.js", "./simple-fields-array.js"], function (_exports, _require, _litElement, _simpleFieldsContainer, _simpleFieldsFieldset, _simpleFieldsArray) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsLite = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_944a46b0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-family: var(--simple-fields-font-family, sans-serif);\n          font-family: var(--simple-fields-detail-font-family, sans-serif);\n          font-size: var(--simple-fields-font-size, 16px);\n          font-size: var(--simple-fields-detail-font-size, 12px);\n          background: var(--simple-fields-background-color, white);\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_944a46b0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_944a46b0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_944a46b0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"schema-fields\" aria-live=\"polite\">\n        <slot></slot>\n      </div>\n    "]);

    _templateObject_944a46b0c96f11ea8be5e1d5fe7ec787 = function _templateObject_944a46b0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `simple-fields-lite`
   * Uses JSON Schema of fields to display a series of fields
   * 
  ### Styling
  `<simple-fields-lite>` provides following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|--------
  `--simple-fields-margin` | vertical margin around container | 16px
  `--simple-fields-margin-small` | smaller vertical margin above field itself | 8px
  `--simple-fields-border-radius` | default border-radius | 2px
  `--simple-fields-color` | text color | black
  `--simple-fields-background-color` | background color | white
  `--simple-fields-error-color` | error text color | #dd2c00
  `--simple-fields-accent-color` | accent text/underline color | #3f51b5
  `--simple-fields-border-color` | border-/underline color | #999
  
  #### Field text
  Custom property | Description | Default
  ----------------|-------------|--------
  `--simple-fields-font-size` | font-size of field | 16px
  `--simple-fields-font-family` | font-size of field | sans-serif
  `--simple-fields-line-height` | line-height of field | 22px
  
  #### Detail text
  Custom property | Description | Default
  ----------------|-------------|--------
  `--simple-fields-detail-font-size` | font-size of field details | 12px
  `--simple-fields-detail-font-family` | font-size of field details | sans-serif
  `--simple-fields-detail-line-height` | line-height of field details | 22px
  
  #### Disabled Fields
  Custom property | Description | Default
  ----------------|-------------|--------
  `--simple-fields-disabled-color` | disabled text color | #999
  `--simple-fields-disabled-opacity` | opacity for disabled field | 0.7
  
  ### JSON Schema Format
  This element accepts JSON schema with additional features noted in the example below:
  ```
  {
    $schema: "http://json-schema.org/schema#",
    title: "Store",
    type: "object",
    format: "tabs",                                 //default object behavior can be overridden by format
    required: [ "name", "email" ],
      properties: {
        settings: {
          title: "Settings",
          description: "Configure the following.",
          type: "object",
          format: "tabs",
          properties: {
            "basic-input": {
              title: "Basic input page",
              description: "Basic contact settings",
              type: "object",
              properties: {
                branch: {
                  title: "Branch",
                  type: "string"
                },
                  name: {
                    title: "Name",
                    type: "string"
                  },
                  address: {
                    title: "Address",
                    type: "string",
                    minLength: 3
                  },
                  city: {
                    title: "City",
                    type: "string",
                    minLength: 3
                  },
                  province: {
                    title: "Province",
                    type: "string",
                    minLength: 2
                  },
                  country: {
                    title: "Country",
                    type: "string",
                    minLength: 2
                  },
                  postalCode: {
                    title: "Postal/Zip Code",
                    type: "string",
                    pattern:
                      "[a-zA-Z][0-9][a-zA-Z]\\s*[0-9][a-zA-Z][0-9]|[0-9]{5}(-[0-9]{4})?"
                  },
                  email: {
                    title: "Email",
                    type: "string",
                    pattern:
                      "(?:^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,4}$)|(?:^$)"
                  },
                  website: {
                    title: "Website",
                    type: "string",
                    format: "uri"
                  },
                  establishedDate: {
                    title: "Established Date",
                    type: "string",
                    format: "date"
                  },
                  closedDate: {
                    title: "Closed Date",
                    type: ["string", "null"],
                    format: "date"
                  }
                }
              },
              arrays: {
              title: "Basic arrays page",
              description: "Demonstrates arrays",
              type: "object",
              properties: {
                phoneNumbers: {
                  title: "Phone numbers",
                  description: "List phone numbers and type of number.",
                  type: "array",
                  items: {
                    type: "object",
                    previewBy: ["phoneNumber"],                               //simple-fields-array allows a preview field 
                                                                              //for progressive disclosure of array items
                    properties: {
                      type: {
                        title: "Type",
                        type: "string"
                      },
                      phoneNumber: {
                        title: "Phone Number",
                        type: "string"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  ```
  
  ### Configuring schemaConversion Property
  You can customise elements from JSON schema conversion by setting `schemaConversion` property.
  ```
  type: {                                       //For properties in "this.schema", define elements based on a property's "type"
    object: {                                   //Defines element used when property's "type" is an "object"
      format: {                                 //Optional: define elements for "object" properties by "format"
        "tabs": {                               //Defines element used for object properties when "format" is "tabs"
          element: "a11y-tabs"                  //Element to create, eg. "paper-input", "select", "simple-fields-array", etc.
          descriptionProperty: "description"    //Optional: element's property that sets its description, e.g. "description"
          descriptionSlot: "description"        //Optional: element's slot that contains its description, e.g. "description"
          errorProperty: "error"                //Optional: element's property that sets its error status, e.g. "error"
          errorChangedProperty: "error"         //Optional: event element fires when error status changes, e.g. "error-changed"
          errorMessageProperty: "errorMessage"  //Optional: element's property that sets its error message, e.g. "errorMessage"
          errorMessageSlot: "errorMessage"      //Optional: element's slot that contains its error message, e.g. "errorMessage"
          labelProperty: "label"                //Optional: element's property that sets its label, e.g. "label"
          labelSlot: "label"                    //Optional: element's slot that contains its label, e.g. "label"
          valueProperty: "value"                //Optional: element's property that gets its value, e.g. "value" or "checked"
          setValueProperty: "value"             //Optional: element's property that sets its value, e.g. "value" or "checked" (default is same as valueProperty)
          valueChangedProperty: "value-changed" //Optional: event element fires when value property changes, e.g. "value-changed" or "click"
          valueSlot: ""                         //Optional: element's slot that's used to set its value, e.g. ""
          description: ""                       //Optional: element that contains description, e.g. "p", "span", "paper-tooltip", etc.
          child: {                              //Optional: child elements to be appended
            element: "a11y-tab"                 //Optional: type of child element, eg. "paper-input", "select", "simple-fields-array", etc.
            attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion
              disabled: true                    //Example: sets disabled to true  
            } 
            properties: {                       //Optional: sets child element's attributes based on this.schema properties
              icon: "iconName"                  //Example: sets child element's icon property to this.schema property's iconName 
            }, 
            slots: {                            //Optional: inserts schema properties in child element's slots
              label: "label",                   //Example: places schema property's label into child element's label slot
              "": "description"                 //Example: places schema property's description into child element's unnamed slot
            } 
          },
          attributes: {},
          properties: {},
          slots: {}
        }
      },
      defaultSettings: {                        //Default element used for object properties
        element: ""
        label: ""
        description: ""     
        attributes: {}       
        properties: {}       
        slots: {}           
      }
    }
  }
  ``` 
  
   * @element simple-fields-lite
   * @demo ./demo/lite.html Demo
   */
  var SimpleFieldsLite =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(SimpleFieldsLite, _LitElement);
    babelHelpers.createClass(SimpleFieldsLite, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_944a46b0c96f11ea8be5e1d5fe7ec787());
      } // properties available to the custom element for data binding

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_944a46b0c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsLite), "properties", this), {
          /*
           * Disables autofocus on fields.
           */
          disableAutofocus: {
            type: Boolean
          },

          /*
           * Error messages by field name,
           * eg. `{ contactinfo.email: "A valid email is required." }`
           */
          error: {
            type: Object
          },

          /*
           * Language of the fields.
           */
          language: {
            type: String,
            attribute: "lang",
            reflect: true
          },

          /*
           * resource link
           */
          resources: {
            type: Object
          },

          /*
           * Fields schema.
           * _See [Fields Schema Format](fields-schema-format) above._
           */
          schema: {
            type: Object
          },

          /**
           * Conversion from JSON Schema to HTML form elements.
           * _See [Configuring schemaConversion Property](configuring-the-schemaConversion-property) above._
           */
          elementizer: {
            type: Object,
            attribute: "elementizer",
            reflect: true
          },

          /*
           * value of fields
           */
          value: {
            type: Object
          },

          /*
           * form elements by id and config data in schema
           */
          __formElements: {
            type: Object
          },

          /*
           * list form elements in order and config data in schema
           */
          __formElementsArray: {
            type: Array
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-fields-lite";
      }
    }]);

    function SimpleFieldsLite() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsLite);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFieldsLite).call(this));
      _this.disableAutofocus = false;
      _this.language = "en";
      _this.resources = {};
      _this.schemaConversion;
      _this.__formElements = {};
      _this.__formElementsArray = [];
      _this.schema = {};
      _this.value = {};
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/paper-icon-button/paper-icon-button.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsLite, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this._clearForm();

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsLite.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "error" && _this2.error !== oldValue) _this2._errorChanged();
          if (["schema", "schemaConversion"].includes(propName)) _this2._schemaChanged(_this2.schema, oldValue);
          if (propName === "value") _this2._valueChanged(_this2.value, oldValue);
        });
      }
      /**
       * form elements by id
       *
       * @readonly
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "updateSchema",

      /**
       * updates the schema
       */
      value: function updateSchema() {
        this._formFieldsChanged();
      }
      /**
       * clears and rebuilds form
       */

    }, {
      key: "rebuildForm",
      value: function rebuildForm() {
        this._clearForm();

        this._addToForm();

        var firstField = this.__formElementsArray && this.__formElementsArray[0] && this.__formElementsArray[0].field ? this.__formElementsArray[0].field : false;
        if (firstField) firstField.autofocus = !this.disableAutofocus;
      }
      /**
       * converts schema properties to HTML elements and appends them
       *
       * @param {*} [schema=this.schema] schema or subschema containing properties
       * @param {*} [target=this] parent where HTML elements will be appended
       * @param {string} [prefix=""] prefix for nest fields
       * @param {*} config schemaConversion configuration for property
       */

    }, {
      key: "_addToForm",
      value: function _addToForm() {
        var _this3 = this;

        var schema = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.schema;
        var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        var prefix = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
        var config = arguments.length > 3 ? arguments[3] : undefined;
        var schemaProps = schema.properties,
            required = schema.required,
            schemaKeys = Object.keys(schemaProps || {});
        schemaKeys.forEach(function (key) {
          var schemaProp = schemaProps[key],
              data = config || _this3._convertSchema(schemaProp);

          if (data && data.element) {
            var id = "".concat(prefix).concat(key),
                element = document.createElement(data.element),
                wrapper = schemaProp.properties || schemaProp.items || schemaProp.noWrap || data.noWrap ? element : document.createElement("simple-fields-container"),
                value = _this3._getValue("".concat(prefix).concat(key));

            var label = schemaProp.label || schemaProp.title || schemaProp.description || key,
                desc = schemaProp.description && (schemaProp.label || schemaProp.title) ? schemaProp.description : undefined,
                onValueChanged = schemaProp.onValueChanged,
                errorEvent = schemaProp.onErrorChanged;
            data.labelSlot = schema.labelSlot || data.labelSlot;
            data.descriptionSlot = schema.descriptionSlot || data.descriptionSlot;
            data.errorMessageSlot = schema.errorMessageSlot || data.errorMessageSlot;
            data.valueSlot = schema.valueSlot || data.valueSlot;
            data.labelProperty = schema.labelProperty || data.labelProperty || "label";
            data.descriptionProperty = schema.descriptionProperty || data.descriptionProperty || "description";
            data.valueProperty = schema.valueProperty || data.valueProperty || "value";
            data.setValueProperty = schema.setValueProperty || data.setValueProperty || data.valueProperty;
            data.valueChangedProperty = schema.valueChangedProperty || data.valueChangedProperty || "".concat(data.valueProperty, "-changed");
            data.errorProperty = schema.errorProperty || data.errorProperty || "error";
            data.errorChangedProperty = schema.errorChangedProperty || data.errorChangedProperty || "".concat(data.errorProperty, "-changed");
            data.errorMessageProperty = schema.errorMessageProperty || data.errorMessageProperty || "errorMessage";
            element.resources = _this3.resources;
            element.id = id;
            element.setAttribute("name", id);
            element.setAttribute("language", _this3.language);
            if (schemaProp.options) element.options = schemaProp.options;
            if (schemaProp.itemsList) element.itemsList = schemaProp.itemsList;
            if (required && required.includes(key)) element.setAttribute("required", true);

            if (schemaProp.disabled) {
              element.disabled = true;
              wrapper.disabled = true;
            }

            if (schemaProp.hidden) {
              element.hidden = true;
              wrapper.hidden = true;
            }

            if (schemaProp.readonly) {
              element.hidden = true;
              wrapper.hidden = true;
            }

            _this3._configElement(wrapper, label, data.labelProperty, data.labelSlot);

            _this3._configElement(wrapper, desc, data.descriptionProperty, data.descriptionSlot); //handle data type attributes


            Object.keys(data.attributes || {}).forEach(function (attr) {
              if (babelHelpers.typeof(data.attributes[attr]) !== undefined && data.attributes[attr] !== null) {
                element.setAttribute(attr, data.attributes[attr]);
              }
            }); //handle schema properties

            Object.keys(data.properties || {}).forEach(function (prop) {
              if (data.properties[prop] && schemaProp[prop]) {
                element[data.properties[prop]] = schemaProp[prop];
              }
            }); //handle data type slots

            Object.keys(data.slots || {}).forEach(function (slot) {
              if (data.slots[slot] && schemaProp[data.slots[slot]]) {
                data.slots[slot].split(/[\s,]/).forEach(function (field) {
                  var span = document.createElement("span");
                  span.slot = slot;
                  span.innerHTML = schemaProp[field];
                  element.appendChild(span);
                });
              }
            });
            if (target.slots && target.slots[key]) wrapper.slot = target.slots[key];
            target.appendChild(wrapper); //handles arrays

            if (schemaProp.type === "array") {
              _this3._addArrayItems(value, data.child, schemaProp, element);
            } //handles objects
            else if (schemaProp.properties) {
                _this3._addToForm(schemaProp, element, "".concat(element.id, "."), data.child);
              } else {
                if (element !== wrapper) {
                  element.slot = "field";
                  wrapper.appendChild(element);
                }

                if (babelHelpers.typeof(value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) || schemaProp.type === "boolean") _this3._configElement(element, value, data.setValueProperty, data.valueSlot);
                element.addEventListener(data.valueChangedProperty, function (e) {
                  return _this3._handleChange(element, data.valueProperty, e);
                });
                wrapper.addEventListener(data.errorChangedProperty, function (e) {
                  var error = _this3._deepClone(_this3.error || {});

                  if (wrapper[data.errorProperty]) {
                    error[id] = wrapper[data.errorMessageProperty] || "";
                  } else if (error && error[id]) {
                    delete error[id];
                  }

                  _this3.error = error;
                  if (errorEvent) errorEvent(e);
                });
              }

            _this3.__formElementsArray.push({
              id: id,
              field: wrapper,
              data: data
            });

            _this3.__formElements[id] = {
              element: element,
              field: wrapper
            };
          }
        });
      }
      /**
       * sets field or field wrapper element's slot ot property to a value
       *
       * @param {string} propName property name
       * @param {string} slotName slot name if any
       * @param {object} target element to set
       * @param {*} value
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "_configElement",
      value: function _configElement(target, value, propName) {
        var slotName = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

        if (slotName) {
          var span = document.createElement("span");
          span.slot = slotName;
          if (value) span.innerHTML = value;
          if (target) target.querySelectorAll("[slot=".concat(slotName, "]")).forEach(function (el) {
            return el.remove();
          });
          target.appendChild(span);
        } else {
          target[propName] = value;
        }
      }
      /**
       *
       *
       * @param {*} schema
       * @param {*} previewBy
       * @param {*} element
       * @param {*} parent
       * @param {*} [value={}]
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "_insertArrayItem",
      value: function _insertArrayItem(schema, previewBy, element, parent, value, index) {
        var items = this._getValue(parent.name),
            length = items ? items.length : 0;

        if (!items) this._setValue(parent.name, []);
        index = index || index === 0 ? index : length;
        var subschema = {
          properties: {}
        };
        subschema.properties[index] = this._addArrayItem(index, schema, previewBy);

        this._setValue("".concat(parent.name, ".").concat(index), value);

        this._addToForm(subschema, parent, "".concat(parent.id, "."), element);
      }
      /**
       *
       *
       * @param {*} value
       * @param {*} element
       * @param {*} schema
       * @param {*} parent
       */

    }, {
      key: "_addArrayItems",
      value: function _addArrayItems(value, element, schema, parent) {
        var _this4 = this;

        var propNames = Object.keys(schema.items.properties || {}),
            previewBy = schema.previewBy || (propNames.length > 0 ? [propNames[0]] : undefined);
        value = value || [];
        value.forEach(function (item, i) {
          _this4._insertArrayItem(schema, previewBy, element, parent, item, i);
        });
        parent.addEventListener("add", function (e) {
          _this4._insertArrayItem(schema, previewBy, element, parent, {});
        });
        parent.addEventListener("remove", function (e) {
          var id = e.detail.id,
              //temp = [],
          vals = _this4._getValue(parent.name) || [],
              index = id.replace("".concat(parent.name, "."), "");
          vals.splice(parseInt(index), 1);
          _this4.__formElementsArray = _this4.__formElementsArray.filter(function (field) {
            return field.id.indexOf(parent.name) === 0;
          });
          parent.innerHTML = "";
          vals.forEach(function (item, i) {
            return _this4._insertArrayItem(schema, previewBy, element, parent, item, i);
          });

          _this4._setValue("".concat(parent.name), vals);

          parent.focus(parseInt(index) - 1);
        });
      }
      /**
       * adds an array item given an array item value and array item schema
       * @param {integer} i index of array item
       * @param {object} schema array item's schema
       * @param {object} parent array element
       * @param {object} item array item element
       */

    }, {
      key: "_addArrayItem",
      value: function _addArrayItem(counter, schema, previewBy) {
        var item = this._deepClone(schema.items);

        item.label = "".concat(parseInt(counter) + 1);
        item.previewBy = previewBy;
        return item;
      }
      /**
       * clears form
       */

    }, {
      key: "_clearForm",
      value: function _clearForm() {
        this.querySelectorAll("*").forEach(function (child) {
          return child.remove();
        });
        this.__formElementsArray = [];
      }
      /**
       * matches schema property to schemaConversion settings
       * @param {object} property schema property
       * @param {object} conversion section of schemaConversion to search
       * @param {object} settings closest current match's defaultSettings object
       * @returns {object}
       */

    }, {
      key: "_convertSchema",
      value: function _convertSchema(property) {
        var _this5 = this;

        var conversion = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.schemaConversion;
        var settings = arguments.length > 2 ? arguments[2] : undefined;
        var propKeys = Object.keys(property || {}),
            convKeys = Object.keys(conversion).filter(function (key) {
          return propKeys.includes(key);
        });
        if (conversion.defaultSettings) settings = this._deepClone(conversion.defaultSettings);
        convKeys.forEach(function (key) {
          var val = property[key],
              convData = conversion ? conversion[key] : undefined,
              convVal = !convData ? undefined : Array.isArray(val) ? convData[val[0]] : convData[val];
          if (convVal) settings = _this5._convertSchema(property, convVal, settings);
        });
        return settings;
      }
      /**
       * clones an object and all its subproperties
       * @param {object} o object to clone
       * @returns {object} cloned object
       */

    }, {
      key: "_deepClone",
      value: function _deepClone(o) {
        return JSON.parse(JSON.stringify(o));
      }
      /**
       * handles errors
       */

    }, {
      key: "_errorChanged",
      value: function _errorChanged() {
        var _this6 = this;

        this.formElementsArray.forEach(function (field) {
          var data = field.data || {},
              el = field.field,
              id = field.id;

          if (id && el && _this6.error) {
            var message = _this6.error[field.id] || false,
                error = _this6.error[field.id] ? true : false;
            if (!error) Object.keys(_this6.error || {}).forEach(function (key) {
              if (key.match(field.id)) {
                error = true;
                return;
              }
            });

            _this6._configElement(field.field, message, data.errorMessageProperty, data.errorMessageSlot);

            field.field[data.errorProperty] = error;
            field.field.setAttribute("aria-invalid", error);
          }
        });
      }
      /**
       * fires when value changes
       * @event value-changed
       */

    }, {
      key: "_fireValueChanged",
      value: function _fireValueChanged() {
        this.dispatchEvent(new CustomEvent("value-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Fires when form changes to set focus on the first field if this has auto-focus
       * @event fields-changed
       */

    }, {
      key: "_formFieldsChanged",
      value: function _formFieldsChanged(e) {
        this.dispatchEvent(new CustomEvent("fields-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * gets value of a property
       * @param {string} propName property to set
       * @returns {*}
       */

    }, {
      key: "_getValue",
      value: function _getValue(propName) {
        var path = propName.split("."),
            pointer = this.value;
        path.forEach(function (prop) {
          if (pointer && pointer[prop]) {
            pointer = pointer[prop];
          } else {
            pointer = undefined;
            return;
          }
        });
        return pointer;
      }
      /**
       * handles changes to fields
       * @param {object} element element that changed
       * @param {object} valueProperty
       */

    }, {
      key: "_handleChange",
      value: function _handleChange(element, valueProperty, e) {
        if (e && e.stopPropagation) e.stopPropagation();
        var id = element.id || element.getAttribute("id"),
            val = element[valueProperty];

        this._setValue(id, val);

        this.dispatchEvent(new CustomEvent("".concat(id, "-value-changed"), {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            id: id,
            element: element,
            value: val
          }
        }));

        this._fireValueChanged();
      }
      /**
       * updates form and fires event when schema changes
       * @param {object} newValue new value for schema
       * @param {object} oldValue old value for schema
       * @event schema-changed
       */

    }, {
      key: "_schemaChanged",
      value: function _schemaChanged(newValue, oldValue) {
        if (newValue && newValue !== oldValue) {
          this.rebuildForm();
          this.dispatchEvent(new CustomEvent("schema-changed", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
      /**
       * sets value of a property
       * @param {string} propName property to set
       * @param {*} propVal value of property
       */

    }, {
      key: "_setValue",
      value: function _setValue(propName, propVal) {
        var oldValue = this._deepClone(this.value),
            newValue = this.value,
            props = propName ? propName.split(".") : [],
            l = props.length;

        for (var i = 0; i < l - 1; i++) {
          var pointer = props[i];
          if (!newValue[pointer]) newValue[pointer] = {};
          newValue = newValue[pointer];
        }

        newValue[props[l - 1]] = propVal;

        this._valueChanged(this.value, oldValue);
      }
      /**
       * updates form  and fires event when value changes
       * @param {object} newValue new value for schema
       * @param {object} oldValue old value for schema
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(newValue, oldValue) {
        if (newValue && newValue !== oldValue) this._fireValueChanged();
      }
    }, {
      key: "formElements",
      get: function get() {
        return this.__formElements;
      }
      /**
       * list of form elements in order
       *
       * @readonly
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "formElementsArray",
      get: function get() {
        return this.__formElementsArray;
      }
      /**
       * gets JSON schema to form element conversion object
       *
       * @readonly
       * @memberof SimpleFields
       */

    }, {
      key: "schemaConversion",
      get: function get() {
        return this.elementizer || {
          defaultSettings: {
            element: "input",
            attributes: {
              type: "text"
            },
            properties: {
              minLength: "minlength",
              maxLength: "maxlength"
            }
          },
          type: {
            array: {
              defaultSettings: {
                element: "simple-fields-array",
                invalidProperty: "invalid",
                noWrap: true,
                descriptionProperty: "description",
                child: {
                  element: "simple-fields-array-item",
                  noWrap: true,
                  descriptionProperty: "description",
                  properties: {
                    previewBy: "previewBy"
                  }
                }
              }
            },
            boolean: {
              defaultSettings: {
                element: "input",
                valueProperty: "checked",
                valueChangedProperty: "click",
                attributes: {
                  type: "checkbox",
                  value: false
                }
              }
            },
            file: {
              defaultSettings: {
                element: "input",
                attributes: {
                  type: "url"
                }
              }
            },
            integer: {
              defaultSettings: {
                element: "input",
                attributes: {
                  autofocus: true,
                  step: 1,
                  type: "number"
                },
                properties: {
                  minimum: "min",
                  maximum: "max",
                  multipleOf: "step"
                }
              }
            },
            markup: {
              defaultSettings: {
                element: "textarea"
              }
            },
            number: {
              defaultSettings: {
                element: "input",
                attributes: {
                  autofocus: true,
                  type: "number"
                },
                properties: {
                  minimum: "min",
                  maximum: "max",
                  multipleOf: "step"
                }
              }
            },
            object: {
              defaultSettings: {
                element: "simple-fields-fieldset",
                noWrap: true,
                descriptionProperty: "description"
              }
            },
            string: {
              format: {
                "date-time": {
                  defaultSettings: {
                    element: "input",
                    attributes: {
                      autofocus: true,
                      type: "datetime-local"
                    }
                  }
                },
                time: {
                  defaultSettings: {
                    element: "input",
                    attributes: {
                      autofocus: true,
                      type: "time"
                    }
                  }
                },
                date: {
                  defaultSettings: {
                    element: "input",
                    attributes: {
                      autofocus: true,
                      type: "date"
                    }
                  }
                },
                email: {
                  defaultSettings: {
                    element: "input",
                    attributes: {
                      autofocus: true,
                      type: "email"
                    }
                  }
                },
                uri: {
                  defaultSettings: {
                    element: "input",
                    attributes: {
                      autofocus: true,
                      type: "url"
                    }
                  }
                }
              }
            }
          }
        };
      }
      /**
       * whether there are no errors
       *
       * @readonly
       * @memberof SimpleFieldsLite
       */

    }, {
      key: "valid",
      get: function get() {
        return !this.error || Object.keys(this.error === {}).length === 0;
      }
    }]);
    return SimpleFieldsLite;
  }(_litElement.LitElement);

  _exports.SimpleFieldsLite = SimpleFieldsLite;
  window.customElements.define(SimpleFieldsLite.tag, SimpleFieldsLite);
});