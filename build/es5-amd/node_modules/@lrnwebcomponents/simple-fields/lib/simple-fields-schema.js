define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsSchema = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_4f011520494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject2_4f011520494a11eab3124f20b4f7a7f7 = function _templateObject2_4f011520494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  function _templateObject_4f011520494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"schema-fields\" aria-live=\"polite\">\n        <slot></slot>\n      </div>\n    "]);

    _templateObject_4f011520494a11eab3124f20b4f7a7f7 = function _templateObject_4f011520494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  /**
   * `simple-fields-schema`
   * 
  ### Styling
  
  `<simple-fields-schema>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--simple-fields-schema-margin` | margin around the simple-fields-schema | 15px 0
   *
   * @demo ./demo/index.html
   * @customElement simple-fields-schema
   */
  var SimpleFieldsSchema =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(SimpleFieldsSchema, _LitElement);
    babelHelpers.createClass(SimpleFieldsSchema, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_4f011520494a11eab3124f20b4f7a7f7());
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_4f011520494a11eab3124f20b4f7a7f7())];
      }
    }]);

    function SimpleFieldsSchema() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsSchema);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFieldsSchema).call(this));
      _this.autofocus = false;
      _this.codeTheme = "vs-light-2";
      _this.dataTypes = {
        array: {
          component: "simple-fields-array",
          defaultValue: [],
          isFieldset: true
        },
        boolean: {
          component: "simple-fields-boolean",
          defaultValue: false
        },
        fieldset: {
          component: "simple-fields-fieldset",
          defaultValue: {},
          isFieldset: true
        },
        file: {
          component: "simple-fields-file",
          defaultValue: {}
        },
        integer: {
          component: "paper-input",
          defaultValue: ""
        },
        markup: {
          component: "simple-fields-markup",
          defaultValue: ""
        },
        number: {
          component: "paper-input",
          defaultValue: ""
        },
        object: {
          component: "simple-fields-fieldset",
          defaultValue: {},
          isFieldset: true
        },
        string: {
          component: "paper-input"
        },
        tabs: {
          component: "a11y-tabs",
          defaultValue: {},
          isFieldset: true
        }
      };
      _this.language = "en";
      _this.resources = {};
      _this.value = {};
      new Promise(function (res, rej) {
        return _require.default(["./lib/simple-fields-fieldset.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/simple-fields-array.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsSchema, [{
      key: "_getFormElement",
      value: function _getFormElement(property) {
        var _this2 = this;

        var parent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        var el = document.createElement(property.component.name),
            props = {
          label: property.label,
          schema: property.schema,
          schemaProperty: property,
          language: this.language,
          resources: this.resources
        },
            attr = {
          hidden: property.schema.hidden
        };
        Object.keys(props).forEach(function (key) {
          return el[key] = props[key];
        });
        Object.keys(attr).forEach(function (key) {
          if (props[key]) el.setAttribute(key, props[key]);
        });
        parent.append(el);
        /* gets nested fields for a fieldset */

        if (property.schema && property.schema.properties) property.schema.properties.forEach(function (child) {
          return _this2._getFormElement(child, el);
        });
      }
      /**
       * returns an array of properties for a given schema object
       * @param {object} target parent of nested properties
       * @returns {array} form properties
       */

    }, {
      key: "_getProperties",
      value: function _getProperties() {
        var _this3 = this;

        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.schema;
        var root = this;
        return Object.keys(target.properties || []).map(function (key) {
          var schema = target.properties[key],
              property = {
            name: key,
            schema: schema,
            label: schema.title || key,
            description: schema.description,
            component: schema.component || {}
          };

          if (!property.component.valueProperty) {
            property.component.valueProperty = "value";
          }

          if (!property.component.slot) {
            property.component.slot = "";
          }
          /* match the schema type to the correct data type */


          Object.keys(root.dataTypes).forEach(function (dataType) {
            if (Array.isArray(schema.type) && schema.type.indexOf(dataType) !== -1 || schema.type === dataType) {
              property.component.name = property.component.name || root.dataTypes[dataType].component;
              if (babelHelpers.typeof(schema.value) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) schema.value = root.dataTypes[dataType].defaultValue;
              property.value = schema.value;
              /* handle fieldsets by getting nested properties */

              if (root.dataTypes[dataType].isFieldset) {
                if (!schema.items || !schema.items.properties) schema.items = {
                  properties: schema.properties ? _this3._deepClone(schema.properties) : {}
                };

                if (schema.items && schema.items.properties) {
                  Object.keys(schema.items.properties).forEach(function (key) {
                    return schema.items.properties[key].value = schema.value[key];
                  });
                  property.schema.properties = _this3._getProperties(schema.items);
                }
              }

              return;
            }
          });
          if (!property.component.name) console.error("Unknown property type %s", schema.type);
          return property;
        });
      }
      /**
       * Updates a11y-collapse item when properties change
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        //observer: "error _errorChanged"
        //observer: "schema _schemaChanged notify"
        // value wizard notify
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "schema") _this4._schemaChanged(_this4.schema, oldValue);
        });
      }
      /**
       * clears a form or a fieldset container within a form
       * @param {object} el the element to remove
       * @param {*} parent the container where the field element exists
       */

    }, {
      key: "_clearForm",
      value: function _clearForm() {
        var container = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this;
      }
      /*if (typeof this.$ !== typeof undefined) {
        var formEl = container;
        while (formEl.firstChild) {
          this._removePropertyEl(formEl.firstChild, container);
        }
      }*/

      /**
       * clones an object and all its subproperties
       * @param {object} o the object to clone
       * @returns {object} the cloned object
       */

    }, {
      key: "_deepClone",
      value: function _deepClone(o) {
        return JSON.parse(JSON.stringify(o));
      }
      /**
       * updates the form when the schema changes
       * @param {object} newValue the new value for the schema
       * @param {object} oldValue the old value for the schema
       */

    }, {
      key: "_schemaChanged",
      value: function _schemaChanged(newValue, oldValue) {
        var _this5 = this;

        if (newValue && newValue !== oldValue) {
          this._clearForm();

          this.formProperties.forEach(function (property) {
            return _this5._getFormElement(property);
          }); //this.formProperties;
          //this._buildForm();
          //this._setValue();
          //fire schemaChanged
        }

        console.log("this._schemaChanged", this.formProperties);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this._clearForm();

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsSchema.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "formProperties",

      /**
       * returns form properties
       * @readonly
       * @returns {array} form properties
       */
      get: function get() {
        console.log("formProperties", this.schema, this.schema ? this._getProperties(this.schema) : []);
        return this.schema ? this._getProperties(this.schema) : [];
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-schema";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsSchema), "properties", this), {
          /**
           * automatically set focus on the first field if that field has autofocus
           */
          autofocus: {
            type: Boolean
          },

          /**
           * the name of the code-editor theme
           */
          codeTheme: {
            type: String
          },
          dataTypes: {
            type: Object
          },
          error: {
            type: Object
          },
          label: {
            type: String
          },
          language: {
            type: String,
            attribute: "lang",
            reflect: true
          },
          resources: {
            type: Object
          },
          schema: {
            type: Object
          },
          value: {
            type: Object
          },
          wizard: {
            type: Boolean
          }
        });
      }
    }]);
    return SimpleFieldsSchema;
  }(_litElement.LitElement);

  _exports.SimpleFieldsSchema = SimpleFieldsSchema;
  window.customElements.define(SimpleFieldsSchema.tag, SimpleFieldsSchema);
});