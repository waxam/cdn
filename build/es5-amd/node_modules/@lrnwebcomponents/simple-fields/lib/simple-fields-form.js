define(["exports", "../../../lit-element/lit-element.js", "./simple-fields-form-lite.js", "../simple-fields.js"], function (_exports, _litElement, _simpleFieldsFormLite, _simpleFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsForm = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_6d5b1650d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <form>\n        <slot name=\"before\"></slot>\n        <simple-fields\n          id=\"sf\"\n          .autofocus=\"", "\"\n          language=\"", "\"\n          .resources=\"", "\"\n          .schema=\"", "\"\n          .fields=\"", "\"\n          .schematizer=\"", "\"\n          .elementizer=\"", "\"\n          .value=\"", "\"\n          @value-changed=\"", "\"\n        >\n        </simple-fields>\n        <slot></slot>\n      </form>\n    "]);

    _templateObject_6d5b1650d34d11ea880ba1e93364c49c = function _templateObject_6d5b1650d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `simple-fields-form`
   * binding and submission capabilities on top of simple-fields
   *
   * @group simple-fields
   * @element simple-fields-form
   * @demo ./demo/form.html
   */
  var SimpleFieldsForm =
  /*#__PURE__*/
  function (_SimpleFieldsFormLite) {
    babelHelpers.inherits(SimpleFieldsForm, _SimpleFieldsFormLite);

    function SimpleFieldsForm() {
      babelHelpers.classCallCheck(this, SimpleFieldsForm);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFieldsForm).apply(this, arguments));
    }

    babelHelpers.createClass(SimpleFieldsForm, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_6d5b1650d34d11ea880ba1e93364c49c(), !this.disableAutofocus, this.language || "", this.resources, this.schema, this.fields, this.fieldsConversion, this.elementizer, this.value, this._valueChanged);
      }
      /**
       * applies loaded datda to simple-fields-lite
       *
       * @memberof SimpleFieldsFormLite
       */

    }, {
      key: "_applyLoadedData",
      value: function _applyLoadedData() {
        if (this.loadResponse.data.schema) {
          this.schema = this.loadResponse.data.schema;
        } else if (this.loadResponse.data.fields) {
          this.fields = this.loadResponse.data.fields;
        }

        if (this.loadResponse.data.value) this.value = this.loadResponse.data.value;
      }
      /**
       * properties specific to field function
       *
       * @readonly
       * @static
       * @memberof SimpleFieldsFormLite
       */

    }, {
      key: "defaultSchemaConversion",

      /**
       * gets default schemaConversion so parts of it can be overridden easily
       *
       * @readonly
       * @memberof SimpleFields
       */
      get: function get() {
        return _simpleFields.SimpleFields.defaultSchemaConversion;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-form";
      }
    }, {
      key: "fieldProperties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsForm), "fieldProperties", this), {
          /**
           * Fields to convert to JSON Schema.
           */
          fields: {
            type: "Array"
          },

          /**
           * Conversion from inputMethods to JSON schema types and formats.
           * _See [Configuring fieldsConversion Property](configuring-the-fieldsconversion-property) above._
           */
          fieldsConversion: {
            type: "Object",
            attribute: "fields-conversion"
          }
        });
      }
    }]);
    return SimpleFieldsForm;
  }(_simpleFieldsFormLite.SimpleFieldsFormLite);

  _exports.SimpleFieldsForm = SimpleFieldsForm;
  window.customElements.define(SimpleFieldsForm.tag, SimpleFieldsForm);
});