define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsArray = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject3_4ef3f5c0494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject3_4ef3f5c0494a11eab3124f20b4f7a7f7 = function _templateObject3_4ef3f5c0494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  function _templateObject2_4ef3f5c0494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <a11y-collapse\n                accordion\n                id=\"item-", "\"\n                .icon=\"", "\"\n                .tooltip=\"", "\"\n              >\n                <p slot=\"heading\">\n                  ", "\n                </p>\n                <div slot=\"content\">\n                  <div>\n                    <div\n                      id=\"value-", "\"\n                      class=\"item-fields\"\n                      .data-index=\"", "\"\n                    >\n                      <slot></slot>\n                    </div>\n                    <paper-icon-button\n                      id=\"remove-", "\"\n                      icon=\"icons:delete\"\n                      aria-label=\"Remove this item\"\n                      aria-describedby=\"item-", "\"\n                      class=\"remove-array-item array-item-button\"\n                      controls=\"item-", "\"\n                      on-tap=\"_onRemoveItem\"\n                      role=\"button\"\n                    >\n                    </paper-icon-button>\n                    <simple-tooltip for=\"remove-", "\">\n                      Remove this item\n                    </simple-tooltip>\n                  </div>\n                </div>\n              </a11y-collapse>\n            "]);

    _templateObject2_4ef3f5c0494a11eab3124f20b4f7a7f7 = function _templateObject2_4ef3f5c0494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  function _templateObject_4ef3f5c0494a11eab3124f20b4f7a7f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <fieldset>\n        <legend id=\"legend\" class=\"flex\" ?hidden=\"", "\">\n          ", "\n        </legend>\n        <a11y-collapse-group\n          id=\"form\"\n          icon=\"settings\"\n          class=\"vertical flex layout\"\n          global-options=\"", "\"\n        >\n          ", "\n        </a11y-collapse-group>\n        <paper-button\n          class=\"add-array-item array-item-button\"\n          on-click=\"_onAddItem\"\n          role=\"button\"\n        >\n          Add an item\n          <iron-icon icon=\"add-circle\"></iron-icon>\n        </paper-button>\n      </fieldset>\n    "]);

    _templateObject_4ef3f5c0494a11eab3124f20b4f7a7f7 = function _templateObject_4ef3f5c0494a11eab3124f20b4f7a7f7() {
      return data;
    };

    return data;
  }

  /**
   * `simple-fields-array` takes in a JSON schema of type array and builds a form,
   * exposing a `value` property that represents an array described by the schema.
   * @group simple-fields
   * @demo demo/index.html
   * @customeElement simple-fields-array
   */
  var SimpleFieldsArray =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(SimpleFieldsArray, _LitElement);
    babelHelpers.createClass(SimpleFieldsArray, null, [{
      key: "tag",
      get: function get() {
        return "simple-fields-array";
      }
    }]);

    function SimpleFieldsArray() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsArray);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFieldsArray).call(this));
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/paper-icon-button/paper-icon-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../a11y-collapse/a11y-collapse.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../a11y-collapse/lib/a11y-collapse-group.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsArray, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject_4ef3f5c0494a11eab3124f20b4f7a7f7(), !this.schema.title, this.schema.title, this.globalOptions, this.schema.value.map(item, function (index) {
          return (0, _litElement.html)(_templateObject2_4ef3f5c0494a11eab3124f20b4f7a7f7(), index, _this2.globalOptions.icon, _this2.globalOptions.tooltip, _this2._getHeading(_this2.__headings, _this2.schema.label, index), index, index, index, index, index, index);
        }));
      }
    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }, {
      key: "ready",
      value: function ready() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArray.prototype), "ready", this).call(this);
        this.__headings = [];

        this._schemaChanged(); //update the headings if the data changes


        this.addEventListener("form-field-changed", function (e) {
          _this3._updateHeadings(e);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this4 = this;

        this.removeEventListener("form-field-changed", function (e) {
          _this4._updateHeadings(e);
        });
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArray.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * updates the array fields if the schema (which includes values) changes
       */

    }, {
      key: "_schemaChanged",
      value: function _schemaChanged() {
        var _this5 = this;

        //make sure the content is there first
        setTimeout(function () {
          var itemLabel = _this5.schema.items.itemLabel;

          if (_this5.schema && Array.isArray(_this5.schema.value)) {
            _this5.schema.value.forEach(function (val) {
              _this5.push("__headings", val[itemLabel]);
            });
          }

          _this5.shadowRoot.querySelectorAll(".item-fields").forEach(function (item) {
            var index = item.getAttribute("data-index"),
                propertyName = "".concat(_this5.propertyPrefix).concat(_this5.propertyName),
                prefix = "".concat(propertyName, ".").concat(index),
                //path = `${propertyName}.properties.${index}`,
            val = _this5.schema.value[index]; //for each array item, request the fields frrom eco-json-schema-object

            _this5.dispatchEvent(new CustomEvent("build-fieldset", {
              bubbles: false,
              cancelable: true,
              composed: true,
              detail: {
                container: item,
                path: propertyName,
                prefix: prefix,
                properties: _this5.schema.properties.map(function (prop) {
                  var newprop = JSON.parse(JSON.stringify(prop));
                  newprop.value = val[prop.name];
                  return newprop;
                }),
                type: SimpleFieldsArray.tag,
                value: _this5.schema.value || []
              }
            }));
          });
        }, 0);
      }
      /**
       * handles adding an array item
       * @param {event} e the add item button tap event
       */

    }, {
      key: "_onAddItem",
      value: function _onAddItem(e) {
        var val = {}; //add default values to the new item

        this.schema.properties.forEach(function (prop) {
          val[prop.name] = prop.value;
        });
        this.push("schema.value", val);
        this.notifyPath("schema.*");
        this.notifyPath("schema.value.*");

        this._schemaChanged();
      }
      /**
       * handles removing an array item
       * @param {event} e the remove item button tap event
       */

    }, {
      key: "_onRemoveItem",
      value: function _onRemoveItem(e) {
        //remove the data for an item at a given index
        var index = e.target.controls.replace(/item-/, "");
        this.splice("schema.value", index, 1);
        this.notifyPath("schema.*");
        this.notifyPath("schema.value.*");

        this._schemaChanged();
      }
      /**
       * updates the list expandable headings for each item
       * @param {event} e the event that triggers an update
       */

    }, {
      key: "_updateHeadings",
      value: function _updateHeadings(e) {
        var propname = e.detail.getAttribute("name"),
            val = e.detail.value,
            pathArr = propname ? propname.split(".") : [],
            index = pathArr.length > 2 ? pathArr[pathArr.length - 2] : null,
            update = e.detail.propertyName === this.schema.items.itemLabel ? val : this.__headings[index];
        if (index) this.set("__headings.".concat(index), update);
      }
      /**
       * labels the collapse heading based on a given property
       * @param {object} headings item the array item
       * @param {string} label prop the property that will populate the collapse heading
       * @param {number} index the index of the item
       * @returns {string} the expanable heading label
       */

    }, {
      key: "_getHeading",
      value: function _getHeading(headings, label, index) {
        //if there is no heading, number the item instead
        return this.__headings && this.__headings[index] && typeof this.__headings[index] === "string" && this.__headings[index].trim("") !== "" ? this.__headings[index].trim("") : label && typeof label === "string" && label.trim("") !== "" ? "".concat(label.trim(""), " ").concat(index + 1) : "Item ".concat(index + 1);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject3_4ef3f5c0494a11eab3124f20b4f7a7f7())];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          globalOptions: {
            type: Object,
            value: {
              icon: "settings",
              tooltip: "configure item"
            },
            notify: true
          },
          propertyName: {
            type: String,
            value: null
          },
          schema: {
            type: Object,
            value: {},
            notify: true,
            observer: "_schemaChanged"
          },
          __headings: {
            type: Array,
            value: [],
            notify: true
          }
        };
      }
    }]);
    return SimpleFieldsArray;
  }(_litElement.LitElement);

  _exports.SimpleFieldsArray = SimpleFieldsArray;
  window.customElements.define(SimpleFieldsArray.tag, SimpleFieldsArray);
});