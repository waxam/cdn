define(["exports", "../../../lit-element/lit-element.js", "./simple-fields-fieldset.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js", "./simple-fields-array-item.js"], function (_exports, _litElement, _simpleFieldsFieldset, _simpleIcon, _simpleIcons, _simpleFieldsArrayItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsArray = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_f7417910544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        fieldset {\n          padding: 0 var(--simple-fields-margin-small, 8px)\n            var(--simple-fields-margin-small, 8px);\n        }\n        #item-fields {\n          margin: var(--simple-fields-margin-small, 8px) 0;\n          clear: both;\n          z-index: 3;\n        }\n        #top {\n          display: flex;\n          align-items: flex-end;\n          justify-content: flex-end;\n        }\n        #description {\n          flex: 1 1 auto;\n          padding: var(--simple-fields-margin-small, 2px) 0;\n          margin-right: var(--simple-fields-margin, 8px);\n          min-height: 24px;\n        }\n        #add {\n          float: right;\n        }\n        button {\n          font-family: var(--simple-fields-detail-font-family, sans-serif);\n          font-size: var(--simple-fields-detail-font-size, 12px);\n          line-height: var(--simple-fields-detail-line-height, 22px);\n          padding: var(--simple-fields-margin-small, 2px);\n          margin: 0 var(--simple-fields-margin-small, 2px) 0 0;\n          z-index: 1;\n          text-transform: unset;\n        }\n        .expanded {\n          transform: rotate(-90deg);\n          transition: transform 0.5s ease;\n        }\n        .collapsed {\n          transform: rotate(0deg);\n          transition: transform 0.5s ease;\n        }\n      "]);

    _templateObject3_f7417910544211ebad6c77197a564a47 = function _templateObject3_f7417910544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _templateObject2_f7417910544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"top\">\n        ", "\n        <button\n          id=\"expand\"\n          controls=\"item-fields\"\n          @click=\"", "\"\n        >\n          ", "\n          <simple-icon\n            class=\"", "\"\n            aria-hidden=\"true\"\n            icon=\"expand-more\"\n          ></simple-icon>\n        </button>\n      </div>\n      <div id=\"item-fields\" aria-live=\"polite\">\n        <slot></slot>\n        <button\n          id=\"add\"\n          controls=\"item-fields\"\n          @click=\"", "\"\n        >\n          Add Item\n          <simple-icon aria-hidden=\"true\" icon=\"add\"></simple-icon>\n        </button>\n      </div>\n    "]);

    _templateObject2_f7417910544211ebad6c77197a564a47 = function _templateObject2_f7417910544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _templateObject_f7417910544211ebad6c77197a564a47() {
    var data = babelHelpers.taggedTemplateLiteral([" <fieldset>", "", "</fieldset> "]);

    _templateObject_f7417910544211ebad6c77197a564a47 = function _templateObject_f7417910544211ebad6c77197a564a47() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `simple-fields-array` takes in a JSON schema of type array and builds a form,
   * exposing a `value` property that represents an array described by the schema.
   *
   * @group simple-fields
   * @extends simple-fields-fieldset
   * @element simple-fields-array
   */
  var SimpleFieldsArray = /*#__PURE__*/function (_SimpleFieldsFieldset) {
    babelHelpers.inherits(SimpleFieldsArray, _SimpleFieldsFieldset);

    var _super = _createSuper(SimpleFieldsArray);

    babelHelpers.createClass(SimpleFieldsArray, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_f7417910544211ebad6c77197a564a47(), this.legend, this.fields);
      }
    }, {
      key: "fields",
      get: function get() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject2_f7417910544211ebad6c77197a564a47(), this.desc, function (e) {
          return _this2.toggle();
        }, this.expanded ? "Collapse All" : "Expand All", this.expanded ? "expanded" : "collapsed", function (e) {
          return _this2._handleAdd();
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-array";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArray), "styles", this)), [(0, _litElement.css)(_templateObject3_f7417910544211ebad6c77197a564a47())]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsArray), "properties", this)), {}, {
          count: {
            type: Number
          },

          /*
           * icon when expanded
           */
          expanded: {
            type: Boolean
          }
        });
      }
    }]);

    function SimpleFieldsArray() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsArray);
      _this = _super.call(this);
      _this.count = 0;
      _this.expanded = false;
      _this.disableAdd = false;
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsArray, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "expanded") _this3.querySelectorAll("simple-fields-array-item").forEach(function (item) {
            return item.setAttribute("aria-expanded", _this3.expanded);
          });
        });
      }
    }, {
      key: "buildItem",
      value: function buildItem(id) {
        var _this4 = this;

        var item = document.createElement("simple-fields-array-item");
        item.id = id;
        item.expanded = this.expanded;
        item.innerHTML = "\n      <slot name=\"sort\"></slot>\n      <slot name=\"preview\"></slot>\n      <slot></slot>";
        this.appendChild(item);
        item.addEventListener("remove", function (e) {
          return _this4._handleRemove(e);
        });
        return item;
      }
      /**
       * Fires add event
       * @event add
       */

    }, {
      key: "_handleAdd",
      value: function _handleAdd() {
        this.dispatchEvent(new CustomEvent("add", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Fires add event
       * @event add
       */

    }, {
      key: "_handleRemove",
      value: function _handleRemove(e) {
        e.stopPropagation();
        e.stopImmediatePropagation();
        this.dispatchEvent(new CustomEvent("remove", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: e.detail
        }));
      }
      /**
       * Collapses the content
       */

    }, {
      key: "collapse",
      value: function collapse() {
        this.toggle(false);
      }
      /**
       * Expands the content
       */

    }, {
      key: "expand",
      value: function expand() {
        this.toggle(true);
      }
      /**
       * handles focus
       *
       * @memberof SimpleFieldsArray
       */

    }, {
      key: "focus",
      value: function focus(index) {
        if (this.childNodes && index) {
          if (this.childNodes.length < index) index = this.childNodes.length - 1; // account for delete of 1st item

          if (index == -1) {
            index = 0;
          }

          if (this.childNodes.length != 0) {
            this.childNodes[index].focus();
          }
        } else if (this.shadowRoot) {
          var id = !this.childNodes ? "add" : "expand";
          this.shadowRoot.getElementById(id).focus();
        }
      }
      /**
       * Toggles based on mode
       * @param {boolean} open whether to toggle open
       */

    }, {
      key: "toggle",
      value: function toggle() {
        var open = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : !this.expanded;
        this.expanded = open;

        this._handleToggle();
      }
      /**
       * Fires toggling events
       */

    }, {
      key: "_handleToggle",
      value: function _handleToggle() {
        /**
         * Fires when toggled.
         *
         * @event toggle
         */
        this.dispatchEvent(new CustomEvent("toggle", {
          detail: this
        }));

        if (this.expanded) {
          /**
           * Fires when expanded.
           *
           * @event expand
           */
          this.dispatchEvent(new CustomEvent("expand", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        } else {
          /**
           * Fires when collapsed.
           *
           * @event collapse
           */
          this.dispatchEvent(new CustomEvent("collapse", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
      }
    }]);
    return SimpleFieldsArray;
  }(_simpleFieldsFieldset.SimpleFieldsFieldset);

  _exports.SimpleFieldsArray = SimpleFieldsArray;
  window.customElements.define(SimpleFieldsArray.tag, SimpleFieldsArray);
});