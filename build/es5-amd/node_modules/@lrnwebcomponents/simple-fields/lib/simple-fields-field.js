define(["exports", "../../../lit-element/lit-element.js", "./simple-fields-container.js"], function (_exports, _litElement, _simpleFieldsContainer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsField = void 0;

  function _templateObject9_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <textarea\n        aria-invalid=\"", "\"\n        ?autofocus=\"", "\"\n        class=\"field box-input\"\n        @change=\"", "\"\n        @keydown=\"", "\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        @input=\"", "\"\n        .name=\"", "\"\n        ?readonly=\"", "\"\n        ?required=\"", "\"\n        rows=\"1\"\n      >\n", "</textarea\n      >\n    "]);

    _templateObject9_6d434890d34d11ea880ba1e93364c49c = function _templateObject9_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject8_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <option\n              .id=\"", ".", "\"\n              ?selected=\"", "\"\n              .value=\"", "\"\n            >\n              ", "\n            </option>\n          "]);

    _templateObject8_6d434890d34d11ea880ba1e93364c49c = function _templateObject8_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject7_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <select\n        ?autofocus=\"", "\"\n        aria-descrbedby=\"", "\"\n        aria-invalid=\"", "\"\n        @change=\"", "\"\n        class=\"field\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        ?multiple=\"", "\"\n        .name=\"", "\"\n        ?readonly=\"", "\"\n        ?required=\"", "\"\n      >\n        ", "\n      </select>\n    "]);

    _templateObject7_6d434890d34d11ea880ba1e93364c49c = function _templateObject7_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject6_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <input\n        aria-descrbedby=\"", "\"\n        aria-invalid=\"", "\"\n        ?autofocus=\"", "\"\n        @change=\"", "\"\n        ?checked=\"", "\"\n        class=\"field ", "\"\n        ?disabled=\"", "\"\n        ?hidden=\"", "\"\n        @input=\"", "\"\n        .name=\"", "\"\n        .placeholder=\"", "\"\n        ?readonly=\"", "\"\n        ?required=\"", "\"\n        .type=\"", "\"\n      />\n    "]);

    _templateObject6_6d434890d34d11ea880ba1e93364c49c = function _templateObject6_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject5_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <div class=\"option inline\">\n                <label for=\"", ".", "\" class=\"radio-label\"\n                  >", "</label\n                >\n                <input\n                  .id=\"", "\"\n                  .name=\"", "\"\n                  ?autofocus=\"", "\"\n                  aria-descrbedby=\"", "\"\n                  .aria-invalid=\"", "\"\n                  ?checked=\"", "\"\n                  class=\"field\"\n                  @click=\"", "\"\n                  ?disabled=\"", "\"\n                  ?hidden=\"", "\"\n                  ?readonly=\"", "\"\n                  ?required=\"", "\"\n                  type=\"", "\"\n                  .value=\"", "\"\n                />\n              </div>\n            "]);

    _templateObject5_6d434890d34d11ea880ba1e93364c49c = function _templateObject5_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject4_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <fieldset>\n        <legend class=\"label-main\" ?hidden=\"", "\">\n          ", "", "\n        </legend>\n        <div id=\"options\">\n          ", "\n        </div>\n        ", "\n      </fieldset>\n    "]);

    _templateObject4_6d434890d34d11ea880ba1e93364c49c = function _templateObject4_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject3_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"fieldmeta\" aria-live=\"polite\"></div>\n    "]);

    _templateObject3_6d434890d34d11ea880ba1e93364c49c = function _templateObject3_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject2_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div\n        class=\"", "\"\n      >\n        ", "\n        <div>\n          ", "\n          ", "\n          ", "\n        </div>\n      </div>\n    "]);

    _templateObject2_6d434890d34d11ea880ba1e93364c49c = function _templateObject2_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_6d434890d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        fieldset {\n          margin: 0;\n          padding: 0;\n          border: none;\n        }\n        option {\n          border-radius: 0;\n        }\n        legend {\n          padding-inline-start: unset;\n          padding-inline-end: unset;\n        }\n        #options {\n          display: var(--simple-fields-radio-option-display, flex);\n          flex-wrap: var(--simple-fields-radio-option-flex-wrap, wrap);\n        }\n        .option {\n          display: flex;\n          flex-wrap: wrap;\n          align-items: stretch;\n          justify-content: space-between;\n          margin: 0 var(--simple-fields-margin-small, 8px) 0 0;\n        }\n        .option:last-of-type {\n          margin: 0;\n        }\n        .option:focus-within label {\n          color: var(--simple-fields-accent, #003f7d);\n          transition: color ease-in-out;\n        }\n        :host([type]) fieldset .border-bottom {\n          display: block;\n        }\n        .box-input:focus {\n          outline: none;\n        }\n        textarea {\n          margin: 0;\n          transition: height 0.5s ease-in-out;\n          box-sizing: border-box;\n          vertical-align: bottom;\n        }\n        select.field {\n          width: 100%;\n          border: none;\n          background: transparent;\n          border-radius: 0;\n          transition: color ease-in-out;\n        }\n        select:focus,\n        select:focus-within {\n          outline: none;\n        }\n        input[type=\"range\"] {\n          width: 100%;\n          height: calc(\n            var(--simple-fields-font-size, 16px) +\n              var(--simple-fields-line-height, 22px)\n          );\n          padding: 0;\n          margin: 0;\n          box-sizing: border-box;\n          -webkit-appearance: none;\n        }\n        input[type=\"range\"]:focus {\n          outline: none;\n        }\n        input[type=\"range\"]::-webkit-slider-runnable-track {\n          width: 100%;\n          height: 16px;\n          cursor: pointer;\n          background: var(--simple-fields-border-color-light, #ccc);\n          border-radius: 8px;\n          transition: all 0.5ms ease-in-out;\n        }\n        :host([error]) input[type=\"range\"]::-webkit-slider-runnable-track {\n          background: var(--simple-fields-faded-error-color, #ff997f);\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"]::-webkit-slider-thumb {\n          height: 20px;\n          width: 20px;\n          border-radius: 50%;\n          background: var(--simple-fields-background-color, white);\n          box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.6);\n          cursor: pointer;\n          -webkit-appearance: none;\n          margin-top: -2px;\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"][readonly]::-webkit-slider-thumb,\n        input[type=\"range\"][disabled]::-webkit-slider-thumb {\n          cursor: not-allowed;\n        }\n        input[type=\"range\"]:focus::-webkit-slider-thumb {\n          background: var(--simple-fields-accent-color, #3f51b5);\n          transition: all 0.5ms ease-in-out;\n        }\n        :host([error]) input[type=\"range\"]::-webkit-slider-thumb {\n          background: var(--simple-fields-error-color, #dd2c00);\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"][readonly]::-webkit-slider-thumb,\n        input[type=\"range\"][disabled]::-webkit-slider-thumb {\n          background: var(--simple-fields-border-color, #999);\n          cursor: not-allowed;\n          box-shadow: none;\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-track {\n          width: 100%;\n          height: 16px;\n          cursor: pointer;\n          background: var(--simple-fields-border-color-light, #ccc);\n          border-radius: 8px;\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"][readonly]::-moz-range-track,\n        input[type=\"range\"][disabled]::-moz-range-track {\n          cursor: not-allowed;\n        }\n        :host([error]) input[type=\"range\"]::-moz-range-track {\n          background: var(--simple-fields-faded-error-color, #ff997f);\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"]::-moz-range-thumb {\n          height: 20px;\n          width: 20px;\n          border-radius: 50%;\n          background: var(--simple-fields-background-color, white);\n          box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.6);\n          cursor: pointer;\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"]:focus::-moz-range-thumb {\n          background: var(--simple-fields-accent-color, #3f51b5);\n          transition: all 0.5ms ease-in-out;\n        }\n        :host([error]) input[type=\"range\"]::-moz-range-thumb {\n          background: var(--simple-fields-error-color, #dd2c00);\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"][readonly]::-moz-range-thumb,\n        input[type=\"range\"][disabled]::-moz-range-thumb {\n          background: var(--simple-fields-border-color, #999);\n          cursor: not-allowed;\n          box-shadow: none;\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"]::-ms-track {\n          width: 100%;\n          height: 16px;\n          cursor: pointer;\n          background: transparent;\n          border-color: transparent;\n          color: transparent;\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"][readonly]::-ms-track,\n        input[type=\"range\"][disabled]::-ms-track {\n          cursor: not-allowed;\n        }\n        :host([error]) input[type=\"range\"]::-ms-track {\n          background: var(--simple-fields-faded-error-color, #ff997f);\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"]::-ms-fill-lower {\n          background: var(--simple-fields-border-color-light, #ccc);\n          border-radius: 8px;\n        }\n        input[type=\"range\"]::-ms-fill-upper {\n          background: var(--simple-fields-border-color-light, #ccc);\n          border-radius: 8px;\n        }\n        input[type=\"range\"]::-ms-thumb {\n          height: 20px;\n          width: 20px;\n          border-radius: 50%;\n          background: var(--simple-fields-background-color, white);\n          box-shadow: 0 1px 5px 0 rgba(0, 0, 0, 0.6);\n          cursor: pointer;\n        }\n        input[type=\"range\"][readonly]::-ms-thumb,\n        input[type=\"range\"][disabled]::-ms-thumb {\n          cursor: not-allowed;\n        }\n        input[type=\"range\"]:focus::-ms-thumb {\n          background: var(--simple-fields-accent-color, #3f51b5);\n        }\n        :host([error]) input[type=\"range\"]::-ms-thumb {\n          background: var(--simple-fields-error-color, #dd2c00);\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"][redonly]::-ms-thumb,\n        input[type=\"range\"][disabled]::-ms-thumb {\n          background: var(--simple-fields-border-color, #999);\n          cursor: not-allowed;\n          box-shadow: none;\n          transition: all 0.5ms ease-in-out;\n        }\n        input[type=\"range\"]:focus::-ms-fill-lower {\n          background: var(--simple-fields-border-color-light, #ccc);\n        }\n        input[type=\"range\"]:focus::-ms-fill-upper {\n          background: var(--simple-fields-border-color-light, #ccc);\n        }\n      "]);

    _templateObject_6d434890d34d11ea880ba1e93364c49c = function _templateObject_6d434890d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   *`simple-fields-field`
   * HTML inputs (excluding submit, reset, button, and image)
   * with label, description, error massage,
   * and aria-invalid functionality if needed.
   *
   * @group simple-fields
   * @extends simple-fields-container
   * @element simple-fields-field
   * @demo ./demo/field.html
   */
  var SimpleFieldsField =
  /*#__PURE__*/
  function (_SimpleFieldsContaine) {
    babelHelpers.inherits(SimpleFieldsField, _SimpleFieldsContaine);
    babelHelpers.createClass(SimpleFieldsField, [{
      key: "render",
      value: function render() {
        return !this.hasFieldSet ? babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsField.prototype), "render", this).call(this) : this.fieldsetTemplate;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-field";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsField), "styles", this)), [(0, _litElement.css)(_templateObject_6d434890d34d11ea880ba1e93364c49c())]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsField), "properties", this), {
          /**
           * Hint for expected file type in file upload controls
           */
          accept: {
            type: String
          },

          /**
           * Hint for form autofill feature
           */
          autocomplete: {
            type: String
          },

          /**
           * Automatically focus on field when the page is loaded
           */
          autofocus: {
            type: Boolean
          },

          /**
           * Media capture input method in file upload controls
           */
          capture: {
            type: String
          },

          /**
           * a counter text and textareas: "character", "word" or unset for none
           */
          counter: {
            type: String
          },

          /**
           * Name of form field to use for sending the element's directionality in form submission
           */
          dirname: {
            type: String
          },

          /**
           * array of options [{value: "key", text: "Text"}] for select, radio options, and checkboxes,
           * so that they can appear in a prescribed order,
           * eg. [{value: "b", text: "Option B"}, {value: "a", text: "Option A"}, {value: "c", text: "Option C"}]
           */
          itemsList: {
            type: Array,
            attribute: "items-list"
          },

          /**
           * Value of the id attribute of the `<datalist>` of autocomplete options
           */
          list: {
            type: String
          },

          /**
           * Maximum value for numeric field types
           */
          max: {
            type: Number
          },

          /**
           * Maximum length (number of characters) of `value`
           */
          maxlength: {
            type: Number
          },

          /**
           * Minimum value for numeric field types
           */
          min: {
            type: Number
          },

          /**
           * Minimum length (number of characters) of `value`
           */
          minlength: {
            type: Number
          },

          /**
           * Whether to allow multiple values
           */
          multiple: {
            type: Boolean
          },

          /**
           * options {value: "Text"}  for select, radio options, and checkboxes,
           * which are sorted by key,
           * eg. {a: "Option A", b: "Option B", c: "Option C"}
           */
          options: {
            type: Object
          },

          /**
           * Content to be appear in the form control when the form control is empty
           */
          placeholder: {
            type: String
          },

          /**
           * Size of the control
           */
          size: {
            type: Number
          },

          /*
           * Whether input subject to spell checking by browser/OS as "true", "default", or "false"
           */
          spellcheck: {
            type: String
          },

          /**
           * Incremental values that are valid
           */
          step: {
            type: Number
          },

          /**
           * Current value of the form control. Submitted with the form as part of a name/value pair.
           */
          value: {
            reflect: true
          },

          /*
           * text wrapping for textarea,
           * "hard": automatically inserts line breaks (CR+LF)
           * "soft": all line breaks as CR+LF pair
           * "off" : no wrapping / <textarea> becomes horizontally scrollable
           */
          wrap: {
            type: Boolean
          }
        });
      }
    }]);

    function SimpleFieldsField() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsField);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFieldsField).call(this));
      _this.autocomplete = "off";
      _this.autofocus = false;
      _this.multiple = false;
      _this.readonly = false;
      _this.spellcheck = false;
      _this.itemsList = [];
      _this.options = {};
      _this.wrap = false;
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsField, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (!this.field) this._updateField();
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "id" && !_this2.id) _this2.id = _this2._generateUUID();
          if (_this2._getAttributes(_this2.type).includes(propName)) _this2._updateAttribute(propName);

          if (propName === "value" && _this2.value !== oldValue) {
            if (_this2.field.value !== _this2.value) _this2.field.value = _this2.value;

            _this2._fireValueChanged();
          }

          if (["counter", "maxlength", "type"].includes(propName) && ["text", "textarea"].includes(_this2.type)) _this2._updateCount();

          if (propName === "type" && _this2.type !== oldValue) {
            _this2._updateField();
          }
        });
      }
    }, {
      key: "_fireValueChanged",

      /**
       * fires when value changes
       * @event value-changed
       */
      value: function _fireValueChanged() {
        this.dispatchEvent(new CustomEvent("value-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * handles field changes by field type
       *
       * @memberof SimpleFieldsContainer
       */

    }, {
      key: "_handleFieldChange",
      value: function _handleFieldChange() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsField.prototype), "_handleFieldChange", this).call(this);
        this.value = this._getFieldValue();
      }
      /**
       * gets attributes that will only be set if they are defined
       * @param {string} [type=text] input type
       * @returns {array} list of attributes
       */

    }, {
      key: "_getAttributes",
      value: function _getAttributes(type) {
        var attributes = {
          checkbox: ["autocomplete", "form", "list"],
          color: ["autocomplete", "form", "list"],
          date: ["autocomplete", "form", "list", "max", "min", "step"],
          "datetime-local": ["form", "list", "max", "min", "step"],
          email: ["autocomplete", "form", "list", "placeholder"],
          file: ["autocomplete", "accept", "capture", "form", "list"],
          hidden: ["autocomplete", "form"],
          month: ["autocomplete", "form", "list", "max", "min", "step"],
          number: ["autocomplete", "form", "list", "max", "min", "step"],
          password: ["autocomplete", "form", "list", "maxlength", "maxlength", "pattern", "placeholder"],
          radio: ["autocomplete", "form", "list"],
          range: ["autocomplete", "form", "list", "max", "min", "step"],
          search: ["autocomplete", "dirname", "form", "list", "maxlength", "maxlength", "placeholder"],
          select: ["autocomplete", "form", "list", "size"],
          tel: ["autocomplete", "form", "list", "maxlength", "maxlength", "pattern", "placeholder"],
          text: ["autocomplete", "dirname", "form", "list", "maxlength", "maxlength", "pattern", "placeholder"],
          textarea: ["autocomplete", "autocomplete", "form", "maxlength", "maxlength", "placeholder", "spellcheck", "wrap"],
          time: ["autocomplete", "form", "list", "max", "min", "step"],
          url: ["autocomplete", "form", "list", "maxlength", "maxlength", "placeholder"],
          week: ["autocomplete", "form", "list", "max", "min", "step"]
        };
        return attributes[type];
      }
      /**
       * listens for focusout
       * overridden for fields in shadow DOM
       *
       * @param {boolean} [init=true] whether to start observing or disconnect observer
       * @memberof SimpleFieldsField
       */

    }, {
      key: "_observeAndListen",
      value: function _observeAndListen() {
        var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (init) {
          this.addEventListener("click", this.focus);
          this.addEventListener("focusout", this._onFocusout);
          this.addEventListener("focusin", this._onFocusin);
        } else {
          this.removeEventListener("click", this.focus);
          this.removeEventListener("focusout", this._onFocusout);
          this.removeEventListener("focusin", this._onFocusin);
        }
      }
      /**
       * updates field attributes based on field type
       *
       * @param {string} attribute
       * @memberof SimpleFieldsContainer
       */

    }, {
      key: "_updateAttribute",
      value: function _updateAttribute(attribute) {
        if (this.field && this[attribute] !== this.field.getAttribute(attribute)) {
          if (this[attribute]) {
            this.field.setAttribute(attribute, this[attribute]);
          } else {
            this.field.removeAttribute(attribute, this[attribute]);
          }
        }
      }
      /**
       * updates field an type
       *
       * @memberof SimpleFieldsField
       */

    }, {
      key: "_updateField",
      value: function _updateField() {
        var _this3 = this;

        this.type = this._getValidType(this.type);
        this.field = this.shadowRoot && this.shadowRoot.querySelector(this.fieldElementTag) ? this.shadowRoot.querySelector(this.fieldElementTag) : undefined;

        this._getAttributes(this.type).forEach(function (attr) {
          return _this3._updateAttribute(attr);
        });

        if (this.type !== "select" && this.field) this._updateAttribute("value");
      }
    }, {
      key: "hasFieldSet",
      get: function get() {
        return (this.type === "radio" || this.type === "checkbox") && !this.noOptions;
      }
      /**
       * gets field element tag in shadow DOM
       *
       * @readonly
       * @returns {string}
       * @memberof SimpleFieldsField
       */

    }, {
      key: "fieldElementTag",
      get: function get() {
        return this.type === "select" || this.type === "text" && !this.noOptions ? "select" : this.type === "textarea" ? "textarea" : this.hasFieldSet ? "fieldset" : "input";
      }
      /**
       * template label and field
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsField
       */

    }, {
      key: "fieldMainTemplate",
      get: function get() {
        return (0, _litElement.html)(_templateObject2_6d434890d34d11ea880ba1e93364c49c(), this.inline || ["checkbox", "color", "radio"].includes(this.type || "text") ? "field-main inline" : "field-main", this.labelTemplate, this.prefixTemplate, this.fieldElementTag === "input" ? this.inputTemplate : this.fieldElementTag === "select" ? this.selectTemplate : this.fieldElementTag === "textarea" ? this.textareaTemplate : "", this.suffixTemplate);
      }
      /**
       *
       * gets field metadata
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsField
       */

    }, {
      key: "fieldMeta",
      get: function get() {
        return (0, _litElement.html)(_templateObject3_6d434890d34d11ea880ba1e93364c49c());
      }
      /**
       * template for `fieldset` in shadow DOM
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsField
       */

    }, {
      key: "fieldsetTemplate",
      get: function get() {
        var _this4 = this;

        return (0, _litElement.html)(_templateObject4_6d434890d34d11ea880ba1e93364c49c(), !this.label, this.label, this.error || this.required ? "*" : "", (this.sortedOptions || []).map(function (option) {
          return (0, _litElement.html)(_templateObject5_6d434890d34d11ea880ba1e93364c49c(), _this4.id, option.value, option.text, option.value, _this4.id, _this4.autofocus, _this4.describedBy, _this4.error ? "true" : "false", _this4.type === "radio" ? _this4.value === option.value : (_this4.value || []).includes(option.value), function (e) {
            return _this4._handleFieldChange();
          }, _this4.disabled, _this4.hidden, _this4.readonly, _this4.required, _this4.type, option.value);
        }), this.fieldBottom);
      }
      /**
       * template for `input` in shadow DOM
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsField
       */

    }, {
      key: "inputTemplate",
      get: function get() {
        var _this5 = this;

        return (0, _litElement.html)(_templateObject6_6d434890d34d11ea880ba1e93364c49c(), this.describedBy || "", this.error ? "true" : "false", this.autofocus, function (e) {
          return _this5._handleFieldChange();
        }, !!this.value, ["checkbox", "color", "file", "radio", "range"].includes(this.type) ? "" : "box-input", this.disabled, this.hidden, function (e) {
          return _this5._handleFieldChange();
        }, this.id, this.placeholder || "", this.readonly, this.required, this.type);
      }
      /**
       * gets whether or not the field has options
       *
       * @readonly
       * @memberof SimpleFieldsField
       */

    }, {
      key: "noOptions",
      get: function get() {
        return this.itemsList.length < 1 && Object.keys(this.options || {}).length < 1;
      }
      /**
       * gets a sorted list of option
       *
       * @readonly
       * @memberof SimpleFieldsField
       */

    }, {
      key: "sortedOptions",
      get: function get() {
        var _this6 = this;

        var sorted = (this.itemsList || []).map(function (item, i) {
          return babelHelpers.typeof(item) === "object" ? item : {
            value: item,
            text: item
          };
        });
        Object.keys(this.options || {}).sort(function (a, b) {
          return a > b ? 1 : -1;
        }).forEach(function (key) {
          return sorted.push({
            value: key,
            text: _this6.options[key]
          });
        });
        return sorted;
      }
      /**
       * template for `select` in shadow DOM
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsField
       */

    }, {
      key: "selectTemplate",
      get: function get() {
        var _this7 = this;

        return (0, _litElement.html)(_templateObject7_6d434890d34d11ea880ba1e93364c49c(), this.autofocus, this.describedBy, this.error ? "true" : "false", function (e) {
          return _this7._handleFieldChange();
        }, this.disabled, this.hidden, this.multiple, this.id, this.readonly, this.required, (this.sortedOptions || []).map(function (option) {
          return (0, _litElement.html)(_templateObject8_6d434890d34d11ea880ba1e93364c49c(), _this7.id, option.value, _this7.multiple ? _this7.value && _this7.value.includes(option.value) : _this7.value === option.value, option.value, option.text);
        }));
      }
      /**
       * overridden mutation observer
       *
       * @readonly
       * @memberof SimpleFieldsField
       */

    }, {
      key: "slottedFieldObserver",
      get: function get() {}
      /**
       * template for `textarea` in shadow DOM
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsField
       */

    }, {
      key: "textareaTemplate",
      get: function get() {
        var _this8 = this;

        return (0, _litElement.html)(_templateObject9_6d434890d34d11ea880ba1e93364c49c(), this.error ? "true" : "false", this.autofocus, function (e) {
          return _this8._handleFieldChange();
        }, function (e) {
          return e.stopPropagation();
        }, this.disabled, this.hidden, function (e) {
          return _this8._handleFieldChange();
        }, this.id, this.readonly, this.required, this.value || "");
      }
    }]);
    return SimpleFieldsField;
  }(_simpleFieldsContainer.SimpleFieldsContainer);

  _exports.SimpleFieldsField = SimpleFieldsField;
  window.customElements.define(SimpleFieldsField.tag, SimpleFieldsField);
});