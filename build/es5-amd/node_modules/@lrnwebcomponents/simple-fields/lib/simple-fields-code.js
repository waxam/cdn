define(["exports", "../../../lit-element/lit-element.js", "./simple-fields-container.js", "../../code-editor/code-editor.js"], function (_exports, _litElement, _simpleFieldsContainer, _codeEditor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFieldsCode = void 0;

  function _templateObject2_6d2f2450d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"field-main\">\n        <code-editor\n          ?autofocus=\"", "\"\n          ?disabled=\"", "\"\n          font-size=\"", "\"\n          editor-value=\"", "\"\n          theme=\"", "\"\n          language=\"", "\"\n          mode=\"", "\"\n          ?read-only=\"", "\"\n          @value-changed=\"", "\"\n        >\n        </code-editor>\n        <input name=\"", "\" type=\"hidden\" value=\"", "\" />\n      </div>\n    "]);

    _templateObject2_6d2f2450d34d11ea880ba1e93364c49c = function _templateObject2_6d2f2450d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_6d2f2450d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        #options {\n          display: var(--simple-fields-radio-option-display, flex);\n          flex-wrap: var(--simple-fields-radio-option-flex-wrap, wrap);\n        }\n        code-editor {\n          margin: 0;\n          transition: height 0.5s ease-in-out;\n          box-sizing: border-box;\n          vertical-align: bottom;\n        }\n        code-editor:focus {\n          outline: none;\n        }\n      "]);

    _templateObject_6d2f2450d34d11ea880ba1e93364c49c = function _templateObject_6d2f2450d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   *`simple-fields-code`
   * HTML inputs (excluding submit, reset, button, and image)
   * with label, description, error massage,
   * and aria-invalid functionality if needed.
   *
   * @group simple-fields
   * @extends simple-fields-container
   * @element simple-fields-code
   * @demo ./demo/field.html
   */
  var SimpleFieldsCode =
  /*#__PURE__*/
  function (_SimpleFieldsContaine) {
    babelHelpers.inherits(SimpleFieldsCode, _SimpleFieldsContaine);
    babelHelpers.createClass(SimpleFieldsCode, [{
      key: "render",
      value: function render() {
        return !this.hasFieldSet ? babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode.prototype), "render", this).call(this) : this.fieldsetTemplate;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-fields-code";
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode), "styles", this)), [(0, _litElement.css)(_templateObject_6d2f2450d34d11ea880ba1e93364c49c())]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode), "properties", this), {
          /**
           * Automatically focus on field when the page is loaded
           */
          autofocus: {
            type: Boolean
          },

          /**
           * changes the value of the editor
           */
          editorValue: {
            type: String,
            attribute: "editor-value"
          },

          /**
           * Font-size of editor
           */
          fontSize: {
            type: Number,
            attribute: "font-size"
          },

          /**
           * language of code-editor
           */
          language: {
            type: String
          },

          /**
           * mode of code-editor
           */
          mode: {
            type: Number
          },

          /**
           * Value is not editable
           */
          readonly: {
            type: Boolean,
            reflect: true
          },

          /**
           * error message when field is required and has no value
           */
          requiredMessage: {
            type: String
          },

          /**
           * theme of code-editor
           */
          theme: {
            type: Number
          },

          /**
           * Current value of the form control. Submitted with the form as part of a name/value pair.
           */
          value: {
            reflect: true
          }
        });
      }
    }]);

    function SimpleFieldsCode() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleFieldsCode);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFieldsCode).call(this));
      _this.autofocus = false;
      _this.fontSize = 14;
      _this.id = _this._generateUUID();
      _this.language = "html";
      _this.mode = "html";
      _this.readonly = false;
      _this.theme = "vs";
      return _this;
    }

    babelHelpers.createClass(SimpleFieldsCode, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this2 = this;

        this.removeEventListener("click", function (e) {
          return _this2.focus();
        });
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFieldsCode.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "id" && !_this3.id) _this3.id = _this3._generateUUID();
          if (propName === "field" && !_this3.field) _this3._updateField();
          if (propName === "value") _this3._fireValueChanged();
        });
      }
      /**
       * template label and field
       *
       * @readonly
       * @returns {object}
       * @memberof SimpleFieldsContainer
       */

    }, {
      key: "_onChange",

      /**
       * makes handles code-editor changes
       *
       * @memberof SimpleFieldsCode
       */
      value: function _onChange(e) {
        if (!e.path[0]) return;
        if (this.value !== e.path[0].value) this.value = e.path[0].value; //this.autoGrow(e.path[0]);
      }
      /**
       * overridden mutation observer
       *
       * @readonly
       * @memberof SimpleFieldsContainer
       */

    }, {
      key: "validate",

      /**
       * checks validation constraints and returns error data
       * @memberof SimpleFieldsCode
       */
      value: function validate() {
        if (!this.value && this.required) {
          this.error = true;
          this.errorMessage = this.requiredMessage || "required";
        } // to match container response


        return !this.error;
      }
      /**
       * fires when value changes
       * @event value-changed
       */

    }, {
      key: "_fireValueChanged",
      value: function _fireValueChanged() {
        this.dispatchEvent(new CustomEvent("value-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * listens for focusout
       * overridden for fields in shadow DOM
       *
       * @param {boolean} [init=true] whether to start observing or disconnect observer
       * @memberof SimpleFieldsContainer
       */

    }, {
      key: "_observeAndListen",
      value: function _observeAndListen() {
        var init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        if (init) {
          this.addEventListener("click", this.focus);
          this.addEventListener("focusout", this._onFocusout);
          this.addEventListener("focusin", this._onFocusin);
        } else {
          this.removeEventListener("click", this.focus);
          this.removeEventListener("focusout", this._onFocusout);
          this.removeEventListener("focusin", this._onFocusin);
        }
      }
      /**
       * updates field an type
       *
       * @memberof SimpleFieldsCode
       */

    }, {
      key: "_updateField",
      value: function _updateField() {
        this.field = this.shadowRoot && this.shadowRoot.querySelector("code-editor") ? this.shadowRoot.querySelector("code-editor") : undefined;
      }
      /**
       * generates a unique id
       * @returns {string } unique id
       */

    }, {
      key: "_generateUUID",
      value: function _generateUUID() {
        return "ss-s-s-s-sss".replace(/s/g, Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1));
      }
    }, {
      key: "fieldMainTemplate",
      get: function get() {
        return (0, _litElement.html)(_templateObject2_6d2f2450d34d11ea880ba1e93364c49c(), this.autofocus, this.disabled, this.fontSize, this.__editorValue || "", this.theme, this.language, this.mode, this.readonly || this.disabled, this._onChange, this.id, this.value);
      }
    }, {
      key: "slottedFieldObserver",
      get: function get() {}
    }]);
    return SimpleFieldsCode;
  }(_simpleFieldsContainer.SimpleFieldsContainer);

  _exports.SimpleFieldsCode = SimpleFieldsCode;
  window.customElements.define(SimpleFieldsCode.tag, SimpleFieldsCode);
});