define(["exports","require","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/mixins/mutable-data.js","../utils/utils.js","../hax-body-behaviors/lib/HAXWiring.js","../eco-json-schema-form/eco-json-schema-form.js","../eco-json-schema-form/lib/eco-json-schema-object.js","../simple-colors/lib/simple-colors-polymer.js"],function(_exports,_require,_polymerElement,_mutableData,_utils,_HAXWiring,_ecoJsonSchemaForm,_ecoJsonSchemaObject,_simpleColorsPolymer){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.SimpleFields=void 0;_require=babelHelpers.interopRequireWildcard(_require);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _templateObject_b2451370696b11eabd167f7c8887b3bc(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          background-color: #ffffff;\n          overflow: visible;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        eco-json-schema-object {\n          width: 50%;\n        }\n        eco-json-schema-object {\n          color: var(--hax-text-color);\n          --eco-json-form-color: var(--hax-text-color);\n          --eco-json-schema-object-form : {\n            -ms-flex: unset;\n            -webkit-flex: unset;\n            flex: unset;\n            -webkit-flex-basis: unset;\n            flex-basis: unset;\n          }\n        }\n        eco-json-schema-object .hax-code-editor {\n          padding: 0;\n        }\n      </style>\n      <style include=\"simple-colors-shared-styles-polymer\"></style>\n      <eco-json-schema-object\n        id=\"schemaobject\"\n        autofocus$=\"[[autofocus]]\"\n        hide-line-numbers$=\"[[hideLineNumbers]]\"\n        on-form-changed=\"_formFieldsChanged\"\n        schema=\"[[__validatedSchema]]\"\n        value=\"{{value}}\"\n      ></eco-json-schema-object>\n    "]);_templateObject_b2451370696b11eabd167f7c8887b3bc=function _templateObject_b2451370696b11eabd167f7c8887b3bc(){return data};return data}/**
 * `simple-fields`
 * Uses eco-json-form and HAX wiring to display a series of fields
 * @polymer
 * @demo ./demo/index.html
 * @customElement simple-fields
 */var SimpleFields=/*#__PURE__*/function(_MutableData){babelHelpers.inherits(SimpleFields,_MutableData);function SimpleFields(){babelHelpers.classCallCheck(this,SimpleFields);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(SimpleFields).apply(this,arguments))}babelHelpers.createClass(SimpleFields,[{key:"connectedCallback",/**
   * life cycle, element is afixed to the DOM
   */value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields.prototype),"connectedCallback",this).call(this);new Promise(function(res,rej){return _require.default(["./lib/simple-fields-imports.js"],res,rej)})}/**
   * Fires when form changes to set focus on the first field if this has auto-focus
   * @event fields-changed
   */},{key:"_formFieldsChanged",value:function _formFieldsChanged(e){this.dispatchEvent(new CustomEvent("fields-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:e?e.detail:this}))}/**
   * fires when either the eco-json-schema-object or the simple-fields object changes the value
   * @param {object} oldValue the old value
   * @param {object} newValue the new value
   */},{key:"_valueChanged",value:function _valueChanged(newValue,oldValue){if(JSON.stringify(oldValue)!==JSON.stringify(newValue)){this._setValues();/**
       * Fires when value changes
       * @event value-changed
       */this.dispatchEvent(new CustomEvent("value-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}}/**
   * fires when the fields array changes
   * @param {object} oldValue the old value
   * @param {object} newValue the new value
   */},{key:"_fieldsChanged",value:function _fieldsChanged(newValue,oldValue){//prevent a potential feedback loop
if(JSON.stringify(oldValue)!==JSON.stringify(newValue)){this._setValues()}}/**
   * when either the fields or the value changes, updates the schema and form to match
   */},{key:"_setValues",value:function _setValues(){var wiring=new _HAXWiring.HAXWiring,schema=wiring._getHaxJSONSchemaProperty(this.fields,wiring);for(var prop in this.value){if(schema[prop])schema[prop].value=this.value[prop]}this.set("__validatedSchema",{properties:schema});this.notifyPath("__validatedSchema.properties.*")}}],[{key:"template",// render function
get:function get(){return(0,_polymerElement.html)(_templateObject_b2451370696b11eabd167f7c8887b3bc())}// haxProperty definition
},{key:"haxProperties",get:function get(){return{}}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return _objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields),"properties",this),{/**
       * automatically set focus on the first field if that field has autofocus
       */autofocus:{type:Boolean,value:!1},/**
       * hide code-editor line numbers
       */hideLineNumbers:{type:Boolean,value:!1},/**
       * Fields to convert toJSON Schema.
       */fields:{type:Array,value:[],observer:"_formFieldsChanged"},/**
       * Returned value from the form input.
       */value:{type:Object,notify:!0,value:{},observer:"_valueChanged"},/**
       * Fields to convert to JSON Schema.
       */__validatedSchema:{type:Array,notify:!0,value:{properties:{}}}})}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"simple-fields"}}]);return SimpleFields}((0,_mutableData.MutableData)(_polymerElement.PolymerElement));_exports.SimpleFields=SimpleFields;window.customElements.define(SimpleFields.tag,SimpleFields)});