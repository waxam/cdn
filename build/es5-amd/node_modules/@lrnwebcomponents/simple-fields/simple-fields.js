define(["exports", "../../@polymer/polymer/polymer-element.js", "../hax-body-behaviors/lib/HAXWiring.js", "../../@polymer/polymer/lib/mixins/mutable-data.js", "../../@polymer/paper-toggle-button/paper-toggle-button.js", "../../@polymer/paper-button/paper-button.js", "../../@polymer/paper-input/paper-textarea.js", "../../@polymer/iron-icons/iron-icons.js", "../eco-json-schema-form/eco-json-schema-form.js", "../eco-json-schema-form/lib/eco-json-schema-object.js", "../code-editor/code-editor.js", "../simple-picker/simple-picker.js", "../simple-icon-picker/simple-icon-picker.js", "../simple-colors/lib/simple-colors-picker.js", "../paper-input-flagged/paper-input-flagged.js", "../simple-colors/simple-colors.js"], function (_exports, _polymerElement, _HAXWiring, _mutableData, _paperToggleButton, _paperButton, _paperTextarea, _ironIcons, _ecoJsonSchemaForm, _ecoJsonSchemaObject, _codeEditor, _simplePicker, _simpleIconPicker, _simpleColorsPicker, _paperInputFlagged, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleFields = void 0;

  function _templateObject_def018f0b46e11e9978b67ee5ebb8bc8() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          background-color: #ffffff;\n          overflow: hidden;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        eco-json-schema-object {\n          width: 50%;\n        }\n        eco-json-schema-object {\n          color: var(--hax-text-color);\n          --eco-json-form-color: var(--hax-text-color);\n          --eco-json-schema-object-form : {\n            -ms-flex: unset;\n            -webkit-flex: unset;\n            flex: unset;\n            -webkit-flex-basis: unset;\n            flex-basis: unset;\n          }\n        }\n        eco-json-schema-object .hax-code-editor {\n          padding: 0;\n        }\n      </style>\n      <eco-json-schema-object\n        id=\"schemaobject\"\n        autofocus$=\"[[autofocus]]\"\n        hide-line-numbers$=\"[[hideLineNumbers]]\"\n        on-form-changed=\"_formChanged\"\n        schema=\"[[__validatedSchema]]\"\n        value=\"{{value}}\"\n      ></eco-json-schema-object>\n    "]);

    _templateObject_def018f0b46e11e9978b67ee5ebb8bc8 = function _templateObject_def018f0b46e11e9978b67ee5ebb8bc8() {
      return data;
    };

    return data;
  }

  /**
   * `simple-fields`
   * `Uses eco-json-form and HAX wiring to display a series of fields`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var SimpleFields =
  /*#__PURE__*/
  function (_MutableData) {
    babelHelpers.inherits(SimpleFields, _MutableData);

    function SimpleFields() {
      babelHelpers.classCallCheck(this, SimpleFields);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleFields).apply(this, arguments));
    }

    babelHelpers.createClass(SimpleFields, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields.prototype), "connectedCallback", this).call(this);
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(SimpleFields.haxProperties, SimpleFields.tag, this);
      }
      /**
       * when form changes, sets focus on the first field if this has auto-focus
       */

    }, {
      key: "_formChanged",
      value: function _formChanged(e) {
        this.dispatchEvent(new CustomEvent("fields-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: e.detail
        }));
      }
      /**
       * fires when either the eco-json-schema-object or the simple-fields object changes the value
       * @param {object} oldValue the old value
       * @param {object} newValue the new value
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(oldValue, newValue) {
        //prevent a feddback loop when the eco-json-schema-object's values change to reflect the changes to simple-fields
        if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
          this._setValues();
        }
      }
      /**
       * fires when the fields array changes
       * @param {object} oldValue the old value
       * @param {object} newValue the new value
       */

    }, {
      key: "_fieldsChanged",
      value: function _fieldsChanged(oldValue, newValue) {
        //prevent a potential feedback loop
        if (JSON.stringify(oldValue) !== JSON.stringify(newValue)) {
          this._setValues();
        }
      }
      /**
       * when either the fields or the value changes, updates the schema and form to match
       */

    }, {
      key: "_setValues",
      value: function _setValues() {
        var wiring = window.HAXWiring,
            schema = wiring._getHaxJSONSchemaProperty(this.fields, wiring);

        for (var prop in this.value) {
          if (schema[prop]) schema[prop].value = this.value[prop];
        } //form won't refresh unless we set it to null. notifyPath wasn't enough to refresh it


        this.__validatedSchema = null;
        this.__validatedSchema = {
          properties: schema
        };
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_def018f0b46e11e9978b67ee5ebb8bc8());
      } // haxProperty definition

    }, {
      key: "haxProperties",
      get: function get() {
        return;
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * automatically set focus on the first field if that field has autofocus
           */
          autofocus: {
            type: Boolean,
            value: false
          },

          /**
           * hide code-editor line numbers
           */
          hideLineNumbers: {
            type: Boolean,
            value: false
          },

          /**
           * Fields to conver toJSON Schema.
           */
          fields: {
            type: Array,
            value: [],
            observer: "_fieldsChanged"
          },

          /**
           * Returned value from the form input.
           */
          value: {
            type: Object,
            notify: true,
            value: {},
            observer: "_valueChanged"
          },

          /**
           * Fields to conver to JSON Schema.
           */
          __validatedSchema: {
            type: Array,
            value: {
              properties: {}
            }
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields), "properties", this));
        }

        return props;
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-fields";
      }
    }]);
    return SimpleFields;
  }((0, _mutableData.MutableData)(_polymerElement.PolymerElement));

  _exports.SimpleFields = SimpleFields;
  window.customElements.define(SimpleFields.tag, SimpleFields);
});