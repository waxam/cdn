define(["exports","require","../../lit-element/lit-element.js","./lib/simple-fields-lite.js"],function(_exports,_require,_litElement,_simpleFieldsLite){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.SimpleFields=void 0;_require=babelHelpers.interopRequireWildcard(_require);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _templateObject2_df2b11907a9c11ea8ed6ed8c9eef0ab1(){var data=babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --simple-picker-background-color: var(\n            --simple-fields-background-color,\n            white\n          );\n          --simple-picker-border-width: 0;\n          --simple-picker-focus-border-width: 0;\n          --simple-picker-display: block;\n          --simple-picker-listbox-border-width: 1px;\n          --simple-picker-listbox-outline: none;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      "]);_templateObject2_df2b11907a9c11ea8ed6ed8c9eef0ab1=function _templateObject2_df2b11907a9c11ea8ed6ed8c9eef0ab1(){return data};return data}function _templateObject_df2b11907a9c11ea8ed6ed8c9eef0ab1(){var data=babelHelpers.taggedTemplateLiteral(["\n      <div id=\"schema-fields\" aria-live=\"polite\">\n        <slot></slot>\n      </div>\n    "]);_templateObject_df2b11907a9c11ea8ed6ed8c9eef0ab1=function _templateObject_df2b11907a9c11ea8ed6ed8c9eef0ab1(){return data};return data}/**
 * `simple-fields`
 * Uses JSON Schema to display a series of fields
 * 
### Styling
`<simple-fields>` provides following custom properties
for styling:

Custom property | Description | Default
----------------|-------------|--------
`--simple-fields-margin` | vertical margin around container | 16px
`--simple-fields-margin-small` | smaller vertical margin above field itself | 8px
`--simple-fields-border-radus` | default border-radius | 2px
`--simple-fields-color` | text color | black
`--simple-fields-error-color` | error text color | #dd2c00
`--simple-fields-accent-color` | accent text/underline color | #3f51b5
`--simple-fields-border-color` | border-/underline color | #999
`--simple-fields-border-color-light` | used for range tracks | #ccc
`--simple-fields-faded-error-color` | used for range tracks | #ff997f

#### Field text
Custom property | Description | Default
----------------|-------------|--------
`--simple-fields-font-size` | font-size of field | 16px
`--simple-fields-font-family` | font-size of field | sans-serif
`--simple-fields-line-height` | line-height of field | 22px

#### Detail text
Custom property | Description | Default
----------------|-------------|--------
`--simple-fields-detail-font-size` | font-size of field details | 12px
`--simple-fields-detail-font-family` | font-size of field details | sans-serif
`--simple-fields-detail-line-height` | line-height of field details | 22px

#### Disabled Fields
Custom property | Description | Default
----------------|-------------|--------
`--simple-fields-disabled-color` | disabled text color | #999
`--simple-fields-disabled-opacity` | opacity for disabled field | 0.7

#### Radio Buttons and Checkboxes
Custom property | Description | Default
----------------|-------------|--------
`--simple-fields-radio-option-display` | display label with field (flex) or above (block) | flex
`--simple-fields-radio-option-flex-wrap` | allow radio options to wrap to next line | wrap

### Configuring schemaConverstion Property
You can customise elements from JSON schema conversion by setting `schemaConverstion` property.
```
type: {                                       //For properties in "this.schema", define elements based on a property's "type"
  object: {                                   //Defines element used when property's "type" is an "object"
    format: {                                 //Optional: define elements for "object" properties by "format"
      "tabs": {                               //Defines element used for object properties when "format" is "tabs"
        element: "a11y-tabs"                  //Element to create, eg. "paper-input", "select", "simple-fields-array", etc.
        descriptionProperty: "description"    //Optional: element's property that sets its description, e.g. "description"
        descriptionSlot: "description"        //Optional: element's slot that contains its description, e.g. "description"
        errorProperty: "error"                //Optional: element's property that sets its error status, e.g. "error"
        errorChangedProperty: "error"         //Optional: event element fires when error status changes, e.g. "error-changed"
        errorMessageProperty: "errorMessage"  //Optional: element's property that sets its error message, e.g. "errorMessage"
        errorMessageSlot: "errorMessage"      //Optional: element's slot that contains its error message, e.g. "errorMessage"
        labelProperty: "label"                //Optional: element's property that sets its label, e.g. "label"
        labelSlot: "label"                    //Optional: element's slot that contains its label, e.g. "label"
        valueProperty: "value"                //Optional: element's property that gets its value, e.g. "value" or "checked"
        setValueProperty: "value"             //Optional: element's property that sets its value, e.g. "value" or "checked" (default is same as valueProperty)
        valueChangedProperty: "value-changed" //Optional: event element fires when value property changes, e.g. "value-changed" or "click"
        valueSlot: ""                         //Optional: element's slot that's used to set its value, e.g. ""
        description: ""                       //Optional: element that contains description, e.g. "p", "span", "paper-tooltip", etc.
        child: {                              //Optional: child elements to be appended
          element: "a11y-tab"                 //Optional: type of child element, eg. "paper-input", "select", "simple-fields-array", etc.
          attributes: {                       //Optional: sets child element's attributes based on this.schemaConversion
            disabled: true                    //Example: sets disabled to true  
          } 
          properties: {                       //Optional: sets child element's attributes based on this.schema properties
            icon: "iconName"                  //Example: sets child element's icon property to this.schema property's iconName 
          }, 
          slots: {                            //Optional: inserts schema properties in child element's slots
            label: "label",                   //Example: places schema property's label into child element's label slot
            "": "description"                 //Example: places schema property's description into child element's unnamed slot
          } 
        },
        attributes: {},
        properties: {},
        slots: {}
      }
    },
    defaultSettings: {                        //Default element used for object properties
      element: ""
      label: ""
      description: ""     
      attributes: {}       
      properties: {}       
      slots: {}           
    }
  }
}
``` 
### Configuring fieldsConversion Property
You can customise fields to JSON schema conversion by setting `fieldsConversion` property.
```
defaultSettings: {            //default JSON schema type if no type is matched
  type: "string"              //sets JSON schema type to string
},
inputMethod: {                //for fields in "this.fields", define elements based on a property's "inputMethod"
  colorpicker: {              //settings if inputMethod is color picker
    defaultSettings: {        //default colorpicker settings
      type: "string",         //sets JSON schema type to string
      format: "color"         //sets JSON schema format to color
    }
  }
}
``` 
 * @element simple-fields
 * @extends simple-fields-lite
 * @demo ./demo/index.html
 * @demo ./demo/schema.html Schema
 * @demo ./demo/form.html Form
 */var SimpleFields=/*#__PURE__*/function(_SimpleFieldsLite){babelHelpers.inherits(SimpleFields,_SimpleFieldsLite);babelHelpers.createClass(SimpleFields,[{key:"render",// render function
value:function render(){return(0,_litElement.html)(_templateObject_df2b11907a9c11ea8ed6ed8c9eef0ab1())}// haxProperty definition
}],[{key:"styles",//styles function
get:function get(){return[].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields),"styles",this)),[(0,_litElement.css)(_templateObject2_df2b11907a9c11ea8ed6ed8c9eef0ab1())])}},{key:"haxProperties",get:function get(){return{}}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return _objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields),"properties",this),{/**
       * Fields to convert to JSON Schema.
       */fields:{type:Array},/**
       * Conversion from inputMethods to JSON schema types and formats.
       * _See [Configuring fieldsConversion Property](configuring-the-fieldsconversion-property) above._
       */fieldsConversion:{type:Object},/**
       * Schema label
       */label:{type:String},/**
       * tracks all activeTabs as an object
       */__activeTabs:{type:Object,attribute:"active-path"}})}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"simple-fields"}}]);function SimpleFields(){var _format,_this;babelHelpers.classCallCheck(this,SimpleFields);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(SimpleFields).call(this));_this.activeTabs={};_this.fieldsConversion={defaultSettings:{type:"string"},inputMethod:{alt:{defaultSettings:{type:"string",format:"alt"}},array:{defaultSettings:{type:"array"},properties:{label:"itemLabel"}},boolean:{defaultSettings:{type:"boolean"}},code:{defaultSettings:{type:"markup"}},"code-editor":{defaultSettings:{type:"markup"}},color:{defaultSettings:{type:"string",format:"color"}},colorpicker:{defaultSettings:{type:"string",format:"colorpicker"}},"date-time":{defaultSettings:{type:"string",format:"date-time"}},datepicker:{defaultSettings:{type:"string",format:"date"}},fieldset:{defaultSettings:{type:"object"}},haxupload:{defaultSettings:{type:"string",format:"haxupload"}},iconpicker:{defaultSettings:{type:"string",format:"iconpicker"}},markup:{defaultSettings:{type:"markup"}},monthpicker:{defaultSettings:{type:"string",format:"month"}},number:{defaultSettings:{type:"number"}},object:{defaultSettings:{type:"object"}},select:{defaultSettings:{type:"string",format:"select"}},slider:{defaultSettings:{type:"number",format:"slider"}},tabs:{defaultSettings:{type:"object",format:"tabs"}},textarea:{defaultSettings:{type:"string",format:"textarea"}},timepicker:{defaultSettings:{type:"string",format:"time"}},weekpicker:{defaultSettings:{type:"string",format:"week"}}}};_this.schemaConversion={defaultSettings:{element:"simple-fields-field",errorProperty:"errorMessage",invalidProperty:"invalid",noWrap:!0,attributes:{type:"text"},properties:{minLength:"minlength",maxLength:"maxlength"}},format:{radio:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"radio"},properties:{options:"options"},child:{element:"simple-fields-array-item",noWrap:!0,descriptionProperty:"description",properties:{previewBy:"previewBy"}}}},select:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"select"},properties:{options:"options",items:"itemsList"}}},"simple-picker":{defaultSettings:{element:"simple-picker",attributes:{autofocus:!0},properties:{options:"options"}}}},type:{array:{defaultSettings:{element:"simple-fields-array",noWrap:!0,descriptionProperty:"description",child:{element:"simple-fields-array-item",noWrap:!0,descriptionProperty:"description",properties:{previewBy:"previewBy"}}}},boolean:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"checkbox",value:!1}}},file:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"file"},properties:{accepts:"accepts"}}},integer:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,step:1,type:"number"},properties:{minimum:"min",maximum:"max",multipleOf:"step"}}},markup:{defaultSettings:{element:"simple-fields-code",setValueProperty:"editorValue",noWrap:!0}},number:{defaultSettings:{element:"simple-fields-field",noWrap:!0,type:"number",attributes:{autofocus:!0,type:"number"},properties:{minimum:"min",maximum:"max",multipleOf:"step"}}},object:{defaultSettings:{element:"simple-fields-fieldset",noWrap:!0},format:{tabs:{defaultSettings:{element:"simple-fields-tabs",noWrap:!0,child:{element:"simple-fields-tab",noWrap:!0,labelSlot:"label",descriptionSlot:""},attributes:{"layout-breakpoint":0}}}}},string:{format:(_format={alt:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,required:!0}}},color:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"color"}}},colorpicker:{defaultSettings:{element:"simple-colors-picker",attributes:{autofocus:!0}}},date:{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"date"}}},"date-time":{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"datetime-local"}}}},babelHelpers.defineProperty(_format,"date",{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"date"}}}),babelHelpers.defineProperty(_format,"email",{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"email"}}}),babelHelpers.defineProperty(_format,"haxupload",{defaultSettings:{element:"hax-upload-field",noWrap:!0,attributes:{autofocus:!0}}}),babelHelpers.defineProperty(_format,"iconpicker",{defaultSettings:{element:"simple-icon-picker",attributes:{autofocus:!0}}}),babelHelpers.defineProperty(_format,"month",{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"month"}}}),babelHelpers.defineProperty(_format,"textarea",{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"textarea"}}}),babelHelpers.defineProperty(_format,"time",{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"time"}}}),babelHelpers.defineProperty(_format,"uri",{defaultSettings:{element:"simple-fields-field",noWrap:!0,attributes:{autofocus:!0,type:"file"}}}),_format)}}};_this.addEventListener("active-tab-changed",_this._handleActiveTab);setTimeout(function(){new Promise(function(res,rej){return _require.default(["./lib/simple-fields-field.js"],res,rej)});new Promise(function(res,rej){return _require.default(["./lib/simple-fields-tabs.js"],res,rej)});new Promise(function(res,rej){return _require.default(["./lib/simple-fields-code.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../hax-body/lib/hax-upload-field.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../simple-picker/simple-picker.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../simple-colors/lib/simple-colors-picker.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../simple-icon-picker/simple-icon-picker.js"],res,rej)})},0);return _this}/**
   * fields converted to JSON schema =
   *
   * @readonly
   * @returns object
   * @memberof SimpleFieldsLite
   */babelHelpers.createClass(SimpleFields,[{key:"updated",value:function updated(changedProperties){var _this2=this;babelHelpers.get(babelHelpers.getPrototypeOf(SimpleFields.prototype),"updated",this).call(this,changedProperties);changedProperties.forEach(function(oldValue,propName){if("fields"===propName)_this2.schema=_this2.convertedSchema;if("__activeTabs"===propName&&_this2.activeTabs!==oldValue)_this2._handleActiveTabs()})}/**
   * updates the active tabs object
   *
   * @param {string} tabId, eg. 'settings.permisions.groups'
   * @memberof SimpleFields
   */},{key:"setActiveTab",value:function setActiveTab(tabId){var tabsId=tabId.replace(/\.[0-9a-z]+$/,""),tabs=this.querySelector("#".concat(tabsId)),tab=tabs.querySelector("#".concat(tabId));if(tabs&&tab)tabs.activeTab=tabId}/**
   * sets active tabs by path, eg. 'settings/permissions/groups'
   *
   * @param {string} path, eg. 'settings/permissions/groups'
   * @memberof SimpleFields
   */},{key:"setActivePath",value:function setActivePath(path){var _this3=this,parts=path.split("/"),tabId="";parts.forEach(function(part){_this3.setActiveTab(part);tabId+=part})}/**
   * matches schema property to fieldsConversion settings
   * @param {object} field fields array item
   * @param {object} conversion section of fieldsConverstion to search
   * @param {object} settings closest current match's defaultSettings object
   * @returns {object}
   * @memberof SimpleFieldsLite
   */},{key:"_convertField",value:function _convertField(field){var _this4=this,conversion=1<arguments.length&&arguments[1]!==void 0?arguments[1]:this.fieldsConversion,settings=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{},fieldKeys=Object.keys(field||{}),convKeys=Object.keys(conversion||{}).filter(function(key){return fieldKeys.includes(key)});if(conversion.defaultSettings)settings=conversion.defaultSettings;convKeys.forEach(function(key){var val=field[key],convData=conversion?conversion[key]:void 0,convVal=!convData?void 0:Array.isArray(val)?convData[val[0]]:convData[val];if(convVal)settings=_this4._convertField(field,convVal,settings)});return settings}/**
   * converts fields array to schema properties
   * @param {object} field field object to convert
   * @returns object schema properties
   * @memberof SimpleFieldsLite
   */},{key:"_fieldToSchema",value:function _fieldToSchema(field){var _this5=this,schema={};Object.keys(field||{}).forEach(function(key){if(!field.inputMethod&&field.properties)field.inputMethod="object";var conversion=_this5._convertField(field);if(conversion.type)schema.type=conversion.type;if(conversion.format)schema.format=conversion.format;if("pattern"===key){if(".*"!=field.validation)schema.pattern=field.validation}else if("properties"===key){if("array"===conversion.type&&Array.isArray(field.properties)){schema.items={type:"object",properties:_this5.fieldsToSchema(field.properties)}}else if("array"===conversion.type){schema.items=_this5._fieldToSchema(field.properties)}else{schema.properties=_this5.fieldsToSchema(field.properties)}/*} else if (key === "slot") {
        schema[key] = !field[key] || field[key] === "" 
          ? "unnamed-slot-placeholder" 
          : field[key];*/}else if(!["items","inputMethod","property","properties","required","type","validation"].includes(key)){schema[key]=field[key]}});return schema}/**
   * converts fields array to schema properties
   * @param {*} fields fields array to convert
   * @returns object schema properties
   * @memberof SimpleFieldsLite
   */},{key:"fieldsToSchema",value:function fieldsToSchema(fields){var _this6=this,schema={};if(fields&&fields.forEach){fields.forEach(function(field){var prop=!field.property?"":field.property;schema[prop]=_this6._fieldToSchema(field)})}return schema}/**
   * handles active tabs changes
   *
   * @event "active-tabs-changed"
   * @memberof SimpleFields
   */},{key:"_handleActiveTabs",value:function _handleActiveTabs(){this.dispatchEvent(new CustomEvent("active-tabs-changed",{bubbles:!0,cancelable:!0,composed:!1,detail:this}))}/**
   * updates the active tabs object
   *
   * @param {event} e
   * @memberof SimpleFields
   */},{key:"_handleActiveTab",value:function _handleActiveTab(e){if(e&&e.detail&&e.detail.id)this.activeTabs[e.detail.id]=e.detail.activeTab}},{key:"convertedSchema",get:function get(){var schema={$schema:"http://json-schema.org/schema#",title:this.label,type:"object",required:[],properties:this.fieldsToSchema(this.fields)};return schema}}]);return SimpleFields}(_simpleFieldsLite.SimpleFieldsLite);_exports.SimpleFields=SimpleFields;window.customElements.define(SimpleFields.tag,SimpleFields)});