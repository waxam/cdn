define(["exports", "../../../lit-element/lit-element.js", "../../../@polymer/iron-icons/iron-icons.js"], function (_exports, _litElement, _ironIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yTab = void 0;

  function _templateObject2_8d2841c0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          height: var(--a11y-tabs-tab-height, --a11y-tabs-height);\n          overflow: var(--a11y-tabs-tab-overflow, --a11y-tabs-overflow);\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        .sr-only {\n          position: absolute;\n          left: -99999px;\n          height: 0;\n          overflow: hidden;\n        }\n        #content-inner {\n          max-width: 100%;\n          overflow: auto;\n        }\n        ::slotted(*[slot=\"label\"]) {\n          display: none;\n        }\n      "]);

    _templateObject2_8d2841c0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8d2841c0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8d2841c0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <span class=\"sr-only\">Tab ", "</span>\n      <slot name=\"label\"></slot>\n      <div id=\"content-inner\"><slot></slot></div>\n      <span class=\"sr-only\">\n        End of tab ", ". Back to <a href=\"#", "\">tabs</a>.\n      </span>\n    "]);

    _templateObject_8d2841c0c96f11ea8be5e1d5fe7ec787 = function _templateObject_8d2841c0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-tab`
   * a single tab within `a11y-tabs`
   * 
  ### Styling
  
  `<a11y-tab>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--a11y-tabs-tab-height` | tab height | `--a11y-tabs-height`
  `--a11y-tabs-tab-overflow` | tab overflow | `--a11y-tabs-overflow`
   *
   * @element a11y-tab
   * @see ../a11y-tabs.js
   */
  var A11yTab =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(A11yTab, _LitElement);
    babelHelpers.createClass(A11yTab, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8d2841c0c96f11ea8be5e1d5fe7ec787(), this.xOfY, this.xOfY, this.id);
      } // haxProperty definition

    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_8d2841c0c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Tab",
            description: "A single tab.",
            icon: "view-day",
            color: "grey",
            groups: ["Content", "Presentation", "Tabs"]
          },
          settings: {
            quick: [{
              property: "disabled",
              title: "Disabled",
              inputMethod: "boolean"
            }, {
              property: "sticky",
              title: "Sticky.",
              desc: "Horizontal tabs stick to the top of the window when scrolling.",
              inputMethod: "boolean"
            }],
            configure: [{
              property: "icon",
              title: "Tab Icon",
              inputMethod: "iconpicker"
            }, {
              property: "disabled",
              title: "Disabled",
              inputMethod: "boolean"
            }, {
              property: "label",
              title: "Tab Label",
              inputMethod: "textfield"
            }, {
              slot: "",
              title: "Tab Content",
              description: "A content of the tab.",
              inputMethod: "code-editor"
            }],
            advanced: [{
              property: "id",
              title: "Unique ID",
              inputMethod: "textfield"
            }, {
              property: "flag",
              title: "Optional Flag Text",
              inputMethod: "textfield"
            }, {
              property: "flagIcon",
              title: "Optional Flag Icon",
              inputMethod: "iconpicker"
            }]
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * optional flag the tab, eg. `new`, `alert`, or `error`
           */
          flag: {
            type: String,
            reflect: true
          },

          /**
           * optional flag icon the tab, eg. `av:fiber-new`, `icons:warning`, or `icons:error`
           */
          flagIcon: {
            type: String,
            attribute: "flag-icon"
          },

          /**
           * whether the tabbed interface is disabled
           */
          disabled: {
            type: Boolean,
            reflect: true,
            attribute: "disabled"
          },

          /**
           * whether the tab is hidden
           */
          hidden: {
            type: Boolean,
            reflect: true,
            attribute: "hidden"
          },

          /**
           * icon for this tab, eg. `maps:local-airport`, `maps:local-bar`, or `notification:wifi`
           */
          icon: {
            type: String
          },

          /**
           * the unique identifier and anchor for the tab
           */
          id: {
            type: String,
            reflect: true,
            attribute: "id"
          },

          /**
           * label for the tab
           */
          label: {
            type: String
          },

          /**
           * order of the tab
           */
          order: {
            type: Number
          },

          /**
           * total number of tabs
           */
          total: {
            type: Number
          }
        };
      }
    }]);

    function A11yTab() {
      var _this;

      babelHelpers.classCallCheck(this, A11yTab);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yTab).call(this));
      _this.disabled = false;
      _this.hidden = false;
      _this.order = 1;
      _this.total = 1;

      _this.addEventListener("a11y-tab-flag", function (e) {
        return _this.handleFlag(e);
      });

      return _this;
    }
    /**
     * returns mutation observer
     * @readonly
     * @returns {object} MutationObserver to unwrap contents
     */


    babelHelpers.createClass(A11yTab, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yTab.prototype), "connectedCallback", this).call(this);

        this._labelChanged();

        this.observer.observe(this, {
          childList: true
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this2 = this;

        this.observer.disconnect();
        this.removeEventListener("a11y-tab-flag", function (e) {
          return _this2.handleFlag(e);
        });

        this._fireTabChanged();

        babelHelpers.get(babelHelpers.getPrototypeOf(A11yTab.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * @fires a11y-tab-changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["id", "order"].includes(propName) && !_this3.id) _this3.id = "tab-".concat(_this3.order);
          if (["label", "order"].includes(propName) && !_this3.label) _this3._labelChanged();
          if (propName === "flag") _this3._fireTabChanged();
          if (propName === "flagIcon") _this3._fireTabChanged();
          if (propName === "icon") _this3._fireTabChanged();
          if (propName === "id") _this3._fireTabChanged();
          if (propName === "label") _this3._fireTabChanged();
          if (propName === "disabled" && _this3.disabled) _this3._fireTabChanged();
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "_handleFlag",

      /**
       * handles any change in flag
       * @param {event} e the tab change event
       */
      value: function _handleFlag(e) {
        this.flag = e.detail.flag;
        this.flagIcon = e.detail.flagIcon;
      }
      /**
       * handles any change in the label
       */

    }, {
      key: "_labelChanged",
      value: function _labelChanged() {
        if (!this.label || this.label.trim() === "") this.label = this.querySelector('*[slot="label"]') ? this.querySelector('*[slot="label"]').innerHTML : "Tab ".concat(this.order);
      }
      /**
       * handles any change in the tab attributes
       * @event a11y-tab-changed
       */

    }, {
      key: "_fireTabChanged",
      value: function _fireTabChanged() {
        this.dispatchEvent(new CustomEvent("a11y-tab-changed", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: this
        }));
      }
    }, {
      key: "observer",
      get: function get() {
        var _this4 = this;

        var lc = function lc(e) {
          return _this4._labelChanged();
        };

        return new MutationObserver(lc);
      }
      /**
       * gets x of y string
       *
       * @readonly
       * @returns {string} eg., "1 of 2"
       */

    }, {
      key: "xOfY",
      get: function get() {
        return "".concat(this.order, " of ").concat(this.total);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "a11y-tab";
      }
    }]);
    return A11yTab;
  }(_litElement.LitElement);

  _exports.A11yTab = A11yTab;
  window.customElements.define(A11yTab.tag, A11yTab);
});