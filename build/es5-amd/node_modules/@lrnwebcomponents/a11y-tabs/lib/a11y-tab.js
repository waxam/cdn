define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/iron-icons/iron-icons.js", "../../../@polymer/iron-a11y-keys/iron-a11y-keys.js"], function (_exports, _polymerElement, _ironIcons, _ironA11yKeys) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yTab = void 0;

  function _templateObject_702127b0b54611e9b6ba27231b6f684a() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          @apply --a11y-tab-content;\n        }\n        :host([flag]) {\n          @apply --a11y-tab-flagged-content;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -99999px;\n          height: 0;\n          overflow: hidden;\n        }\n      </style>\n      <span class=\"sr-only\">Tab [[__xOfY]]</span>\n      <slot></slot>\n      <span class=\"sr-only\"\n        >End of tab [[__xOfY]]. Back to <a href$=\"[[__toTop]]\">tabs</a>.</span\n      >\n    "]);

    _templateObject_702127b0b54611e9b6ba27231b6f684a = function _templateObject_702127b0b54611e9b6ba27231b6f684a() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-tab`
   * `accessible and responsive tabbed interface`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var A11yTab =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(A11yTab, _PolymerElement);

    function A11yTab() {
      babelHelpers.classCallCheck(this, A11yTab);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yTab).apply(this, arguments));
    }

    babelHelpers.createClass(A11yTab, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(A11yTab.prototype), "connectedCallback", this).call(this);
        this.__target = this;
        this.addEventListener("a11y-tab-flag", function (e) {
          _this.flag = e.detail.flag;
          _this.flagIcon = e.detail.flagIcon;
        });
      }
      /**
       * handles any change in the tab attributes
       * @param {event} e the tab change event
       */

    }, {
      key: "_tabChanged",
      value: function _tabChanged(e) {
        var root = this;
        this.dispatchEvent(new CustomEvent("a11y-tab-changed", {
          bubbles: true,
          cancelable: true,
          composed: false,
          detail: this
        }));
      }
    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_702127b0b54611e9b6ba27231b6f684a());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * the unique identifier and anchor for the tab
           */
          id: {
            name: "id",
            type: "String",
            value: null,
            observer: "_tabChanged"
          },

          /**
           * optional flag the tab, eg. `new`, `alert`, or `error`
           */
          flag: {
            name: "flag",
            type: "String",
            value: null,
            observer: "_tabChanged",
            reflectToAttribute: true
          },

          /**
           * optional flag icon the tab, eg. `av:fiber-new`, `icons:warning`, or `icons:error`
           */
          flagIcon: {
            name: "flagIcon",
            type: "String",
            value: null,
            observer: "_tabChanged"
          },

          /**
           * icon for this tab, eg. `maps:local-airport`, `maps:local-bar`, or `notification:wifi`
           */
          icon: {
            name: "id",
            type: "String",
            value: null,
            observer: "_tabChanged"
          },

          /**
           * label for the tab
           */
          label: {
            name: "label",
            type: "String",
            value: null,
            observer: "_tabChanged"
          },

          /**
           * whether the tab is hidden
           */
          hidden: {
            name: "hidden",
            type: "Boolean",
            value: false,
            reflectToAttribute: true
          },

          /**
           * the anchor back to the top of the tab list (`a11y-tabs` id)
           */
          __toTop: {
            name: "__toTop",
            type: "String",
            value: null
          },

          /**
           * tab x of y text, eg. `2 of 3`
           */
          __xOfY: {
            name: "__xOfY",
            type: "String",
            value: null
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "a11y-tab";
      }
    }]);
    return A11yTab;
  }(_polymerElement.PolymerElement);

  _exports.A11yTab = A11yTab;
  window.customElements.define(A11yTab.tag, A11yTab);
});