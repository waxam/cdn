define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../../@polymer/iron-ajax/iron-ajax.js", "../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "../simple-modal/simple-modal.js"], function (_exports, _require, _polymerElement, _renderStatus, _ironAjax, _ironA11yKeys, _simpleModal) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignImagemap = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_88e0d410c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host #buttons {\n          position: absolute;\n          left: -999999px;\n          top: 0;\n          overflow: hidden;\n          opacity: 0;\n        }\n        /*::slotted([hotspot]) {\n        display: none;\n      }*/\n        @media print {\n          :host > #svg {\n            display: none;\n          }\n          /*::slotted(#screen-only) {\n          display: none;\n        }\n        ::slotted([hotspot]) {\n          display: block;\n        }*/\n        }\n      </style>\n      <relative-heading\n        hidden$=\"[[!label]]\"\n        id=\"heading\"\n        subtopic-of$=\"[[subtopicOf]]\"\n        tag$=\"[[tag]]\"\n        text$=\"[[label]]\"\n      >\n      </relative-heading>\n      <div id=\"desc\"><slot name=\"desc\"></slot></div>\n      <div id=\"svg\"></div>\n      <div id=\"buttons\"></div>\n      <slot></slot>\n      <iron-ajax\n        auto=\"\"\n        id=\"get_svg\"\n        url=\"[[src]]\"\n        handle-as=\"text\"\n        on-response=\"_getSVGHandler\"\n      ></iron-ajax>\n    "], ["\n      <style>\n        :host {\n          display: block;\n        }\n        :host #buttons {\n          position: absolute;\n          left: -999999px;\n          top: 0;\n          overflow: hidden;\n          opacity: 0;\n        }\n        /*::slotted([hotspot]) {\n        display: none;\n      }*/\n        @media print {\n          :host > #svg {\n            display: none;\n          }\n          /*::slotted(#screen-only) {\n          display: none;\n        }\n        ::slotted([hotspot]) {\n          display: block;\n        }*/\n        }\n      </style>\n      <relative-heading\n        hidden\\$=\"[[!label]]\"\n        id=\"heading\"\n        subtopic-of\\$=\"[[subtopicOf]]\"\n        tag\\$=\"[[tag]]\"\n        text\\$=\"[[label]]\"\n      >\n      </relative-heading>\n      <div id=\"desc\"><slot name=\"desc\"></slot></div>\n      <div id=\"svg\"></div>\n      <div id=\"buttons\"></div>\n      <slot></slot>\n      <iron-ajax\n        auto=\"\"\n        id=\"get_svg\"\n        url=\"[[src]]\"\n        handle-as=\"text\"\n        on-response=\"_getSVGHandler\"\n      ></iron-ajax>\n    "]);

    _templateObject_88e0d410c96f11ea8be5e1d5fe7ec787 = function _templateObject_88e0d410c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `lrndesign-imagemap`
   * @element lrndesign-imagemap
   * creates an accessible image map
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var LrndesignImagemap =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrndesignImagemap, _PolymerElement);

    function LrndesignImagemap() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignImagemap);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrndesignImagemap).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../relative-heading/relative-heading.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/lrndesign-imagemap-hotspot.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(LrndesignImagemap, [{
      key: "connectedCallback",

      /**
       * attached life cycle
       */
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignImagemap.prototype), "connectedCallback", this).call(this);
        window.SimpleModal.requestAvailability();
        window.addEventListener("simple-modal-closed", function (e) {
          if (e.detail.invokedBy === _this2) {
            _this2.closeHotspot();
          }
        });
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this3 = this;

        window.removeEventListener("simple-modal-closed", function (e) {
          if (e.detail.invokedBy === _this3) {
            _this3.closeHotspot();
          }
        });
        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignImagemap.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Convert from svg text to an array in the table function
       */

    }, {
      key: "_getSVGHandler",
      value: function _getSVGHandler(e) {
        var _this4 = this;

        var root = this,
            temp = document.createElement("div"),
            getID = function getID(element, alt) {
          if (element.getAttribute("id") === null) element.setAttribute("id", alt);
          return element.getAttribute("id");
        };

        var setAriaLabelledBy = function setAriaLabelledBy(source, target, prefix) {
          // adds title and desc elements to target and sets the aria-labelledby attribute
          var svgElem = function svgElem(nodename) {
            source = source !== null ? source : root; //adds title or desc element to target

            var attr = nodename === "title" ? "label" : nodename,
                query = source.querySelector("#" + attr);
            var label = target.querySelector(nodename); //if the target doesn't have the element, add it

            if (label === null) {
              label = document.createElement(nodename);
              target.prepend(label);
            } //populates the element with data from the source element


            if (source.getAttribute(attr) !== null) {
              label.innerHTML = source.getAttribute(attr);
            } else if (query !== null && query.innerHTML !== "") {
              label.innerHTML = query.innerHTML;
            } //returns the new element's id


            return getID(label, prefix + "-" + attr);
          }; //set aria-labelledby to the id's for title and descriptions


          target.setAttribute("aria-labelledby", svgElem("desc") + " " + svgElem("label"));
        }; //set up main svg and append to document


        temp.innerHTML = e.detail.response;
        var svg = temp.querySelector("svg"),
            svgid = getID(svg, "svg-" + Date.now()),
            hdata = root.querySelectorAll("lrndesign-imagemap-hotspot");
        setAriaLabelledBy(root, svg, svgid);
        this.shadowRoot.querySelector("#svg").appendChild(svg);

        var _loop = function _loop(i) {
          var hid = hdata[i].getAttribute("hotspot-id"),
              hotspot = svg.querySelector("#" + hid),
              clone = svg.cloneNode(true); //clone svg for print versions and show hotspot as selected

          setAriaLabelledBy(hdata[i], clone, hid);
          hdata[i].appendChild(clone);
          hdata[i].querySelector("#" + hid).classList.add("selected");
          hdata[i].setParentHeading(root.shadowRoot.querySelector("#heading"));

          for (var j = 0; j < hdata.length; j++) {
            hdata[i].querySelector("#" + hdata[j].getAttribute("hotspot-id")).classList.add("hotspot");
          } //configure hotspot on main (interactive) svg


          var hbutton = document.createElement("button");
          hbutton.setAttribute("tabindex", 0);
          hbutton.setAttribute("aria-label", hdata[i].label);
          root.shadowRoot.querySelector("#buttons").appendChild(hbutton);
          hbutton.addEventListener("focus", function () {
            hotspot.classList.add("focus");
          });
          hbutton.addEventListener("blur", function () {
            hotspot.classList.remove("focus");
          });
          hotspot.classList.add("hotspot");
          hotspot.addEventListener("click", function (e) {
            _this4.openHotspot(hotspot, hdata[i]);
          });
          hbutton.addEventListener("keyup", function (e) {
            if (e.keyCode === 13 || e.keyCode === 32) {
              if (!hotspot.classList.contains("selected")) {
                _this4.openHotspot(hotspot, hdata[i]);
              }
            }
          });
        };

        for (var i = 0; i < hdata.length; i++) {
          _loop(i);
        }
      }
      /**
       * Selects a hotspot and opens dialog with details about it.
       */

    }, {
      key: "openHotspot",
      value: function openHotspot(hotspot, details) {
        // get everything flat
        var children = details.shadowRoot.querySelector("#desc").querySelector("slot").assignedNodes({
          flatten: true
        });
        var c = document.createElement("div"); // append clones of the children we found

        for (var child in children) {
          c.appendChild(children[child].cloneNode(true));
        }

        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          cancelable: true,
          detail: {
            title: details.getAttribute("label"),
            elements: {
              content: c
            },
            invokedBy: this,
            clone: false
          }
        });
        this.dispatchEvent(evt);
        this.__activeHotspot = hotspot;
        this.resetHotspots();
        hotspot.classList.add("selected");
      }
      /**
       * Closes a hotspot.
       */

    }, {
      key: "closeHotspot",
      value: function closeHotspot() {
        this.resetHotspots();

        this.__activeHotspot.focus();
      }
      /**
       * Closes dialog and deselects all hotspots.
       */

    }, {
      key: "resetHotspots",
      value: function resetHotspots() {
        var hotspots = this.querySelectorAll('.hotspot[role="button"]');

        for (var i = 0; i < hotspots.length; i++) {
          hotspots[i].classList.remove("selected");
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_88e0d410c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-imagemap";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Label for the imagemap
           */
          label: {
            type: String,
            value: null
          },

          /**
           * The path of the SVG
           */
          src: {
            type: String,
            value: null
          },

          /**
           * The path of the SVG
           */
          hotspotDetails: {
            type: Array,
            value: []
          },

          /*
           * optional: the id of the heading element that this imagemap is a subtopic of
           */
          subtopicOf: {
            type: String,
            value: null,
            reflectToAttribute: true
          },

          /*
           * optional: if subtopicOf is not set, start the content at a heading tag, eg. <h1/>, <h2/> ...
           */
          tag: {
            type: String,
            value: null,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return LrndesignImagemap;
  }(_polymerElement.PolymerElement);

  _exports.LrndesignImagemap = LrndesignImagemap;
  window.customElements.define(LrndesignImagemap.tag, LrndesignImagemap);
});