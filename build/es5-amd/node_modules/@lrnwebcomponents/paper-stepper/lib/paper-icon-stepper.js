define(["exports", "../../../lit-element/lit-element.js"], function (_exports, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PaperIconStepper = void 0;

  var PaperIconStepper =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(PaperIconStepper, _LitElement);
    babelHelpers.createClass(PaperIconStepper, null, [{
      key: "tag",

      /**
       * concept
       */
      get: function get() {
        return "paper-icon-stepper";
      }
      /**
       * HTMLElement
       */

    }]);

    function PaperIconStepper() {
      var _this;

      babelHelpers.classCallCheck(this, PaperIconStepper);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PaperIconStepper).call(this));
      _this.selectedValues = [];
      _this._selected = -1;
      return _this;
    }
    /**
     * LitElement ready
     */


    babelHelpers.createClass(PaperIconStepper, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "selectedValues") {
            // notify
            _this2.dispatchEvent(new CustomEvent("selected-values-changed", {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "previous",

      /**
       * Goes back one step
       */
      value: function previous() {
        //XXX: Multi selector does not offer selectPrevious() function
        if (this._selected < 0) {
          // we are back to start
          return;
        } // remove the currently selected from the array


        var index = this.selectedValues.indexOf(this._selected);
        this.selectedValues.splice(index, 1);
        this._selected--;
      }
      /**
       * Goes forward one step
       */

    }, {
      key: "next",
      value: function next() {
        //XXX: Multi selector does not offer selectNext() function
        if (this._selected === this._items.length - 1) {
          // We reached the end
          return;
        }

        if (this._selected >= 0) {
          this._selected++;
        } else if (this.selectedValues.length <= 0) {
          // no items selected yet
          this._selected = 0;
        } else {
          // items selected (e.g. specified by the caller). Default to the element after the last element of the array
          this._selected = this.selectedValues[this.selectedValues.length]++;
        }

        this.selectedValues.push(this._selected);
      }
      /**
       * Clears all the steps
       */

    }, {
      key: "clear",
      value: function clear() {
        this.selectedValues = [];
        this._selected = -1;
      }
    }, {
      key: "_onItemsChanged",
      value: function _onItemsChanged(e) {
        this._items = this.shadowRoot.querySelector("#selector").items;
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * Indeces of the steps already selected
           */
          selectedValues: {
            type: Array,
            attribute: "selected-values"
          },

          /**
           * Currently selected step
           */
          _selected: {
            type: Number
          }
        };
      }
    }]);
    return PaperIconStepper;
  }(_litElement.LitElement);

  _exports.PaperIconStepper = PaperIconStepper;
  window.customElements.define(PaperIconStepper.tag, PaperIconStepper);
});