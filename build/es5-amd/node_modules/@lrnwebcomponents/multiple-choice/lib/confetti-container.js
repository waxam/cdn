function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

// confetti-element by stefanjudis MIT
// cleaned up for production use
(function () {
  var randomRange = function randomRange(min, max) {
    return Math.random() * (max - min) + min;
  };

  var colors = [{
    front: "#52A7DD",
    back: "#2287BD"
  }, // Blue
  {
    front: "#f07178",
    back: "#c04148"
  }, // Red
  {
    front: "#ffcb6b",
    back: "#cf9b3b"
  }];

  var initConfettoVelocity = function initConfettoVelocity(xRange, yRange) {
    var x = randomRange(xRange[0], xRange[1]);
    var range = yRange[1] - yRange[0] + 1;
    var y = yRange[1] - Math.abs(randomRange(0, range) + randomRange(0, range) - range);

    if (y >= yRange[1] - 1) {
      // Occasional confetto goes higher than the max
      y += Math.random() < 0.25 ? randomRange(1, 3) : 0;
    }

    return {
      x: x,
      y: -y
    };
  }; // Confetto Class


  function Confetto(canvas, options) {
    this.options = options;
    this.randomModifier = randomRange(0, 99);
    this.color = colors[Math.floor(randomRange(0, colors.length))];
    this.dimensions = {
      x: randomRange(8, 16),
      y: randomRange(8, 14)
    };
    this.position = {
      x: randomRange( // canvas.width / 2 - button.offsetWidth / 4,
      // canvas.width / 2 + button.offsetWidth / 4
      canvas.width / 2, canvas.width / 2),
      y: randomRange( // canvas.height / 2 + button.offsetHeight / 2 + 8,
      // canvas.height / 2 + 1.5 * button.offsetHeight - 8
      canvas.height / 2, canvas.height / 2)
    };
    this.rotation = randomRange(0, 2 * Math.PI);
    this.scale = {
      x: 1,
      y: 1
    };
    this.velocity = initConfettoVelocity([-9, 9], [6, 11]);
  }

  Confetto.prototype.update = function () {
    // apply forces to velocity
    this.velocity.x -= this.velocity.x * this.options.dragConfetti;
    this.velocity.y = Math.min(this.velocity.y + this.options.gravityConfetti, this.options.terminalVelocity);
    this.velocity.x += Math.random() > 0.5 ? Math.random() : -Math.random(); // set position

    this.position.x += this.velocity.x;
    this.position.y += this.velocity.y; // spin confetto by scaling y and set the color, .09 just slows cosine frequency

    this.scale.y = Math.cos((this.position.y + this.randomModifier) * 0.09);
  }; // Sequin Class


  function Sequin(canvas, options) {
    this.options = options;
    this.color = colors[Math.floor(randomRange(0, colors.length))].back, this.radius = randomRange(1, 2), this.position = {
      x: randomRange( // canvas.width / 2 - button.offsetWidth / 3,
      // canvas.width / 2 + button.offsetWidth / 3
      canvas.width / 2, canvas.width / 2),
      y: randomRange( // canvas.height / 2 + button.offsetHeight / 2 + 8,
      // canvas.height / 2 + 1.5 * button.offsetHeight - 8
      canvas.height / 2, canvas.height / 2)
    }, this.velocity = {
      x: randomRange(-6, 6),
      y: randomRange(-8, -12)
    };
  }

  Sequin.prototype.update = function () {
    // apply forces to velocity
    this.velocity.x -= this.velocity.x * this.options.dragSequins;
    this.velocity.y = this.velocity.y + this.options.gravitySequins; // set position

    this.position.x += this.velocity.x;
    this.position.y += this.velocity.y;
  };

  var Confetti = /*#__PURE__*/function (_HTMLElement) {
    "use strict";

    babelHelpers.inherits(Confetti, _HTMLElement);

    var _super = _createSuper(Confetti);

    function Confetti() {
      var _this;

      babelHelpers.classCallCheck(this, Confetti);
      _this = _super.call(this);
      _this.canvas = null;
      _this.confetti = [];
      _this.sequins = [];
      _this.options = {
        confettiCount: 55,
        sequinCount: 30,
        gravityConfetti: 0.25,
        gravitySequins: 0.35,
        dragConfetti: 0.025,
        dragSequins: 0.02,
        terminalVelocity: 4
      };
      return _this;
    }

    babelHelpers.createClass(Confetti, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        this.style = "display: block; position: relative;";
        this.canvas = document.createElement("canvas");
        this.canvas.id = "confetti-container-canvas-ðŸŽ‰";
        this.ctx = this.canvas.getContext("2d"); // debugger;

        this.canvas.width = this.offsetWidth;
        this.canvas.height = this.offsetHeight;
        this.canvas.style = "pointer-events: none; position: absolute; top:0; left: 0; width: 100%; height: 100%; z-index: 1000; image-rendering: crisp-edges;";
        this.prepend(this.canvas);
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(name, oldValue, newValue) {
        var poppedAttrAdded = name === "popped" && oldValue === null;

        if (poppedAttrAdded) {
          this.popConfetti();
        }
      }
    }, {
      key: "popConfetti",
      value: function popConfetti() {
        for (var i = 0; i < this.options.confettiCount; i++) {
          this.confetti.push(new Confetto(this.canvas, this.options));
        }

        for (var _i = 0; _i < this.options.sequinCount; _i++) {
          this.sequins.push(new Sequin(this.canvas, this.options));
        }

        this.render();
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);
        this.confetti.forEach(function (confetto, index) {
          var width = confetto.dimensions.x * confetto.scale.x;
          var height = confetto.dimensions.y * confetto.scale.y; // move canvas to position and rotate

          _this2.ctx.translate(confetto.position.x, confetto.position.y);

          _this2.ctx.rotate(confetto.rotation); // update confetto "physics" values


          confetto.update(); // get front or back fill color

          _this2.ctx.fillStyle = confetto.scale.y > 0 ? confetto.color.front : confetto.color.back; // draw confetto

          _this2.ctx.fillRect(-width / 2, -height / 2, width, height); // reset transform matrix


          _this2.ctx.setTransform(1, 0, 0, 1, 0, 0);
        });
        this.sequins.forEach(function (sequin, index) {
          // move canvas to position
          _this2.ctx.translate(sequin.position.x, sequin.position.y); // update sequin "physics" values


          sequin.update(); // set the color

          _this2.ctx.fillStyle = sequin.color; // draw sequin

          _this2.ctx.beginPath();

          _this2.ctx.arc(0, 0, sequin.radius, 0, 2 * Math.PI);

          _this2.ctx.fill(); // reset transform matrix


          _this2.ctx.setTransform(1, 0, 0, 1, 0, 0);
        }); // remove confetti and sequins that fall off the screen
        // must be done in seperate loops to avoid noticeable flickering

        this.confetti.forEach(function (confetto, index) {
          if (confetto.position.y - 25 >= _this2.canvas.height) _this2.confetti.splice(index, 1);
        });
        this.sequins.forEach(function (sequin, index) {
          if (sequin.position.y - 25 >= _this2.canvas.height) _this2.sequins.splice(index, 1);
        });

        if (this.sequins.length || this.confetti.length) {
          window.requestAnimationFrame(this.render.bind(this));
        } else {
          this.removeAttribute("popped");
        }
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["popped"];
      }
    }]);
    return Confetti;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  if (window.customElements && window.customElements.define) {
    customElements.define("confetti-container", Confetti);
  }
})();