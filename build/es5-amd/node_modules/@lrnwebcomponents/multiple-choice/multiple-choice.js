define(["exports", "require", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js", "../simple-colors/simple-colors.js"], function (_exports, _require, _litElement, _schemaBehaviors, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MultipleChoice = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject8_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <div id=\"buttons\">\n              <paper-button\n                id=\"check\"\n                ?disabled=\"", "\"\n                raised\n                @click=\"", "\"\n                >", "</paper-button\n              >\n              <paper-button\n                id=\"reset\"\n                ?disabled=\"", "\"\n                raised\n                @click=\"", "\"\n                >", "</paper-button\n              >\n            </div>\n          "]);

    _templateObject8_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject8_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject7_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                  <li>\n                    <paper-checkbox\n                      ?disabled=\"", "\"\n                      property=\"oer:answer\"\n                      name=\"", "\"\n                      ?checked=\"", "\"\n                      @checked-changed=\"", "\"\n                      >", "</paper-checkbox\n                    >\n                  </li>\n                "]);

    _templateObject7_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject7_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject6_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <ul>\n              ", "\n            </ul>\n          "]);

    _templateObject6_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject6_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject5_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                  <paper-radio-button\n                    ?disabled=\"", "\"\n                    property=\"oer:answer\"\n                    name=\"", "\"\n                    ?checked=\"", "\"\n                    @checked-changed=\"", "\"\n                    >", "</paper-radio-button\n                  >\n                "]);

    _templateObject5_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject5_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject4_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <paper-radio-group>\n              ", "\n            </paper-radio-group>\n          "]);

    _templateObject4_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject4_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject3_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <h3><span property=\"oer:name\">", "</span></h3>\n          "]);

    _templateObject3_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject3_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject2_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <meta property=\"oer:assessing\" content=\"", "\" />\n      ", "\n      <div>", "</div>\n      ", "\n      ", "\n      <paper-toast\n        id=\"toast\"\n        scroll-action=\"cancel\"\n        duration=\"6000\"\n        position-target=\"", "\"\n        class=\"fit-bottom ", "\"\n      >\n        ", "\n        <iron-icon\n          icon=\"", "\"\n          style=\"margin-left:16px;\"\n        ></iron-icon>\n      </paper-toast>\n    "]);

    _templateObject2_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          padding: 16px 16px 54px 16px;\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n          --paper-checkbox-unchecked-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-unchecked-ink-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --paper-checkbox-checkmark-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --paper-checkbox-label-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --paper-checkbox-error-color: var(\n            --simple-colors-default-theme-red-8\n          );\n        }\n        :host([accent-color=\"grey\"]),\n        :host([accent-color=\"red\"]),\n        :host([accent-color=\"green\"]) {\n          --paper-checkbox-checked-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n          --paper-checkbox-checked-ink-color: var(\n            --simple-colors-default-theme-blue-8\n          );\n        }\n        :host #check {\n          background-color: var(--simple-colors-default-theme-accent-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host #check:hover {\n          background-color: var(--simple-colors-default-theme-accent-9);\n        }\n        :host([accent-color=\"red\"]) #check,\n        :host([accent-color=\"green\"]) #check {\n          background-color: var(--simple-colors-default-theme-blue-8);\n          color: var(--simple-colors-default-theme-grey-1);\n        }\n        :host([accent-color=\"red\"]) #check:hover,\n        :host([accent-color=\"green\"]) #check:hover {\n          background-color: var(--simple-colors-default-theme-blue-9);\n        }\n        :host([accent-color=\"grey\"]) #check,\n        :host paper-button {\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        :host([accent-color=\"grey\"]) #check:hover,\n        :host paper-button:hover {\n          cursor: pointer;\n          background-color: var(--simple-colors-default-theme-grey-2);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        .red {\n          background-color: var(--simple-colors-default-theme-red-8);\n        }\n        .green {\n          background-color: var(--simple-colors-default-theme-green-8);\n        }\n        h3 {\n          margin: 8px;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          padding: 8px;\n        }\n        paper-radio-button {\n          padding: 8px;\n          display: block;\n        }\n        paper-checkbox {\n          padding: 8px;\n        }\n        iron-icon {\n          display: inline-flex;\n        }\n      "]);

    _templateObject_8a8b9de0c96f11ea8be5e1d5fe7ec787 = function _templateObject_8a8b9de0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `multiple-choice`
   * `Ask the user a question from a set of possible answers.`
   * @demo demo/index.html
   * @element multiple-choice
   */
  var MultipleChoice =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(MultipleChoice, _SchemaBehaviors);
    babelHelpers.createClass(MultipleChoice, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice), "styles", this)), [(0, _litElement.css)(_templateObject_8a8b9de0c96f11ea8be5e1d5fe7ec787())]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "multiple-choice";
      }
    }]);

    function MultipleChoice() {
      var _this;

      babelHelpers.classCallCheck(this, MultipleChoice);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MultipleChoice).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-toast/paper-toast.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      _this.randomize = false;
      _this.hideButtons = false;
      _this.title = "";
      _this.disabled = false;
      _this.singleOption = false;
      _this.checkLabel = "Check answer";
      _this.resetLabel = "Reset";
      _this.hideTitle = false;
      _this.question = "";
      _this.answers = [];
      _this.displayedAnswers = [];
      _this.correctText = "Great job!";
      _this.correctIcon = "icons:thumb-up";
      _this.incorrectText = "Better luck next time!";
      _this.incorrectIcon = "icons:thumb-down";
      _this.quizName = "default";
      return _this;
    }

    babelHelpers.createClass(MultipleChoice, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["answers", "displayedAnswers"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (["answers", "randomize"].includes(propName)) {
            _this2.displayedAnswers = babelHelpers.toConsumableArray(_this2._computeDisplayedAnswers(_this2.answers, _this2.randomize));
          } // single option implies it's a radio group or if multiple, do check boxes


          if (propName == "singleOption") {
            _this2.singleOptionChanged(_this2[propName]);
          }
        });
      }
    }, {
      key: "singleOptionChanged",
      value: function singleOptionChanged(singleOption) {
        if (singleOption) {
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/paper-radio-group/paper-radio-group.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/paper-radio-button/paper-radio-button.js"], res, rej);
          });
        } else {
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/paper-checkbox/paper-checkbox.js"], res, rej);
          });
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return (0, _litElement.html)(_templateObject2_8a8b9de0c96f11ea8be5e1d5fe7ec787(), this.relatedResource, !this.hideTitle ? (0, _litElement.html)(_templateObject3_8a8b9de0c96f11ea8be5e1d5fe7ec787(), this.title) : "", this.question, this.singleOption ? (0, _litElement.html)(_templateObject4_8a8b9de0c96f11ea8be5e1d5fe7ec787(), this.displayedAnswers.map(function (answer, index) {
          return (0, _litElement.html)(_templateObject5_8a8b9de0c96f11ea8be5e1d5fe7ec787(), _this3.disabled, index, answer.userGuess, _this3.checkedEvent, answer.label);
        })) : (0, _litElement.html)(_templateObject6_8a8b9de0c96f11ea8be5e1d5fe7ec787(), this.displayedAnswers.map(function (answer, index) {
          return (0, _litElement.html)(_templateObject7_8a8b9de0c96f11ea8be5e1d5fe7ec787(), _this3.disabled, index, answer.userGuess, _this3.checkedEvent, answer.label);
        })), !this.hideButtons ? (0, _litElement.html)(_templateObject8_8a8b9de0c96f11ea8be5e1d5fe7ec787(), this.disabled, this._verifyAnswers, this.checkLabel, this.disabled, this.resetAnswers, this.resetLabel) : "", this.positionTarget, this.__toastColor, this.__toastText, this.__toastIcon);
      }
    }, {
      key: "checkedEvent",
      value: function checkedEvent(e) {
        var attr = this.displayedAnswers;
        attr[e.target.name].userGuess = e.detail.value;
        this.displayedAnswers = babelHelpers.toConsumableArray(attr);
      }
    }, {
      key: "resetAnswers",

      /**
       * Reset user answers and shuffle the board again.
       */
      value: function resetAnswers(e) {
        this.shadowRoot.querySelector("#toast").hide();
        this.displayedAnswers = [];
        var answers = this.answers;
        this.answers.forEach(function (el) {
          el.userGuess = false;
        });
        this.answers = babelHelpers.toConsumableArray(answers);
      }
      /**
       * Return if the current answers are correct
       */

    }, {
      key: "checkAnswers",
      value: function checkAnswers() {
        var gotRight = true; // see that they got them all right

        for (var i in this.displayedAnswers) {
          if (gotRight != false && this.displayedAnswers[i].correct && this.displayedAnswers[i].userGuess) {
            gotRight = true;
          } else if (this.displayedAnswers[i].correct && !this.displayedAnswers[i].userGuess) {
            gotRight = false;
          } else if (!this.displayedAnswers[i].correct && this.displayedAnswers[i].userGuess) {
            gotRight = false;
          }
        }

        return gotRight;
      }
      /**
       * Verify the answers of the user based on their saying
       * that they want to see how they did.
       */

    }, {
      key: "_verifyAnswers",
      value: function _verifyAnswers(e) {
        this.shadowRoot.querySelector("#toast").hide();
        var gotRight = this.checkAnswers(); // see if they got this correct based on their answers

        if (gotRight) {
          this.__toastColor = "green";
          this.__toastIcon = this.correctIcon;
          this.__toastText = this.correctText;
        } else {
          this.__toastColor = "red";
          this.__toastIcon = this.incorrectIcon;
          this.__toastText = this.incorrectText;
        }

        this.shadowRoot.querySelector("#toast").show(); // start of data passing, this is a prototype atm

        var eventData = {
          activityDisplay: "answered",
          objectName: this.quizName,
          resultSuccess: gotRight
        };
        this.dispatchEvent(new CustomEvent("user-engagement", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: eventData
        }));
      }
      /**
       * Figure out the order of the answers which will be displayed
       */

    }, {
      key: "_computeDisplayedAnswers",
      value: function _computeDisplayedAnswers(answers, randomize) {
        if (babelHelpers.typeof(answers) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && answers != null && answers.length > 0 && randomize) {
          var random = answers;
          var currentIndex = random.length,
              temporaryValue,
              randomIndex; // While there remain elements to shuffle...

          while (0 !== currentIndex) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1; // And swap it with the current element.

            temporaryValue = random[currentIndex];
            random[currentIndex] = random[randomIndex];
            random[randomIndex] = temporaryValue;
          } // @todo apply a random sort to the answers array


          return random;
        } else {
          return answers;
        }
      }
    }, {
      key: "preProcessHaxNodeToContent",

      /**
       * HAX preprocess Node to Content hook
       */
      value: function preProcessHaxNodeToContent(node) {
        // ensure we dont accidently have the answer displayed!
        if (node.answers) {
          var answers = [];

          for (var i = 0; i < node.answers.length; i++) {
            var val = node.answers[i]; // remove userGuess if its set in the DOM

            if (val.userGuess) {
              delete val.userGuess;
            }

            answers.push(val);
          }

          node.answers = [].concat(answers);
        }

        return node;
      }
      /**
       * HAX preprocess insert content hook
       */

    }, {
      key: "preProcessHaxInsertContent",
      value: function preProcessHaxInsertContent(detail) {
        // ensure we dont accidently have the answer displayed!
        if (detail.properties.answers) {
          detail.properties.answers = detail.properties.answers.map(function (val) {
            if (val.userGuess) {
              delete val.userGuess;
            }

            return val;
          });
        }

        return detail;
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (this.shadowRoot.querySelector("#positionTarget")) {
          this.positionTarget = this.shadowRoot.querySelector("#positionTarget");
        }

        this.setAttribute("typeof", "oer:Assessment");
        this.shadowRoot.querySelector("#toast").fitInto = this;
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice), "properties", this), {
          /**
           * Title
           */
          title: {
            type: String
          },
          positionTarget: {
            type: Object
          },

          /**
           * Support disabling interaction with the entire board
           */
          disabled: {
            type: Boolean
          },

          /**
           * Simple option, otherwise allow multiple via checkbox
           */
          singleOption: {
            type: Boolean,
            attribute: "single-option"
          },

          /**
           * Text of the label to check your answer
           */
          checkLabel: {
            type: String,
            attribute: "check-label"
          },

          /**
           * Text of the reset button
           */
          resetLabel: {
            type: String,
            attribute: "reset-label"
          },

          /**
           * Related Resource ID
           */
          relatedResource: {
            type: String,
            attribute: "related-resource"
          },

          /**
           * Flag to hide the title
           */
          hideTitle: {
            type: Boolean,
            attribute: "hide-title"
          },

          /**
           * Question to ask
           */
          question: {
            type: String
          },

          /**
           * Array of possible answers
           */
          answers: {
            type: Array
          },

          /**
           * Displayed Answer set.
           */
          displayedAnswers: {
            type: Array
          },

          /**
           * Correct answer text to display
           */
          correctText: {
            type: String,
            attribute: "correct-text"
          },

          /**
           * Incorrect answer text to display
           */
          incorrectText: {
            type: String,
            attribute: "incorrect-text"
          },

          /**
           * Correct answer text to display
           */
          correctIcon: {
            type: String,
            attribute: "correct-icon"
          },

          /**
           * Incorrect answer text to display
           */
          incorrectIcon: {
            type: String,
            attribute: "incorrect-icon"
          },

          /**
           * Name of the quiz - hardcoded for now from HTML
           */
          quizName: {
            type: String,
            attribute: "quiz-name"
          },

          /**
           * Randomize the display of the answers
           */
          randomize: {
            type: Boolean,
            reflect: true
          },

          /**
           * flag to hide buttons
           */
          hideButtons: {
            type: Boolean,
            attribute: "hide-buttons"
          },
          __toastText: {
            type: String
          },
          __toastColor: {
            type: String
          },
          __toastIcon: {
            type: String
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Multiple choice",
            description: "Multiple choice self check",
            icon: "hax:multiple-choice",
            color: "purple",
            groups: ["Instructional"],
            handles: [],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "question",
              title: "Question",
              description: "Question for users to respond to.",
              inputMethod: "textfield",
              icon: "icons:help"
            }],
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield"
            }, {
              property: "hideTitle",
              title: "Hide title",
              description: "Whether or not to display the title",
              inputMethod: "boolean"
            }, {
              property: "question",
              title: "Question",
              description: "Question for users to respond to.",
              inputMethod: "textfield"
            }, {
              property: "randomize",
              title: "Randomize",
              description: "Randomize the answers dynamically",
              inputMethod: "boolean"
            }, {
              property: "answers",
              title: "Answer set",
              description: "Answers in a multiple choice",
              inputMethod: "array",
              itemLabel: "label",
              properties: [{
                property: "correct",
                title: "Correct",
                description: "If this is correct or not",
                inputMethod: "boolean"
              }, {
                property: "label",
                title: "Answer",
                description: "Possible answer to the question",
                inputMethod: "textfield",
                required: true
              }]
            }, {
              property: "correctText",
              title: "Correct feedback",
              description: "Feedback when they get it right",
              inputMethod: "textfield"
            }, {
              property: "correctIcon",
              title: "Correct icon",
              description: "Icon to display when correct answer happens",
              inputMethod: "iconpicker",
              options: ["icons:trending-flat", "icons:launch", "icons:pan-tool", "icons:link", "icons:check", "icons:favorite", "icons:thumb-up", "icons:thumb-down", "icons:send"]
            }, {
              property: "incorrectText",
              title: "Incorrect feedback",
              description: "Feedback when they get it wrong",
              inputMethod: "textfield"
            }, {
              property: "incorrectIcon",
              title: "Incorrect icon",
              description: "Icon to display when wrong answer happens",
              inputMethod: "iconpicker",
              options: ["icons:trending-flat", "icons:launch", "icons:pan-tool", "icons:link", "icons:check", "icons:favorite", "icons:thumb-up", "icons:thumb-down", "icons:send"]
            }, {
              property: "quizName",
              title: "Name of the quiz",
              description: "Quiz name passed in",
              inputMethod: "textfield"
            }],
            advanced: [{
              property: "checkLabel",
              title: "Check answers label",
              description: "Label for getting solution feedback",
              inputMethod: "textfield"
            }, {
              property: "resetLabel",
              title: "Reset label",
              description: "label for the reset button",
              inputMethod: "textfield"
            }]
          },
          saveOptions: {
            unsetAttributes: ["__utils", "displayed-answers", "displayedAnswers", "colors"]
          }
        };
      }
    }]);
    return MultipleChoice;
  }((0, _schemaBehaviors.SchemaBehaviors)(_simpleColors.SimpleColors));

  _exports.MultipleChoice = MultipleChoice;
  window.customElements.define(MultipleChoice.tag, MultipleChoice);
});