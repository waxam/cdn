define(["exports", "meta", "require", "../../lit/index.js", "../schema-behaviors/schema-behaviors.js", "../simple-colors/simple-colors.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-fields/lib/simple-fields-field.js", "../simple-toast/simple-toast.js"], function (_exports, meta, _require, _index, _schemaBehaviors, _simpleColors, _simpleIcon, _simpleIcons, _simpleFieldsField, _simpleToast) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MultipleChoice = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  var _templateObject_a31d3fa0feb911eb8439e3eec9305af7, _templateObject2_a31d3fa0feb911eb8439e3eec9305af7, _templateObject3_a31d3fa0feb911eb8439e3eec9305af7, _templateObject4_a31d3fa0feb911eb8439e3eec9305af7, _templateObject5_a31d3fa0feb911eb8439e3eec9305af7, _templateObject6_a31d3fa0feb911eb8439e3eec9305af7, _templateObject7_a31d3fa0feb911eb8439e3eec9305af7;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `multiple-choice`
   * `Ask the user a question from a set of possible answers.`
   * @demo demo/index.html
   * @element multiple-choice
   */
  var MultipleChoice = /*#__PURE__*/function (_SchemaBehaviors) {
    babelHelpers.inherits(MultipleChoice, _SchemaBehaviors);

    var _super = _createSuper(MultipleChoice);

    function MultipleChoice() {
      var _this;

      babelHelpers.classCallCheck(this, MultipleChoice);
      _this = _super.call(this);
      _this.randomize = false;
      _this.hideButtons = false;
      _this.disabled = false;
      _this.singleOption = false;
      _this.checkLabel = "Check answer";
      _this.resetLabel = "Reset";
      _this.question = "";
      _this.answers = [];
      _this.displayedAnswers = [];
      _this.correctText = "Great job!";
      _this.correctIcon = "icons:thumb-up";
      _this.incorrectText = "Better luck next time!";
      _this.incorrectIcon = "icons:thumb-down";
      _this.quizName = "default";
      return _this;
    }

    babelHelpers.createClass(MultipleChoice, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["answers", "displayedAnswers"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "answers" && _this2.answers && _this2.answers.length > 0) {
            _this2.displayedAnswers = babelHelpers.toConsumableArray(_this2._computeDisplayedAnswers(_this2.answers, _this2.randomize));
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        var _this3 = this;

        return (0, _index.html)(_templateObject_a31d3fa0feb911eb8439e3eec9305af7 || (_templateObject_a31d3fa0feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n      <confetti-container id=\"confetti\">\n        <meta property=\"oer:assessing\" content=\"", "\" />\n        <h3><span property=\"oer:name\">", "</span></h3>\n        ", "\n        ", "\n      </confetti-container>\n    "])), this.relatedResource, this.question, this.singleOption ? (0, _index.html)(_templateObject2_a31d3fa0feb911eb8439e3eec9305af7 || (_templateObject2_a31d3fa0feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n              ", "\n            "])), this.displayedAnswers.map(function (answer, index) {
          return (0, _index.html)(_templateObject3_a31d3fa0feb911eb8439e3eec9305af7 || (_templateObject3_a31d3fa0feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n                  <simple-fields-field\n                    ?disabled=\"", "\"\n                    property=\"oer:answer\"\n                    type=\"radio\"\n                    name=\"", "\"\n                    .value=\"", "\"\n                    @value-changed=\"", "\"\n                    label=\"", "\"\n                  ></simple-fields-field>\n                "])), _this3.disabled, index, answer.userGuess, _this3.checkedEvent, answer.label ? answer.label : "");
        })) : (0, _index.html)(_templateObject4_a31d3fa0feb911eb8439e3eec9305af7 || (_templateObject4_a31d3fa0feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n              <ul>\n                ", "\n              </ul>\n            "])), this.displayedAnswers.map(function (answer, index) {
          return (0, _index.html)(_templateObject5_a31d3fa0feb911eb8439e3eec9305af7 || (_templateObject5_a31d3fa0feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n                    <li>\n                      <simple-fields-field\n                        ?disabled=\"", "\"\n                        property=\"oer:answer\"\n                        name=\"", "\"\n                        type=\"checkbox\"\n                        label=\"", "\"\n                        .value=\"", "\"\n                        @value-changed=\"", "\"\n                      ></simple-fields-field>\n                    </li>\n                  "])), _this3.disabled, index, answer.label ? answer.label : "", answer.userGuess, _this3.checkedEvent);
        })), !this.hideButtons ? (0, _index.html)(_templateObject6_a31d3fa0feb911eb8439e3eec9305af7 || (_templateObject6_a31d3fa0feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n              <div id=\"buttons\">\n                <button\n                  id=\"check\"\n                  ?disabled=\"", "\"\n                  @click=\"", "\"\n                >\n                  ", "\n                </button>\n                <button\n                  id=\"reset\"\n                  ?disabled=\"", "\"\n                  @click=\"", "\"\n                >\n                  ", "\n                </button>\n              </div>\n            "])), this.disabled, this._verifyAnswers, this.checkLabel, this.disabled, this.resetAnswers, this.resetLabel) : "");
      }
    }, {
      key: "checkedEvent",
      value: function checkedEvent(e) {
        var attr = this.displayedAnswers;
        attr[e.target.name].userGuess = e.detail.value;
        this.displayedAnswers = babelHelpers.toConsumableArray(attr);
      }
    }, {
      key: "resetAnswers",
      value:
      /**
       * Reset user answers and shuffle the board again.
       */
      function resetAnswers(e) {
        _simpleToast.SimpleToastStore.hide();

        this.displayedAnswers = [];
        this.answers.forEach(function (el) {
          el.userGuess = false;
        });
        var answers = JSON.parse(JSON.stringify(this.answers));
        this.answers = babelHelpers.toConsumableArray(answers);
      }
      /**
       * Return if the current answers are correct
       */

    }, {
      key: "checkAnswers",
      value: function checkAnswers() {
        var gotRight = true; // see that they got them all right

        for (var i in this.displayedAnswers) {
          if (gotRight != false && this.displayedAnswers[i].correct && this.displayedAnswers[i].userGuess) {
            gotRight = true;
          } else if (this.displayedAnswers[i].correct && !this.displayedAnswers[i].userGuess) {
            gotRight = false;
          } else if (!this.displayedAnswers[i].correct && this.displayedAnswers[i].userGuess) {
            gotRight = false;
          }
        }

        return gotRight;
      }
      /**
       * Verify the answers of the user based on their saying
       * that they want to see how they did.
       */

    }, {
      key: "_verifyAnswers",
      value: function _verifyAnswers(e) {
        var _this4 = this;

        _simpleToast.SimpleToastStore.hide();

        var gotRight = this.checkAnswers(); // see if they got this correct based on their answers

        if (gotRight) {
          this.__toastColor = "green";
          this.__toastIcon = this.correctIcon;
          this.__toastText = this.correctText; // make it fun... and performant!

          new Promise(function (res, rej) {
            return _require.default(["./lib/confetti-container.js"], res, rej);
          }).then(function (module) {
            setTimeout(function () {
              _this4.shadowRoot.querySelector("#confetti").setAttribute("popped", "");
            }, 0);
          });
        } else {
          this.__toastColor = "red";
          this.__toastIcon = this.incorrectIcon;
          this.__toastText = this.incorrectText;
        }

        var si = document.createElement("simple-icon");
        si.icon = this.__toastIcon;
        si.style.marginLeft = "16px";
        si.accentColor = this.__toastColor;
        si.dark = true;

        _simpleToast.SimpleToastStore.showSimpleToast({
          detail: {
            duration: 3000,
            text: this.__toastText,
            slot: si,
            accentColor: this.__toastColor
          }
        }); // start of data passing, this is a prototype atm


        var eventData = {
          activityDisplay: "answered",
          objectName: this.quizName,
          resultSuccess: gotRight
        };
        this.dispatchEvent(new CustomEvent("user-engagement", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: eventData
        }));
      }
      /**
       * LitElement hook to modify shadowRoot. Minor a11y improvement on Chrome
       */

    }, {
      key: "createRenderRoot",
      value: function createRenderRoot() {
        return this.attachShadow({
          mode: "open",
          delegatesFocus: true
        });
      }
      /**
       * Figure out the order of the answers which will be displayed
       */

    }, {
      key: "_computeDisplayedAnswers",
      value: function _computeDisplayedAnswers(answers, randomize) {
        // if we are editing via HAX, don't randomize the answers
        // as we are actively editing the content and this is amazingly jarring
        if (babelHelpers.typeof(answers) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && answers != null && answers.length > 0 && randomize && !this._haxstate) {
          var random = answers;
          var currentIndex = random.length,
              temporaryValue,
              randomIndex; // While there remain elements to shuffle...

          while (0 !== currentIndex) {
            // Pick a remaining element...
            randomIndex = Math.floor(Math.random() * currentIndex);
            currentIndex -= 1; // And swap it with the current element.

            temporaryValue = random[currentIndex];
            random[currentIndex] = random[randomIndex];
            random[randomIndex] = temporaryValue;
          } // @todo apply a random sort to the answers array


          return random;
        } else {
          return answers;
        }
      }
      /**
       * haxProperties integration via file reference
       */

    }, {
      key: "haxHooks",
      value:
      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */
      function haxHooks() {
        return {
          editModeChanged: "haxeditModeChanged",
          activeElementChanged: "haxactiveElementChanged",
          preProcessNodeToContent: "haxpreProcessNodeToContent",
          preProcessInsertContent: "haxpreProcessInsertContent",
          inlineContextMenu: "haxinlineContextMenu"
        };
      }
    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(element, value) {
        if (value) {
          this._haxstate = value;
        }
      }
    }, {
      key: "haxeditModeChanged",
      value: function haxeditModeChanged(value) {
        this._haxstate = value;
      }
      /**
       * add buttons when it is in context
       */

    }, {
      key: "haxinlineContextMenu",
      value: function haxinlineContextMenu(ceMenu) {
        ceMenu.ceButtons = [{
          icon: "icons:add",
          callback: "haxClickInlineAdd",
          label: "Add answer"
        }, {
          icon: "icons:remove",
          callback: "haxClickInlineRemove",
          label: "Remove answer"
        }];
      }
    }, {
      key: "haxClickInlineAdd",
      value: function haxClickInlineAdd(e) {
        this.resetAnswers();
        var d = this.answers;
        d.push({
          label: "New answer",
          correct: false
        });
        this.answers = babelHelpers.toConsumableArray(d);
        return true;
      }
    }, {
      key: "haxClickInlineRemove",
      value: function haxClickInlineRemove(e) {
        if (this.answers.length > 0) {
          this.resetAnswers();
          var d = this.answers;
          d.pop();
          this.answers = babelHelpers.toConsumableArray(d);
          return true;
        }
      }
      /**
       * HAX preprocess Node to Content hook
       */

    }, {
      key: "haxpreProcessNodeToContent",
      value: function () {
        var _haxpreProcessNodeToContent = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(node) {
          var i, answer;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  // ensure we dont accidently have the answer displayed!
                  // this also rips the data into the lightDom for saving
                  // so that we can unset the array data on the object at save time
                  // this helps improve SEO / compatibility with CMS solutions
                  if (node.answers) {
                    // ensure this is null before generating new answers
                    // otherwise page to page saves we could lose statefulness
                    this.innerHTML = "";

                    for (i in node.answers) {
                      answer = document.createElement("input");
                      answer.setAttribute("type", "checkbox");
                      answer.value = node.answers[i].label;

                      if (node.answers[i].correct) {
                        answer.setAttribute("correct", "correct");
                      }

                      node.appendChild(answer);
                    }
                  }

                  return _context.abrupt("return", node);

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function haxpreProcessNodeToContent(_x) {
          return _haxpreProcessNodeToContent.apply(this, arguments);
        }

        return haxpreProcessNodeToContent;
      }()
      /**
       * HAX preprocess insert content hook
       */

    }, {
      key: "haxpreProcessInsertContent",
      value: function haxpreProcessInsertContent(detail) {
        // ensure we dont accidently have the answer displayed!
        if (detail.properties.answers) {
          detail.properties.answers = detail.properties.answers.map(function (val) {
            if (val.userGuess) {
              delete val.userGuess;
            }

            return val;
          });
        }

        return detail;
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.setAttribute("typeof", "oer:Assessment"); // check lightdom on setup for answers to be read in
        // this only happens on initial paint

        if (this.children.length > 0) {
          var inputs = Array.from(this.querySelectorAll("input"));
          var answers = [];

          for (var i in inputs) {
            var answer = {
              label: inputs[i].value,
              correct: inputs[i].getAttribute("correct") == null ? false : true
            };
            answers.push(answer);
          }

          this.answers = answers; // wipe lightdom after reading it in for data. This makes it harder for someone
          // to just inspect the document and get at the underlying data

          this.innerHTML = "";
        }
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice), "styles", this)), [(0, _index.css)(_templateObject7_a31d3fa0feb911eb8439e3eec9305af7 || (_templateObject7_a31d3fa0feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          min-width: 160px;\n          padding: 16px 16px 54px 16px;\n          color: var(--simple-colors-default-theme-grey-12);\n          --simple-fields-field-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --simple-fields-field-ink-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --simple-fields-field-checked-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --simple-fields-field-checked-ink-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n          --simple-fields-field-checkmark-color: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --simple-fields-field-label-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --simple-fields-field-error-color: var(\n            --simple-colors-default-theme-red-8\n          );\n        }\n\n        :host button {\n          background-color: var(--simple-colors-default-theme-grey-1);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        :host button:hover,\n        :host button:focus,\n        :host button:active {\n          cursor: pointer;\n          background-color: var(--simple-colors-default-theme-grey-2);\n          color: var(--simple-colors-default-theme-grey-12);\n        }\n        h3 {\n          margin: 8px;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          padding: 0;\n        }\n        simple-fields-field {\n          padding: 8px;\n          margin: 2px;\n        }\n        simple-fields-field::part(option-inner) {\n          position: absolute;\n          right: 0px;\n          bottom: 50%;\n          top: 50%;\n          padding: 0px;\n          margin: 0px;\n        }\n        simple-icon {\n          display: inline-flex;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "multiple-choice";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(MultipleChoice), "properties", this)), {}, {
          /**
           * Support disabling interaction with the entire board
           */
          disabled: {
            type: Boolean
          },

          /**
           * Simple option, otherwise allow multiple via checkbox
           */
          singleOption: {
            type: Boolean,
            attribute: "single-option"
          },

          /**
           * Text of the label to check your answer
           */
          checkLabel: {
            type: String,
            attribute: "check-label"
          },

          /**
           * Text of the reset button
           */
          resetLabel: {
            type: String,
            attribute: "reset-label"
          },

          /**
           * Related Resource ID
           */
          relatedResource: {
            type: String,
            attribute: "related-resource"
          },

          /**
           * Question to ask
           */
          question: {
            type: String
          },

          /**
           * Array of possible answers
           */
          answers: {
            type: Array
          },

          /**
           * Displayed Answer set.
           */
          displayedAnswers: {
            type: Array
          },

          /**
           * Correct answer text to display
           */
          correctText: {
            type: String,
            attribute: "correct-text"
          },

          /**
           * Incorrect answer text to display
           */
          incorrectText: {
            type: String,
            attribute: "incorrect-text"
          },

          /**
           * Correct answer text to display
           */
          correctIcon: {
            type: String,
            attribute: "correct-icon"
          },

          /**
           * Incorrect answer text to display
           */
          incorrectIcon: {
            type: String,
            attribute: "incorrect-icon"
          },

          /**
           * Name of the quiz - hardcoded for now from HTML
           */
          quizName: {
            type: String,
            attribute: "quiz-name"
          },

          /**
           * Randomize the display of the answers
           */
          randomize: {
            type: Boolean,
            reflect: true
          },

          /**
           * flag to hide buttons
           */
          hideButtons: {
            type: Boolean,
            attribute: "hide-buttons"
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return new URL("./lib/".concat(this.tag, ".haxProperties.json"), meta.url).href;
      }
    }]);
    return MultipleChoice;
  }((0, _schemaBehaviors.SchemaBehaviors)(_simpleColors.SimpleColors));

  _exports.MultipleChoice = MultipleChoice;
  window.customElements.define(MultipleChoice.tag, MultipleChoice);
});