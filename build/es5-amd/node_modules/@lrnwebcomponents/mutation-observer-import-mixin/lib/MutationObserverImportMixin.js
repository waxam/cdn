define(["exports", "../../dynamic-import-registry/dynamic-import-registry.js"], function (_exports, _dynamicImportRegistry) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MutationObserverImportMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `MutationObserverImportMixin`
   * `Super class to do imports of new custom elements on the fly`
   */
  var MutationObserverImportMixin = function MutationObserverImportMixin(SuperClass) {
    // SuperClass so we can write any web component library / base class
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        window.DynamicImportRegistry.requestAvailability();
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          var _this2 = this;

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          }

          this._mutationObserver = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
              mutation.addedNodes.forEach(function (node) {
                if (node.tagName) {
                  _this2.processNewElement(node);
                }
              });
            });
          });

          this._mutationObserver.observe(this, {
            childList: true
          });
        }
      }, {
        key: "processElementList",
        value: function processElementList(list) {
          for (var i = 0; i < list.length; i++) {
            this.processNewElement(list[i]);
          }
        }
      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          this._mutationObserver.disconnect();

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
          }
        }
        /**
         * Process new elements
         */

      }, {
        key: "processNewElement",
        value: function processNewElement(node) {
          var registry = window.DynamicImportRegistry.requestAvailability();
          registry.loadDefinition(node.tagName);
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.MutationObserverImportMixin = MutationObserverImportMixin;
});