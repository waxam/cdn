define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ThreadedDiscussion = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject6_32309170c5f311ea81c635a4a0b7726b() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-size: var(--threaded-discussion-FontSize, 14px);\n          line-height: var(--threaded-discussion-LineHeight, 160%);\n          color: var(--threaded-discussion-Color, #95989a);\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        #threads {\n          background-color: var(\n            --threaded-discussion-threads-BackgroundColor,\n            #eaeaea\n          );\n          padding: 1px;\n          width: calc(100% - 2px);\n          margin: var(--threaded-discussion-threads-Margin, 0);\n        }\n        #new-thread {\n          background-color: var(\n            --threaded-discussion-new-thread-BackgroundColor,\n            var(--threaded-discussion-threads-BackgroundColor, #eaeaea)\n          );\n          padding: 2px 1px;\n          width: calc(100% - 2px);\n          margin: var(\n            --threaded-discussion-new-thread-Margin,\n            var(--threaded-discussion-threads-Margin, 0)\n          );\n        }\n        .thread > *,\n        #new-thread > * {\n          background-color: var(\n            --threaded-discussion-comment-BackgroundColor,\n            #fff\n          );\n        }\n        .comment {\n          margin: 1px 1px 0;\n          padding: var(--threaded-discussion-comment-Padding, 10px) 0;\n        }\n        .reply-form {\n          margin: 0;\n          width: calc(\n            100% -\n              var(\n                --threaded-discussion-reply-indent,\n                calc(2 * var(--threaded-discussion-comment-Padding, 10px))\n              )\n          );\n        }\n        .reply-form,\n        .comment-reply {\n          margin-left: var(\n            --threaded-discussion-reply-indent,\n            calc(2 * var(--threaded-discussion-comment-Padding, 10px))\n          );\n        }\n        .comment-header {\n          display: flex;\n          align-items: stretch;\n          justify-content: space-between;\n          margin-bottom: var(--threaded-discussion-comment-Padding, 10px);\n        }\n        .comment-header,\n        .comment-body {\n          padding: 0 var(--threaded-discussion-comment-Padding, 10px);\n        }\n        lrndesign-avatar {\n          margin-right: var(--threaded-discussion-comment-Padding, 10px);\n        }\n        .comment-header > div {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-evenly;\n          align-items: flex-start;\n          flex: 1 1 auto;\n        }\n        .comment-name {\n          margin: 0;\n          font-size: var(\n            --threaded-discussion-name-FontSize,\n            calc(1.1 * var(--threaded-discussion-FontSize, 14px))\n          );\n          font-weight: var(--threaded-discussion-name-FontWeight, bold);\n          font-family: var(--threaded-discussion-name-FontFamily);\n          color: var(--threaded-discussion-name-Color, #4b4b4b);\n        }\n        .comment-date {\n          margin: 0;\n          font-size: var(\n            --threaded-discussion-date-FontSize,\n            calc(0.8 * var(--threaded-discussion-FontSize, 14px))\n          );\n          font-weight: var(--threaded-discussion-date-FontWeight, normal);\n          font-family: var(--threaded-discussion-date-FontFamily);\n          color: var(\n            --threaded-discussion-date-Color,\n            var(--threaded-discussion-Color, #95989a)\n          );\n        }\n        .comment-body {\n          font-size: var(--threaded-discussion-FontSize, 14px);\n        }\n      "]);

    _templateObject6_32309170c5f311ea81c635a4a0b7726b = function _templateObject6_32309170c5f311ea81c635a4a0b7726b() {
      return data;
    };

    return data;
  }

  function _templateObject5_32309170c5f311ea81c635a4a0b7726b() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <div class=\"thread\">\n              ", "\n              ", "\n              <threaded-discussion-form\n                button-label=\"", "\"\n                class=\"reply-form\"\n                @comment-demo=\"", "\"\n                @comment-submitted=\"", "\"\n                ?demo=\"", "\"\n                field=\"", "\"\n                ?disabled=\"", "\"\n                ?hidden=\"", "\"\n                .icon=\"", "\"\n                .submit=\"", "\"\n                textarea-label=\"", "\"\n                .thread=\"", "\"\n              >\n              </threaded-discussion-form>\n            </div>\n          "]);

    _templateObject5_32309170c5f311ea81c635a4a0b7726b = function _templateObject5_32309170c5f311ea81c635a4a0b7726b() {
      return data;
    };

    return data;
  }

  function _templateObject4_32309170c5f311ea81c635a4a0b7726b() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"threads\">\n        ", "\n      </div>\n    "]);

    _templateObject4_32309170c5f311ea81c635a4a0b7726b = function _templateObject4_32309170c5f311ea81c635a4a0b7726b() {
      return data;
    };

    return data;
  }

  function _templateObject3_32309170c5f311ea81c635a4a0b7726b() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                    <p>", "</p>\n                  "]);

    _templateObject3_32309170c5f311ea81c635a4a0b7726b = function _templateObject3_32309170c5f311ea81c635a4a0b7726b() {
      return data;
    };

    return data;
  }

  function _templateObject2_32309170c5f311ea81c635a4a0b7726b() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div\n        aria-describedby=\"", "\"\n        class=\"comment ", "\"\n        id=\"comment-", "\"\n      >\n        <div class=\"comment-header\">\n          <lrndesign-avatar\n            .accent-color=\"", "\"\n            .label=\"", " ", "\"\n            .src=\"", "\"\n            two-chars\n          >\n          </lrndesign-avatar>\n          <div>\n            <p class=\"comment-name\">", " ", "</p>\n            <p class=\"comment-date\">", "</p>\n          </div>\n        </div>\n        <div class=\"comment-body\">\n          ", "\n        </div>\n      </div>\n    "]);

    _templateObject2_32309170c5f311ea81c635a4a0b7726b = function _templateObject2_32309170c5f311ea81c635a4a0b7726b() {
      return data;
    };

    return data;
  }

  function _templateObject_32309170c5f311ea81c635a4a0b7726b() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <slot name=\"before-discussion\"></slot>\n      ", "\n      <div id=\"new-thread\">\n        <slot name=\"before-new-thread\"></slot>\n        <threaded-discussion-form\n          button-label=\"", "\"\n          class=\"comment-form\"\n          @comment-demo=\"", "\"\n          @comment-submitted=\"", "\"\n          ?demo=\"", "\"\n          field=\"", "\"\n          .icon=\"", "\"\n          ?hidden=\"", "\"\n          ?disabled=\"", "\"\n          .submit=\"", "\"\n          textarea-label=\"", "\"\n        >\n        </threaded-discussion-form>\n        <slot name=\"after-new-thread\"></slot>\n      </div>\n      ", "\n      <slot name=\"after-discussion\"></slot>\n    "]);

    _templateObject_32309170c5f311ea81c635a4a0b7726b = function _templateObject_32309170c5f311ea81c635a4a0b7726b() {
      return data;
    };

    return data;
  }

  /**
   * `threaded-discussion`
   * a threaded discussions component
   * 
  ### Styling
  
  `<threaded-discussion>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--threaded-discussion-FontSize` | default font-size | 14px
  `--threaded-discussion-LineHeight` | default line-height | 160%
  `--threaded-discussion-Color` | default text color | #95989a
  `--threaded-discussion-threads-BackgroundColor` | default thread backbround-color | #eaeaea
  `--threaded-discussion-threads-Margin` | default thread margin | 0
  `--threaded-discussion-new-thread-BackgroundColor` | overrides default thread backbround-color for new thread | var(--threaded-discussion-threads-BackgroundColor, #eaeaea)
  `--threaded-discussion-new-thread-Margin` | overrides default thread margin for new thread | var(--threaded-discussion-threads-Margin, 0))
  `--threaded-discussion-comment-BackgroundColor` | comment bacground color | #fff
  `--threaded-discussion-comment-Padding` | comment padding | 10px
  `--threaded-discussion-reply-indent` | left-indent for thread replies | calc(2 * var(--threaded-discussion-comment-Padding,10px))));
  `--threaded-discussion-name-FontSize` | comment author name font-size | calc(1.1 * var(--threaded-discussion-FontSize, 14px)));
  `--threaded-discussion-name-FontWeight` | comment author name font-weight | bold;
  `--threaded-discussion-name-FontFamily` | overrides default font-family for comment author name | 
  `--threaded-discussion-name-Color` | comment author name text color | #4b4b4b);
  `--threaded-discussion-date-FontSize` | comment author name font-size | calc(0.8 * var(--threaded-discussion-FontSize, 14px)));
  `--threaded-discussion-date-FontWeight` | comment author name font-weight | normal
  `--threaded-discussion-date-FontFamily` | overrides default font-family for comment date | 
  `--threaded-discussion-date-Color` | comment date text color | #95989a));
   *
   * @element threaded-discussion
   * @demo ./demo/index.html demo
   */
  var ThreadedDiscussion =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(ThreadedDiscussion, _LitElement);
    babelHelpers.createClass(ThreadedDiscussion, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_32309170c5f311ea81c635a4a0b7726b(), this.ascending ? "" : this.threads, this.commentButtonLabel || "Submit", this._handleDemo, this._handleSubmit, this.demo, this.map.body || "body", this.commentIcon, this.hidden, this.disabled, this._getPath(this.submit, this.params), this.commentTextareaLabel || "Enter comment", !this.ascending ? "" : this.threads);
      }
    }, {
      key: "getComment",
      value: function getComment(comment, thread) {
        return (0, _litElement.html)(_templateObject2_32309170c5f311ea81c635a4a0b7726b(), thread || "", thread ? "comment-reply" : "", comment.id, comment.color, comment.firstName, comment.lastName, comment.avatar, comment.firstName, comment.lastName, this._getDate(comment.date), !comment.body ? "" : comment.body.split(/[\r\n]+/).map(function (p) {
          return (0, _litElement.html)(_templateObject3_32309170c5f311ea81c635a4a0b7726b(), p);
        }));
      }
    }, {
      key: "threads",
      get: function get() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject4_32309170c5f311ea81c635a4a0b7726b(), (this.sortedData || []).map(function (thread) {
          return (0, _litElement.html)(_templateObject5_32309170c5f311ea81c635a4a0b7726b(), _this2.getComment(thread), (thread.replies || []).map(function (reply) {
            return _this2.getComment(reply, thread.id);
          }), _this2.replyButtonLabel || "Reply", _this2._handleDemo, _this2._handleSubmit, _this2.demo, _this2.map.replyBody || _this2.map.body || "body", _this2.disabled, _this2.hidden, _this2.replyIcon, _this2._getPath(_this2.submit, _this2.params), _this2.replyTextareaLabel || "Enter reply", thread.id);
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject6_32309170c5f311ea81c635a4a0b7726b())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "threaded-discussion";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          ascending: {
            type: Boolean,
            attribute: "ascending",
            reflect: true
          },
          commentButtonLabel: {
            type: String,
            attribute: "comment-button-label",
            reflect: true
          },
          commentTextareaLabel: {
            type: String,
            attribute: "comment-textarea-label",
            reflect: true
          },
          commentIcon: {
            type: String,
            attribute: "comment-icon",
            reflect: true
          },
          data: {
            type: Array
          },
          dateLocale: {
            type: String
          },
          dateFormat: {
            type: Object
          },
          map: {
            type: Object
          },
          demo: {
            type: Boolean
          },
          params: {
            type: Object
          },
          replyButtonLabel: {
            type: String,
            attribute: "reply-button-label",
            reflect: true
          },
          replyTextareaLabel: {
            type: String,
            attribute: "reply-textarea-label",
            reflect: true
          },
          replyIcon: {
            type: String,
            attribute: "reply-icon",
            reflect: true
          },
          source: {
            type: String
          },
          submit: {
            type: String
          }
        };
      }
    }]);

    function ThreadedDiscussion() {
      var _this;

      babelHelpers.classCallCheck(this, ThreadedDiscussion);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ThreadedDiscussion).call(this));
      _this.ascending = false;
      _this.data = [];
      _this.dateLocale = "en-US";
      _this.dateFormat = {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "numeric",
        minute: "2-digit"
      };
      _this.demo = false;
      _this.map = {};
      _this.params = {};
      _this.submit = window.location.href;
      new Promise(function (res, rej) {
        return _require.default(["../lrndesign-avatar/lrndesign-avatar.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/threaded-discussion-form.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(ThreadedDiscussion, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ThreadedDiscussion.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ThreadedDiscussion.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (["params", "source"].includes(propName) && _this3.source) _this3.fetchDiscussion();
        });
      }
      /**
       * gets sorted data from mapped data
       *
       * @readonly
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getMap",

      /**
       * gets a property value based on a conversion map
       *
       * @param {object} obj item to check
       * @param {string} prop default property name
       * @param {string} map1 second mapped property to check
       * @param {string} map2 first mapped property to check
       * @returns {*} property value
       * @memberof ThreadedDiscussion
       */
      value: function _getMap(obj, prop, map1, map2) {
        return obj[this._mapProp(prop, map1, map2)];
      }
      /**
       * gets a mapped property based on a conversion map
       *
       * @param {object} obj item to check
       * @param {string} prop default property name
       * @param {string} map1 second mapped property to check
       * @param {string} map2 first mapped property to check
       * @returns {*} property
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_mapProp",
      value: function _mapProp(prop, map1, map2) {
        var map = this.map || {};
        map1 = map1 || prop;
        map2 = map2 || map1;
        return map[map2] || map[map1] || prop;
      }
      /**
       * refreshes comments
       *
       * @param {event} e
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_handleSubmit",
      value: function _handleSubmit(e) {
        this.fetchDiscussion();
      }
      /**
       * demonstrates how data will appear when a comment is submitted
       *
       * @param {event} e
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_handleDemo",
      value: function _handleDemo(e) {
        var _this4 = this;

        if (e.detail && e.detail.textarea) {
          var newComment = {},
              data = this.data;
          newComment[this._mapProp("id")] = "comment-".concat(Date.now());
          newComment[this._mapProp("firstName")] = "DEMO";
          newComment[this._mapProp("lastName")] = "USER";
          newComment[this._mapProp("date")] = this._getDate(new Date());
          newComment[this._mapProp("body")] = e.detail.textarea.value;

          if (e.detail.thread) {
            var filter = data.filter(function (thread) {
              return thread[_this4._mapProp("id")] === e.detail.thread;
            }),
                thread = filter ? filter[0] : undefined;
            newComment[this._mapProp("thread", "replyThread")] = e.detail.thread;

            if (thread) {
              thread[this._mapProp("replies")] = [].concat(babelHelpers.toConsumableArray(thread[this._mapProp("replies")]), [newComment]);
            } else {
              data.push(newComment);
            }
          } else {
            newComment[this._mapProp("replies")] = [];
            data.push(newComment);
          }

          this.data = data;
          this.mappedData;
          e.detail.textarea.value = "";
        }
      }
      /**
       * fetches data from discussion
       *
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "fetchDiscussion",
      value: function fetchDiscussion() {
        var _this5 = this;

        fetch(this._getPath(this.source, this.params)).then(function (response) {
          return response.json();
        }).then(function (data) {
          return _this5.data = data;
        });
      }
      /**
       * converts object to array
       *
       * @param {object} obj
       * @returns array
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getArray",
      value: function _getArray(obj) {
        return typeof obj === "array" ? obj : Object.keys(obj || {}).map(function (key) {
          var item = obj[key];
          item.id = key;
          return item;
        });
      }
      /**
       * gets formated date from date string
       *
       * @param {string} d
       * @returns string
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getDate",
      value: function _getDate(d) {
        var format = typeof this.dateFormat === "string" ? JSON.parse(this.dateFormat) : this.dateFormat;
        return d && new Date(d) ? new Date(d).toLocaleString(this.dateLocale, format) : "";
      }
      /**
       * gets full path with encoded params
       *
       * @param {string} path
       * @param {object} params
       * @returns string
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getPath",
      value: function _getPath(path, params) {
        var query = Object.keys(params || {}).map(function (p) {
          return "".concat(encodeURI(p), "=").concat(encodeURI(params[p]));
        }).join("&");
        return query ? "".concat(path, "?").concat(query) : path;
      }
    }, {
      key: "sortedData",
      get: function get() {
        var _this6 = this;

        return this.mappedData.sort(function (a, b) {
          return _this6.ascending ? a.date - b.date : b.date - a.date;
        });
      }
      /**
       * gets data that is structured according to a map object
       *
       * @readonly
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "mappedData",
      get: function get() {
        var _this7 = this;

        var data = this._getArray(this.data || []);

        return (data || []).filter(function (comment) {
          return !_this7._getMap(comment, "thread", "replyThread");
        }).map(function (thread) {
          var params = _this7.params,
              id = _this7._getMap(thread, "id"),
              replies = _this7._getMap(thread, "replies") || (data || []).filter(function (comment) {
            return _this7._getMap(comment, "thread", "replyThread") === id;
          });

          params[_this7._mapProp("thread")] = id;
          return {
            //gets all threads and comments if they are not mapped as nested array of thread
            id: id,
            firstName: _this7._getMap(thread, "firstName"),
            lastName: _this7._getMap(thread, "lastName"),
            avatar: _this7._getMap(thread, "avatar"),
            body: _this7._getMap(thread, "body"),
            color: _this7._getMap(thread, "color"),
            date: _this7._getMap(thread, "date"),
            submit: _this7._getPath(_this7.submit, params),
            replies: _this7._getArray(replies).map(function (reply) {
              //gets all comments if they are mapped as nested array of thread
              return {
                id: _this7._getMap(reply, "id", "replyId"),
                thread: _this7._getMap(reply, "thread", "replyThread"),
                firstName: _this7._getMap(reply, "firstName", "replyFirstName"),
                lastName: _this7._getMap(reply, "lastName", "replyLastName"),
                avatar: _this7._getMap(reply, "avatar", "replyAvatar"),
                body: _this7._getMap(reply, "body", "replyBody"),
                color: _this7._getMap(reply, "color", "replyColor"),
                date: _this7._getMap(reply, "date", "replyDate")
              };
            })
          };
        });
      }
    }]);
    return ThreadedDiscussion;
  }(_litElement.LitElement);

  _exports.ThreadedDiscussion = ThreadedDiscussion;
  window.customElements.define(ThreadedDiscussion.tag, ThreadedDiscussion);
});