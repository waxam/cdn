define(["exports", "require", "../../lit/index.js", "../../@github/time-elements/dist/index.js", "./lib/threaded-discussion-form.js"], function (_exports, _require, _index, _index2, _threadedDiscussionForm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ThreadedDiscussion = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_e9cd4820ce4611ecb13bcf602138080f, _templateObject2_e9cd4820ce4611ecb13bcf602138080f, _templateObject3_e9cd4820ce4611ecb13bcf602138080f, _templateObject4_e9cd4820ce4611ecb13bcf602138080f, _templateObject5_e9cd4820ce4611ecb13bcf602138080f, _templateObject6_e9cd4820ce4611ecb13bcf602138080f, _templateObject7_e9cd4820ce4611ecb13bcf602138080f, _templateObject8_e9cd4820ce4611ecb13bcf602138080f;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `threaded-discussion`
   * a threaded discussions component
   * 
  ### Styling
  
  `<threaded-discussion>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--threaded-discussion-FontSize` | default font-size | 14px
  `--threaded-discussion-LineHeight` | default line-height | 160%
  `--threaded-discussion-Color` | default text color | #95989a
  `--threaded-discussion-threads-BackgroundColor` | default thread backbround-color | #eaeaea
  `--threaded-discussion-threads-Margin` | default thread margin | 0
  `--threaded-discussion-thread-focus-BorderLeft` | default thread border left color when commenting | 4px solid blue
  `--threaded-discussion-new-thread-BackgroundColor` | overrides default thread backbround-color for new thread | var(--threaded-discussion-threads-BackgroundColor, #eaeaea)
  `--threaded-discussion-new-thread-Margin` | overrides default thread margin for new thread | var(--threaded-discussion-threads-Margin, 0))
  `--threaded-discussion-new-thread-focus-BorderLeft` | overrides default border left color when posting a new thread | 
  `--threaded-discussion-comment-BackgroundColor` | comment bacground color | #fff
  `--threaded-discussion-comment-Padding` | comment padding | 10px
  `--threaded-discussion-reply-indent` | left-indent for thread replies | calc(2 * var(--threaded-discussion-comment-Padding,10px))));
  `--threaded-discussion-name-FontSize` | comment author name font-size | calc(1.1 * var(--threaded-discussion-FontSize, 14px)));
  `--threaded-discussion-name-FontWeight` | comment author name font-weight | bold;
  `--threaded-discussion-name-FontFamily` | overrides default font-family for comment author name | 
  `--threaded-discussion-name-Color` | comment author name text color | #4b4b4b);
  `--threaded-discussion-date-FontSize` | comment author name font-size | calc(0.8 * var(--threaded-discussion-FontSize, 14px)));
  `--threaded-discussion-date-FontWeight` | comment author name font-weight | normal
  `--threaded-discussion-date-FontFamily` | overrides default font-family for comment date | 
  `--threaded-discussion-date-Color` | comment date text color | #95989a));
   *
   * @element threaded-discussion
   * @demo ./demo/index.html demo
   */
  var ThreadedDiscussion = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ThreadedDiscussion, _LitElement);

    var _super = _createSuper(ThreadedDiscussion);

    function ThreadedDiscussion() {
      var _this;

      babelHelpers.classCallCheck(this, ThreadedDiscussion);
      _this = _super.call(this);
      _this.latest = false;
      _this.data = [];
      _this.dateLocale = "en-US";
      _this.dateFormat = {
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "numeric",
        minute: "2-digit"
      };
      _this.demo = false;
      _this.map = {};
      _this.params = {};
      _this.submit = window.location.href;
      _this.__data = [];
      _this.__loading = false;
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../lrndesign-avatar/lrndesign-avatar.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(ThreadedDiscussion, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_e9cd4820ce4611ecb13bcf602138080f || (_templateObject_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <slot name=\"before-discussion\"></slot>\n      ", "\n      <div id=\"new-thread\">\n        <slot name=\"before-new-thread\"></slot>\n        <threaded-discussion-form\n          button-label=\"", "\"\n          class=\"comment-form\"\n          @comment-demo=\"", "\"\n          @comment-submitted=\"", "\"\n          ?demo=\"", "\"\n          field=\"", "\"\n          .icon=\"", "\"\n          ?hidden=\"", "\"\n          ?disabled=\"", "\"\n          .submit=\"", "\"\n          textarea-label=\"", "\"\n        >\n        </threaded-discussion-form>\n        <slot name=\"after-new-thread\"></slot>\n      </div>\n      ", "\n      <slot name=\"after-discussion\"></slot>\n    "])), this.latest ? "" : this.threads, this.commentButtonLabel || "Submit", this._handleDemo, this._handleSubmit, this.demo, this.map.body || "body", this.commentIcon, this.hidden, this.disabled, this._getPath(this.submit, this.params), this.commentTextareaLabel || "Enter comment", !this.latest ? "" : this.threads);
      }
    }, {
      key: "threads",
      get: function get() {
        var _this2 = this;

        return (0, _index.html)(_templateObject2_e9cd4820ce4611ecb13bcf602138080f || (_templateObject2_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"threads\">\n        <div class=\"thread\" ?hidden=\"", "\">\n          ", "\n        </div>\n        ", "\n      </div>\n    "])), !this.__loading, this.loadingText, this.sortData(this.__data).map(function (thread) {
          return (0, _index.html)(_templateObject3_e9cd4820ce4611ecb13bcf602138080f || (_templateObject3_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n            <div class=\"thread\">\n              ", "\n              ", "\n              <threaded-discussion-form\n                button-label=\"", "\"\n                class=\"reply-form\"\n                @comment-demo=\"", "\"\n                @comment-submitted=\"", "\"\n                ?demo=\"", "\"\n                field=\"", "\"\n                ?disabled=\"", "\"\n                ?hidden=\"", "\"\n                .icon=\"", "\"\n                .submit=\"", "\"\n                textarea-label=\"", "\"\n                .thread=\"", "\"\n              >\n              </threaded-discussion-form>\n            </div>\n          "])), _this2.getComment(thread), (thread.replies || []).map(function (reply) {
            return _this2.getComment(reply, thread.id);
          }), _this2.replyButtonLabel || "Reply", _this2._handleDemo, _this2._handleSubmit, _this2.demo, _this2.map.replyBody || _this2.map.body || "body", _this2.disabled, _this2.hidden, _this2.replyIcon, _this2._getPath(_this2.submit, _this2._getThreadParams(thread.id)), _this2.replyTextareaLabel || "Enter reply", thread.id);
        }));
      }
    }, {
      key: "getComment",
      value: function getComment(comment, thread) {
        return (0, _index.html)(_templateObject4_e9cd4820ce4611ecb13bcf602138080f || (_templateObject4_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <div\n        aria-describedby=\"", "\"\n        class=\"comment ", "\"\n        id=\"comment-", "\"\n      >\n        <div class=\"comment-header\">\n          <lrndesign-avatar\n            .accent-color=\"", "\"\n            .label=\"", " ", "\"\n            .src=\"", "\"\n            two-chars\n          >\n          </lrndesign-avatar>\n          <div>\n            <p class=\"comment-name\">", " ", "</p>\n            <p class=\"comment-date\">\n              ", "\n            </p>\n          </div>\n        </div>\n        <div class=\"comment-body\">\n          ", "\n        </div>\n      </div>\n    "])), thread || "", thread ? "comment-reply" : "", comment.id, comment.color, comment.firstName, comment.lastName, comment.avatar, comment.firstName, comment.lastName, this.relativeDates ? (0, _index.html)(_templateObject5_e9cd4820ce4611ecb13bcf602138080f || (_templateObject5_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n                    <relative-time .datetime=\"", "\">\n                      ", "\n                    </relative-time>\n                  "])), comment.date, this._getDate(comment.date)) : (0, _index.html)(_templateObject6_e9cd4820ce4611ecb13bcf602138080f || (_templateObject6_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n                    <local-time\n                      month=\"", "\"\n                      day=\"", "\"\n                      year=\"", "\"\n                      hour=\"", "\"\n                      minute=\"", "\"\n                      second=\"", "\"\n                      time-zone-name=\"short\"\n                      .datetime=\"", "\"\n                    >\n                      ", "\n                    </local-time>\n                  "])), this.dateFormat && this.dateFormat.month ? this.dateFormat.month : "long", this.dateFormat && this.dateFormat.day ? this.dateFormat.day : "numeric", this.dateFormat && this.dateFormat.year ? this.dateFormat.year : "numeric", this.dateFormat && this.dateFormat.hour ? this.dateFormat.hour : "2-digit", this.dateFormat && this.dateFormat.minute ? this.dateFormat.minute : "2-digit", this.dateFormat && this.dateFormat.second ? this.dateFormat.second : "2-digit", comment.date, this._getDate(comment.date)), (comment.body || "").split(/[\r\n]+/).map(function (p) {
          return (0, _index.html)(_templateObject7_e9cd4820ce4611ecb13bcf602138080f || (_templateObject7_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral([" <p>", "</p> "])), p);
        }));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ThreadedDiscussion.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ThreadedDiscussion.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (["params", "source"].includes(propName) && _this3.source) {
            _this3.__loading = true;

            _this3.fetchDiscussion();
          }
        });
      }
      /**
       * gets sorted data from mapped data
       *
       * @readonly
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "sortData",
      value: function sortData(data) {
        var _this4 = this;

        return data.sort(function (a, b) {
          var aa = typeof a.date === "string" ? Date.parse(a.date) : a.date,
              bb = typeof b.date === "string" ? Date.parse(b.date) : b.date;
          return _this4.latest ? bb - aa : aa - bb;
        });
      }
      /**
       * gets data that is structured according to a map object
       *
       * @readonly
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_handleRawData",
      value: function _handleRawData(data) {
        var _this5 = this;

        this.__loading = false;
        console.log(data);
        return this._getArray(data || []).filter(function (comment) {
          return !_this5._getMap(comment, "thread", "replyThread");
        }).map(function (thread) {
          var id = _this5._getMap(thread, "id"),
              replies = _this5._getMap(thread, "replies") || (data || []).filter(function (comment) {
            return _this5._getMap(comment, "thread", "replyThread") === id;
          });

          return {
            //gets all threads and comments if they are not mapped as nested array of thread
            id: id,
            firstName: _this5._getMap(thread, "firstName"),
            lastName: _this5._getMap(thread, "lastName"),
            avatar: _this5._getMap(thread, "avatar"),
            body: _this5._getMap(thread, "body"),
            color: _this5._getMap(thread, "color"),
            date: _this5._getMap(thread, "date"),
            replies: _this5._getArray(replies || []).map(function (reply) {
              //gets all comments if they are mapped as nested array of thread
              return {
                id: _this5._getMap(reply, "id", "replyId"),
                thread: _this5._getMap(reply, "thread", "replyThread") || id,
                firstName: _this5._getMap(reply, "firstName", "replyFirstName"),
                lastName: _this5._getMap(reply, "lastName", "replyLastName"),
                avatar: _this5._getMap(reply, "avatar", "replyAvatar"),
                body: _this5._getMap(reply, "body", "replyBody"),
                color: _this5._getMap(reply, "color", "replyColor"),
                date: _this5._getMap(reply, "date", "replyDate")
              };
            })
          };
        });
      }
      /**
       * gets a property value based on a conversion map
       *
       * @param {object} obj item to check
       * @param {string} prop default property name
       * @param {string} map1 second mapped property to check
       * @param {string} map2 first mapped property to check
       * @returns {*} property value
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getMap",
      value: function _getMap(obj, prop, map1, map2) {
        return obj[this._mapProp(prop, map1, map2)];
      }
      /**
       * gets a mapped property based on a conversion map
       *
       * @param {object} obj item to check
       * @param {string} prop default property name
       * @param {string} map1 second mapped property to check
       * @param {string} map2 first mapped property to check
       * @returns {*} property
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_mapProp",
      value: function _mapProp(prop, map1, map2) {
        var map = this.map || {};
        map1 = map1 || prop;
        map2 = map2 || map1;
        return map[map2] || map[map1] || prop;
      }
      /**
       * refreshes comments
       *
       * @param {event} e
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_handleSubmit",
      value: function _handleSubmit(e) {
        this.fetchDiscussion();
      }
      /**
       * demonstrates how data will appear when a comment is submitted
       *
       * @param {event} e
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_handleDemo",
      value: function _handleDemo(e) {
        if (e.detail && e.detail.textarea) {
          var newComment = {},
              data = this.__data;
          newComment.id = "comment-".concat(Date.now());
          newComment.firstName = "DEMO";
          newComment.lastName = "USER";
          newComment.date = this._getDate(new Date());
          newComment.body = e.detail.textarea.value;

          if (e.detail.thread) {
            var filter = data.filter(function (thread) {
              return thread.id === e.detail.thread;
            }),
                thread = filter ? filter[0] : undefined;
            newComment.thread = e.detail.thread;

            if (thread) {
              thread.replies = [].concat(babelHelpers.toConsumableArray(thread.replies), [newComment]);
            } else {
              data.push(newComment);
            }
          } else {
            newComment.replies = [];
            data.push(newComment);
          }

          this.__data = [];
          this.__data = data;
          e.detail.textarea.value = "";
        }
      }
      /**
       * fetches data from discussion
       *
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "fetchDiscussion",
      value: function () {
        var _fetchDiscussion = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _this6 = this;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return fetch(this._getPath(this.source, this.params)).then(function (response) {
                    return response.json();
                  }).then(function (data) {
                    return _this6.__data = _this6._handleRawData(data);
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function fetchDiscussion() {
          return _fetchDiscussion.apply(this, arguments);
        }

        return fetchDiscussion;
      }()
      /**
       * converts object to array
       *
       * @param {object} obj
       * @returns array
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getArray",
      value: function _getArray(obj) {
        return typeof obj === "array" ? obj : Object.keys(obj || {}).map(function (key) {
          var item = obj[key];
          item.id = key;
          return item;
        });
      }
      /**
       * gets formated date from date string
       *
       * @param {string} d
       * @returns string
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getDate",
      value: function _getDate(d) {
        var format = typeof this.dateFormat === "string" ? JSON.parse(this.dateFormat) : this.dateFormat;
        return d && new Date(d) ? new Date(d).toLocaleString(this.dateLocale, format) : "";
      }
      /**
       * adds thread id to parameters
       *
       * @param {*} id
       * @returns
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getThreadParams",
      value: function _getThreadParams(id) {
        var params = this.params;
        params[this._mapProp("id")] = id;
        return params;
      }
      /**
       * gets full path with encoded params
       *
       * @param {string} path
       * @param {object} params
       * @returns string
       * @memberof ThreadedDiscussion
       */

    }, {
      key: "_getPath",
      value: function _getPath(path, params) {
        var query = Object.keys(params || {}).map(function (p) {
          return "".concat(encodeURI(p), "=").concat(encodeURI(params[p]));
        }).join("&");
        return query ? "".concat(path, "?").concat(query) : path;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _index.css)(_templateObject8_e9cd4820ce4611ecb13bcf602138080f || (_templateObject8_e9cd4820ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-size: var(--threaded-discussion-FontSize, 14px);\n          line-height: var(--threaded-discussion-LineHeight, 160%);\n          color: var(--threaded-discussion-Color, #95989a);\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        #threads {\n          background-color: var(\n            --threaded-discussion-threads-BackgroundColor,\n            #eaeaea\n          );\n          padding: 1px;\n          width: calc(100% - 2px);\n          margin: var(--threaded-discussion-threads-Margin, 0);\n        }\n        #new-thread {\n          background-color: var(\n            --threaded-discussion-new-thread-BackgroundColor,\n            var(--threaded-discussion-threads-BackgroundColor, #eaeaea)\n          );\n          padding: 2px 1px;\n          width: calc(100% - 2px);\n          margin: var(\n            --threaded-discussion-new-thread-Margin,\n            var(--threaded-discussion-threads-Margin, 0)\n          );\n        }\n        .thread:focus-within,\n        #new-thread:focus-within {\n          border-left: var(\n            --threaded-discussion-thread-focus-BorderLeft,\n            4px solid blue\n          );\n        }\n        #new-thread:focus-within {\n          border-left: var(--threaded-discussion-new-thread-focus-BorderLeft);\n        }\n        .thread > *,\n        #new-thread > * {\n          background-color: var(\n            --threaded-discussion-comment-BackgroundColor,\n            #fff\n          );\n        }\n        .comment {\n          margin: 1px 1px 0;\n          padding: var(--threaded-discussion-comment-Padding, 10px) 0;\n        }\n        .reply-form {\n          margin: 0;\n          width: calc(\n            100% -\n              var(\n                --threaded-discussion-reply-indent,\n                calc(2 * var(--threaded-discussion-comment-Padding, 10px))\n              )\n          );\n        }\n        .reply-form,\n        .comment-reply {\n          margin-left: var(\n            --threaded-discussion-reply-indent,\n            calc(2 * var(--threaded-discussion-comment-Padding, 10px))\n          );\n        }\n        .comment-header {\n          display: flex;\n          align-items: stretch;\n          justify-content: space-between;\n          margin-bottom: var(--threaded-discussion-comment-Padding, 10px);\n        }\n        .comment-header,\n        .comment-body {\n          padding: 0 var(--threaded-discussion-comment-Padding, 10px);\n        }\n        lrndesign-avatar {\n          margin-right: var(--threaded-discussion-comment-Padding, 10px);\n        }\n        .comment-header > div {\n          display: flex;\n          flex-direction: column;\n          justify-content: space-evenly;\n          align-items: flex-start;\n          flex: 1 1 auto;\n        }\n        .comment-name {\n          margin: 0;\n          font-size: var(\n            --threaded-discussion-name-FontSize,\n            calc(1.1 * var(--threaded-discussion-FontSize, 14px))\n          );\n          font-weight: var(--threaded-discussion-name-FontWeight, bold);\n          font-family: var(--threaded-discussion-name-FontFamily);\n          color: var(--threaded-discussion-name-Color, #4b4b4b);\n        }\n        .comment-date {\n          margin: 0;\n          font-size: var(\n            --threaded-discussion-date-FontSize,\n            calc(0.8 * var(--threaded-discussion-FontSize, 14px))\n          );\n          font-weight: var(--threaded-discussion-date-FontWeight, normal);\n          font-family: var(--threaded-discussion-date-FontFamily);\n          color: var(\n            --threaded-discussion-date-Color,\n            var(--threaded-discussion-Color, #95989a)\n          );\n        }\n        .comment-body {\n          font-size: var(--threaded-discussion-FontSize, 14px);\n        }\n      "])))];
      }
    }, {
      key: "tag",
      get: function get() {
        return "threaded-discussion";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * sort comments latest-first
           */
          latest: {
            type: Boolean,
            attribute: "latest",
            reflect: true
          },

          /**
           * label for comment submit button
           */
          commentButtonLabel: {
            type: String,
            attribute: "comment-button-label"
          },

          /**
           * label for comment textarea
           */
          commentTextareaLabel: {
            type: String,
            attribute: "comment-textarea-label"
          },

          /**
           * optional icon for comment button
           */
          commentIcon: {
            type: String,
            attribute: "comment-icon"
          },

          /**
           * raw data, can be Object or Array
           */
          data: {
            type: Object
          },

          /**
           * locale for date formatting
           */
          dateLocale: {
            type: String
          },

          /**
           * JS format object for dates
           */
          dateFormat: {
            type: Object
          },

          /**
           * discussion in demo mode?
           * Instead of submitting,
           * submission is temporarily inserted into data.
           */
          demo: {
            type: Boolean
          },

          /**
           * text that displays while discussion data loads
           */
          loadingText: {
            type: String,
            attribute: "loading-text"
          },

          /**
           * object that will reformat data,
           * where key is final formatted property,
           * and value is raw data property to map.
           * Example: {avatar: "image"}
           * would use raw data's image property as a avatar
           */
          map: {
            type: Object
          },

          /**
           * query paramerters for getting and sending data
           */
          params: {
            type: Object
          },

          /**
           * display dates in terms of "ago" or "from now"
           */
          relativeDates: {
            attribute: "relative-dates",
            type: Boolean,
            reflect: true
          },

          /**
           * label for reply submit button
           */
          replyButtonLabel: {
            type: String,
            attribute: "reply-button-label",
            reflect: true
          },

          /**
           * label for reply textarea
           */
          replyTextareaLabel: {
            type: String,
            attribute: "reply-textarea-label",
            reflect: true
          },

          /**
           * icon for reply submit button
           */
          replyIcon: {
            type: String,
            attribute: "reply-icon",
            reflect: true
          },

          /**
           * path (without parameters) for fetching data
           */
          source: {
            type: String
          },

          /**
           * path (without parameters) for sending data
           */
          submit: {
            type: String
          },

          /**
           * formatted data
           */
          __data: {
            type: Array
          },

          /**
           * whether data is still loading
           */
          __loading: {
            type: Boolean
          }
        };
      }
    }]);
    return ThreadedDiscussion;
  }(_index.LitElement);

  _exports.ThreadedDiscussion = ThreadedDiscussion;
  window.customElements.define(ThreadedDiscussion.tag, ThreadedDiscussion);
});