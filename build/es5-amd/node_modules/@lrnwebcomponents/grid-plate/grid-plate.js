define(["exports", "../../lit-element/lit-element.js", "../responsive-utility/responsive-utility.js", "../utils/utils.js"], function (_exports, _litElement, _responsiveUtility, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridPlate = void 0;

  function _templateObject2_7c90dd50552d11ebb4022f4768b4777e() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"row\">\n        <div\n          class=\"column\"\n          id=\"col1\"\n          data-label=\"column 1\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-1\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col2\"\n          data-label=\"column 2\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-2\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col3\"\n          data-label=\"column 3\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-3\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col4\"\n          data-label=\"column 4\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-4\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col5\"\n          data-label=\"column 5\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-5\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col6\"\n          data-label=\"column 6\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-6\"></slot>\n        </div>\n      </div>\n    "]);

    _templateObject2_7c90dd50552d11ebb4022f4768b4777e = function _templateObject2_7c90dd50552d11ebb4022f4768b4777e() {
      return data;
    };

    return data;
  }

  function _templateObject_7c90dd50552d11ebb4022f4768b4777e() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host .row {\n          width: 100%;\n          overflow-wrap: break-word;\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: space-between;\n          align-items: stretch;\n          margin: var(--grid-plate-row-margin, 0px);\n          padding: var(--grid-plate-row-padding, 0px);\n        }\n        .column.active {\n          outline: 2px solid var(--simple-colors-default-theme-grey-12, #009dc7) !important;\n          outline-offset: -2px;\n        }\n        :host([disable-responsive]) .column {\n          overflow: hidden;\n        }\n        :host .column {\n          width: 100%;\n          flex: 0 0 auto;\n          min-height: 50px;\n        }\n        :host([ready]) .column {\n          transition: var(\n            --grid-plate-col-transition,\n            0.5s width ease-in-out,\n            0.5s padding ease-in-out,\n            0.5s margin ease-in-out\n          );\n        }\n        :host([data-hax-ray]) .column[style=\"min-height: unset;\"] {\n          display: block !important;\n          opacity: 0.4;\n        }\n        /* make sure that animation for nothing to 2 col doesn't jar layout */\n        :host([layout=\"1-1\"]) #col1 {\n          width: 50%;\n        }\n        :host([layout=\"1-1-1\"]) #col1 {\n          width: 33.33%;\n        }\n        :host([layout=\"1-1-1-1\"]) #col1 {\n          width: 25%;\n        }\n        :host([layout=\"1-1-1-1-1\"]) #col1 {\n          width: 20%;\n        }\n        :host([layout=\"1-1-1-1-1-1\"]) #col1 {\n          width: 16.66%;\n        }\n        :host .column[style=\"min-height: unset;\"] {\n          display: none;\n          outline: none;\n        }\n        :host([data-hax-ray]) .column[style=\"min-height: unset;\"] {\n          width: 0;\n        }\n\n        :host([data-hax-ray]) .column.has-nodes[style=\"min-height: unset;\"] {\n          width: 100%;\n          transition: none;\n        }\n        :host([data-hax-ray]) .column[style=\"min-height: unset;\"]:hover {\n          opacity: 1;\n        }\n        :host([data-hax-ray])\n          .column[style=\"min-height: unset;\"]:hover::before {\n          content: \"Hidden by column layout\";\n          position: sticky;\n          display: inline-flex;\n          background-color: black;\n          color: white;\n          padding: 0px 8px;\n          font-size: 12px;\n          line-height: 16px;\n          margin: 12px 13px;\n          float: right;\n          width: 124px;\n        }\n        :host .column ::slotted(*) {\n          margin: var(--grid-plate-item-margin, 15px);\n          padding: var(--grid-plate-item-padding, 15px);\n          max-width: calc(100% - 60px);\n          max-width: -webkit-fill-available;\n        }\n        :host([ready]) .column ::slotted(*) {\n          transition: var(\n            --grid-plate-col-transition,\n            0.5s color ease-in-out,\n            0.5s background-color ease-in-out\n          );\n        }\n        /** this implies hax editing state is available **/\n        :host([data-hax-ray]) .column ::slotted(*) {\n          outline: 1px solid var(--simple-colors-default-theme-grey-2, #eeeeee);\n          outline-offset: -2px;\n        }\n        :host([data-hax-ray]) .column ::slotted(*:hover) {\n          outline: 1px solid var(--simple-colors-default-theme-grey-8, #eeeeee);\n        }\n        :host([data-hax-ray]) .column {\n          outline: 1px solid var(--simple-colors-default-theme-grey-2, #eeeeee);\n          outline-offset: -2px;\n        }\n        :host([data-hax-ray]) .column:hover {\n          outline: 1px solid var(--simple-colors-default-theme-grey-8, #eeeeee);\n        }\n        :host([data-hax-ray]) div ::slotted(*.active):before {\n          outline: 1px var(--simple-colors-default-theme-grey-4) solid;\n          background-color: inherit;\n          content: \" \";\n          width: 100%;\n          display: block;\n          position: relative;\n          margin: -10px 0 0 0;\n          z-index: 2;\n          height: 10px;\n        }\n        :host([data-hax-ray]) div ::slotted(img.active),\n        :host([data-hax-ray]) div ::slotted(*.active):before {\n          background-color: var(\n            --simple-colors-default-theme-grey-12,\n            #009dc7\n          ) !important;\n          outline: 1px solid var(--simple-colors-default-theme-grey-12, #009dc7);\n        }\n\n        @media screen and (min-color-index: 0) and(-webkit-min-device-pixel-ratio:0) {\n          :host([data-hax-ray]) div ::slotted(*.active) {\n            background-color: var(\n              --simple-colors-default-theme-grey-12,\n              #009dc7\n            ) !important;\n            outline: 1px solid\n              var(--simple-colors-default-theme-grey-12, #009dc7);\n          }\n        }\n      "]);

    _templateObject_7c90dd50552d11ebb4022f4768b4777e = function _templateObject_7c90dd50552d11ebb4022f4768b4777e() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  // need to make this an object so that HAX can listen for it correctly
  var GridPlateLayoutOptions = function GridPlateLayoutOptions() {
    babelHelpers.classCallCheck(this, GridPlateLayoutOptions);
    this.resizeTimer = null;
    this.layouts = {
      1: {
        columnLayout: "1: full width",
        xs: ["100%"],
        sm: ["100%"],
        md: ["100%"],
        lg: ["100%"],
        xl: ["100%"]
      },
      "1-1": {
        columnLayout: "2: equal width",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["50%", "50%"],
        lg: ["50%", "50%"],
        xl: ["50%", "50%"]
      },
      "2-1": {
        columnLayout: "2: wide & narrow",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["66.6666667%", "33.3333337%"],
        lg: ["66.6666667%", "33.3333337%"],
        xl: ["66.6666667%", "33.3333337%"]
      },
      "1-2": {
        columnLayout: "2: narrow & wide",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["33.3333333%", "66.6666667%"],
        lg: ["33.3333333%", "66.6666667%"],
        xl: ["33.3333333%", "66.6666667%"]
      },
      "3-1": {
        columnLayout: "2: wider & narrower",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["75%", "25%"],
        lg: ["75%", "25%"],
        xl: ["75%", "25%"]
      },
      "1-3": {
        columnLayout: "2: narrower & wider",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["25%", "75%"],
        lg: ["25%", "75%"],
        xl: ["25%", "75%"]
      },
      "1-1-1": {
        columnLayout: "3: equal width",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "100%", "100%"],
        md: ["33.3333333%", "33.3333333%", "33.3333333%"],
        lg: ["33.3333333%", "33.3333333%", "33.3333333%"],
        xl: ["33.3333333%", "33.3333333%", "33.3333333%"]
      },
      "2-1-1": {
        columnLayout: "3: wide, narrow, and narrow",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "50%", "50%"],
        md: ["50%", "25%", "25%"],
        lg: ["50%", "25%", "25%"],
        xl: ["50%", "25%", "25%"]
      },
      "1-2-1": {
        columnLayout: "3: narrow, wide, and narrow",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "100%", "100%"],
        md: ["25%", "50%", "25%"],
        lg: ["25%", "50%", "25%"],
        xl: ["25%", "50%", "25%"]
      },
      "1-1-2": {
        columnLayout: "3: narrow, narrow, and wide",
        xs: ["100%", "100%", "100%"],
        sm: ["50%", "50%", "100%"],
        md: ["25%", "25%", "50%"],
        lg: ["25%", "25%", "50%"],
        xl: ["25%", "25%", "50%"]
      },
      "1-1-1-1": {
        columnLayout: "4: equal width",
        xs: ["100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%"],
        md: ["25%", "25%", "25%", "25%"],
        lg: ["25%", "25%", "25%", "25%"],
        xl: ["25%", "25%", "25%", "25%"]
      },
      "1-1-1-1-1": {
        columnLayout: "5: equal width",
        xs: ["100%", "100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%", "50%"],
        md: ["20%", "20%", "20%", "20%", "20%"],
        lg: ["20%", "20%", "20%", "20%", "20%"],
        xl: ["20%", "20%", "20%", "20%", "20%"]
      },
      "1-1-1-1-1-1": {
        columnLayout: "6: equal width",
        xs: ["100%", "100%", "100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%", "50%", "50%"],
        md: ["33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%"],
        lg: ["16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%"],
        xl: ["16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%"]
      }
    };
    this.options = {};
    var layoutFlip = Object.keys(this.layouts); // loop through all the supplied layouts to get the HAX layout options & descriptions

    for (var i = 1; i < layoutFlip.length; i++) {
      this.options[layoutFlip[i]] = this.layouts[layoutFlip[i]].columnLayout;
    }
  };
  /**
   * `grid-plate`
   * `A grid plate based on a layout that manipulates it.`
   * @demo demo/index.html
   * @element grid-plate
   */


  var GridPlate = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(GridPlate, _LitElement);

    var _super = _createSuper(GridPlate);

    babelHelpers.createClass(GridPlate, null, [{
      key: "styles",

      /**
       * LitElement render styles
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_7c90dd50552d11ebb4022f4768b4777e())];
      }
    }]);

    function GridPlate() {
      var _this;

      babelHelpers.classCallCheck(this, GridPlate);
      _this = _super.call(this);
      _this.ready = false;
      _this.breakpointSm = 900;
      _this.breakpointMd = 1200;
      _this.breakpointLg = 1500;
      _this.breakpointXl = 1800;
      _this.columns = 6;
      _this.disableResponsive = false;
      _this.layout = "1-1";
      _this.layouts = new GridPlateLayoutOptions().layouts;
      _this.responsiveSize = "xs";
      window.ResponsiveUtility.requestAvailability();
      return _this;
    }
    /**
     * LitElement render
     */


    babelHelpers.createClass(GridPlate, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_7c90dd50552d11ebb4022f4768b4777e(), this._getColumnWidth(0, this.__columnWidths), this._getColumnWidth(1, this.__columnWidths), this._getColumnWidth(2, this.__columnWidths), this._getColumnWidth(3, this.__columnWidths), this._getColumnWidth(4, this.__columnWidths), this._getColumnWidth(5, this.__columnWidths));
      }
    }, {
      key: "validateElementSlot",

      /**
       * Validate the slot name
       */
      value: function validateElementSlot(node) {
        return ["col-1", "col-2", "col-3", "col-4", "col-5", "col-6"].includes(node.getAttribute("slot"));
      }
      /**
       * life cycle
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        this.resize();
        window.dispatchEvent(new CustomEvent("responsive-element", {
          detail: {
            element: this,
            attribute: "responsive-size",
            relativeToParent: false,
            sm: this.breakpointSm,
            md: this.breakpointMd,
            lg: this.breakpointLg,
            xl: this.breakpointXl
          }
        }));
        this.__columnWidths = this._getColumnWidths(this.responsiveSize, this.layout, this.layouts, this.disableResponsive);
        setTimeout(function () {
          _this2.ready = true;
        }, 100);
      }
      /**
       * Wire to HAX
       */

    }, {
      key: "_dragEnter",
      value: function _dragEnter(e) {
        e.target.classList.add("active");
      }
    }, {
      key: "_dragLeave",
      value: function _dragLeave(e) {
        e.target.classList.remove("active");
      }
    }, {
      key: "_dropEvent",
      value: function _dropEvent(e) {
        this.querySelectorAll(".active").forEach(function (el) {
          el.classList.remove("active");
        });
        this.shadowRoot.querySelectorAll(".active").forEach(function (el) {
          el.classList.remove("active");
        });
      }
      /**
       * Use slot events to track which slots have nodes and apply to the shadowRoot
       * column wrappers. This helps with trasitions and animations
       */

    }, {
      key: "_slotMonitor",
      value: function _slotMonitor(e) {
        // sanity, we have a local slot
        var eventPath = (0, _utils.normalizeEventPath)(e);

        if (eventPath[0] && eventPath[0].assignedNodes && eventPath[0].assignedNodes().length) {
          // has nodes so we can make sure to track this elsewhere
          this.shadowRoot.querySelector("#" + eventPath[0].getAttribute("name").replace("-", "")).classList.add("has-nodes");
        } else {
          this.shadowRoot.querySelector("#" + eventPath[0].getAttribute("name").replace("-", "")).classList.remove("has-nodes");
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "dataHaxRay" && _this3.shadowRoot) {
            if (_this3[propName]) {
              // apply handlers to the columns themselves
              _this3.addEventListener("drop", _this3._dropEvent.bind(_this3));

              for (var j = 1; j <= _this3.columns; j++) {
                if (_this3.shadowRoot.querySelector("#col" + j) !== undefined) {
                  var col = _this3.shadowRoot.querySelector("#col" + j);

                  col.addEventListener("dragenter", _this3._dragEnter.bind(_this3));
                  col.addEventListener("dragleave", _this3._dragLeave.bind(_this3));
                }
              }

              var slots = _this3.shadowRoot.querySelectorAll("slot");

              for (var j = 0; j < slots.length; j++) {
                slots[j].addEventListener("slotchange", _this3._slotMonitor.bind(_this3));
              }

              _this3.observer = new MutationObserver(function (mutations) {
                if (!_this3.__sorting) {
                  mutations.forEach(function (mutation) {
                    // this implies something was added dynamically or drag and drop
                    // from outside this element or dragging between grid plates
                    // so we need to disconnect the handlers from here and pick them
                    // up in the new plate
                    mutation.addedNodes.forEach(function (node) {
                      if (node.tagName && node !== _this3) {
                        // verify this has a slot set otherwise we need to set one on the fly
                        // otherwise this won't show up. This could be incorrectly formed HTML
                        // DOM that was pushed in via an outside system or edge cases of things
                        // dropping in without a slot set in anyway
                        // validate slot name, otherwise force it to col-1
                        if (node.parentElement && node.parentElement.tagName !== "HAX-BODY" && !_this3.validateElementSlot(node)) {
                          node.setAttribute("slot", "col-1");
                        }
                      }
                    });
                  });

                  _this3.__sortChildren();
                }
              });

              _this3.observer.observe(_this3, {
                childList: true
              });
            } else {
              if (_this3.observer) {
                _this3.observer.disconnect();
              }

              _this3.removeEventListener("drop", _this3._dropEvent.bind(_this3));

              for (var j = 1; j <= _this3.columns; j++) {
                if (_this3.shadowRoot.querySelector("#col" + j) !== undefined) {
                  var _col = _this3.shadowRoot.querySelector("#col" + j);

                  _col.removeEventListener("dragenter", _this3._dragEnter.bind(_this3));

                  _col.removeEventListener("dragleave", _this3._dragLeave.bind(_this3));
                }
              }

              var _slots = _this3.shadowRoot.querySelectorAll("slot");

              for (var j = 0; j < _slots.length; j++) {
                _slots[j].removeEventListener("slotchange", _this3._slotMonitor.bind(_this3));
              }
            }
          } // if any of these changed, update col widths


          if (["responsiveSize", "layout", "layouts", "disableResponsive"].includes(propName)) {
            clearTimeout(_this3.__calcWidthLock);
            _this3.__calcWidthLock = setTimeout(function () {
              _this3.__columnWidths = _this3._getColumnWidths(_this3.responsiveSize, _this3.layout, _this3.layouts, _this3.disableResponsive);
            }, 0);
          }

          switch (propName) {
            // observer, ensure we are sized correctly after widths change
            case "__columnWidths":
              // widths changed because of layout somehow, wait for the resize transition
              // to have processed, then fire a resize event which we are listening
              _this3.resize();

              break;

            case "disableResponsive":
              // fire an event that this is a core piece of the system
              _this3.dispatchEvent(new CustomEvent("disable-responsive-changed", {
                detail: _this3[propName]
              }));

              break;
          }
        });
      }
    }, {
      key: "resize",
      value: function resize() {
        window.dispatchEvent(new Event("resize"));
      }
      /**
       * Determines if the item can move a set number of slots.
       *
       * @param {object} the item
       * @param {number} -1 for left or +1 for right
       * @returns {boolean} if the item can move a set number of slots
       */

    }, {
      key: "canMoveSlot",
      value: function canMoveSlot(item, before) {
        var dir = before ? -1 : 1,
            max = this.shadowRoot.querySelectorAll(".column").length,
            col = item.getAttribute("slot").split("-"),
            dest = parseInt(col[1]) + dir;
        return dest >= 1 && dest <= max;
      }
      /**
       * Moves an item a set number of slots.
       *
       * @param {object} the item
       * @param {number} -1 for left or +1 for right
       */

    }, {
      key: "moveSlot",
      value: function moveSlot(item, before) {
        var dir = before ? -1 : 1,
            col = item.getAttribute("slot").split("-"),
            dest = parseInt(col[1]) + dir;
        item.setAttribute("slot", "col-" + dest);
      }
      /**
       * gets the column widths based on selected layout and current responsive width
       *
       * @param {string} a string that describes the current responsive width
       * @param {string} the name of selected layout
       * @param {object} predefined layouts of column sizes and various responsive widths
       * @param {boolean} disable responsive sizing?
       * @returns {object} an object with a layout's column sizes at the current responsive width
       */

    }, {
      key: "_getColumnWidths",
      value: function _getColumnWidths() {
        var responsiveSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "sm";
        var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "1-1";
        var layouts = arguments.length > 2 ? arguments[2] : undefined;
        var disableResponsive = arguments.length > 3 ? arguments[3] : undefined;

        if (layouts) {
          var newl = layouts[layout],
              //how old layout names map to the new ones
          oldLayouts = {
            12: "1",
            "8/4": "2-1",
            "6/6": "1-1",
            "4/8": "1-2",
            "4/4/4": "1-1-1",
            "3/3/3/3": "1-1-1-1"
          },
              size = disableResponsive !== false ? "xl" : responsiveSize;
          var oldl = oldLayouts[layout];

          if (newl !== undefined && newl[size] !== undefined) {
            //return the layout
            return layouts[layout][size];
          } else if (layouts[oldl] !== undefined && layouts[oldl][size] !== undefined) {
            //return new layout that maps to old one
            return layouts[oldl][size];
          } else if (babelHelpers.typeof(layouts["1-1"]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            //return 2-column layout
            return layouts["1-1"][size];
          }
        }
      }
      /**
       * gets a given column's current width based on layout and current responsive width
       *
       * @param {number} the index of the column
       * @param {object} an object with a layout's column sizes at the current responsive width
       * @returns {string} a given column's current width based on layout and current responsive width
       */

    }, {
      key: "_getColumnWidth",
      value: function _getColumnWidth(column, __columnWidths) {
        return __columnWidths !== undefined && __columnWidths[column] !== undefined ? "width:" + __columnWidths[column] : "min-height: unset";
      }
      /**
       * gets a given column's current width based on layout and current responsive width
       *
       * @param {string} the name of selected layout
       * @returns {number} the number of columns in this layout
       */

    }, {
      key: "_getColumns",
      value: function _getColumns(__columnWidths) {
        return __columnWidths.length;
      }
      /**
       * Sort children based on slot name
       */

    }, {
      key: "__sortChildren",
      value: function () {
        var _sortChildren = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _this4 = this;

          var children;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  this.__sorting = true;
                  _context.prev = 1;
                  // select all direct children w/ a slot attribute and convert to an Array
                  children = Array.prototype.reduce.call(this.querySelectorAll("[slot]"), function (acc, e) {
                    return acc;
                  }, []); // sort the children by slot id being low to high

                  children = children.sort(function (a, b) {
                    if (parseInt(a.getAttribute("slot").split("-")[1]) < parseInt(b.getAttribute("slot").split("-")[1])) {
                      return -1;
                    }

                    return 1;
                  }); // loop through and append these back into the grid plate.
                  // which will put them in the right order

                  _context.next = 6;
                  return children.forEach(function (el) {
                    // sanity check that we only move things that are a direct child
                    if (el.parentNode === _this4) {
                      _this4.appendChild(el);
                    }
                  });

                case 6:
                  _context.next = 11;
                  break;

                case 8:
                  _context.prev = 8;
                  _context.t0 = _context["catch"](1);
                  console.warn(_context.t0);

                case 11:
                  this.__sorting = false;

                case 12:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this, [[1, 8]]);
        }));

        function __sortChildren() {
          return _sortChildren.apply(this, arguments);
        }

        return __sortChildren;
      }()
    }], [{
      key: "tag",
      get: function get() {
        return "grid-plate";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          type: "grid",
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Grid layout",
            description: "Simple card in a cool retro design",
            icon: "hax:3-3-3-3",
            color: "grey",
            groups: ["Layout"],
            handles: [],
            meta: {
              author: "ELMS:LN",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "layout",
              title: "Column Layout",
              description: "Style to present these items (may change for small screens)",
              inputMethod: "select",
              options: new GridPlateLayoutOptions().options
            }, {
              property: "disableResponsive",
              title: "Disable responsive",
              description: "Check box to force layout to stick regardless of screen breakpoins",
              inputMethod: "boolean"
            }],
            advanced: [{
              property: "breakpointSm",
              title: "Small Breakpoint",
              description: "Anything less than this number (in pixels) will render with the smallest version of this layout",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointMd",
              title: "Medium Breakpoint",
              description: "Anything less than this number (in pixels) will render with the small version of this layout",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointLg",
              title: "Large Breakpoint",
              description: "Anything less than this number (in pixels) will render with the medium version of this layout.",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointXl",
              title: "Extra-Large Breakpoint",
              description: "Anything less than this number (in pixels) will render with the large version of this layout. Anything greater than or equal to this number will display with the maximum number of columns for this layout.",
              inputMethod: "textfield",
              validationType: "number"
            }]
          },
          saveOptions: {
            unsetAttributes: ["ready", "layouts", "columns", "options", "responsive-width"]
          }
        };
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          ready: {
            type: Boolean,
            reflect: true
          },

          /**
           * Custom small breakpoint for the layouts; only updated on attached
           */
          breakpointSm: {
            type: Number,
            attribute: "breakpoint-sm"
          },

          /**
           * Custom medium breakpoint for the layouts; only updated on attached
           */
          breakpointMd: {
            type: Number,
            attribute: "breakpoint-md"
          },

          /**
           * Custom large breakpoint for the layouts; only updated on attached
           */
          breakpointLg: {
            type: Number,
            attribute: "breakpoint-lg"
          },

          /**
           * Custom extra-large breakpoint for the layouts; only updated on attached
           */
          breakpointXl: {
            type: Number,
            attribute: "breakpoint-xl"
          },

          /**
           * number of columns at this layout / responsive size
           */
          columns: {
            type: Number,
            reflect: true
          },

          /**
           * disables responsive layouts
           */
          disableResponsive: {
            type: Boolean,
            attribute: "disable-responsive"
          },

          /**
           * an object with a layout's column sizes
           * at the current responsive width
           */
          layout: {
            type: String,
            reflect: true
          },

          /**
           * Predefined layouts of column sizes and various responsive widths. 
           * For example:```
          {
          "1-1-1-1": {                         //the name of the layout
          "xs": ["100%","100%","100%","100%] //the responsive width of each column when the grid is extra small
          "sm": ["50%","50%","50%","50%"]    //the responsive width of each column when the grid is small
          "md": ["50%","50%","50%","50%"]    //the responsive width of each column when the grid is medium
          "lg": ["25%","25%","25%","25%"]    //the responsive width of each column when the grid is large
          "xl": ["25%","25%","25%","25%"]    //the responsive width of each column when the grid is extra large
          },
          {...}
          }```
          */
          layouts: {
            type: Object
          },

          /**
           * Responsive size as `xs`, `sm`, `md`, `lg`, or `xl`
           */
          responsiveSize: {
            type: String,
            reflect: true,
            attribute: "responsive-size"
          },

          /**
           * name of selected layout
           */
          __columnWidths: {
            type: String
          },
          dataHaxRay: {
            type: String,
            reflect: true,
            attribute: "data-hax-ray"
          }
        };
      }
    }]);
    return GridPlate;
  }(_litElement.LitElement);

  _exports.GridPlate = GridPlate;
  window.customElements.define(GridPlate.tag, GridPlate);
});