define(["exports", "require", "../../lit-element/lit-element.js", "../responsive-utility/responsive-utility.js"], function (_exports, _require, _litElement, _responsiveUtility) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GridPlate = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_a8f4de101bb211eabd7cc30119585ddb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"button-holding-pen\">\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-up\"\n          title=\"move item up\"\n          id=\"up\"\n          @click=\"", "\"\n        >\n        </paper-icon-button>\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-right\"\n          title=\"move item right\"\n          id=\"right\"\n          @click=\"", "\"\n        >\n        </paper-icon-button>\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-down\"\n          title=\"move item down\"\n          id=\"down\"\n          @click=\"", "\"\n        >\n        </paper-icon-button>\n        <paper-icon-button\n          class=\"direction\"\n          icon=\"hardware:keyboard-arrow-left\"\n          title=\"move item left\"\n          id=\"left\"\n          @click=\"", "\"\n        >\n        </paper-icon-button>\n      </div>\n      <div class=\"row\">\n        <div\n          class=\"column\"\n          id=\"col1\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-1\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col2\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-2\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col3\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-3\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col4\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-4\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col5\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-5\"></slot>\n        </div>\n        <div\n          class=\"column\"\n          id=\"col6\"\n          .style=\"", "\"\n        >\n          <slot name=\"col-6\"></slot>\n        </div>\n      </div>\n    "]);

    _templateObject2_a8f4de101bb211eabd7cc30119585ddb = function _templateObject2_a8f4de101bb211eabd7cc30119585ddb() {
      return data;
    };

    return data;
  }

  function _templateObject_a8f4de101bb211eabd7cc30119585ddb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --grid-plate-row-margin: 0px;\n          --grid-plate-row-padding: 0px;\n          --grid-plate-item-margin: 15px;\n          --grid-plate-editable-border-color: #bbbbbb;\n          --grid-plate-active-border-color: #000000;\n          --grid-plate-target-background-color: var(\n            --simple-colors-default-theme-blue-1\n          );\n          --grid-plate-possible-target-background-color: transparent;\n          --grid-plate-selected-background-color: #ffffff;\n        }\n        :host .row {\n          width: 100%;\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: space-between;\n          align-items: stretch;\n          margin: var(--grid-plate-row-margin);\n          padding: var(--grid-plate-row-padding);\n        }\n        :host .column {\n          width: 100%;\n          flex: 0 0 auto;\n        }\n        :host([edit-mode]) .column {\n          min-height: 150px;\n        }\n        :host([edit-mode]) .column {\n          outline: 2px dashed var(--grid-plate-editable-border-color);\n        }\n        :host .column[style=\"min-height: unset;\"] {\n          display: none;\n        }\n        :host([edit-mode]) .column[style=\"min-height: unset;\"]:not(:empty) {\n          display: block;\n          outline: 2px solid red;\n          width: 20%;\n          min-width: 100px;\n          padding: 15px 0;\n          min-height: 150px !important;\n          margin-top: var(--grid-plate-item-margin);\n        }\n        :host([edit-mode])\n          .column[style=\"min-height: unset;\"]:not(:empty):before {\n          content: \"Column (\" attr(id) \") hidden by layout selected\";\n          color: red;\n          margin: var(--grid-plate-item-margin);\n        }\n        :host .column ::slotted(*) {\n          margin: var(--grid-plate-item-margin);\n          padding: var(--grid-plate-item-margin);\n          max-width: calc(100% - 60px);\n          max-width: -webkit-fill-available;\n        }\n        :host([edit-mode]) .column ::slotted(img) {\n          display: block;\n        }\n        :host([edit-mode]) .column ::slotted(.grid-plate-active-item) {\n          outline: 2px dashed var(--grid-plate-active-border-color);\n          background-color: var(--grid-plate-selected-background-color);\n        }\n        :host([edit-mode]) .column ::slotted(*:focus),\n        :host([edit-mode]) .column ::slotted(*:hover),\n        :host([edit-mode]) .column ::slotted(*:active) {\n          cursor: move;\n        }\n        :host([edit-mode]) .column ::slotted(.mover) {\n          outline: 2px dashed var(--grid-plate-editable-border-color);\n        }\n        :host([edit-mode]) .column.mover {\n          outline: 2px dashed var(--grid-plate-editable-border-color);\n        }\n        :host([edit-mode]) .column ::slotted(.mover) {\n          background-color: var(--grid-plate-possible-target-background-color);\n          padding: 16px;\n        }\n        :host([edit-mode]) .column.mover {\n          content: \"Double click to create a paragraph here\";\n          background-color: var(--grid-plate-possible-target-background-color);\n        }\n        :host([edit-mode]) .column ::slotted(.hovered) {\n          background-color: var(\n            --grid-plate-target-background-color\n          ) !important;\n          outline: dashed 2px var(--grid-plate-active-border-color);\n          z-index: 2;\n        }\n        :host([edit-mode]) .column.hovered {\n          background-color: var(\n            --grid-plate-target-background-color\n          ) !important;\n          outline: dashed 2px var(--grid-plate-active-border-color);\n          z-index: 2;\n        }\n        paper-icon-button {\n          display: none;\n          position: absolute;\n          margin: 0;\n          padding: 0;\n          outline: none;\n          width: 30px;\n          height: 30px;\n          color: black;\n          opacity: 0.8;\n          background-color: transparent;\n          border-radius: 0;\n          box-sizing: content-box !important;\n          z-index: 1;\n          min-width: unset;\n        }\n        paper-icon-button:hover {\n          outline: 2px dashed #000000;\n          opacity: 1;\n          visibility: visible;\n          background-color: #ffffff;\n        }\n\n        paper-icon-button[disabled] {\n          color: #aaa;\n        }\n        paper-icon-button[disabled]:focus,\n        paper-icon-button[disabled]:hover {\n          cursor: not-allowed;\n        }\n        paper-icon-button.active {\n          display: block;\n        }\n\n        .button-holding-pen {\n          position: relative;\n        }\n      "]);

    _templateObject_a8f4de101bb211eabd7cc30119585ddb = function _templateObject_a8f4de101bb211eabd7cc30119585ddb() {
      return data;
    };

    return data;
  }

  // need to make this an object so that HAX can listen for it correctly
  var GridPlateLayoutOptions = function GridPlateLayoutOptions() {
    babelHelpers.classCallCheck(this, GridPlateLayoutOptions);
    this.resizeTimer = null;
    this.activeItem = null;
    this.layouts = {
      "1": {
        columnLayout: "1: full width",
        xs: ["100%"],
        sm: ["100%"],
        md: ["100%"],
        lg: ["100%"],
        xl: ["100%"]
      },
      "1-1": {
        columnLayout: "2: equal width",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["50%", "50%"],
        lg: ["50%", "50%"],
        xl: ["50%", "50%"]
      },
      "2-1": {
        columnLayout: "2: wide & narrow",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["66.6666667%", "33.3333337%"],
        lg: ["66.6666667%", "33.3333337%"],
        xl: ["66.6666667%", "33.3333337%"]
      },
      "1-2": {
        columnLayout: "2: narrow & wide",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["33.3333333%", "66.6666667%"],
        lg: ["33.3333333%", "66.6666667%"],
        xl: ["33.3333333%", "66.6666667%"]
      },
      "3-1": {
        columnLayout: "2: wider & narrower",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["75%", "25%"],
        lg: ["75%", "25%"],
        xl: ["75%", "25%"]
      },
      "1-3": {
        columnLayout: "2: narrower & wider",
        xs: ["100%", "100%"],
        sm: ["50%", "50%"],
        md: ["25%", "75%"],
        lg: ["25%", "75%"],
        xl: ["25%", "75%"]
      },
      "1-1-1": {
        columnLayout: "3: equal width",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "100%", "100%"],
        md: ["33.3333333%", "33.3333333%", "33.3333333%"],
        lg: ["33.3333333%", "33.3333333%", "33.3333333%"],
        xl: ["33.3333333%", "33.3333333%", "33.3333333%"]
      },
      "2-1-1": {
        columnLayout: "3: wide, narrow, and narrow",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "50%", "50%"],
        md: ["50%", "25%", "25%"],
        lg: ["50%", "25%", "25%"],
        xl: ["50%", "25%", "25%"]
      },
      "1-2-1": {
        columnLayout: "3: narrow, wide, and narrow",
        xs: ["100%", "100%", "100%"],
        sm: ["100%", "100%", "100%"],
        md: ["25%", "50%", "25%"],
        lg: ["25%", "50%", "25%"],
        xl: ["25%", "50%", "25%"]
      },
      "1-1-2": {
        columnLayout: "3: narrow, narrow, and wide",
        xs: ["100%", "100%", "100%"],
        sm: ["50%", "50%", "100%"],
        md: ["25%", "25%", "50%"],
        lg: ["25%", "25%", "50%"],
        xl: ["25%", "25%", "50%"]
      },
      "1-1-1-1": {
        columnLayout: "4: equal width",
        xs: ["100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%"],
        md: ["25%", "25%", "25%", "25%"],
        lg: ["25%", "25%", "25%", "25%"],
        xl: ["25%", "25%", "25%", "25%"]
      },
      "1-1-1-1-1": {
        columnLayout: "5: equal width",
        xs: ["100%", "100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%", "50%"],
        md: ["20%", "20%", "20%", "20%", "20%"],
        lg: ["20%", "20%", "20%", "20%", "20%"],
        xl: ["20%", "20%", "20%", "20%", "20%"]
      },
      "1-1-1-1-1-1": {
        columnLayout: "6: equal width",
        xs: ["100%", "100%", "100%", "100%", "100%", "100%"],
        sm: ["50%", "50%", "50%", "50%", "50%", "50%"],
        md: ["33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%", "33.3333333%"],
        lg: ["16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%"],
        xl: ["16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%", "16.6666667%"]
      }
    };
    this.options = {};
    var layoutFlip = Object.keys(this.layouts); // loop through all the supplied layouts to get the HAX layout options & descriptions

    for (var i = 0; i < layoutFlip.length; i++) {
      this.options[layoutFlip[i]] = this.layouts[layoutFlip[i]].columnLayout;
    }
  };
  /**
   * `grid-plate`
   * @customElement grid-plate
   * `A grid plate based on a layout that manipulates it.`
   * @demo demo/index.html
   */


  var GridPlate =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(GridPlate, _LitElement);
    babelHelpers.createClass(GridPlate, null, [{
      key: "styles",

      /**
       * LitElement render styles
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_a8f4de101bb211eabd7cc30119585ddb())];
      }
    }]);

    function GridPlate() {
      var _this;

      babelHelpers.classCallCheck(this, GridPlate);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(GridPlate).call(this));
      _this.droppable = false;
      _this.ignoreHax = false;
      _this.breakpointSm = 900;
      _this.breakpointMd = 1200;
      _this.breakpointLg = 1500;
      _this.breakpointXl = 1800;
      _this.columns = 6;
      _this.disableResponsive = false;
      _this.editMode = false;
      _this.layout = "1-1";
      _this.layouts = new GridPlateLayoutOptions().layouts;
      _this.responsiveSize = "xs";
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-icon-button/paper-icon-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icons/hardware-icons.js"], res, rej);
      });
      setTimeout(function () {
        _this.addEventListener("focusin", _this._focusIn.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      window.ResponsiveUtility.requestAvailability();
      return _this;
    }
    /**
     * LitElement render
     */


    babelHelpers.createClass(GridPlate, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_a8f4de101bb211eabd7cc30119585ddb(), this.moveActiveElement, this.moveActiveElement, this.moveActiveElement, this.moveActiveElement, this._getColumnWidth(0, this.columnWidths), this._getColumnWidth(1, this.columnWidths), this._getColumnWidth(2, this.columnWidths), this._getColumnWidth(3, this.columnWidths), this._getColumnWidth(4, this.columnWidths), this._getColumnWidth(5, this.columnWidths));
      }
    }, {
      key: "validateElementSlot",

      /**
       * Validate the slot name
       */
      value: function validateElementSlot(node) {
        return ["col-1", "col-2", "col-3", "col-4", "col-5", "col-6"].includes(node.getAttribute("slot"));
      }
    }, {
      key: "_dragstart",
      value: function _dragstart(e) {
        var target; // @todo this MUST validate that we are 1 below this element
        // leverage closest thing to the drag 1st
        // THIS IS HOW WE CAN MAKE A GRIP HANDLE!!!!!

        if (e.path[0]) {
          target = e.path[0];
        } else {
          target = e.target;
        } // special support for HAXStore


        if (window.HaxStore && window.HaxStore.ready) {
          window.HaxStore.instance.__dragTarget = target;
        } else {
          this.__dragTarget = target;
        }

        e.dataTransfer.dropEffect = "move";
        e.dataTransfer.setDragImage(target, 25, 25);
      }
      /**
       * HTMLElement
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(GridPlate.prototype), "connectedCallback", this).call(this);
        this.observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            // only need to apply this when we're in editMode
            // this implies something was added dynamically or drag and drop
            // from outside this element or dragging between grid plates
            // so we need to disconnect the handlers from here and pick them
            // up in the new plate
            if (_this2.editMode) {
              mutation.addedNodes.forEach(function (node) {
                if (node.tagName) {
                  // verify this has a slot set otherwise we need to set one on the fly
                  // otherwise this won't show up. This could be incorrectly formed HTML
                  // DOM that was pushed in via an outside system or edge cases of things
                  // dropping in without a slot set in anyway
                  // validate slot name, otherwise force it to col-1
                  if (node.getAttribute("slot") == null || !_this2.validateElementSlot(node)) {
                    node.setAttribute("slot", "col-1");
                  }

                  node.addEventListener("drop", _this2.dropEvent.bind(_this2));
                  node.addEventListener("dragenter", _this2.dragEnter.bind(_this2));
                  node.addEventListener("dragleave", _this2.dragLeave.bind(_this2));
                  node.addEventListener("dragstart", _this2.dragStart.bind(_this2));
                  node.addEventListener("dragend", _this2.dragEnd.bind(_this2));
                  node.addEventListener("dragover", function (e) {
                    e.preventDefault();
                  });
                  node.setAttribute("draggable", true);
                  node.setAttribute("data-draggable", true); // ensure they can be focused

                  node.setAttribute("tabindex", 0); // set whatever got added here as active in the grid plate

                  _this2.activeItem = node;
                }
              });
              mutation.removedNodes.forEach(function (node) {
                if (node.tagName) {
                  node.removeEventListener("drop", _this2.dropEvent.bind(_this2));
                  node.removeEventListener("dragenter", _this2.dragEnter.bind(_this2));
                  node.removeEventListener("dragleave", _this2.dragLeave.bind(_this2));
                  node.removeEventListener("dragstart", _this2.dragStart.bind(_this2));
                  node.removeEventListener("dragend", _this2.dragEnd.bind(_this2));
                  node.removeEventListener("dragover", function (e) {
                    e.preventDefault();
                  });
                  node.removeAttribute("draggable");
                  node.removeAttribute("data-draggable"); // ensure they can be focused

                  node.removeAttribute("tabindex");
                }
              });
            }
          });
        });
        this.observer.observe(this, {
          childList: true
        }); // need to do some global drag tracking to know the DOM node moved

        window.addEventListener("dragstart", this._dragstart.bind(this)); // capture keydown events

        window.addEventListener("keydown", this._onKeyDown.bind(this)); // listen for HAX if it's around

        window.addEventListener("hax-store-property-updated", this._haxStorePropertyUpdated.bind(this)); // listen for HAX insert events if it exists

        window.addEventListener("hax-insert-content", this.haxInsertContent.bind(this)); // dom loaded, resize to be safe

        window.addEventListener("load", this.resize.bind(this)); // if we resize, listen and react

        window.addEventListener("resize", this.resizeListener.bind(this));
      }
    }, {
      key: "resizeListener",
      value: function resizeListener(e) {
        var _this3 = this;

        if (this.activeItem) {
          clearTimeout(this.resizeTimer);
          this.resizeTimer = setTimeout(function () {
            _this3.positionArrows(_this3.activeItem);
          }, 50);
        }
      }
    }, {
      key: "_onKeyDown",
      value: function _onKeyDown(e) {
        if (this.editMode && this.getAttribute("contenteditable")) {
          switch (e.key) {
            case "Enter":
              // support HAX text operations should take priority
              if (window.HaxStore && window.HaxStore.instance && window.HaxStore.instance.isTextElement(this.activeItem)) {
                return true;
              }

              this.shadowRoot.querySelector("#right").focus();
              break;
            // clear active

            case "Escape":
              this.activeItem = null;
              break;
          }
        }
      }
      /**
       * life cycle
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        window.dispatchEvent(new CustomEvent("responsive-element", {
          detail: {
            element: this,
            attribute: "responsive-size",
            relativeToParent: false,
            sm: this.breakpointSm,
            md: this.breakpointMd,
            lg: this.breakpointLg,
            xl: this.breakpointXl
          }
        })); // apply handlers to the columns themselves

        for (var j = 1; j <= this.columns; j++) {
          if (this.shadowRoot.querySelector("#col" + j) !== undefined) {
            var col = this.shadowRoot.querySelector("#col" + j);
            col.addEventListener("drop", this.dropEvent.bind(this));
            col.addEventListener("dblclick", this.dblclick.bind(this));
            col.addEventListener("dragstart", this.dragStart.bind(this));
            col.addEventListener("dragenter", this.dragEnter.bind(this));
            col.addEventListener("dragleave", this.dragLeave.bind(this));
            col.addEventListener("dragend", this.dragEnd.bind(this));
            col.addEventListener("dragover", function (e) {
              e.preventDefault();
            });
            col.setAttribute("data-draggable", true);
          }
        }

        this.columnWidths = this._getColumnWidths(this.responsiveSize, this.layout, this.layouts, this.disableResponsive);
      }
      /**
       * life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("dragstart", this._dragstart.bind(this));
        window.removeEventListener("keydown", this._onKeyDown.bind(this)); // listen for HAX if it's around

        window.removeEventListener("hax-store-property-updated", this._haxStorePropertyUpdated.bind(this)); // listen for HAX insert events if it exists

        window.removeEventListener("hax-insert-content", this.haxInsertContent.bind(this));
        window.removeEventListener("load", this.resize.bind(this));
        window.removeEventListener("resize", this.resizeListener.bind(this)); // clean up mutation observer

        this.observer.disconnect();
        babelHelpers.get(babelHelpers.getPrototypeOf(GridPlate.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // if any of these changed, update col widths
          if (["responsiveSize", "layout", "layouts", "disableResponsive"].includes(propName)) {
            _this4.columnWidths = _this4._getColumnWidths(_this4.responsiveSize, _this4.layout, _this4.layouts, _this4.disableResponsive);
          }

          switch (propName) {
            // observer
            case "droppable":
              _this4._droppableChanged(_this4[propName], oldValue);

              break;
            // observer

            case "editMode":
              _this4._editModeChanged(_this4[propName], oldValue);

              _this4.resize();

              break;
            // observer

            case "activeItem":
              _this4._activeItemChanged(_this4[propName], oldValue);

              break;
            // observer, ensure we are sized correctly after widths change

            case "columnWidths":
              // widths changed because of layout somehow, wait for the resize transition
              // to have processed, then fire a resize event which we are listening for
              // which will then ensure the arrows are positioned correctly
              _this4.resize();

              break;

            case "disableResponsive":
              // fire an event that this is a core piece of the system
              _this4.dispatchEvent(new CustomEvent("disable-responsive-changed", {
                detail: _this4[propName]
              }));

              break;
          }
        });
      }
    }, {
      key: "resize",
      value: function resize() {
        window.dispatchEvent(new Event("resize"));
      }
      /**
       * Implements preProcessHaxInsertContent to clean up output on save
       */

    }, {
      key: "preProcessHaxInsertContent",
      value: function preProcessHaxInsertContent(detail) {
        // ensure this is wiped to avoid issues in building
        delete detail.properties.activeItem;
        return detail;
      }
    }, {
      key: "_droppableChanged",
      value: function _droppableChanged(newValue) {
        if (newValue) {
          this.editMode = true;
        }
      }
      /**
       * Determines if the item can move a set number of slots.
       *
       * @param {object} the item
       * @param {number} -1 for left or +1 for right
       * @returns {boolean} if the item can move a set number of slots
       */

    }, {
      key: "canMoveSlot",
      value: function canMoveSlot(item, before) {
        var dir = before ? -1 : 1,
            max = this.shadowRoot.querySelectorAll(".column").length,
            col = item.getAttribute("slot").split("-"),
            dest = parseInt(col[1]) + dir;
        return dest >= 1 && dest <= max;
      }
      /**
       * Moves an item a set number of slots.
       *
       * @param {object} the item
       * @param {number} -1 for left or +1 for right
       */

    }, {
      key: "moveSlot",
      value: function moveSlot(item, before) {
        var dir = before ? -1 : 1,
            col = item.getAttribute("slot").split("-"),
            dest = parseInt(col[1]) + dir;
        item.setAttribute("slot", "col-" + dest);
      }
      /**
       * Determines if the item can move a set number of slots.
       *
       * @param {object} the item
       * @param {boolean} move item before previous? (false for move item after next)
       * @returns {boolean} if the item can move a set number of slots
       */

    }, {
      key: "canMoveOrder",
      value: function canMoveOrder(item, before) {
        var slot = item.getAttribute("slot");
        var nodes = this.shadowRoot.querySelector("slot[name='".concat(slot, "']")).assignedNodes({
          flatten: true
        });
        var target = null,
            position = 0;

        for (var i in nodes) {
          if (item === nodes[i]) {
            position = i;
          }
        }

        if (before && parseInt(position) - 1 >= 0) {
          target = nodes[parseInt(position) - 1];
        } else if (!before && parseInt(position) + 1 <= nodes.length - 1) {
          target = nodes[parseInt(position) + 1];
        }

        return target !== null && babelHelpers.typeof(target) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined));
      }
      /**
       * Moves an item's order within a slot.
       *
       * @param {object} the item
       * @param {boolean} move item before previous? (false for move item after next)
       */

    }, {
      key: "moveOrder",
      value: function moveOrder(item) {
        var before = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var slot = item.getAttribute("slot");
        var nodes = this.shadowRoot.querySelector("slot[name='".concat(slot, "']")).assignedNodes({
          flatten: true
        });
        var target = null,
            position = 0;

        for (var i in nodes) {
          if (item === nodes[i]) {
            position = i;
          }
        }

        if (before) {
          target = nodes[parseInt(position) - 1];
          this.insertBefore(this.activeItem, target);
        } else {
          target = nodes[parseInt(position) + 1];
          this.insertBefore(target, this.activeItem);
        }
      }
      /**
       * Move the active element based on which button got pressed.
       */

    }, {
      key: "moveActiveElement",
      value: function moveActiveElement(e) {
        var local = e.target; // see if this was an up down left or right movement

        switch (local.id) {
          case "up":
            this.moveOrder(this.activeItem, true);
            break;

          case "down":
            this.moveOrder(this.activeItem, false);
            break;

          case "left":
            this.moveSlot(this.activeItem, true);
            break;

          case "right":
            this.moveSlot(this.activeItem, false);
            break;
        } // ensure arrows are correctly positioned after the move


        if (this.activeItem && typeof this.activeItem.focus === "function") {
          this.positionArrows(this.activeItem);
          this.activeItem.focus();
        }
      }
      /**
       * Notice changes to what's active and ensure UX associated w/ it is visble
       */

    }, {
      key: "_activeItemChanged",
      value: function _activeItemChanged(newValue, oldValue) {
        // remove anything currently with the active class
        this.querySelectorAll(".grid-plate-active-item").forEach(function (el) {
          el.classList.remove("grid-plate-active-item");
        });

        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue != null) {
          // position arrows
          newValue.classList.add("grid-plate-active-item");
          this.positionArrows(newValue);
        } else if (newValue == null) {
          this.positionArrows(newValue);
        } // if we had a previous value then remove the active item class


        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && oldValue != null) {
          oldValue.blur();
        }
      }
      /**
       * gets the column widths based on selected layout and current responsive width
       *
       * @param {string} a string that describes the current responsive width
       * @param {string} the name of selected layout
       * @param {object} predefined layouts of column sizes and various responsive widths
       * @param {boolean} disable responsive sizing?
       * @returns {object} an object with a layout's column sizes at the current responsive width
       */

    }, {
      key: "_getColumnWidths",
      value: function _getColumnWidths() {
        var responsiveSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "sm";
        var layout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "1-1";
        var layouts = arguments.length > 2 ? arguments[2] : undefined;
        var disableResponsive = arguments.length > 3 ? arguments[3] : undefined;

        if (layouts) {
          var newl = layouts[layout],
              //how old layout names map to the new ones
          oldLayouts = {
            "12": "1",
            "8/4": "2-1",
            "6/6": "1-1",
            "4/8": "1-2",
            "4/4/4": "1-1-1",
            "3/3/3/3": "1-1-1-1"
          },
              size = disableResponsive !== false ? "xl" : responsiveSize;
          var oldl = oldLayouts[layout];

          if (newl !== undefined && newl[size] !== undefined) {
            //return the layout
            return layouts[layout][size];
          } else if (layouts[oldl] !== undefined && layouts[oldl][size] !== undefined) {
            //return new layout that maps to old one
            return layouts[oldl][size];
          } else if (babelHelpers.typeof(layouts["1-1"]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            //return 2-column layout
            return layouts["1-1"][size];
          }
        }
      }
      /**
       * gets a given column's current width based on layout and current responsive width
       *
       * @param {number} the index of the column
       * @param {object} an object with a layout's column sizes at the current responsive width
       * @returns {string} a given column's current width based on layout and current responsive width
       */

    }, {
      key: "_getColumnWidth",
      value: function _getColumnWidth(column, columnWidths) {
        return columnWidths !== undefined && columnWidths[column] !== undefined ? "width:" + columnWidths[column] : "min-height: unset";
      }
      /**
       * gets a given column's current width based on layout and current responsive width
       *
       * @param {string} the name of selected layout
       * @returns {number} the number of columns in this layout
       */

    }, {
      key: "_getColumns",
      value: function _getColumns(columnWidths) {
        return columnWidths.length;
      }
      /**
       * Focus / tab / click event normalization
       */

    }, {
      key: "_focusIn",
      value: function _focusIn(e) {
        if (this.editMode) {
          var local = e.target; // only activate if we touch something that's in the slot of the grid plate

          if (local.parentNode === this) {
            this.activeItem = local;
          }
        }
      }
      /**
       * Position the arrows to change directions around something
       */

    }, {
      key: "positionArrows",
      value: function positionArrows(item) {
        if (item == null) {
          this.shadowRoot.querySelectorAll(".direction").forEach(function (el) {
            el.classList.remove("active");
          });
        } else {
          this.shadowRoot.querySelectorAll(".direction").forEach(function (el) {
            el.classList.add("active");
          }); // ensure we disable invalid options contextually
          // test for an element above us

          this.shadowRoot.querySelector("#up").disabled = !this.canMoveOrder(item, true); // test for an element below us

          this.shadowRoot.querySelector("#down").disabled = !this.canMoveOrder(item, false); // test for a column to the left of us

          this.shadowRoot.querySelector("#left").disabled = !this.canMoveSlot(item, true); // test for a column to the right of us

          this.shadowRoot.querySelector("#right").disabled = !this.canMoveSlot(item, false); // get coordinates of the page and active element
          // delay since a transition might move it

          var bodyRect = this.getBoundingClientRect();
          var elemRect = item.getBoundingClientRect();
          var topOffset = elemRect.top - bodyRect.top;
          var leftOffset = elemRect.left - bodyRect.left; // set the arrows to position correctly at all 4 sides

          this.shadowRoot.querySelector("#up").style.top = topOffset - 32 + "px";
          this.shadowRoot.querySelector("#down").style.top = topOffset + elemRect.height + 2 + "px";
          this.shadowRoot.querySelector("#left").style.top = topOffset + elemRect.height / 2 - 15 + "px";
          this.shadowRoot.querySelector("#right").style.top = topOffset + elemRect.height / 2 - 15 + "px";
          this.shadowRoot.querySelector("#up").style.left = leftOffset + elemRect.width / 2 - 15 + "px";
          this.shadowRoot.querySelector("#down").style.left = leftOffset + elemRect.width / 2 - 15 + "px";
          this.shadowRoot.querySelector("#left").style.left = leftOffset - 32 + "px";
          this.shadowRoot.querySelector("#right").style.left = leftOffset + elemRect.width + 2 + "px";
        }
      }
      /**
       * Notice edit state has changed
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        // flipping from false to true
        if (newValue && !oldValue) {
          var children = this.children; // walk the children and apply the draggable state needed

          for (var i in children) {
            if (children[i].tagName) {
              children[i].addEventListener("drop", this.dropEvent.bind(this));
              children[i].addEventListener("dragenter", this.dragEnter.bind(this));
              children[i].addEventListener("dragleave", this.dragLeave.bind(this));
              children[i].addEventListener("dragstart", this.dragStart.bind(this));
              children[i].addEventListener("dragend", this.dragEnd.bind(this));
              children[i].addEventListener("dragover", function (e) {
                e.preventDefault();
              });
              children[i].setAttribute("draggable", true);
              children[i].setAttribute("data-draggable", true); // ensure they can be focused

              children[i].setAttribute("tabindex", 0);
            }
          }
        } // flipping from true to false
        else if (!newValue && oldValue) {
            // unset active to clean up state
            this.activeItem = null;
            var _children = this.children; // walk the children and remove the draggable state needed

            for (var i in _children) {
              if (babelHelpers.typeof(_children[i].tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                _children[i].removeEventListener("drop", this.dropEvent.bind(this));

                _children[i].removeEventListener("dragstart", this.dragStart.bind(this));

                _children[i].removeEventListener("dragenter", this.dragEnter.bind(this));

                _children[i].removeEventListener("dragleave", this.dragLeave.bind(this));

                _children[i].removeEventListener("dragend", this.dragEnd.bind(this));

                _children[i].removeEventListener("dragover", function (e) {
                  e.preventDefault();
                });

                _children[i].removeAttribute("draggable");

                _children[i].removeAttribute("data-draggable");

                _children[i].removeAttribute("tabindex");
              }
            }
          }
      }
      /**
       * Enter an element, meaning we've over it while dragging
       */

    }, {
      key: "dragEnter",
      value: function dragEnter(e) {
        if (this.editMode) {
          e.preventDefault();
          e.target.classList.add("hovered");
        }
      }
      /**
       * Leaving an element while dragging.
       */

    }, {
      key: "dragLeave",
      value: function dragLeave(e) {
        if (this.editMode) {
          e.target.classList.remove("hovered");
        }
      }
      /**
       * On double check, fire an event for HAX to insert a paragraph.
       * If they aren't using HAX then it won't do anything
       */

    }, {
      key: "dblclick",
      value: function dblclick(e) {
        if (this.editMode && e.target.id) {
          var detail = {};
          detail.properties = {
            slot: e.target.id.replace("col", "col-")
          };
          this.dispatchEvent(new CustomEvent("grid-plate-add-item", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: detail
          }));
        }
      }
      /**
       * Drop an item onto another
       */

    }, {
      key: "dropEvent",
      value: function dropEvent(e) {
        if (this.editMode) {
          var target = this.activeItem;

          if (this.__dragTarget) {
            target = this.__dragTarget;
          } // support global hax store target


          if (window.HaxStore && window.HaxStore.ready && window.HaxStore.instance.__dragTarget) {
            target = window.HaxStore.instance.__dragTarget;
          } // edge case, something caused this to drag and it tried to do
          // itself into itself


          if (target === this) {
            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
            return false;
          }

          var local = e.target; // if we have a slot on what we dropped into then we need to mirror that item
          // and place ourselves below it in the DOM

          if (babelHelpers.typeof(target) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && target !== null && babelHelpers.typeof(local) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && local.getAttribute("slot") != null && target !== local) {
            target.setAttribute("slot", local.getAttribute("slot"));
            this.insertBefore(target, local); // ensure that if we caught this event we process it

            e.preventDefault();
            e.stopPropagation();
            e.stopImmediatePropagation();
          } // special case for dropping on an empty column or between items
          // which could involve a miss on the column
          else if (local.tagName === "DIV" && local.classList.contains("column")) {
              var col = local.id.replace("col", "");
              target.setAttribute("slot", "col-" + col);
              this.appendChild(target); // ensure that if we caught this event we process it

              e.preventDefault();
              e.stopPropagation();
              e.stopImmediatePropagation();
            }

          var children = this.children; // walk the children and apply the draggable state needed

          for (var i in children) {
            if (babelHelpers.typeof(children[i].classList) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              children[i].classList.remove("mover");
            }
          }

          for (var j = 1; j <= this.columns; j++) {
            if (this.shadowRoot.querySelector("#col" + j) !== undefined) {
              this.shadowRoot.querySelector("#col" + j).classList.remove("mover");
            }
          } // position arrows / set focus in case the DOM got updated above


          if (target && typeof target.focus === "function" && target.parentNode === this) {
            this.positionArrows(target);
            target.focus();
          } else {
            // element moved outside of this grid plate, lose focus
            this.positionArrows(null);
          }
        }
      }
      /**
       * Start a drag event, this is an element being dragged
       */

    }, {
      key: "dragStart",
      value: function dragStart(e) {
        if (this.editMode) {
          var children = this.children; // walk the children and apply the draggable state needed

          for (var i in children) {
            if (babelHelpers.typeof(children[i].classList) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              children[i].classList.add("mover");
            }
          }

          for (var j = 1; j <= this.columns; j++) {
            if (this.shadowRoot.querySelector("#col" + j) !== undefined) {
              this.shadowRoot.querySelector("#col" + j).classList.add("mover");
            }
          }
        }
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "dragEnd",
      value: function dragEnd(e) {
        if (this.editMode) {
          var children = this.children; // walk the children and apply the draggable state needed

          for (var i in children) {
            if (babelHelpers.typeof(children[i].classList) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              children[i].classList.remove("mover", "hovered");
            }
          }

          for (var j = 1; j <= this.columns; j++) {
            if (this.shadowRoot.querySelector("#col" + j) !== undefined) {
              this.shadowRoot.querySelector("#col" + j).classList.remove("mover", "hovered");
            }
          }
        }
      }
      /**
       * Insert event noticed by HAX
       */

    }, {
      key: "haxInsertContent",
      value: function haxInsertContent(e) {
        // see if WE are the thing that's active when insert was fired
        if (this === window.HaxStore.instance.activeContainerNode && this.activeItem && typeof this.activeItem.focus === "function") {
          this.positionArrows(this.activeItem);
          this.activeItem.focus();
        }
      }
      /**
       * Store updated, sync.
       */

    }, {
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          if (babelHelpers.typeof(e.detail.value) === "object") {
            this[e.detail.property] = null;
          }

          if (e.detail.property === "editMode" && this.ignoreHax) {// do nothing, we were told to ignore hax
          } else {
            this[e.detail.property] = e.detail.value;
          }
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "grid-plate";
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          settings: {
            quick: [],
            configure: [{
              property: "layout",
              title: "Column Layout",
              description: "Style to present these items (may change for small screens)",
              inputMethod: "select",
              options: new GridPlateLayoutOptions().options
            }],
            advanced: [{
              property: "breakpointSm",
              title: "Small Breakpoint",
              description: "Anything less than this number (in pixels) will render with the smallest version of this layout",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointMd",
              title: "Medium Breakpoint",
              description: "Anything less than this number (in pixels) will render with the small version of this layout",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointLg",
              title: "Large Breakpoint",
              description: "Anything less than this number (in pixels) will render with the medium version of this layout.",
              inputMethod: "textfield",
              validationType: "number"
            }, {
              property: "breakpointXl",
              title: "Extra-Large Breakpoint",
              description: "Anything less than this number (in pixels) will render with the large version of this layout. Anything greater than or equal to this number will display with the maximum number of columns for this layout.",
              inputMethod: "textfield",
              validationType: "number"
            }]
          },
          saveOptions: {
            unsetAttributes: ["grid-plate-active-item", "edit-mode", "active-item", "layouts", "columns", "options"]
          }
        };
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          droppable: {
            type: Boolean,
            reflect: true
          },
          ignoreHax: {
            type: Boolean,
            attribute: "ignore-hax"
          },

          /**
           * Custom small breakpoint for the layouts; only updated on attached
           */
          breakpointSm: {
            type: Number,
            attribute: "breakpoint-sm"
          },

          /**
           * Custom medium breakpoint for the layouts; only updated on attached
           */
          breakpointMd: {
            type: Number,
            attribute: "breakpoint-md"
          },

          /**
           * Custom large breakpoint for the layouts; only updated on attached
           */
          breakpointLg: {
            type: Number,
            attribute: "breakpoint-lg"
          },

          /**
           * Custom extra-large breakpoint for the layouts; only updated on attached
           */
          breakpointXl: {
            type: Number,
            attribute: "breakpoint-xl"
          },

          /**
           * number of columns at this layout / responsive size
           */
          columns: {
            type: Number,
            reflect: true
          },

          /**
           * disables responsive layouts for HAX preview
           */
          disableResponsive: {
            type: Boolean,
            attribute: "disable-responsive"
          },

          /**
           * If the grid plate is in a state where its items
           * can be modified as far as order or column placement.
           */
          editMode: {
            reflect: true,
            type: Boolean,
            attribute: "edit-mode"
          },

          /**
           * an object with a layout's column sizes
           * at the current responsive width
           */
          layout: {
            type: String,
            reflect: true
          },

          /**
           * Predefined layouts of column sizes and various responsive widths. 
           * For example:```
          {
          "1-1-1-1": {                         //the name of the layout
          "xs": ["100%","100%","100%","100%] //the responsive width of each column when the grid is extra small
          "sm": ["50%","50%","50%","50%"]    //the responsive width of each column when the grid is small
          "md": ["50%","50%","50%","50%"]    //the responsive width of each column when the grid is medium
          "lg": ["25%","25%","25%","25%"]    //the responsive width of each column when the grid is large
          "xl": ["25%","25%","25%","25%"]    //the responsive width of each column when the grid is extra large
          },
          {...}
          }```
          */
          layouts: {
            type: Object
          },

          /**
           * Responsive size as `xs`, `sm`, `md`, `lg`, or `xl`
           */
          responsiveSize: {
            type: String,
            reflect: true,
            attribute: "responsive-size"
          },

          /**
           * Track active item
           */
          activeItem: {
            type: Object,
            attribute: "active-item"
          },

          /**
           * name of selected layout
           */
          columnWidths: {
            type: String,
            attribute: "column-widths"
          }
        };
      }
    }]);
    return GridPlate;
  }(_litElement.LitElement);

  _exports.GridPlate = GridPlate;
  window.customElements.define(GridPlate.tag, GridPlate);
});