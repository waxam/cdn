define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.I18NManagerStore = _exports.I18NManager = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2021 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  // register globally so we can make sure there is only one
  window.I18NManagerStore = window.I18NManagerStore || {};

  window.I18NManagerStore.requestAvailability = function () {
    if (!window.I18NManagerStore.instance) {
      window.I18NManagerStore.instance = document.createElement("i18n-manager");
      document.body.appendChild(window.I18NManagerStore.instance);
    }

    return window.I18NManagerStore.instance;
  };

  var I18NManagerStore = window.I18NManagerStore.requestAvailability();
  _exports.I18NManagerStore = I18NManagerStore;
  var FALLBACK_LANG = "en";
  var FALLBACK_DIR = "ltr";
  /**
   * `i18n-manager`
   * `internationalization management singleton and helper classes`
   * @demo demo/index.html
   * @element i18n-manager
   */

  var I18NManager = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(I18NManager, _HTMLElement);

    var _super = _createSuper(I18NManager);

    /**
     * HTMLElement
     */
    function I18NManager() {
      var _this;

      babelHelpers.classCallCheck(this, I18NManager);
      _this = _super.call(this); // fetch caching to reduce calls for json files

      _this.fetchTargets = {}; // reference to all elements that care about localization

      _this.elements = []; // quick set of all locales

      _this.locales = new Set([]); // set initially based on document

      _this.lang = _this.documentLang;
      _this.dir = _this.documentDir;
      return _this;
    }
    /**
     * Set document language from these common sources
     */


    babelHelpers.createClass(I18NManager, [{
      key: "documentLang",
      get: function get() {
        return document.body.getAttribute("xml:lang") || document.body.getAttribute("lang") || document.documentElement.getAttribute("xml:lang") || document.documentElement.getAttribute("lang") || navigator.language || FALLBACK_LANG;
      }
      /**
       * Set document direction from these common sources
       */

    }, {
      key: "documentDir",
      get: function get() {
        return document.body.getAttribute("xml:dir") || document.body.getAttribute("dir") || document.documentElement.getAttribute("xml:dir") || document.documentElement.getAttribute("dir") || FALLBACK_DIR;
      }
      /**
       * Life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        this.__ready = true;
        window.addEventListener("i18n-manager-register-element", this.registerLocalizationEvent.bind(this));
        window.addEventListener("languagechange", this.changeLanguageEvent.bind(this));
      }
      /**
       * Life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("i18n-manager-register-element", this.registerLocalizationEvent.bind(this));
        window.removeEventListener("languagechange", this.changeLanguageEvent.bind(this));
      }
      /**
       * Browser level languagechange event
       */

    }, {
      key: "changeLanguageEvent",
      value: function changeLanguageEvent(e) {
        // will trigger the language to update in all related elements
        // @see attributeChangedCallback
        this.lang = e.detail;
      }
      /**
       * Register a localization via event; this allow for a 0 dependency solution!
       */

    }, {
      key: "registerLocalizationEvent",
      value: function registerLocalizationEvent(e) {
        var detail = this.detailNormalize(e.detail); // ensure we have a namespace for later use

        if (detail.namespace && detail.localesPath && detail.locales) {
          this.registerLocalization(detail);
        }
      }
      /**
       * Apply normalization to all details bubbling up to improve
       * flexibility and patching to how other people implement our
       * API. This also can improve DX downstream by making educated
       * guesses as to intent (like namespace, localesPath, updateCallback)
       */

    }, {
      key: "detailNormalize",
      value: function detailNormalize(detail) {
        if (!detail.namespace && detail.context) {
          detail.namespace = detail.context.tagName.toLowerCase();
        } // support fallback calls for requestUpdate (LitElement) and render if nothing set


        if (!detail.updateCallback && detail.context) {
          if (detail.context.requestUpdate) {
            detail.updateCallback = "requestUpdate";
          } else if (detail.context.render) {
            detail.updateCallback = "render";
          }
        }

        if (!detail.localesPath && detail.basePath) {
          // clean up path and force adding locales. part security thing as well
          detail.localesPath = "".concat(decodeURIComponent(detail.basePath), "/../locales");
        } // minimum requirement to operate but still
        // should pull from other namespace if exists


        if (detail.context && detail.namespace) {
          // establish the fallback automatically if we are supplied defaults
          if (detail.context.t) {
            detail.context._t = _objectSpread({}, detail.context.t);
          }

          var match = this.elements.filter(function (el) {
            if (el.namespace == detail.namespace && el.localesPath && el.locales) {
              return true;
            }
          });

          if (match && match.length && match[0]) {
            detail.localesPath = match[0].localesPath;
            detail.locales = match[0].locales;
          }
        }

        return detail;
      }
      /**
       * Register a localization with the manager
       */

    }, {
      key: "registerLocalization",
      value: function registerLocalization(detail) {
        var _this2 = this;

        // ensure no dual registration of context; meaning same object twice
        if (!detail.context && this.elements.filter(function (e) {
          return e.namespace === detail.namespace;
        }).length === 0 || this.elements.filter(function (e) {
          return e.context === detail.context;
        }).length === 0) {
          detail = this.detailNormalize(detail);
          this.elements.push(detail); // store in this.locales for quick "do we support this" look up

          detail.locales.forEach(this.locales.add, this.locales); // timing issue, see if we are ready + a language and that it happened PRIOR
          // to registration just now but match against locales we support
          // and it being the set language already

          if (this.lang && this.__ready && detail.locales.includes(this.lang)) {
            // prevent flooding w/ lots of translatable elements
            clearTimeout(this._debounce);
            this._debounce = setTimeout(function () {
              _this2.updateLanguage(_this2.lang);
            }, 0);
          }
        }
      }
      /**
       * Convention we use
       */

    }, {
      key: "loadNamespaceFile",
      value:
      /**
       * Return language file for a specific context
       */
      function () {
        var _loadNamespaceFile = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(ns) {
          var lang,
              langPieces,
              nsMatch,
              el,
              fetchTarget,
              _args = arguments;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  lang = _args.length > 1 && _args[1] !== undefined ? _args[1] : this.lang;
                  langPieces = lang.split("-");
                  nsMatch = this.elements.filter(function (el) {
                    return el.namespace === ns && (el.locales.includes(lang) || el.locales.includes(langPieces[0]));
                  });

                  if (!(nsMatch && nsMatch.length === 1)) {
                    _context.next = 14;
                    break;
                  }

                  el = nsMatch[0];
                  fetchTarget = "";

                  if (el.locales.includes(lang)) {
                    fetchTarget = "".concat(el.localesPath, "/").concat(el.namespace, ".").concat(lang, ".json");
                  } else if (el.locales.includes(langPieces[0])) {
                    fetchTarget = "".concat(el.localesPath, "/").concat(el.namespace, ".").concat(langPieces[0], ".json");
                  }

                  if (!(fetchTarget == "")) {
                    _context.next = 9;
                    break;
                  }

                  return _context.abrupt("return", {});

                case 9:
                  if (this.fetchTargets[fetchTarget]) {
                    _context.next = 13;
                    break;
                  }

                  _context.next = 12;
                  return fetch(fetchTarget).then(function (response) {
                    if (response && response.json) return response.json();
                    return false;
                  });

                case 12:
                  this.fetchTargets[fetchTarget] = _context.sent;

                case 13:
                  return _context.abrupt("return", this.fetchTargets[fetchTarget]);

                case 14:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadNamespaceFile(_x) {
          return _loadNamespaceFile.apply(this, arguments);
        }

        return loadNamespaceFile;
      }()
      /**
       * trigger an update of the language after loading everything
       */

    }, {
      key: "updateLanguage",
      value: function () {
        var _updateLanguage = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(lang) {
          var langPieces, processList, fallBack, i, el, _el, fetchTarget, data, id;

          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  if (!lang) {
                    _context2.next = 21;
                    break;
                  }

                  langPieces = lang.split("-"); // get all exact matches as well as partial matches

                  processList = this.elements.filter(function (el) {
                    return el.locales.includes(lang) || el.locales.includes(langPieces[0]);
                  });
                  fallBack = this.elements.filter(function (el) {
                    return !el.locales.includes(lang) && !el.locales.includes(langPieces[0]);
                  }); // no matches found, now we should fallback to defaults in the elements

                  if (fallBack.length !== 0) {
                    // fallback to documentLanguage
                    for (i in fallBack) {
                      el = fallBack[i]; // verify we have a context

                      if (el.context) {
                        // reset to the fallback language t value
                        el.context.t = _objectSpread({}, el.context._t); // support a forced update / function to run when it finishes

                        if (el.updateCallback) {
                          el.context[el.updateCallback]();
                        }
                      }
                    }
                  } // run through and match exact matches


                  _context2.t0 = regeneratorRuntime.keys(processList);

                case 6:
                  if ((_context2.t1 = _context2.t0()).done) {
                    _context2.next = 21;
                    break;
                  }

                  i = _context2.t1.value;
                  _el = processList[i];
                  fetchTarget = "";

                  if (_el.locales.includes(lang)) {
                    fetchTarget = "".concat(_el.localesPath, "/").concat(_el.namespace, ".").concat(lang, ".json");
                  } else if (_el.locales.includes(langPieces[0])) {
                    fetchTarget = "".concat(_el.localesPath, "/").concat(_el.namespace, ".").concat(langPieces[0], ".json");
                  } // see if we had this previous to avoid another request


                  if (!this.fetchTargets[fetchTarget]) {
                    _context2.next = 15;
                    break;
                  }

                  if (_el.context) {
                    data = this.fetchTargets[fetchTarget];

                    for (id in data) {
                      _el.context.t[id] = data[id];
                    }

                    _el.context.t = _objectSpread({}, _el.context.t); // support a forced update / function to run when it finishes

                    if (_el.updateCallback) {
                      _el.context[_el.updateCallback]();
                    }
                  }

                  _context2.next = 19;
                  break;

                case 15:
                  _context2.next = 17;
                  return fetch(fetchTarget).then(function (response) {
                    if (response && response.json) return response.json();
                    return false;
                  });

                case 17:
                  this.fetchTargets[fetchTarget] = _context2.sent;

                  if (_el.context) {
                    // set values
                    for (id in this.fetchTargets[fetchTarget]) {
                      _el.context.t[id] = this.fetchTargets[fetchTarget][id];
                    } // spread can generate notify statements in downstream elements
                    // this probably makes updateCallback irrelevant in reactive
                    // projects like LitElement but just to be double sure


                    _el.context.t = _objectSpread({}, _el.context.t); // support a forced update / function to run when it finishes

                    if (_el.updateCallback && _el.context) {
                      _el.context[_el.updateCallback]();
                    }
                  }

                case 19:
                  _context2.next = 6;
                  break;

                case 21:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function updateLanguage(_x2) {
          return _updateLanguage.apply(this, arguments);
        }

        return updateLanguage;
      }()
      /**
       * Life cycle
       */

    }, {
      key: "attributeChangedCallback",
      value:
      /**
       * Life cycle
       */
      function attributeChangedCallback(attr, oldValue, newValue) {
        // notify of attr change
        if (attr === "lang" || attr === "dir") {
          this.dispatchEvent(new CustomEvent("".concat(attr, "-changed"), {
            detail: {
              value: newValue
            }
          }));
        } // we are NOT moving to the default from something


        if (attr === "lang" && newValue && this.__ready) {
          this.updateLanguage(newValue);
        }
      } // getters and setters to map props to attributes

    }, {
      key: "lang",
      get: function get() {
        return this.getAttribute("lang");
      },
      set: function set(val) {
        if (!val) {
          this.removeAttribute("lang");
        } else {
          this.setAttribute("lang", val);
        }
      }
    }, {
      key: "dir",
      get: function get() {
        return this.getAttribute("dir");
      },
      set: function set(val) {
        if (!val) {
          this.removeAttribute("dir");
        } else {
          this.setAttribute("dir", val);
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "i18n-manager";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["lang", "dir"];
      }
    }]);
    return I18NManager;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.I18NManager = I18NManager;
  customElements.define(I18NManager.tag, I18NManager);
});