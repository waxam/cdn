define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RandomItem = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `random-item`
   * @element random-item
   * `show a random item from a list of items`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @demo demo/index.html
   */
  var RandomItem = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(RandomItem, _HTMLElement);

    var _super = _createSuper(RandomItem);

    /**
     * life cycle
     */
    function RandomItem() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, RandomItem);
      _this = _super.call(this); // set tag for later use

      _this.tag = RandomItem.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(RandomItem, [{
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }
      }
    }, {
      key: "attributeChangedCallback",
      value: // disconnectedCallback() {}
      function attributeChangedCallback(attr, oldValue, newValue) {
        if (attr === "source" && newValue) {
          this.source = newValue;
          this.sourceChanged(newValue);
        } else if (attr === "field" && newValue) {
          this.field = newValue;

          if (this.source) {
            this.setDataWithRandom();
          }
        }
      }
      /**
       * source changed
       */

    }, {
      key: "sourceChanged",
      value: function () {
        var _sourceChanged = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(value) {
          var data, heading;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return fetch(value).then(function (response) {
                    return response.text();
                  });

                case 2:
                  data = _context.sent;
                  this.items = this.CSVtoArray(data);
                  heading = this.items.shift();
                  this.qKey = heading;
                  this.entryPoint = 0;
                  this.setDataWithRandom();

                case 8:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function sourceChanged(_x) {
          return _sourceChanged.apply(this, arguments);
        }

        return sourceChanged;
      }()
      /**
       * Set data with a random value
       */

    }, {
      key: "setDataWithRandom",
      value: function setDataWithRandom() {
        for (var key in this.qKey) {
          if (this.qKey[key] === this.field) {
            this.entryPoint = Number(key);
          }
        }

        var qKey = Math.floor(Math.random() * this.items.length);
        this.dataPoint = this.items[qKey][this.entryPoint];
        this.render();
      }
      /**
       * Mix of solutions from https://stackoverflow.com/questions/8493195/how-can-i-parse-a-csv-string-with-javascript-which-contains-comma-in-data
       */

    }, {
      key: "CSVtoArray",
      value: function CSVtoArray(text) {
        var p = "",
            row = [""],
            ret = [row],
            i = 0,
            r = 0,
            s = !0,
            l;

        for (l in text) {
          l = text[l];

          if ('"' === l) {
            if (s && l === p) row[i] += l;
            s = !s;
          } else if ("," === l && s) l = row[++i] = "";else if ("\n" === l && s) {
            if ("\r" === p) row[i] = row[i].slice(0, -1);
            row = ret[++r] = [l = ""];
            i = 0;
          } else row[i] += l;

          p = l;
        }

        return ret;
      }
    }], [{
      key: "haxProperties",
      get: // haxProperty definition
      function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Random item",
            description: "Show a random item from a list of items",
            icon: "places:casino",
            color: "red",
            groups: ["Item"],
            handles: [],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "field",
              title: "Field",
              description: "Field in the file to show",
              inputMethod: "textfield",
              required: false
            }, {
              property: "source",
              title: "Source",
              description: "URL pointing to a CSV file",
              inputMethod: "haxupload",
              required: true
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RandomItem), "properties", this)), {}, {
          source: {
            name: "source",
            type: String
          },
          field: {
            name: "field",
            type: String
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "random-item";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["source", "field"];
      }
    }]);
    return RandomItem;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.RandomItem = RandomItem;
  window.customElements.define(RandomItem.tag, RandomItem);
});