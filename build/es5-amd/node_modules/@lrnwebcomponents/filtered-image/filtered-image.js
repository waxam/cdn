define(["exports", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js"], function (_exports, _litElement, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FilteredImage = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_5569a1b0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_5569a1b0d34d11ea880ba1e93364c49c = function _templateObject2_5569a1b0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_5569a1b0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <svg id=\"svg\" viewBox=\"0 0 ", " ", "\">\n        <rect id=\"rect\" x=\"0\" y=\"0\"></rect>\n        <filter id=\"", "\">\n          <feColorMatrix\n            id=\"matrix\"\n            type=\"matrix\"\n            values=\" 1   0   0   0   0\n               0   1   0   0   0\n               0   0   1   0   0\n               0   0   0   1   0 \"\n          />\n        </filter>\n        <image id=\"image\" filter=\"url(#", ")\" x=\"0\" y=\"0\"></image>\n      </svg>\n    "]);

    _templateObject_5569a1b0d34d11ea880ba1e93364c49c = function _templateObject_5569a1b0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `filtered-image`
   * `An image using an SVG filter. Can be used to make background images have more contrast with text.`
   * @demo demo/index.html
   * @demo demo/filters.html Filters
   * @element filtered-image
   */
  var FilteredImage =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(FilteredImage, _SimpleColors);
    babelHelpers.createClass(FilteredImage, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_5569a1b0d34d11ea880ba1e93364c49c(), this.width, this.height, this.__id, this.__id);
      } // haxProperty definition

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(FilteredImage), "styles", this)), [(0, _litElement.css)(_templateObject2_5569a1b0d34d11ea880ba1e93364c49c())]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Filtered image",
            description: "An image using an SVG filter. Can be used to make background images have more contrast with text.",
            icon: "icons:android",
            color: "green",
            groups: ["Image"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "nikkimk",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [{
              property: "src",
              description: "",
              inputMethod: "textfield",
              required: true,
              icon: "icons:link",
              validationType: "url"
            }, {
              property: "alt",
              description: "",
              inputMethod: "alt",
              required: true,
              icon: "icons:accessibility"
            }],
            configure: [{
              property: "src",
              description: "",
              inputMethod: "textfield",
              required: true,
              icon: "icons:link",
              validationType: "url"
            }, {
              property: "alt",
              description: "",
              inputMethod: "alt",
              required: true,
              icon: "icons:accessibility"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(FilteredImage), "properties", this), {
          src: {
            type: String
          },
          __id: {
            type: String
          },
          alt: {
            type: String
          },
          height: {
            type: String
          },
          width: {
            type: String
          },
          color: {
            type: String
          },
          strength: {
            type: Number
          },
          contrast: {
            type: Number
          },
          __matrix: {
            type: Array
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "filtered-image";
      }
      /**
       * HTMLElement
       */

    }]);

    function FilteredImage() {
      var _this;

      babelHelpers.classCallCheck(this, FilteredImage);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(FilteredImage).call(this));
      _this.src = "";
      _this.alt = "";
      _this.height = "";
      _this.width = "";
      _this.color = "#ffffff";
      _this.strength = 1;
      _this.contrast = 0;
      return _this;
    }
    /**
     * LitElement properties changed
     */


    babelHelpers.createClass(FilteredImage, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "src") {
            _this2._srcChanged(_this2[propName]);
          }

          if (propName == "height") {
            _this2._heightChanged(_this2[propName]);
          }

          if (propName == "width") {
            _this2._widthChanged(_this2[propName]);
          }

          if (["src", "matrix"].includes(propName)) {
            _this2.__id = _this2._getID(_this2.src, _this2.matrix);
          }

          if (["color", "contrast", "strength"].includes(propName)) {
            _this2.__matrix = _this2._getMatrix(_this2.color, _this2.contrast, _this2.strength);
          }
        });
      }
    }, {
      key: "_heightChanged",
      value: function _heightChanged() {
        var svg = this.shadowRoot.querySelector("#svg"),
            image = svg.querySelector("#image"),
            rect = svg.querySelector("#rect");
        svg.setAttribute("height", this.height);
        image.setAttribute("height", this.height);
        rect.setAttribute("height", this.height);
      }
    }, {
      key: "_widthChanged",
      value: function _widthChanged() {
        var svg = this.shadowRoot.querySelector("#svg"),
            image = svg.querySelector("#image"),
            rect = svg.querySelector("#rect");
        svg.setAttribute("width", this.width);
        image.setAttribute("width", this.width);
        rect.setAttribute("width", this.width);
      }
    }, {
      key: "_srcChanged",
      value: function _srcChanged() {
        var svg = this.shadowRoot.querySelector("#svg"),
            image = svg.querySelector("#image");
        image.setAttribute("href", this.src);
        image.setAttribute("xlink:href", this.src);
      }
    }, {
      key: "_getMatrix",
      value: function _getMatrix(color, contrast, strength) {
        var values = [[1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0]],
            svg = this.shadowRoot.querySelector("#svg"),
            matrix = svg.querySelector("#matrix"),
            rgba = null;

        if (color.startsWith("#") && color.length > 6) {
          if (color.length === 7) color += "ff";
          values[0][0] = parseInt(color.substring(1, 3), 16) / 255;
          values[1][1] = parseInt(color.substring(3, 5), 16) / 255;
          values[2][2] = parseInt(color.substring(5, 7), 16) / 255;
          values[3][3] = parseInt(color.substring(7, 9), 16) / 255;
        } else if (color.startsWith("#")) {
          if (color.length === 4) color += "f";
          values[0][0] = parseInt(color.substring(1, 2) + color.substring(1, 2), 16) / 255;
          values[1][1] = parseInt(color.substring(2, 3) + color.substring(2, 3), 16) / 255;
          values[2][2] = parseInt(color.substring(3, 4) + color.substring(3, 4), 16) / 255;
          values[3][3] = parseInt(color.substring(4, 5) + color.substring(4, 5), 16) / 255;
        } else if (color.startsWith("rgb")) {
          var temp = color.replace(/rgba?\(/g, "").replace(/\)/g, "");
          rgba = temp.split(",");
          values[0][0] = parseInt(rgba[0] / 255);
          values[1][1] = parseInt(rgba[1] / 255);
          values[2][2] = parseInt(rgba[2] / 255);
          values[3][3] = values[3][3] || "1";
        }

        if (contrast !== 0) {
          values[0][3] = values[0][0] * contrast / 100;
          values[1][3] = values[1][1] * contrast / 100;
          values[2][3] = values[2][2] * contrast / 100;
        }

        if (strength !== 1) {
          values[0][0] = values[0][0] + (1 - strength) * (1 - values[0][0]);
          values[1][1] = values[1][1] + (1 - strength) * (1 - values[1][1]);
          values[2][2] = values[2][2] + (1 - strength) * (1 - values[2][2]);
        }

        matrix.setAttribute("values", JSON.stringify(values).replace(/[,\[\]]/g, " "));
        return values;
      }
    }, {
      key: "_getID",
      value: function _getID(src, matrix) {
        var id = "svg" + Math.random();
        return id.replace(/0./g, "-");
      }
    }]);
    return FilteredImage;
  }(_simpleColors.SimpleColors);

  _exports.FilteredImage = FilteredImage;
  window.customElements.define(FilteredImage.tag, FilteredImage);
});