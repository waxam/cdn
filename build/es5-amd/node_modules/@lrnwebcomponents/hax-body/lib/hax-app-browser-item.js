define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXAppBrowserItem = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_f2b276f02c1c11eaacb4bf54e86db688() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          max-width: 90px;\n        }\n        paper-button {\n          color: var(--hax-color-text);\n          text-transform: none;\n          background-color: var(--hax-color-bg-accent);\n          min-width: unset;\n          cursor: pointer;\n          display: flex;\n          width: 80px;\n          padding: 5px;\n          margin: 5px;\n          color: #ffffff;\n          border-radius: 0;\n          transition: box-shadow 0.3s;\n        }\n        paper-button:hover,\n        paper-button:focus {\n          box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.14),\n            0 2px 10px 0 rgba(0, 0, 0, 0.12), 0 6px 2px -4px rgba(0, 0, 0, 0.2);\n        }\n        paper-button:active {\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n        }\n        paper-button iron-icon {\n          height: 32px;\n          width: 32px;\n          color: var(--simple-colors-default-theme-grey-1);\n          display: inline-block;\n        }\n        .item-title {\n          margin-top: 8px;\n          color: var(--hax-color-text);\n          width: 100%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          font-size: 12px;\n          line-height: 12px;\n          height: 12px;\n          text-align: center;\n        }\n        .button-inner {\n          display: flex;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n      "]);

    _templateObject2_f2b276f02c1c11eaacb4bf54e86db688 = function _templateObject2_f2b276f02c1c11eaacb4bf54e86db688() {
      return data;
    };

    return data;
  }

  function _templateObject_f2b276f02c1c11eaacb4bf54e86db688() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-button\n        @click=\"", "\"\n        .data-voicecommand=\"select ", "\"\n        title=\"", "\"\n      >\n        <hax-item-button-inner\n          color=\"", "\"\n          icon=\"", "\"\n          label=\"", "\"\n        >\n        </hax-item-button-inner>\n      </paper-button>\n    "]);

    _templateObject_f2b276f02c1c11eaacb4bf54e86db688 = function _templateObject_f2b276f02c1c11eaacb4bf54e86db688() {
      return data;
    };

    return data;
  }

  /**
   * `hax-app-browser-item`
   * @customElement hax-app-browser-item
   * `A button on the hax-app-browser display`
   * @microcopy - the mental model for this element
   * - hax-app - data wiring for an app, this element uses the visual side of this
   */
  var HAXAppBrowserItem =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HAXAppBrowserItem, _LitElement);
    babelHelpers.createClass(HAXAppBrowserItem, null, [{
      key: "tag",
      get: function get() {
        return "hax-app-browser-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * Index position in the original list of imports
           */
          index: {
            type: Number
          },

          /**
           * Icon for the button, optional.
           */
          icon: {
            type: String
          },

          /**
           * Image for the button, optional.
           */
          image: {
            type: String
          },

          /**
           * MaterializeCSS color name of the item
           */
          color: {
            type: String
          },

          /**
           * Author related to this app
           */
          author: {
            type: String
          },

          /**
           * Description for this.
           */
          description: {
            type: String
          },

          /**
           * Examples, a list of image links, optional.
           */
          examples: {
            type: Array
          },

          /**
           * Status, whether disabled, enabled, or other future states.
           */
          status: {
            type: Array
          }
        };
      }
    }]);

    function HAXAppBrowserItem() {
      var _this;

      babelHelpers.classCallCheck(this, HAXAppBrowserItem);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXAppBrowserItem).call(this));
      _this.image = false;
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HAXAppBrowserItem, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_f2b276f02c1c11eaacb4bf54e86db688(), this._fireEvent, this.title, this.title, this.color, this.icon, this.title);
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        this.dispatchEvent(new CustomEvent("hax-app-selected", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this.index
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_f2b276f02c1c11eaacb4bf54e86db688())];
      }
    }]);
    return HAXAppBrowserItem;
  }(_litElement.LitElement);

  _exports.HAXAppBrowserItem = HAXAppBrowserItem;
  customElements.define(HAXAppBrowserItem.tag, HAXAppBrowserItem);
});