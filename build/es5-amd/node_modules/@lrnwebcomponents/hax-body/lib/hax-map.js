define(["exports", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "./hax-toolbar-item.js", "../../hax-iconset/lib/simple-hax-iconset.js", "./hax-store.js", "../../utils/utils.js", "./hax-ui-styles.js", "../../i18n-manager/lib/I18NMixin.js", "../../../mobx/dist/mobx.esm.js"], function (_exports, _index, _simpleIconLite, _haxToolbarItem, _simpleHaxIconset, _haxStore, _utils, _haxUiStyles, _I18NMixin2, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxMap = void 0;

  var _templateObject_2dbc0760ce4711ecb13bcf602138080f, _templateObject2_2dbc0760ce4711ecb13bcf602138080f, _templateObject3_2dbc0760ce4711ecb13bcf602138080f;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-map`
   * @element hax-map
   * `Export dialog with all export options and settings provided.`
   */
  var HaxMap = /*#__PURE__*/function (_I18NMixin) {
    babelHelpers.inherits(HaxMap, _I18NMixin);

    var _super = _createSuper(HaxMap);

    function HaxMap() {
      var _this;

      babelHelpers.classCallCheck(this, HaxMap);
      _this = _super.call(this);
      _this.elementList = [];
      _this.t = {
        contentStatistics: "Content Statistics",
        words: "Words",
        headings: "Headings",
        pageBreaks: "Page breaks",
        paragraphs: "Paragraphs",
        widgets: "Widgets",
        characters: "Characters",
        listView: "List view"
      };

      _this.registerLocalization({
        context: babelHelpers.assertThisInitialized(_this),
        namespace: "hax"
      });

      (0, _mobxEsm.autorun)(function () {
        _this.activeNodeIndex = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNodeIndex);
      });
      return _this;
    }

    babelHelpers.createClass(HaxMap, [{
      key: "updateHAXMap",
      value: function () {
        var _updateHAXMap = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e) {
          var list, i, node, elements, def;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  list = [];
                  i = 0;

                case 2:
                  if (!(i < _haxStore.HAXStore.activeHaxBody.childNodes.length)) {
                    _context.next = 12;
                    break;
                  }

                  node = _haxStore.HAXStore.activeHaxBody.childNodes[i];
                  _context.t0 = list;
                  _context.next = 7;
                  return (0, _utils.nodeToHaxElement)(node, null);

                case 7:
                  _context.t1 = _context.sent;

                  _context.t0.push.call(_context.t0, _context.t1);

                case 9:
                  i++;
                  _context.next = 2;
                  break;

                case 12:
                  this.calcStats(list);
                  elements = [];

                  for (i = 0; i < list.length; i++) {
                    def = _haxStore.HAXStore.haxSchemaFromTag(list[i].tag);

                    if (def.gizmo) {
                      elements.push({
                        tag: list[i].tag,
                        icon: def.gizmo.icon,
                        name: def.gizmo.title
                      });
                    } else {
                      if (list[i].tag && list[i].tag.includes("-")) {
                        elements.push({
                          tag: list[i].tag,
                          icon: "hax:templates",
                          name: "Widget"
                        });
                      } else {
                        elements.push({
                          tag: list[i].tag,
                          icon: "hax:paragraph",
                          name: "HTML block"
                        });
                      }
                    }
                  }

                  this.elementList = [].concat(elements);

                case 16:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function updateHAXMap(_x) {
          return _updateHAXMap.apply(this, arguments);
        }

        return updateHAXMap;
      }()
      /**
       * Calculate statistics from the array of hax elements
       */

    }, {
      key: "calcStats",
      value: function calcStats(elements) {
        if (elements && _haxStore.HAXStore.activeHaxBody.innerText) {
          var counts = {
            c: _haxStore.HAXStore.activeHaxBody.innerText.length,
            w: parseInt(_haxStore.HAXStore.activeHaxBody.innerText.split(/\s+/g).length - 1),
            h: 0,
            b: 0,
            p: 0,
            e: 0
          };
          elements.forEach(function (el) {
            switch (el.tag) {
              case "blockquote":
              case "div":
              case "span":
              case "p":
              case "ul":
              case "ol":
              case "strong":
              case "em":
                counts.p++;
                break;

              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                counts.h++;
                break;

              case "page-break":
                counts.b++;
                break;

              default:
                counts.e++;
                break;
            }
          });

          for (var i in counts) {
            this["".concat(i, "Count")] = counts[i];
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _index.html)(_templateObject_2dbc0760ce4711ecb13bcf602138080f || (_templateObject_2dbc0760ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <h5>", "</h5>\n      <div class=\"stats\">\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n        <div class=\"stat\">\n          <span>", "</span>\n          <span>", "</span>\n        </div>\n      </div>\n      <h5>", "</h5>\n      <ul>\n        ", "\n      </ul>\n    "])), this.t.contentStatistics, this.wCount, this.t.words, this.pCount, this.t.paragraphs, this.cCount, this.t.characters, this.bCount, this.t.pageBreaks, this.hCount, this.t.headings, this.eCount, this.t.widgets, this.t.listView, this.indentedElements.map(function (element, index) {
          return (0, _index.html)(_templateObject2_2dbc0760ce4711ecb13bcf602138080f || (_templateObject2_2dbc0760ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n            <li>\n              <hax-toolbar-item\n                align-horizontal=\"left\"\n                class=\"heading-level-", "\"\n                @click=\"", "\"\n                data-index=\"", "\"\n                ?data-active-item=\"", "\"\n                icon=\"", "\"\n                label=\"", "\"\n                show-text-label\n              >\n              </hax-toolbar-item>\n            </li>\n          "])), element.parent || "h1", function (e) {
            return _this2.goToItem(index);
          }, index, index === _this2.activeNodeIndex, element.icon, element.name);
        }));
      }
    }, {
      key: "indentedElements",
      get: function get() {
        var prev = "h1";
        return this.elementList.map(function (element) {
          var el = element;
          el.parent = prev;

          if (el.tag === "page-break") {
            el.parent = "page-break";
            prev = "page-break";
          } else if (["h1", "h2", "h3", "h4", "h5", "h6"].includes(el.tag)) {
            el.parent = el.tag;
            prev = el.tag;
          }

          return el;
        });
      }
    }, {
      key: "goToItem",
      value: function goToItem(index) {
        if (index !== false) {
          // find based on index position
          var activeChild = _haxStore.HAXStore.activeHaxBody.children[parseInt(index)];

          _haxStore.HAXStore.activeNode = activeChild;
          activeChild.classList.add("blinkfocus");

          if (typeof activeChild.scrollIntoViewIfNeeded === "function") {
            activeChild.scrollIntoViewIfNeeded(true);
          } else {
            activeChild.scrollIntoView({
              behavior: "smooth",
              inline: "center"
            });
          }

          setTimeout(function () {
            activeChild.classList.remove("blinkfocus");
          }, 500);
        }
      }
    }, {
      key: "scrollInMap",
      value: function scrollInMap() {
        var target = (0, _utils.normalizeEventPath)(e)[0];
        this.goToItem(target.getAttribute("data-index"));
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [].concat(babelHelpers.toConsumableArray(_haxUiStyles.HaxTrayDetailHeadings), [(0, _index.css)(_templateObject3_2dbc0760ce4711ecb13bcf602138080f || (_templateObject3_2dbc0760ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        .container {\n          text-align: left;\n        }\n        .stats {\n          display: flex;\n          align-items: stretch;\n          flex-wrap: wrap;\n        }\n        .stat {\n          flex: 1 1 auto;\n          text-align: center;\n          border: 1px solid var(--hax-ui-border-color);\n          font-weight: normal;\n          font-size: var(--hax-ui-font-size-xs);\n          line-height: 140%;\n          padding: var(--hax-ui-spacing-sm);\n        }\n        .stat > * {\n          display: block;\n        }\n        .stat *:first-child {\n          font-weight: bold;\n          font-size: 150%;\n        }\n        ul {\n          list-style: none;\n          padding: 0;\n          margin: 0;\n        }\n        ul li {\n          margin: 0;\n          padding: 0;\n        }\n        li > hax-toolbar-item {\n          width: 100%;\n        }\n        hax-toolbar-item[data-active-item]::part(button) {\n          color: var(--hax-ui-color);\n          background-color: var(--hax-ui-background-color-accent);\n          border-color: var(--hax-ui-color-accent);\n        }\n        li > hax-toolbar-item::part(button),\n        li > hax-toolbar-item.heading-level-page-break::part(button),\n        li > hax-toolbar-item[icon=\"hax:h2\"].heading-level-h2::part(button) {\n          width: 100%;\n          margin-left: 0px;\n        }\n        li > hax-toolbar-item.heading-level-h2::part(button),\n        li > hax-toolbar-item[icon=\"hax:h3\"].heading-level-h3::part(button) {\n          width: calc(100% - 26px);\n          margin-left: 26px;\n        }\n        li > hax-toolbar-item.heading-level-h3::part(button),\n        li > hax-toolbar-item[icon=\"hax:h4\"].heading-level-h4::part(button) {\n          width: calc(100% - calc(2 * 26px));\n          margin-left: calc(2 * 26px);\n        }\n        li > hax-toolbar-item.heading-level-h4::part(button),\n        li > hax-toolbar-item[icon=\"hax:h5\"].heading-level-h5::part(button) {\n          width: calc(100% - calc(3 * 26px));\n          margin-left: calc(3 * 26px);\n        }\n        li > hax-toolbar-item.heading-level-h5::part(button),\n        li > hax-toolbar-item[icon=\"hax:h6\"].heading-level-h6::part(button) {\n          width: calc(100% - calc(4 * 26px));\n          margin-left: calc(4 * 26px);\n        }\n        li > hax-toolbar-item.heading-level-h6::part(button) {\n          width: calc(100% - calc(5 * 26px));\n          margin-left: calc(5 * 26px);\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-map";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title when open.
           */
          opened: {
            type: Boolean
          },
          elementList: {
            type: Array
          },
          cCount: {
            type: String
          },
          wCount: {
            type: String
          },
          bCount: {
            type: String
          },
          hCount: {
            type: String
          },
          pCount: {
            type: String
          },
          eCount: {
            type: String
          },
          activeNodeIndex: {
            type: Number
          }
        };
      }
    }]);
    return HaxMap;
  }((0, _I18NMixin2.I18NMixin)(_index.LitElement));

  _exports.HaxMap = HaxMap;
  customElements.define(HaxMap.tag, HaxMap);
});