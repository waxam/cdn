define(["exports", "../../../@polymer/polymer/lib/legacy/polymer.dom.js"], function (_exports, _polymerDom) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.encapScript = encapScript;
  _exports.findTagsInHTML = findTagsInHTML;
  _exports.wipeSlot = wipeSlot;
  _exports.stripMSWord = stripMSWord;
  _exports.varExists = varExists;
  _exports.varGet = varGet;
  _exports.objectValFromStringPos = objectValFromStringPos;

  /**
   * A collection of utility functions exported for convenience
   */
  function encapScript(html) {
    // ensure this is a string to then do replacements on, rare but possible w/ null
    if (html && typeof html.replace === "function") {
      html = html.replace(/<script[\s\S]*?>/gi, "&lt;script&gt;");
      html = html.replace(/<\/script>/gi, "&lt;/script&gt;"); // ensure that HAX tags aren't leaking in here

      html = html.replace(/<hax[\s\S]*?>/gi, "");
      html = html.replace(/<\/hax[\s\S]*?>/gi, "");
      html = html.replace(/<h-a-x[\s\S]*?>/gi, "");
      html = html.replace(/<\/h-a-x*?>/gi, "");
      html = html.replace(/<style[\s\S]*?>/gi, "&lt;style&gt;");
      html = html.replace(/<\/style>/gi, "&lt;/style&gt;"); // special case, it's inside a template tag

      html = html.replace(/<template[\s\S]*?>[\s\S]*?&lt;script[\s\S]*?&gt;[\s\S]*?&lt;\/script&gt;/gi, function (match, contents, offset, input_string) {
        match = match.replace("&lt;script&gt;", "<script>");
        match = match.replace("&lt;/script&gt;", "</script>");
        match = match.replace("&lt;style&gt;", "<style>");
        match = match.replace("&lt;/style&gt;", "</style>");
        return match;
      });
    }

    return html;
  }
  /**
   * Find custom elements in HTML
   */


  function findTagsInHTML(html) {
    var tags = {};
    var tag = "";
    var matches = html.match(/<\/([a-z,0-9]*?)-(\S*?)>/g);

    for (var i in matches) {
      tag = matches[i].replace("</", "").replace(">", "");
      tags[tag] = tag;
    }

    return tags;
  }
  /**
   * Wipe slotted content
   */


  function wipeSlot(element) {
    var slot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "*";

    // 100% clean slate
    if (slot === "*") {
      while ((0, _polymerDom.dom)(element).firstChild !== null) {
        (0, _polymerDom.dom)(element).removeChild((0, _polymerDom.dom)(element).firstChild);
      }
    } else {
      for (var i in (0, _polymerDom.dom)(element).childNodes) {
        // test for element nodes to be safe
        if (babelHelpers.typeof((0, _polymerDom.dom)(element).childNodes[i]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && (0, _polymerDom.dom)(element).childNodes[i].slot === slot) {
          (0, _polymerDom.dom)(element).removeChild((0, _polymerDom.dom)(element).childNodes[i]);
        }
      }
    }
  }
  /**
   * Strip word BS
   */


  function stripMSWord(input) {
    // 1. remove line breaks / Mso classes right off the bat
    var output = input.split("\n\r").join("\n").split("\r").join("\n").split("\n\n").join("\n").split("\n\n").join("\n").split("\n\n").join("\n").split("\n").join(" ").replace(/( class=(")?Mso[a-zA-Z]+(")?)/g, ""); // 2. strip Word generated HTML comments

    output = output.replace(/<\!--(\s|.)*?-->/gim, "");
    output = output.replace(/<\!(\s|.)*?>/gim, ""); // 3. remove tags leave content if any

    output = output.replace(/<(\/)*(meta|link|html|head|body|span|font|br|\\\\?xml:|xml|st1:|o:|w:|m:|v:)(\s|.)*?>/gim, ""); // 4. Remove everything in between and including tags '<style(.)style(.)>'

    var badTags = ["style", "script", "applet", "embed", "noframes", "noscript"];

    for (var i in badTags) {
      var tagStripper = new RegExp("<" + badTags[i] + "(s|.)*?" + badTags[i] + "(.*?)>", "gim");
      output = output.replace(tagStripper, "");
    } // 5. remove attributes ' style="..."', align, start


    output = output.replace(/ style='(\s|.)*?'/gim, "");
    output = output.replace(/ align=.*? /g, "");
    output = output.replace(/ start='.*?'/g, ""); // 6. some HAX specific things in case this was moving content around
    // these are universally true tho so fine to have here

    output = output.replace(/ style="(\s|.)*?"/gim, "");
    output = output.replace(/ data-editable="(\s|.)*?"/gim, "");
    output = output.replace(/ data-hax-ray="(\s|.)*?"/gim, "");
    output = output.replace(/ class=""/gim, "");
    output = output.replace(/ class="hax-active"/gim, "");
    output = output.replace(/ contenteditable="(\s|.)*?"/gim, ""); // 7. clean out empty paragraphs and endlines that cause weird spacing

    output = output.replace(/&nbsp;/gm, " "); // start of double, do it twice for nesting

    output = output.replace(/<p><p>/gm, "<p>");
    output = output.replace(/<p><p>/gm, "<p>"); // double, do it twice for nesting

    output = output.replace(/<\/p><\/p>/gm, "</p>");
    output = output.replace(/<\/p><\/p>/gm, "</p>"); // empty with lots of space

    output = output.replace(/<p>(\s*)<\/p>/gm, " "); // empty p / more or less empty

    output = output.replace(/<p><\/p>/gm, "");
    output = output.replace(/<p>&nbsp;<\/p>/gm, " "); // br somehow getting through here

    output = output.replace(/<p><br\/><\/p>/gm, "");
    output = output.replace(/<p><br><\/p>/gm, ""); // whitespace in reverse of the top case now that we've cleaned it up

    output = output.replace(/<\/p>(\s*)<p>/gm, "</p><p>"); // wow do I hate contenteditable and the dom....
    // bold and italic are treated as if they are block elements in a paste scenario
    // 8. check for empty bad tags

    for (var i in badTags) {
      var emptyTagRemove = new RegExp("<" + badTags[i] + "></" + badTags[i] + ">", "gi");
      output = output.replace(emptyTagRemove, "");
    }

    output = output.trim();
    return output;
  }
  /**
   * Test if a variable along a given object path exists
   */


  function varExists(obj, path) {
    var g = objectValFromStringPos(obj, path, "__failedToFind__");

    if (g != "__failedToFind__") {
      return true;
    }

    return false;
  }
  /**
   * Return an object path or fallback value if not set
   */


  function varGet(obj, path) {
    var fallback = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
    return objectValFromStringPos(obj, path, fallback);
  } // helper to use strings for index in Objects


  function objectValFromStringPos(o, s) {
    var r = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
    s = s.replace(/\[(\w+)\]/g, ".$1"); // convert indexes to properties

    s = s.replace(/^\./, ""); // strip a leading dot

    var a = s.split(".");

    for (var i = 0, n = a.length; i < n; ++i) {
      var k = a[i];

      if (k in o) {
        o = o[k];
      } else {
        return r;
      }
    }

    return o;
  }
});