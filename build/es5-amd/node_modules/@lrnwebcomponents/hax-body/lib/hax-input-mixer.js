define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxInputMixer = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject14_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject14_e3774da02da211eaa247b36e11306899 = function _templateObject14_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject13_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <span>", "</span>\n                <simple-colors-picker\n                  id=\"input\"\n                  .value=\"", "\"\n                  @value-changed=\"", "\"\n                ></simple-colors-picker>\n              "]);

    _templateObject13_e3774da02da211eaa247b36e11306899 = function _templateObject13_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject12_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject12_e3774da02da211eaa247b36e11306899 = function _templateObject12_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject11_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <paper-checkbox\n                  id=\"input\"\n                  .checked=\"", "\"\n                  @checked-changed=\"", "\"\n                  >", "</paper-checkbox\n                >\n              "]);

    _templateObject11_e3774da02da211eaa247b36e11306899 = function _templateObject11_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject10_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject10_e3774da02da211eaa247b36e11306899 = function _templateObject10_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject9_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <paper-checkbox\n                  id=\"input\"\n                  .checked=\"", "\"\n                  @checked-changed=\"", "\"\n                  >", "</paper-checkbox\n                >\n              "]);

    _templateObject9_e3774da02da211eaa247b36e11306899 = function _templateObject9_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject8_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject8_e3774da02da211eaa247b36e11306899 = function _templateObject8_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject7_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <paper-input\n                  id=\"input\"\n                  type=\"", "\"\n                  label=\"", "\"\n                  .value=\"", "\"\n                  @value-changed=\"", "\"\n                  auto-validate=\"\"\n                  pattern=\"", "\"\n                  required=\"", "\"\n                ></paper-input>\n              "]);

    _templateObject7_e3774da02da211eaa247b36e11306899 = function _templateObject7_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject6_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject6_e3774da02da211eaa247b36e11306899 = function _templateObject6_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject5_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <paper-textarea\n                  id=\"input\"\n                  label=\"", "\"\n                  .value=\"", "\"\n                  @value-changed=\"", "\"\n                  auto-validate=\"\"\n                  pattern=\"", "\"\n                  required=\"", "\"\n                ></paper-textarea>\n              "]);

    _templateObject5_e3774da02da211eaa247b36e11306899 = function _templateObject5_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject4_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject4_e3774da02da211eaa247b36e11306899 = function _templateObject4_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject3_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <span class=\"input-mixer-label\">", "</span>\n              <hax-context-item-menu\n                selected-value=\"", "\"\n                @selected-value-changed=\"", "\"\n                .icon=\"", "\"\n                id=\"input\"\n              >\n                <slot></slot>\n              </hax-context-item-menu>\n            "]);

    _templateObject3_e3774da02da211eaa247b36e11306899 = function _templateObject3_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject2_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style>\n          paper-textarea,\n          paper-input {\n            --paper-input-container: {\n              padding: 0;\n              font-size: 14px;\n            }\n            --paper-input-container-label-floating: {\n              color: var(--hax-color-text);\n              font-size: 12px;\n            }\n            --paper-input-container-underline: {\n              margin: 0;\n            }\n            --paper-input-container-color: var(--hax-color-text);\n            --paper-input-container-focus-color: var(--hax-color-text);\n            --paper-input-container-invalid-color: var(--hax-color-text);\n            --paper-input-container-input-color: var(--hax-color-text);\n            --paper-input-container-shared-input-style: {\n              color: var(--hax-color-text);\n              background: transparent;\n              margin: 0;\n              padding: 0;\n              line-height: 14px;\n              font-size: 14px;\n              outline: none;\n              border: none;\n            }\n          }\n        </style>\n      </custom-style>\n      <div class=\"wrapper\">\n        ", "\n        <span class=\"input-method\">\n          ", "\n          ", "\n          ", "\n          ", "\n          ", "\n        </span>\n        <paper-tooltip for=\"input\" position=\"top\" offset=\"14\">\n          ", "\n        </paper-tooltip>\n        <hax-context-item\n          id=\"updatebutton\"\n          icon=\"subdirectory-arrow-right\"\n          label=\"Update ", "\"\n          event-name=\"hax-update-tap\"\n        ></hax-context-item>\n      </div>\n    "]);

    _templateObject2_e3774da02da211eaa247b36e11306899 = function _templateObject2_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject_e3774da02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: 0;\n          border: none;\n          padding: 0;\n          border: 1px solid var(--hax-color-border-outline);\n        }\n        .wrapper {\n          background-color: #ffffff;\n          color: #222222;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n        hax-context-item {\n          margin: 0;\n        }\n        #elementoptions {\n          height: inherit;\n        }\n        #input {\n          color: var(--hax-color-text);\n        }\n        paper-checkbox {\n          --paper-checkbox-label-color: var(--hax-color-text);\n        }\n        paper-textarea,\n        paper-input {\n          height: 40px;\n          font-size: 14px;\n          margin-bottom: 6px;\n        }\n        .input-method {\n          color: var(--hax-color-text);\n          padding: 0 8px;\n          width: 80%;\n        }\n        #updatebutton {\n          outline: 1px solid black;\n        }\n        #updatebutton:hover {\n          border: none;\n        }\n      "]);

    _templateObject_e3774da02da211eaa247b36e11306899 = function _templateObject_e3774da02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  /**
   * `hax-input-mixer`
   * @customElement hax-input-mixer
   * A context menu that provides common custom-element based authoring options. While
   * trying to call for haxProperties which can automatically generate the buttons
   * required for populating input.
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
   */
  var HaxInputMixer =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxInputMixer, _LitElement);
    babelHelpers.createClass(HaxInputMixer, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_e3774da02da211eaa247b36e11306899())];
      }
    }]);

    function HaxInputMixer() {
      var _this;

      babelHelpers.classCallCheck(this, HaxInputMixer);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxInputMixer).call(this));
      _this.value = null;
      _this.options = {};
      _this.icon = "android";
      _this.inputMethod = null;
      _this.__inputtextarea = false;
      _this.__inputtextfield = false;
      _this.__inputboolean = false;
      _this.__inputcolorpicker = false;
      _this.__inputflipboolean = false;
      new Promise(function (res, rej) {
        return _require.default(["../../simple-colors/lib/simple-colors-picker.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-input/paper-textarea.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-input/paper-input.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-checkbox/paper-checkbox.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-tooltip/paper-tooltip.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxInputMixer, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_e3774da02da211eaa247b36e11306899(), this.__inputselect ? (0, _litElement.html)(_templateObject3_e3774da02da211eaa247b36e11306899(), this.label, this.__selectedValue, this.__selectedValueChanged, this.icon) : (0, _litElement.html)(_templateObject4_e3774da02da211eaa247b36e11306899()), this.__inputtextarea ? (0, _litElement.html)(_templateObject5_e3774da02da211eaa247b36e11306899(), this.label, this.value, this.valueChanged, this.validation, this.required) : (0, _litElement.html)(_templateObject6_e3774da02da211eaa247b36e11306899()), this.__inputtextfield ? (0, _litElement.html)(_templateObject7_e3774da02da211eaa247b36e11306899(), this.validationType, this.label, this.value, this.valueChanged, this.validation, this.required) : (0, _litElement.html)(_templateObject8_e3774da02da211eaa247b36e11306899()), this.__inputboolean ? (0, _litElement.html)(_templateObject9_e3774da02da211eaa247b36e11306899(), this.value, this.valueChanged, this.label) : (0, _litElement.html)(_templateObject10_e3774da02da211eaa247b36e11306899()), this.__inputflipboolean ? (0, _litElement.html)(_templateObject11_e3774da02da211eaa247b36e11306899(), this.value, this.valueChanged, this.label) : (0, _litElement.html)(_templateObject12_e3774da02da211eaa247b36e11306899()), this.__inputcolorpicker ? (0, _litElement.html)(_templateObject13_e3774da02da211eaa247b36e11306899(), this.label, this.value, this.valueChanged) : (0, _litElement.html)(_templateObject14_e3774da02da211eaa247b36e11306899()), this.description, this.label);
      }
    }, {
      key: "__selectedValueChanged",
      value: function __selectedValueChanged(e) {
        this.__selectedValue = e.detail.value;
      }
      /**
       * value changes but trap for null to ensure it's mapped to an empty string
       */

    }, {
      key: "valueChanged",
      value: function valueChanged(e) {
        if (babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.value = e.detail.value;
        } else {
          this.value = e.detail;
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "inputMethod") {
            _this2._inputMethodChanged(_this2[propName], oldValue);
          }
        });
      }
      /**
       * Ensure our weird data binding for templates is set initially.
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        // prime methods even though invisible most likely
        this._resetInputMethods();

        setTimeout(function () {
          _this3.addEventListener("hax-context-item-selected", _this3._haxContextOperation.bind(_this3));
        }, 0);
      }
      /**
       * Input method changes, allow our templates to rebind correctly.
       */

    }, {
      key: "_inputMethodChanged",
      value: function _inputMethodChanged(newValue, oldValue) {
        var _this4 = this;

        if (newValue != null) {
          var method = newValue;
          var methods = this.validInputMethods(); // ensure this is a valid method of input

          if (methods.includes(method)) {
            // set everything false to force a correct rebind of template tags
            this._resetInputMethods(); // this is weird looking, I know...


            this["__input" + method] = true; // hide the menu if it was open previously
            // need to paint into the slot so clean it out and repaint

            while (this.firstChild !== null) {
              this.removeChild(this.firstChild);
            } // select needs to inject settings into the slot


            if (method === "select" && babelHelpers.typeof(this.options) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              // this hits the key => value relationship correctly
              var item;

              for (var val in this.options) {
                item = document.createElement("paper-item");
                item.attributes.value = val;
                item.innerHTML = this.options[val];
                this.appendChild(item.cloneNode(true));
              }
            } // try and force cursor to focus on this element


            setTimeout(function () {
              if (_this4.shadowRoot.querySelector("#input") && typeof _this4.shadowRoot.querySelector("#input").hideMenu === "function") {
                _this4.shadowRoot.querySelector("#input").hideMenu();
              }

              _this4.shadowRoot.querySelector("#input").focus();
            }, 500);
          }
        }
      }
      /**
       * Validate input method.
       */

    }, {
      key: "validInputMethods",
      value: function validInputMethods() {
        var methods = ["flipboolean", "boolean", "select", "textfield", "textarea", "datepicker", "haxupload", "colorpicker", "iconpicker", "alt", "number", "code-editor", "array"];
        return methods;
      }
      /**
       * Reset all our meta attributes.
       */

    }, {
      key: "_resetInputMethods",
      value: function _resetInputMethods() {
        var methods = this.validInputMethods();

        for (var i = 0; i < methods.length; i++) {
          this["__input" + methods[i]] = false;
        }
      }
      /**
       * Respond to simple modifications.
       */

    }, {
      key: "_haxContextOperation",
      value: function _haxContextOperation(e) {
        var detail = e.detail; // support a simple insert event to bubble up or everything else

        switch (detail.eventName) {
          case "hax-update-tap":
            // minor dataType conversion for boolean
            if (this.inputMethod == "boolean") {
              this.value = this.value;
            } // opposite value for a flip-boolean
            else if (this.inputMethod == "flipboolean") {
                this.value = !this.value;
              } else if (this.inputMethod == "select") {
                var count = 0; // convert value into key value

                for (var val in this.options) {
                  if (count == this.__selectedValue) {
                    this.value = val;
                  }

                  count++;
                }
              }

            var mixer = {
              value: this.value,
              propertyToBind: this.propertyToBind,
              slotToBind: this.slotToBind
            }; // retarget event with all the guts of this item
            // this way we can do whatever we want in hax-body which is
            // basically notice that we got asked to do some data binding
            // and then actually do it and hide this item!!!!

            this.dispatchEvent(new CustomEvent("hax-input-mixer-update", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: {
                inputMixer: mixer
              }
            }));
            break;
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-input-mixer";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * value, where the magic happens.
           */
          value: {
            type: String
          },

          /**
           * Label for the input
           */
          label: {
            type: String,
            reflect: true
          },

          /**
           * Optional regex Validation for input and textarea fields
           */
          validation: {
            type: String,
            reflect: true
          },

          /**
           * Optional input type validation; use on input field
           */
          validationType: {
            type: String,
            reflect: true,
            attribute: "validation-type"
          },

          /**
           * Required; used on input and textarea fields
           */
          required: {
            type: Boolean,
            reflect: true
          },

          /**
           * Options for the input if it's a select of some form
           */
          options: {
            type: Object
          },

          /**
           * Optional icon that represents the item mixing.
           */
          icon: {
            type: String,
            reflect: true
          },

          /**
           * longer description for the input
           */
          description: {
            type: String,
            reflect: true
          },

          /**
           * longer description for the input
           */
          inputMethod: {
            type: String,
            reflect: true
          },

          /**
           * longer description for the input
           */
          propertyToBind: {
            type: String,
            reflect: true,
            attribute: "property-to-bind"
          },

          /**
           * slot to bind input back to
           */
          slotToBind: {
            type: String,
            reflect: true,
            attribute: "slot-to-bind"
          },
          __inputflipboolean: {
            type: Boolean
          },
          __inputcolorpicker: {
            type: Boolean
          },
          __inputboolean: {
            type: Boolean
          },
          __inputtextfield: {
            type: Boolean
          },
          __inputtextarea: {
            type: Boolean
          }
        };
      }
    }]);
    return HaxInputMixer;
  }(_litElement.LitElement);

  _exports.HaxInputMixer = HaxInputMixer;
  window.customElements.define(HaxInputMixer.tag, HaxInputMixer);
});