define(["exports", "require", "../../../lit-element/lit-element.js", "../../dl-behavior/dl-behavior.js", "../../utils/utils.js"], function (_exports, _require, _litElement, _dlBehavior, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxExportDialog = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_8f2a0530c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        #dialog {\n          z-index: 1000;\n        }\n        iron-icon:not(:defined),\n        paper-button:not(:defined),\n        paper-dialog:not(:defined) {\n          display: none;\n        }\n        .title {\n          position: relative;\n          padding: 16px;\n          outline: 0;\n          font-weight: 600;\n          text-align: left;\n          margin: 0;\n          font-size: 18px;\n          line-height: 18px;\n          font-family: \"Noto Serif\", serif;\n          background-color: var(--hax-color-menu-heading-bg, #eeeeee);\n          color: var(--hax-color-menu-heading-color, black);\n        }\n        .pref-container {\n          text-align: left;\n          padding: 16px;\n        }\n        #closedialog {\n          float: right;\n          top: 5px;\n          right: 0;\n          position: absolute;\n          padding: 4px;\n          margin: 0;\n          background-color: var(--hax-color-menu-heading-bg, #eeeeee);\n          color: var(--hax-color-menu-heading-color, black);\n          width: 40px;\n          height: 40px;\n          min-width: unset;\n        }\n        #textarea {\n          margin-bottom: 16px;\n          padding: 10px;\n          font-size: 10px;\n          resize: none;\n          width: 90%;\n          height: 40vh;\n          width: -webkit-fill-available;\n          background-color: transparent;\n          color: #eeeeee;\n          font-family: monospace;\n        }\n        paper-dialog {\n          min-width: 70vw;\n          min-height: 60vh;\n          background-color: #ffffff;\n          color: black;\n        }\n        #loading {\n          position: absolute;\n          margin: 0 auto;\n          width: 100%;\n        }\n      "]);

    _templateObject2_8f2a0530c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8f2a0530c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_8f2a0530c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-dialog\n        id=\"dialog\"\n        ?opened=\"", "\"\n        @opened-changed=\"", "\"\n      >\n        <h3 class=\"title\">\n          <iron-icon icon=\"icons:code\"></iron-icon> ", "\n        </h3>\n        <div style=\"height: 100%; overflow: auto;\" class=\"pref-container\">\n          <div id=\"wrapper\">\n            <textarea id=\"hiddentextarea\" hidden></textarea>\n            <hexagon-loader\n              size=\"small\"\n              id=\"loading\"\n              item-count=\"4\"\n              color=\"#0085ba\"\n              aria-roledescription=\"Loading\"\n            ></hexagon-loader>\n            <code-editor id=\"textarea\" title=\"\" theme=\"vs\"></code-editor>\n          </div>\n          <div id=\"buttons\" class=\"buttons\">\n            <hax-tray-button\n              label=\"Update source\"\n              color=\"red\"\n              ?color-meaning=\"", "\"\n              icon=\"icons:code\"\n              @click=\"", "\"\n            >\n            </hax-tray-button>\n            <hax-tray-button\n              @click=\"", "\"\n              icon=\"editor:format-clear\"\n              label=\"Word / GDoc clean up\"\n            >\n            </hax-tray-button>\n            <hax-tray-button\n              @click=\"", "\"\n              icon=\"icons:content-copy\"\n              label=\"Copy source\"\n            >\n            </hax-tray-button>\n            <hax-tray-button\n              label=\"Download\"\n              icon=\"icons:file-download\"\n              @click=\"", "\"\n            >\n            </hax-tray-button>\n            <hax-tray-button\n              @click=\"", "\"\n              label=\"HAXSchema\"\n              icon=\"hax:code-json\"\n            >\n            </hax-tray-button>\n          </div>\n        </div>\n        <paper-button id=\"closedialog\" @click=\"", "\">\n          <iron-icon icon=\"icons:cancel\" title=\"Close dialog\"></iron-icon>\n        </paper-button>\n      </paper-dialog>\n    "]);

    _templateObject_8f2a0530c96f11ea8be5e1d5fe7ec787 = function _templateObject_8f2a0530c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `hax-export-dialog`
   * @element hax-export-dialog
   * `Export dialog with all export options and settings provided.`
   */
  var HaxExportDialog =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxExportDialog, _winEventsElement);
    babelHelpers.createClass(HaxExportDialog, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8f2a0530c96f11ea8be5e1d5fe7ec787(), this.opened, this.openedChanged, this.title, true, this.importContent, this.scrubContent, this.selectBody, this.download, this.htmlToHaxElements, this.closeEvent);
      }
    }, {
      key: "openedChanged",
      value: function openedChanged(e) {
        // force close event to align data model if clicking away
        if (!e.detail.value && window.HaxStore.instance.openDrawer === this) {
          window.HaxStore.write("openDrawer", false, this);
        }
      }
    }, {
      key: "closeEvent",
      value: function closeEvent(e) {
        this.opened = false;
      }
    }, {
      key: "firstUpdated",

      /**
       * Attached to the DOM, now fire that we exist.
       */
      value: function firstUpdated() {
        // fire an event that this is a core piece of the system
        this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            piece: "haxExport",
            object: this
          }
        }));
      }
      /**
       * Store updated, sync.
       */

    }, {
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          if (babelHelpers.typeof(e.detail.value) === "object") {
            this[e.detail.property] = _objectSpread({}, e.detail.value);
          } else {
            this[e.detail.property] = e.detail.value;
          }
        }
      }
      /**
       * Download file.
       */

    }, {
      key: "download",
      value: function download(e) {
        var data = this.contentToFile(false);
        this.downloadFromData(data, "html", "my-new-code");
        window.HaxStore.toast("HTML content downloaded");
      }
      /**
       * Download file.
       */

    }, {
      key: "downloadfull",
      value: function downloadfull(e) {
        var data = this.contentToFile(true);
        this.downloadFromData(data, "html", "my-new-webpage");
        window.HaxStore.toast("Working offline copy downloaded");
      }
      /**
       * Import content into body area.
       */

    }, {
      key: "importContent",
      value: function importContent(e) {
        // import contents of this text area into the activeHaxBody
        var htmlBody = this.shadowRoot.querySelector("#textarea").value;
        window.HaxStore.toast("Content updated");
        window.HaxStore.instance.activeHaxBody.importContent(htmlBody);
        this.close();
      }
      /**
       * Scrub and then import content as if pasted from Word / GDocs
       */

    }, {
      key: "scrubContent",
      value: function scrubContent(e) {
        // import contents of this text area into the activeHaxBody
        var htmlBody = this.shadowRoot.querySelector("#textarea").value;
        window.HaxStore.toast("Scrubbed, Content updated");
        window.HaxStore.instance.activeHaxBody.importContent((0, _utils.stripMSWord)(htmlBody));
        this.close();
      }
      /**
       * selectBody
       */

    }, {
      key: "selectBody",
      value: function selectBody(e) {
        var hiddenarea = this.shadowRoot.querySelector("#hiddentextarea");
        hiddenarea.value = this.shadowRoot.querySelector("#textarea").value;
        hiddenarea.removeAttribute("hidden");
        hiddenarea.focus();
        hiddenarea.select();
        document.execCommand("copy");
        hiddenarea.setAttribute("hidden", "hidden");
        window.HaxStore.toast("Copied HTML content");
      }
      /**
       * HTML to HAX Elements
       */

    }, {
      key: "htmlToHaxElements",
      value: function htmlToHaxElements(e) {
        var elements = window.HaxStore.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);
        var str = JSON.stringify(elements, null, 2);
        var val = this.shadowRoot.querySelector("#textarea").value;
        var hiddenarea = this.shadowRoot.querySelector("#hiddentextarea");
        hiddenarea.removeAttribute("hidden");
        hiddenarea.value = str;
        hiddenarea.focus();
        hiddenarea.select();
        document.execCommand("copy");
        hiddenarea.value = val;
        hiddenarea.setAttribute("hidden", "hidden");
        window.HaxStore.toast("Copied hax elements to clipboard");
      }
      /**
       * Output entire thing as a file.
       */

    }, {
      key: "contentToFile",
      value: function contentToFile(full) {
        var body = window.HaxStore.instance.activeHaxBody.haxToContent();
        var content = body; // if you want full HTML headers or not

        if (full) {
          var elementList = window.HaxStore.instance.elementList; // @todo obviously not sustainable

          var url = "https://lrnwebcomponents.github.io/hax-body/components";
          content = "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\" />\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes\"\n            />\n            <title>hax-body demo</title>\n            <script src=\"".concat(url, "/@webcomponents/webcomponentsjs/webcomponents-loader.js\"></script>\n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n        </html>\n      ");
          var ignoreList = ["iframe", "a", "img", "hr", "p"];

          for (var index in elementList) {
            if (ignoreList.indexOf(index) === -1) {
              content += '<script type="module" src="' + url + "/" + index + "/" + index + '.js" />' + "\n";
            }
          }

          content += "</head><body>";
          content += body;
          content += "</body></html>";
        }

        return content;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_8f2a0530c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-export-dialog";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title when open.
           */
          title: {
            type: String
          },
          opened: {
            type: Boolean
          },

          /**
           * Access to the global properties object.
           */
          globalPreferences: {
            type: Object
          }
        };
      }
    }]);

    function HaxExportDialog() {
      var _this;

      babelHelpers.classCallCheck(this, HaxExportDialog);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxExportDialog).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated"
      };
      _this.title = "View page source";
      _this.fileTypes = {
        CSV: "text/csv",
        JSON: "text/json",
        PDF: "application/pdf",
        TXT: "text/plain",
        HTML: "text/html"
      };
      _this.opened = false;
      _this.globalPreferences = {};
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-dialog/paper-dialog.js"], res, rej);
      });
      return _this;
    }
    /**
     * open the dialog
     */


    babelHelpers.createClass(HaxExportDialog, [{
      key: "open",
      value: function open() {
        var _this2 = this;

        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../code-editor/code-editor.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../hexagon-loader/hexagon-loader.js"], res, rej);
        });
        this.opened = true;
        this.shadowRoot.querySelector("#textarea").editorValue = this.contentToFile(false);
        this.shadowRoot.querySelector("#buttons").style.display = "none";
        this.shadowRoot.querySelector("#loading").setAttribute("loading", "loading");
        this.shadowRoot.querySelector("#wrapper").appendChild(this.shadowRoot.querySelector("#textarea")); // silly but we need the code editor to figure itself out real quick as to sizing

        setTimeout(function () {
          _this2.shadowRoot.querySelector("#loading").removeAttribute("loading");

          _this2.shadowRoot.querySelector("#buttons").style.display = "unset";
        }, 800);
      }
      /**
       * close the dialog
       */

    }, {
      key: "close",
      value: function close() {
        this.opened = false;
      }
    }]);
    return HaxExportDialog;
  }((0, _utils.winEventsElement)((0, _dlBehavior.MtzFileDownloadBehaviors)(_litElement.LitElement)));

  _exports.HaxExportDialog = HaxExportDialog;
  window.customElements.define(HaxExportDialog.tag, HaxExportDialog);
});