define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js"], function (_exports, _require, _polymerElement, _renderStatus) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxToolbarMenu = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_7ebf1160b54611e9b6ba27231b6f684a() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          box-sizing: border-box;\n        }\n        paper-menu-button {\n          color: rgba(0, 0, 0, 0.66);\n          margin: 0;\n          padding: 0;\n          text-transform: none;\n          background-color: #ffffff;\n          display: flex;\n          min-width: 24px;\n        }\n\n        paper-menu-button .label {\n          font-size: 12px;\n          margin-top: 4px;\n        }\n\n        paper-menu-button .button-inner {\n          padding-top: 8px;\n          text-align: center;\n        }\n\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n\n        paper-tooltip {\n          pointer-events: none;\n        }\n        paper-listbox {\n          padding: 0;\n        }\n      </style>\n      <paper-menu-button>\n        <hax-toolbar-item\n          id=\"button\"\n          slot=\"dropdown-trigger\"\n          icon=\"[[icon]]\"\n          hidden$=\"[[!icon]]\"\n          class$=\"[[iconClass]]\"\n          tooltip=\"[[tooltip]]\"\n        ></hax-toolbar-item>\n        <paper-listbox\n          id=\"listbox\"\n          slot=\"dropdown-content\"\n          selected=\"{{selected}}\"\n        >\n          <slot></slot>\n        </paper-listbox>\n      </paper-menu-button>\n    "], ["\n      <style>\n        :host {\n          display: block;\n          box-sizing: border-box;\n        }\n        paper-menu-button {\n          color: rgba(0, 0, 0, 0.66);\n          margin: 0;\n          padding: 0;\n          text-transform: none;\n          background-color: #ffffff;\n          display: flex;\n          min-width: 24px;\n        }\n\n        paper-menu-button .label {\n          font-size: 12px;\n          margin-top: 4px;\n        }\n\n        paper-menu-button .button-inner {\n          padding-top: 8px;\n          text-align: center;\n        }\n\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n\n        paper-tooltip {\n          pointer-events: none;\n        }\n        paper-listbox {\n          padding: 0;\n        }\n      </style>\n      <paper-menu-button>\n        <hax-toolbar-item\n          id=\"button\"\n          slot=\"dropdown-trigger\"\n          icon=\"[[icon]]\"\n          hidden\\$=\"[[!icon]]\"\n          class\\$=\"[[iconClass]]\"\n          tooltip=\"[[tooltip]]\"\n        ></hax-toolbar-item>\n        <paper-listbox\n          id=\"listbox\"\n          slot=\"dropdown-content\"\n          selected=\"{{selected}}\"\n        >\n          <slot></slot>\n        </paper-listbox>\n      </paper-menu-button>\n    "]);

    _templateObject_7ebf1160b54611e9b6ba27231b6f684a = function _templateObject_7ebf1160b54611e9b6ba27231b6f684a() {
      return data;
    };

    return data;
  }

  var HaxToolbarMenu =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxToolbarMenu, _PolymerElement);

    function HaxToolbarMenu() {
      var _this;

      babelHelpers.classCallCheck(this, HaxToolbarMenu);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxToolbarMenu).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/device-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/hardware-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/social-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/av-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/maps-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-item/paper-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-listbox/paper-listbox.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-menu-button/paper-menu-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-toolbar-item.js"], res, rej);
      });

      _this.addEventListener("click", _this._menubuttonTap.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }

    babelHelpers.createClass(HaxToolbarMenu, [{
      key: "_selectChanged",

      /**
       * Select changed to trip button.
       */
      value: function _selectChanged(e) {
        this.shadowRoot.querySelector("#button").focus();
      }
      /**
       * Ensure menu is visible / default'ed.
       */

    }, {
      key: "_menubuttonTap",
      value: function _menubuttonTap(e) {
        this.shadowRoot.querySelector("#listbox").style.display = "inherit";

        if (this.resetOnSelect) {
          this.selected = "";
        }
      }
      /**
       * Ensure menu is hidden.
       */

    }, {
      key: "hideMenu",
      value: function hideMenu() {
        this.shadowRoot.querySelector("#listbox").style.display = "none";
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_7ebf1160b54611e9b6ba27231b6f684a());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-toolbar-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * corner
           */
          corner: {
            type: String,
            reflectToAttribute: true,
            value: ""
          },

          /**
           * Should we reset the selection after it is made
           */
          resetOnSelect: {
            type: Boolean,
            value: false
          },
          tooltip: {
            type: String,
            value: ""
          },
          tooltipDirection: {
            type: String,
            value: ""
          },
          selected: {
            type: String,
            value: "",
            notify: true,
            observer: "_selectChanged"
          }
        };
      }
    }]);
    return HaxToolbarMenu;
  }(_polymerElement.PolymerElement);

  _exports.HaxToolbarMenu = HaxToolbarMenu;
  window.customElements.define(HaxToolbarMenu.tag, HaxToolbarMenu);
});