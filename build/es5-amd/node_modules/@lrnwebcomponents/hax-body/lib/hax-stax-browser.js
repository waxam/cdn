define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/async.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _require, _polymerElement, _async, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxStaxBrowser = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_63932020add011e983121daa910d1ce6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        hax-stax-browser-item {\n          margin: 10px;\n          -webkit-transition: 0.3s all linear;\n          transition: 0.3s all linear;\n        }\n      </style>\n      <dom-repeat items=\"[[__staxList]]\" as=\"stax\">\n        <template>\n          <div class=\"stax-container\">\n            <hax-stax-browser-item\n              index=\"[[stax.index]]\"\n              title=\"[[stax.details.title]]\"\n              tag=\"[[stax.details.tag]]\"\n              image=\"[[stax.details.image]]\"\n              author=\"[[stax.details.author]]\"\n              teaser=\"[[stax.details.teaser]]\"\n              description=\"[[stax.details.description]]\"\n              examples=\"[[stax.details.examples]]\"\n              status=\"[[stax.details.status]]\"\n              stax=\"[[stax.stax]]\"\n            ></hax-stax-browser-item>\n          </div>\n        </template>\n      </dom-repeat>\n    "]);

    _templateObject_63932020add011e983121daa910d1ce6 = function _templateObject_63932020add011e983121daa910d1ce6() {
      return data;
    };

    return data;
  }

  /**
   * `hax-stax-browser`
   * `Select a stack / template to insert`
   * @microcopy - the mental model for this element
   * - stax - silly name for the general public when talking about custom elements and what it provides in the end.
   */
  var HaxStaxBrowser =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxStaxBrowser, _PolymerElement);

    function HaxStaxBrowser() {
      var _this;

      babelHelpers.classCallCheck(this, HaxStaxBrowser);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxStaxBrowser).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./hax-stax-browser-item.js"], res, rej);
      });
      document.body.addEventListener("hax-store-property-updated", _this._haxStorePropertyUpdated.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(HaxStaxBrowser, [{
      key: "_haxStorePropertyUpdated",

      /**
       * Store updated, sync.
       */
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          // make sure we set array's empty first to force a repaint of paths
          if (babelHelpers.typeof(this[e.detail.property]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this[e.detail.property] != null && babelHelpers.typeof(this[e.detail.property].length) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.set(e.detail.property, []);
          }

          this.set(e.detail.property, e.detail.value);
        }
      }
      /**
       * Notice staxList changing.
       */

    }, {
      key: "_staxListChanged",
      value: function _staxListChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("__staxList", newValue);
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_63932020add011e983121daa910d1ce6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-stax-browser";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The list of stax
           */
          staxList: {
            type: Array,
            observer: "_staxListChanged"
          },
          __staxList: {
            type: Array
          }
        };
      }
    }]);
    return HaxStaxBrowser;
  }(_polymerElement.PolymerElement);

  _exports.HaxStaxBrowser = HaxStaxBrowser;
  window.customElements.define(HaxStaxBrowser.tag, HaxStaxBrowser);
});