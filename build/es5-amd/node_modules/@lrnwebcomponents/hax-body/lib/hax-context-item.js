define(["exports", "require", "../../../lit-element/lit-element.js", "./hax-toolbar-item.js"], function (_exports, _require, _litElement, _haxToolbarItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxContextItem = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_82efef40b49511e9bfd4f79a8a57e0f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          height: 36px;\n          width: 36px;\n        }\n        :host([mini]) {\n          height: unset;\n          width: unset;\n        }\n        :host([menu]) {\n          display: flex;\n          width: 100%;\n        }\n      "]);

    _templateObject2_82efef40b49511e9bfd4f79a8a57e0f7 = function _templateObject2_82efef40b49511e9bfd4f79a8a57e0f7() {
      return data;
    };

    return data;
  }

  function _templateObject_82efef40b49511e9bfd4f79a8a57e0f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar-item\n        .disabled=\"", "\"\n        .light=\"", "\"\n        .mini=\"", "\"\n        id=\"button\"\n        icon=\"", "\"\n        .hidden=\"", "\"\n        icon-class=\"", "\"\n        @mousedown=\"", "\"\n        @click=\"", "\"\n        tooltip=\"", "\"\n        tooltip-direction=\"", "\"\n        .default=\"", "\"\n        .menu=\"", "\"\n      >\n        <slot></slot>\n      </hax-toolbar-item>\n    "]);

    _templateObject_82efef40b49511e9bfd4f79a8a57e0f7 = function _templateObject_82efef40b49511e9bfd4f79a8a57e0f7() {
      return data;
    };

    return data;
  }

  /**
   * `hax-context-item`
   * `A single button in the hax context menu for consistency.`
   * @microcopy - the mental model for this element
   * - context - menu in the page the user can select an item from, this being 1 option in that list
   * - button - an item that expresses what interaction you will have with the content.
   */
  var HaxContextItem =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxContextItem, _LitElement);

    function HaxContextItem() {
      var _this;

      babelHelpers.classCallCheck(this, HaxContextItem);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxContextItem).call(this));
      _this.light = false;
      _this.disabled = false;
      _this.mini = false;
      _this.menu = false;
      _this.direction = "top";
      _this.icon = "editor:text-fields";
      _this.iconClass = "";
      _this.label = "";
      _this.eventName = "button";
      _this.inputMethod = null;
      _this.propertyToBind = null;
      _this.slotToBind = null;
      _this.default = false;
      _this.value = "";
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/device-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/hardware-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/social-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/av-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/image-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/maps-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/neon-animation/neon-animation.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxContextItem, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_82efef40b49511e9bfd4f79a8a57e0f7(), this.disabled, this.light, this.mini, this.icon, !this.icon, this.iconClass, this._storeSelection, this._fireEvent, this.label, this.direction, this.default, this.menu);
      }
    }, {
      key: "_storeSelection",

      /**
       * Store the selection object. This helps fix issues with safari
       * and holding focus on non-text elements actually stealing
       * the selection priority, making it impossible to know what's
       * been selected if clicking a button to try and apply something to.
       */
      value: function _storeSelection(e) {
        window.HaxStore._tmpSelection = window.HaxStore.getSelection();
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            target: this,
            eventName: this.eventName,
            value: this.value
          }
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_82efef40b49511e9bfd4f79a8a57e0f7())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-context-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Light theme for toolbar item.
           */
          light: {
            type: Boolean
          },

          /**
           * disabled state
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * Mini theme for making things small and round.
           */
          mini: {
            type: Boolean
          },

          /**
           * Style to be presented in a menu
           */
          menu: {
            type: Boolean
          },

          /**
           * Direction for the tooltip
           */
          direction: {
            type: String
          },

          /**
           * Icon for the button.
           */
          icon: {
            type: String,
            reflect: true
          },

          /**
           * Icon for the button.
           */
          iconClass: {
            type: String,
            reflect: true,
            attribute: "icon-class"
          },

          /**
           * Label for the button.
           */
          label: {
            type: String,
            reflect: true
          },

          /**
           * Name of the event to bubble up as being tapped.
           * This can be used to tell other elements what was
           * clicked so it can take action appropriately.
           */
          eventName: {
            type: String,
            reflect: true,
            attribute: "event-name"
          },

          /**
           * Method of input to display when activated. This is
           * only used when triggered as part of haxProperties
           */
          inputMethod: {
            type: String,
            reflect: true,
            attribute: "input-method"
          },

          /**
           * Optional slot to bind this value to.
           */
          propertyToBind: {
            type: String,
            reflect: true,
            attribute: "property-to-bind"
          },

          /**
           * Optional slot to bind this value to.
           */
          slotToBind: {
            type: String,
            reflect: true,
            attribute: "slot-to-bind"
          },

          /**
           * Optional description for this item.
           */
          description: {
            type: String,
            reflect: true
          },

          /**
           * Is this button concidered a primary interaction
           */
          default: {
            type: Boolean
          },

          /**
           * an optional value to send along in the press. Allows for
           * reusing events more easily
           */
          value: {
            type: String
          }
        };
      }
    }]);
    return HaxContextItem;
  }(_litElement.LitElement);

  _exports.HaxContextItem = HaxContextItem;
  window.customElements.define(HaxContextItem.tag, HaxContextItem);
});