define(["exports", "../../../lit-element/lit-element.js", "./hax-toolbar-item.js", "../../simple-icon/lib/simple-icon-lite.js", "./hax-store.js"], function (_exports, _litElement, _haxToolbarItem, _simpleIconLite, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxContextItem = void 0;

  function _templateObject3_f628f6b0512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n        simple-icon-lite {\n          width: 10px;\n        }\n        :host([menu]) {\n          display: flex;\n        }\n      "]);

    _templateObject3_f628f6b0512d11eba3cb872b69c5cbbb = function _templateObject3_f628f6b0512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _templateObject2_f628f6b0512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral([" <simple-icon-lite icon=\"hax:expand-more\"></simple-icon-lite> "]);

    _templateObject2_f628f6b0512d11eba3cb872b69c5cbbb = function _templateObject2_f628f6b0512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _templateObject_f628f6b0512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar-item\n        ?simple=\"", "\"\n        ?disabled=\"", "\"\n        ?light=\"", "\"\n        ?circle=\"", "\"\n        ?danger=\"", "\"\n        ?action=\"", "\"\n        ?mini=\"", "\"\n        ?large=\"", "\"\n        id=\"button\"\n        .height=\"", "\"\n        icon=\"", "\"\n        ?hidden=\"", "\"\n        icon-class=\"", "\"\n        @mousedown=\"", "\"\n        @click=\"", "\"\n        tooltip=\"", "\"\n        tooltip-direction=\"", "\"\n        ?default=\"", "\"\n        ?menu=\"", "\"\n      >\n        ", "\n        <slot></slot>\n      </hax-toolbar-item>\n    "]);

    _templateObject_f628f6b0512d11eba3cb872b69c5cbbb = function _templateObject_f628f6b0512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-context-item`
   * @element hax-context-item
   * `A single button in the hax context menu for consistency.`
   * @microcopy - the mental model for this element
   * - context - menu in the page the user can select an item from, this being 1 option in that list
   * - button - an item that expresses what interaction you will have with the content.
   */
  var HaxContextItem = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxContextItem, _LitElement);

    var _super = _createSuper(HaxContextItem);

    function HaxContextItem() {
      var _this;

      babelHelpers.classCallCheck(this, HaxContextItem);
      _this = _super.call(this);
      _this.haxUIElement = true;
      _this.simple = false; // flag to use simple-icon for performance

      _this.danger = false;
      _this.light = false;
      _this.action = false;
      _this.large = false;
      _this.disabled = false;
      _this.more = false;
      _this.mini = false;
      _this.menu = false;
      _this.direction = "top";
      _this.icon = "editor:text-fields";
      _this.iconClass = "";
      _this.label = "";
      _this.eventName = "button";
      _this.inputMethod = null;
      _this.propertyToBind = null;
      _this.slotToBind = null;
      _this.default = false;
      _this.value = "";
      return _this;
    }

    babelHelpers.createClass(HaxContextItem, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_f628f6b0512d11eba3cb872b69c5cbbb(), this.simple, this.disabled, this.light, this.circle, this.danger, this.action, this.mini, this.large, this.height, this.icon, !this.icon, this.iconClass, this._storeSelection, this._fireEvent, this.label, this.direction, this.default, this.menu, this.more && !this.disabled ? (0, _litElement.html)(_templateObject2_f628f6b0512d11eba3cb872b69c5cbbb()) : "");
      }
    }, {
      key: "_storeSelection",

      /**
       * Store the selection object. This helps fix issues with safari
       * and holding focus on non-text elements actually stealing
       * the selection priority, making it impossible to know what's
       * been selected if clicking a button to try and apply something to.
       */
      value: function _storeSelection(e) {
        if (!this.disabled) {
          _haxStore.HAXStore._tmpSelection = _haxStore.HAXStore.getSelection();
        }
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        if (!this.disabled) {
          this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              target: this,
              eventName: this.eventName,
              value: this.value
            }
          }));
        }
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject3_f628f6b0512d11eba3cb872b69c5cbbb())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-context-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Light theme for toolbar item.
           */
          light: {
            type: Boolean
          },

          /**
           * use simple-icon for performance / transition off iron
           */
          simple: {
            type: Boolean,
            reflect: true
          },
          circle: {
            type: Boolean
          },

          /**
           * color shift for dangerous operation
           */
          danger: {
            type: Boolean
          },

          /**
           * more implies there's an action after pressing the button
           * so it'll put a visual indicator as such
           */
          more: {
            type: Boolean
          },
          action: {
            type: Boolean
          },
          height: {
            type: String
          },

          /**
           * disabled state
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * Mini theme for making things small and round.
           */
          mini: {
            type: Boolean
          },

          /**
           * Style to be presented in a menu
           */
          menu: {
            type: Boolean
          },

          /**
           * Direction for the tooltip
           */
          direction: {
            type: String
          },

          /**
           * Icon for the button.
           */
          icon: {
            type: String,
            reflect: true
          },

          /**
           * Icon for the button.
           */
          iconClass: {
            type: String,
            reflect: true,
            attribute: "icon-class"
          },

          /**
           * Label for the button.
           */
          label: {
            type: String,
            reflect: true
          },

          /**
           * Name of the event to bubble up as being tapped.
           * This can be used to tell other elements what was
           * clicked so it can take action appropriately.
           */
          eventName: {
            type: String,
            reflect: true,
            attribute: "event-name"
          },

          /**
           * Method of input to display when activated. This is
           * only used when triggered as part of haxProperties
           */
          inputMethod: {
            type: String,
            reflect: true,
            attribute: "input-method"
          },

          /**
           * Optional slot to bind this value to.
           */
          propertyToBind: {
            type: String,
            reflect: true,
            attribute: "property-to-bind"
          },

          /**
           * Optional slot to bind this value to.
           */
          slotToBind: {
            type: String,
            reflect: true,
            attribute: "slot-to-bind"
          },

          /**
           * Optional description for this item.
           */
          description: {
            type: String,
            reflect: true
          },
          large: {
            type: Boolean,
            reflect: true
          },

          /**
           * Is this button concidered a primary interaction
           */
          default: {
            type: Boolean
          },

          /**
           * an optional value to send along in the press. Allows for
           * reusing events more easily
           */
          value: {
            type: String
          }
        };
      }
    }]);
    return HaxContextItem;
  }(_litElement.LitElement);

  _exports.HaxContextItem = HaxContextItem;
  window.customElements.define(HaxContextItem.tag, HaxContextItem);
});