define(["exports","../../../lit-element/lit-element.js","./hax-toolbar-item.js"],function(_exports,_litElement,_haxToolbarItem){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxContextItem=void 0;function _templateObject3_e0cfb0e07b4c11ea86ab4b1f12e5c6b2(){var data=babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n        :host([menu]) {\n          display: flex;\n          width: 100%;\n        }\n      "]);_templateObject3_e0cfb0e07b4c11ea86ab4b1f12e5c6b2=function _templateObject3_e0cfb0e07b4c11ea86ab4b1f12e5c6b2(){return data};return data}function _templateObject2_e0cfb0e07b4c11ea86ab4b1f12e5c6b2(){var data=babelHelpers.taggedTemplateLiteral(["\n              <iron-icon icon=\"icons:expand-more\"></iron-icon>\n            "]);_templateObject2_e0cfb0e07b4c11ea86ab4b1f12e5c6b2=function _templateObject2_e0cfb0e07b4c11ea86ab4b1f12e5c6b2(){return data};return data}function _templateObject_e0cfb0e07b4c11ea86ab4b1f12e5c6b2(){var data=babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar-item\n        ?disabled=\"","\"\n        ?light=\"","\"\n        ?action=\"","\"\n        ?mini=\"","\"\n        ?large=\"","\"\n        id=\"button\"\n        height=\"","\"\n        icon=\"","\"\n        ?hidden=\"","\"\n        icon-class=\"","\"\n        @mousedown=\"","\"\n        @click=\"","\"\n        tooltip=\"","\"\n        tooltip-direction=\"","\"\n        ?default=\"","\"\n        ?menu=\"","\"\n      >\n        ","\n        <slot></slot>\n      </hax-toolbar-item>\n    "]);_templateObject_e0cfb0e07b4c11ea86ab4b1f12e5c6b2=function _templateObject_e0cfb0e07b4c11ea86ab4b1f12e5c6b2(){return data};return data}/**
 * `hax-context-item`
 * @element hax-context-item
 * `A single button in the hax context menu for consistency.`
 * @microcopy - the mental model for this element
 * - context - menu in the page the user can select an item from, this being 1 option in that list
 * - button - an item that expresses what interaction you will have with the content.
 */var HaxContextItem=/*#__PURE__*/function(_LitElement){babelHelpers.inherits(HaxContextItem,_LitElement);function HaxContextItem(){var _this;babelHelpers.classCallCheck(this,HaxContextItem);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(HaxContextItem).call(this));_this.light=!1;_this.action=!1;_this.large=!1;_this.disabled=!1;_this.more=!1;_this.mini=!1;_this.menu=!1;_this.direction="top";_this.icon="editor:text-fields";_this.iconClass="";_this.label="";_this.eventName="button";_this.inputMethod=null;_this.propertyToBind=null;_this.slotToBind=null;_this.default=!1;_this.value="";return _this}babelHelpers.createClass(HaxContextItem,[{key:"render",value:function render(){return(0,_litElement.html)(_templateObject_e0cfb0e07b4c11ea86ab4b1f12e5c6b2(),this.disabled,this.light,this.action,this.mini,this.large,this.height,this.icon,!this.icon,this.iconClass,this._storeSelection,this._fireEvent,this.label,this.direction,this.default,this.menu,this.more?(0,_litElement.html)(_templateObject2_e0cfb0e07b4c11ea86ab4b1f12e5c6b2()):"")}},{key:"_storeSelection",/**
   * Store the selection object. This helps fix issues with safari
   * and holding focus on non-text elements actually stealing
   * the selection priority, making it impossible to know what's
   * been selected if clicking a button to try and apply something to.
   */value:function _storeSelection(e){if(!this.disabled){window.HaxStore._tmpSelection=window.HaxStore.getSelection()}}/**
   * Fire an event that includes the eventName of what was just pressed.
   */},{key:"_fireEvent",value:function _fireEvent(e){if(!this.disabled){this.dispatchEvent(new CustomEvent("hax-context-item-selected",{bubbles:!0,cancelable:!0,composed:!0,detail:{target:this,eventName:this.eventName,value:this.value}}))}}}],[{key:"styles",get:function get(){return[(0,_litElement.css)(_templateObject3_e0cfb0e07b4c11ea86ab4b1f12e5c6b2())]}},{key:"tag",get:function get(){return"hax-context-item"}},{key:"properties",get:function get(){return{/**
       * Light theme for toolbar item.
       */light:{type:Boolean},/**
       * more implies there's an action after pressing the button
       * so it'll put a visual indicator as such
       */more:{type:Boolean},action:{type:Boolean},height:{type:String},/**
       * disabled state
       */disabled:{type:Boolean,reflect:!0},/**
       * Mini theme for making things small and round.
       */mini:{type:Boolean},/**
       * Style to be presented in a menu
       */menu:{type:Boolean},/**
       * Direction for the tooltip
       */direction:{type:String},/**
       * Icon for the button.
       */icon:{type:String,reflect:!0},/**
       * Icon for the button.
       */iconClass:{type:String,reflect:!0,attribute:"icon-class"},/**
       * Label for the button.
       */label:{type:String,reflect:!0},/**
       * Name of the event to bubble up as being tapped.
       * This can be used to tell other elements what was
       * clicked so it can take action appropriately.
       */eventName:{type:String,reflect:!0,attribute:"event-name"},/**
       * Method of input to display when activated. This is
       * only used when triggered as part of haxProperties
       */inputMethod:{type:String,reflect:!0,attribute:"input-method"},/**
       * Optional slot to bind this value to.
       */propertyToBind:{type:String,reflect:!0,attribute:"property-to-bind"},/**
       * Optional slot to bind this value to.
       */slotToBind:{type:String,reflect:!0,attribute:"slot-to-bind"},/**
       * Optional description for this item.
       */description:{type:String,reflect:!0},large:{type:Boolean,reflect:!0},/**
       * Is this button concidered a primary interaction
       */default:{type:Boolean},/**
       * an optional value to send along in the press. Allows for
       * reusing events more easily
       */value:{type:String}}}}]);return HaxContextItem}(_litElement.LitElement);_exports.HaxContextItem=HaxContextItem;window.customElements.define(HaxContextItem.tag,HaxContextItem)});