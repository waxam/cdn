define(["exports", "require", "../../../lit-element/lit-element.js", "../../dl-behavior/dl-behavior.js", "../../utils/utils.js", "./hax-store.js"], function (_exports, _require, _litElement, _dlBehavior, _utils, _haxStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxViewSource = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_441b0ef0577b11ebb66acdcaf78a5691() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          text-align: left;\n        }\n        #textarea {\n          margin: 0;\n          padding: 0;\n          font-size: 10px;\n          resize: none;\n          width: 100%;\n          height: 50vh;\n          width: -webkit-fill-available;\n          background-color: transparent;\n          color: #eeeeee;\n          font-family: monospace;\n        }\n        .buttons {\n          margin-top: 20px;\n          display: flex;\n          justify-content: space-evenly;\n          width: 100%;\n        }\n      "]);

    _templateObject2_441b0ef0577b11ebb66acdcaf78a5691 = function _templateObject2_441b0ef0577b11ebb66acdcaf78a5691() {
      return data;
    };

    return data;
  }

  function _templateObject_441b0ef0577b11ebb66acdcaf78a5691() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div id=\"wrapper\">\n        <textarea id=\"hiddentextarea\" hidden></textarea>\n        <code-editor\n          id=\"textarea\"\n          title=\"\"\n          theme=\"vs\"\n          language=\"html\"\n          font-size=\"12\"\n          word-wrap\n        ></code-editor>\n      </div>\n      <div class=\"buttons\">\n        <hax-tray-button\n          label=\"Update source\"\n          icon=\"icons:code\"\n          @click=\"", "\"\n        >\n        </hax-tray-button>\n        <hax-tray-button\n          @click=\"", "\"\n          icon=\"editor:format-clear\"\n          label=\"Word / GDoc clean up\"\n        >\n        </hax-tray-button>\n        <hax-tray-button\n          @click=\"", "\"\n          icon=\"icons:content-copy\"\n          label=\"Copy source\"\n        >\n        </hax-tray-button>\n        <hax-tray-button\n          label=\"Download\"\n          icon=\"icons:file-download\"\n          @click=\"", "\"\n        >\n        </hax-tray-button>\n        <hax-tray-button\n          @click=\"", "\"\n          label=\"HAXSchema\"\n          icon=\"hax:code-json\"\n        >\n        </hax-tray-button>\n      </div>\n    "]);

    _templateObject_441b0ef0577b11ebb66acdcaf78a5691 = function _templateObject_441b0ef0577b11ebb66acdcaf78a5691() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-export-dialog`
   * @element hax-export-dialog
   * `Export dialog with all export options and settings provided.`
   */
  var HaxViewSource = /*#__PURE__*/function (_MtzFileDownloadBehav) {
    babelHelpers.inherits(HaxViewSource, _MtzFileDownloadBehav);

    var _super = _createSuper(HaxViewSource);

    babelHelpers.createClass(HaxViewSource, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_441b0ef0577b11ebb66acdcaf78a5691(), this.importContent.bind(this), this.scrubContent.bind(this), this.selectBody.bind(this), this.download.bind(this), this.htmlToHaxElements.bind(this));
      }
    }, {
      key: "download",

      /**
       * Download file.
       */
      value: function download(e) {
        var data = this.contentToFile(false);
        this.downloadFromData(data, "html", "my-new-code");

        _haxStore.HAXStore.toast("HTML content downloaded");

        this.close();
      }
      /**
       * Download file.
       */

    }, {
      key: "downloadfull",
      value: function downloadfull(e) {
        var data = this.contentToFile(true);
        this.downloadFromData(data, "html", "my-new-webpage");

        _haxStore.HAXStore.toast("Working offline copy downloaded");

        this.close();
      }
      /**
       * Import content into body area.
       */

    }, {
      key: "importContent",
      value: function importContent(e) {
        // import contents of this text area into the activeHaxBody
        var htmlBody = this.shadowRoot.querySelector("#textarea").value;

        _haxStore.HAXStore.toast("Content updated");

        _haxStore.HAXStore.activeHaxBody.importContent(htmlBody);

        this.close();
      }
      /**
       * Scrub and then import content as if pasted from Word / GDocs
       */

    }, {
      key: "scrubContent",
      value: function scrubContent(e) {
        // import contents of this text area into the activeHaxBody
        var htmlBody = this.shadowRoot.querySelector("#textarea").value;

        _haxStore.HAXStore.toast("Scrubbed, Content updated");

        _haxStore.HAXStore.activeHaxBody.importContent((0, _utils.stripMSWord)(htmlBody));

        this.close();
      }
    }, {
      key: "close",
      value: function close() {
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * update content of the editor area
       */

    }, {
      key: "openSource",
      value: function openSource() {
        // import at this time so we can delay as long as possible
        // from needing to pull in monaco
        new Promise(function (res, rej) {
          return _require.default(["../../code-editor/code-editor.js"], res, rej);
        });
      }
      /**
       * selectBody
       */

    }, {
      key: "selectBody",
      value: function selectBody(e) {
        var hiddenarea = this.shadowRoot.querySelector("#hiddentextarea");
        hiddenarea.value = this.shadowRoot.querySelector("#textarea").value;
        hiddenarea.removeAttribute("hidden");
        hiddenarea.focus();
        hiddenarea.select();
        document.execCommand("copy");
        hiddenarea.setAttribute("hidden", "hidden");

        _haxStore.HAXStore.toast("Copied HTML content");

        this.close();
      }
      /**
       * HTML to HAX Elements
       */

    }, {
      key: "htmlToHaxElements",
      value: function htmlToHaxElements(e) {
        var elements = _haxStore.HAXStore.htmlToHaxElements(this.shadowRoot.querySelector("#textarea").value);

        var str = JSON.stringify(elements, null, 2);
        var val = this.shadowRoot.querySelector("#textarea").value;
        var hiddenarea = this.shadowRoot.querySelector("#hiddentextarea");
        hiddenarea.removeAttribute("hidden");
        hiddenarea.value = str;
        hiddenarea.focus();
        hiddenarea.select();
        document.execCommand("copy");
        hiddenarea.value = val;
        hiddenarea.setAttribute("hidden", "hidden");

        _haxStore.HAXStore.toast("Copied hax elements to clipboard");
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxViewSource.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxViewSource.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (_haxStore.HAXStore.activeHaxBody) {
          this.shadowRoot.querySelector("#textarea").editorValue = (0, _utils.formatHTML)(_haxStore.HAXStore.activeHaxBody.haxToContent());
        }
      }
      /**
       * Output entire thing as a file.
       */

    }, {
      key: "contentToFile",
      value: function contentToFile(full) {
        var body = _haxStore.HAXStore.activeHaxBody.haxToContent();

        var content = body; // if you want full HTML headers or not

        if (full) {
          content = "\n        <!DOCTYPE html>\n        <html lang=\"en\">\n          <head>\n            <meta charset=\"utf-8\" />\n            <meta\n              name=\"viewport\"\n              content=\"width=device-width, minimum-scale=1, initial-scale=1, user-scalable=yes\"\n            />\n            <title>hax-body demo</title>\n            <script>window.WCGlobalCDNPath=\"https://cdn.webcomponents.psu.edu/cdn/\"; </script> <script src=\"https://cdn.webcomponents.psu.edu/cdn/build.js\"></script> \n            <style>\n              body {\n                padding: 32px;\n              }\n            </style>\n          </head>\n          <body>\n          ".concat(body, "\n          </body>\n        </html>\n      ");
        }

        return content;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_441b0ef0577b11ebb66acdcaf78a5691())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-view-source";
      }
    }]);

    function HaxViewSource() {
      var _this;

      babelHelpers.classCallCheck(this, HaxViewSource);
      _this = _super.call(this);
      _this.fileTypes = {
        CSV: "text/csv",
        JSON: "text/json",
        PDF: "application/pdf",
        TXT: "text/plain",
        HTML: "text/html"
      };
      return _this;
    }

    return HaxViewSource;
  }((0, _dlBehavior.MtzFileDownloadBehaviors)(_litElement.LitElement));

  _exports.HaxViewSource = HaxViewSource;
  window.customElements.define(HaxViewSource.tag, HaxViewSource);
});