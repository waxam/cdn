define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _require, _polymerElement, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxBloxBrowser = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_803f4e30b49511e9bfd4f79a8a57e0f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        hax-blox-browser-item {\n          margin: 10px;\n          -webkit-transition: 0.3s all linear;\n          transition: 0.3s all linear;\n        }\n      </style>\n      <dom-repeat items=\"[[__bloxList]]\" as=\"blox\">\n        <template>\n          <div class=\"blox-container\">\n            <hax-blox-browser-item\n              index=\"[[blox.index]]\"\n              layout=\"[[blox.details.layout]]\"\n              title=\"[[blox.details.title]]\"\n              tag=\"[[blox.details.tag]]\"\n              icon=\"[[blox.details.icon]]\"\n              author=\"[[blox.details.author]]\"\n              teaser=\"[[blox.details.teaser]]\"\n              description=\"[[blox.details.description]]\"\n              examples=\"[[blox.details.examples]]\"\n              status=\"[[blox.details.status]]\"\n              blox=\"[[blox.blox]]\"\n            ></hax-blox-browser-item>\n          </div>\n        </template>\n      </dom-repeat>\n    "]);

    _templateObject_803f4e30b49511e9bfd4f79a8a57e0f7 = function _templateObject_803f4e30b49511e9bfd4f79a8a57e0f7() {
      return data;
    };

    return data;
  }

  /**
   * `hax-blox-browser`
   * `List of layout blox to select from`
   * @microcopy - the mental model for this element
   * - blox - silly name for the general public when talking about custom elements and what it provides in the end.
   */
  var HaxBloxBrowser =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxBloxBrowser, _PolymerElement);

    function HaxBloxBrowser() {
      var _this;

      babelHelpers.classCallCheck(this, HaxBloxBrowser);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxBloxBrowser).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./hax-blox-browser-item.js"], res, rej);
      });
      document.body.addEventListener("hax-store-property-updated", _this._haxStorePropertyUpdated.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(HaxBloxBrowser, [{
      key: "_haxStorePropertyUpdated",

      /**
       * Store updated, sync.
       */
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          // make sure we set array's empty first to force a repaint of paths
          if (babelHelpers.typeof(this[e.detail.property]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this[e.detail.property] != null && babelHelpers.typeof(this[e.detail.property].length) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.set(e.detail.property, []);
          }

          this.set(e.detail.property, e.detail.value);
        }
      }
      /**
       * Notice bloxList changing.
       */

    }, {
      key: "_bloxListChanged",
      value: function _bloxListChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.set("__bloxList", newValue);
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_803f4e30b49511e9bfd4f79a8a57e0f7());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-blox-browser";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The list of blox
           */
          bloxList: {
            type: Array,
            observer: "_bloxListChanged"
          },
          __bloxList: {
            type: Array
          }
        };
      }
    }]);
    return HaxBloxBrowser;
  }(_polymerElement.PolymerElement);

  _exports.HaxBloxBrowser = HaxBloxBrowser;
  window.customElements.define(HaxBloxBrowser.tag, HaxBloxBrowser);
});