define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../simple-colors/simple-colors.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_renderStatus,_polymerDom,_simpleColors,_haxSharedStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HAXPanelItem=void 0;_require=babelHelpers.interopRequireWildcard(_require);function _templateObject_1fb1ae40984e11e98da46dc60ea6a0fa(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style include=\"hax-shared-styles\">\n        :host {\n          display: inline-flex;\n        }\n        paper-button {\n          height: 48px;\n          line-height: 48px;\n          width: 48px;\n          overflow: hidden;\n          margin: 0;\n          text-transform: none;\n          background-color: var(--hax-color-bg-accent);\n          color: var(--hax-color-accent-text);\n          display: flex;\n          padding: 8px;\n          border-radius: 50%;\n          border: 1px solid var(--hax-color-bg-accent);\n          min-width: unset;\n          --paper-button-ink-color: var(--hax-color-accent1);\n        }\n        paper-button .button-inner {\n          text-align: center;\n          margin: 0 auto;\n        }\n        paper-button iron-icon {\n          height: 24px;\n          width: 24px;\n          display: inline-flex;\n        }\n        paper-button:hover,\n        paper-button:focus {\n          color: var(--hax-color-text-active);\n          border: 1px solid var(--hax-color-accent1);\n        }\n\n        paper-button[disabled] {\n          opacity: 0.5;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n        :host([dark]) paper-button {\n          border: solid 2px #000000;\n          background-color: #000000 !important;\n          color: var(--hax-color-bg-accent);\n        }\n        :host([large]) paper-button {\n          height: 40px;\n          width: 40px;\n        }\n        :host([dark]) paper-button:hover iron-icon,\n        :host([dark]) paper-button:focus iron-icon {\n          color: #ffffff !important;\n        }\n        :host([dark]) paper-button:hover {\n          border: solid #0085ba 1px;\n        }\n        paper-tooltip {\n          --paper-tooltip-background: #000000;\n          --paper-tooltip-opacity: 1;\n          --paper-tooltip-text-color: #ffffff;\n          --paper-tooltip-delay-in: 0;\n          --paper-tooltip: {\n            border-radius: 0;\n          }\n        }\n      </style>\n      <paper-button raised id=\"button\" disabled=\"[[disabled]]\">\n        <div class=\"button-inner\"><iron-icon icon=\"[[icon]]\"></iron-icon></div>\n      </paper-button>\n      <paper-tooltip\n        animation-delay=\"0\"\n        for=\"button\"\n        position=\"bottom\"\n        offset=\"10\"\n      >\n        [[label]]\n      </paper-tooltip>\n    "]);_templateObject_1fb1ae40984e11e98da46dc60ea6a0fa=function _templateObject_1fb1ae40984e11e98da46dc60ea6a0fa(){return data};return data}/**
 * `hax-panel-item`
 * `A single button in the hax panel for consistency.`
 * @microcopy - the mental model for this element
 * - panel - the flyout from left or right side that has elements that can be placed
 * - button - an item that expresses what interaction you will have with the content.
 */var HAXPanelItem=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(HAXPanelItem,_PolymerElement);function HAXPanelItem(){var _this;babelHelpers.classCallCheck(this,HAXPanelItem);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(HAXPanelItem).call(this));new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-button/paper-button.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-tooltip/paper-tooltip.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/iron-icon/iron-icon.js"],res,rej)});return _this}babelHelpers.createClass(HAXPanelItem,[{key:"ready",value:function ready(){babelHelpers.get(babelHelpers.getPrototypeOf(HAXPanelItem.prototype),"ready",this).call(this);(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("click",this._fireEvent)})}/**
   * Fire an event that includes the eventName of what was just pressed.
   */},{key:"_fireEvent",value:function _fireEvent(e){var normalizedEvent=(0,_polymerDom.dom)(e),local=normalizedEvent.localTarget;this.dispatchEvent(new CustomEvent("hax-item-selected",{bubbles:!0,cancelable:!1,composed:!0,detail:{target:local,value:this.value,eventName:this.eventName}}))}}],[{key:"properties",get:function get(){return{/**
       * Variant on button style for light
       */light:{type:Boolean,reflectToAttribute:!0},/**
       * Voice command to append for things that support data-voicecommand.
       */voiceCommand:{type:String},/**
       * Support for disabled state buttons
       */disabled:{type:Boolean,value:!1},/**
       * If we should apply a rounded edge to the button, opposite
       * to the direction that it's came from.
       */edged:{type:String,value:"",reflectToAttribute:!0},/**
       * Icon for the button.
       */icon:{type:String,value:"editor:text-fields",reflectToAttribute:!0},/**
       * Label for the button.
       */label:{type:String,value:"editor:text-fields",reflectToAttribute:!0},/**
       * Name of the event to bubble up as being tapped.
       * This can be used to tell other elements what was
       * clicked so it can take action appropriately.
       */eventName:{type:String,value:"button",reflectToAttribute:!0},/**
       * Possible value to send along as well with the event.
       * Can help with normalized event names / selection of
       * options.
       */value:{type:String,value:"",reflectToAttribute:!0}}}},{key:"tag",get:function get(){return"hax-panel-item"}},{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_1fb1ae40984e11e98da46dc60ea6a0fa())}}]);return HAXPanelItem}(_polymerElement.PolymerElement);_exports.HAXPanelItem=HAXPanelItem;customElements.define(HAXPanelItem.tag,HAXPanelItem)});