define(["exports", "../../../lit-element/lit-element.js", "../../../@polymer/paper-button/paper-button.js", "../../simple-tooltip/simple-tooltip.js", "../../../@polymer/iron-icon/iron-icon.js"], function (_exports, _litElement, _paperButton, _simpleTooltip, _ironIcon) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXPanelItem = void 0;

  function _templateObject2_8f3f13d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n        paper-button {\n          height: 48px;\n          line-height: 48px;\n          width: 48px;\n          overflow: hidden;\n          margin: 0;\n          text-transform: none;\n          background-color: var(--hax-panel-item-bg);\n          color: var(--hax-panel-item-text);\n          display: flex;\n          padding: 8px;\n          border-radius: 50%;\n          border: 1px solid var(--hax-panel-item-border-color);\n          min-width: unset;\n          --paper-button-ink-color: var(--hax-panel-item-ink, black);\n        }\n        paper-button .button-inner {\n          text-align: center;\n          margin: 0 auto;\n        }\n        paper-button iron-icon {\n          height: 24px;\n          width: 24px;\n          display: inline-flex;\n        }\n        paper-button:hover,\n        paper-button:focus {\n          color: var(--hax-panel-item-active);\n          border: 1px solid var(--hax-panel-item-active-border-color);\n        }\n\n        paper-button[disabled] {\n          opacity: 0.5;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n        :host([dark]) paper-button {\n          border: solid 2px #000000;\n          background-color: #000000 !important;\n          color: var(--hax-color-bg-accent);\n        }\n        :host([dark]) paper-button:hover iron-icon,\n        :host([dark]) paper-button:focus iron-icon {\n          color: #ffffff !important;\n        }\n        :host([dark]) paper-button:hover {\n          border: solid #0085ba 1px;\n        }\n        simple-tooltip {\n          font-size: 16px;\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-duration-in: 100ms;\n          --simple-tooltip-duration-out: 0;\n          --simple-tooltip-border-radius: 0;\n          --simple-tooltip-font-size: 14px;\n        }\n      "]);

    _templateObject2_8f3f13d0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8f3f13d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8f3f13d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-button raised id=\"button\" .disabled=\"", "\">\n        <div class=\"button-inner\">\n          <iron-icon icon=\"", "\"></iron-icon>\n        </div>\n      </paper-button>\n      <simple-tooltip for=\"button\" position=\"bottom\" offset=\"10\">\n        ", "\n      </simple-tooltip>\n    "]);

    _templateObject_8f3f13d0c96f11ea8be5e1d5fe7ec787 = function _templateObject_8f3f13d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `hax-panel-item`
   * @element hax-panel-item
   * `A single button in the hax panel for consistency.`
   * @microcopy - the mental model for this element
   * - panel - the flyout from left or right side that has elements that can be placed
   * - button - an item that expresses what interaction you will have with the content.
   */
  var HAXPanelItem =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HAXPanelItem, _LitElement);

    function HAXPanelItem() {
      var _this;

      babelHelpers.classCallCheck(this, HAXPanelItem);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXPanelItem).call(this));
      _this.disabled = false;
      _this.edged = "";
      _this.icon = "editor:text-fields";
      _this.label = "editor:text-fields";
      _this.eventName = "button";
      _this.value = "";
      setTimeout(function () {
        _this.addEventListener("click", _this._fireEvent);
      }, 0);
      return _this;
    }

    babelHelpers.createClass(HAXPanelItem, [{
      key: "render",

      /**
       * LitElement render
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_8f3f13d0c96f11ea8be5e1d5fe7ec787(), this.disabled, this.icon, this.label);
      }
      /**
       * LitElement properties changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "voiceCommand") {
            _this2.dispatchEvent(new CustomEvent("hax-add-voice-command", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: {
                command: ":name: " + _this2[propName],
                context: _this2,
                callback: "click"
              }
            }));
          }
        });
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        if (!this.disabled) {
          this.dispatchEvent(new CustomEvent("hax-item-selected", {
            bubbles: true,
            cancelable: false,
            composed: true,
            detail: {
              target: this,
              value: this.value,
              eventName: this.eventName
            }
          }));
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * Variant on button style for light
           */
          light: {
            type: Boolean,
            reflect: true
          },

          /**
           * Voice command to append for things that support data-voicecommand.
           */
          voiceCommand: {
            type: String,
            attribute: "voice-command"
          },

          /**
           * Support for disabled state buttons
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * If we should apply a rounded edge to the button, opposite
           * to the direction that it's came from.
           */
          edged: {
            type: String,
            reflect: true
          },

          /**
           * Icon for the button.
           */
          icon: {
            type: String,
            reflect: true
          },

          /**
           * Label for the button.
           */
          label: {
            type: String,
            reflect: true
          },

          /**
           * Name of the event to bubble up as being tapped.
           * This can be used to tell other elements what was
           * clicked so it can take action appropriately.
           */
          eventName: {
            type: String,
            reflect: true,
            attribute: "event-name"
          },

          /**
           * Possible value to send along as well with the event.
           * Can help with normalized event names / selection of
           * options.
           */
          value: {
            type: String,
            reflect: true
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-panel-item";
      }
    }, {
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_8f3f13d0c96f11ea8be5e1d5fe7ec787())];
      }
    }]);
    return HAXPanelItem;
  }(_litElement.LitElement);

  _exports.HAXPanelItem = HAXPanelItem;
  customElements.define(HAXPanelItem.tag, HAXPanelItem);
});