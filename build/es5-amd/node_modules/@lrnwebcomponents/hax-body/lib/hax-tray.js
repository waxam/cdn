define(["exports", "require", "../../../lit-element/lit-element.js", "../../utils/utils.js", "../../a11y-collapse/lib/a11y-collapse-group.js", "../../a11y-collapse/a11y-collapse.js", "../../hax-body-behaviors/lib/HAXFields.js"], function (_exports, _require, _litElement, _utils, _a11yCollapseGroup, _a11yCollapse, _HAXFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTray = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject4_8ff06270c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          font-family: var(--simple-fields-font-family, sans-serif);\n          display: block;\n          z-index: 1000;\n          position: absolute;\n          transition: 0.2s all ease-in-out;\n          --hax-contextual-action-text-color: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-contextual-action-color: var(\n            --simple-colors-default-theme-cyan-7,\n            #009dc7\n          );\n          --hax-contextual-action-hover-color: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --a11y-tabs-focus-color: var(\n            --hax-contextual-action-hover-color,\n            var(--simple-colors-default-theme-cyan-8, #007999)\n          );\n        }\n        .wrapper {\n          color: var(--hax-color-text, black);\n          position: fixed;\n          top: 0;\n          background-color: transparent;\n          font-size: 20px;\n          width: var(---hax-tray-width, 300px);\n          transition: 0.2s all ease-in-out;\n          opacity: 0;\n          visibility: hidden;\n          pointer-events: none;\n        }\n        :host([edit-mode]) .wrapper {\n          opacity: 1;\n          visibility: visible;\n          right: 0;\n          pointer-events: all;\n        }\n        #addcollapse {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-purple-8,\n            #8a009b\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-purple-8,\n            #8a009b\n          );\n        }\n        #settingscollapse {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-green-8,\n            #00762e\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-green-8,\n            #00762e\n          );\n        }\n        #searchapps {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n        }\n        #templateslayouts {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-pink-8,\n            #b80042\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-pink-8,\n            #b80042\n          );\n        }\n        :host([edit-mode][collapsed]) a11y-collapse-group {\n          right: -100vw;\n        }\n        :host([element-align=\"left\"]) .wrapper {\n          left: -1000px;\n        }\n        :host([element-align=\"right\"]) .wrapper {\n          right: -1000px;\n        }\n        :host([edit-mode][element-align=\"left\"]) .wrapper {\n          left: 0;\n        }\n        :host([edit-mode][element-align=\"right\"]) .wrapper {\n          right: 0;\n        }\n        :host([edit-mode][element-align=\"left\"]) #toggle-tray-size {\n          --hax-tray-button-rotate: rotate(-180deg);\n        }\n        /** default is right so lets support left too */\n        :host([edit-mode][element-align=\"left\"][collapsed])\n          a11y-collapse-group {\n          right: unset;\n          left: -100vw;\n        }\n        :host([edit-mode][element-align=\"left\"]) .ops,\n        :host([edit-mode][element-align=\"left\"]) .quick,\n        :host([edit-mode][element-align=\"left\"]) .quick-buttons {\n          flex-direction: row-reverse;\n        }\n        :host([element-align=\"left\"]) #toggle-element-align {\n          --hax-tray-button-rotate: rotate(-90deg) scaleX(-1) !important;\n        }\n        :host([element-align=\"right\"]) #toggle-element-align {\n          --hax-tray-button-rotate: rotate(90deg) !important;\n        }\n        hax-tray-button,\n        a11y-collapse,\n        a11y-collapse-group,\n        hax-app-browser,\n        hax-gizmo-browser {\n          transition: 0.2s all ease-in-out;\n          opacity: 1;\n          visibility: visible;\n        }\n        hax-tray-button:not(:defined),\n        a11y-collapse:not(:defined),\n        a11y-collapse-group:not(:defined),\n        hax-app-browser:not(:defined),\n        hax-gizmo-browser:not(:defined) {\n          opacity: 0;\n          visibility: hidden;\n        }\n        *[hidden] {\n          display: none;\n        }\n        :host([element-align=\"right\"]) a11y-collapse-group {\n          margin: 0 -350px 0 0;\n          right: 0;\n        }\n        :host([element-align=\"left\"]) a11y-collapse-group {\n          margin: 0 0 0 -350px;\n          left: 0;\n        }\n        :host([edit-mode][element-align=\"left\"]) a11y-collapse-group,\n        :host([edit-mode][element-align=\"right\"]) a11y-collapse-group {\n          position: absolute;\n          margin: 0;\n          top: 32;\n        }\n        a11y-collapse-group {\n          position: fixed;\n          font-size: 16px;\n          margin: 0;\n          background-color: var(--simple-colors-default-theme-grey-1, #fff);\n        }\n        a11y-collapse {\n          font-size: 12px;\n          font-weight: normal;\n          --a11y-tabs-content-padding: 0;\n          width: calc(var(---hax-tray-width, 300px) - 2px);\n          --a11y-collapse-heading-color: var(\n            --simple-colors-default-theme-grey-7,\n            #666\n          );\n          --a11y-collapse-heading-background-color: var(\n            --simple-colors-default-theme-grey-2,\n            #eee\n          );\n          --a11y-collapse-padding-top: 0px;\n          --a11y-collapse-padding-right: 0px;\n          --a11y-collapse-padding-bottom: 0px;\n          --a11y-collapse-padding-left: 0px;\n          --a11y-collapse-border: 1px solid\n            var(--simple-colors-default-theme-grey-3, #dddddd);\n          --a11y-collapse-border-between: 1px solid\n            var(--simple-colors-default-theme-grey-3, #dddddd);\n          transition: all 0.5ms ease-in-out;\n          border-left: 3px solid\n            var(--simple-colors-default-theme-grey-3, #dddddd);\n        }\n        a11y-collapse:not([expanded]) div[slot=\"content\"] {\n          display: none;\n        }\n        a11y-collapse div[slot=\"heading\"] {\n          cursor: pointer;\n          font-size: 16px;\n        }\n        a11y-collapse:hover {\n          --a11y-collapse-heading-color: var(\n            --hax-tray-panel-accent,\n            var(--simple-colors-default-theme-grey-12, #000)\n          );\n          --a11y-collapse-heading-background-color: var(\n            --hax-tray-panel-accent-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n        }\n        a11y-collapse:hover {\n          border-left: 3px solid\n            var(\n              --hax-tray-panel-accent,\n              var(--hax-contextual-action-hover-color)\n            );\n        }\n        a11y-collapse[expanded],\n        a11y-collapse[expanded]:hover {\n          --a11y-collapse-heading-color: var(\n            --hax-tray-panel-accent,\n            var(--hax-contextual-action-hover-color)\n          );\n          --a11y-collapse-heading-background-color: var(\n            --hax-tray-panel-accent-text,\n            var(--simple-colors-default-theme-grey-1)\n          );\n        }\n        a11y-collapse[disabled] {\n          --a11y-collapse-heading-color: var(\n            --simple-colors-default-theme-grey-7,\n            #666\n          ) !important;\n          --a11y-collapse-heading-background-color: var(\n            --simple-colors-default-theme-grey-2,\n            #eee\n          ) !important;\n          cursor: not-allowed;\n        }\n        a11y-collapse[disabled] div[slot=\"heading\"] {\n          cursor: not-allowed !important;\n          opacity: 0.6;\n        }\n        #settingscollapse div[slot=\"content\"] {\n          padding: 0;\n          margin: 0;\n        }\n        a11y-collapse[expanded] div[slot=\"content\"] {\n          min-height: 300px;\n          max-height: 70vh;\n          overflow: auto;\n        }\n        iron-icon {\n          margin-right: 8px;\n        }\n        .quick-buttons {\n          width: var(---hax-tray-width, 300px);\n          display: flex;\n          color: var(--simple-colors-default-theme-grey-12, #000);\n          background-color: var(--simple-colors-default-theme-grey-4, #bbb);\n          justify-content: space-between;\n          transition: all 0.5ms ease-in-out;\n        }\n        .quick-buttons hax-tray-button {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n        }\n        #button,\n        .quick-buttons #haxsavebutton {\n          --hax-quick-button-accent: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-cyan-7,\n            #009dc7\n          );\n          --hax-quick-button-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n        }\n        .quick-buttons #haxcancelbutton {\n          --hax-quick-button-accent: var(\n            --simple-colors-default-theme-red-8,\n            #ac0000\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-red-7,\n            #ee0000\n          );\n          --hax-quick-button-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n        }\n        .quick-buttons .ops {\n          display: flex;\n          justify-content: flex-start;\n        }\n        .quick-buttons .quick {\n          display: flex;\n          justify-content: flex-end;\n        }\n        div[slot=\"heading\"] {\n          margin: 0;\n          padding: 10px;\n        }\n        :host([element-align=\"right\"]) #button {\n          right: 0;\n        }\n        :host([element-align=\"left\"]) #button {\n          left: 0;\n        }\n\n        #button {\n          position: fixed;\n          top: 0;\n          visibility: visible;\n          z-index: 1000;\n          margin: 0;\n        }\n        :host([edit-mode]) #button {\n          visibility: hidden;\n          opacity: 0;\n        }\n        #button:hover {\n          opacity: 1;\n        }\n        .active-op-name {\n          display: inline-flex;\n          vertical-align: text-bottom;\n          padding: 4px 2px;\n          max-width: 60px;\n          font-size: 11px;\n          overflow: hidden;\n          text-align: center;\n          color: white;\n        }\n        /** This is mobile layout for controls */\n        @media screen and (max-width: 800px) {\n          .ops,\n          .quick,\n          .quick-buttons {\n            flex-direction: row-reverse;\n          }\n          .wrapper {\n            top: 0;\n            left: 0;\n            right: 0;\n            margin: 0 !important;\n          }\n          .quick-buttons {\n            position: relative;\n            z-index: 1;\n          }\n          #toggle-element-align {\n            display: none;\n          }\n          #toggle-tray-size {\n            --hax-tray-button-rotate: rotate(-90deg) !important;\n          }\n          :host([edit-mode][collapsed]) a11y-collapse-group {\n            top: -200vh;\n            left: unset !important;\n            right: unset !important;\n          }\n        }\n        @media screen and (max-width: 600px) {\n          :host([edit-mode]) .hide-small {\n            display: none;\n          }\n        }\n      "]);

    _templateObject4_8ff06270c96f11ea8be5e1d5fe7ec787 = function _templateObject4_8ff06270c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_8ff06270c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                  <hax-tray-button\n                    mini\n                    @click=\"", "\"\n                    icon=\"save\"\n                    id=\"haxsavebutton\"\n                    label=\"", "\"\n                    event-name=\"save\"\n                    voice-command=\"save (content)(page)\"\n                    color-meaning\n                  ></hax-tray-button>\n                  <hax-tray-button\n                    mini\n                    icon=\"cancel\"\n                    id=\"haxcancelbutton\"\n                    label=\"Cancel\"\n                    event-name=\"cancel\"\n                    voice-command=\"cancel\"\n                    color-meaning\n                  ></hax-tray-button>\n                "]);

    _templateObject3_8ff06270c96f11ea8be5e1d5fe7ec787 = function _templateObject3_8ff06270c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject2_8ff06270c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <hax-tray-button\n              voice-command=\"edit page\"\n              .data-opened=\"", "\"\n              @click=\"", "\"\n              icon=\"create\"\n              id=\"button\"\n              label=\"", "\"\n            ></hax-tray-button>\n          "]);

    _templateObject2_8ff06270c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8ff06270c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8ff06270c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <div class=\"wrapper\">\n        <div class=\"quick-buttons\">\n          <div class=\"ops\">\n            ", "\n            <hax-tray-button\n              mini\n              voice-command=\"toggle menu\"\n              id=\"toggle-tray-size\"\n              event-name=\"toggle-tray-size\"\n              icon=\"", "\"\n              label=\"", "\"\n            ></hax-tray-button>\n            <hax-tray-button\n              mini\n              voice-command=\"toggle alignment\"\n              id=\"toggle-element-align\"\n              event-name=\"toggle-element-align\"\n              icon=\"image:photo-size-select-small\"\n              label=\"", "\"\n            ></hax-tray-button>\n          </div>\n          <div class=\"quick\">\n            <slot name=\"tray-buttons-pre\"></slot>\n            <hax-tray-button\n              mini\n              event-name=\"open-export-dialog\"\n              icon=\"code\"\n              label=\"View page source\"\n              voice-command=\"view (page) source\"\n            ></hax-tray-button>\n            <hax-tray-button\n              mini\n              icon=\"icons:undo\"\n              hidden\n              ?disabled=\"", "\"\n              label=\"Undo previous action\"\n              event-name=\"undo\"\n              voice-command=\"undo\"\n              class=\"hide-small\"\n            ></hax-tray-button>\n            <hax-tray-button\n              mini\n              icon=\"icons:redo\"\n              hidden\n              ?disabled=\"", "\"\n              label=\"Redo previous action\"\n              event-name=\"redo\"\n              voice-command=\"redo\"\n              class=\"hide-small\"\n            ></hax-tray-button>\n            <hax-tray-button\n              mini\n              event-name=\"open-map-dialog\"\n              icon=\"maps:map\"\n              label=\"Content map\"\n              voice-command=\"open map\"\n            ></hax-tray-button>\n            <hax-tray-button\n              mini\n              ?hidden=\"", "\"\n              event-name=\"open-preferences-dialog\"\n              icon=\"settings\"\n              label=\"Advanced settings\"\n              voice-command=\"open preferences\"\n            ></hax-tray-button>\n          </div>\n        </div>\n        <a11y-collapse-group accordion>\n          <slot name=\"tray-collapse-pre\"></slot>\n          <a11y-collapse\n            id=\"addcollapse\"\n            accordion\n            @expand=\"", "\"\n          >\n            <div slot=\"heading\">\n              <iron-icon icon=\"icons:add\"></iron-icon> Add Content\n            </div>\n            <div slot=\"content\">\n              <hax-tray-upload></hax-tray-upload>\n              <hax-gizmo-browser id=\"gizmobrowser\"></hax-gizmo-browser>\n            </div>\n          </a11y-collapse>\n          <a11y-collapse id=\"settingscollapse\" accordion>\n            <div slot=\"heading\">\n              <iron-icon icon=\"", "\"></iron-icon> ", "\n            </div>\n            <div slot=\"content\">\n              <simple-fields\n                id=\"settingsform\"\n                .schematizer=\"", "\"\n                .elementizer=\"", "\"\n              >\n              </simple-fields>\n            </div>\n          </a11y-collapse>\n          <a11y-collapse\n            id=\"searchapps\"\n            accordion\n            @expand=\"", "\"\n          >\n            <div slot=\"heading\">\n              <iron-icon icon=\"icons:search\"></iron-icon> Search\n            </div>\n            <div slot=\"content\">\n              <hax-app-browser id=\"appbrowser\"></hax-app-browser>\n            </div>\n          </a11y-collapse>\n          <a11y-collapse\n            id=\"templateslayouts\"\n            accordion\n            @expand=\"", "\"\n          >\n            <div slot=\"heading\">\n              <iron-icon icon=\"hax:templates\"></iron-icon>Templates & Layouts\n            </div>\n            <div slot=\"content\">\n              <hax-blox-browser id=\"bloxbrowser\"></hax-blox-browser>\n              <hax-stax-browser id=\"staxbrowser\"></hax-stax-browser>\n            </div>\n          </a11y-collapse>\n          <slot name=\"tray-collapse-post\"></slot>\n        </a11y-collapse-group>\n      </div>\n    "]);

    _templateObject_8ff06270c96f11ea8be5e1d5fe7ec787 = function _templateObject_8ff06270c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `hax-tray`
   * `The tray / dashboard area which allows for customization of all major settings`
   * @element hax-tray
   */
  var HaxTray =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxTray, _winEventsElement);
    babelHelpers.createClass(HaxTray, null, [{
      key: "tag",

      /**
       * Convention we use
       */
      get: function get() {
        return "hax-tray";
      }
      /**
       * HTMLElement
       */

    }]);

    function HaxTray() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTray);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxTray).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated"
      };
      _this.activeValue = {
        settings: {
          layout: {
            __position: "hax-align-left",
            __scale: 100
          },
          configure: {},
          advanced: {}
        }
      };
      _this.collapsed = false;
      _this.activeTab = "item-0";
      _this.activeSchema = [];
      _this.canUndo = true;
      _this.canRedo = true;
      _this.elementAlign = "right";
      _this.activeTagName = "Select an element to configure";
      _this.activeTagIcon = "icons:settings";
      _this.__setup = false;
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["./hax-tray-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/device-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/hardware-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/communication-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/social-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/image-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/av-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/maps-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/places-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../md-extra-icons/md-extra-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../hax-iconset/hax-iconset.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../lrn-icons/lrn-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-tray-upload.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../simple-fields/simple-fields.js"], res, rej);
        });

        _this.addEventListener("hax-tray-button-click", _this._processTrayEvent.bind(babelHelpers.assertThisInitialized(_this)));

        new Promise(function (res, rej) {
          return _require.default(["./hax-gizmo-browser.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-app-browser.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-blox-browser.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-stax-browser.js"], res, rej);
        });
      }, 0);
      return _this;
    }
    /**
     * Store updated, sync.
     */


    babelHelpers.createClass(HaxTray, [{
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          if (e.detail.property === "globalPreferences" || e.detail.property === "activeGizmo" || e.detail.property === "activeNode") {
            this[e.detail.property] = {};
          }

          this[e.detail.property] = e.detail.value;
        }
      }
      /**
       * LitElement render styles
       */

    }, {
      key: "render",

      /**
       * LitElement render
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_8ff06270c96f11ea8be5e1d5fe7ec787(), this.hidePanelOps ? "" : (0, _litElement.html)(_templateObject2_8ff06270c96f11ea8be5e1d5fe7ec787(), this.editMode, this._clickEditButton, this.__tipText), this.hidePanelOps ? "" : (0, _litElement.html)(_templateObject3_8ff06270c96f11ea8be5e1d5fe7ec787(), this._clickSaveButton, this.__tipText), this.traySizeIcon, this.traySizeText, this.menuAlignName, !this.canUndo, !this.canRedo, this.hidePreferencesButton, this._gizmoBrowserRefresh, this.activeTagIcon, this.activeTagName, _HAXFields.HaxSchematizer, _HAXFields.HaxElementizer, this._appBrowserRefresh, this._refreshLists);
      }
    }, {
      key: "__simpleFieldsClick",
      value: function __simpleFieldsClick(e) {
        try {
          this.activeTab = this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("simple-fields").activeTab;
        } catch (e) {
          // in case it missed somehow like w/ an incredibly slow repaints
          this.activeTab = "item-0";
        }
      }
      /**
       * Handlers to refresh contents on click
       */

    }, {
      key: "_gizmoBrowserRefresh",
      value: function _gizmoBrowserRefresh(e) {
        var _this2 = this;

        setTimeout(function () {
          if (_this2.shadowRoot.querySelector("#gizmobrowser")) {
            _this2.shadowRoot.querySelector("#gizmobrowser").resetBrowser();
          }
        }, 0);
      }
    }, {
      key: "_appBrowserRefresh",
      value: function _appBrowserRefresh(e) {
        if (this.shadowRoot.querySelector("#appbrowser")) {
          this.shadowRoot.querySelector("#appbrowser").resetBrowser();
        }
      }
    }, {
      key: "_refreshLists",
      value: function _refreshLists(e) {
        this.shadowRoot.querySelector("#bloxbrowser").bloxList = babelHelpers.toConsumableArray(window.HaxStore.instance.bloxList);
        this.shadowRoot.querySelector("#staxbrowser").staxList = babelHelpers.toConsumableArray(window.HaxStore.instance.staxList);
      }
      /**
       * Process event for simple content inserts.
       */

    }, {
      key: "_processTrayEvent",
      value: function _processTrayEvent(e) {
        var detail = e.detail;
        var target = null;

        if (e.path && e.path[0]) {
          target = e.path[0];
        } else if (e.originalTarget) {
          target = e.originalTarget;
        } else {
          target = e.target;
        } // support a simple insert event to bubble up or everything else


        switch (detail.eventName) {
          case "search-selected":
            this.dispatchEvent(new CustomEvent("hax-search-source-updated", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail.index
            }));
            break;

          case "insert-stax":
            this.dispatchEvent(new CustomEvent("hax-insert-content-array", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: target.stax
            }));
            break;

          case "insert-blox":
            var content = "";

            for (var i = 0; i < target.blox.length; i++) {
              var node = (0, _utils.haxElementToNode)({
                tag: target.blox[i].tag,
                content: target.blox[i].content,
                properties: target.blox[i].properties
              });
              content += window.HaxStore.nodeToContent(node);
            } // generate a hax element


            var blox = {
              tag: "grid-plate",
              properties: {
                layout: target.layout
              },
              content: content
            };
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: blox
            }));
            break;

          case "insert-tag":
            var gizmo = {
              tag: detail.value
            };
            var properties = JSON.parse(target.getAttribute("event-properties"));
            var innerContent = target.getAttribute("event-content");

            if (properties == null) {
              properties = {};
            }

            if (innerContent == null) {
              innerContent = "";
            } // most likely empty values but just to be safe


            var element = window.HaxStore.haxElementPrototype(gizmo, properties, innerContent);
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: element
            }));
            break;

          case "open-preferences-dialog":
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxPreferences, this);
            break;

          case "open-map-dialog":
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxMap, this);
            break;

          case "toggle-element-align":
            this.elementAlign = this.elementAlign === "right" ? "left" : "right";
            break;

          case "toggle-tray-size":
            this.collapsed = !this.collapsed;
            break;

          case "open-export-dialog":
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxExport, this);
            break;

          case "undo":
            document.execCommand("undo");
            break;

          case "redo":
            document.execCommand("redo");
            break;

          case "cancel":
            window.HaxStore.write("editMode", false, this);
            this.dispatchEvent(new CustomEvent("hax-cancel", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail
            }));
            break;
        }
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "firstUpdated",

      /**
       * LitElement ready life cycle
       */
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (!this.__setup) {
          setTimeout(function () {
            _this3.shadowRoot.querySelector(".wrapper").style.margin = _this3.offsetMargin;
          }, 1000);
          this.__setup = true;
          this.shadowRoot.querySelector("#settingsform").addEventListener("click", this.__simpleFieldsClick.bind(this));
          this.shadowRoot.querySelector("#settingsform").addEventListener("value-changed", this.__valueChangedEvent.bind(this)); // fire an event that this is a core piece of the system

          this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              piece: "haxTray",
              object: this
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) add content (menu)",
              context: this.shadowRoot.querySelector('#addcollapse div[slot="heading"]'),
              callback: "click"
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) element settings (menu)",
              context: this.shadowRoot.querySelector('#settingscollapse div[slot="heading"]'),
              callback: "click"
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) search (menu)",
              context: this.shadowRoot.querySelector('#searchapps div[slot="heading"]'),
              callback: "click"
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) templates (menu)",
              context: this.shadowRoot.querySelector('#templateslayouts div[slot="heading"]'),
              callback: "click"
            }
          }));
        }
      }
      /**
       * LitElement properties changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "editMode") {
            _this4._editModeChanged(_this4[propName], oldValue);
          }

          if (propName == "offsetMargin") {
            setTimeout(function () {
              _this4.shadowRoot.querySelector(".wrapper").style.margin = _this4.offsetMargin;
            }, 0);
          } // collaped menu state change


          if (propName == "collapsed") {
            if (_this4[propName]) {
              _this4.traySizeIcon = "hax:hax:arrow-expand-left";
              _this4.traySizeText = "Expand"; // accessibility to disable entering panels that are not visible

              _this4.shadowRoot.querySelector("a11y-collapse-group").setAttribute("aria-disabled", "true");

              _this4.shadowRoot.querySelector("a11y-collapse-group").setAttribute("tabindex", "-1");

              _this4._editModeChanged(_this4.editMode);
            } else {
              _this4.traySizeIcon = "hax:hax:arrow-expand-right";
              _this4.traySizeText = "Collapse"; // a11y clean up to match state

              _this4.shadowRoot.querySelector("a11y-collapse-group").removeAttribute("aria-disabled");

              _this4.shadowRoot.querySelector("a11y-collapse-group").removeAttribute("tabindex");
            }
          } //


          if (propName == "elementAlign") {
            if (_this4[propName] == "left") {
              _this4.menuAlignName = "Right align menu";
            } else {
              _this4.menuAlignName = "Left align menu";
            }
          } // active Gizmo changed


          if (propName == "activeGizmo") {
            if (_this4.activeGizmo) {
              _this4.activeTagName = _this4.activeGizmo.title + " Settings";
              _this4.activeTagIcon = _this4.activeGizmo.icon;

              if (!oldValue && !_this4.shadowRoot.querySelector("#settingscollapse").expanded) {
                _this4.shadowRoot.querySelector('#settingscollapse div[slot="heading"]').click();
              }
            } else {
              _this4.activeTagName = "Select an element";
              _this4.activeTagIcon = "icons:settings";

              if (!_this4.shadowRoot.querySelector("#addcollapse").expanded) {
                _this4.shadowRoot.querySelector('#addcollapse div[slot="heading"]').click();
              }
            }
          } // active node changed


          if (propName == "activeNode") {
            if (_this4.activeNode && _this4.activeNode.tagName) {
              _this4.shadowRoot.querySelector("#settingscollapse").disabled = false; // process fields

              _this4.activeHaxElement = (0, _utils.nodeToHaxElement)(_this4.activeNode, null);

              _this4._setupForm();
            } else {
              _this4.activeTagName = "Select an element to configure";
              _this4.activeTagIcon = "icons:settings";
              _this4.shadowRoot.querySelector("#settingscollapse").disabled = true;
            }
          }
        });
      }
      /**
       * When the preview node is updated, pull schema associated with it
       */

    }, {
      key: "_setupForm",
      value: function _setupForm() {
        var _this5 = this;

        var activeNode = this.activeNode;
        this.activeValue = {
          settings: {
            layout: {
              __position: "hax-align-left",
              __scale: 100
            },
            configure: {},
            advanced: {}
          }
        };
        this.shadowRoot.querySelector("#settingsform").fields = [];
        this.shadowRoot.querySelector("#settingsform").value = {}; // see if we can get schema off of this.

        if (activeNode.tagName && window.HaxStore.instance.elementList[activeNode.tagName.toLowerCase()]) {
          var props = window.HaxStore.instance.elementList[activeNode.tagName.toLowerCase()]; // generate a human name for this

          if (babelHelpers.typeof(props.gizmo.title) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.humanName = activeNode.tagName.replace("-", " ").toLowerCase();
          } else {
            this.humanName = props.gizmo.title;
          } // first, allow element properties to dictate defaults


          for (var property in this.activeHaxElement.properties) {
            props.settings.configure.forEach(function (el) {
              if (el.property === property) {
                _this5.activeValue.settings.configure[property] = _this5.activeHaxElement.properties[property];
              }

              if (el.attribute === property) {
                _this5.activeValue.settings.configure[property] = _this5.activeHaxElement.properties[property];
              }

              if (el.slot === property) {
                _this5.activeValue.settings.configure[property] = _this5.activeHaxElement.properties[property];
              }
            });
            props.settings.advanced.forEach(function (el) {
              if (el.property === property) {
                _this5.activeValue.settings.advanced[property] = _this5.activeHaxElement.properties[property];
              }

              if (el.attribute === property) {
                _this5.activeValue.settings.advanced[property] = _this5.activeHaxElement.properties[property];
              }

              if (el.slot === property) {
                _this5.activeValue.settings.advanced[property] = _this5.activeHaxElement.properties[property];
              }
            });
          } // now we need to parse through for slotted items
          // build a fake tree, then walk the configuration / advanced settings
          // looking for slot types


          var tmp = document.createElement("div");
          tmp.innerHTML = this.activeHaxElement.content; // step through each key

          tmp.childNodes.forEach(function (el) {
            // ensure we have a dom node and it isnt empty
            if (el.nodeType === 1 && el.innerHTML !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              // walk props looking for a match
              props.settings.configure.forEach(function (prop) {
                // if we have a slot to match in the property AND it matches the attr
                if (prop.slot === el.getAttribute("slot")) {
                  _this5.activeValue.settings.configure[prop.slot] = el.innerHTML;
                } // no slot and it didnt match so it has no slot
                else if (prop.slot == "" && (el.getAttribute("slot") == null || el.getAttribute("slot") == "null")) {
                    _this5.activeValue.settings.configure[prop.slot] = el.innerHTML;
                  }
              }); // now advanced

              props.settings.advanced.forEach(function (prop) {
                if (prop.slot === el.getAttribute("slot")) {
                  _this5.activeValue.settings.advanced[prop.slot] = el.innerHTML;
                } // no slot and it didnt match so it has no slot
                else if (prop.slot == "" && (el.getAttribute("slot") == null || el.getAttribute("slot") == "null")) {
                    _this5.activeValue.settings.advanced[prop.slot] = el.innerHTML;
                  }
              });
            }
          }); // then we need to work on the layout piece

          if (activeNode.style.width != "") {
            this.activeValue.settings.layout.__scale = activeNode.style.width.replace("%", "");
          } else {
            this.activeValue.settings.layout.__scale = 100;
          }

          if (activeNode.style.display == "block" && activeNode.style.margin == "0px auto" && activeNode.style.float == "right") {
            this.activeValue.settings.layout.__position = "hax-align-right";
          } else if (activeNode.style.display == "block" && activeNode.style.margin == "0px auto") {
            this.activeValue.settings.layout.__position = "hax-align-center";
          } else {
            this.activeValue.settings.layout.__position = "hax-align-left";
          }

          this.activeHaxElement.properties.__scale = this.activeValue.settings.layout.__scale;
          this.activeHaxElement.properties.__position = this.activeValue.settings.layout.__position; // tabs / deep objects require us to preview the value w/ the path correctly

          props.settings.configure.forEach(function (val, key) {
            if (props.settings.configure[key].attribute) {
              props.settings.configure[key].property = props.settings.configure[key].attribute;
            }

            if (props.settings.configure[key].slot) {
              props.settings.configure[key].property = props.settings.configure[key].slot;
            }
          });
          props.settings.advanced.forEach(function (val, key) {
            if (props.settings.advanced[key].attribute) {
              props.settings.advanced[key].property = props.settings.advanced[key].attribute;
            }

            if (props.settings.advanced[key].slot) {
              props.settings.advanced[key].property = props.settings.advanced[key].slot;
            }
          });
          props.settings.layout = []; // test if this element can be aligned

          if (props.canPosition) {
            props.settings.layout.push({
              property: "__position",
              title: "Alignment",
              description: "Align content relative to other content",
              inputMethod: "select",
              value: this.activeValue.settings.layout.__position,
              options: {
                "hax-align-left": "Left",
                "hax-align-center": "Center",
                "hax-align-right": "Right"
              }
            });
          } // test if this element can be scaled


          if (props.canScale) {
            props.settings.layout.push({
              property: "__scale",
              title: "Width",
              description: "Scale and resize content",
              inputMethod: "slider",
              value: this.activeValue.settings.layout.__scale,
              min: props.canScale.min ? props.canScale.min : 12.5,
              max: props.canScale.max ? props.canScale.max : 100,
              step: props.canScale.step ? props.canScale.step : 12.5
            });
          } // establish tabs container


          this.activeSchema = [{
            property: "settings",
            inputMethod: "tabs",
            properties: []
          }]; // array of things to forcibly disable

          var disable = []; // see if we have any configure settings or disable

          if (props.settings.configure.length > 0) {
            this.activeSchema[0].properties.push({
              property: "configure",
              title: "Configure",
              description: "Configure the element",
              properties: props.settings.configure
            });
          } else {
            this.activeSchema[0].properties.push({
              property: "configure",
              title: "Configure",
              description: "Configure the element",
              disabled: true
            });
          } // see if we have any layout settings or disable


          if (props.settings.layout.length > 0) {
            this.activeSchema[0].properties.push({
              property: "layout",
              title: "Layout",
              description: "Position the element relative to other items",
              properties: props.settings.layout
            });
          } else {
            this.activeSchema[0].properties.push({
              property: "layout",
              title: "Layout",
              description: "Position the element relative to other items",
              disabled: true
            });
          } // see if we have any configure settings or disable


          if (props.settings.advanced.length > 0) {
            this.activeSchema[0].properties.push({
              property: "advanced",
              title: "Advanced",
              description: "Advanced element settings",
              properties: props.settings.advanced
            });
          } else {
            this.activeSchema[0].properties.push({
              property: "advanced",
              title: "Advanced",
              description: "Advanced element settings",
              disabled: true
            });
          }

          this.__activePropSchema = props;
          this.shadowRoot.querySelector("#settingsform").fields = babelHelpers.toConsumableArray(this.activeSchema);
          this.shadowRoot.querySelector("#settingsform").value = _objectSpread({}, this.activeValue);
        }
      }
      /**
       * Convert an object to an array
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
      /**
       * Notice change in values from below
       */

    }, {
      key: "__valueChangedEvent",
      value: function __valueChangedEvent(e) {
        if (this.editMode && e.detail.value && e.detail.value.settings) {
          var settings = e.detail.value.settings;
          var settingsKeys = {
            advanced: "advanced",
            configure: "configure",
            layout: "layout"
          };
          var setAhead;

          for (var key in settingsKeys) {
            for (var prop in settings[key]) {
              setAhead = false;

              if (settings[key][prop] != null && !settings[key][prop].readOnly) {
                // prefix is a special attribute and must be handled this way
                if (prop === "prefix" && settings[key][prop] != "") {
                  this.activeNode.setAttribute("prefix", settings[key][prop]);
                  setAhead = true;
                } // this is a special internal held "property" for layout stuff
                else if (key === "layout" && prop === "__position") {
                    setAhead = true;
                    this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                      bubbles: true,
                      composed: true,
                      detail: {
                        eventName: settings[key][prop],
                        value: settings[key][prop]
                      }
                    }));
                  } // this is a special internal held "property" for layout stuff
                  else if (key === "layout" && prop === "__scale") {
                      setAhead = true;
                      this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                        bubbles: true,
                        composed: true,
                        detail: {
                          eventName: "hax-size-change",
                          value: settings[key][prop]
                        }
                      }));
                    } // try and set the pop directly if it is a prop already set
                    // check on prototype, then in properties object if it has one
                    // then by seeing if we have an array / object
                    else if (this.activeNode.hasOwnProperty(prop) || this.activeNode.properties && this.activeNode.properties.hasOwnProperty(prop) || settings[key][prop] != null && settings[key][prop].constructor === Array || settings[key][prop] != null && settings[key][prop].constructor === Object) {
                        try {
                          if (settings[key][prop].constructor === Array) {
                            this.activeNode[prop] = babelHelpers.toConsumableArray(settings[key][prop]);
                          } else if (settings[key][prop].constructor === Object) {
                            this.activeNode[prop] = _objectSpread({}, settings[key][prop]);
                          } else {
                            this.activeNode[prop] = settings[key][prop];
                          }

                          setAhead = true;
                        } catch (e) {
                          console.warn(e);
                          setAhead = false;
                        }
                      } else {
                        // need to specifically walk through slots if there is anything
                        // that says it has to come from a slot
                        for (var propTmp in this.__activePropSchema.settings[key]) {
                          if (this.__activePropSchema.settings[key][propTmp].slot == prop) {
                            var slotTag = "span";

                            if (this.__activePropSchema.settings[key][propTmp].slotWrapper) {
                              slotTag = this.__activePropSchema.settings[key][propTmp].slotWrapper;
                            } else if (this.activeNode.tagName.toLowerCase() === "code-editor") {
                              slotTag = "template";
                            }

                            var tmpel = document.createElement(slotTag);

                            if (this.__activePropSchema.settings[key][propTmp].slotAttributes) {
                              for (var attr in this.__activePropSchema.settings[key][propTmp].slotAttributes) {
                                tmpel.setAttribute(attr, this.__activePropSchema.settings[key][propTmp].slotAttributes[attr]);
                              }
                            } // support unnamed slots


                            if (this.__activePropSchema.settings[key][propTmp].slot !== "") {
                              tmpel.slot = this.__activePropSchema.settings[key][propTmp].slot;
                            }

                            tmpel.innerHTML = settings[key][prop];
                            var cloneIt = tmpel.cloneNode(true);
                            setAhead = true; // inject the slotted content but use text nodes if this is a text element

                            if (window.HaxStore.instance.isTextElement(this.activeNode)) {
                              this.activeNode.innerHTML = tmpel.innerHTML;
                            } else {
                              // wipe just the slot in question
                              (0, _utils.wipeSlot)(this.activeNode, this.__activePropSchema.settings[key][propTmp].slot);
                              this.activeNode.appendChild(cloneIt);
                            }
                          }
                        }
                      } // this will get reached often but tough to know if we had a slot


                if (!setAhead) {
                  try {
                    // silly but this is the spec way to do a boolean
                    if (settings[key][prop] === true) {
                      this.activeNode.setAttribute((0, _utils.camelCaseToDash)(prop), (0, _utils.camelCaseToDash)(prop));
                    } else if (settings[key][prop] === false || settings[key][prop] === "") {
                      this.activeNode.removeAttribute((0, _utils.camelCaseToDash)(prop));
                    } else {
                      this.activeNode.setAttribute((0, _utils.camelCaseToDash)(prop), settings[key][prop]);
                    }
                  } catch (e) {
                    console.warn(e);
                    console.warn(prop, settings[key][prop]);
                  }
                }
              } else {
                this.activeNode.removeAttribute((0, _utils.camelCaseToDash)(prop));
              }
            }
          }
        }
      }
      /**
       * _editModeChanged
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue) {
          this.__tipText = "Save content";
          this.shadowRoot.querySelector("#button").icon = "save";
        } else {
          this.__tipText = "Edit content";
          this.shadowRoot.querySelector("#button").icon = "create";
        }
      }
      /**
       * Edit clicked, activate
       */

    }, {
      key: "_clickEditButton",
      value: function _clickEditButton(e) {
        this.editMode = true;
        window.HaxStore.write("editMode", true, this);
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Toggle the drawer when the button is clicked.
       */

    }, {
      key: "_clickSaveButton",
      value: function _clickSaveButton(e) {
        this.editMode = false;
        window.HaxStore.write("editMode", false, this);
        this.dispatchEvent(new CustomEvent("hax-save", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: e.detail
        }));
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject4_8ff06270c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray), "properties", this), {
          __tipText: {
            type: String
          },
          menuAlignName: {
            type: String
          },
          offsetMargin: {
            type: String
          },
          collapsed: {
            type: Boolean,
            reflect: true
          },
          traySizeIcon: {
            type: String
          },
          traySizeText: {
            type: String
          },

          /**
           * Form values for active node
           */
          activeValue: {
            type: Object
          },

          /**
           * Form schema for active node
           */
          activeSchema: {
            type: Object
          },

          /**
           * Alignment of the initial edit button
           */
          elementAlign: {
            type: String,
            reflect: true,
            attribute: "element-align"
          },

          /**
           * Light variant for save button
           */
          light: {
            type: Boolean,
            reflect: true
          },

          /**
           * If we can currently undo based on stack position
           */
          canUndo: {
            type: Boolean,
            attribute: "can-undo"
          },

          /**
           * If we can currently redo based on stack position
           */
          canRedo: {
            type: Boolean,
            attribute: "can-redo"
          },

          /**
           * If we're "dirty" meaning stackPosition and savePosition out of sync
           */
          isDirty: {
            type: Boolean,
            attribute: "is-dirty"
          },

          /**
           * Showing preferences area.
           */
          hidePreferencesButton: {
            type: Boolean,
            reflect: true,
            attribute: "hide-preferences-button"
          },

          /**
           * Showing button area at all a well as internal
           * state managing buttons like cancel and save
           */
          hidePanelOps: {
            type: Boolean,
            reflect: true,
            attribute: "hide-panel-ops"
          },

          /**
           * Global preferences for HAX overall
           */
          globalPreferences: {
            type: Object
          },

          /**
           * Global active node so we know if we need to disable contextual settings
           */
          activeNode: {
            type: Object
          },

          /**
           * Tag name / what to display based on active element
           */
          activeTagIcon: {
            type: String
          },
          activeTagName: {
            type: String
          },
          activeGizmo: {
            type: Object
          },

          /**
           * State of the panel
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          }
        });
      }
    }]);
    return HaxTray;
  }((0, _utils.winEventsElement)(_litElement.LitElement));

  _exports.HaxTray = HaxTray;
  window.customElements.define(HaxTray.tag, HaxTray);
});