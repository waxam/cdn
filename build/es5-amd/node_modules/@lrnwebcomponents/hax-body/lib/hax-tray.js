define(["exports", "require", "../../../lit-element/lit-element.js", "../../utils/utils.js", "../../hax-body-behaviors/lib/HAXFields.js", "../../simple-popover/lib/SimpleTourFinder.js", "./hax-store.js", "../../../mobx/dist/mobx.esm.js", "../../simple-fields/simple-fields.js", "../../simple-popover/simple-popover.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js", "../../a11y-collapse/lib/a11y-collapse-group.js", "../../a11y-collapse/a11y-collapse.js", "./hax-tray-upload.js", "./hax-gizmo-browser.js", "./hax-app-browser.js", "./hax-stax-browser.js", "./hax-map.js", "./hax-preferences-dialog.js"], function (_exports, _require, _litElement, _utils, _HAXFields, _SimpleTourFinder2, _haxStore, _mobxEsm, _simpleFields, _simplePopover, _simpleIconLite, _simpleIcons, _simpleHaxIconset, _a11yCollapseGroup, _a11yCollapse, _haxTrayUpload, _haxGizmoBrowser, _haxAppBrowser, _haxStaxBrowser, _haxMap, _haxPreferencesDialog) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTray = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject4_be740c6054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          font-family: var(--simple-fields-font-family, sans-serif);\n          display: block;\n          z-index: 100000000;\n          position: absolute;\n          transition: 0.2s all ease-in-out;\n          --hax-contextual-action-text-color: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-contextual-action-color: var(\n            --simple-colors-default-theme-grey-12,\n            #009dc7\n          );\n          --hax-contextual-action-hover-color: var(\n            --simple-colors-default-theme-grey-8,\n            #009dc7\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --a11y-tabs-focus-color: var(\n            --hax-contextual-action-hover-color,\n            var(--simple-colors-default-theme-grey-8, #009dc7)\n          );\n        }\n        .wrapper {\n          color: var(--hax-color-text, #000000);\n          position: fixed;\n          top: 0;\n          background-color: transparent;\n          font-size: 20px;\n          width: var(---hax-tray-width, 300px);\n          transition: 0.2s all ease-in-out;\n          opacity: 0;\n          visibility: hidden;\n          pointer-events: none;\n        }\n        :host([edit-mode]) .wrapper {\n          opacity: 1;\n          visibility: visible;\n          right: 0;\n          pointer-events: all;\n        }\n        #addcollapse {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-purple-8,\n            #8a009b\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-purple-8,\n            #8a009b\n          );\n        }\n        #settingscollapse {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-green-8,\n            #00762e\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-green-8,\n            #00762e\n          );\n          --simple-fields-margin: 4px;\n          --simple-fields-font-size: 12px;\n        }\n        #searchapps {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --simple-fields-accent-color: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n        }\n        :host([edit-mode][collapsed]) a11y-collapse-group {\n          right: -100vw;\n        }\n        :host([element-align=\"left\"]) .wrapper {\n          left: -1000px;\n        }\n        :host([element-align=\"right\"]) .wrapper {\n          right: -1000px;\n        }\n        :host([edit-mode][element-align=\"left\"]) .wrapper {\n          left: 0;\n        }\n        :host([edit-mode][element-align=\"right\"]) .wrapper {\n          right: 0;\n        }\n        :host([edit-mode][element-align=\"left\"]) #toggle-tray-size {\n          --hax-tray-button-rotate: rotate(-180deg);\n        }\n        /** default is right so lets support left too */\n        :host([edit-mode][element-align=\"left\"][collapsed])\n          a11y-collapse-group {\n          right: unset;\n          left: -100vw;\n        }\n        :host([edit-mode][element-align=\"left\"]) .ops,\n        :host([edit-mode][element-align=\"left\"]) .quick,\n        :host([edit-mode][element-align=\"left\"]) .quick-buttons {\n          flex-direction: row-reverse;\n        }\n        :host([element-align=\"left\"]) #toggle-element-align {\n          --hax-tray-button-rotate: rotate(-90deg) scaleX(-1) !important;\n        }\n        :host([element-align=\"right\"]) #toggle-element-align {\n          --hax-tray-button-rotate: rotate(90deg) !important;\n        }\n        simple-popover {\n          --simple-popover-max-height: 50vh;\n        }\n        hax-tray-button,\n        a11y-collapse,\n        a11y-collapse-group,\n        hax-app-browser,\n        hax-gizmo-browser {\n          transition: 0.2s all ease-in-out;\n          visibility: visible;\n        }\n        hax-tray-button:not(:defined),\n        a11y-collapse:not(:defined),\n        a11y-collapse-group:not(:defined),\n        hax-app-browser:not(:defined),\n        hax-gizmo-browser:not(:defined) {\n          visibility: hidden;\n        }\n        *[hidden] {\n          display: none;\n        }\n        :host([element-align=\"right\"]) a11y-collapse-group {\n          margin: 0 -350px 0 0;\n          right: 0;\n        }\n        :host([element-align=\"left\"]) a11y-collapse-group {\n          margin: 0 0 0 -350px;\n          left: 0;\n        }\n        :host([edit-mode][element-align=\"left\"]) a11y-collapse-group,\n        :host([edit-mode][element-align=\"right\"]) a11y-collapse-group {\n          position: absolute;\n          margin: 0;\n          top: 32;\n        }\n        a11y-collapse-group {\n          position: fixed;\n          font-size: 16px;\n          margin: 0;\n          background-color: var(--simple-colors-default-theme-grey-1, #fff);\n        }\n        a11y-collapse {\n          font-size: 12px;\n          font-weight: normal;\n          --a11y-tabs-content-padding: 0;\n          width: calc(var(---hax-tray-width, 300px) - 2px);\n          --a11y-collapse-heading-color: var(\n            --simple-colors-default-theme-grey-7,\n            #666\n          );\n          --a11y-collapse-heading-background-color: var(\n            --simple-colors-default-theme-grey-2,\n            #eee\n          );\n          --a11y-collapse-padding-top: 0px;\n          --a11y-collapse-padding-right: 0px;\n          --a11y-collapse-padding-bottom: 0px;\n          --a11y-collapse-padding-left: 0px;\n          --a11y-collapse-border: 1px solid\n            var(--simple-colors-default-theme-grey-3, #dddddd);\n          --a11y-collapse-border-between: 1px solid\n            var(--simple-colors-default-theme-grey-3, #dddddd);\n          transition: all 0.5ms ease-in-out;\n          border-left: 3px solid\n            var(--simple-colors-default-theme-grey-3, #dddddd);\n        }\n        a11y-collapse:not([expanded]) div[slot=\"content\"] {\n          display: none;\n        }\n        a11y-collapse div[slot=\"heading\"] {\n          cursor: pointer;\n          font-size: 16px;\n        }\n        a11y-collapse:hover {\n          --a11y-collapse-heading-color: var(\n            --hax-tray-panel-accent,\n            var(--simple-colors-default-theme-grey-12, #000)\n          );\n          --a11y-collapse-heading-background-color: var(\n            --hax-tray-panel-accent-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n        }\n        a11y-collapse:hover {\n          border-left: 3px solid\n            var(\n              --hax-tray-panel-accent,\n              var(--hax-contextual-action-hover-color)\n            );\n        }\n        a11y-collapse[expanded],\n        a11y-collapse[expanded]:hover {\n          --a11y-collapse-heading-color: var(\n            --hax-tray-panel-accent,\n            var(--hax-contextual-action-hover-color)\n          );\n          --a11y-collapse-heading-background-color: var(\n            --hax-tray-panel-accent-text,\n            var(--simple-colors-default-theme-grey-1)\n          );\n        }\n        a11y-collapse[disabled] {\n          --a11y-collapse-heading-color: var(\n            --simple-colors-default-theme-grey-7,\n            #666\n          ) !important;\n          --a11y-collapse-heading-background-color: var(\n            --simple-colors-default-theme-grey-2,\n            #eee\n          ) !important;\n          cursor: not-allowed;\n        }\n        a11y-collapse[disabled] div[slot=\"heading\"] {\n          cursor: not-allowed !important;\n          opacity: 0.6;\n        }\n        #settingscollapse div[slot=\"content\"] {\n          padding: 0;\n          margin: 0;\n        }\n        a11y-collapse[expanded] div[slot=\"content\"] {\n          min-height: 300px;\n          max-height: 70vh;\n          overflow: auto;\n        }\n        simple-icon-lite {\n          margin-right: 8px;\n        }\n        .quick-buttons {\n          width: var(---hax-tray-width, 300px);\n          display: flex;\n          color: var(--simple-colors-default-theme-grey-12, #000);\n          background-color: var(--simple-colors-default-theme-grey-4, #bbb);\n          justify-content: space-between;\n          transition: all 0.5ms ease-in-out;\n        }\n        .quick-buttons hax-tray-button {\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n        }\n\n        #button,\n        .quick-buttons #haxsavebutton {\n          --hax-quick-button-accent: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-cyan-7,\n            #009dc7\n          );\n          --hax-quick-button-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n        }\n        .quick-buttons #haxcancelbutton {\n          --hax-quick-button-accent: var(\n            --simple-colors-default-theme-red-8,\n            #ac0000\n          );\n          --hax-tray-panel-accent: var(\n            --simple-colors-default-theme-red-7,\n            #ee0000\n          );\n          --hax-quick-button-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n          --hax-tray-panel-accent-text: var(\n            --simple-colors-default-theme-grey-1,\n            #fff\n          );\n        }\n        .quick-buttons .ops {\n          display: flex;\n          justify-content: flex-start;\n        }\n        .quick-buttons .quick {\n          display: flex;\n          justify-content: flex-end;\n        }\n        div[slot=\"heading\"] {\n          margin: 0;\n          padding: 10px;\n        }\n        :host([element-align=\"right\"]) #button {\n          right: 0;\n        }\n        :host([element-align=\"left\"]) #button {\n          left: 0;\n        }\n\n        #button {\n          position: fixed;\n          top: 0;\n          border: 1px solid black;\n          box-shadow: 0 5px 5px 1px rgba(0, 0, 0, 0.2);\n          visibility: visible;\n          z-index: 1000;\n          margin: 0;\n        }\n        :host([edit-mode]) #button {\n          visibility: hidden;\n          opacity: 0;\n        }\n        #button:hover {\n          opacity: 1;\n        }\n        .active-op-name {\n          display: inline-flex;\n          vertical-align: text-bottom;\n          padding: 4px 2px;\n          max-width: 60px;\n          font-size: 11px;\n          overflow: hidden;\n          text-align: center;\n          color: white;\n        }\n        /** This is mobile layout for controls */\n        @media screen and (max-width: 800px) {\n          .ops,\n          .quick,\n          .quick-buttons {\n            flex-direction: row-reverse;\n          }\n          .wrapper {\n            top: 0;\n            left: 0;\n            right: 0;\n            margin: 0 !important;\n          }\n          .quick-buttons {\n            position: relative;\n            z-index: 1;\n          }\n          #toggle-element-align {\n            display: none;\n          }\n          #toggle-tray-size {\n            --hax-tray-button-rotate: rotate(-90deg) !important;\n          }\n          :host([edit-mode][collapsed]) a11y-collapse-group {\n            top: -200vh;\n            left: unset !important;\n            right: unset !important;\n          }\n        }\n        @media screen and (max-width: 600px) {\n          :host([edit-mode]) .hide-small {\n            display: none;\n          }\n        }\n      "]);

    _templateObject4_be740c6054f111eba18757df1555c032 = function _templateObject4_be740c6054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_be740c6054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                  <hax-tray-button\n                    mini\n                    @click=\"", "\"\n                    icon=\"save\"\n                    id=\"haxsavebutton\"\n                    label=\"", "\"\n                    event-name=\"save\"\n                    accent-color=\"white\"\n                    voice-command=\"save (content)(page)\"\n                    color-meaning\n                  ></hax-tray-button>\n                  <hax-tray-button\n                    mini\n                    icon=\"cancel\"\n                    id=\"haxcancelbutton\"\n                    accent-color=\"white\"\n                    label=\"Cancel\"\n                    event-name=\"cancel\"\n                    voice-command=\"cancel\"\n                    color-meaning\n                  ></hax-tray-button>\n                "]);

    _templateObject3_be740c6054f111eba18757df1555c032 = function _templateObject3_be740c6054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _templateObject2_be740c6054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <hax-tray-button\n              voice-command=\"edit page\"\n              .data-opened=\"", "\"\n              @click=\"", "\"\n              icon=\"create\"\n              id=\"button\"\n              dark\n              accent-color=\"white\"\n              label=\"", "\"\n            ></hax-tray-button>\n          "]);

    _templateObject2_be740c6054f111eba18757df1555c032 = function _templateObject2_be740c6054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _templateObject_be740c6054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", "\n      <div class=\"wrapper\">\n        <div class=\"quick-buttons\">\n          <div class=\"ops\">\n            ", "\n            <hax-tray-button\n              mini\n              voice-command=\"toggle menu\"\n              id=\"toggle-tray-size\"\n              event-name=\"toggle-tray-size\"\n              icon=\"", "\"\n              label=\"", "\"\n              data-simple-tour-stop\n            >\n              <div data-stop-title>Menu placement</div>\n              <div data-stop-content>Expand or collapse the menu visually.</div>\n            </hax-tray-button>\n            <hax-tray-button\n              mini\n              voice-command=\"toggle alignment\"\n              id=\"toggle-element-align\"\n              event-name=\"toggle-element-align\"\n              icon=\"image:photo-size-select-small\"\n              label=\"", "\"\n              data-simple-tour-stop\n            >\n              <div data-stop-title>Menu alignment</div>\n              <div data-stop-content>\n                Change which side of the screen the menu is affixed to visually.\n              </div>\n            </hax-tray-button>\n          </div>\n          <div class=\"quick\">\n            <slot name=\"tray-buttons-pre\"></slot>\n            <hax-tray-button\n              mini\n              id=\"exportbtn\"\n              icon=\"code\"\n              label=\"View page source\"\n              voice-command=\"view (page) source\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div data-stop-content>\n                Every change you make in HAX is ultimately writing HTML. Know\n                HTML? Awesome, pop open the source view and make any changes you\n                like. HTML is always behind the scenes ensuring that content is\n                portable, well formatted and easy to read.\n              </div>\n            </hax-tray-button>\n            <hax-tray-button\n              mini\n              event-name=\"start-tour\"\n              icon=\"help\"\n              label=\"Take a tour\"\n              voice-command=\"start tour\"\n            ></hax-tray-button>\n            <hax-tray-button\n              mini\n              icon=\"icons:undo\"\n              ?disabled=\"", "\"\n              label=\"Undo previous action\"\n              event-name=\"undo\"\n              voice-command=\"undo\"\n              class=\"hide-small\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div slot=\"tour\" data-stop-content>\n                Undo the previous operation in the content, whether typing or\n                adding a widget.\n              </div>\n            </hax-tray-button>\n            <hax-tray-button\n              mini\n              icon=\"icons:redo\"\n              ?disabled=\"", "\"\n              label=\"Redo previous action\"\n              event-name=\"redo\"\n              voice-command=\"redo\"\n              class=\"hide-small\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div slot=\"tour\" data-stop-content>\n                Redo the last action that you hit Undo on.\n              </div>\n            </hax-tray-button>\n            <hax-tray-button\n              mini\n              event-name=\"open-map\"\n              icon=\"maps:map\"\n              id=\"mapbtn\"\n              label=\"Content map\"\n              voice-command=\"open map\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div data-stop-content>\n                This is a simple list of all the block areas of the page that\n                are clickable to jump through items quickly as well as review\n                some simple overview stats.\n              </div>\n            </hax-tray-button>\n            <simple-popover for=\"mapbtn\" auto hidden>\n              <hax-map></hax-map>\n            </simple-popover>\n            <hax-tray-button\n              mini\n              ?hidden=\"", "\"\n              id=\"prefbtn\"\n              event-name=\"open-preferences\"\n              icon=\"settings\"\n              label=\"Advanced settings\"\n              voice-command=\"open preferences\"\n              data-simple-tour-stop\n              data-stop-title=\"label\"\n            >\n              <div data-stop-content>\n                Some advanced options for developers and experimental purposes.\n              </div>\n            </hax-tray-button>\n            <simple-popover for=\"prefbtn\" auto hidden>\n              <hax-preferences-dialog></hax-preferences-dialog>\n            </simple-popover>\n          </div>\n        </div>\n        <a11y-collapse-group accordion radio>\n          <slot name=\"tray-collapse-pre\"></slot>\n          <a11y-collapse id=\"settingscollapse\" accordion data-simple-tour-stop>\n            <div slot=\"heading\" data-stop-title>\n              <simple-icon-lite icon=\"", "\"></simple-icon-lite>\n              ", "\n            </div>\n            <div slot=\"tour\" data-stop-content>\n              Settings panel changes contextually based on the item you are\n              currently working on. If you select a paragraph in the page, it\n              will change to a P tag and show settings specific to that element.\n              Same for video-player's, meme's, images, tables; litereally\n              anything!\n            </div>\n            <div slot=\"content\">\n              <simple-fields\n                id=\"settingsform\"\n                disable-responsive\n              ></simple-fields>\n            </div>\n          </a11y-collapse>\n          <a11y-collapse\n            id=\"addcollapse\"\n            accordion\n            data-simple-tour-stop\n            @expand=\"", "\"\n          >\n            <div slot=\"heading\" data-stop-title>\n              <simple-icon-lite icon=\"hax:add\"></simple-icon-lite> Add Content\n            </div>\n            <div slot=\"tour\" data-stop-content>\n              When you want to add any content to the page from text, to images,\n              to anything more advanced; you can always find items to add under\n              the Add content menu. Click to expand, then either drag and drop\n              items into the page or click and have them placed near whatever\n              you are actively working on.\n            </div>\n            <div slot=\"content\">\n              <hax-gizmo-browser id=\"gizmobrowser\"></hax-gizmo-browser>\n              <h5>Templates</h5>\n              <hax-stax-browser id=\"staxbrowser\"></hax-stax-browser>\n            </div>\n          </a11y-collapse>\n          <a11y-collapse id=\"searchapps\" accordion data-simple-tour-stop>\n            <div slot=\"heading\" data-stop-title>\n              <simple-icon-lite icon=\"hax:search-clear\"></simple-icon-lite>\n              Media browser\n            </div>\n            <div slot=\"tour\" data-stop-content>\n              Search for media and content anywhere that your copy of HAX has\n              access to. Pick what to search, perform the search and then click\n              or drag the item into the contnet.\n            </div>\n            <div slot=\"content\">\n              <hax-tray-upload></hax-tray-upload>\n              <hax-app-browser id=\"appbrowser\"></hax-app-browser>\n            </div>\n          </a11y-collapse>\n          <slot name=\"tray-collapse-post\"></slot>\n        </a11y-collapse-group>\n      </div>\n    "]);

    _templateObject_be740c6054f111eba18757df1555c032 = function _templateObject_be740c6054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-tray`
   * `The tray / dashboard area which allows for customization of all major settings`
   * @element hax-tray
   */
  var HaxTray = /*#__PURE__*/function (_SimpleTourFinder) {
    babelHelpers.inherits(HaxTray, _SimpleTourFinder);

    var _super = _createSuper(HaxTray);

    babelHelpers.createClass(HaxTray, null, [{
      key: "tag",

      /**
       * Convention we use
       */
      get: function get() {
        return "hax-tray";
      }
      /**
       * HTMLElement
       */

    }]);

    function HaxTray() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTray);
      _this = _super.call(this);
      _this.tourName = "hax";
      _this.__winEvents = {
        "can-redo-changed": "_redoChanged",
        "can-undo-changed": "_undoChanged",
        "hax-drop-focus-event": "_expandSettingsPanel"
      };
      _this._initial = true;
      _this.activeValue = {
        settings: {
          layout: {
            __position: "hax-align-left",
            __scale: 100
          },
          configure: {},
          advanced: {}
        }
      };
      _this.collapsed = false;
      _this.activeTab = "item-0";
      _this.activeSchema = [];
      _this.canUndo = false;
      _this.canRedo = false;
      _this.elementAlign = "right";
      _this.activeTagName = "Select an element to configure";
      _this.activeTagIcon = "icons:settings";
      _this.traySizeIcon = "hax:arrow-expand-right";
      _this.__setup = false;
      _this.__tipText = "Edit";
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["./hax-tray-button.js"], res, rej);
        });

        _this.addEventListener("hax-tray-button-click", _this._processTrayEvent.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      (0, _mobxEsm.autorun)(function () {
        _this.activeGizmo = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeGizmo);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.globalPreferences = (0, _mobxEsm.toJS)(_haxStore.HAXStore.globalPreferences);
      });
      (0, _mobxEsm.autorun)(function () {
        _this.editMode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.editMode);
      });
      return _this;
    }

    babelHelpers.createClass(HaxTray, [{
      key: "_expandSettingsPanel",
      value: function _expandSettingsPanel(e) {
        this.shadowRoot.querySelector("#settingscollapse").expand();
      }
    }, {
      key: "_redoChanged",
      value: function _redoChanged(e) {
        this.canRedo = e.detail.value;
      }
    }, {
      key: "_undoChanged",
      value: function _undoChanged(e) {
        this.canUndo = e.detail.value;
      }
      /**
       * LitElement render styles
       */

    }, {
      key: "render",

      /**
       * LitElement render
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_be740c6054f111eba18757df1555c032(), this.hidePanelOps ? "" : (0, _litElement.html)(_templateObject2_be740c6054f111eba18757df1555c032(), this.editMode, this._clickEditButton, this.__tipText), this.hidePanelOps ? "" : (0, _litElement.html)(_templateObject3_be740c6054f111eba18757df1555c032(), this._clickSaveButton, this.__tipText), this.traySizeIcon, this.traySizeText, this.menuAlignName, !this.canUndo, !this.canRedo, this.hidePreferencesButton, this.activeTagIcon, this.activeTagName, this._refreshAddData);
      }
    }, {
      key: "__simpleFieldsClick",
      value: function __simpleFieldsClick(e) {
        try {
          this.activeTab = this.shadowRoot.querySelector("#settingsform").shadowRoot.querySelector("simple-fields").activeTab;
        } catch (e) {
          // in case it missed somehow like w/ an incredibly slow repaints
          this.activeTab = "item-0";
        }
      }
    }, {
      key: "_refreshAddData",
      value: function _refreshAddData(e) {
        this.shadowRoot.querySelector("#gizmobrowser").resetList((0, _mobxEsm.toJS)(_haxStore.HAXStore.gizmoList));
        this.shadowRoot.querySelector("#staxbrowser").staxList = babelHelpers.toConsumableArray((0, _mobxEsm.toJS)(_haxStore.HAXStore.staxList));
      }
      /**
       * Process event for simple content inserts.
       */

    }, {
      key: "_processTrayEvent",
      value: function _processTrayEvent(e) {
        var target = (0, _utils.normalizeEventPath)(e)[0]; // support a simple insert event to bubble up or everything else

        switch (e.detail.eventName) {
          case "insert-stax":
            this.shadowRoot.querySelector("#settingscollapse").expand();
            this.dispatchEvent(new CustomEvent("hax-insert-content-array", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: target.stax
            }));
            break;

          case "insert-tag":
            var gizmo = {
              tag: e.detail.value
            };
            var haxElement; // get schema for that version of events

            var schema = _haxStore.HAXStore.haxSchemaFromTag(e.detail.value);

            if (target.getAttribute("data-demo-schema") && schema && schema.demoSchema && schema.demoSchema) {
              haxElement = schema.demoSchema[0];
            } else {
              // support if anything else is manually defining what to inject
              // or a baseline if we didn't have a demonstration schema supplied
              var properties = JSON.parse(target.getAttribute("event-properties"));
              var innerContent = target.getAttribute("event-content");

              if (properties == null) {
                properties = {};
              }

              if (innerContent == null) {
                innerContent = "";
              } // most likely empty values but just to be safe


              haxElement = _haxStore.HAXStore.haxElementPrototype(gizmo, properties, innerContent);
            }

            this.shadowRoot.querySelector("#settingscollapse").expand();
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: haxElement
            }));
            break;

          case "open-preferences":
            this.shadowRoot.querySelector("simple-popover[for='mapbtn']").hidden = true;
            this.shadowRoot.querySelector("simple-popover[for='prefbtn']").hidden = !this.shadowRoot.querySelector("simple-popover[for='prefbtn']").hidden;
            this.shadowRoot.querySelector("hax-preferences-dialog").reloadPreferencesForm();
            break;

          case "toggle-element-align":
            this.elementAlign = this.elementAlign === "right" ? "left" : "right";
            break;

          case "toggle-tray-size":
            this.collapsed = !this.collapsed;
            break;

          case "open-map":
            this.shadowRoot.querySelector("simple-popover[for='prefbtn']").hidden = true;
            this.shadowRoot.querySelector("simple-popover[for='mapbtn']").hidden = !this.shadowRoot.querySelector("simple-popover[for='mapbtn']").hidden;
            this.shadowRoot.querySelector("hax-map").updateHAXMap();
            break;

          case "start-tour":
            window.SimpleTourManager.requestAvailability().startTour("hax");
            break;

          case "undo":
            _haxStore.HAXStore.activeHaxBody.undo();

            break;

          case "redo":
            _haxStore.HAXStore.activeHaxBody.redo();

            break;

          case "cancel":
            if (confirm("Changes have not been saved, Click OK to close HAX or Cancel to continue editing.")) {
              _haxStore.HAXStore.editMode = false;
              this.dispatchEvent(new CustomEvent("hax-cancel", {
                bubbles: true,
                composed: true,
                cancelable: false,
                detail: e.detail
              }));
            }

            break;
        }
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "firstUpdated",

      /**
       * LitElement ready life cycle
       */
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (!this.__setup) {
          this.shadowRoot.querySelector("#settingsform").schematizer = _HAXFields.HaxSchematizer;
          this.shadowRoot.querySelector("#settingsform").elementizer = _HAXFields.HaxElementizer;
          setTimeout(function () {
            _this2.shadowRoot.querySelector(".wrapper").style.margin = _this2.offsetMargin;
          }, 1000);
          this.__setup = true;
          this.shadowRoot.querySelector("#settingsform").addEventListener("click", this.__simpleFieldsClick.bind(this));
          this.shadowRoot.querySelector("#settingsform").addEventListener("value-changed", this.__valueChangedEvent.bind(this)); // fire an event that this is a core piece of the system

          this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              piece: "haxTray",
              object: this
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) add content (menu)",
              context: this.shadowRoot.querySelector('#addcollapse div[slot="heading"]'),
              callback: "click"
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) element settings (menu)",
              context: this.shadowRoot.querySelector('#settingscollapse div[slot="heading"]'),
              callback: "click"
            }
          }));
          this.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: (collapse)(open)(expand)(toggle) search (menu)",
              context: this.shadowRoot.querySelector('#searchapps div[slot="heading"]'),
              callback: "click"
            }
          }));
        }
      }
      /**
       * LitElement properties changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "editMode") {
            if (_this3.editMode) {
              _haxStore.HAXStore.refreshActiveNodeForm();
            }

            _this3._editModeChanged(_this3.editMode);
          }

          if (propName == "offsetMargin") {
            setTimeout(function () {
              _this3.shadowRoot.querySelector(".wrapper").style.margin = _this3.offsetMargin;
            }, 0);
          } // collaped menu state change


          if (propName == "collapsed") {
            if (_this3[propName]) {
              _this3.traySizeIcon = "hax:arrow-expand-left";
              _this3.traySizeText = "Expand"; // accessibility to disable entering panels that are not visible

              _this3.shadowRoot.querySelector("a11y-collapse-group").setAttribute("aria-disabled", "true");

              _this3.shadowRoot.querySelector("a11y-collapse-group").setAttribute("tabindex", "-1");

              _this3._editModeChanged(_this3.editMode);
            } else {
              _this3.traySizeIcon = "hax:arrow-expand-right";
              _this3.traySizeText = "Collapse"; // a11y clean up to match state

              _this3.shadowRoot.querySelector("a11y-collapse-group").removeAttribute("aria-disabled");

              _this3.shadowRoot.querySelector("a11y-collapse-group").removeAttribute("tabindex");
            }
          } //


          if (propName == "elementAlign") {
            if (_this3[propName] == "left") {
              _this3.menuAlignName = "Right align menu";
            } else {
              _this3.menuAlignName = "Left align menu";
            }
          } // active Gizmo changed


          if (propName == "activeGizmo") {
            if (_this3.activeGizmo) {
              _this3.activeTagName = _this3.activeGizmo.title + " Settings";
              _this3.activeTagIcon = _this3.activeGizmo.icon;

              if (!oldValue && !_this3.shadowRoot.querySelector("#settingscollapse").expanded) {
                _this3.shadowRoot.querySelector('#settingscollapse div[slot="heading"]').click();
              }
            } else {
              _this3.activeTagName = "Select an element";
              _this3.activeTagIcon = "icons:settings";

              if (!_this3.shadowRoot.querySelector("#addcollapse").expanded) {
                _this3.shadowRoot.querySelector('#addcollapse div[slot="heading"]').click();
              }
            }
          } // active node changed


          if (propName == "activeNode") {
            if (_this3.activeNode && _this3.activeNode.tagName) {
              _this3.shadowRoot.querySelector("#settingscollapse").disabled = false;

              if (_this3.editMode) {
                _haxStore.HAXStore.refreshActiveNodeForm();
              }
            } else {
              _this3.activeTagName = "Select an element to configure";
              _this3.activeTagIcon = "icons:settings";
              _this3.shadowRoot.querySelector("#settingscollapse").disabled = true;
            }
          }
        });
      }
      /**
       * When the preview node is updated, pull schema associated with it
       */

    }, {
      key: "_setupForm",
      value: function _setupForm() {
        var _this4 = this;

        var activeNode = this.activeNode;
        this._initial = true;
        this.activeValue = {
          settings: {
            layout: {
              __position: "hax-align-left",
              __scale: 100
            },
            configure: {},
            advanced: {}
          }
        };
        this.shadowRoot.querySelector("#settingsform").fields = [];
        this.shadowRoot.querySelector("#settingsform").value = {}; // see if we can get schema off of this.

        if (activeNode.tagName && _haxStore.HAXStore.elementList[activeNode.tagName.toLowerCase()]) {
          var props = _haxStore.HAXStore.elementList[activeNode.tagName.toLowerCase()]; // generate a human name for this


          if (babelHelpers.typeof(props.gizmo.title) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.humanName = activeNode.tagName.replace("-", " ").toLowerCase();
          } else {
            this.humanName = props.gizmo.title;
          } // first, allow element properties to dictate defaults


          for (var property in this.activeHaxElement.properties) {
            props.settings.configure.forEach(function (el) {
              if (el.property === property) {
                _this4.activeValue.settings.configure[property] = _this4.activeHaxElement.properties[property];
              }

              if (el.attribute === property) {
                _this4.activeValue.settings.configure[property] = _this4.activeHaxElement.properties[property];
              }

              if (el.slot === property) {
                _this4.activeValue.settings.configure[property] = _this4.activeHaxElement.properties[property];
              }
            });
            props.settings.advanced.forEach(function (el) {
              if (el.property === property) {
                _this4.activeValue.settings.advanced[property] = _this4.activeHaxElement.properties[property];
              }

              if (el.attribute === property) {
                _this4.activeValue.settings.advanced[property] = _this4.activeHaxElement.properties[property];
              }

              if (el.slot === property) {
                _this4.activeValue.settings.advanced[property] = _this4.activeHaxElement.properties[property];
              }
            });
          } // now we need to parse through for slotted items
          // build a fake tree, then walk the configuration / advanced settings
          // looking for slot types


          var tmp = document.createElement("div");
          tmp.innerHTML = this.activeHaxElement.content; // step through each key

          tmp.childNodes.forEach(function (el) {
            // ensure we have a dom node and it isnt empty
            if (el.nodeType === 1 && el.innerHTML !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              // walk props looking for a match
              props.settings.configure.forEach(function (prop) {
                // if we have a slot to match in the property AND it matches the attr
                if (prop.slot === el.getAttribute("slot")) {
                  _this4.activeValue.settings.configure[prop.slot] = el.innerHTML;
                } // no slot and it didnt match so it has no slot
                else if (prop.slot == "" && (el.getAttribute("slot") == null || el.getAttribute("slot") == "null")) {
                    _this4.activeValue.settings.configure[prop.slot] = el.innerHTML;
                  }
              }); // now advanced

              props.settings.advanced.forEach(function (prop) {
                if (prop.slot === el.getAttribute("slot")) {
                  _this4.activeValue.settings.advanced[prop.slot] = el.innerHTML;
                } // no slot and it didnt match so it has no slot
                else if (prop.slot == "" && (el.getAttribute("slot") == null || el.getAttribute("slot") == "null")) {
                    _this4.activeValue.settings.advanced[prop.slot] = el.innerHTML;
                  }
              });
            }
          }); // then we need to work on the layout piece

          if (activeNode.style.width != "") {
            this.activeValue.settings.layout.__scale = activeNode.style.width.replace("%", "");
          } else {
            this.activeValue.settings.layout.__scale = 100;
          }

          if (activeNode.style.display == "block" && activeNode.style.margin == "0px auto" && activeNode.style.float == "right") {
            this.activeValue.settings.layout.__position = "hax-align-right";
          } else if (activeNode.style.display == "block" && activeNode.style.margin == "0px auto") {
            this.activeValue.settings.layout.__position = "hax-align-center";
          } else {
            this.activeValue.settings.layout.__position = "hax-align-left";
          }

          this.activeHaxElement.properties.__scale = this.activeValue.settings.layout.__scale;
          this.activeHaxElement.properties.__position = this.activeValue.settings.layout.__position; // tabs / deep objects require us to preview the value w/ the path correctly

          props.settings.configure.forEach(function (val, key) {
            if (props.settings.configure[key].attribute) {
              props.settings.configure[key].property = props.settings.configure[key].attribute;
            }

            if (props.settings.configure[key].slot) {
              props.settings.configure[key].property = props.settings.configure[key].slot;
            }
          });
          props.settings.advanced.forEach(function (val, key) {
            if (props.settings.advanced[key].attribute) {
              props.settings.advanced[key].property = props.settings.advanced[key].attribute;
            }

            if (props.settings.advanced[key].slot) {
              props.settings.advanced[key].property = props.settings.advanced[key].slot;
            }
          });
          props.settings.layout = []; // test if this element can be aligned

          if (props.canPosition) {
            props.settings.layout.push({
              property: "__position",
              title: "Alignment",
              description: "Align content relative to other content",
              inputMethod: "select",
              value: this.activeValue.settings.layout.__position,
              options: {
                "hax-align-left": "Left",
                "hax-align-center": "Center",
                "hax-align-right": "Right"
              }
            });
          } // test if this element can be scaled


          if (props.canScale) {
            props.settings.layout.push({
              property: "__scale",
              title: "Width",
              description: "Scale and resize content",
              inputMethod: "slider",
              value: this.activeValue.settings.layout.__scale,
              min: props.canScale.min ? props.canScale.min : 12.5,
              max: props.canScale.max ? props.canScale.max : 100,
              step: props.canScale.step ? props.canScale.step : 12.5
            });
          } // establish tabs container


          this.activeSchema = [{
            property: "settings",
            inputMethod: "tabs",
            properties: []
          }]; // array of things to forcibly disable

          var disable = []; // see if we have any configure settings or disable

          if (props.settings.configure.length > 0) {
            this.activeSchema[0].properties.push({
              property: "configure",
              title: "Configure",
              description: "Configure the element",
              properties: props.settings.configure
            });
          } else {
            this.activeSchema[0].properties.push({
              property: "configure",
              title: "Configure",
              description: "Configure the element",
              disabled: true
            });
          } // see if we have any layout settings or disable


          if (props.settings.layout.length > 0) {
            this.activeSchema[0].properties.push({
              property: "layout",
              title: "Layout",
              description: "Position the element relative to other items",
              properties: props.settings.layout
            });
          } else {
            this.activeSchema[0].properties.push({
              property: "layout",
              title: "Layout",
              description: "Position the element relative to other items",
              disabled: true
            });
          } // see if we have any configure settings or disable


          if (props.settings.advanced.length > 0) {
            this.activeSchema[0].properties.push({
              property: "advanced",
              title: "Advanced",
              description: "Advanced element settings",
              properties: props.settings.advanced
            });
          } else {
            this.activeSchema[0].properties.push({
              property: "advanced",
              title: "Advanced",
              description: "Advanced element settings",
              disabled: true
            });
          }

          this.__activePropSchema = props;
          this.shadowRoot.querySelector("#settingsform").fields = this.activeSchema;
          this.shadowRoot.querySelector("#settingsform").value = this.activeValue;
        }
      }
      /**
       * Convert an object to an array
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
      /**
       * Notice change in values from below
       */

    }, {
      key: "__valueChangedEvent",
      value: function __valueChangedEvent(e) {
        var _this5 = this;

        if (this.editMode && e.detail.value && e.detail.value.settings) {
          var setAhead;
          var propTmp;
          var tmpel;
          var attr;

          (function () {
            var settings = e.detail.value.settings;
            var settingsKeys = {
              advanced: "advanced",
              configure: "configure",
              layout: "layout"
            };

            var _loop = function _loop(key) {
              var _loop2 = function _loop2(prop) {
                setAhead = false;

                if (settings[key][prop] != null && !settings[key][prop].readOnly) {
                  // prefix is a special attribute and must be handled this way
                  if (prop === "prefix" && settings[key][prop] != "") {
                    _this5.activeNode.setAttribute("prefix", settings[key][prop]);

                    setAhead = true;
                  } // this is a special internal held "property" for layout stuff
                  else if (key === "layout" && prop === "__position") {
                      setAhead = true;

                      if (!_this5._initial) {
                        clearTimeout(_this5.__contextValueDebounce);
                        _this5.__contextValueDebounce = setTimeout(function () {
                          _this5.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                            bubbles: true,
                            composed: true,
                            detail: {
                              eventName: settings[key][prop],
                              value: settings[key][prop]
                            }
                          }));
                        }, 50);
                      }
                    } // this is a special internal held "property" for layout stuff
                    else if (key === "layout" && prop === "__scale") {
                        setAhead = true;

                        if (!_this5._initial) {
                          clearTimeout(_this5.__contextSizeDebounce);
                          _this5.__contextSizeDebounce = setTimeout(function () {
                            _this5.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                              bubbles: true,
                              composed: true,
                              detail: {
                                eventName: "hax-size-change",
                                value: settings[key][prop]
                              }
                            }));
                          }, 50);
                        }
                      } // try and set the pop directly if it is a prop already set
                      // check on prototype, then in properties object if it has one
                      // then by seeing if we have an array / object
                      else if (_this5.activeNode.hasOwnProperty(prop) || _this5.activeNode.properties && _this5.activeNode.properties.hasOwnProperty(prop) || settings[key][prop] != null && settings[key][prop].constructor === Array || settings[key][prop] != null && settings[key][prop].constructor === Object) {
                          try {
                            if (settings[key][prop].constructor === Array) {
                              _this5.activeNode[prop] = babelHelpers.toConsumableArray(settings[key][prop]);
                            } else if (settings[key][prop].constructor === Object) {
                              _this5.activeNode[prop] = _objectSpread({}, settings[key][prop]);
                            } else {
                              _this5.activeNode[prop] = settings[key][prop];
                            }

                            setAhead = true;
                          } catch (e) {
                            console.warn(e);
                            setAhead = false;
                          }
                        } else {
                          // need to specifically walk through slots if there is anything
                          // that says it has to come from a slot
                          for (propTmp in _this5.__activePropSchema.settings[key]) {
                            if (_this5.__activePropSchema.settings[key][propTmp].slot == prop) {
                              var slotTag = "span";

                              if (_this5.__activePropSchema.settings[key][propTmp].slotWrapper) {
                                slotTag = _this5.__activePropSchema.settings[key][propTmp].slotWrapper;
                              } else if (_this5.activeNode.tagName.toLowerCase() === "code-editor") {
                                slotTag = "template";
                              }

                              tmpel = document.createElement(slotTag);

                              if (_this5.__activePropSchema.settings[key][propTmp].slotAttributes) {
                                for (attr in _this5.__activePropSchema.settings[key][propTmp].slotAttributes) {
                                  tmpel.setAttribute(attr, _this5.__activePropSchema.settings[key][propTmp].slotAttributes[attr]);
                                }
                              } // support unnamed slots


                              if (_this5.__activePropSchema.settings[key][propTmp].slot !== "") {
                                tmpel.slot = _this5.__activePropSchema.settings[key][propTmp].slot;
                              }

                              tmpel.innerHTML = settings[key][prop];
                              var cloneIt = tmpel.cloneNode(true);
                              setAhead = true; // inject the slotted content but use text nodes if this is a text element

                              if (_haxStore.HAXStore.isTextElement(_this5.activeNode)) {
                                _this5.activeNode.innerHTML = tmpel.innerHTML;
                              } else {
                                // wipe just the slot in question
                                (0, _utils.wipeSlot)(_this5.activeNode, _this5.__activePropSchema.settings[key][propTmp].slot);

                                _this5.activeNode.appendChild(cloneIt);
                              }
                            }
                          }
                        } // this will get reached often but tough to know if we had a slot


                  if (!setAhead) {
                    try {
                      // silly but this is the spec way to do a boolean
                      if (settings[key][prop] === true) {
                        _this5.activeNode.setAttribute((0, _utils.camelCaseToDash)(prop), (0, _utils.camelCaseToDash)(prop));
                      } else if (settings[key][prop] === false || settings[key][prop] === "") {
                        _this5.activeNode.removeAttribute((0, _utils.camelCaseToDash)(prop));
                      } else {
                        _this5.activeNode.setAttribute((0, _utils.camelCaseToDash)(prop), settings[key][prop]);
                      }
                    } catch (e) {
                      console.warn(e);
                      console.warn(prop, settings[key][prop]);
                    }
                  }
                } else {
                  _this5.activeNode.removeAttribute((0, _utils.camelCaseToDash)(prop));
                }
              };

              for (var prop in settings[key]) {
                _loop2(prop);
              }
            };

            for (var key in settingsKeys) {
              _loop(key);
            }
          })();
        }

        setTimeout(function () {
          if (_this5._initial) {
            _this5._initial = false;
          }
        }, 51);
      }
      /**
       * _editModeChanged
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue) {
        if (newValue) {
          this.__tipText = "Save";
          this.shadowRoot.querySelector("#button").icon = "save";
        } else {
          this.__tipText = "Edit";
          this.shadowRoot.querySelector("#button").icon = "create";
        }
      }
      /**
       * Edit clicked, activate
       */

    }, {
      key: "_clickEditButton",
      value: function _clickEditButton(e) {
        _haxStore.HAXStore.editMode = true;
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Toggle the drawer when the button is clicked.
       */

    }, {
      key: "_clickSaveButton",
      value: function _clickSaveButton(e) {
        _haxStore.HAXStore.editMode = false;
        this.dispatchEvent(new CustomEvent("hax-save", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: e.detail
        }));
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject4_be740c6054f111eba18757df1555c032())];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxTray), "properties", this)), {}, {
          __tipText: {
            type: String
          },
          menuAlignName: {
            type: String
          },
          offsetMargin: {
            type: String,
            attribute: "offset-margin"
          },
          collapsed: {
            type: Boolean,
            reflect: true
          },
          traySizeIcon: {
            type: String
          },
          traySizeText: {
            type: String
          },

          /**
           * Form values for active node
           */
          activeValue: {
            type: Object
          },

          /**
           * Form schema for active node
           */
          activeSchema: {
            type: Object
          },

          /**
           * Alignment of the initial edit button
           */
          elementAlign: {
            type: String,
            reflect: true,
            attribute: "element-align"
          },

          /**
           * Light variant for save button
           */
          light: {
            type: Boolean,
            reflect: true
          },

          /**
           * If we can currently undo based on stack position
           */
          canUndo: {
            type: Boolean,
            attribute: "can-undo"
          },

          /**
           * If we can currently redo based on stack position
           */
          canRedo: {
            type: Boolean,
            attribute: "can-redo"
          },

          /**
           * Showing preferences area.
           */
          hidePreferencesButton: {
            type: Boolean,
            reflect: true,
            attribute: "hide-preferences-button"
          },

          /**
           * Showing button area at all a well as internal
           * state managing buttons like cancel and save
           */
          hidePanelOps: {
            type: Boolean,
            reflect: true,
            attribute: "hide-panel-ops"
          },

          /**
           * Global preferences for HAX overall
           */
          globalPreferences: {
            type: Object
          },

          /**
           * Global active node so we know if we need to disable contextual settings
           */
          activeNode: {
            type: Object
          },

          /**
           * Tag name / what to display based on active element
           */
          activeTagIcon: {
            type: String
          },
          activeTagName: {
            type: String
          },
          activeGizmo: {
            type: Object
          },

          /**
           * State of the panel
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          }
        });
      }
    }]);
    return HaxTray;
  }((0, _SimpleTourFinder2.SimpleTourFinder)((0, _utils.winEventsElement)(_litElement.LitElement)));

  _exports.HaxTray = HaxTray;
  window.customElements.define(HaxTray.tag, HaxTray);
});