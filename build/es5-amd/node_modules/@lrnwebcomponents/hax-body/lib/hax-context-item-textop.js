define(["exports", "../../../lit-element/lit-element.js", "../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "./hax-toolbar-item.js"], function (_exports, _litElement, _ironA11yKeys, _haxToolbarItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxContextItemTextop = void 0;

  function _templateObject2_680b8770d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <iron-a11y-keys\n        id=\"a11y\"\n        keys=\"enter\"\n        @keys-pressed=\"", "\"\n      ></iron-a11y-keys>\n      <hax-toolbar-item\n        id=\"button\"\n        ?disabled=\"", "\"\n        icon=\"", "\"\n        ?hidden=\"", "\"\n        tooltip-direction=\"", "\"\n        tooltip=\"", "\"\n        @mousedown=\"", "\"\n        ?mini=\"", "\"\n        ?action=\"", "\"\n        ?menu=\"", "\"\n        ?light=\"", "\"\n      >\n        <slot></slot>\n      </hax-toolbar-item>\n    "]);

    _templateObject2_680b8770d34d11ea880ba1e93364c49c = function _templateObject2_680b8770d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_680b8770d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          box-sizing: border-box;\n        }\n        :host([menu]) {\n          display: flex;\n          width: 100%;\n        }\n      "]);

    _templateObject_680b8770d34d11ea880ba1e93364c49c = function _templateObject_680b8770d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `hax-context-item-textop`
   * @element hax-context-item-textop
   * `A single button in the hax context menus for consistency. This one uses the mousedown event becasue tap won't work in safari / firefox / IE while maintaining focus inside the contenteditable area (stupid, I know)`
   * @microcopy - the mental model for this element
   * - context - menu in the page the user can select an item from, this being 1 option in that list
   * - button - an item that expresses what interaction you will have with the content.
   */
  var HaxContextItemTextop =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxContextItemTextop, _LitElement);
    babelHelpers.createClass(HaxContextItemTextop, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_680b8770d34d11ea880ba1e93364c49c())];
      }
    }]);

    function HaxContextItemTextop() {
      var _this;

      babelHelpers.classCallCheck(this, HaxContextItemTextop);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxContextItemTextop).call(this));
      _this.label = "";
      _this.action = false;
      _this.disabled = false;
      _this.light = false;
      _this.mini = false;
      _this.menu = false;
      _this.direction = "top";
      _this.icon = "editor:text-fields";
      _this.eventName = "button";
      _this.inputMethod = null;
      _this.propertyToBind = null;
      _this.slotToBind = null;
      _this.value = "";
      return _this;
    }

    babelHelpers.createClass(HaxContextItemTextop, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_680b8770d34d11ea880ba1e93364c49c(), this._fireEvent, this.disabled, this.icon, !this.icon, this.direction, this.label, this._fireEvent, this.mini, this.action, this.menu, this.light);
      }
    }, {
      key: "firstUpdated",

      /**
       * attached life cycle
       */
      value: function firstUpdated(changedProperties) {
        // bind keyboard to button press
        this.shadowRoot.querySelector("#a11y").target = this.shadowRoot.querySelector("#button");
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        if (!this.disabled) {
          this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              target: this,
              eventName: this.eventName,
              value: this.value
            }
          }));
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-context-item-textop";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Light theme for toolbar item.
           */
          light: {
            type: Boolean,
            value: false
          },

          /**
           * disabled state
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * an optional value to send along in the press. Allows for
           * reusing events more easily
           */
          value: {
            type: String
          },

          /**
           * Mini theme for making things small and round.
           */
          mini: {
            type: Boolean,
            value: false
          },

          /**
           * Style to be presented in a menu
           */
          menu: {
            type: Boolean,
            value: false
          },

          /**
           * Direction for the tooltip
           */
          direction: {
            type: String
          },

          /**
           * Icon for the button.
           */
          icon: {
            type: String,
            reflect: true
          },

          /**
           * Label for the button.
           */
          label: {
            type: String,
            reflect: true
          },
          action: {
            type: Boolean
          },

          /**
           * Name of the event to bubble up as being tapped.
           * This can be used to tell other elements what was
           * clicked so it can take action appropriately.
           */
          eventName: {
            type: String,
            reflect: true,
            attribute: "event-name"
          },

          /**
           * Method of input to display when activated. This is
           * only used when triggered as part of haxProperties
           */
          inputMethod: {
            type: String,
            reflect: true,
            attribute: "input-method"
          },

          /**
           * Optional slot to bind this value to.
           */
          propertyToBind: {
            type: String,
            reflect: true,
            attribute: "property-to-bind"
          },

          /**
           * Optional slot to bind this value to.
           */
          slotToBind: {
            type: String,
            reflect: true,
            attribute: "slot-to-bind"
          },

          /**
           * Optional description for this item.
           */
          description: {
            type: String,
            reflect: true
          }
        };
      }
    }]);
    return HaxContextItemTextop;
  }(_litElement.LitElement);

  _exports.HaxContextItemTextop = HaxContextItemTextop;
  window.customElements.define(HaxContextItemTextop.tag, HaxContextItemTextop);
});