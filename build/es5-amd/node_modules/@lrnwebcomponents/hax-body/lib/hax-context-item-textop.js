define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "./hax-toolbar-item.js", "../../../@polymer/iron-icons/iron-icons.js", "../../../@polymer/iron-icons/editor-icons.js", "../../../@polymer/iron-icons/device-icons.js", "../../../@polymer/iron-icons/hardware-icons.js", "../../../@polymer/iron-icons/social-icons.js", "../../../@polymer/iron-icons/av-icons.js", "../../../@polymer/iron-icons/image-icons.js", "../../../@polymer/iron-icons/maps-icons.js", "../../../@polymer/neon-animation/neon-animation.js"], function (_exports, _polymerElement, _ironA11yKeys, _haxToolbarItem, _ironIcons, _editorIcons, _deviceIcons, _hardwareIcons, _socialIcons, _avIcons, _imageIcons, _mapsIcons, _neonAnimation) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxContextItemTextop = void 0;

  function _templateObject_37030000e3b511e9b0d5a5c01151ac03() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-flex;\n          box-sizing: border-box;\n          height: 36px;\n          width: 36px;\n        }\n        :host([menu]) {\n          display: flex;\n          width: 100%;\n        }\n      </style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[target]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_fireEvent\"\n      ></iron-a11y-keys>\n      <hax-toolbar-item\n        id=\"button\"\n        icon=\"[[icon]]\"\n        hidden$=\"[[!icon]]\"\n        tooltip-direction=\"[[direction]]\"\n        tooltip=\"[[label]]\"\n        on-mousedown=\"_fireEvent\"\n        mini=\"[[mini]]\"\n        menu=\"[[menu]]\"\n        light=\"[[light]]\"\n      >\n        <slot></slot>\n      </hax-toolbar-item>\n    "], ["\n      <style>\n        :host {\n          display: inline-flex;\n          box-sizing: border-box;\n          height: 36px;\n          width: 36px;\n        }\n        :host([menu]) {\n          display: flex;\n          width: 100%;\n        }\n      </style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[target]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_fireEvent\"\n      ></iron-a11y-keys>\n      <hax-toolbar-item\n        id=\"button\"\n        icon=\"[[icon]]\"\n        hidden\\$=\"[[!icon]]\"\n        tooltip-direction=\"[[direction]]\"\n        tooltip=\"[[label]]\"\n        on-mousedown=\"_fireEvent\"\n        mini=\"[[mini]]\"\n        menu=\"[[menu]]\"\n        light=\"[[light]]\"\n      >\n        <slot></slot>\n      </hax-toolbar-item>\n    "]);

    _templateObject_37030000e3b511e9b0d5a5c01151ac03 = function _templateObject_37030000e3b511e9b0d5a5c01151ac03() {
      return data;
    };

    return data;
  }

  /**
   * `hax-context-item-textop`
   * `A single button in the hax context menus for consistency. This one uses the mousedown event becasue tap won't work in safari / firefox / IE while maintaining focus inside the contenteditable area (stupid, I know)`
   * @microcopy - the mental model for this element
   * - context - menu in the page the user can select an item from, this being 1 option in that list
   * - button - an item that expresses what interaction you will have with the content.
   */
  var HaxContextItemTextop =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxContextItemTextop, _PolymerElement);

    function HaxContextItemTextop() {
      babelHelpers.classCallCheck(this, HaxContextItemTextop);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxContextItemTextop).call(this));
    }

    babelHelpers.createClass(HaxContextItemTextop, [{
      key: "connectedCallback",

      /**
       * attached life cycle
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxContextItemTextop.prototype), "connectedCallback", this).call(this); // bind keyboard to button press

        this.target = this.shadowRoot.querySelector("#button");
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            target: this,
            eventName: this.eventName
          }
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_37030000e3b511e9b0d5a5c01151ac03());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-context-item-textop";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * target for the iron-a11y-keys element.
           */
          target: {
            type: Object
          },

          /**
           * Light theme for toolbar item.
           */
          light: {
            type: Boolean,
            value: false
          },

          /**
           * Mini theme for making things small and round.
           */
          mini: {
            type: Boolean,
            value: false
          },

          /**
           * Style to be presented in a menu
           */
          menu: {
            type: Boolean,
            value: false
          },

          /**
           * Direction for the tooltip
           */
          direction: {
            type: String,
            value: "top"
          },

          /**
           * Icon for the button.
           */
          icon: {
            type: String,
            value: "editor:text-fields",
            reflectToAttribute: true
          },

          /**
           * Label for the button.
           */
          label: {
            type: String,
            reflectToAttribute: true
          },

          /**
           * Name of the event to bubble up as being tapped.
           * This can be used to tell other elements what was
           * clicked so it can take action appropriately.
           */
          eventName: {
            type: String,
            value: "button",
            reflectToAttribute: true
          },

          /**
           * Method of input to display when activated. This is
           * only used when triggered as part of haxProperties
           */
          inputMethod: {
            type: String,
            value: null,
            reflectToAttribute: true
          },

          /**
           * Optional slot to bind this value to.
           */
          propertyToBind: {
            type: String,
            value: null,
            reflectToAttribute: true
          },

          /**
           * Optional slot to bind this value to.
           */
          slotToBind: {
            type: String,
            value: null,
            reflectToAttribute: true
          },

          /**
           * Optional description for this item.
           */
          description: {
            type: String,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return HaxContextItemTextop;
  }(_polymerElement.PolymerElement);

  _exports.HaxContextItemTextop = HaxContextItemTextop;
  window.customElements.define(HaxContextItemTextop.tag, HaxContextItemTextop);
});