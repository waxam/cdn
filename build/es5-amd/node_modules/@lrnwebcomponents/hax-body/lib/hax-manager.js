define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/app-layout/app-drawer/app-drawer.js","../../../@polymer/paper-input/paper-input.js","../../../@polymer/paper-styles/paper-styles.js","../../../@polymer/paper-button/paper-button.js","../../../@polymer/paper-icon-button/paper-icon-button.js","../../../@polymer/iron-pages/iron-pages.js","../../../@polymer/iron-icons/iron-icons.js","../../../@polymer/iron-icon/iron-icon.js","../../simple-colors/simple-colors.js","../../../@vaadin/vaadin-upload/vaadin-upload.js","./hax-preview.js","./hax-app-browser.js","./hax-gizmo-browser.js","./hax-shared-styles.js"],function(_polymerLegacy,_polymerDom,_appDrawer,_paperInput,_paperStyles,_paperButton,_paperIconButton,_ironPages,_ironIcons,_ironIcon,_simpleColors,_vaadinUpload,_haxPreview,_haxAppBrowser,_haxGizmoBrowser,_haxSharedStyles){"use strict";function _templateObject_15c5f18066f711e999fe19a29ec80b99(){var data=babelHelpers.taggedTemplateLiteral(["\n    <custom-style>\n      <style is=\"custom-style\" include=\"hax-shared-styles simple-colors\">\n        :host {\n          display: block;\n          color: var(--hax-color-text);\n        }\n        #dialog {\n          color: var(--hax-color-text);\n          z-index: 10000;\n          padding: 56px 0;\n          margin-top: 56px;\n          --app-drawer-width: 400px;\n          --app-drawer-content-container: {\n            background-color: #ffffff;\n          }\n        }\n        #closedialog {\n          float: right;\n          top: 124px;\n          right: 0;\n          position: absolute;\n          padding: 8px;\n          margin: 0;\n          color: var(--hax-color-text);\n          background-color: transparent;\n          width: 40px;\n          height: 40px;\n          min-width: unset;\n        }\n        :host([active-page=\"0\"]) #dialog {\n          --app-drawer-width: 400px;\n        }\n        :host([active-page=\"1\"]) #dialog {\n          --app-drawer-width: 800px;\n        }\n        :host([active-page=\"2\"]) #dialog {\n          --app-drawer-width: 800px;\n        }\n        :host([active-step]) #dialog {\n          --app-drawer-width: 1000px;\n        }\n        :host([searching]) #dialog {\n          --app-drawer-width: 1000px;\n        }\n        .title {\n          position: relative;\n          padding: 16px;\n          outline: 0;\n          font-weight: 600;\n          text-align: left;\n          margin: 0;\n          background-color: var(--hax-color-menu-heading-bg);\n          font-size: 18px;\n          line-height: 18px;\n          font-family: \"Noto Serif\", serif;\n          color: var(--hax-color-text);\n        }\n\n        #preview {\n          height: 100%;\n        }\n        vaadin-upload {\n          --primary-color: var(--hax-color-accent1);\n          --primary-font-color: #ffffff;\n          --dark-primary-color: #ffffff;\n          --light-primary-color: var(--hax-color-accent1);\n          --error-color: darkred;\n          color: #ffffff;\n          display: block;\n          padding: 32px !important;\n          --vaadin-upload-button-add-wrapper: {\n            border: 2px solid #ffffff;\n            background-color: var(--hax-color-accent1);\n            color: #ffffff;\n            display: block;\n          }\n          --vaadin-upload-buttons-primary: {\n            display: block;\n            width: 100%;\n            flex: unset;\n            -webkit-flex: unset;\n          }\n          --vaadin-upload-button-add: {\n            color: #000000;\n            display: block;\n            flex: unset;\n            -webkit-flex: unset;\n            text-align: center;\n          }\n          --vaadin-upload-drop-label: {\n            color: #ffffff;\n            display: block;\n            padding: 16px;\n          }\n          --vaadin-upload-drop-label-dragover: {\n            color: #ffffff;\n          }\n          --vaadin-upload-file-list: {\n            padding: 16px;\n            margin: 0;\n            color: #ffffff;\n          }\n          --vaadin-upload-file: {\n            color: #ffffff;\n          }\n        }\n        vaadin-upload[dragover] {\n          border-color: #396;\n        }\n        vaadin-upload-file {\n          --disabled-text-color: #222222;\n        }\n        .add-area-content-wrapper {\n          padding: 0 16px;\n        }\n        .add-url-area,\n        .add-upload-area {\n          margin: 16px 0;\n        }\n        .url-description {\n          font-size: 18px;\n          color: #ffffff;\n          line-height: 22px;\n          font-family: sans-serif;\n          letter-spacing: 1px;\n        }\n        #steppages {\n          height: 100%;\n        }\n        #newassetconfigure {\n          width: 100%;\n          margin: 0;\n          padding: 16px;\n          background-color: var(--hax-color-accent1);\n          color: var(--hax-color-accent1-color);\n        }\n        paper-input {\n          color: var(--hax-color-text);\n        }\n        @media screen and (max-width: 550px) {\n          .hide-on-mobile {\n            opacity: 0;\n            visibility: hidden;\n            position: absolute;\n            left: -9999px;\n          }\n          .page-area.hax-manager {\n            padding: 6px;\n          }\n        }\n      </style>\n    </custom-style>\n    <app-drawer id=\"dialog\" opened=\"{{opened}}\" disable-swipe=\"\">\n      <div\n        class=\"dialog-contents\"\n        id=\"dialogcontent\"\n        style=\"height: 100%; overflow: auto;\"\n      >\n        <iron-pages\n          id=\"steppages\"\n          selected=\"{{activeStep}}\"\n          fallback-selection=\"select\"\n          role=\"main\"\n        >\n          <div data-value=\"select\">\n            <iron-pages\n              id=\"activepage\"\n              selected=\"{{activePage}}\"\n              fallback-selection=\"link\"\n            >\n              <div class=\"page-area add-area\">\n                <h3 class=\"title\">[[addTitle]]</h3>\n                <div class=\"add-area-content-wrapper\">\n                  <div class=\"add-url-area\">\n                    <paper-input\n                      id=\"url\"\n                      label=\"URL\"\n                      type=\"url\"\n                      auto-validate=\"\"\n                    ></paper-input>\n                    <div class=\"url-description\">\n                      A full URL with https:// referencing a link that already\n                      exists on the web.\n                    </div>\n                  </div>\n                  <div class=\"add-upload-area\">\n                    <vaadin-upload\n                      form-data-name=\"file-upload\"\n                      id=\"fileupload\"\n                      hidden$=\"[[!canSupportUploads]]\"\n                    ></vaadin-upload>\n                  </div>\n                  <paper-button id=\"newassetconfigure\" raised=\"\"\n                    >Configure item</paper-button\n                  >\n                </div>\n              </div>\n              <div class=\"page-area\">\n                <hax-app-browser id=\"appbrowser\">\n                  <slot></slot>\n                </hax-app-browser>\n              </div>\n              <div class=\"page-area\">\n                <hax-gizmo-browser id=\"gizmobrowser\"></hax-gizmo-browser>\n              </div>\n            </iron-pages>\n          </div>\n          <div style=\"height:100%;\">\n            <hax-preview\n              id=\"preview\"\n              element=\"{{activeHaxElement}}\"\n            ></hax-preview>\n          </div>\n        </iron-pages>\n        <paper-button id=\"closedialog\" on-tap=\"cancel\" hidden$=\"[[activeStep]]\">\n          <iron-icon icon=\"icons:cancel\" title=\"Close dialog\"></iron-icon>\n        </paper-button>\n      </div>\n    </app-drawer>\n  "]);_templateObject_15c5f18066f711e999fe19a29ec80b99=function _templateObject_15c5f18066f711e999fe19a29ec80b99(){return data};return data}/**
`hax-manager`
A LRN element for brokering the UI for api endpoints both in querying and uploading of new media to eventually bubble up an event for hax-body to have content inserted into it. This is a wiring closet of sorts to ensure we can talk to any backend that's returning a slew of widgets / media to insert.

* @demo demo/index.html

@microcopy - the mental model for this element
 - hax-manager - the modal for selecting a app for getting something added to hax-body. This will bubble an event up to an app which will then invoke the haxInsert function on hax-body in order to get the selected item onto the body area for usage.
 - hax-body - the body tag that's beening clicked / focused and built; our WYSIWYG replacement.
 - hax-panel - a panel off to the side that has possible options. Clicking in this panel is most likely what invokes hax-manager to display though this is also managed by a higher app (lrnapp-book in initial development)
 - app - an API end point for querying and returning possible items for insert. For example, if a youtube is a source then it'll be expected to return data that can be mapped in such a way that it can display a grid of videos. Hitting vimeo we'd expect the same thing; enough data to be able to assemble a grid of videos to select / work with.
 - endpoints - much of hax-manager is about routing data to and from the current application to backends. So uploads need to go some place, this is managing the UI aspect of that transaction while expecting to be fed an endpoint to handle the backend aspect.

*/(0,_polymerLegacy.Polymer)({_template:(0,_polymerLegacy.html)(_templateObject_15c5f18066f711e999fe19a29ec80b99()),is:"hax-manager",properties:{/**
     * Track visibility status.
     */opened:{type:Boolean,value:!1,reflectToAttribute:!0/* transition */ /* transition */,observer:"_openedChanged"},/**
     * Title when open.
     */editExistingNode:{type:Boolean,value:!1},/**
     * Title when open.
     */editTitle:{type:String,computed:"_computeEditTitle(editExistingNode)"},/**
     * Active title
     */addTitle:{type:String,value:"Add content"},/**
     * Active step currently selected
     */activeStep:{type:Boolean,reflectToAttribute:!0,value:!1,observer:"_activeStepChanged"},/**
     * Searching mode
     */searching:{type:Boolean,reflectToAttribute:!0,value:!1},/**
     * Active page currently selected
     */activePage:{type:String,reflectToAttribute:!0,value:0,observer:"_activePageChanged"},/**
     * If this can support uploads or not based on presense of a backend
     * this property is synced down from the store
     */canSupportUploads:{type:Boolean,value:!1},/**
     * Active element
     */activeHaxElement:{type:Object,observer:"_activeHaxElementChanged"},/**
     * List of apps so they can be added
     */appList:{type:Array,value:[]},/**
     * Helper so we can upload after prompting where to go.
     */__allowUpload:{type:Boolean,value:!1}},/**
   * Attached to the DOM, now fire that we exist.
   */attached:function attached(){// fire an event that this is the manager
this.fire("hax-register-manager",this);// add event listeners
document.body.addEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this));document.body.addEventListener("hax-app-picker-selection",this._haxAppPickerSelection.bind(this));// specialized support for the place-holder tag
// and a drag and drop event
document.body.addEventListener("place-holder-file-drop",this._placeHolderFileDrop.bind(this));this.$.dialog.addEventListener("iron-overlay-canceled",this.close.bind(this));this.$.dialog.addEventListener("iron-overlay-closed",this.close.bind(this));this.$.closedialog.addEventListener("tap",this.close.bind(this));this.$.newassetconfigure.addEventListener("tap",this.newAssetConfigure.bind(this));this.$.fileupload.addEventListener("upload-before",this._fileAboutToUpload.bind(this));this.$.fileupload.addEventListener("upload-response",this._fileUploadResponse.bind(this))},/**
   * Detached life cycle
   */detached:function detached(){document.body.removeEventListener("hax-store-property-updated",this._haxStorePropertyUpdated.bind(this));document.body.removeEventListener("hax-app-picker-selection",this._haxAppPickerSelection.bind(this));document.body.removeEventListener("place-holder-file-drop",this._placeHolderFileDrop.bind(this));this.$.dialog.removeEventListener("iron-overlay-canceled",this.close.bind(this));this.$.dialog.removeEventListener("iron-overlay-closed",this.close.bind(this));this.$.closedialog.removeEventListener("tap",this.close.bind(this));this.$.newassetconfigure.removeEventListener("tap",this.newAssetConfigure.bind(this));this.$.fileupload.removeEventListener("upload-before",this._fileAboutToUpload.bind(this));this.$.fileupload.removeEventListener("upload-response",this._fileUploadResponse.bind(this))},/**
   * Toggle panel size
   */togglePanelSize:function togglePanelSize(e){this.$.dialog.classList.toggle("grow");this.updateStyles();window.dispatchEvent(new Event("resize"))},/**
   * compute title for edit mode
   */_computeEditTitle:function _computeEditTitle(updateExisting){if(babelHelpers.typeof(this.activeHaxElement)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&updateExisting){return"Update"}else{return"Insert"}},/**
   * A file event was detected from a drag and drop in the interface, most likely
   * from a place-holder tag
   */_placeHolderFileDrop:function _placeHolderFileDrop(e){// reset the manager back to the first page
this.resetManager();// trigger a self open request
this.open();// reference the active place holder element since place holders are
// the only things possible for seeing these
window.HaxStore.instance.activePlaceHolder=e.detail.placeHolderElement;// ! I can't believe this actually works. This takes the event
// ! that was a drop event else where on the page and then repoints
// ! it to simulate the drop event using the same event structure that
// ! would have happened if they had used this element in the first place
this.$.fileupload._onDrop(e.detail)},/**
   * Respond to uploading a file
   */_fileAboutToUpload:function _fileAboutToUpload(e){if(!this.__allowUpload){// cancel the event so we can jump in
e.preventDefault();e.stopPropagation();// look for a match as to what gizmo types it supports
var values={source:e.detail.file.name,type:e.detail.file.type},type=window.HaxStore.guessGizmoType(values),targets=window.HaxStore.getHaxAppStoreTargets(type);// we have no clue what this is.. let's try and guess..
// make sure we have targets
if(1===targets.length){this._haxAppPickerSelection({detail:targets[0]})}else if(0!==targets.length){window.HaxStore.instance.haxAppPicker.presentOptions(targets,type,"Where would you like to upload this "+type+"?","app")}else{window.HaxStore.toast("Sorry, you don't have a storage location that can handle "+type+" uploads!",5e3)}}else{this.__allowUpload=!1}},/**
   * Event for an app being selected from a picker
   * This happens when multiple upload targets support the given type
   */_haxAppPickerSelection:function _haxAppPickerSelection(e){// details for where to upload the file
var connection=e.detail.connection;this.__appUsed=e.detail;this.$.fileupload.method=connection.operations.add.method;var requestEndPoint=connection.protocol+"://"+connection.url;// ensure we build a url correctly
if("/"!=requestEndPoint.substr(requestEndPoint.length-1)){requestEndPoint+="/"}// support local end point modification
if(babelHelpers.typeof(connection.operations.add.endPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){requestEndPoint+=connection.operations.add.endPoint}// support jwt hijacking
if(null!=window.HaxStore.instance.connectionRewrites.appendUploadEndPoint){requestEndPoint+="?"+window.HaxStore.instance.connectionRewrites.appendUploadEndPoint}if(null!=window.HaxStore.instance.connectionRewrites.appendJwt){requestEndPoint+="&"+window.HaxStore.instance.connectionRewrites.appendJwt+"="+localStorage.getItem(window.HaxStore.instance.connectionRewrites.appendJwt)}this.$.fileupload.headers=connection.headers;this.$.fileupload.target=requestEndPoint;// invoke file uploading...
this.__allowUpload=!0;this.$.fileupload.uploadFiles()},/**
   * Respond to successful file upload, now inject url into url field and
   * do a gizmo guess from there!
   */_fileUploadResponse:function _fileUploadResponse(e){// convert response to object
var response=JSON.parse(e.detail.xhr.response),map=this.__appUsed.connection.operations.add.resultMap,data={},item={};// access the app that did the upload
// look for the items element to draw our data from at its root
if(babelHelpers.typeof(this._resolveObjectPath(map.item,response))!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){data=this._resolveObjectPath(map.item,response)}item.type=map.defaultGizmoType;// pull in prop matches
for(var prop in map.gizmo){item[prop]=this._resolveObjectPath(map.gizmo[prop],data)}// another sanity check, if we don't have a url but have a source bind that too
if(babelHelpers.typeof(item.url)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(item.source)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){item.url=item.source}// gizmo type is also supported in the mapping element itself
// Think an asset management backend as opposed to a specific
// type of asset like video. If the item coming across can
// effectively check what kind of gizmo is required for it
// to work then we need to support that asset declaring the
// gizmo type needed
if(babelHelpers.typeof(map.gizmo.type)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){item.type=this._resolveObjectPath(map.gizmo.type,data)}this.$.url.value=item.url;// @todo put in logic to support the response actually
// just outright returning a haxElement. This is rare
// but if the HAX developer has control over the endpoint
// then they could get HAX to streamline some workflows
// or by-pass the gizmo selection step to improve UX
// for end users even further. Examples could be a media
// management system that has remote rendering (cms-token)
// or a highly specific endpoint that we know we can only
// present in one way effectively Box / Google doc viewer.
this.newAssetConfigure()},/**
   * Notice page changed.
   */_activePageChanged:function _activePageChanged(newValue,oldValue){if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.searching=!1;this.updateStyles();if(1===newValue){this.$.appbrowser.resetBrowser()}else if(2===newValue){this.$.gizmobrowser.resetBrowser()}}},/**
   * Store updated, sync.
   */_haxStorePropertyUpdated:function _haxStorePropertyUpdated(e){if(e.detail&&babelHelpers.typeof(e.detail.value)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&e.detail.property){this.set(e.detail.property,e.detail.value)}},/**
   * Notice active element changed.
   */_activeHaxElementChanged:function _activeHaxElementChanged(newValue,oldValue){if(babelHelpers.typeof(oldValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.$.preview.advancedForm=!1;if(babelHelpers.typeof(newValue.tag)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.resetManager()}else{// reset files so it doesn't bloat up
this.$.fileupload.set("files",[]);this.$.dialog.scrollTop=0;this.selectStep("configure")}}},/**
   * Bubble up insert event.
   */insertHaxElement:function insertHaxElement(e){// bubble up the inject event / element to the body
var previewNode=this.$.preview.previewNode;previewNode.removeAttribute("hax-preview-mode");var element=window.HaxStore.nodeToHaxElement(previewNode);element.replace=this.editExistingNode;if(babelHelpers.typeof(this.activeHaxElement.__type)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){element.__type=this.activeHaxElement.__type}element.replacement=previewNode;this.fire("hax-insert-content",element);var toast="New element added!";if(this.editExistingNode){toast="Element updated!"}window.HaxStore.toast(toast,2e3);// close window
this.close()},/**
   * Reset things on the display to their defaults.
   */resetManager:function resetManager(){var activePage=0<arguments.length&&arguments[0]!==void 0?arguments[0]:0;this.selectStep("select");this.activePage=activePage;document.body.style.overflow=null;this.appList=window.HaxStore.instance.appList;this.searching=!1;window.HaxStore.write("activeApp",null,this);window.dispatchEvent(new Event("resize"));this.editExistingNode=!1;this.$.url.value="";this.$.fileupload.headers="";this.$.fileupload.method="";this.$.fileupload.target="";this.__allowUpload=!1},/**
   * Cancel interaction with the modal
   */cancel:function cancel(e){// reset and close dialog
this.close()},/**
   * Open state change.
   */_openedChanged:function _openedChanged(newValue,oldValue){if(oldValue&&!newValue){document.body.style.overflow=null}else if(newValue&&!oldValue){document.body.style.overflow="hidden"}},/**
   * Respond to the modal closing
   */close:function close(e){var normalizedEvent=(0,_polymerDom.dom)(e),local=normalizedEvent.localTarget;if(babelHelpers.typeof(e)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))||local===this.$.dialog||local===this.$.closedialog){// reset the active element which will force this to reset the manager
window.HaxStore.write("activeHaxElement",{},this);this.opened=!1;this.resetManager()}},/**
   * Open the dialog
   */open:function open(e){this.opened=!0},/**
   * Configure asset after upload or URL passed in.
   */newAssetConfigure:function newAssetConfigure(){var values={source:this.$.url.value},type=window.HaxStore.guessGizmoType(values),haxElements=window.HaxStore.guessGizmo(type,values);// we have no clue what this is.. let's try and guess..
// see if we got anything
if(0<haxElements.length){if(1===haxElements.length){if(babelHelpers.typeof(haxElements[0].tag)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){window.HaxStore.write("activeHaxElement",haxElements[0],this)}}else{// hand off to hax-app-picker to deal with the rest of this
window.HaxStore.instance.haxAppPicker.presentOptions(haxElements,type,"Pick how to present the "+type,"gizmo")}}else{window.HaxStore.toast("Sorry, HAX doesn't know how to handle that type of link yet.")}},/**
   * Toggle ourselves.
   */toggleDialog:function toggleDialog(){var toggle=0<arguments.length&&arguments[0]!==void 0?arguments[0]:!0;if(this.opened&&toggle){this.close()}else{window.HaxStore.instance.closeAllDrawers(this)}},/**
   * Set step to configure or insert
   */selectStep:function selectStep(step){if("configure"==step){this.activeStep=!0}else{this.activeStep=!1}},/**
   * Notice step changes
   */_activeStepChanged:function _activeStepChanged(newValue,oldValue){if(newValue||!newValue){this.updateStyles();window.dispatchEvent(new Event("resize"))}},/**
   * Helper to take a multi-dimensional object and convert
   * it's reference into the real value. This allows for variable input defined
   * in a string to actually hit the deeper part of an object structure.
   */_resolveObjectPath:function _resolveObjectPath(path,obj){return path.split(".").reduce(function(prev,curr){return prev?prev[curr]:null},obj||self)}})});