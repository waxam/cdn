define(["exports", "require", "../../../lit-element/lit-element.js", "../../utils/utils.js"], function (_exports, _require, _litElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxTextContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_68913230d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar\n        .selected=\"", "\"\n        ?hide-more=\"", "\"\n        id=\"toolbar\"\n      >\n        <hax-context-item-menu\n          action\n          mini\n          slot=\"primary\"\n          .selected-value=\"", "\"\n          @selected-value-changed=\"", "\"\n          id=\"formatsize\"\n          icon=\"", "\"\n          label=\"Text format\"\n          event-name=\"text-tag\"\n        >\n          <paper-item hidden value=\"\"></paper-item>\n          <paper-item value=\"p\"\n            ><iron-icon icon=\"hax:paragraph\"></iron-icon>Paragraph</paper-item\n          >\n          <paper-item value=\"ul\"\n            ><iron-icon icon=\"editor:format-list-bulleted\"></iron-icon>Bulleted\n            list</paper-item\n          >\n          <paper-item value=\"ol\"\n            ><iron-icon icon=\"editor:format-list-numbered\"></iron-icon>Numbered\n            list</paper-item\n          >\n          <paper-item value=\"h2\"\n            ><iron-icon icon=\"hax:h2\"></iron-icon>Title\n          </paper-item>\n          <paper-item value=\"h3\"\n            ><iron-icon icon=\"hax:h3\"></iron-icon>Content heading\n          </paper-item>\n          <paper-item value=\"h4\"\n            ><iron-icon icon=\"hax:h4\"></iron-icon>Subheading\n          </paper-item>\n          <paper-item value=\"h5\"\n            ><iron-icon icon=\"hax:h5\"></iron-icon>Deep subheading\n          </paper-item>\n          <paper-item value=\"blockquote\"\n            ><iron-icon icon=\"editor:format-quote\"></iron-icon>Blockquote\n          </paper-item>\n          <paper-item value=\"code\"\n            ><iron-icon icon=\"icons:code\"></iron-icon>Code\n          </paper-item>\n        </hax-context-item-menu>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:format-list-bulleted\"\n          event-name=\"text-tag-ul\"\n          label=\"Bulleted list\"\n          .hidden=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:format-list-numbered\"\n          label=\"Numbered list\"\n          event-name=\"text-tag-ol\"\n          .hidden=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:format-indent-decrease\"\n          label=\"Outdent\"\n          event-name=\"text-outdent\"\n          .hidden=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:format-indent-increase\"\n          label=\"Indent\"\n          event-name=\"text-indent\"\n          .hidden=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:format-bold\"\n          label=\"Bold\"\n          class=\"selected-buttons\"\n          event-name=\"text-bold\"\n          ?disabled=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:format-italic\"\n          label=\"Italic\"\n          class=\"selected-buttons\"\n          event-name=\"text-italic\"\n          ?disabled=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:insert-link\"\n          label=\"Link\"\n          class=\"selected-buttons\"\n          event-name=\"text-link\"\n          ?disabled=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"mdextra:unlink\"\n          label=\"Remove link\"\n          class=\"selected-buttons\"\n          event-name=\"text-unlink\"\n          ?disabled=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"editor:format-clear\"\n          label=\"Remove format\"\n          class=\"selected-buttons\"\n          event-name=\"text-remove-format\"\n          ?disabled=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item\n          mini\n          action\n          slot=\"primary\"\n          icon=\"hax:add-brick\"\n          label=\"Add element to selection\"\n          class=\"selected-buttons\"\n          event-name=\"insert-inline-gizmo\"\n          ?hidden=\"", "\"\n        ></hax-context-item>\n        <hax-context-item-textop\n          mini\n          action\n          slot=\"primary\"\n          icon=\"hax:add-brick\"\n          label=\"Add element to selection\"\n          class=\"selected-buttons\"\n          event-name=\"insert-inline-gizmo\"\n          ?hidden=\"", "\"\n        ></hax-context-item-textop>\n        <hax-context-item-textop\n          action\n          menu\n          slot=\"more\"\n          icon=\"mdextra:subscript\"\n          event-name=\"text-subscript\"\n          >Subscript</hax-context-item-textop\n        >\n        <hax-context-item-textop\n          action\n          menu\n          slot=\"more\"\n          icon=\"mdextra:superscript\"\n          event-name=\"text-superscript\"\n          >Superscript</hax-context-item-textop\n        >\n        <hax-context-item-textop\n          action\n          menu\n          slot=\"more\"\n          icon=\"editor:format-underlined\"\n          event-name=\"text-underline\"\n          >Underline</hax-context-item-textop\n        >\n        <hax-context-item-textop\n          action\n          menu\n          slot=\"more\"\n          icon=\"editor:format-strikethrough\"\n          event-name=\"text-strikethrough\"\n          >Cross out</hax-context-item-textop\n        >\n      </hax-toolbar>\n    "]);

    _templateObject2_68913230d34d11ea880ba1e93364c49c = function _templateObject2_68913230d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_68913230d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          pointer-events: none;\n          --hax-contextual-action-color: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n        }\n        hax-context-item-textop:not(:defined),\n        hax-context-item-menu:not(:defined),\n        hax-context-item:not(:defined),\n        hax-toolbar:not(:defined),\n        paper-item:not(:defined),\n        iron-icon:not(:defined) {\n          display: none;\n        }\n        :host [hidden] {\n          display: none;\n        }\n        .selected-buttons {\n          transition: 0.1s all ease-in-out;\n          width: 0;\n        }\n        :host([has-selected-text]) .selected-buttons {\n          width: 100%;\n        }\n        #toolbar {\n          overflow: hidden;\n        }\n        paper-item {\n          color: white;\n          background-color: var(--hax-contextual-action-color);\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n          font-size: 11px;\n          line-height: 24px;\n          margin: 0;\n          padding: 0 4px;\n          min-height: 24px;\n        }\n        paper-item:hover {\n          cursor: pointer;\n          color: black;\n        }\n        iron-icon {\n          width: 20px;\n          height: 20px;\n          padding: 4px;\n        }\n        paper-item strong {\n          padding: 4px;\n        }\n        hax-context-item-textop,\n        hax-context-item {\n          transition: all 0.2s linear;\n          visibility: visible;\n          opacity: 1;\n        }\n        hax-context-item-textop[hidden],\n        hax-context-item[hidden] {\n          visibility: hidden;\n          opacity: 0;\n        }\n        :host(.hax-context-pin-top) hax-toolbar {\n          position: fixed;\n          top: 40px;\n          flex-direction: column;\n        }\n      "]);

    _templateObject_68913230d34d11ea880ba1e93364c49c = function _templateObject_68913230d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `hax-text-context`
   * @element hax-text-context
   * `A context menu that provides common text based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   */
  var HaxTextContext =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxTextContext, _winEventsElement);
    babelHelpers.createClass(HaxTextContext, null, [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject_68913230d34d11ea880ba1e93364c49c())];
      }
    }]);

    function HaxTextContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxTextContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxTextContext).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated"
      };
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-item/paper-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item-textop.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-toolbar.js"], res, rej);
      });
      setTimeout(function () {
        _this.addEventListener("hax-context-item-selected", _this._haxContextOperation.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      _this.realSelectedValue = "p";
      _this.selection = false;
      _this.formatIcon = "hax:format-textblock";
      _this.isSafari = _this._isSafari();
      return _this;
    }
    /**
     * Store updated, sync.
     */


    babelHelpers.createClass(HaxTextContext, [{
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          this[e.detail.property] = e.detail.value;
        }
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_68913230d34d11ea880ba1e93364c49c(), this.selection, !this.hasSelectedText, this.selectedValue, this.selectedValueChanged, this.formatIcon, !this._showLists, !this._showLists, !this._showIndent, !this._showIndent, !this.hasSelectedText, !this.hasSelectedText, !this.hasSelectedText, !this.hasSelectedText, !this.hasSelectedText, this.isSafari || !this.hasSelectedText, !this.isSafari || !this.hasSelectedText);
      }
    }, {
      key: "selectedValueChanged",
      value: function selectedValueChanged(e) {
        this.selectedValue = e.detail;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // computed based on these changing
          if (_this2.realSelectedValue && propName == "realSelectedValue" && _this2.shadowRoot) {
            _this2._showIndent = _this2._computeShowIndent(_this2.realSelectedValue);

            if (_this2._showIndent || _this2.realSelectedValue == "p") {
              _this2._showLists = true;
            } else {
              _this2._showLists = false;
            }

            for (var i in _this2.shadowRoot.querySelector("#formatsize").children) {
              if (_this2.shadowRoot.querySelector("#formatsize").children[i] && _this2.shadowRoot.querySelector("#formatsize").children[i].getAttribute && _this2.shadowRoot.querySelector("#formatsize").children[i].getAttribute("value") == _this2.realSelectedValue) {
                _this2.selectedValue = i;
              }
            }
          } // calculate boolean status of having text


          if (propName == "haxSelectedText") {
            _this2.hasSelectedText = _this2[propName].length > 0;
          }

          if (propName == "selectedValue" && _this2.selectedValue != "") {
            _this2.realSelectedValue = _this2.shadowRoot.querySelector("#formatsize").children[_this2.selectedValue].getAttribute("value");
            _this2.formatIcon = _this2.shadowRoot.querySelector("#formatsize").children[_this2[propName]].querySelector("iron-icon").icon; // fire an event that this is a core piece of the system

            _this2.dispatchEvent(new CustomEvent("selected-value-changed", {
              detail: _this2[propName]
            }));
          }
        });
      }
      /**
       * Show indentation on lists
       */

    }, {
      key: "_computeShowIndent",
      value: function _computeShowIndent(realSelectedValue) {
        if (window.HaxStore.instance.computePolyfillSafe() && (realSelectedValue == "ol" || realSelectedValue == "ul")) {
          return true;
        }

        return false;
      }
      /**
       * Respond to simple modifications.
       */

    }, {
      key: "_haxContextOperation",
      value: function _haxContextOperation(e) {
        var _this3 = this;

        var detail = e.detail;
        var selection = window.HaxStore.getSelection();
        var prevent = false; // support a simple insert event to bubble up or everything else

        switch (detail.eventName) {
          case "close-menu":
            setTimeout(function () {
              _this3.shadowRoot.querySelector("#formatsize").shadowRoot.querySelector("#menu").hideMenu();
            }, 200);
            break;

          case "insert-inline-gizmo":
            if (window.HaxStore._tmpSelection && window.HaxStore.instance.editMode) {
              try {
                if (window.HaxStore._tmpRange.startContainer.parentNode.parentNode.tagName === "HAX-BODY" || window.HaxStore._tmpRange.startContainer.parentNode.parentNode.parentNode.tagName === "HAX-BODY") {
                  window.HaxStore.instance.activePlaceHolder = window.HaxStore._tmpRange;
                  window.HaxStore.write("activePlaceHolder", window.HaxStore._tmpRange, this);
                }
              } catch (err) {}
            }

            if (window.HaxStore.instance.activePlaceHolder != null) {
              // store placeholder because if this all goes through we'll want
              // to kill the originating text
              var values = {
                text: window.HaxStore.instance.activePlaceHolder.toString()
              };
              var type = "inline";
              var haxElements = window.HaxStore.guessGizmo(type, values); // see if we got anything

              if (haxElements.length > 0) {
                // hand off to hax-app-picker to deal with the rest of this
                window.HaxStore.instance.haxAppPicker.presentOptions(haxElements, type, "Transform selected text to..", "gizmo");
              }
            }

            break;
          // wow these are way too easy

          case "text-bold":
            document.execCommand("bold");
            prevent = true;
            break;

          case "text-italic":
            document.execCommand("italic");
            prevent = true;
            break;

          case "text-underline":
            document.execCommand("underline");
            prevent = true; // silly hack to account for trigging a selection from
            // inside the menu that isn't from a paper-item

            this.shadowRoot.querySelector("#toolbar").shadowRoot.querySelector("#moremenu").shadowRoot.querySelector("#menu").hideMenu();
            break;

          case "text-subscript":
            document.execCommand("subscript");
            prevent = true; // silly hack to account for trigging a selection from
            // inside the menu that isn't from a paper-item

            this.shadowRoot.querySelector("#toolbar").shadowRoot.querySelector("#moremenu").shadowRoot.querySelector("#menu").hideMenu();
            break;

          case "text-superscript":
            document.execCommand("superscript");
            prevent = true; // silly hack to account for trigging a selection from
            // inside the menu that isn't from a paper-item

            this.shadowRoot.querySelector("#toolbar").shadowRoot.querySelector("#moremenu").shadowRoot.querySelector("#menu").hideMenu();
            break;

          case "text-remove-format":
            document.execCommand("removeFormat");
            prevent = true;
            break;

          case "text-strikethrough":
            document.execCommand("strikeThrough");
            prevent = true; // silly hack to account for trigging a selection from
            // inside the menu that isn't from a paper-item

            this.shadowRoot.querySelector("#toolbar").shadowRoot.querySelector("#moremenu").shadowRoot.querySelector("#menu").hideMenu();
            break;

          case "text-link":
            var href = "";

            if (selection && selection.focusNode && selection.focusNode.parentNode && babelHelpers.typeof(selection.focusNode.parentNode.href) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              href = selection.focusNode.parentNode.href;
            } // @todo put in a dialog instead of this


            var url = prompt("Enter a URL:", href);

            if (url) {
              document.execCommand("createLink", false, url);

              if (selection.focusNode.parentNode) {
                selection.focusNode.parentNode.setAttribute("contenteditable", true);
                selection.focusNode.parentNode.setAttribute("data-editable", true); // just to be safe

                selection.focusNode.parentNode.removeEventListener("click", function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                  e.stopImmediatePropagation();
                });
                selection.focusNode.parentNode.addEventListener("click", function (e) {
                  e.preventDefault();
                  e.stopPropagation();
                  e.stopImmediatePropagation();
                });
              }

              prevent = true;
            }

            break;

          case "text-unlink":
            document.execCommand("unlink");
            prevent = true;
            break;

          /**
           * Our bad actors when it comes to polyfill'ed shadowDOM.
           * Naughty, naughty shadyDOM. Fortunately this is only IE11/Edge
           */

          case "text-indent":
            document.execCommand("indent");
            prevent = true;
            break;

          case "text-outdent":
            document.execCommand("outdent");
            prevent = true;
            break;
        }

        if (prevent) {
          e.preventDefault();
          e.stopPropagation();
        }
      }
      /**
       * Test for safari, if it is don't place things in the menu
       */

    }, {
      key: "_isSafari",
      value: function _isSafari() {
        var ua = navigator.userAgent.toLowerCase(); // test to find safari to account for it's handling
        // of what's been selected. This isn't great UX but
        // there's literally nothing we can do for Safari
        // because of https://github.com/LRNWebComponents/hax-body/issues/38

        if (ua.indexOf("safari") != -1) {
          if (ua.indexOf("chrome") > -1) {} else {
            return true;
          }
        }

        return false;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-text-context";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          _showIndent: {
            type: Boolean
          },
          _showLists: {
            type: Boolean
          },
          realSelectedValue: {
            type: String
          },

          /**
           * calculated boolean off of if there is currently text
           */
          hasSelectedText: {
            type: Boolean,
            attribute: "has-selected-text",
            reflect: true
          },

          /**
           * Text hax-store has detected is selected currently.
           */
          haxSelectedText: {
            type: String
          },

          /**
           * Selected value to match format of the tag currently.
           */
          selectedValue: {
            type: Number,
            attribute: "selected-value"
          },

          /**
           * Selection tracking
           */
          selection: {
            type: Boolean
          },

          /**
           * Selected item icon
           */
          formatIcon: {
            type: String,
            attribute: "format-icon"
          },

          /**
           * Is this safari
           */
          isSafari: {
            type: Boolean,
            attribute: "is-safari"
          }
        };
      }
    }]);
    return HaxTextContext;
  }((0, _utils.winEventsElement)(_litElement.LitElement));

  _exports.HaxTextContext = HaxTextContext;
  window.customElements.define(HaxTextContext.tag, HaxTextContext);
});