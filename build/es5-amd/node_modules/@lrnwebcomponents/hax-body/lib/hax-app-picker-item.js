define(["exports", "require", "../../../lit-element/lit-element.js", "../../simple-colors/simple-colors.js"], function (_exports, _require, _litElement, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxAppPickerItem = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_4ad670c0b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n          color: var(--hax-color-text);\n        }\n        :host([elevation=\"1\"]) {\n          -webkit-transform: scale(1, 1);\n          transform: scale(1, 1);\n        }\n        :host([elevation=\"2\"]) {\n          -webkit-transform: scale(1.4, 1.4);\n          transform: scale(1.4, 1.4);\n        }\n        :host > div {\n          margin-top: 8px;\n          color: var(--hax-color-text);\n          width: 100%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n        }\n        .icon {\n          cursor: pointer;\n          display: flex;\n          width: 50px;\n          height: 50px;\n          padding: 5px;\n          margin: 10px;\n          color: #ffffff;\n          border-radius: 50%;\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n          -webkit-transition: box-shadow 0.3s;\n          -moz-transition: box-shadow 0.3s;\n          -ms-transition: box-shadow 0.3s;\n          -o-transition: box-shadow 0.3s;\n          transition: box-shadow 0.3s;\n        }\n        .icon:hover,\n        .icon:focus {\n          box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.14),\n            0 2px 10px 0 rgba(0, 0, 0, 0.12), 0 6px 2px -4px rgba(0, 0, 0, 0.2);\n        }\n        .icon:active {\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n        }\n        paper-button {\n          min-width: unset;\n        }\n        iron-icon {\n          display: inline-flex;\n          padding: 0;\n          margin: 0;\n          width: 36px;\n          height: 36px;\n        }\n      "]);

    _templateObject2_4ad670c0b3b911e9b58d79562a23326c = function _templateObject2_4ad670c0b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  function _templateObject_4ad670c0b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-button\n        class=\"icon\"\n        title=\"", "\"\n        style=\"background-color:", ";\"\n      >\n        <iron-icon icon=\"", "\"></iron-icon>\n      </paper-button>\n      <div aria-hidden=\"true\">", "</div>\n    "]);

    _templateObject_4ad670c0b3b911e9b58d79562a23326c = function _templateObject_4ad670c0b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  /**
   `hax-app-picker-item`
   An item for displaying in a picker
  
  * @demo demo/index.html
  */
  var HaxAppPickerItem =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxAppPickerItem, _LitElement);

    function HaxAppPickerItem() {
      var _this;

      babelHelpers.classCallCheck(this, HaxAppPickerItem);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxAppPickerItem).call(this));
      _this.elevation = 1;
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxAppPickerItem, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_4ad670c0b3b911e9b58d79562a23326c(), this.label, this.hexColor, this.icon, this.label);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAppPickerItem.prototype), "connectedCallback", this).call(this);
        this.addEventListener("mousedown", this.tapEventOn.bind(this));
        this.addEventListener("mouseover", this.tapEventOn.bind(this));
        this.addEventListener("mouseout", this.tapEventOff.bind(this));
        this.addEventListener("focusin", this.tapEventOn.bind(this));
        this.addEventListener("focusout", this.tapEventOff.bind(this));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // update hexcolor when color changes
          if (propName === "color") {
            _this2.hexColor = _this2._getHexColor(_this2.color);
          }
        });
      }
    }, {
      key: "_getHexColor",
      value: function _getHexColor(color) {
        var name = color.replace("-text", "");
        var tmp = new _simpleColors.SimpleColors();

        if (tmp.colors[name]) {
          return tmp.colors[name][6];
        }

        return "#000000";
      }
      /**
       * special handling for taps on the thing
       */

    }, {
      key: "tapEventOn",
      value: function tapEventOn(e) {
        this.elevation = 2;
      }
      /**
       * Hover off stop showing the deeper shadow.
       */

    }, {
      key: "tapEventOff",
      value: function tapEventOff(e) {
        this.elevation = 1;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_4ad670c0b3b911e9b58d79562a23326c())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-app-picker-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Color
           */
          color: {
            type: String
          },

          /**
           * Class for the color
           */
          hexColor: {
            type: String,
            attribute: "hex-color"
          },

          /**
           * Icon
           */
          icon: {
            type: String
          },

          /**
           * Label
           */
          label: {
            type: String
          },

          /**
           * Elevation off the UI
           */
          elevation: {
            type: Number,
            reflect: true
          }
        };
      }
    }]);
    return HaxAppPickerItem;
  }(_litElement.LitElement);

  _exports.HaxAppPickerItem = HaxAppPickerItem;
  window.customElements.define(HaxAppPickerItem.tag, HaxAppPickerItem);
});