define(["exports", "require", "../../../lit-element/lit-element.js", "../../simple-colors/simple-colors.js", "../../utils/utils.js", "../../../@polymer/polymer/lib/elements/custom-style.js"], function (_exports, _require, _litElement, _simpleColors, _utils, _customStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPanel = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_ec26dd001bb211eabd7cc30119585ddb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style>\n          app-drawer {\n            --app-drawer-content-container: {\n              align-items: center;\n              width: 100%;\n              left: 0;\n              right: 0;\n              background-color: var(--hax-color-bg);\n              border-bottom: 1px solid black;\n              padding: var(--hax-panel-padding, 0px 16px);\n              display: flex;\n              touch-action: auto;\n              overflow-x: auto;\n              overflow: visible !important;\n              -webkit-overflow-scrolling: touch;\n              white-space: nowrap;\n            }\n          }\n        </style>\n      </custom-style>\n      <div ?hidden=\"", "\">\n        <hax-panel-item\n          dark\n          large\n          .data-opened=\"", "\"\n          @click=\"", "\"\n          icon=\"create\"\n          id=\"button\"\n          label=\"", "\"\n        ></hax-panel-item>\n      </div>\n      <app-drawer\n        id=\"drawer\"\n        ?opened=\"", "\"\n        @opened-changed=\"", "\"\n        disable-swipe\n        persistent\n        transition-duration=\"300\"\n      >\n        <hax-panel-item\n          ?hidden=\"", "\"\n          @click=\"", "\"\n          icon=\"save\"\n          id=\"haxsavebutton\"\n          label=\"", "\"\n          event-name=\"save\"\n          voice-command=\"save content\"\n        ></hax-panel-item>\n        <hax-panel-item\n          ?hidden=\"", "\"\n          icon=\"cancel\"\n          id=\"haxcancelbutton\"\n          label=\"Cancel\"\n          event-name=\"cancel\"\n          voice-command=\"cancel\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"icons:file-upload\"\n          label=\"Upload media\"\n          event-name=\"hax-manager-open\"\n          value=\"0\"\n          voice-command=\"(upload)(add) media\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"search\"\n          label=\"Search for media\"\n          event-name=\"hax-manager-open\"\n          value=\"1\"\n          voice-command=\"(search)(find) media\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"hax:add-brick\"\n          label=\"Create page element\"\n          event-name=\"hax-manager-open\"\n          voice-command=\"create (page) (element)(widget)\"\n          value=\"2\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"icons:view-column\"\n          label=\"Insert layout\"\n          event-name=\"hax-blox-picker-open\"\n          voice-command=\"insert (page) layout\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"hax:templates\"\n          label=\"Insert template\"\n          event-name=\"hax-stax-picker-open\"\n          voice-command=\"insert (page) template\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"hax:paragraph\"\n          label=\"Insert paragraph\"\n          event-name=\"text\"\n          voice-command=\"insert (text)(paragraph)\"\n          class=\"hide-small\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"hax:h2\"\n          label=\"Insert heading\"\n          event-name=\"header\"\n          voice-command=\"insert (header)(heading)\"\n          class=\"hide-small\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"hax:hr\"\n          label=\"Insert horizontal line\"\n          event-name=\"divider\"\n          voice-command=\"insert (divider)(horizontal line)\"\n          class=\"hide-small\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"hax:placeholder\"\n          label=\"Insert media placeholder\"\n          event-name=\"placeholder\"\n          voice-command=\"insert (image) placeholder\"\n          class=\"hide-small\"\n        ></hax-panel-item>\n        <hax-panel-item\n          ?hidden=\"", "\"\n          event-name=\"open-export-dialog\"\n          icon=\"code\"\n          label=\"View page source\"\n          voice-command=\"view (page) source\"\n        ></hax-panel-item>\n        <slot></slot>\n        <hax-panel-item\n          icon=\"icons:undo\"\n          ?disabled=\"", "\"\n          label=\"Undo previous action\"\n          event-name=\"undo\"\n          voice-command=\"undo\"\n          class=\"hide-small\"\n        ></hax-panel-item>\n        <hax-panel-item\n          icon=\"icons:redo\"\n          ?disabled=\"", "\"\n          label=\"Redo previous action\"\n          event-name=\"redo\"\n          voice-command=\"redo\"\n          class=\"hide-small\"\n        ></hax-panel-item>\n        <hax-panel-item\n          right\n          ?hidden=\"", "\"\n          event-name=\"open-preferences-dialog\"\n          icon=\"settings\"\n          label=\"Editor preferences\"\n          voice-command=\"open (editor) preferences\"\n        ></hax-panel-item>\n        <div class=\"editing-mode-active\">", "</div>\n      </app-drawer>\n      <div class=\"active-op-name\">", "</div>\n    "]);

    _templateObject2_ec26dd001bb211eabd7cc30119585ddb = function _templateObject2_ec26dd001bb211eabd7cc30119585ddb() {
      return data;
    };

    return data;
  }

  function _templateObject_ec26dd001bb211eabd7cc30119585ddb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          position: absolute;\n          z-index: 1000000;\n        }\n        :host *[hidden] {\n          display: none;\n        }\n        iron-icon:not(:defined),\n        hax-panel-item:not(:defined),\n        app-drawer:not(:defined) {\n          display: none;\n        }\n        app-drawer {\n          z-index: 100001;\n          height: 40px;\n          padding: var(--hax-panel-padding, 8px 16px);\n          left: 0;\n          top: 0;\n          align-items: center;\n          touch-action: auto;\n          visibility: hidden;\n          opacity: 0;\n          display: flex;\n          --app-drawer-width: 100%;\n        }\n        hax-panel-item {\n          margin: 8px 2px;\n        }\n        hax-panel-item[right] {\n          float: right;\n        }\n        #haxcancelbutton {\n          margin-right: 48px;\n        }\n        :host([edit-mode]) app-drawer {\n          visibility: visible;\n          transition: 0.3s ease opacity;\n          opacity: 1;\n          right: 0;\n          left: 0;\n          top: 0;\n        }\n\n        #button {\n          color: white;\n          position: fixed;\n          top: 0;\n          left: 0;\n          visibility: visible;\n          z-index: 10000;\n          transition: all 0.3s ease;\n          margin: 0;\n          border-top-left-radius: 0;\n        }\n        :host([edit-mode]) #button {\n          visibility: hidden;\n          opacity: 0;\n        }\n        #button:hover {\n          opacity: 1;\n        }\n        :host([align=\"right\"]) #button {\n          right: 0;\n          left: unset;\n          border-top-right-radius: 0;\n          border-top-left-radius: unset;\n        }\n        .active-op-name,\n        .editing-mode-active {\n          display: none;\n        }\n        :host([edit-mode]) .active-op-name {\n          display: flex;\n          top: 0;\n          right: 0;\n          z-index: 1000000;\n          position: fixed;\n          font-size: 14px;\n          border-bottom: 1px solid black;\n          border-left: 1px solid black;\n          font-weight: bold;\n          padding: 16px 28px 16px 16px;\n          line-height: 24px;\n          height: 23px;\n          min-width: 120px;\n          justify-content: space-evenly;\n          color: var(--hax-color-menu-heading-bg, black);\n          background-color: var(--hax-color-menu-heading-color, #eeeeee);\n          vertical-align: middle;\n        }\n        :host([edit-mode]) .editing-mode-active {\n          display: flex;\n          font-size: 18px;\n          margin-left: 100px;\n          padding: 0 8px;\n          font-weight: bold;\n          color: var(--hax-color-menu-heading-bg, black);\n          background-color: var(--hax-color-menu-heading-color, #eeeeee);\n        }\n        @media screen and (max-width: 600px) {\n          :host([edit-mode]) .hide-small {\n            display: none;\n          }\n        }\n        @media screen and (max-width: 800px) {\n          :host([edit-mode]) #haxcancelbutton {\n            margin-right: 2px;\n          }\n          :host([edit-mode]) .editing-mode-active,\n          :host([edit-mode]) .active-op-name {\n            display: none;\n          }\n        }\n      "]);

    _templateObject_ec26dd001bb211eabd7cc30119585ddb = function _templateObject_ec26dd001bb211eabd7cc30119585ddb() {
      return data;
    };

    return data;
  }

  /**
  `hax-panel`
  A LRN element that provides a panel / pallet of options to choose from.
  This is intended to be placed in a larger system for creating content quickly
  as the events being bubbled up include HTML nodes to inject into something
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - panel - the flyout from left or right side that has elements that can be placed
   - element - buttons on the panel which when pressed will trigger an event
  
  */
  var HaxPanel =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxPanel, _winEventsElement);
    babelHelpers.createClass(HaxPanel, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxPanel), "styles", this)), [(0, _litElement.css)(_templateObject_ec26dd001bb211eabd7cc30119585ddb())]);
      }
      /**
       * HTMLElement specification
       */

    }]);

    function HaxPanel() {
      var _this;

      babelHelpers.classCallCheck(this, HaxPanel);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxPanel).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated",
        "hax-active-hover-name": "_activeNameChange",
        "hax-panel-operation": "_processItemEvent"
      };
      _this.canUndo = true;
      _this.canRedo = true;
      _this.align = "left";
      _this.hideExportButton = false;
      _this.haxDeveloperMode = false;
      _this.editModeName = "You are editing content";
      _this.hidePreferencesButton = false;
      _this.hidePanelOps = false;
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/device-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/hardware-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/communication-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/social-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/av-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/maps-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/app-layout/app-drawer/app-drawer.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-panel-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../hax-iconset/hax-iconset.js"], res, rej);
      });
      setTimeout(function () {
        _this.addEventListener("hax-item-selected", _this._processItemEvent.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0); // fire an event that this is a core piece of the system

      _this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
        bubbles: true,
        cancelable: true,
        composed: true,
        detail: {
          piece: "haxPanel",
          object: babelHelpers.assertThisInitialized(_this)
        }
      }));

      return _this;
    }

    babelHelpers.createClass(HaxPanel, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_ec26dd001bb211eabd7cc30119585ddb(), this.hidePanelOps, this.editMode, this._clickEditButton, this.__tipText, this.editMode, this.openedChanged, this.hidePanelOps, this._clickSaveButton, this.__tipText, this.hidePanelOps, this.hideExportButton, !this.canUndo, !this.canRedo, this.hidePreferencesButton, this.editModeName, this.activeOperationName);
      }
    }, {
      key: "openedChanged",
      value: function openedChanged(e) {
        this.editMode = e.detail.value;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "editMode") {
            _this2._editModeChanged(_this2[propName], oldValue);
          }

          if (propName == "globalPreferences") {
            _this2._globalPreferencesChanged(_this2[propName], oldValue);
          }
        });
      }
    }, {
      key: "_activeNameChange",
      value: function _activeNameChange(e) {
        this.activeOperationName = e.detail;
      }
      /**
       * Global preference changed.
       */

    }, {
      key: "_globalPreferencesChanged",
      value: function _globalPreferencesChanged(newValue) {
        if (newValue && babelHelpers.typeof(newValue.haxShowExportButton) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.hideExportButton = !newValue.haxShowExportButton;
        }
      }
      /**
       * Store updated, sync.
       */

    }, {
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          if (e.detail.property === "globalPreferences") {
            this[e.detail.property] = {};
          }

          this[e.detail.property] = e.detail.value;
        }
      }
      /**
       * Process event for simple content inserts.
       */

    }, {
      key: "_processItemEvent",
      value: function _processItemEvent(e) {
        var detail = e.detail; // support a simple insert event to bubble up or everything else

        switch (detail.eventName) {
          case "open-panel":
            this._clickButton();

            break;

          case "cancel":
            this.toggle();
            this.dispatchEvent(new CustomEvent("hax-cancel", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail
            }));
            break;

          case "text":
            detail.tag = "p";
            detail.content = "";
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail
            }));
            break;

          case "open-preferences-dialog":
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxPreferences, this);
            break;

          case "open-export-dialog":
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxExport, this);
            break;

          case "divider":
            detail.tag = "hr";
            detail.content = "";
            detail.properties = {
              style: "width:100%;"
            };
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail
            }));
            break;

          case "header":
            detail.tag = "h2";
            detail.content = "Header";
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail
            }));
            break;

          case "placeholder":
            detail.tag = "place-holder";
            detail.content = "";
            detail.properties = {
              style: "width:50%;"
            };
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail
            }));
            break;

          case "blockquote":
            detail.tag = "blockquote";
            detail.content = "";
            this.dispatchEvent(new CustomEvent("hax-insert-content", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: detail
            }));
            break;

          case "hax-manager-open":
            window.HaxStore.write("activeHaxElement", {}, this);
            window.HaxStore.instance.haxManager.resetManager(parseInt(detail.value));
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxManager, this);
            break;

          case "hax-stax-picker-open":
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxStaxPicker, this);
            break;

          case "hax-blox-picker-open":
            window.HaxStore.write("openDrawer", window.HaxStore.instance.haxBloxPicker, this);
            break;

          case "undo":
            document.execCommand("undo");
            break;

          case "redo":
            document.execCommand("redo");
            break;

          default:
            // we sit on this, something else will have to handle it
            break;
        }
      }
      /**
       * _editModeChanged
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && newValue) {
          this.__tipText = "Save content";
          this.shadowRoot.querySelector("#button").icon = "save";
        } else {
          this.__tipText = "Edit content";
          this.shadowRoot.querySelector("#button").icon = "create";
        }
      }
      /**
       * Toggle the drawer when the button is clicked.
       */

    }, {
      key: "_clickEditButton",
      value: function _clickEditButton(e) {
        this.toggle();
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Toggle the drawer when the button is clicked.
       */

    }, {
      key: "_clickSaveButton",
      value: function _clickSaveButton(e) {
        this.toggle();
        this.dispatchEvent(new CustomEvent("hax-save", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: e.detail
        }));
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Toggle the panel.
       */

    }, {
      key: "toggle",
      value: function toggle(e) {
        window.HaxStore.write("editMode", !this.editMode, this);
        this.shadowRoot.querySelector("#drawer").opened = this.editMode;

        if (!this.shadowRoot.querySelector("#drawer").opened) {
          window.HaxStore.write("openDrawer", false, this);
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-panel";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Light variant for save button
           */
          light: {
            type: Boolean
          },
          __tipText: {
            type: String
          },

          /**
           * Display to the right corner instead of the left (default)
           */
          align: {
            type: String,
            reflect: true
          },

          /**
           * State of the panel
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * Showing export area.
           */
          hideExportButton: {
            type: Boolean,
            reflect: true,
            attribute: "hide-export-button"
          },

          /**
           * Show developer mode
           */
          haxDeveloperMode: {
            type: Boolean,
            reflect: true,
            attribute: "hax-developer-mode"
          },

          /**
           * active item name, useful to show users what they are working with
           */
          activeOperationName: {
            type: String
          },

          /**
           * Say we are editing content
           */
          editModeName: {
            type: String
          },

          /**
           * Showing preferences area.
           */
          hidePreferencesButton: {
            type: Boolean,
            reflect: true,
            attribute: "hide-preferences-button"
          },

          /**
           * Showing button area at all a well as internal
           * state managing buttons like cancel and save
           */
          hidePanelOps: {
            type: Boolean,
            reflect: true,
            attribute: "hide-panel-ops"
          },

          /**
           * Global preferences for HAX overall
           */
          globalPreferences: {
            type: Object
          },

          /**
           * If we can currently undo based on stack position
           */
          canUndo: {
            type: Boolean,
            attribute: "can-undo"
          },

          /**
           * If we can currently redo based on stack position
           */
          canRedo: {
            type: Boolean,
            attribute: "can-redo"
          },

          /**
           * If we're "dirty" meaning stackPosition and savePosition out of sync
           */
          isDirty: {
            type: Boolean,
            attribute: "is-dirty"
          }
        };
      }
    }]);
    return HaxPanel;
  }((0, _utils.winEventsElement)(_simpleColors.SimpleColors));

  _exports.HaxPanel = HaxPanel;
  window.customElements.define(HaxPanel.tag, HaxPanel);
});