define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../simple-colors/simple-colors.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_simpleColors,_haxSharedStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxUploadField=void 0;_require=babelHelpers.interopRequireWildcard(_require);function _templateObject_bf6bec2083ae11e9bca9910ed3db32b8(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style include=\"hax-shared-styles\">\n        :host {\n          display: block;\n          justify-content: flex-start;\n          visibility: visible;\n          transition: 0.3s all ease;\n          box-sizing: border-box;\n          pointer-events: all;\n        }\n        vaadin-upload {\n          --primary-color: var(--hax-color-accent1);\n          --primary-font-color: #ffffff;\n          --dark-primary-color: #ffffff;\n          --light-primary-color: var(--hax-color-accent1);\n          --error-color: darkred;\n          padding: 0;\n          margin: 0;\n          border: none;\n          --vaadin-upload-button-add-wrapper: {\n            border: none;\n            background-color: var(--hax-color-accent1);\n            color: #ffffff;\n            display: block;\n          }\n          --vaadin-upload-buttons-primary: {\n            display: block;\n            width: 100%;\n            flex: unset;\n            -webkit-flex: unset;\n          }\n          --vaadin-upload-button-add: {\n            color: #000000;\n            display: block;\n            flex: unset;\n            -webkit-flex: unset;\n            text-align: center;\n          }\n          --vaadin-upload-drop-label: {\n            color: #ffffff;\n            display: block;\n            padding: 0;\n            margin: 0;\n          }\n          --vaadin-upload-drop-label-dragover: {\n            color: #ffffff;\n          }\n          --vaadin-upload-file-list: {\n            padding: 0;\n            margin: 0;\n            color: #ffffff;\n          }\n          --vaadin-upload-file: {\n            color: #ffffff;\n          }\n        }\n        vaadin-upload[dragover] {\n          border-color: #396;\n        }\n        vaadin-upload-file {\n          --disabled-text-color: #222222;\n        }\n        paper-input {\n          color: var(--hax-color-text);\n        }\n      </style>\n      <paper-input\n        id=\"url\"\n        value=\"{{value}}\"\n        label=\"URL\"\n        type=\"url\"\n        auto-validate=\"\"\n      ></paper-input>\n      <vaadin-upload\n        capture\n        form-data-name=\"file-upload\"\n        id=\"fileupload\"\n      ></vaadin-upload>\n      <paper-icon-button icon=\"image:photo-camera\" id=\"selfie\"></paper-icon-button>\n      <div id=\"camerahole\"></div>\n    "]);_templateObject_bf6bec2083ae11e9bca9910ed3db32b8=function _templateObject_bf6bec2083ae11e9bca9910ed3db32b8(){return data};return data}var HaxUploadField=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(HaxUploadField,_PolymerElement);function HaxUploadField(){var _this;babelHelpers.classCallCheck(this,HaxUploadField);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(HaxUploadField).call(this));new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-input/paper-input.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-icon-button/paper-icon-button.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@vaadin/vaadin-upload/vaadin-upload.js"],res,rej)});return _this}babelHelpers.createClass(HaxUploadField,[{key:"_fileAboutToUpload",/**
   * Respond to uploading a file
   */value:function _fileAboutToUpload(e){if(!this.__allowUpload){// cancel the event so we can jump in
e.preventDefault();e.stopPropagation();// look for a match as to what gizmo types it supports
var values={source:e.detail.file.name,type:e.detail.file.type},type=window.HaxStore.guessGizmoType(values),targets=window.HaxStore.getHaxAppStoreTargets(type);// we have no clue what this is.. let's try and guess..
// make sure we have targets
if(1===targets.length){this._haxAppPickerSelection({detail:targets[0]})}else if(0!==targets.length){window.HaxStore.instance.haxAppPicker.presentOptions(targets,type,"Where would you like to upload this "+type+"?","app")}else{window.HaxStore.toast("Sorry, you don't have a storage location that can handle "+type+" uploads!",5e3)}}else{this.__allowUpload=!1}}/**
   * Respond to successful file upload, now inject url into url field and
   * do a gizmo guess from there!
   */},{key:"_fileUploadResponse",value:function _fileUploadResponse(e){// convert response to object
var response=JSON.parse(e.detail.xhr.response),map=this.__appUsed.connection.operations.add.resultMap,data={},item={};// access the app that did the upload
// look for the items element to draw our data from at its root
if(babelHelpers.typeof(this._resolveObjectPath(map.item,response))!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){data=this._resolveObjectPath(map.item,response)}item.type=map.defaultGizmoType;// pull in prop matches
for(var prop in map.gizmo){item[prop]=this._resolveObjectPath(map.gizmo[prop],data)}// another sanity check, if we don't have a url but have a source bind that too
if(babelHelpers.typeof(item.url)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(item.source)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){item.url=item.source}// gizmo type is also supported in the mapping element itself
// Think an asset management backend as opposed to a specific
// type of asset like video. If the item coming across can
// effectively check what kind of gizmo is required for it
// to work then we need to support that asset declaring the
// gizmo type needed
if(babelHelpers.typeof(map.gizmo.type)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){item.type=this._resolveObjectPath(map.gizmo.type,data)}// set the value of the url which will update our URL and notify
this.shadowRoot.querySelector("#url").value=item.url}/**
   * Event for an app being selected from a picker
   * This happens when multiple upload targets support the given type
   */},{key:"_haxAppPickerSelection",value:function _haxAppPickerSelection(e){// details for where to upload the file
var connection=e.detail.connection;this.__appUsed=e.detail;this.shadowRoot.querySelector("#fileupload").method=connection.operations.add.method;var requestEndPoint=connection.protocol+"://"+connection.url;// ensure we build a url correctly
if("/"!=requestEndPoint.substr(requestEndPoint.length-1)){requestEndPoint+="/"}// support local end point modification
if(babelHelpers.typeof(connection.operations.add.endPoint)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){requestEndPoint+=connection.operations.add.endPoint}// implementation specific tweaks to talk to things like HAXcms and other CMSs
// that have per load token based authentication
if(null!=window.HaxStore.instance.connectionRewrites.appendUploadEndPoint){requestEndPoint+="?"+window.HaxStore.instance.connectionRewrites.appendUploadEndPoint}if(null!=window.HaxStore.instance.connectionRewrites.appendJwt){requestEndPoint+="&"+window.HaxStore.instance.connectionRewrites.appendJwt+"="+localStorage.getItem(window.HaxStore.instance.connectionRewrites.appendJwt)}this.shadowRoot.querySelector("#fileupload").headers=connection.headers;this.shadowRoot.querySelector("#fileupload").target=requestEndPoint;// invoke file uploading...
this.__allowUpload=!0;this.shadowRoot.querySelector("#fileupload").uploadFiles()}},{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(HaxUploadField.prototype),"connectedCallback",this).call(this);this.shadowRoot.querySelector("#fileupload").addEventListener("upload-before",this._fileAboutToUpload.bind(this));this.shadowRoot.querySelector("#fileupload").addEventListener("upload-response",this._fileUploadResponse.bind(this));this.shadowRoot.querySelector("#selfie").addEventListener("click",this._takeSelfie.bind(this));this.shadowRoot.querySelector("#camerahole").addEventListener("simple-camera-snap-image",this.__newPhotoShowedUp.bind(this));document.body.addEventListener("hax-app-picker-selection",this._haxAppPickerSelection.bind(this))}},{key:"disconnectedCallback",value:function disconnectedCallback(){this.shadowRoot.querySelector("#fileupload").removeEventListener("upload-before",this._fileAboutToUpload.bind(this));this.shadowRoot.querySelector("#fileupload").removeEventListener("upload-response",this._fileUploadResponse.bind(this));this.shadowRoot.querySelector("#selfie").removeEventListener("click",this._takeSelfie.bind(this));this.shadowRoot.querySelector("#camerahole").removeEventListener("simple-camera-snap-image",this.__newPhotoShowedUp.bind(this));this.shadowRoot.querySelector("#fileupload").removeEventListener("upload-response",this._fileUploadResponse.bind(this));document.body.removeEventListener("hax-app-picker-selection",this._haxAppPickerSelection.bind(this));babelHelpers.get(babelHelpers.getPrototypeOf(HaxUploadField.prototype),"disconnectedCallback",this).call(this)}/**
   * We got a new photo
   */},{key:"__newPhotoShowedUp",value:function __newPhotoShowedUp(e){this.shadowRoot.querySelector("#fileupload")._addFile(e.detail)}/**
   * Invoke the camera to set itself up
   */},{key:"_takeSelfie",value:function _takeSelfie(e){if(!this.camera){new Promise(function(res,rej){return _require.default(["../../simple-login/lib/simple-camera-snap.js"],res,rej)});this.camera=document.createElement("simple-camera-snap");this.shadowRoot.querySelector("#camerahole").appendChild(this.camera)}}/**
   * Helper to take a multi-dimensional object and convert
   * it's reference into the real value. This allows for variable input defined
   * in a string to actually hit the deeper part of an object structure.
   */},{key:"_resolveObjectPath",value:function _resolveObjectPath(path,obj){return path.split(".").reduce(function(prev,curr){return prev?prev[curr]:null},obj||self)}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_bf6bec2083ae11e9bca9910ed3db32b8())}},{key:"properties",get:function get(){return{value:{type:String,notify:!0}}}}]);return HaxUploadField}(_polymerElement.PolymerElement);_exports.HaxUploadField=HaxUploadField;window.customElements.define("hax-upload-field",HaxUploadField)});