define(["exports", "meta", "require", "../../../lit-element/lit-element.js", "../../hax-body-behaviors/hax-body-behaviors.js", "../../utils/utils.js"], function (_exports, meta, _require, _litElement, _haxBodyBehaviors, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxAutoloader = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_8f076200c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: none;\n        }\n      "]);

    _templateObject2_8f076200c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8f076200c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8f076200c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <slot></slot>\n    "]);

    _templateObject_8f076200c96f11ea8be5e1d5fe7ec787 = function _templateObject_8f076200c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `hax-autoloader`
   * @element hax-autoloader
   * `Automatically load elements based on the most logical location with future fallback support for CDNs.`
   * @microcopy - the mental model for this element
   * - hax-autoloader - autoloading of custom element imports which can then emmit events as needed
   * @element hax-autoloader
   */
  var HaxAutoloader =
  /*#__PURE__*/
  function (_HAXElement) {
    babelHelpers.inherits(HaxAutoloader, _HAXElement);
    babelHelpers.createClass(HaxAutoloader, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8f076200c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_8f076200c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-autoloader";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxAutoloader), "properties", this), {
          /**
           * List of elements processed so we don't double process
           */
          processedList: {
            type: Object
          }
        });
      }
    }]);

    function HaxAutoloader() {
      var _this;

      babelHelpers.classCallCheck(this, HaxAutoloader);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxAutoloader).call(this));
      _this.processedList = {};
      return _this;
    }
    /**
     * LitElement ready life cycle
     */


    babelHelpers.createClass(HaxAutoloader, [{
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        // fire an event that this is a core piece of the system
        this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            piece: "haxAutoloader",
            object: this
          }
        }));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAutoloader.prototype), "connectedCallback", this).call(this);
        this.observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            mutation.addedNodes.forEach(function (node) {
              _this2.processNewElements(node);
            });
          });
        });
        this.observer.observe(this, {
          childList: true
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.observer.disconnect();
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAutoloader.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Process new elements
       */

    }, {
      key: "processNewElements",
      value: function processNewElements(e) {
        var _this3 = this;

        // when new nodes show up in the slots then fire the needed pieces
        var effectiveChildren = this.childNodes;

        for (var i = 0; i < effectiveChildren.length; i++) {
          // strip invalid tags / textnodes
          if (babelHelpers.typeof(effectiveChildren[i].tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(this.processedList[effectiveChildren[i].tagName]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            // attempt a dynamic import with graceful failure / fallback
            try {
              var propName;

              (function () {
                var name = effectiveChildren[i].tagName.toLowerCase(); // see if we already have this definition

                if (typeof effectiveChildren[i].getHaxProperties === "function") {
                  var evt = new CustomEvent("hax-register-properties", {
                    bubbles: true,
                    composed: true,
                    cancelable: true,
                    detail: {
                      tag: name,
                      properties: effectiveChildren[i].getHaxProperties(),
                      polymer: true
                    }
                  });
                  context.dispatchEvent(evt);
                } else if (typeof effectiveChildren[i].HAXWiring === "function") {
                  var _evt = new CustomEvent("hax-register-properties", {
                    bubbles: true,
                    cancelable: true,
                    composed: true,
                    detail: {
                      tag: name,
                      properties: effectiveChildren[i].HAXWiring.getHaxProperties(),
                      polymer: false
                    }
                  });

                  context.dispatchEvent(_evt);
                } else {
                  // @todo support CDN failover or a flag of some kind to ensure
                  // this delivers locally or from remote
                  // @todo need to support name spacing of packages so that we
                  // don't assume they are all relative to lrnwebcomponents
                  var basePath = _this3.pathFromUrl(decodeURIComponent(meta.url));

                  if (!window.customElements.get(name)) {
                    var nameLocation = (0, _utils.varGet)(window.HaxStore, "instance.__appStoreData.autoloader." + name, "@lrnwebcomponents/".concat(name, "/").concat(name, ".js"));
                    new Promise(function (res, rej) {
                      return _require.default(["".concat(basePath, "../../../").concat(nameLocation)], res, rej);
                    }).then(function (response) {
                      // get the custom element definition we used to add that file
                      var CEClass = window.customElements.get(name);

                      if (!CEClass) {
                        console.error("".concat(name, " was not a valid custom element yet a load was attempted"));
                      } else if (typeof CEClass.getHaxProperties === "function") {
                        _this3.setHaxProperties(CEClass.getHaxProperties(), name);
                      } else if (typeof CEClass.HAXWiring === "function") {
                        _this3.setHaxProperties(CEClass.HAXWiring.getHaxProperties(), name);
                      } else if (CEClass.haxProperties) {
                        _this3.setHaxProperties(CEClass.haxProperties, name);
                      } else {
                        console.warn("".concat(name, " didn't have hax wiring in the end"));
                      }
                    }).catch(function (error) {
                      /* Error handling */
                      console.warn(error);
                    });
                  } else {
                    // get the custom element definition we used to add that file
                    var CEClass = window.customElements.get(name);

                    if (!CEClass) {
                      console.error("".concat(name, " was not a valid custom element yet a load was attempted"));
                    } else if (typeof CEClass.getHaxProperties === "function") {
                      _this3.setHaxProperties(CEClass.getHaxProperties(), name);
                    } else if (typeof CEClass.HAXWiring === "function") {
                      _this3.setHaxProperties(CEClass.HAXWiring.getHaxProperties(), name);
                    } else if (CEClass.haxProperties) {
                      _this3.setHaxProperties(CEClass.haxProperties, name);
                    } else {
                      console.warn("".concat(name, " didn't have hax wiring so HAX guessed how to work with it as best it can. See https://haxtheweb.org/hax-schema for documentation on adding custom wiring for better UX."));

                      try {
                        var wiring = new _haxBodyBehaviors.HAXWiring();
                        var props = wiring.prototypeHaxProperties();
                        props.gizmo.title = name;
                        props.gizmo.handles = [];
                        props.settings.quick = [];
                        props.settings.configure = [];
                        props.settings.advanced = [];
                        props = wiring.standardAdvancedProps(props);
                        props.saveOptions = {}; // try and make this have SOME fields, again, really guessing here

                        var tmpProps; // relatively cross library

                        if (customElements.get(name)) {
                          tmpProps = customElements.get(name).properties;
                        }

                        if (tmpProps) {
                          for (propName in tmpProps) {
                            if (tmpProps[propName].type && tmpProps[propName].type.name) {
                              switch (tmpProps[propName].type.name) {
                                case "String":
                                  props.settings.configure.push({
                                    property: propName,
                                    title: propName,
                                    description: "",
                                    inputMethod: "textfield"
                                  });
                                  break;

                                case "Number":
                                  props.settings.configure.push({
                                    property: propName,
                                    title: propName,
                                    description: "",
                                    inputMethod: "number"
                                  });
                                  break;

                                case "Boolean":
                                  props.settings.configure.push({
                                    property: propName,
                                    title: propName,
                                    description: "",
                                    inputMethod: "boolean"
                                  });
                                  break;
                              }
                            }
                          }
                        }

                        wiring.readyToFireHAXSchema(name, props, _this3);
                      } catch (e) {
                        console.warn("HAX failed to create wiring that worked");
                      }
                    }
                  }
                }

                _this3.processedList[name] = name;
              })();
            } catch (err) {// error in the event this is a double registration
            }
          }

          effectiveChildren[i].remove();
        }
      }
    }]);
    return HaxAutoloader;
  }((0, _haxBodyBehaviors.HAXElement)(_litElement.LitElement));

  _exports.HaxAutoloader = HaxAutoloader;
  window.customElements.define(HaxAutoloader.tag, HaxAutoloader);
});