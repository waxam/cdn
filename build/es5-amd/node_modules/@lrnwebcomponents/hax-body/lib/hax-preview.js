define(["exports","require","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","./haxutils.js","../../../@polymer/iron-media-query/iron-media-query.js","../../simple-colors/simple-colors.js","./hax-shared-styles.js"],function(_exports,_require,_polymerElement,_polymerDom,_haxutils,_ironMediaQuery,_simpleColors,_haxSharedStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.HaxPreview=void 0;_require=babelHelpers.interopRequireWildcard(_require);function _templateObject_acff79707c0711e98a2471d74bf08c91(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors hax-shared-styles\">\n        :host {\n          display: block;\n          background-color: #ffffff;\n          overflow: hidden;\n        }\n        iron-icon:not(:defined),\n        paper-button:not(:defined) {\n          display: none;\n        }\n        paper-card.form-wrapper {\n          margin: 0;\n          padding: 0 16px 80px 16px;\n          width: 100%;\n          min-height: 160px;\n          background-color: transparent;\n          overflow: auto;\n          height: 100%;\n        }\n\n        vaadin-split-layout {\n          display: flex;\n          justify-content: space-around;\n          height: 100%;\n        }\n        eco-json-schema-object {\n          width: 50%;\n        }\n\n        .vaadin-split-layout-panel {\n          flex: 1 1 auto;\n          width: 100%;\n          flex-wrap: nowrap;\n          margin: 0;\n          height: 100%;\n          overflow: hidden;\n        }\n        #form {\n          --eco-json-schema-object-form: {\n            display: block !important;\n          }\n        }\n        #preview {\n          padding: 16px;\n          color: #000000;\n          background-color: var(--hax-color-bg-accent);\n          max-height: 63vh;\n          overflow: scroll;\n        }\n        #preview ::slotted(*) {\n          float: unset !important;\n          margin: unset !important;\n          width: unset !important;\n          position: unset !important;\n          top: unset !important;\n          left: unset !important;\n          right: unset !important;\n          bottom: unset !important;\n        }\n        .preview-text {\n          font-size: 14px;\n          color: var(--hax-color-text);\n          font-style: italic;\n          width: 100%;\n          height: 24px;\n          border-bottom: 1px solid var(--hax-color-border-outline);\n          text-align: center;\n          padding: 8px 0;\n          box-sizing: content-box;\n        }\n        .preview-text iron-icon {\n          margin: 0 8px;\n          display: inline-block;\n        }\n        .preview-text-bottom {\n          border-bottom: unset;\n          border-top: 1px solid var(--hax-color-border-outline);\n        }\n        @media screen and (max-width: 550px) {\n          .hide-on-mobile {\n            opacity: 0;\n            visibility: hidden;\n            position: absolute;\n            left: -9999px;\n          }\n        }\n\n        #modetabs {\n          height: 64px;\n          padding: 0px;\n          margin: 16px 0 0 0;\n          box-sizing: content-box;\n          color: var(--hax-color-text);\n          text-align: center;\n          background-color: transparent;\n          border-bottom: 1px solid var(--hax-color-border-outline);\n          display: block;\n          justify-content: space-evenly;\n          --paper-tabs-selection-bar-color: var(--hax-color-accent1);\n          --paper-tabs: {\n            background: transparent;\n          }\n        }\n\n        #modetabs paper-tab {\n          display: inline-flex;\n          height: 100%;\n          --paper-tab-ink: var(--hax-color-accent1);\n          --paper-tab: {\n            font-size: 16px;\n          }\n        }\n        #modetabs paper-tab paper-button {\n          min-width: unset;\n          width: 100%;\n          background-color: var(--hax-color-accent1);\n          color: var(--hax-color-accent1-text);\n        }\n        .preview-buttons {\n          height: 64px;\n          padding: 0px;\n          color: var(--hax-color-text);\n          border-bottom: 1px solid var(--hax-color-border-outline);\n          background-color: transparent;\n          margin: 16px 0 0 0;\n          text-align: center;\n          box-sizing: content-box;\n        }\n        eco-json-schema-object {\n          color: var(--hax-text-color);\n          --eco-json-schema-object-form : {\n            -ms-flex: unset;\n            -webkit-flex: unset;\n            flex: unset;\n            -webkit-flex-basis: unset;\n            flex-basis: unset;\n          }\n        }\n        .preview-buttons paper-button {\n          min-width: unset;\n          width: 40%;\n          color: var(--hax-color-accent1-text);\n          display: inline-block;\n          background-color: var(--hax-color-accent1);\n        }\n        .vaadin-layout-width {\n          min-width: 30%;\n          width: 50%;\n          max-width: 70%;\n        }\n        .vaadin-layout-height {\n          min-height: 40%;\n          height: 50%;\n          max-height: 60%;\n        }\n      </style>\n      <vaadin-split-layout class=\"panel-wrapper\" orientation=\"[[orientation]]\">\n        <div\n          id=\"ppanel1\"\n          class$=\"vaadin-split-layout-panel vaadin-layout-[[orientationDirection]]\"\n        >\n          <div class=\"preview-buttons\">\n            <paper-button id=\"insert\" raised on-click=\"insert\"\n              >[[editTitle]]</paper-button\n            >\n            <paper-button id=\"cancel\" raised on-click=\"cancel\"\n              >Cancel</paper-button\n            >\n          </div>\n          <div class=\"preview-text\">\n            <iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon>[[humanName]]\n            preview<iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon>\n          </div>\n          <div id=\"preview\"><slot></slot></div>\n          <div class=\"preview-text preview-text-bottom\">\n            <iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon>end\n            preview<iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon>\n          </div>\n        </div>\n        <div\n          id=\"ppanel2\"\n          class$=\"vaadin-split-layout-panel vaadin-layout-[[orientationDirection]]\"\n        >\n          <paper-tabs\n            hidden$=\"[[!haspreviewNode]]\"\n            id=\"modetabs\"\n            selected=\"{{modeTab}}\"\n            attr-for-selected=\"data-mode\"\n          >\n            <paper-tab id=\"configurebutton\" data-mode=\"configure\"\n              ><paper-button raised=\"\" noink=\"\"\n                >Configure</paper-button\n              ></paper-tab\n            >\n            <paper-tab id=\"advancedbutton\" data-mode=\"advanced\"\n              ><paper-button raised=\"\" noink=\"\"\n                >Advanced</paper-button\n              ></paper-tab\n            >\n          </paper-tabs>\n          <paper-card class=\"form-wrapper\">\n            <eco-json-schema-object\n              id=\"form\"\n              schema=\"[[schema]]\"\n              value=\"{{value}}\"\n            ></eco-json-schema-object>\n          </paper-card>\n        </div>\n      </vaadin-split-layout>\n      <iron-media-query\n        query=\"[[_computeMediaQuery(responsiveWidth)]]\"\n        on-query-matches-changed=\"_onQueryMatchesChanged\"\n      ></iron-media-query>\n    "],["\n      <style include=\"simple-colors hax-shared-styles\">\n        :host {\n          display: block;\n          background-color: #ffffff;\n          overflow: hidden;\n        }\n        iron-icon:not(:defined),\n        paper-button:not(:defined) {\n          display: none;\n        }\n        paper-card.form-wrapper {\n          margin: 0;\n          padding: 0 16px 80px 16px;\n          width: 100%;\n          min-height: 160px;\n          background-color: transparent;\n          overflow: auto;\n          height: 100%;\n        }\n\n        vaadin-split-layout {\n          display: flex;\n          justify-content: space-around;\n          height: 100%;\n        }\n        eco-json-schema-object {\n          width: 50%;\n        }\n\n        .vaadin-split-layout-panel {\n          flex: 1 1 auto;\n          width: 100%;\n          flex-wrap: nowrap;\n          margin: 0;\n          height: 100%;\n          overflow: hidden;\n        }\n        #form {\n          --eco-json-schema-object-form: {\n            display: block !important;\n          }\n        }\n        #preview {\n          padding: 16px;\n          color: #000000;\n          background-color: var(--hax-color-bg-accent);\n          max-height: 63vh;\n          overflow: scroll;\n        }\n        #preview ::slotted(*) {\n          float: unset !important;\n          margin: unset !important;\n          width: unset !important;\n          position: unset !important;\n          top: unset !important;\n          left: unset !important;\n          right: unset !important;\n          bottom: unset !important;\n        }\n        .preview-text {\n          font-size: 14px;\n          color: var(--hax-color-text);\n          font-style: italic;\n          width: 100%;\n          height: 24px;\n          border-bottom: 1px solid var(--hax-color-border-outline);\n          text-align: center;\n          padding: 8px 0;\n          box-sizing: content-box;\n        }\n        .preview-text iron-icon {\n          margin: 0 8px;\n          display: inline-block;\n        }\n        .preview-text-bottom {\n          border-bottom: unset;\n          border-top: 1px solid var(--hax-color-border-outline);\n        }\n        @media screen and (max-width: 550px) {\n          .hide-on-mobile {\n            opacity: 0;\n            visibility: hidden;\n            position: absolute;\n            left: -9999px;\n          }\n        }\n\n        #modetabs {\n          height: 64px;\n          padding: 0px;\n          margin: 16px 0 0 0;\n          box-sizing: content-box;\n          color: var(--hax-color-text);\n          text-align: center;\n          background-color: transparent;\n          border-bottom: 1px solid var(--hax-color-border-outline);\n          display: block;\n          justify-content: space-evenly;\n          --paper-tabs-selection-bar-color: var(--hax-color-accent1);\n          --paper-tabs: {\n            background: transparent;\n          }\n        }\n\n        #modetabs paper-tab {\n          display: inline-flex;\n          height: 100%;\n          --paper-tab-ink: var(--hax-color-accent1);\n          --paper-tab: {\n            font-size: 16px;\n          }\n        }\n        #modetabs paper-tab paper-button {\n          min-width: unset;\n          width: 100%;\n          background-color: var(--hax-color-accent1);\n          color: var(--hax-color-accent1-text);\n        }\n        .preview-buttons {\n          height: 64px;\n          padding: 0px;\n          color: var(--hax-color-text);\n          border-bottom: 1px solid var(--hax-color-border-outline);\n          background-color: transparent;\n          margin: 16px 0 0 0;\n          text-align: center;\n          box-sizing: content-box;\n        }\n        eco-json-schema-object {\n          color: var(--hax-text-color);\n          --eco-json-schema-object-form : {\n            -ms-flex: unset;\n            -webkit-flex: unset;\n            flex: unset;\n            -webkit-flex-basis: unset;\n            flex-basis: unset;\n          }\n        }\n        .preview-buttons paper-button {\n          min-width: unset;\n          width: 40%;\n          color: var(--hax-color-accent1-text);\n          display: inline-block;\n          background-color: var(--hax-color-accent1);\n        }\n        .vaadin-layout-width {\n          min-width: 30%;\n          width: 50%;\n          max-width: 70%;\n        }\n        .vaadin-layout-height {\n          min-height: 40%;\n          height: 50%;\n          max-height: 60%;\n        }\n      </style>\n      <vaadin-split-layout class=\"panel-wrapper\" orientation=\"[[orientation]]\">\n        <div\n          id=\"ppanel1\"\n          class$=\"vaadin-split-layout-panel vaadin-layout-[[orientationDirection]]\"\n        >\n          <div class=\"preview-buttons\">\n            <paper-button id=\"insert\" raised on-click=\"insert\"\n              >[[editTitle]]</paper-button\n            >\n            <paper-button id=\"cancel\" raised on-click=\"cancel\"\n              >Cancel</paper-button\n            >\n          </div>\n          <div class=\"preview-text\">\n            <iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon>[[humanName]]\n            preview<iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-down\"></iron-icon>\n          </div>\n          <div id=\"preview\"><slot></slot></div>\n          <div class=\"preview-text preview-text-bottom\">\n            <iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon>end\n            preview<iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon\n            ><iron-icon icon=\"icons:arrow-drop-up\"></iron-icon>\n          </div>\n        </div>\n        <div\n          id=\"ppanel2\"\n          class$=\"vaadin-split-layout-panel vaadin-layout-[[orientationDirection]]\"\n        >\n          <paper-tabs\n            hidden\\$=\"[[!haspreviewNode]]\"\n            id=\"modetabs\"\n            selected=\"{{modeTab}}\"\n            attr-for-selected=\"data-mode\"\n          >\n            <paper-tab id=\"configurebutton\" data-mode=\"configure\"\n              ><paper-button raised=\"\" noink=\"\"\n                >Configure</paper-button\n              ></paper-tab\n            >\n            <paper-tab id=\"advancedbutton\" data-mode=\"advanced\"\n              ><paper-button raised=\"\" noink=\"\"\n                >Advanced</paper-button\n              ></paper-tab\n            >\n          </paper-tabs>\n          <paper-card class=\"form-wrapper\">\n            <eco-json-schema-object\n              id=\"form\"\n              schema=\"[[schema]]\"\n              value=\"{{value}}\"\n            ></eco-json-schema-object>\n          </paper-card>\n        </div>\n      </vaadin-split-layout>\n      <iron-media-query\n        query=\"[[_computeMediaQuery(responsiveWidth)]]\"\n        on-query-matches-changed=\"_onQueryMatchesChanged\"\n      ></iron-media-query>\n    "]);_templateObject_acff79707c0711e98a2471d74bf08c91=function _templateObject_acff79707c0711e98a2471d74bf08c91(){return data};return data}/**
 * `hax-preview`
 * `An element that can generate a form`
 * @microcopy - the mental model for this element
 *  - element - the element to work against. an object that expresses enough information to create an element in the DOM. This is useful for remixing a tag via the json-form
 *  - source - a json object from some place loaded in remotely which will then be in json-schema format. This will then be parsed into a form which can be used to manipulate the element.
 */var HaxPreview=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(HaxPreview,_PolymerElement);function HaxPreview(){var _this;babelHelpers.classCallCheck(this,HaxPreview);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(HaxPreview).call(this));new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-card/paper-card.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-tabs/paper-tabs.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-tabs/paper-tab.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-button/paper-button.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/iron-icons/iron-icons.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@vaadin/vaadin-split-layout/vaadin-split-layout.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../eco-json-schema-form/eco-json-schema-form.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../eco-json-schema-form/lib/eco-json-schema-object.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../code-editor/code-editor.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-input/paper-textarea.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../app-datepicker/app-datepicker.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../../@polymer/paper-toggle-button/paper-toggle-button.js"],res,rej)});new Promise(function(res,rej){return _require.default(["./hax-upload-field.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../simple-picker/simple-picker.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../simple-icon-picker/simple-icon-picker.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../paper-input-flagged/paper-input-flagged.js"],res,rej)});return _this}babelHelpers.createClass(HaxPreview,[{key:"_onQueryMatchesChanged",value:function _onQueryMatchesChanged(e){if(e.detail.value){this.orientation="vertical";this.orientationDirection="height"}else{this.orientation="horizontal";this.orientationDirection="width"}}},{key:"_computeMediaQuery",value:function _computeMediaQuery(responsiveWidth){return"(max-width: "+responsiveWidth+")"}/**
   * Trigger cancel on manager as it is the parent here.
   */},{key:"cancel",value:function cancel(e){window.HaxStore.instance.haxManager.cancel(e)}/**
   * Trigger insert on manager as it is the parent here.
   */},{key:"insert",value:function insert(e){window.HaxStore.instance.haxManager.insertHaxElement(e)}/**
   * Make a boolean to match the preview node's existance.
   */},{key:"_computedHasPreviewNode",value:function _computedHasPreviewNode(previewNode){if(babelHelpers.typeof(previewNode.tagName)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){return!1}else{return!0}}/**
   * Edit source.
   */},{key:"_computedEditSource",value:function _computedEditSource(newValue,oldValue){if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){if(babelHelpers.typeof(this.previewNode.tagName)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&window.HaxStore.instance.elementList[this.previewNode.tagName.toLowerCase()]){return window.HaxStore.instance.elementList[this.previewNode.tagName.toLowerCase()].canEditSource}}return!0}/**
   * Compute form key to use.
   */},{key:"_computedFormKey",value:function _computedFormKey(advanced){if(advanced){return"advanced"}else{return"configure"}}/**
   * Form key changed, rebuild schema for the form
   * but don't update the element. Critical difference.
   */},{key:"_formKeyChanged",value:function _formKeyChanged(newValue,oldValue){// ensure this doesn't run the 1st pass
if(babelHelpers.typeof(oldValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var schema={};// see if we can get schema off of this.
if(babelHelpers.typeof(this.previewNode)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(this.previewNode.tagName)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.HaxStore.instance.elementList[this.previewNode.tagName.toLowerCase()])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var element=this.element,props=window.HaxStore.instance.elementList[this.previewNode.tagName.toLowerCase()];if("function"===typeof this.previewNode.getHaxJSONSchemaType){schema=window.HaxStore.instance.getHaxJSONSchema(newValue,props,this.previewNode)}else{schema=window.HaxStore.instance.getHaxJSONSchema(newValue,props)}for(var property in element.properties){if(element.properties.hasOwnProperty(property)){if(babelHelpers.typeof(schema.properties[property])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.properties[property].value=element.properties[property];// support custom element input
if(babelHelpers.typeof(schema.properties[property].component)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.properties[property].component.properties.value=element.properties[property]}// attempt to set the property in the preview node
if("prefix"!=property&&null!=element.properties[property]&&!element.properties[property].readOnly){if("function"===typeof this.previewNode.set){// attempt to set it, should be no problem but never know
try{this.previewNode.set(property,element.properties[property])}catch(e){console.warn("".concat(property," is busted some how"));console.log(e)}}else{// set attribute, this doesn't have the Polymer convention
// this is Vanilla, Lit, etc
// set is powerful though for objects and arrays so they will reflect instantly
this.previewNode.setAttribute(property,element.properties[property])}}else if("prefix"===property){this.previewNode.setAttribute("prefix",element.properties[property])}else{console.warn("".concat(property," is busted some how"))}}this.set("value."+property,element.properties[property]);this.notifyPath("value."+property)}}var slotsApplied=!1;for(var prop in props.settings[newValue]){var previewNode=this.previewNode;if(babelHelpers.typeof(props.settings[this.formKey][prop].slot)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&!slotsApplied){slotsApplied=!0;// walk through the slots looking for the value of it
for(var i in(0,_polymerDom.dom)(previewNode).getEffectiveChildNodes()){// test for element nodes to be safe
if(babelHelpers.typeof((0,_polymerDom.dom)(previewNode).getEffectiveChildNodes()[i])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&1===(0,_polymerDom.dom)(previewNode).getEffectiveChildNodes()[i].nodeType&&(0,_polymerDom.dom)(previewNode).getEffectiveChildNodes()[i].slot===props.settings[this.formKey][prop].slot){if(babelHelpers.typeof((0,_polymerDom.dom)(previewNode).getEffectiveChildNodes()[i].innerHTML)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.properties[props.settings[this.formKey][prop].slot].value=(0,_polymerDom.dom)(previewNode).getEffectiveChildNodes()[i].innerHTML;this.set("value."+props.settings[this.formKey][prop].slot,(0,_polymerDom.dom)(previewNode).getEffectiveChildNodes()[i].innerHTML);this.notifyPath("value."+props.settings[this.formKey][prop].slot)}}}}}}this.set("schema",{});this.set("schema",schema)}}/**
   * When the preview node is updated, pull schema associated with it
   */},{key:"_previewNodeChanged",value:function _previewNodeChanged(newValue,oldValue){// ensure this doesn't run the 1st pass
if(babelHelpers.typeof(oldValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&newValue!=oldValue){// see if we can get schema off of this.
if(babelHelpers.typeof(newValue.tagName)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.HaxStore.instance.elementList[newValue.tagName.toLowerCase()])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var element=this.element,props=window.HaxStore.instance.elementList[newValue.tagName.toLowerCase()],schema={};if("function"===typeof newValue.getHaxJSONSchemaType){schema=window.HaxStore.instance.getHaxJSONSchema(this.formKey,props,newValue)}else{schema=window.HaxStore.instance.getHaxJSONSchema(this.formKey,props)}// generate a human name for this
if(babelHelpers.typeof(props.gizmo.title)===("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.humanName=newValue.tagName.replace("-"," ").toLowerCase()}else{this.humanName=props.gizmo.title}// first, allow element properties to dictate defaults
for(var property in element.properties){if(element.properties.hasOwnProperty(property)){if(babelHelpers.typeof(schema.properties[property])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.properties[property].value=element.properties[property];// support custom element input
if(babelHelpers.typeof(schema.properties[property].component)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.properties[property].component.properties.value=element.properties[property]}}// ensure this isn't read only
if(null!=element.properties[property]&&!element.properties[property].readOnly){// attempt to set it, should be no problem but never know
try{newValue.set(property,element.properties[property])}catch(e){}}this.set("value."+property,element.properties[property]);this.notifyPath("value."+property)}}// then, let the node itself dictate defaults if things are not set
for(var property in newValue){if(newValue.hasOwnProperty(property)&&babelHelpers.typeof(schema.properties[property])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(newValue[property].value)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&null!==newValue[property].value){schema.properties[property].value=newValue.properties[property].value;// support custom element input
if(babelHelpers.typeof(schema.properties[property].component)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.properties[property].component.properties.value=newValue.properties[property].value}this.set("value."+property,newValue.properties[property].value);this.notifyPath("value."+property)}}// need to specifically walk through slots if there is anything
// that says it has to come from a slot
for(var prop in props.settings[this.formKey]){if(babelHelpers.typeof(props.settings[this.formKey][prop].slot)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// walk through the slots looking for the value of it
for(var i in(0,_polymerDom.dom)(newValue).getEffectiveChildNodes()){// test for element nodes to be safe
if(babelHelpers.typeof((0,_polymerDom.dom)(newValue).getEffectiveChildNodes()[i])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&1===(0,_polymerDom.dom)(newValue).getEffectiveChildNodes()[i].nodeType&&(0,_polymerDom.dom)(newValue).getEffectiveChildNodes()[i].slot===props.settings[this.formKey][prop].slot){if(babelHelpers.typeof((0,_polymerDom.dom)(newValue).getEffectiveChildNodes()[i].innerHTML)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){schema.properties[props.settings[this.formKey][prop].slot].value=(0,_polymerDom.dom)(newValue).getEffectiveChildNodes()[i].innerHTML;this.set("value."+props.settings[this.formKey][prop].slot,(0,_polymerDom.dom)(newValue).getEffectiveChildNodes()[i].innerHTML);this.notifyPath("value."+props.settings[this.formKey][prop].slot)}}}}}this.set("schema",{});this.set("schema",schema)}}}/**
   * Element changed, update the preview area.
   */},{key:"_elementChanged",value:function _elementChanged(newValue,oldValue){if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// wipe the preview area and assocaited node
var preview=(0,_polymerDom.dom)(this);(0,_haxutils.wipeSlot)(preview,"*");this.set("previewNode",{});this.modeTab="configure";// if we have something, generate the new element inside it
if(null!=newValue&&0!=newValue.length){var frag=document.createElement(newValue.tag);frag.innerHTML=newValue.content;// clone the fragment which will force an escalation to full node
var newNode=frag.cloneNode(!0);newNode.setAttribute("hax-preview-mode","hax-preview-mode");// send this into the root, which should filter it back down into the slot
preview.appendChild(newNode);// need to let append propagate, it probably takes like no time
this.set("previewNode",newNode)}}else{this.modeTab="advanced";this.set("previewNode",{})}}/**
   * Value in the form has changed, reflect to the preview.
   */},{key:"_valueChanged",value:function _valueChanged(valueChange){var node=this.previewNode;// sanity check and then get props and mesh with form value response
if(babelHelpers.typeof(node.tagName)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(window.HaxStore.instance.elementList[node.tagName.toLowerCase()])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){for(var path in valueChange.base){// load up the property bindings we care about from the store
var props=window.HaxStore.instance.elementList[node.tagName.toLowerCase()],propSettings=props.settings[this.formKey].filter(function(n){if(babelHelpers.typeof(n.attribute)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){return n.attribute===path}else if(babelHelpers.typeof(n.property)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){return n.property===path}else if(babelHelpers.typeof(n.slot)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){return n.slot===path}});// translate key name to array position
// ensure we have anything before moving forward (usually we will)
if(0<propSettings.length){var propData=propSettings.pop();if(propData.attribute){var attributeName=window.HaxStore.camelToDash(propData.attribute);// special supporting for boolean because html is weird :p
if(!0===valueChange.base[path]){node.setAttribute(attributeName,attributeName)}else if(!1===valueChange.base[path]){node.removeAttribute(attributeName)}else{// special support for innerText which is an html attribute...sorta
if("inner-text"===attributeName){node.innerText=valueChange.base[path];node.removeAttribute("innertext")}else if(null!==valueChange.base[path]&&"null"!==valueChange.base[path]){node.setAttribute(attributeName,valueChange.base[path])}}this.set("element.properties."+propData.attribute,valueChange.base[path]);this.notifyPath("element.properties."+propData.attribute)}else if(propData.property){if(!0===valueChange.base[path]||!1===valueChange.base[path]){node[propData.property]=valueChange.base[path]}else{// account for a splice because... ugh
if(null!=valueChange.base[path]&&valueChange.base[path].indexSplices&&valueChange.base[path].indexSplices[0]){// dirty check, if this is a vanillaJS element w/ array splices
// it might get PO'ed but time will tell
if("function"===typeof node.set){node.set(propData.property,valueChange.base[path].indexSplices[0].object);node.notifyPath(propData.property+".*")}else{node[propData.property]=valueChange.base[path].indexSplices[0].object}}// account for Array based values on initial set
else if(null!=valueChange.base[path]&&valueChange.base[path].constructor===Array){// look for polymer setter to notify paths correctly
if("function"===typeof node.set){node.set(propData.property,window.HaxStore.toArray(valueChange.base[path]))}else{node[propData.property]=window.HaxStore.toArray(valueChange.base[path])}}else{if("function"===typeof node.set){node.set(propData.property,valueChange.base[path])}else{node[propData.property]=valueChange.base[path]}}}this.set("element.properties."+propData.property,valueChange.base[path]);this.notifyPath("element.properties."+propData.property)}else if(babelHelpers.typeof(propData.slot)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var slotTag="span";if(propData.slotWrapper){slotTag=propData.slotWrapper}else if("code-editor"===node.tagName.toLowerCase()){slotTag="template"}var tmpel=document.createElement(slotTag);if(propData.slotAttributes){for(var attr in propData.slotAttributes){tmpel.setAttribute(attr,propData.slotAttributes[attr])}}// support unnamed slots
if(""!==propData.slot){tmpel.slot=propData.slot}tmpel.innerHTML=valueChange.base[path];// wipe just the slot in question
(0,_haxutils.wipeSlot)(node,propData.slot);var cloneIt=tmpel.cloneNode(!0);// inject the slotted content
(0,_polymerDom.dom)(node).appendChild(cloneIt);this.set("element.content","<template>"+cloneIt.outerHTML+"</template>");this.notifyPath("element.content")}}}}}/**
   * Editor mode changed handler
   */},{key:"_editorModeChanged",value:function _editorModeChanged(mode){if(mode){// if it's the advanced setting then toggle the advancedForm setting
if("advanced"===mode){this.advancedForm=!0}else{this.advancedForm=!1}}}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_acff79707c0711e98a2471d74bf08c91())}},{key:"tag",get:function get(){return"hax-preview"}},{key:"observers",get:function get(){return["_valueChanged(value.*)"]}},{key:"properties",get:function get(){return{responsiveWidth:{type:String,value:"800px"},orientation:{type:String,value:"horizontal"},orientationDirection:{type:String,value:"width"},/**
       * A reference to the previewNode so we can do data binding correctly.
       */previewNode:{type:Object,value:{},notify:!0,observer:"_previewNodeChanged"},/**
       * Returned value from the form input.
       */value:{type:Object,notify:!0,value:{}},/**
       * State of mode tabs.
       */modeTab:{type:String,value:"configure",observer:"_editorModeChanged"},/**
       * Edit title since it can change based on the operation
       */editTitle:{type:String,value:"Update"},/**
       * The element to work against expressing the structure of the DOM element
       * to create in the preview area.
       */element:{type:Object,observer:"_elementChanged"},/**
       * Boolean association for a preview node existing.
       */haspreviewNode:{type:Boolean,computed:"_computedHasPreviewNode(previewNode)"},/**
       * JSON Schema.
       */schema:{type:Object,value:{schema:{}}},/**
       * If this is the advancedForm or not. Default to not but slider allows
       * switching mode for the form to be presented.
       */advancedForm:{type:Boolean,value:!1},/**
       * If we should show source view or not.
       */canEditSource:{type:Boolean,computed:"_computedEditSource(formKey)"},/**
       * Form key from hax to target.
       */formKey:{type:String,computed:"_computedFormKey(advancedForm)",observer:"_formKeyChanged"},/**
       * Active Name from the properties
       */humanName:{type:String}}}}]);return HaxPreview}(_polymerElement.PolymerElement);_exports.HaxPreview=HaxPreview;window.customElements.define(HaxPreview.tag,HaxPreview)});