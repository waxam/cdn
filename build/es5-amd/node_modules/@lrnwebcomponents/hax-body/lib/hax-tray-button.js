define(["exports", "../../../lit/index.js", "./hax-toolbar-item.js"], function (_exports, _index, _haxToolbarItem) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxButton = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-tray-button`
   * `A button in the tray`
   */
  var HaxButton = /*#__PURE__*/function (_HaxToolbarItemBehavi) {
    babelHelpers.inherits(HaxButton, _HaxToolbarItemBehavi);

    var _super = _createSuper(HaxButton);

    function HaxButton() {
      var _this;

      babelHelpers.classCallCheck(this, HaxButton);
      _this = _super.call(this);
      _this.eventData = null;
      return _this;
    }

    babelHelpers.createClass(HaxButton, [{
      key: "_voiceEvent",
      value: function _voiceEvent(e) {
        this._handleClick(e);

        this.click();
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_handleClick",
      value: function _handleClick(e) {
        this.dispatchEvent(new CustomEvent("hax-tray-button-click", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            eventName: this.eventName,
            index: this.index,
            value: this.eventData
          }
        }));
      }
      /**
       * LitElement life cycle - properties changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxButton.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxButton.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "voiceCommand") {
            _this2.dispatchEvent(new CustomEvent("hax-add-voice-command", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: {
                command: ":name: " + _this2[propName],
                context: _this2,
                callback: "_voiceEvent"
              }
            }));
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-tray-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HaxButton), "properties", this)), {}, {
          /**
           * Voice command to append for things that support data-voicecommand.
           */
          voiceCommand: {
            type: String,
            attribute: "voice-command"
          },
          wide: {
            type: Boolean,
            reflect: true
          },

          /**
           * Index position in the original list of imports
           */
          index: {
            type: Number
          },
          eventData: {
            type: String,
            attribute: "event-data"
          }
        });
      }
    }]);
    return HaxButton;
  }((0, _haxToolbarItem.HaxToolbarItemBehaviors)(_index.LitElement));

  _exports.HaxButton = HaxButton;
  customElements.define(HaxButton.tag, HaxButton);
});