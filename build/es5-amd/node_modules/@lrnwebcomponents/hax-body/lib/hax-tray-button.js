define(["exports", "../../../lit-element/lit-element.js", "../../simple-colors/simple-colors.js", "../../../@polymer/paper-button/paper-button.js", "../../simple-tooltip/simple-tooltip.js"], function (_exports, _litElement, _simpleColors, _paperButton, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXTrayButton = void 0;

  function _templateObject7_8fce5b80c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          flex-direction: column;\n          align-items: center;\n          margin: 1px 0;\n          transition: all 0.5ms ease-in-out;\n          --hax-contextual-action-color: var(\n            --simple-colors-default-theme-cyan-8,\n            #007999\n          );\n        }\n        iron-icon {\n          width: 20px;\n          height: 20px;\n          transform: var(--hax-tray-button-rotate);\n        }\n        .item-label {\n          margin-top: 4px;\n          width: 60px;\n          font-size: 10px;\n          line-height: 10px;\n          text-align: center;\n          text-overflow: ellipsis;\n          overflow: hidden;\n          word-break: break-word;\n        }\n        :host([wide]) {\n          display: block;\n          width: 100%;\n        }\n        :host([wide]) .item-label {\n          width: unset;\n        }\n        :host([wide]) paper-button {\n          align-items: center;\n          justify-content: space-around;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n        paper-button {\n          text-transform: none;\n          color: var(\n            --hax-quick-button-accent-text,\n            var(--simple-colors-default-theme-grey-12, #000)\n          );\n          background-color: var(\n            --hax-quick-button-accent,\n            var(--simple-colors-default-theme-grey-2, #eee)\n          );\n          border: 1px solid\n            var(\n              --hax-quick-button-accent,\n              var(--simple-colors-default-theme-grey-3, #dddddd)\n            );\n          min-width: unset;\n          cursor: pointer;\n          height: 40px;\n          display: flex;\n          padding: 4px;\n          margin: 0px;\n          border-radius: 0;\n          transition: all 0.5ms ease-in-out;\n        }\n        paper-button:active,\n        paper-button:focus,\n        paper-button:hover {\n          color: var(\n            --hax-tray-panel-accent-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n          background-color: var(\n            --hax-tray-panel-accent,\n            var(--hax-contextual-action-color)\n          );\n          border-color: var(\n            --hax-tray-panel-accent,\n            var(--hax-contextual-action-color)\n          );\n          transition: all 0.5ms ease-in-out;\n        }\n        paper-button iron-icon {\n          display: inline-block;\n        }\n        :host([mini]) {\n          height: 30px;\n          width: 30px;\n        }\n        :host([mini]) paper-button {\n          height: 30px;\n          width: 30px;\n        }\n        :host([mini]) paper-button iron-icon {\n          height: 18px;\n          width: 18px;\n        }\n        .item-title {\n          margin-top: 8px;\n          color: var(--simple-colors-default-theme-grey-12, #000);\n          width: 100%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          font-size: 12px;\n          line-height: 12px;\n          height: 12px;\n          text-align: center;\n        }\n        .button-inner {\n          display: flex;\n        }\n        simple-tooltip {\n          font-size: 16px;\n          --simple-tooltip-background: var(\n            --simple-colors-default-theme-grey-12,\n            #000\n          );\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: var(\n            --simple-colors-default-theme-grey-1,\n            #dddddd\n          );\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-duration-in: 100ms;\n          --simple-tooltip-duration-out: 0;\n          --simple-tooltip-border-radius: 0;\n          --simple-tooltip-font-size: 14px;\n        }\n      "]);

    _templateObject7_8fce5b80c96f11ea8be5e1d5fe7ec787 = function _templateObject7_8fce5b80c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject6_8fce5b80c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <simple-tooltip>", "</simple-tooltip>\n          "]);

    _templateObject6_8fce5b80c96f11ea8be5e1d5fe7ec787 = function _templateObject6_8fce5b80c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject5_8fce5b80c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <div class=\"item-label\">", "</div>\n            "]);

    _templateObject5_8fce5b80c96f11ea8be5e1d5fe7ec787 = function _templateObject5_8fce5b80c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject4_8fce5b80c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject4_8fce5b80c96f11ea8be5e1d5fe7ec787 = function _templateObject4_8fce5b80c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject3_8fce5b80c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral([""]);

    _templateObject3_8fce5b80c96f11ea8be5e1d5fe7ec787 = function _templateObject3_8fce5b80c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject2_8fce5b80c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <div class=\"button-inner\">\n                <iron-icon icon=\"", "\"></iron-icon>\n              </div>\n            "]);

    _templateObject2_8fce5b80c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8fce5b80c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8fce5b80c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-button title=\"", "\" @click=\"", "\">\n        ", "\n        ", "\n      </paper-button>\n      ", "\n    "]);

    _templateObject_8fce5b80c96f11ea8be5e1d5fe7ec787 = function _templateObject_8fce5b80c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `hax-tray-button`
   * `A button in the tray`
   */
  var HAXTrayButton =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(HAXTrayButton, _SimpleColors);
    babelHelpers.createClass(HAXTrayButton, null, [{
      key: "tag",
      get: function get() {
        return "hax-tray-button";
      }
    }]);

    function HAXTrayButton() {
      var _this;

      babelHelpers.classCallCheck(this, HAXTrayButton);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXTrayButton).call(this));
      _this.mini = false;
      _this.wide = false;
      _this.eventData = null;
      _this.eventName = null;
      _this.icon = null;
      _this.colorMeaning = false;
      _this._defaultHoverColor = "cyan";
      _this._defaultColor = "blue-grey";
      _this.accentColor = _this._defaultColor;
      _this.hoverAccentColor = _this._defaultColor;

      _this.addEventListener("focusin", _this._focusIn.bind(babelHelpers.assertThisInitialized(_this)));

      _this.addEventListener("focusout", _this._focusOut.bind(babelHelpers.assertThisInitialized(_this)));

      _this.addEventListener("mouseover", _this._focusIn.bind(babelHelpers.assertThisInitialized(_this)));

      _this.addEventListener("mouseout", _this._focusOut.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }

    babelHelpers.createClass(HAXTrayButton, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8fce5b80c96f11ea8be5e1d5fe7ec787(), this.label, this._fireEvent, this.icon ? (0, _litElement.html)(_templateObject2_8fce5b80c96f11ea8be5e1d5fe7ec787(), this.icon) : (0, _litElement.html)(_templateObject3_8fce5b80c96f11ea8be5e1d5fe7ec787()), this.mini ? (0, _litElement.html)(_templateObject4_8fce5b80c96f11ea8be5e1d5fe7ec787()) : (0, _litElement.html)(_templateObject5_8fce5b80c96f11ea8be5e1d5fe7ec787(), this.label), this.mini ? (0, _litElement.html)(_templateObject6_8fce5b80c96f11ea8be5e1d5fe7ec787(), this.label) : "");
      }
    }, {
      key: "_focusIn",
      value: function _focusIn(e) {
        this.accentColor = this.hoverAccentColor === this._defaultColor ? this._defaultHoverColor : this.hoverAccentColor;
      }
    }, {
      key: "_focusOut",
      value: function _focusOut(e) {
        if (!this.colorMeaning) {
          this.accentColor = this._defaultColor;
        } else {
          this.accentColor = this.color;
        }
      }
    }, {
      key: "_voiceEvent",
      value: function _voiceEvent(e) {
        this._fireEvent(e);

        this.click();
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        this.dispatchEvent(new CustomEvent("hax-tray-button-click", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            eventName: this.eventName,
            index: this.index,
            value: this.eventData
          }
        }));
      }
      /**
       * LitElement life cycle - properties changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXTrayButton.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXTrayButton.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "voiceCommand") {
            _this2.dispatchEvent(new CustomEvent("hax-add-voice-command", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: {
                command: ":name: " + _this2[propName],
                context: _this2,
                callback: "_voiceEvent"
              }
            }));
          }

          if (propName == "color") {
            if ((!_this2.accentColor || _this2.color !== _this2._defaultColor) && _this2.colors[_this2.color]) {
              _this2.hoverAccentColor = _this2.color;
            }
          }

          if (propName == "colorMeaning" && _this2.colorMeaning) {
            _this2.accentColor = _this2.color;
          }
        });
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXTrayButton), "properties", this), {
          /**
           * Voice command to append for things that support data-voicecommand.
           */
          voiceCommand: {
            type: String,
            attribute: "voice-command"
          },
          mini: {
            type: Boolean,
            reflect: true
          },
          colorMeaning: {
            type: Boolean,
            attribute: "color-meaning"
          },
          wide: {
            type: Boolean,
            reflect: true
          },

          /**
           * Index position in the original list of imports
           */
          index: {
            type: Number
          },
          eventName: {
            type: String,
            attribute: "event-name"
          },
          eventData: {
            type: String,
            attribute: "event-data"
          },

          /**
           * label
           */
          label: {
            type: String
          },

          /**
           * Icon for the button, optional.
           */
          icon: {
            type: String
          },

          /**
           * color name of the item
           */
          color: {
            type: String
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HAXTrayButton), "styles", this)), [(0, _litElement.css)(_templateObject7_8fce5b80c96f11ea8be5e1d5fe7ec787())]);
      }
    }]);
    return HAXTrayButton;
  }(_simpleColors.SimpleColors);

  _exports.HAXTrayButton = HAXTrayButton;
  customElements.define(HAXTrayButton.tag, HAXTrayButton);
});