define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../simple-colors/simple-colors.js", "./hax-shared-styles.js"], function (_exports, _require, _polymerElement, _renderStatus, _simpleColors, _haxSharedStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxSchemaForm = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_4b384840e14a11e9bce923988a998e3c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles hax-shared-styles\">\n        :host {\n          display: block;\n          background-color: #ffffff;\n          overflow: hidden;\n        }\n        paper-card.form-wrapper {\n          margin: 0;\n          padding: 0 16px 80px 16px;\n          width: 100%;\n          min-height: 160px;\n          background-color: transparent;\n          overflow: auto;\n          height: 100%;\n        }\n\n        eco-json-schema-object {\n          width: 50%;\n        }\n        #form {\n          --eco-json-schema-object-form: {\n            display: block !important;\n          }\n        }\n\n        #modetabs {\n          height: 64px;\n          padding: 0px;\n          margin: 16px 0 0 0;\n          box-sizing: content-box;\n          color: var(--hax-color-text);\n          text-align: center;\n          background-color: transparent;\n          border-bottom: 1px solid var(--hax-color-border-outline);\n          display: block;\n          justify-content: space-evenly;\n          --paper-tabs-selection-bar-color: var(--hax-color-accent1);\n          --paper-tabs: {\n            background: transparent;\n          }\n        }\n\n        #modetabs paper-tab {\n          display: inline-flex;\n          height: 100%;\n          --paper-tab-ink: var(--hax-color-accent1);\n          --paper-tab: {\n            font-size: 16px;\n          }\n        }\n        #modetabs paper-tab paper-button {\n          min-width: unset;\n          width: 100%;\n          background-color: var(--hax-color-menu-heading-bg, #eeeeee);\n          color: var(--hax-color-menu-heading-color, black);\n        }\n        eco-json-schema-object {\n          color: var(--hax-text-color);\n          --paper-input-container-focus-color: var(\n            --haxcms-site-listing-color-hover\n          );\n          --simple-colors-picker-preview-size: 20px;\n          --eco-json-schema-object-form: {\n            -ms-flex: unset;\n            -webkit-flex: unset;\n            flex: unset;\n            -webkit-flex-basis: unset;\n            flex-basis: unset;\n          }\n        }\n      </style>\n      <paper-tabs\n        id=\"modetabs\"\n        selected=\"{{modeTab}}\"\n        attr-for-selected=\"data-mode\"\n      >\n        <paper-tab id=\"configurebutton\" data-mode=\"configure\"\n          ><paper-button raised=\"\" noink=\"\">Configure</paper-button></paper-tab\n        >\n        <paper-tab id=\"advancedbutton\" data-mode=\"advanced\"\n          ><paper-button raised=\"\" noink=\"\">Advanced</paper-button></paper-tab\n        >\n      </paper-tabs>\n      <paper-card class=\"form-wrapper\">\n        <eco-json-schema-object\n          id=\"form\"\n          schema=\"[[schema]]\"\n          value=\"{{value}}\"\n        ></eco-json-schema-object>\n      </paper-card>\n    "]);

    _templateObject_4b384840e14a11e9bce923988a998e3c = function _templateObject_4b384840e14a11e9bce923988a998e3c() {
      return data;
    };

    return data;
  }

  /**
   * `hax-schema-form`
   * `An element that can generate a form from HAXschema`
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   *  - source - a json object from some place loaded in remotely which will then be in json-schema format. This will then be parsed into a form which can be used to manipulate the element.
   */
  var HaxSchemaForm =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxSchemaForm, _PolymerElement);

    function HaxSchemaForm() {
      var _this;

      babelHelpers.classCallCheck(this, HaxSchemaForm);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxSchemaForm).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-toggle-button/paper-toggle-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-card/paper-card.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-tabs/paper-tabs.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-tabs/paper-tab.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../eco-json-schema-form/eco-json-schema-form.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../eco-json-schema-form/lib/eco-json-schema-object.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../code-editor/code-editor.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxSchemaForm, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxSchemaForm.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          new Promise(function (res, rej) {
            return _require.default(["../../../@polymer/paper-input/paper-textarea.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../../app-datepicker/app-datepicker.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-picker/simple-picker.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-icon-picker/simple-icon-picker.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-colors/lib/simple-colors-picker.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../paper-input-flagged/paper-input-flagged.js"], res, rej);
          });
        });
      }
      /**
       * Compute form key to use.
       */

    }, {
      key: "_computedFormKey",
      value: function _computedFormKey(advanced) {
        if (advanced) {
          return "advanced";
        } else {
          return "configure";
        }
      }
      /**
       * Form key changed, rebuild schema for the form.
       */

    }, {
      key: "_formKeyChanged",
      value: function _formKeyChanged(newValue, oldValue) {
        if (newValue) {
          if (newValue === "advanced") {
            this.set("schema", this.advancedSchema);
          } else {
            this.set("schema", this.configureSchema);
          }

          this.notifyPath("schema.*");
        }
      }
      /**
       * Value in the form has changed, reflect to the preview.
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(newValue) {
        if (newValue && this.schema) {
          for (var i in newValue) {
            this.schema[i].value = newValue[i];
          }
        }
      }
      /**
       * Editor mode changed handler
       */

    }, {
      key: "_editorModeChanged",
      value: function _editorModeChanged(mode) {
        if (mode) {
          // if it's the advanced setting then toggle the advancedForm setting
          if (mode === "advanced") {
            this.advancedForm = true;
          } else {
            this.advancedForm = false;
          }
        }
      }
      /**
       * add a field to the form in question in refresh
       */

    }, {
      key: "addField",
      value: function addField(key, field) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "configure";

        if (type === "configure") {
          this.configureSchema.properties[key] = field;
          this.set("schema", this.configureSchema);
        } else {
          this.set("schema", this.advancedSchema);
        }

        this.notifyPath("schema.*");
      }
      /**
       * remove a field from one of the forms in question and refresh the display
       */

    }, {
      key: "removeField",
      value: function removeField(key) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "configure";

        if (type === "configure") {
          delete this.configureSchema.properties[key];
          this.set("schema", this.configureSchema);
        } else {
          delete this.advancedSchema.properties[key];
          this.set("schema", this.advancedSchema);
        }

        this.notifyPath("schema.*");
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_4b384840e14a11e9bce923988a998e3c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-schema-form";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Returned value from the form input.
           */
          initialValue: {
            type: Object,
            notify: true,
            value: {},
            observer: "_valueChanged"
          },
          value: {
            type: Object,
            notify: true,
            value: {}
          },

          /**
           * State of mode tabs.
           */
          modeTab: {
            type: String,
            observer: "_editorModeChanged"
          },

          /**
           * If this is the advancedForm or not. Default to not but slider allows
           * switching mode for the form to be presented.
           */
          advancedForm: {
            type: Boolean,
            value: false
          },

          /**
           * If we should show source view or not.
           */
          canEditSource: {
            type: Boolean
          },

          /**
           * Form key from hax to target.
           */
          formKey: {
            type: String,
            computed: "_computedFormKey(advancedForm)",
            observer: "_formKeyChanged"
          },

          /**
           * JSON Schema.
           */
          schema: {
            type: Object,
            notify: true
          },

          /**
           * JSON Schema.
           */
          configureSchema: {
            type: Object,
            value: {
              schema: {}
            }
          },

          /**
           * JSON Schema.
           */
          advancedSchema: {
            type: Object,
            value: {
              schema: {}
            }
          }
        };
      }
    }]);
    return HaxSchemaForm;
  }(_polymerElement.PolymerElement);

  _exports.HaxSchemaForm = HaxSchemaForm;
  window.customElements.define(HaxSchemaForm.tag, HaxSchemaForm);
});