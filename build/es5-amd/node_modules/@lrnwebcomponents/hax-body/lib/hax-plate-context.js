define(["exports", "require", "../../utils/utils.js"], function (_exports, _require, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxPlateContext, _winEventsElement);

    function HaxPlateContext() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxPlateContext).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated"
      }; // set tag for later use

      _this.tag = HaxPlateContext.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/paper-item/paper-item.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-context-item-menu.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-context-item.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "_haxStorePropertyUpdated",

      /**
       * Store updated, sync.
       */
      value: function _haxStorePropertyUpdated(e) {
        var _this2 = this;

        setTimeout(function () {
          if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property && _this2.getAttribute("on-screen") != null && ["activeNode", "activeContainerNode"].includes(e.detail.property)) {
            // when activeNode changes make sure we reposition
            _this2.__updatePlatePosition();
          }
        }, 10);
      }
    }, {
      key: "__updatePlatePosition",
      value: function __updatePlatePosition() {
        var _this3 = this;

        setTimeout(function () {
          var active = window.HaxStore.instance.activeNode;

          var right = _this3.shadowRoot.querySelector("#right");

          var rightremove = _this3.shadowRoot.querySelector("#rightremove");

          if (window.HaxStore.instance.activeContainerNode) {
            active = window.HaxStore.instance.activeContainerNode;
          } // support for enabling or disabling


          right.disabled = false;
          rightremove.disabled = false;

          if (active && active.tagName == "GRID-PLATE") {
            if (active.layout == "1-1-1-1-1-1") {
              right.disabled = true;
            }
          } else {
            rightremove.disabled = true;
          }
        }, 100);
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this4 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "connectedCallback", this).call(this);
        setTimeout(function () {
          _this4.shadowRoot.querySelector("#drag").addEventListener("dragstart", _this4._dragStart);

          _this4.shadowRoot.querySelector("#drag").addEventListener("dragend", _this4._dragEnd);
        }, 0);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#drag").removeEventListener("dragstart", this._dragStart);
        this.shadowRoot.querySelector("#drag").removeEventListener("dragend", this._dragEnd);
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxPlateContext.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "_dragEnd",
      value: function _dragEnd(e) {
        window.HaxStore.instance._lockContextPosition = false;
        var children = window.HaxStore.instance.activeHaxBody.children; // walk the children and apply the draggable state needed

        for (var i in children) {
          if (babelHelpers.typeof(children[i].classList) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            children[i].classList.remove("hax-mover", "hax-hovered", "hax-moving", "grid-plate-active-item");
          }
        }
      }
      /**
       * Drag start so we know what target to set
       */

    }, {
      key: "_dragStart",
      value: function _dragStart(e) {
        var target = window.HaxStore.instance.activeNode;
        window.HaxStore.instance.__dragTarget = target;
        window.HaxStore.instance._lockContextPosition = true;
        target.classList.add("hax-moving");

        if (e.dataTransfer) {
          e.dataTransfer.dropEffect = "move";
          e.dataTransfer.setDragImage(target, -20, -20);
        }

        e.stopPropagation();
        e.stopImmediatePropagation();
        setTimeout(function () {
          // show where things can be dropped only during the drag
          if (!window.HaxStore.instance.activeHaxBody.openDrawer && window.HaxStore.instance.editMode) {
            var children = window.HaxStore.instance.activeHaxBody.children; // walk the children and apply the draggable state needed

            for (var i in children) {
              if (children[i].classList && target !== children[i]) {
                children[i].classList.add("hax-mover");
              }
            }
          }
        }, 10);
      }
    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      margin-top: -2px;\n      background-color:white;\n      --hax-contextual-action-color: var(\n        --simple-colors-default-theme-cyan-8,\n        #007999\n      );\n    }\n    hax-context-item {\n      display: block;\n    }\n    hax-context-item[large] {\n      display: inline-block;\n      margin:0;\n      padding:0;\n    }\n    hax-context-item-menu {\n      --hax-context-item-menu-height: 28px;\n    }\n    .area {\n      display: flex;\n      visibility: visible;\n      opacity: .8;\n      transition: .2s all ease-in-out;\n    }\n    .area:hover {\n      opacity: 1;\n    }\n    paper-item {\n      background-color: var(--hax-contextual-action-color);\n      -webkit-justify-content: flex-start;\n      justify-content: flex-start;\n      height: 24px;\n      padding: 0 4px;\n      min-height: 24px;\n      font-size: 10px;\n      color: white;\n    }\n    #drag hax-context-item:hover,\n    paper-item:hover {\n      cursor: pointer;\n      color: black;\n    }\n    iron-icon {\n      padding: 0 2px;\n      width: 16px;\n      height: 16px;\n    }\n    :host(.hax-context-pin-top) .area {\n      position: fixed;\n      top: 40px;\n      margin-left: -30px;\n      flex-direction: column;\n    }\n    </style>\n    <div class=\"area\" id=\"area\">\n      <hax-context-item-menu\n        mini\n        id=\"drag\"\n        action\n        icon=\"hax:arrow-all\"\n        label=\"Drag\"\n        draggable=\"true\"\n        selected-value=\"0\"\n        reset-on-select>\n      <paper-item hidden value=\"\"></paper-item>\n      <hax-context-item\n        action\n        mini\n        icon=\"hardware:keyboard-arrow-up\"\n        label=\"Move up\"\n        event-name=\"hax-plate-up\"\n        direction=\"left\"\n        ></hax-context-item>\n      <hax-context-item\n        action\n        mini\n        icon=\"hardware:keyboard-arrow-down\"\n        label=\"Move down\"\n        event-name=\"hax-plate-down\"\n        direction=\"left\"\n        ></hax-context-item>\n    </hax-context-item-menu>\n      <hax-context-item\n      mini\n      action\n      id=\"right\"\n      class=\"paddle\"\n      icon=\"hax:table-column-remove\"\n      label=\"Add column\"\n      event-name=\"hax-plate-create-right\"\n    ></hax-context-item>\n    <hax-context-item\n      mini\n      action\n      class=\"paddle\"\n      icon=\"hax:table-column-plus-after\"\n      label=\"Remove column\"\n      event-name=\"hax-plate-remove-right\"\n      id=\"rightremove\"\n    ></hax-context-item>\n  <hax-context-item\n    mini\n    action\n    label=\"Duplicate\"\n    icon=\"icons:content-copy\"\n    event-name=\"hax-plate-duplicate\"\n    ></hax-context-item>\n  <hax-context-item\n    mini\n    action\n    icon=\"delete\"\n    label=\"Remove\"\n    event-name=\"hax-plate-delete\"\n  ></hax-context-item>\n  </div>\n  ";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }]);
    return HaxPlateContext;
  }((0, _utils.winEventsElement)(HTMLElement));

  _exports.HaxPlateContext = HaxPlateContext;
  window.customElements.define(HaxPlateContext.tag, HaxPlateContext);
});