define(["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(HaxPlateContext, _HTMLElement);

    function HaxPlateContext() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxPlateContext).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/hardware-icons.js"], res, rej);
      }); // set tag for later use

      _this.tag = HaxPlateContext.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        setTimeout(function () {
          _this2.shadowRoot.querySelector("#drag").addEventListener("dragstart", _this2._dragstart);
        }, 0);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#drag").removeEventListener("dragstart", this._dragstart);
      }
      /**
       * Drag start so we know what target to set
       */

    }, {
      key: "_dragstart",
      value: function _dragstart(e) {
        var target = window.HaxStore.instance.activeNode;

        if (window.HaxStore.instance.activeContainerNode) {
          target = window.HaxStore.instance.activeContainerNode;
        }

        window.HaxStore.instance.__dragTarget = target;
        e.dataTransfer.dropEffect = "move";
        e.dataTransfer.setDragImage(target, 25, 25);
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      width: 40px;\n      margin-top: -2px;\n    }\n    hax-context-item {\n      display: block;\n    }\n    .area {\n      width: 40px;\n      float: left;\n      visibility: visible;\n      transition: 0.2s all linear;\n    }\n    </style>\n    <div class=\"area\">\n      <hax-context-item\n        light\n        icon=\"hardware:keyboard-arrow-up\"\n        label=\"Move up\"\n        event-name=\"grid-plate-up\"\n        direction=\"left\"\n      ></hax-context-item>\n      <hax-context-item\n        id=\"drag\"\n        light\n        icon=\"editor:drag-handle\"\n        label=\"Drag\"\n        draggable=\"true\"\n        direction=\"left\"\n      ></hax-context-item>\n      <hax-context-item\n        light\n        icon=\"hardware:keyboard-arrow-down\"\n        label=\"Move down\"\n        event-name=\"grid-plate-down\"\n        direction=\"left\"\n      ></hax-context-item>\n    </div>";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }]);
    return HaxPlateContext;
  }(babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.HaxPlateContext = HaxPlateContext;
  window.customElements.define(HaxPlateContext.tag, HaxPlateContext);
});