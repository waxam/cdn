define(["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(HaxPlateContext, _HTMLElement);

    function HaxPlateContext() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxPlateContext).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item.js"], res, rej);
      }); // set tag for later use

      _this.tag = HaxPlateContext.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      width: 32px;\n    }\n    hax-context-item {\n      display: block;\n      margin: 6px 0;\n      width: 28px;\n      height: 24px;\n    }\n    .area {\n      width: 32px;\n      float: left;\n      visibility: visible;\n      transition: 0.3s all ease;\n    }\n    </style>\n    <div class=\"area\">\n      <hax-context-item\n        mini\n        light\n        icon=\"hardware:keyboard-arrow-up\"\n        label=\"Move up\"\n        event-name=\"grid-plate-up\"\n        direction=\"left\"\n      ></hax-context-item>\n      <hax-context-item\n        mini\n        light\n        icon=\"hardware:keyboard-arrow-down\"\n        label=\"Move down\"\n        event-name=\"grid-plate-down\"\n        direction=\"left\"\n      ></hax-context-item>\n    </div>";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }]);
    return HaxPlateContext;
  }(babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.HaxPlateContext = HaxPlateContext;
  window.customElements.define(HaxPlateContext.tag, HaxPlateContext);
});