define(["exports", "require", "../../utils/utils.js"], function (_exports, _require, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxPlateContext, _winEventsElement);

    function HaxPlateContext() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxPlateContext).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated"
      }; // set tag for later use

      _this.tag = HaxPlateContext.tag;
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      if (!delayRender) {
        _this.render();
      }

      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/paper-item/paper-item.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-context-item-menu.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-context-item.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../hax-iconset/hax-iconset.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../@polymer/iron-icons/hardware-icons.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "_haxStorePropertyUpdated",

      /**
       * Store updated, sync.
       */
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property && this.getAttribute("on-screen") != null && e.detail.property === "activeContainerNode") {
          // when activeNode changes make sure we reposition
          this.__updatePlatePosition();
        }
      }
    }, {
      key: "__updatePlatePosition",
      value: function __updatePlatePosition() {
        var _this2 = this;

        setTimeout(function () {
          var activeRec = window.HaxStore.instance.activeNode.getBoundingClientRect();
          var rect = activeRec;

          var right = _this2.shadowRoot.querySelector("#right");

          var left = _this2.shadowRoot.querySelector("#left");

          var leftadd = _this2.shadowRoot.querySelector("#leftadd");

          if (window.HaxStore.instance.activeContainerNode) {
            rect = window.HaxStore.instance.activeContainerNode.getBoundingClientRect();
          }

          right.style.top = Math.round(rect.y - 1) + "px";
          right.style.left = Math.round(rect.left + rect.width + 2) + "px";
          left.style.top = Math.round(rect.y - 1) + "px";
          left.style.left = Math.round(rect.left - 22) + "px";
          right.height = Math.round(rect.height + 2) + "px";
          left.height = right.height;
          _this2.style.height = right.height;
          leftadd.style.top = Math.round(activeRec.y + activeRec.height + 1) + "px";
          leftadd.style.left = Math.round(activeRec.left - 22) + "px";
        }, 0);
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(name, oldValue, newValue) {
        if (name == "on-screen" && newValue) {
          this.__updatePlatePosition();
        } else {// offscreen
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        setTimeout(function () {
          _this3.shadowRoot.querySelector("#drag").addEventListener("dragstart", _this3._dragstart);
        }, 0);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#drag").removeEventListener("dragstart", this._dragstart);
      }
      /**
       * Drag start so we know what target to set
       */

    }, {
      key: "_dragstart",
      value: function _dragstart(e) {
        var target = window.HaxStore.instance.activeNode;

        if (window.HaxStore.instance.activeContainerNode) {
          target = window.HaxStore.instance.activeContainerNode;
        }

        window.HaxStore.instance.__dragTarget = target;
        e.dataTransfer.dropEffect = "move";
        e.dataTransfer.setDragImage(target, 25, 25);
        e.stopPropagation();
        e.stopImmediatePropagation();
      }
    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      margin-top: -2px;\n    }\n    hax-context-item {\n      display: block;\n    }\n    hax-context-item[large] {\n      display: inline-block;\n      margin:0;\n      padding:0;\n    }\n    .area {\n      visibility: visible;\n      transition: 0.2s height linear;\n    }\n    .paddle {\n      position:fixed;\n      width: unset;\n      height: unset;\n      visibility: visible;\n      opacity: .6;\n      transition: 0.2s height linear;\n    }\n    .paddle:hover {\n      opacity: 1;\n    }\n    paper-item {\n      -webkit-justify-content: flex-start;\n      justify-content: flex-start;\n      height: 20px;\n      padding: 0 4px;\n      min-height: 20px;\n      font-size: 10px;\n    }\n    paper-item:hover {\n      background-color: #d3d3d3;\n      cursor: pointer;\n    }\n    iron-icon {\n      padding: 0 2px;\n      width: 16px;\n      height: 16px;\n    }\n    </style>\n    <div class=\"area\">\n      <hax-context-item\n        light\n        icon=\"hardware:keyboard-arrow-up\"\n        label=\"Move up\"\n        event-name=\"grid-plate-up\"\n        direction=\"left\"\n      ></hax-context-item>\n      <hax-context-item\n        id=\"drag\"\n        light\n        icon=\"editor:drag-handle\"\n        label=\"Drag\"\n        draggable=\"true\"\n        direction=\"left\"\n      ></hax-context-item>\n      <hax-context-item\n        light\n        icon=\"hardware:keyboard-arrow-down\"\n        label=\"Move down\"\n        event-name=\"grid-plate-down\"\n        direction=\"left\"\n      ></hax-context-item>\n    </div>\n    <hax-context-item\n      light\n      large\n      class=\"paddle\"\n      icon=\"icons:add\"\n      label=\"Add column\"\n      event-name=\"grid-plate-create-left\"\n      direction=\"right\"\n      id=\"left\"\n    ></hax-context-item>\n    <hax-context-item-menu\n      mini\n      id=\"leftadd\"\n      class=\"paddle\"\n      icon=\"hax:add-brick\"\n      label=\"Insert new..\"\n      event-name=\"grid-plate-add-element\"\n      direction=\"right\"\n      selected-value=\"0\"\n      reset-on-select\n    >\n    <paper-item value=\"\" hidden></paper-item>\n      <paper-item value='{\"tag\":\"p\",\"content\":\"\", \"properties\": {}}'\n      ><iron-icon icon=\"hax:paragraph\"></iron-icon>Paragraph</paper-item\n      >\n      <paper-item value='{\"tag\":\"h2\",\"content\":\"Heading\", \"properties\": {}}'\n      ><iron-icon icon=\"hax:h2\"></iron-icon>Heading\n    </paper-item>\n      <paper-item value='{\"tag\":\"ul\",\"content\":\"<li>List</li>\", \"properties\": {}}'\n        ><iron-icon icon=\"editor:format-list-bulleted\"></iron-icon>Bulleted\n        list</paper-item\n      >\n      <paper-item value='{\"tag\":\"hr\",\"content\":\"\", \"properties\": {}}'\n        ><iron-icon icon=\"hax:hr\"></iron-icon>Horizontal line\n      </paper-item>\n      <paper-item value='{\"tag\":\"place-holder\",\"content\":\"\", \"properties\": {\"type\": \"image\", \"text\": \"Image\"}}'\n      ><iron-icon icon=\"hax:placeholder\"></iron-icon>Image placeholder\n    </paper-item>\n    </hax-context-item-menu>\n    <hax-context-item\n      light\n      large\n      id=\"right\"\n      class=\"paddle\"\n      icon=\"icons:add\"\n      label=\"Add column\"\n      event-name=\"grid-plate-create-right\"\n      direction=\"left\"\n    ></hax-context-item>\n  ";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["on-screen"];
      }
    }]);
    return HaxPlateContext;
  }((0, _utils.winEventsElement)(HTMLElement));

  _exports.HaxPlateContext = HaxPlateContext;
  window.customElements.define(HaxPlateContext.tag, HaxPlateContext);
});