define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPlateContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_632f2e30add011e983121daa910d1ce6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          width: 32px;\n        }\n        hax-context-item {\n          display: block;\n          margin: 6px 0;\n          width: 28px;\n          height: 24px;\n        }\n        .area {\n          width: 32px;\n          float: left;\n          visibility: visible;\n          transition: 0.3s all ease;\n        }\n      "]);

    _templateObject2_632f2e30add011e983121daa910d1ce6 = function _templateObject2_632f2e30add011e983121daa910d1ce6() {
      return data;
    };

    return data;
  }

  function _templateObject_632f2e30add011e983121daa910d1ce6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"area\">\n        <hax-context-item\n          mini\n          light\n          icon=\"hardware:keyboard-arrow-up\"\n          label=\"Move up\"\n          event-name=\"grid-plate-up\"\n          direction=\"left\"\n        ></hax-context-item>\n        <hax-context-item\n          mini\n          light\n          icon=\"hardware:keyboard-arrow-down\"\n          label=\"Move down\"\n          event-name=\"grid-plate-down\"\n          direction=\"left\"\n        ></hax-context-item>\n      </div>\n    "]);

    _templateObject_632f2e30add011e983121daa910d1ce6 = function _templateObject_632f2e30add011e983121daa910d1ce6() {
      return data;
    };

    return data;
  }

  /**
   * `hax-plate-context`
   * `A context menu that provides common grid plate based authoring options.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of text based buttons and events for use in a larger solution.
   * - grid plate - the container / full HTML tag which can have operations applied to it.
   */
  var HaxPlateContext =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxPlateContext, _LitElement);

    function HaxPlateContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxPlateContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxPlateContext).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxPlateContext, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_632f2e30add011e983121daa910d1ce6());
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_632f2e30add011e983121daa910d1ce6())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-plate-context";
      }
    }]);
    return HaxPlateContext;
  }(_litElement.LitElement);

  _exports.HaxPlateContext = HaxPlateContext;
  window.customElements.define(HaxPlateContext.tag, HaxPlateContext);
});