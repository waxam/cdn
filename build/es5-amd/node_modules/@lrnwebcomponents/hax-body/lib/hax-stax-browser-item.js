define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/iron-image/iron-image.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/paper-card/paper-card.js", "./hax-shared-styles.js"], function (_exports, _polymerElement, _renderStatus, _ironImage, _paperButton, _paperCard, _haxSharedStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxStaxBrowserItem = void 0;

  function _templateObject_3e3cf0a0dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"hax-shared-styles\">\n        :host {\n          display: flex;\n        }\n        :host([elevation=\"1\"]) {\n          -webkit-transform: scale(1, 1);\n          transform: scale(1, 1);\n        }\n        :host([elevation=\"2\"]) {\n          -webkit-transform: scale(1.4, 1.4);\n          transform: scale(1.4, 1.4);\n        }\n        paper-card {\n          margin: 4px 0;\n          border-radius: 10px;\n          display: flex;\n          width: 100%;\n        }\n        paper-button {\n          color: black;\n          background-color: #ffffff;\n          border: 2px solid var(--hax-color-border-outline);\n          text-transform: none;\n          margin: 0;\n          height: 80px !important;\n          width: 100%;\n          display: flex;\n          border-radius: 10px;\n          min-width: unset;\n        }\n        paper-button .item-title {\n          font-size: 14px;\n          display: inline-flex;\n        }\n        paper-button .button-inner {\n          text-align: center;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n        @media screen and (max-width: 550px) {\n          paper-button .item-title {\n            font-size: 10px;\n          }\n        }\n      </style>\n      <paper-card id=\"card\" elevation=\"[[elevation]]\">\n        <paper-button\n          id=\"button\"\n          on-click=\"_fireEvent\"\n          data-voicecommand$=\"select [[title]]\"\n        >\n          <div class=\"button-inner\">\n            <iron-image\n              src=\"[[image]]\"\n              preload=\"\"\n              sizing=\"cover\"\n              hidden$=\"[[!image]]\"\n            ></iron-image>\n            <div class=\"item-title\">[[title]]</div>\n          </div>\n        </paper-button>\n      </paper-card>\n    "], ["\n      <style include=\"hax-shared-styles\">\n        :host {\n          display: flex;\n        }\n        :host([elevation=\"1\"]) {\n          -webkit-transform: scale(1, 1);\n          transform: scale(1, 1);\n        }\n        :host([elevation=\"2\"]) {\n          -webkit-transform: scale(1.4, 1.4);\n          transform: scale(1.4, 1.4);\n        }\n        paper-card {\n          margin: 4px 0;\n          border-radius: 10px;\n          display: flex;\n          width: 100%;\n        }\n        paper-button {\n          color: black;\n          background-color: #ffffff;\n          border: 2px solid var(--hax-color-border-outline);\n          text-transform: none;\n          margin: 0;\n          height: 80px !important;\n          width: 100%;\n          display: flex;\n          border-radius: 10px;\n          min-width: unset;\n        }\n        paper-button .item-title {\n          font-size: 14px;\n          display: inline-flex;\n        }\n        paper-button .button-inner {\n          text-align: center;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n        @media screen and (max-width: 550px) {\n          paper-button .item-title {\n            font-size: 10px;\n          }\n        }\n      </style>\n      <paper-card id=\"card\" elevation=\"[[elevation]]\">\n        <paper-button\n          id=\"button\"\n          on-click=\"_fireEvent\"\n          data-voicecommand\\$=\"select [[title]]\"\n        >\n          <div class=\"button-inner\">\n            <iron-image\n              src=\"[[image]]\"\n              preload=\"\"\n              sizing=\"cover\"\n              hidden\\$=\"[[!image]]\"\n            ></iron-image>\n            <div class=\"item-title\">[[title]]</div>\n          </div>\n        </paper-button>\n      </paper-card>\n    "]);

    _templateObject_3e3cf0a0dbdc11e9bcafdb98156fc1d6 = function _templateObject_3e3cf0a0dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
   * `hax-stax-browser-item`
   * `A button on the hax-gizmo-browser app display`
   */
  var HaxStaxBrowserItem =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxStaxBrowserItem, _PolymerElement);

    function HaxStaxBrowserItem() {
      babelHelpers.classCallCheck(this, HaxStaxBrowserItem);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxStaxBrowserItem).call(this));
    }

    babelHelpers.createClass(HaxStaxBrowserItem, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxStaxBrowserItem.prototype), "ready", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("mousedown", this.tapEventOn.bind(this));
          this.addEventListener("mouseover", this.tapEventOn.bind(this));
          this.addEventListener("mouseout", this.tapEventOff.bind(this));
          this.addEventListener("focusin", this.tapEventOn.bind(this));
          this.addEventListener("focusout", this.tapEventOff.bind(this));
        });
      }
    }, {
      key: "tapEventOn",

      /**
       * special handling for taps on the thing
       */
      value: function tapEventOn(e) {
        this.elevation = 2;
      }
      /**
       * Hover off stop showing the deeper shadow.
       */

    }, {
      key: "tapEventOff",
      value: function tapEventOff(e) {
        this.elevation = 1;
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        this.dispatchEvent(new CustomEvent("hax-insert-content-array", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this.stax
        }));
        window.HaxStore.instance.haxStaxPicker.close();
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_3e3cf0a0dbdc11e9bcafdb98156fc1d6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-stax-browser-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * Index position in the original list of imports
           */
          staxReference: {
            type: Object
          },

          /**
           * Image for the button, optional.
           */
          image: {
            type: String,
            value: false
          },

          /**
           * Author related to this gizmo
           */
          author: {
            type: String
          },

          /**
           * Description for this.
           */
          description: {
            type: String
          },

          /**
           * Examples, a list of image links, optional.
           */
          examples: {
            type: Array
          },

          /**
           * Status, whether disabled, enabled, or other future states.
           */
          status: {
            type: Array
          },

          /**
           * Tag
           */
          tag: {
            type: String
          },

          /**
           * Elevation off the UI
           */
          elevation: {
            type: Number,
            value: 1,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return HaxStaxBrowserItem;
  }(_polymerElement.PolymerElement);

  _exports.HaxStaxBrowserItem = HaxStaxBrowserItem;
  window.customElements.define(HaxStaxBrowserItem.tag, HaxStaxBrowserItem);
});