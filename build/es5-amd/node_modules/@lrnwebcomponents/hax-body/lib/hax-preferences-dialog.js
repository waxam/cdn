define(["exports", "require", "../../../lit-element/lit-element.js", "../../simple-colors/simple-colors.js", "../../../@polymer/polymer/lib/elements/custom-style.js"], function (_exports, _require, _litElement, _simpleColors, _customStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxPreferencesDialog = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_78324b50100e11ea81b2910778b6127d() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style>\n          app-drawer {\n            --app-drawer-content-container: {\n              background-color: #ffffff;\n            }\n            --app-drawer-width: 320px;\n          }\n          eco-json-schema-object {\n            --eco-json-schema-object-form : {\n              -ms-flex: unset;\n              -webkit-flex: unset;\n              flex: unset;\n              -webkit-flex-basis: unset;\n              flex-basis: unset;\n            }\n            --paper-checkbox-size: 16px;\n            --paper-checkbox-checked-ink-color: var(--hax-color-accent1);\n            --paper-checkbox-label: {\n              font-size: 16px;\n              line-height: 16px;\n            }\n          }\n        </style>\n      </custom-style>\n      <app-drawer id=\"dialog\" align=\"right\" transition-duration=\"300\">\n        <h3 class=\"title\">\n          <iron-icon icon=\"icons:settings\"></iron-icon> ", "\n        </h3>\n        <div style=\"height: 100%; overflow: auto;\" class=\"pref-container\">\n          <eco-json-schema-object\n            .schema=\"", "\"\n            @value-changed=\"", "\"\n          ></eco-json-schema-object>\n        </div>\n        <paper-button id=\"closedialog\" @click=\"", "\">\n          <iron-icon icon=\"icons:cancel\" title=\"Close dialog\"></iron-icon>\n        </paper-button>\n      </app-drawer>\n    "]);

    _templateObject2_78324b50100e11ea81b2910778b6127d = function _templateObject2_78324b50100e11ea81b2910778b6127d() {
      return data;
    };

    return data;
  }

  function _templateObject_78324b50100e11ea81b2910778b6127d() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        iron-icon:not(:defined),\n        paper-button:not(:defined),\n        app-drawer:not(:defined) {\n          display: none;\n        }\n        #dialog {\n          z-index: 1000;\n          margin-top: 56px;\n        }\n        #closedialog {\n          float: right;\n          top: 124px;\n          right: 0;\n          position: absolute;\n          padding: 8px;\n          margin: 0;\n          background-color: var(--hax-color-menu-heading-bg, #eeeeee);\n          color: var(--hax-color-menu-heading-color, black);\n          width: 40px;\n          height: 40px;\n          min-width: unset;\n        }\n        .title {\n          position: relative;\n          padding: 16px;\n          outline: 0;\n          font-weight: 600;\n          text-align: left;\n          margin: 0;\n          background-color: var(--hax-color-menu-heading-bg, #eeeeee);\n          color: var(--hax-color-menu-heading-color, black);\n          font-size: 18px;\n          line-height: 18px;\n          font-family: \"Noto Serif\", serif;\n        }\n        eco-json-schema-object {\n          color: white;\n        }\n        .pref-container {\n          text-align: left;\n          padding: 16px;\n        }\n      "]);

    _templateObject_78324b50100e11ea81b2910778b6127d = function _templateObject_78324b50100e11ea81b2910778b6127d() {
      return data;
    };

    return data;
  }

  /**
   * `hax-export-dialog`
   * `Export dialog with all export options and settings provided.`
   */
  var HaxPreferencesDialog =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(HaxPreferencesDialog, _SimpleColors);
    babelHelpers.createClass(HaxPreferencesDialog, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(HaxPreferencesDialog), "styles", this)), [(0, _litElement.css)(_templateObject_78324b50100e11ea81b2910778b6127d())]);
      }
    }]);

    function HaxPreferencesDialog() {
      var _this;

      babelHelpers.classCallCheck(this, HaxPreferencesDialog);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxPreferencesDialog).call(this));
      _this.title = "Editor preferences";
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../eco-json-schema-form/eco-json-schema-form.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../eco-json-schema-form/lib/eco-json-schema-object.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/app-layout/app-drawer/app-drawer.js"], res, rej);
      }); // add event listener

      document.body.addEventListener("hax-store-property-updated", _this._haxStorePropertyUpdated.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }

    babelHelpers.createClass(HaxPreferencesDialog, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // notify when any of these change
          if (propName == "preferences") {
            _this2._preferencesChanged(_this2[propName]);

            _this2.dispatchEvent(new CustomEvent("".concat(propName, "-changed"), {
              detail: {
                value: _this2[propName]
              }
            }));
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_78324b50100e11ea81b2910778b6127d(), this.title, this.schema, this.valueChanged, this.close);
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        // JSON schema object needs delayed to ensure page repaints the form
        var schema = {
          $schema: "http://json-schema.org/schema#",
          title: "HAX preferences",
          type: "object",
          properties: {
            haxShowExportButton: {
              title: "View source button",
              type: "boolean",
              value: true
            },
            haxRayMode: {
              title: "X-Ray vision",
              type: "boolean",
              value: false
            },
            haxDeveloperMode: {
              title: "Developer mode",
              type: "boolean",
              value: false
            },
            haxVoiceCommands: {
              title: "Voice commands",
              type: "boolean",
              value: false
            },
            haxGithubReport: {
              title: "Report issue",
              type: "string",
              value: false,
              component: {
                name: "a",
                properties: {
                  rel: "noopener",
                  style: "color: #81a3a9;font-size: 18px;top: 100vh;position: fixed;right: 0;padding: 16px;font-style: italic;",
                  id: "reportghissue",
                  href: "https://github.com/elmsln/lrnwebcomponents/issues/new?body=URL%20base:%20" + window.location.pathname + "&title=[hax] Bug%20report%20from%20preference%20panel",
                  target: "_blank"
                },
                slot: "Report an issue with HAX"
              }
            }
          }
        };
        this.schema = babelHelpers.objectSpread({}, schema); // fire an event that this is a core piece of the system

        this.dispatchEvent(new CustomEvent("hax-register-core-piece", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            piece: "haxPreferences",
            object: this
          }
        }));
      }
      /**
       * Store updated, sync.
       */

    }, {
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property && e.detail.property === "globalPreferences" && e.detail.owner !== this) {
          this.preferences = babelHelpers.objectSpread({}, e.detail.value);
        }
      }
      /**
       * Notice preferences have changed.
       */

    }, {
      key: "_preferencesChanged",
      value: function _preferencesChanged(newValue) {
        if (this.schema && this.schema.properties && window.HaxStore.ready) {
          window.HaxStore.write("globalPreferences", newValue, this);
        }
      }
    }, {
      key: "valueChanged",
      value: function valueChanged(e) {
        if (e.detail.value) {
          this.preferences = babelHelpers.objectSpread({}, e.detail.value);
        }
      }
      /**
       * Toggle state.
       */

    }, {
      key: "toggleDialog",
      value: function toggleDialog() {
        if (this.shadowRoot.querySelector("#dialog").opened) {
          this.close();
        } else {
          window.HaxStore.instance.closeAllDrawers(this);
          var schema = this.schema; // enforce property values to be the schema value

          for (var key in this.preferences) {
            this.schema.properties[key].value = this.preferences[key];
          } // force the form to rebuild


          this.schema = babelHelpers.objectSpread({}, schema);
        }
      }
      /**
       * open the dialog
       */

    }, {
      key: "open",
      value: function open() {
        this.shadowRoot.querySelector("#dialog").open();
      }
      /**
       * close the dialog
       */

    }, {
      key: "close",
      value: function close() {
        this.shadowRoot.querySelector("#dialog").close();
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-preferences-dialog";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title when open.
           */
          title: {
            type: String
          },

          /**
           * Schema that has all of inputs / manages state
           */
          schema: {
            type: Object
          },

          /**
           * Preferences managed for everything global about HAX.
           */
          preferences: {
            type: Object
          }
        };
      }
    }]);
    return HaxPreferencesDialog;
  }(_simpleColors.SimpleColors);

  _exports.HaxPreferencesDialog = HaxPreferencesDialog;
  window.customElements.define(HaxPreferencesDialog.tag, HaxPreferencesDialog);
});