define(["exports", "require", "../../../lit-element/lit-element.js", "../../utils/utils.js"], function (_exports, _require, _litElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxCeContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_8f1062b0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar hide-more>\n        <hax-context-item\n          mini\n          action\n          more\n          slot=\"prefix\"\n          icon=\"", "\"\n          label=\"", ", click to change\"\n          ?disabled=\"", "\"\n          event-name=\"hax-transform-node\"\n        ></hax-context-item>\n        <slot slot=\"primary\"></slot>\n      </hax-toolbar>\n    "]);

    _templateObject2_8f1062b0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8f1062b0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8f1062b0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host *[hidden] {\n          display: none;\n        }\n        :host {\n          display: block;\n        }\n        hax-context-item {\n          margin: 0;\n        }\n        :host(.hax-context-pin-top) hax-toolbar {\n          position: fixed;\n          top: 40px;\n          flex-direction: column;\n        }\n      "]);

    _templateObject_8f1062b0c96f11ea8be5e1d5fe7ec787 = function _templateObject_8f1062b0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `hax-ce-context`
   * `A context menu that provides common custom-element based authoring options.
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
   * @element hax-ce-context
   */
  var HaxCeContext =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxCeContext, _winEventsElement);
    babelHelpers.createClass(HaxCeContext, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_8f1062b0c96f11ea8be5e1d5fe7ec787())];
      }
    }]);

    function HaxCeContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxCeContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxCeContext).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated"
      };
      _this.haxProperties = {};
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["./hax-context-item.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["./hax-toolbar.js"], res, rej);
        });
      }, 0);
      return _this;
    }
    /**
     * Store updated, sync.
     */


    babelHelpers.createClass(HaxCeContext, [{
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        var _this2 = this;

        if (e.detail && babelHelpers.typeof(e.detail.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && e.detail.property) {
          if (e.detail.property === "activeNode" || e.detail.property === "activeContainerNode") {
            setTimeout(function () {
              _this2._computeValues();
            }, 0);
          }
        }
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_8f1062b0c96f11ea8be5e1d5fe7ec787(), this.activeTagIcon, this.activeTagName, this.disableTransform);
      }
    }, {
      key: "_computeValues",

      /**
       * HAX properties changed, update buttons available.
       */
      value: function _computeValues() {
        var instance = window.HaxStore.instance;

        if (instance.activeNode != null) {
          if (!instance.isTextElement(instance.activeNode)) {
            if (instance.activeNode.tagName == "GRID-PLATE") {
              this.disableTransform = true;
              this.activeTagName = "Grid";
              this.activeTagIcon = "hax:3/3/3/3";
            } else {
              // detect if this can be transformed into anything else
              this.disableTransform = !instance.activeHaxBody.canTansformNode(instance.activeNode);

              if (instance.activeGizmo) {
                this.activeTagName = instance.activeGizmo.title;
                this.activeTagIcon = instance.activeGizmo.icon;
              }
            }
          }
        } else {
          this.activeTagName = "";
          this.activeTagIcon = "";
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-ce-context";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          disableTransform: {
            type: Boolean
          },
          activeTagIcon: {
            type: String
          },
          activeTagName: {
            type: String
          }
        };
      }
    }]);
    return HaxCeContext;
  }((0, _utils.winEventsElement)(_litElement.LitElement));

  _exports.HaxCeContext = HaxCeContext;
  window.customElements.define(HaxCeContext.tag, HaxCeContext);
});