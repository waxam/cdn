define(["exports", "../../../lit-element/lit-element.js", "./hax-store.js", "./hax-context-item.js", "./hax-toolbar.js", "../../../mobx/dist/mobx.esm.js", "../../utils/utils.js"], function (_exports, _litElement, _haxStore, _haxContextItem, _haxToolbar, _mobxEsm, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxCeContext = void 0;

  function _templateObject3_9f7ccea056b811eb8081cb2f2fa80813() {
    var data = babelHelpers.taggedTemplateLiteral([" <hax-context-item\n            mini\n            action\n            slot=\"prefix\"\n            icon=\"", "\"\n            label=\"", "\"\n            event-name=\"hax-ce-custom-button\"\n            value=\"", "\"\n          ></hax-context-item>"]);

    _templateObject3_9f7ccea056b811eb8081cb2f2fa80813 = function _templateObject3_9f7ccea056b811eb8081cb2f2fa80813() {
      return data;
    };

    return data;
  }

  function _templateObject2_9f7ccea056b811eb8081cb2f2fa80813() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar>\n        <hax-context-item\n          mini\n          action\n          more\n          slot=\"prefix\"\n          icon=\"", "\"\n          label=\"", ", click to change\"\n          ?disabled=\"", "\"\n          event-name=\"hax-transform-node\"\n        ></hax-context-item>\n        ", "\n        <div slot=\"primary\">\n          <slot></slot>\n        </div>\n        <hax-context-item\n          mini\n          action\n          slot=\"primary\"\n          icon=\"icons:code\"\n          label=\"Modify HTML source\"\n          ?disabled=\"", "\"\n          event-name=\"hax-source-view-toggle\"\n        ></hax-context-item>\n        <hax-context-item-textop\n          action\n          menu\n          slot=\"more\"\n          icon=\"hardware:keyboard-arrow-up\"\n          event-name=\"insert-above-active\"\n          >Insert item above</hax-context-item-textop\n        >\n        <hax-context-item-textop\n          action\n          menu\n          slot=\"more\"\n          icon=\"hardware:keyboard-arrow-down\"\n          event-name=\"insert-below-active\"\n          >Insert item below</hax-context-item-textop\n        >\n      </hax-toolbar>\n    "]);

    _templateObject2_9f7ccea056b811eb8081cb2f2fa80813 = function _templateObject2_9f7ccea056b811eb8081cb2f2fa80813() {
      return data;
    };

    return data;
  }

  function _templateObject_9f7ccea056b811eb8081cb2f2fa80813() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        hax-context-item {\n          margin: 0;\n        }\n        :host(.hax-context-pin-top) hax-toolbar {\n          position: fixed;\n          top: 0px;\n          flex-direction: column;\n        }\n        div[slot=\"primary\"] {\n          display: inline-flex;\n        }\n      "]);

    _templateObject_9f7ccea056b811eb8081cb2f2fa80813 = function _templateObject_9f7ccea056b811eb8081cb2f2fa80813() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-ce-context`
   * `A context menu that provides common custom-element based authoring options.
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
   * @element hax-ce-context
   */
  var HaxCeContext = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxCeContext, _LitElement);

    var _super = _createSuper(HaxCeContext);

    babelHelpers.createClass(HaxCeContext, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_9f7ccea056b811eb8081cb2f2fa80813())];
      }
    }]);

    function HaxCeContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxCeContext);
      _this = _super.call(this);
      _this.haxUIElement = true;
      _this.onScreen = false;
      _this.ceButtons = [];
      _this.activeTagName = "";
      _this.activeTagIcon = "hax:paragraph";

      _this.addEventListener("hax-context-item-selected", _this.handleCECustomEvent.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }

    babelHelpers.createClass(HaxCeContext, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "onScreen" && _this2.onScreen) {
            _this2._resetCEMenu();
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_9f7ccea056b811eb8081cb2f2fa80813(), this.activeTagIcon, this.activeTagName, this.disableTransform, this.ceButtons.map(function (el) {
          return (0, _litElement.html)(_templateObject3_9f7ccea056b811eb8081cb2f2fa80813(), el.icon, el.label, el.callback);
        }), !this.sourceView);
      }
    }, {
      key: "handleCECustomEvent",
      value: function handleCECustomEvent(e) {
        var detail = e.detail; // support a simple insert event to bubble up or everything else

        switch (detail.eventName) {
          case "hax-ce-custom-button":
            if (this.activeNode && typeof this.activeNode[detail.value] === "function") {
              if (this.activeNode[detail.value](e)) {
                _haxStore.HAXStore.refreshActiveNodeForm();
              }
            }

            break;
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxCeContext.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        (0, _mobxEsm.autorun)(function () {
          _this3.activeNode = (0, _mobxEsm.toJS)(_haxStore.HAXStore.activeNode);

          if (_this3.activeNode && _this3.activeNode.classList) {
            _this3._resetCEMenu();
          }
        });
      }
      /**
       * HAX properties changed, update buttons available.
       */

    }, {
      key: "_resetCEMenu",
      value: function _resetCEMenu() {
        if (this.shadowRoot) {
          (0, _utils.wipeSlot)(this, "*");
        } // reset buttons in-case this element has new ones


        this.ceButtons = [];

        if (_haxStore.HAXStore.activeHaxBody && this.activeNode != null) {
          var schema = _haxStore.HAXStore.haxSchemaFromTag(this.activeNode.tagName);

          this.sourceView = schema.canEditSource;

          if (!_haxStore.HAXStore.isTextElement(this.activeNode)) {
            // detect if this can be transformed into anything else
            this.disableTransform = !_haxStore.HAXStore.activeHaxBody.canTansformNode(this.activeNode);

            if (_haxStore.HAXStore.activeGizmo) {
              this.activeTagName = _haxStore.HAXStore.activeGizmo.title;
              this.activeTagIcon = _haxStore.HAXStore.activeGizmo.icon;
            }
          }
        } else {
          this.activeTagName = "";
          this.activeTagIcon = "hax:paragraph";
        } // @see haxHook inlineContextMenu


        _haxStore.HAXStore.runHook(this.activeNode, "inlineContextMenu", [this]);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-ce-context";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          disableTransform: {
            type: Boolean
          },
          onScreen: {
            type: Boolean,
            attribute: "on-screen",
            reflect: true
          },
          sourceView: {
            type: Boolean
          },
          activeTagIcon: {
            type: String
          },
          activeTagName: {
            type: String
          },
          ceButtons: {
            type: Array
          }
        };
      }
    }]);
    return HaxCeContext;
  }(_litElement.LitElement);

  _exports.HaxCeContext = HaxCeContext;
  window.customElements.define(HaxCeContext.tag, HaxCeContext);
});