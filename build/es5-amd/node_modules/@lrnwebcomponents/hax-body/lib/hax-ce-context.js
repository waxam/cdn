define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/app-layout/app-toolbar/app-toolbar.js","../../../@polymer/paper-input/paper-textarea.js","../../../@polymer/paper-input/paper-input.js","../../../@polymer/paper-checkbox/paper-checkbox.js","../../simple-colors/lib/simple-colors-picker.js","./hax-context-item-menu.js","./hax-context-item.js","./hax-toolbar.js","./hax-shared-styles.js"],function(_polymerLegacy,_polymerDom,_appToolbar,_paperTextarea,_paperInput,_paperCheckbox,_simpleColorsPicker,_haxContextItemMenu,_haxContextItem,_haxToolbar,_haxSharedStyles){"use strict";function _templateObject_cbd0abb068f411e996b0af119cd7f5ea(){var data=babelHelpers.taggedTemplateLiteral(["\n    <style includes=\"hax-shared-styles\">\n      :host *[hidden] {\n        display: none;\n      }\n      :host {\n        display: block;\n        height: 36px;\n      }\n      hax-context-item {\n        margin: 0;\n        height: 36px;\n      }\n      :host(.hax-context-pin-top) hax-toolbar {\n        position: fixed;\n        top: 64px;\n        opacity: 0.9;\n      }\n      :host(.hax-context-pin-bottom) hax-toolbar {\n        position: fixed;\n        bottom: 0;\n        opacity: 0.9;\n      }\n      :host(.hax-context-pin-top) hax-toolbar:hover,\n      :host(.hax-context-pin-bottom) hax-toolbar:hover {\n        opacity: 1;\n      }\n    </style>\n    <hax-toolbar hax-properties=\"[[haxProperties]]\" size=\"{{ceSize}}\">\n      <slot slot=\"primary\"></slot>\n      <hax-context-item\n        slot=\"primary\"\n        icon=\"icons:settings\"\n        label=\"Settings\"\n        event-name=\"hax-manager-configure\"\n        hidden$=\"[[!__hasSettingsForm]]\"\n      ></hax-context-item>\n      <hax-context-item\n        slot=\"primary\"\n        icon=\"icons:view-quilt\"\n        label=\"[[__parentName]]\"\n        event-name=\"hax-manager-configure-container\"\n        hidden$=\"[[!__hasParentSettingsForm]]\"\n      ></hax-context-item>\n    </hax-toolbar>\n  "]);_templateObject_cbd0abb068f411e996b0af119cd7f5ea=function _templateObject_cbd0abb068f411e996b0af119cd7f5ea(){return data};return data}/**
`hax-ce-context`
A context menu that provides common custom-element based authoring options. While
trying to call for haxProperties which can automatically generate the buttons
required for populating input.

* @demo demo/index.html

@microcopy - the mental model for this element
 - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
*/(0,_polymerLegacy.Polymer)({_template:(0,_polymerLegacy.html)(_templateObject_cbd0abb068f411e996b0af119cd7f5ea()),is:"hax-ce-context",properties:{/**
     * ce size.
     */ceSize:{type:Number,value:100,observer:"_ceSizeChanged"},/**
     * Selected value to match ce direction currently.
     */haxProperties:{type:Object,value:{},observer:"_haxPropertiesChanged"}},/**
   * Set haxProperties.
   */setHaxProperties:function setHaxProperties(props){// be aggressive w/ reset
this.set("haxProperties",{});this.set("haxProperties",props)},/**
   * ce size changed.
   */_ceSizeChanged:function _ceSizeChanged(newValue,oldValue){if(babelHelpers.typeof(newValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(oldValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){this.fire("hax-context-item-selected",{eventName:"hax-size-change",value:newValue})}},/**
   * HAX properties changed, update buttons available.
   */_haxPropertiesChanged:function _haxPropertiesChanged(newValue,oldValue){if(babelHelpers.typeof(oldValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(newValue.settings)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// clear current slot for the tag
var slot=(0,_polymerDom.dom)(this);while(null!==slot.firstChild){slot.removeChild(slot.firstChild)}var settings=newValue.settings.quick,configure=newValue.settings.configure,advanced=newValue.settings.advanced;// support things that could technically have no configuration
// or advanced form but have quick settings
// This doesn't make a ton of sense but it is possible
if((configure.length||advanced.length)&&"HR"!==newValue.element.tagName){this.__hasSettingsForm=!0/* transition */ /* transition */}else{this.__hasSettingsForm=!1}this.__hasParentSettingsForm=!1;// test for parent being different from child
if(window.HaxStore.instance.activeContainerNode!==window.HaxStore.instance.activeNode&&null!==window.HaxStore.instance.activeContainerNode){this.__hasParentSettingsForm=!0;switch(window.HaxStore.instance.activeContainerNode.tagName){case"P":case"UL":case"OL":case"DIV":this.__parentName="Text block settings";break;case"GRID-PLATE":this.__parentName="Layout settings";break;default:this.__parentName=window.HaxStore.instance.activeContainerNode.tagName.replace("-"," ").toLowerCase();+" settings";break;}}// @todo kick stuff into the local dom as options
for(var item,i=0,setting;i<settings.length;i++){setting=settings[i];// create a new context item for the quick
item=document.createElement("hax-context-item");item.eventName="hax-edit-property";item.label=setting.title;item.options=setting.options;item.icon=setting.icon;item.inputMethod=setting.inputMethod;item.required=setting.required;item.options=setting.options;item.validation=setting.validation;item.validationType=setting.validationType;item.description=setting.description;// property or slot if it doesn't exist
if(babelHelpers.typeof(setting.property)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){item.propertyToBind=setting.property}else if(babelHelpers.typeof(setting.attribute)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){item.propertyToBind=setting.attribute}else{item.slotToBind=setting.slot}slot.appendChild(item)}}}})});