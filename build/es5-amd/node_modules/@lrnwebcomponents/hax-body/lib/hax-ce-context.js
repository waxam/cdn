define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../simple-colors/lib/simple-colors-picker.js", "./hax-shared-styles.js"], function (_exports, _require, _polymerElement, _polymerDom, _simpleColorsPicker, _haxSharedStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxCeContext = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_3d11b710dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style includes=\"hax-shared-styles\">\n        :host *[hidden] {\n          display: none;\n        }\n        :host {\n          display: block;\n          height: 36px;\n        }\n        hax-context-item {\n          margin: 0;\n          height: 36px;\n        }\n        :host(.hax-context-pin-top) hax-toolbar {\n          position: fixed;\n          top: 64px;\n          opacity: 0.9;\n        }\n        :host(.hax-context-pin-bottom) hax-toolbar {\n          position: fixed;\n          bottom: 0;\n          opacity: 0.9;\n        }\n        :host(.hax-context-pin-top) hax-toolbar:hover,\n        :host(.hax-context-pin-bottom) hax-toolbar:hover {\n          opacity: 1;\n        }\n      </style>\n      <hax-toolbar hax-properties=\"[[haxProperties]]\" size=\"{{ceSize}}\">\n        <slot slot=\"primary\"></slot>\n        <hax-context-item\n          slot=\"primary\"\n          icon=\"icons:settings\"\n          label=\"Settings\"\n          event-name=\"hax-manager-configure\"\n          hidden$=\"[[!__hasSettingsForm]]\"\n        ></hax-context-item>\n        <hax-context-item\n          slot=\"primary\"\n          icon=\"icons:view-quilt\"\n          label=\"[[__parentName]]\"\n          event-name=\"hax-manager-configure-container\"\n          hidden$=\"[[!__hasParentSettingsForm]]\"\n        ></hax-context-item>\n      </hax-toolbar>\n    "]);

    _templateObject_3d11b710dbdc11e9bcafdb98156fc1d6 = function _templateObject_3d11b710dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
   * `hax-ce-context`
   * `A context menu that provides common custom-element based authoring options. While
   * trying to call for haxProperties which can automatically generate the buttons
   * required for populating input.`
   * @microcopy - the mental model for this element
   * - context menu - this is a menu of custom-element based buttons and events for use in a larger solution.
   */
  var HaxCeContext =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxCeContext, _PolymerElement);

    function HaxCeContext() {
      var _this;

      babelHelpers.classCallCheck(this, HaxCeContext);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxCeContext).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./hax-context-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-toolbar.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxCeContext, [{
      key: "setHaxProperties",

      /**
       * Set haxProperties.
       */
      value: function setHaxProperties(props) {
        // be aggressive w/ reset
        this.set("haxProperties", {});
        this.set("haxProperties", props);
      }
      /**
       * ce size changed.
       */

    }, {
      key: "_ceSizeChanged",
      value: function _ceSizeChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: {
              eventName: "hax-size-change",
              value: newValue
            }
          }));
        }
      }
      /**
       * HAX properties changed, update buttons available.
       */

    }, {
      key: "_haxPropertiesChanged",
      value: function _haxPropertiesChanged(newValue, oldValue) {
        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(newValue.settings) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // clear current slot for the tag
          var slot = (0, _polymerDom.dom)(this);

          while (slot.firstChild !== null) {
            slot.removeChild(slot.firstChild);
          }

          var settings = newValue.settings.quick;
          var configure = newValue.settings.configure;
          var advanced = newValue.settings.advanced; // support things that could technically have no configuration
          // or advanced form but have quick settings
          // This doesn't make a ton of sense but it is possible

          if ((configure.length || advanced.length) && newValue.element.tagName !== "HR") {
            this.__hasSettingsForm = true;
          } else {
            this.__hasSettingsForm = false;
          }

          this.__hasParentSettingsForm = false; // test for parent being different from child

          if (window.HaxStore.instance.activeContainerNode !== window.HaxStore.instance.activeNode && window.HaxStore.instance.activeContainerNode !== null) {
            this.__hasParentSettingsForm = true;

            switch (window.HaxStore.instance.activeContainerNode.tagName) {
              case "P":
              case "UL":
              case "OL":
              case "DIV":
                this.__parentName = "Text block settings";
                break;

              case "GRID-PLATE":
                this.__parentName = "Layout settings";
                break;

              default:
                this.__parentName = window.HaxStore.instance.activeContainerNode.tagName.replace("-", " ").toLowerCase();
                +" settings";
                break;
            }
          }

          var item; // @todo kick stuff into the local dom as options

          for (var i = 0; i < settings.length; i++) {
            var setting = settings[i]; // create a new context item for the quick

            item = document.createElement("hax-context-item");
            item.eventName = "hax-edit-property";
            item.label = setting.title;
            item.options = setting.options;
            item.icon = setting.icon;
            item.inputMethod = setting.inputMethod;
            item.required = setting.required;
            item.options = setting.options;
            item.validation = setting.validation;
            item.validationType = setting.validationType;
            item.description = setting.description; // property or slot if it doesn't exist

            if (babelHelpers.typeof(setting.property) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              item.propertyToBind = setting.property;
            } else if (babelHelpers.typeof(setting.attribute) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              item.propertyToBind = setting.attribute;
            } else {
              item.slotToBind = setting.slot;
            }

            slot.appendChild(item);
          }
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_3d11b710dbdc11e9bcafdb98156fc1d6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-ce-context";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * ce size.
           */
          ceSize: {
            type: Number,
            value: 100,
            observer: "_ceSizeChanged"
          },

          /**
           * Selected value to match ce direction currently.
           */
          haxProperties: {
            type: Object,
            value: {},
            observer: "_haxPropertiesChanged"
          }
        };
      }
    }]);
    return HaxCeContext;
  }(_polymerElement.PolymerElement);

  _exports.HaxCeContext = HaxCeContext;
  window.customElements.define(HaxCeContext.tag, HaxCeContext);
});