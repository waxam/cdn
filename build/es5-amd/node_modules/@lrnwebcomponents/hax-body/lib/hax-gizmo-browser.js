define(["exports", "require", "../../../lit-element/lit-element.js", "../../grafitto-filter/grafitto-filter.js", "../../utils/utils.js"], function (_exports, _require, _litElement, _grafittoFilter, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxGizmoBrowser = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject3_6822e000d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <hax-tray-button\n              voice-command=\"insert ", "\"\n              draggable=\"true\"\n              @dragstart=\"", "\"\n              @dragend=\"", "\"\n              index=\"", "\"\n              label=\"", "\"\n              event-name=\"insert-tag\"\n              event-data=\"", "\"\n              icon=\"", "\"\n              color=\"", "\"\n              drag-color=\"", "\"\n            ></hax-tray-button>\n          "]);

    _templateObject3_6822e000d34d11ea880ba1e93364c49c = function _templateObject3_6822e000d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject2_6822e000d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"toolbar-inner\">\n        <simple-fields-field\n          id=\"inputfilter\"\n          @value-changed=\"", "\"\n          aria-controls=\"filter\"\n          label=\"Filter\"\n          type=\"text\"\n          auto-validate=\"\"\n        ></simple-fields-field>\n      </div>\n      <grafitto-filter\n        id=\"filter\"\n        .items=\"", "\"\n        like=\"\"\n        where=\"title\"\n        like=\"\"\n        @filtered-changed=\"", "\"\n        ><template></template\n      ></grafitto-filter>\n      <div class=\"item-wrapper\">\n        ", "\n      </div>\n    "]);

    _templateObject2_6822e000d34d11ea880ba1e93364c49c = function _templateObject2_6822e000d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_6822e000d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        .toolbar-inner {\n          padding: 0;\n          position: sticky;\n          background-color: white;\n          width: 100%;\n          top: 0;\n          z-index: 1;\n        }\n        .item-wrapper {\n          text-align: center;\n        }\n      "]);

    _templateObject_6822e000d34d11ea880ba1e93364c49c = function _templateObject_6822e000d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `hax-gizmo-browser`
   * `Browse a list of gizmos. This provides a listing of custom elements for people to search and select based on what have been defined as gizmos for users to select.`
   * @microcopy - the mental model for this element
   * - gizmo - silly name for the general public when talking about custom elements and what it provides in the end.
   */
  var HaxGizmoBrowser =
  /*#__PURE__*/
  function (_winEventsElement) {
    babelHelpers.inherits(HaxGizmoBrowser, _winEventsElement);
    babelHelpers.createClass(HaxGizmoBrowser, null, [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject_6822e000d34d11ea880ba1e93364c49c())];
      }
    }]);

    function HaxGizmoBrowser() {
      var _this;

      babelHelpers.classCallCheck(this, HaxGizmoBrowser);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxGizmoBrowser).call(this));
      _this.__winEvents = {
        "hax-store-property-updated": "_haxStorePropertyUpdated"
      };
      _this.__gizmoList = [];
      _this.filtered = [];
      new Promise(function (res, rej) {
        return _require.default(["../../simple-fields/lib/simple-fields-field.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxGizmoBrowser, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject2_6822e000d34d11ea880ba1e93364c49c(), this.inputfilterChanged, this.__gizmoList, this.filteredChanged, this.filtered.map(function (gizmo) {
          return (0, _litElement.html)(_templateObject3_6822e000d34d11ea880ba1e93364c49c(), gizmo.title, _this2._dragStart, _this2._dragEnd, gizmo.index, gizmo.title, gizmo.tag, gizmo.icon, gizmo.color, gizmo.color);
        }));
      }
    }, {
      key: "_dragStart",

      /**
       * Drag start so we know what target to set
       */
      value: function _dragStart(e) {
        // create the tag
        var schema = window.HaxStore.instance.haxSchemaFromTag(e.target.eventData);
        var target;

        if (schema.gizmo.tag && schema.demoSchema && schema.demoSchema[0]) {
          target = (0, _utils.haxElementToNode)(schema.demoSchema[0]);
        } else {
          target = document.createElement(e.target.eventData);
        }

        window.HaxStore.instance.__dragTarget = target;

        if (e.dataTransfer) {
          this.crt = target.cloneNode(true);

          if (schema.gizmo.tag && schema.demoSchema && schema.demoSchema[0]) {
            this.crt.style.width = "200px";
            this.crt.style.height = "200px";
          } else {
            this.crt.style.position = "absolute";
            this.crt.style.top = "-1000px";
            this.crt.style.right = "-1000px";
            this.crt.style.transform = "scale(0.25)";
          }

          this.crt.style.opacity = ".8";
          this.crt.style.backgroundColor = e.target.getAttribute("drag-color");
          e.dataTransfer.dropEffect = "move";
          document.body.appendChild(this.crt);
          e.dataTransfer.setDragImage(this.crt, 0, 0);
        }

        e.stopPropagation();
        e.stopImmediatePropagation(); // show where things can be dropped only during the drag

        if (!window.HaxStore.instance.activeHaxBody.openDrawer && window.HaxStore.instance.editMode) {
          var children = window.HaxStore.instance.activeHaxBody.children; // walk the children and apply the draggable state needed

          for (var i in children) {
            if (children[i].classList && target !== children[i]) {
              children[i].classList.add("hax-mover");
            }
          }
        }
      }
      /**
       * When we end dragging ensure we remove the mover class.
       */

    }, {
      key: "_dragEnd",
      value: function _dragEnd(e) {
        this.crt.remove();
        var children = window.HaxStore.instance.activeHaxBody.children; // walk the children and apply the draggable state needed

        for (var i in children) {
          if (babelHelpers.typeof(children[i].classList) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            children[i].classList.remove("hax-mover", "hax-hovered", "hax-moving", "grid-plate-active-item");
          }
        }
      }
    }, {
      key: "filteredChanged",
      value: function filteredChanged(e) {
        this.filtered = babelHelpers.toConsumableArray(e.detail.value);
      }
    }, {
      key: "inputfilterChanged",
      value: function inputfilterChanged(e) {
        this.shadowRoot.querySelector("#filter").like = e.target.value;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "activeApp") {
            _this3._activeAppChanged(_this3[propName], oldValue);
          }

          if (propName == "filtered") {
            _this3.requestUpdate();
          }
        });
      }
      /**
       * Store updated, sync.
       */

    }, {
      key: "_haxStorePropertyUpdated",
      value: function _haxStorePropertyUpdated(e) {
        if (this.shadowRoot && e.detail && e.detail.value && e.detail.property === "gizmoList") {
          this.resetBrowser();
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HaxGizmoBrowser.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HaxGizmoBrowser.prototype), "firstUpdated", this).call(this, changedProperties);
        } // probably not required but just to be safe


        this.resetBrowser();
      }
      /**
       * Reset this browser.
       */

    }, {
      key: "resetBrowser",
      value: function resetBrowser() {
        this.__gizmoList = window.HaxStore.instance.gizmoList.filter(function (gizmo, i) {
          // remove inline and hidden references
          if (gizmo.meta && (gizmo.meta.inlineOnly || gizmo.meta.hidden)) {
            return false;
          }

          return true;
        });
        this.filtered = babelHelpers.toConsumableArray(this.__gizmoList);
        this.shadowRoot.querySelector("#inputfilter").value = "";
        this.shadowRoot.querySelector("#filter").value = "";
        this.shadowRoot.querySelector("#filter").filter();
        this.shadowRoot.querySelector("#filter").where = "title";
        this.shadowRoot.querySelector("#filter").like = "";
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-gizmo-browser";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          filtered: {
            type: Array
          },
          __gizmoList: {
            type: Array
          }
        };
      }
    }]);
    return HaxGizmoBrowser;
  }((0, _utils.winEventsElement)(_litElement.LitElement));

  _exports.HaxGizmoBrowser = HaxGizmoBrowser;
  window.customElements.define(HaxGizmoBrowser.tag, HaxGizmoBrowser);
});