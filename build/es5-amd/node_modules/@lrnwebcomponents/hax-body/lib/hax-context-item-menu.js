define(["exports", "../../../lit-element/lit-element.js", "./hax-toolbar-menu.js", "../../simple-tooltip/simple-tooltip.js"], function (_exports, _litElement, _haxToolbarMenu, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxContextItemMenu = void 0;

  function _templateObject2_bda9907054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <hax-toolbar-menu\n        id=\"menu\"\n        ?mini=\"", "\"\n        ?disabled=\"", "\"\n        ?action=\"", "\"\n        .icon=\"", "\"\n        .tooltip=\"", "\"\n        .tooltip-direction=\"", "\"\n        @selected-changed=\"", "\"\n        .selected=\"", "\"\n      >\n        <slot></slot>\n      </hax-toolbar-menu>\n    "]);

    _templateObject2_bda9907054f111eba18757df1555c032 = function _templateObject2_bda9907054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _templateObject_bda9907054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          box-sizing: border-box;\n        }\n        :host(mini) {\n          height: unset;\n          width: unset;\n        }\n      "]);

    _templateObject_bda9907054f111eba18757df1555c032 = function _templateObject_bda9907054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `hax-context-item-menu`
   * `An icon / button that has support for multiple options via drop down.`
   * @microcopy - the mental model for this element
   * - panel - the flyout from left or right side that has elements that can be placed
   * - button - an item that expresses what interaction you will have with the content.
   * @element hax-context-item-menu
   */
  var HaxContextItemMenu = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HaxContextItemMenu, _LitElement);

    var _super = _createSuper(HaxContextItemMenu);

    babelHelpers.createClass(HaxContextItemMenu, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_bda9907054f111eba18757df1555c032())];
      }
    }]);

    function HaxContextItemMenu() {
      var _this;

      babelHelpers.classCallCheck(this, HaxContextItemMenu);
      _this = _super.call(this);
      _this._blockEvent = false;
      _this.disabled = false;
      _this.selectedValue = 0;
      _this.action = false;
      _this.direction = "top";
      _this.icon = "editor:text-fields";
      _this.label = "";
      return _this;
    }

    babelHelpers.createClass(HaxContextItemMenu, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_bda9907054f111eba18757df1555c032(), this.mini, this.disabled, this.action, this.icon, this.label, this.direction, this.selectedValueChanged, this.selectedValue);
      }
    }, {
      key: "selectedValueChanged",
      value: function selectedValueChanged(e) {
        this.selectedValue = e.detail;
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "selectedValue") {
            // observer
            _this2._selectedUpdated(_this2[propName], oldValue); // notify


            _this2.dispatchEvent(new CustomEvent("selected-value-changed", {
              detail: _this2[propName]
            }));
          }
        });
      }
    }, {
      key: "_selectedUpdated",

      /**
       * Notice the selected value has changed.
       */
      value: function _selectedUpdated(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== babelHelpers.typeof(null) && babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(oldValue) !== babelHelpers.typeof(null)) {
          var children = this.children;
          var item = new Object();
          var j = 0; // check for tag match since we have to filter out text nodes

          for (var i = 0, len = children.length; i < len; i++) {
            if (children[i].tagName === "BUTTON") {
              if (j === newValue) {
                item = children[i];
                len = i;
                continue;
              }

              j++;
            }
          } // ensure we have a value; if so, this becomes the event to look for
          // also use our flag to ensure machine setting the tag default doesn't
          // equate to firing off a selected event.


          if (!this._blockEvent && babelHelpers.typeof(item.attributes) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(item.attributes.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(item.attributes.value.value) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            // weird but this makes the menu close when we send up an event
            // that indicates something higher should do something. This
            // avoids an annoying UX error where the menu stays open for
            // no reason.
            this.shadowRoot.querySelector("#menu").hideMenu(); // only emit if we have an event name

            if (this.eventName) {
              this.dispatchEvent(new CustomEvent("hax-context-item-selected", {
                bubbles: true,
                cancelable: true,
                composed: true,
                detail: {
                  target: item,
                  eventName: this.eventName,
                  value: item.attributes.value.value
                }
              }));
            }
          } // we only block 1 time if it's available


          if (this._blockEvent) {
            this._blockEvent = false;
          }
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "hax-context-item-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          mini: {
            type: Boolean,
            reflect: true
          },
          action: {
            type: Boolean
          },

          /**
           * disabled state
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * Internal flag to allow blocking the event firing if machine selects tag.
           */
          _blockEvent: {
            type: Boolean
          },

          /**
           * Value.
           */
          selectedValue: {
            type: Number,
            reflect: true,
            attribute: "selected-value"
          },

          /**
           * Direction for the tooltip
           */
          direction: {
            type: String
          },

          /**
           * Icon for the button.
           */
          icon: {
            type: String,
            reflect: true
          },

          /**
           * Label for the button.
           */
          label: {
            type: String,
            reflect: true
          },

          /**
           * Name of the event to bubble up as being tapped.
           * This can be used to tell other elements what was
           * clicked so it can take action appropriately.
           */
          eventName: {
            type: String,
            attribute: "event-name"
          }
        };
      }
    }]);
    return HaxContextItemMenu;
  }(_litElement.LitElement);

  _exports.HaxContextItemMenu = HaxContextItemMenu;
  window.customElements.define(HaxContextItemMenu.tag, HaxContextItemMenu);
});