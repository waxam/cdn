define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../../@polymer/paper-tooltip/paper-tooltip.js","../../../@polymer/paper-item/paper-item.js","../../../@polymer/neon-animation/neon-animation.js","./hax-toolbar-menu.js","./hax-shared-styles.js"],function(_polymerLegacy,_polymerDom,_paperTooltip,_paperItem,_neonAnimation,_haxToolbarMenu,_haxSharedStyles){"use strict";function _templateObject_eb3c2db0620c11e99c573b9129e18660(){var data=babelHelpers.taggedTemplateLiteral(["\n    <style include=\"hax-shared-styles\">\n      :host {\n        display: inline-flex;\n        height: 36px;\n        box-sizing: border-box;\n      }\n      :host hax-toolbar-menu ::slotted(*):hover {\n        background-color: var(--hax-color-bg-accent);\n      }\n      :host hax-toolbar-menu ::slotted(*) {\n        height: 36px;\n      }\n    </style>\n    <hax-toolbar-menu\n      id=\"menu\"\n      icon=\"[[icon]]\"\n      tooltip=\"[[label]]\"\n      tooltip-direction=\"[[direction]]\"\n      selected=\"{{selectedValue}}\"\n      reset-on-select=\"[[resetOnSelect]]\"\n    >\n      <slot></slot>\n    </hax-toolbar-menu>\n  "]);_templateObject_eb3c2db0620c11e99c573b9129e18660=function _templateObject_eb3c2db0620c11e99c573b9129e18660(){return data};return data}/**
`hax-context-item-menu`
An icon / button that has support for multiple options via drop down.

* @demo demo/index.html

@microcopy - the mental model for this element
 - panel - the flyout from left or right side that has elements that can be placed
 - button - an item that expresses what interaction you will have with the content.

*/(0,_polymerLegacy.Polymer)({_template:(0,_polymerLegacy.html)(_templateObject_eb3c2db0620c11e99c573b9129e18660()),is:"hax-context-item-menu",properties:{/**
     * Internal flag to allow blocking the event firing if machine selects tag.
     */_blockEvent:{type:Boolean,value:!1},/**
     * Should we reset the selection after it is made
     */resetOnSelect:{type:Boolean,value:!1},/**
     * Value.
     */selectedValue:{type:Number,reflectToAttribute:!0/* transition */ /* transition */,notify:!0,value:0,observer:"_selectedUpdated"},/**
     * Direction for the tooltip
     */direction:{type:String,value:"top"},/**
     * Icon for the button.
     */icon:{type:String,value:"editor:text-fields",reflectToAttribute:!0},/**
     * Label for the button.
     */label:{type:String,value:"editor:text-fields",reflectToAttribute:!0},/**
     * Name of the event to bubble up as being tapped.
     * This can be used to tell other elements what was
     * clicked so it can take action appropriately.
     */eventName:{type:String,value:"button",reflectToAttribute:!0}},/**
   * Notice the selected value has changed.
   */_selectedUpdated:function _selectedUpdated(newValue,oldValue){if(babelHelpers.typeof(newValue)!==babelHelpers.typeof(null)&&babelHelpers.typeof(oldValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(oldValue)!==babelHelpers.typeof(null)){// check for tag match since we have to filter out text nodes
for(var children=(0,_polymerDom.dom)(this).children,item={},j=0,i=0,len=children.length;i<len;i++){if("PAPER-ITEM"===children[i].tagName){if(j===newValue){item=children[i];len=i;continue}j++}}// ensure we have a value; if so, this becomes the event to look for
// also use our flag to ensure machine setting the tag default doesn't
// equate to firing off a selected event.
if(!this._blockEvent&&babelHelpers.typeof(item.attributes)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(item.attributes.value)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&babelHelpers.typeof(item.attributes.value.value)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// weird but this makes the menu close when we fire up an event
// that indicates something higher should do something. This
// avoids an annoying UX error where the menu stays open for
// no reason.
this.$.menu.hideMenu();this.fire("hax-context-item-selected",{target:item,eventName:item.attributes.value.value})}// we only block 1 time if it's available
if(this._blockEvent){this._blockEvent=!1}}}})});