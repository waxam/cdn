define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../simple-colors/simple-colors.js", "./hax-shared-styles.js"], function (_exports, _require, _polymerElement, _renderStatus, _simpleColors, _haxSharedStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxGizmoBrowserItem = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_d2481e60aa5311e9b999174ecd579fc6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"hax-shared-styles\">\n        :host {\n          display: block;\n        }\n        :host([elevation=\"1\"]) {\n          -webkit-transform: scale(1, 1);\n          transform: scale(1, 1);\n        }\n        :host([elevation=\"2\"]) {\n          -webkit-transform: scale(1.4, 1.4);\n          transform: scale(1.4, 1.4);\n        }\n        paper-button {\n          color: var(--hax-color-text);\n          text-transform: none;\n          background-color: var(--hax-color-bg-accent);\n          min-width: unset;\n          cursor: pointer;\n          display: flex;\n          width: 50px;\n          height: 50px;\n          padding: 5px;\n          margin: 10px;\n          color: #ffffff;\n          border-radius: 50%;\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n          -webkit-transition: box-shadow 0.3s;\n          -moz-transition: box-shadow 0.3s;\n          -ms-transition: box-shadow 0.3s;\n          -o-transition: box-shadow 0.3s;\n          transition: box-shadow 0.3s;\n        }\n        paper-button:hover,\n        paper-button:focus {\n          box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.14),\n            0 2px 10px 0 rgba(0, 0, 0, 0.12), 0 6px 2px -4px rgba(0, 0, 0, 0.2);\n        }\n        paper-button:active {\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n        }\n        paper-button iron-icon {\n          height: 32px;\n          width: 32px;\n          color: var(--simple-colors-default-theme-grey-1);\n          display: inline-block;\n        }\n        .item-title {\n          margin-top: 8px;\n          color: var(--hax-color-text);\n          width: 100%;\n          white-space: nowrap;\n          overflow: hidden;\n          text-overflow: ellipsis;\n          font-size: 12px;\n          line-height: 12px;\n          height: 12px;\n          text-align: center;\n        }\n        .button-inner {\n          display: flex;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n      </style>\n      <paper-button\n        on-click=\"_fireEvent\"\n        data-voicecommand$=\"select [[title]]\"\n        title=\"[[title]]\"\n        style$=\"background-color:[[hexColor]];\"\n      >\n        <div class=\"button-inner\">\n          <iron-icon icon=\"[[icon]]\" hidden$=\"[[!icon]]\"></iron-icon>\n          <iron-image\n            src=\"[[image]]\"\n            preload\n            sizing=\"cover\"\n            hidden$=\"[[!image]]\"\n          ></iron-image>\n        </div>\n      </paper-button>\n      <div class=\"item-title\" aria-hidden=\"true\">[[title]]</div>\n    "]);

    _templateObject_d2481e60aa5311e9b999174ecd579fc6 = function _templateObject_d2481e60aa5311e9b999174ecd579fc6() {
      return data;
    };

    return data;
  }

  /**
  `hax-gizmo-browser-item`
  A button on the hax-gizmo-browser app display
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - 
  */
  var HaxGizmoBrowserItem =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxGizmoBrowserItem, _PolymerElement);

    function HaxGizmoBrowserItem() {
      var _this;

      babelHelpers.classCallCheck(this, HaxGizmoBrowserItem);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxGizmoBrowserItem).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/editor-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/device-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/hardware-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/communication-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/social-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/av-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/maps-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/places-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-image/iron-image.js"], res, rej);
      });
      (0, _renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this), function () {
        this.addEventListener("mousedown", this.tapEventOn.bind(this));
        this.addEventListener("mouseover", this.tapEventOn.bind(this));
        this.addEventListener("mouseout", this.tapEventOff.bind(this));
        this.addEventListener("focusin", this.tapEventOn.bind(this));
        this.addEventListener("focusout", this.tapEventOff.bind(this));
      });
      return _this;
    }

    babelHelpers.createClass(HaxGizmoBrowserItem, [{
      key: "_getHexColor",
      value: function _getHexColor(color) {
        var name = color.replace("-text", "");
        var tmp = new _simpleColors.SimpleColors();

        if (tmp.colors[name]) {
          return tmp.colors[name][6];
        }

        return "#000000";
      }
      /**
       * special handling for taps on the thing
       */

    }, {
      key: "tapEventOn",
      value: function tapEventOn(e) {
        this.elevation = 2;
      }
      /**
       * Hover off stop showing the deeper shadow.
       */

    }, {
      key: "tapEventOff",
      value: function tapEventOff(e) {
        this.elevation = 1;
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        var gizmo = {
          tag: this.tagToInsert
        };
        var element = window.HaxStore.haxElementPrototype(gizmo);
        window.HaxStore.write("activeHaxElement", element, this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d2481e60aa5311e9b999174ecd579fc6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-gizmo-browser-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * Index position in the original list of imports
           */
          index: {
            type: Number
          },

          /**
           * Icon for the button, optional.
           */
          icon: {
            type: String
          },

          /**
           * Image for the button, optional.
           */
          image: {
            type: String,
            value: false
          },

          /**
           * color name of the item
           */
          color: {
            type: String
          },

          /**
           * Class for the color
           */
          hexColor: {
            type: String,
            computed: "_getHexColor(color)"
          },

          /**
           * Author related to this gizmo
           */
          author: {
            type: String
          },

          /**
           * Description for this.
           */
          description: {
            type: String
          },

          /**
           * Examples, a list of image links, optional.
           */
          examples: {
            type: Array
          },

          /**
           * Status, whether disabled, enabled, or other future states.
           */
          status: {
            type: Array
          },

          /**
           * Tag
           */
          tagToInsert: {
            type: String
          },

          /**
           * Elevation off the UI
           */
          elevation: {
            type: Number,
            value: 1,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return HaxGizmoBrowserItem;
  }(_polymerElement.PolymerElement);

  _exports.HaxGizmoBrowserItem = HaxGizmoBrowserItem;
  window.customElements.define(HaxGizmoBrowserItem.tag, HaxGizmoBrowserItem);
});