define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "./hax-item-button-inner.js"], function (_exports, _polymerElement, _renderStatus, _haxItemButtonInner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxGizmoBrowserItem = void 0;

  function _templateObject_4808da40e14a11e9bce923988a998e3c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          max-width: 100px;\n        }\n        :host([elevation=\"1\"]) {\n          -webkit-transform: scale(1, 1);\n          transform: scale(1, 1);\n        }\n        :host([elevation=\"2\"]) {\n          -webkit-transform: scale(1.4, 1.4);\n          transform: scale(1.4, 1.4);\n        }\n        paper-button {\n          color: black;\n          text-transform: none;\n          min-width: unset;\n          cursor: pointer;\n          width: 80px;\n          padding: 10px;\n          margin: 10px;\n          box-shadow: none;\n          --paper-button-ink-color: var(--hax-ink-color, black);\n        }\n      </style>\n      <paper-button on-click=\"_fireEvent\" data-voicecommand$=\"select [[title]]\">\n        <hax-item-button-inner\n          color=\"[[color]]\"\n          icon=\"[[icon]]\"\n          image=\"[[image]]\"\n          label=\"[[title]]\"\n        >\n        </hax-item-button-inner>\n      </paper-button>\n    "]);

    _templateObject_4808da40e14a11e9bce923988a998e3c = function _templateObject_4808da40e14a11e9bce923988a998e3c() {
      return data;
    };

    return data;
  }

  /**
  `hax-gizmo-browser-item`
  A button on the hax-gizmo-browser app display
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - 
  */
  var HaxGizmoBrowserItem =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxGizmoBrowserItem, _PolymerElement);

    function HaxGizmoBrowserItem() {
      var _this;

      babelHelpers.classCallCheck(this, HaxGizmoBrowserItem);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxGizmoBrowserItem).call(this));
      (0, _renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this), function () {
        this.addEventListener("mousedown", this.tapEventOn.bind(this));
        this.addEventListener("mouseover", this.tapEventOn.bind(this));
        this.addEventListener("mouseout", this.tapEventOff.bind(this));
        this.addEventListener("focusin", this.tapEventOn.bind(this));
        this.addEventListener("focusout", this.tapEventOff.bind(this));
      });
      return _this;
    }

    babelHelpers.createClass(HaxGizmoBrowserItem, [{
      key: "tapEventOn",

      /**
       * special handling for taps on the thing
       */
      value: function tapEventOn(e) {
        this.elevation = 2;
      }
      /**
       * Hover off stop showing the deeper shadow.
       */

    }, {
      key: "tapEventOff",
      value: function tapEventOff(e) {
        this.elevation = 1;
      }
      /**
       * Fire an event that includes the eventName of what was just pressed.
       */

    }, {
      key: "_fireEvent",
      value: function _fireEvent(e) {
        var gizmo = {
          tag: this.tagToInsert
        };
        var element = window.HaxStore.haxElementPrototype(gizmo);
        window.HaxStore.write("activeHaxElement", element, this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_4808da40e14a11e9bce923988a998e3c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-gizmo-browser-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * Index position in the original list of imports
           */
          index: {
            type: Number
          },

          /**
           * Icon for the button, optional.
           */
          icon: {
            type: String
          },

          /**
           * Image for the button, optional.
           */
          image: {
            type: String,
            value: false
          },

          /**
           * color name of the item
           */
          color: {
            type: String
          },

          /**
           * Author related to this gizmo
           */
          author: {
            type: String
          },

          /**
           * Description for this.
           */
          description: {
            type: String
          },

          /**
           * Examples, a list of image links, optional.
           */
          examples: {
            type: Array
          },

          /**
           * Status, whether disabled, enabled, or other future states.
           */
          status: {
            type: Array
          },

          /**
           * Tag
           */
          tagToInsert: {
            type: String
          },

          /**
           * Elevation off the UI
           */
          elevation: {
            type: Number,
            value: 1,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return HaxGizmoBrowserItem;
  }(_polymerElement.PolymerElement);

  _exports.HaxGizmoBrowserItem = HaxGizmoBrowserItem;
  window.customElements.define(HaxGizmoBrowserItem.tag, HaxGizmoBrowserItem);
});