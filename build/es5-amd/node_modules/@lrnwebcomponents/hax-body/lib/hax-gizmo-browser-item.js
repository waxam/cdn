define(["exports", "../../../lit-element/lit-element.js", "./hax-item-button-inner.js"], function (_exports, _litElement, _haxItemButtonInner) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxGizmoBrowserItem = void 0;

  function _templateObject2_671178c02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          max-width: 90px;\n        }\n        paper-button {\n          text-transform: none;\n          min-width: unset;\n          cursor: pointer;\n          width: 80px;\n          padding: 5px;\n          margin: 5px;\n          box-shadow: none;\n          transition: 0.2s all linear;\n          --paper-button-ink-color: var(--hax-ink-color, #000000);\n        }\n        paper-button:hover,\n        paper-button:focus {\n          box-shadow: 0 4px 4px 0 rgba(0, 0, 0, 0.14),\n            0 2px 10px 0 rgba(0, 0, 0, 0.12), 0 6px 2px -4px rgba(0, 0, 0, 0.2);\n        }\n        paper-button:active {\n          box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n            0 1px 5px 0 rgba(0, 0, 0, 0.12), 0 3px 1px -2px rgba(0, 0, 0, 0.2);\n        }\n      "]);

    _templateObject2_671178c02d8511ea80ccf124101da415 = function _templateObject2_671178c02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  function _templateObject_671178c02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-button\n        @click=\"", "\"\n        .data-voicecommand=\"select ", "\"\n      >\n        <hax-item-button-inner\n          color=\"", "\"\n          icon=\"", "\"\n          label=\"", "\"\n        >\n        </hax-item-button-inner>\n      </paper-button>\n    "]);

    _templateObject_671178c02d8511ea80ccf124101da415 = function _templateObject_671178c02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  /**
   * `hax-gizmo-browser-item`
   * @customElement hax-gizmo-browser-item
   * `A button on the hax-gizmo-browser app display`
   */
  var HaxGizmoBrowserItem =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxGizmoBrowserItem, _LitElement);

    function HaxGizmoBrowserItem() {
      babelHelpers.classCallCheck(this, HaxGizmoBrowserItem);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxGizmoBrowserItem).apply(this, arguments));
    }

    babelHelpers.createClass(HaxGizmoBrowserItem, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_671178c02d8511ea80ccf124101da415(), this._fireEvent, this.title, this.color, this.icon, this.title);
      }
    }, {
      key: "_fireEvent",

      /**
       * Fire an event that includes the eventName of what was just pressed.
       */
      value: function _fireEvent(e) {
        var gizmo = {
          tag: this.tagToInsert
        };
        var element = window.HaxStore.haxElementPrototype(gizmo);
        window.HaxStore.write("activeHaxElement", element, this);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_671178c02d8511ea80ccf124101da415())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-gizmo-browser-item";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * Index position in the original list of imports
           */
          index: {
            type: Number
          },

          /**
           * Icon for the button, optional.
           */
          icon: {
            type: String
          },

          /**
           * color name of the item
           */
          color: {
            type: String
          },

          /**
           * Author related to this gizmo
           */
          author: {
            type: String
          },

          /**
           * Description for this.
           */
          description: {
            type: String
          },

          /**
           * Examples, a list of image links, optional.
           */
          examples: {
            type: Array
          },

          /**
           * Status, whether disabled, enabled, or other future states.
           */
          status: {
            type: Array
          },

          /**
           * Tag
           */
          tagToInsert: {
            type: String,
            attribute: "tag-to-insert"
          }
        };
      }
    }]);
    return HaxGizmoBrowserItem;
  }(_litElement.LitElement);

  _exports.HaxGizmoBrowserItem = HaxGizmoBrowserItem;
  window.customElements.define(HaxGizmoBrowserItem.tag, HaxGizmoBrowserItem);
});