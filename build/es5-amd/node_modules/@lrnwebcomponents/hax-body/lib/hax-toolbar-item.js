define(["exports", "../../../lit-element/lit-element.js", "../../simple-colors/lib/simple-colors-polymer.js", "../../../@polymer/paper-button/paper-button.js", "../../simple-tooltip/simple-tooltip.js"], function (_exports, _litElement, _simpleColorsPolymer, _paperButton, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxToolbarItem = void 0;

  function _templateObject2_722a55b0425211ea8ef51d3abfe05f78() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: flex;\n          box-sizing: border-box;\n          height: 36px;\n          width: 36px;\n        }\n        :host([large]),\n        :host([mini]) {\n          height: unset;\n          width: unset;\n        }\n        :host([menu]) {\n          width: 100%;\n          position: relative;\n          display: -ms-flexbox;\n          display: -webkit-flex;\n          display: flex;\n          -ms-flex-direction: row;\n          -webkit-flex-direction: row;\n          flex-direction: row;\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n          -webkit-font-smoothing: antialiased;\n          font-size: 16px;\n          font-weight: 400;\n          line-height: 24px;\n        }\n        :host([menu]) paper-button {\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n        }\n        #label {\n          padding-left: 5px;\n        }\n        paper-button {\n          display: flex;\n          align-items: center;\n          background-color: var(\n            --hax-toolbar-item-bg,\n            var(--hax-color-bg-accent, white)\n          );\n          color: var(--hax-toolbar-item-color, --hax-color-text);\n          min-width: 0;\n          margin: 0;\n          text-transform: none;\n          padding: 0;\n          border-radius: 0;\n          font-size: 12px;\n          transition: 0.3s all;\n          height: 36px;\n          width: 36px;\n          min-width: unset;\n          --paper-button-ink-color: var(\n            --hax-toolbar-item-color,\n            --hax-color-accent1\n          );\n        }\n        paper-button:active,\n        paper-button:hover,\n        paper-button:focus {\n          color: var(--hax-color-text-active);\n          outline: 1px solid var(--hax-color-accent1);\n          z-index: 2;\n        }\n        :host([default]) paper-button {\n          background: black;\n        }\n        :host([dark]) paper-button {\n          background-color: var(--hax-color-text);\n          color: var(--hax-color-bg-accent);\n        }\n        :host([dark]) paper-button:hover {\n          background-color: var(--hax-color-bg-accent);\n          color: var(--hax-color-text);\n        }\n        :host([dark]) paper-button:active {\n          background: var(--hax-color-bg-accent);\n          color: var(--hax-color-text);\n        }\n        iron-icon {\n          width: 20px;\n          height: 20px;\n          padding: 0;\n          margin: 0;\n        }\n        :host([mini]) iron-icon {\n          width: 16px;\n          height: 16px;\n        }\n        :host([mini]) paper-button {\n          border-radius: 50%;\n          width: 18px;\n          height: 18px;\n          padding: 1px;\n          border: 1px solid var(--hax-color-border-outline);\n        }\n        :host([large][light]) paper-button {\n          background-color: #aaaaaa;\n          color: #eeeeee;\n        }\n        :host([large]) paper-button {\n          border-radius: 0;\n          width: unset;\n          padding: 0px;\n          border: 0px;\n        }\n        :host([mini]) paper-button:active,\n        :host([mini]) paper-button:hover,\n        :host([mini]) paper-button:focus {\n          outline: unset;\n          border: 1px solid var(--hax-color-accent1);\n        }\n        :host([menu]) paper-button {\n          padding: 0 8px;\n          width: 100%;\n          height: 36px;\n        }\n        :host([menu]) paper-button:hover {\n          background-color: #d3d3d3;\n          color: #000000;\n        }\n        .flip-icon {\n          transform: rotateY(180deg);\n        }\n        simple-tooltip {\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-duration-in: 100ms;\n          --simple-tooltip-duration-out: 0;\n          --simple-tooltip-border-radius: 0;\n          --simple-tooltip-font-size: 14px;\n        }\n      "]);

    _templateObject2_722a55b0425211ea8ef51d3abfe05f78 = function _templateObject2_722a55b0425211ea8ef51d3abfe05f78() {
      return data;
    };

    return data;
  }

  function _templateObject_722a55b0425211ea8ef51d3abfe05f78() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-button\n        .disabled=\"", "\"\n        id=\"btn\"\n        tabindex=\"0\"\n        .title=\"", "\"\n      >\n        <iron-icon\n          icon=\"", "\"\n          ?hidden=\"", "\"\n        ></iron-icon>\n        <span id=\"label\" ?hidden=\"", "\"\n          >", "</span\n        >\n        <slot></slot>\n      </paper-button>\n      <simple-tooltip\n        for=\"btn\"\n        ?hidden=\"", "\"\n        id=\"tooltip\"\n        offset=\"10\"\n        position=\"", "\"\n      >\n        ", "\n      </simple-tooltip>\n    "]);

    _templateObject_722a55b0425211ea8ef51d3abfe05f78 = function _templateObject_722a55b0425211ea8ef51d3abfe05f78() {
      return data;
    };

    return data;
  }

  var HaxToolbarItem =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxToolbarItem, _LitElement);
    babelHelpers.createClass(HaxToolbarItem, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_722a55b0425211ea8ef51d3abfe05f78(), this.disabled, this.tooltip, this.icon, this.icon == "" ? true : false, this.label == "" ? true : false, this.label, this.tooltip == "" ? true : false, this.tooltipDirection, this.tooltip);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_722a55b0425211ea8ef51d3abfe05f78())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-toolbar-item";
      }
    }]);

    function HaxToolbarItem() {
      var _this;

      babelHelpers.classCallCheck(this, HaxToolbarItem);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxToolbarItem).call(this));
      _this.corner = "";
      _this.large = false;
      _this.disabled = false;
      _this.dark = false;
      _this.menu = false;
      _this.mini = false;
      _this.icon = "";
      _this.label = "";
      _this.tooltip = "";
      _this.tooltipDirection = "top";
      _this.default = false;
      return _this;
    }

    babelHelpers.createClass(HaxToolbarItem, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "height" && _this2.shadowRoot) {
            _this2.shadowRoot.querySelector("#btn").style.height = _this2[propName];
          }
        });
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * corner
           */
          corner: {
            type: String,
            reflect: true
          },
          height: {
            type: String
          },

          /**
           * disabled state
           */
          disabled: {
            type: Boolean,
            reflect: true
          },

          /**
           * Inverted display mode
           */
          dark: {
            type: Boolean,
            reflect: true
          },

          /**
           * Style to be presented in a menu
           */
          menu: {
            type: Boolean,
            reflect: true
          },

          /**
           * Present smaller the normal but consistent
           */
          mini: {
            type: Boolean,
            reflect: true
          },

          /**
           * Present larger then normal but consistent
           */
          large: {
            type: Boolean,
            reflect: true
          },

          /**
           * Icon to represent this button, required.
           */
          icon: {
            type: String
          },

          /**
           * Text applied to the button
           */
          label: {
            type: String
          },

          /**
           * Hover tip text
           */
          tooltip: {
            type: String
          },

          /**
           * Direction that the tooltip should flow
           */
          tooltipDirection: {
            type: String,
            attribute: "tooltip-direction"
          },
          default: {
            type: Boolean,
            reflect: true
          }
        };
      }
    }]);
    return HaxToolbarItem;
  }(_litElement.LitElement);

  _exports.HaxToolbarItem = HaxToolbarItem;
  window.customElements.define(HaxToolbarItem.tag, HaxToolbarItem);
});