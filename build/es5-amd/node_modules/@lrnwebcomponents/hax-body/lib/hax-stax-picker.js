define(["exports", "require", "./hax-blox-picker.js"], function (_exports, _require, _haxBloxPicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxStaxPicker = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  /**
   *  `hax-stax-picker`
   * A picker for selecting an item from a list of apps / hax stax which require
   * a decision to be made. This is used when multiple things match either on upload
   * in the add operation of the app or in the stax selection to render through,
   * such as having multiple ways of presenting an image.
   * @microcopy - the mental model for this element
   * - data - this is the app data model for an element which expresses itself to hax
   */
  var HaxStaxPicker =
  /*#__PURE__*/
  function (_HaxPicker) {
    babelHelpers.inherits(HaxStaxPicker, _HaxPicker);

    function HaxStaxPicker() {
      var _this;

      babelHelpers.classCallCheck(this, HaxStaxPicker);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxStaxPicker).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./hax-stax-browser.js"], res, rej);
      });
      _this.title = "Insert template";
      _this.icon = "hax:templates";
      _this.refreshOnOpen = "staxList"; // this sets everything else in motion correctly

      _this.setupPicker("haxStaxPicker", "hax-stax-browser");

      return _this;
    }

    babelHelpers.createClass(HaxStaxPicker, null, [{
      key: "tag",
      get: function get() {
        return "hax-stax-picker";
      }
    }]);
    return HaxStaxPicker;
  }(_haxBloxPicker.HaxPicker);

  _exports.HaxStaxPicker = HaxStaxPicker;
  window.customElements.define(HaxStaxPicker.tag, HaxStaxPicker);
});