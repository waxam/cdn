define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js", "./hax-shared-styles.js"], function (_exports, _require, _polymerElement, _renderStatus, _polymerDom, _domRepeat, _haxSharedStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HaxAppPicker = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_4b08cb60b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"hax-shared-styles\">\n        :host {\n          display: block;\n        }\n        iron-icon:not(:defined),\n        paper-button:not(:defined),\n        paper-dialog:not(:defined) {\n          display: none;\n        }\n        hax-app-picker-item {\n          -webkit-transition: 0.3s all linear;\n          transition: 0.3s all linear;\n          display: inline-flex;\n        }\n        #closedialog {\n          float: right;\n          top: 15px;\n          right: 0;\n          position: absolute;\n          padding: 8px;\n          margin: 0;\n          color: var(--hax-color-text);\n          background-color: transparent;\n          width: 40px;\n          height: 40px;\n          min-width: unset;\n        }\n        #ironlist {\n          width: 100%;\n          min-height: 400px;\n          padding-bottom: 50px;\n        }\n        .repeat-item {\n          display: inline-flex;\n        }\n        #dialog {\n          min-width: 400px;\n          min-height: 400px;\n          max-height: 60vh;\n          max-width: 50vw;\n          overflow: hidden;\n          border-radius: 16px;\n          z-index: 1000000;\n          border: 2px solid var(--hax-color-border-outline);\n          @apply --hax-app-picker-dialog;\n          background-color: #ffffff;\n        }\n        #buttonlist {\n          display: block;\n          text-align: left;\n          margin: 0px;\n          overflow-x: hidden;\n          overflow-y: auto;\n          min-height: 400px;\n        }\n        #title,\n        .element-button > div {\n          color: var(--hax-color-text);\n        }\n        #title {\n          padding: 16px;\n          border-bottom: 2px solid var(--hax-color-border-outline);\n          margin: 0;\n          width: calc(100% - 32px);\n          background-color: var(--hax-color-menu-heading-bg);\n          color: var(--hax-color-text);\n          @apply --paper-font-title;\n          @apply --hax-app-picker-dialog-title;\n        }\n        .scroll-wrap {\n          margin-bottom: 64px;\n          min-height: 200px;\n        }\n        .element-button {\n          display: inline-block;\n          width: 70px;\n          margin: 8px 4px;\n          text-align: center;\n        }\n      </style>\n      <paper-dialog id=\"dialog\">\n        <h3 id=\"title\">[[title]]</h3>\n        <paper-dialog-scrollable id=\"buttonlist\">\n          <div class=\"scroll-wrap\">\n            <template\n              is=\"dom-repeat\"\n              id=\"ironlist\"\n              items=\"[[selectionList]]\"\n              as=\"element\"\n            >\n              <div class=\"repeat-item\">\n                <hax-app-picker-item\n                  id$=\"picker-item-[[index]]\"\n                  class=\"element-button\"\n                  on-click=\"_selected\"\n                  data-selected$=\"[[index]]\"\n                  label=\"[[element.title]]\"\n                  icon=\"[[element.icon]]\"\n                  color=\"[[element.color]]\"\n                ></hax-app-picker-item>\n              </div>\n            </template>\n          </div>\n        </paper-dialog-scrollable>\n        <paper-button id=\"closedialog\" on-click=\"close\">\n          <iron-icon icon=\"icons:cancel\" title=\"Close dialog\"></iron-icon>\n        </paper-button>\n      </paper-dialog>\n    "], ["\n      <style include=\"hax-shared-styles\">\n        :host {\n          display: block;\n        }\n        iron-icon:not(:defined),\n        paper-button:not(:defined),\n        paper-dialog:not(:defined) {\n          display: none;\n        }\n        hax-app-picker-item {\n          -webkit-transition: 0.3s all linear;\n          transition: 0.3s all linear;\n          display: inline-flex;\n        }\n        #closedialog {\n          float: right;\n          top: 15px;\n          right: 0;\n          position: absolute;\n          padding: 8px;\n          margin: 0;\n          color: var(--hax-color-text);\n          background-color: transparent;\n          width: 40px;\n          height: 40px;\n          min-width: unset;\n        }\n        #ironlist {\n          width: 100%;\n          min-height: 400px;\n          padding-bottom: 50px;\n        }\n        .repeat-item {\n          display: inline-flex;\n        }\n        #dialog {\n          min-width: 400px;\n          min-height: 400px;\n          max-height: 60vh;\n          max-width: 50vw;\n          overflow: hidden;\n          border-radius: 16px;\n          z-index: 1000000;\n          border: 2px solid var(--hax-color-border-outline);\n          @apply --hax-app-picker-dialog;\n          background-color: #ffffff;\n        }\n        #buttonlist {\n          display: block;\n          text-align: left;\n          margin: 0px;\n          overflow-x: hidden;\n          overflow-y: auto;\n          min-height: 400px;\n        }\n        #title,\n        .element-button > div {\n          color: var(--hax-color-text);\n        }\n        #title {\n          padding: 16px;\n          border-bottom: 2px solid var(--hax-color-border-outline);\n          margin: 0;\n          width: calc(100% - 32px);\n          background-color: var(--hax-color-menu-heading-bg);\n          color: var(--hax-color-text);\n          @apply --paper-font-title;\n          @apply --hax-app-picker-dialog-title;\n        }\n        .scroll-wrap {\n          margin-bottom: 64px;\n          min-height: 200px;\n        }\n        .element-button {\n          display: inline-block;\n          width: 70px;\n          margin: 8px 4px;\n          text-align: center;\n        }\n      </style>\n      <paper-dialog id=\"dialog\">\n        <h3 id=\"title\">[[title]]</h3>\n        <paper-dialog-scrollable id=\"buttonlist\">\n          <div class=\"scroll-wrap\">\n            <template\n              is=\"dom-repeat\"\n              id=\"ironlist\"\n              items=\"[[selectionList]]\"\n              as=\"element\"\n            >\n              <div class=\"repeat-item\">\n                <hax-app-picker-item\n                  id$=\"picker-item-[[index]]\"\n                  class=\"element-button\"\n                  on-click=\"_selected\"\n                  data-selected\\$=\"[[index]]\"\n                  label=\"[[element.title]]\"\n                  icon=\"[[element.icon]]\"\n                  color=\"[[element.color]]\"\n                ></hax-app-picker-item>\n              </div>\n            </template>\n          </div>\n        </paper-dialog-scrollable>\n        <paper-button id=\"closedialog\" on-click=\"close\">\n          <iron-icon icon=\"icons:cancel\" title=\"Close dialog\"></iron-icon>\n        </paper-button>\n      </paper-dialog>\n    "]);

    _templateObject_4b08cb60b3b911e9b58d79562a23326c = function _templateObject_4b08cb60b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  /**
   `hax-app-picker`
   A picker for selecting an item from a list of apps / hax gizmos which require
   a decision to be made. This is used when multiple things match either on upload
   in the add operation of the app or in the gizmo selection to render through,
   such as having multiple ways of presenting an image.
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
   - data - this is the app data model for an element which expresses itself to hax
  */
  var HaxAppPicker =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HaxAppPicker, _PolymerElement);

    function HaxAppPicker() {
      var _this;

      babelHelpers.classCallCheck(this, HaxAppPicker);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxAppPicker).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./hax-app-picker-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-dialog/paper-dialog.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(HaxAppPicker, [{
      key: "ready",

      /**
       * Attached life cycle
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HaxAppPicker.prototype), "ready", this).call(this);
        this.dispatchEvent(new CustomEvent("hax-register-app-picker", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("iron-overlay-canceled", this.close.bind(this));
          this.addEventListener("iron-overlay-closed", this.close.bind(this));
        });
      }
      /**
       * Close the picker and ensure body locking is off.
       */

    }, {
      key: "close",
      value: function close() {
        this.opened = false;
      }
      /**
       * Open status changed
       */

    }, {
      key: "_openedChanged",
      value: function _openedChanged(newValue, oldValue) {
        if (newValue) {
          this.shadowRoot.querySelector("#dialog").open(); // lock the background

          document.body.style.overflow = "hidden";
        } else {
          if (this.shadowRoot.querySelector("#dialog").close) {
            this.shadowRoot.querySelector("#dialog").close();
          }

          document.body.style.overflow = null;
        }
      }
      /**
       * Present options to the user with a modal and selection method that
       * shifts itself to be above everything (stack order)
       * @param  [array] elements  a list of elements for presenting to the user
       * to select between.
       */

    }, {
      key: "presentOptions",
      value: function presentOptions(elements) {
        var _this2 = this;

        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "element";
        var title = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "Select an option";
        var pickerType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "gizmo";
        // wipe existing
        this.title = title;
        this.pickerType = pickerType;
        var tmp = [];

        switch (pickerType) {
          // hax gizmo selector
          case "gizmo":
            for (var i in elements) {
              elements[i].__type = type;
              tmp[i] = {
                icon: elements[i].gizmo.icon,
                title: elements[i].gizmo.title,
                color: elements[i].gizmo.color
              };
            }

            break;
          // app selector

          case "app":
            for (var i in elements) {
              tmp[i] = {
                icon: elements[i].details.icon,
                title: elements[i].details.title,
                color: elements[i].details.color
              };
            }

            break;
          // we don't know what to do with this

          default:
            tmp = elements;
            break;
        }

        this._elements = elements;
        this.set("selectionList", []);
        this.set("selectionList", tmp);
        this.opened = true; // try to focus on option 0

        setTimeout(function () {
          _this2.shadowRoot.querySelector("#picker-item-0").focus();
        }, 100);
      }
      /**
       * Handle the user selecting an app.
       */

    }, {
      key: "_selected",
      value: function _selected(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var key = normalizedEvent.localTarget.getAttribute("data-selected");
        e.preventDefault();
        e.stopPropagation();

        if (babelHelpers.typeof(this._elements[key]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // haxElement is a unique case
          if (this.pickerType == "gizmo") {
            window.HaxStore.write("activeHaxElement", this._elements[key], this);

            if (this._elements[key].__type === "__convert") {
              window.HaxStore.instance.haxManager.editExistingNode = true;
            } // ensure this is open even though it should be


            window.HaxStore.instance.haxManager.selectStep("configure");
            window.HaxStore.instance.haxManager.open();
          } else if (this.pickerType == "delete") {
            if (this._elements[key]["title"] === "Yes") {
              if (window.HaxStore.instance.activeHaxBody.activeNode !== window.HaxStore.instance.activeHaxBody.activeContainerNode) {
                window.HaxStore.instance.activeHaxBody.haxDeleteNode(window.HaxStore.instance.activeHaxBody.activeNode, window.HaxStore.instance.activeHaxBody.activeContainerNode);
              } else {
                window.HaxStore.instance.activeHaxBody.haxDeleteNode(window.HaxStore.instance.activeHaxBody.activeNode);
              }

              window.HaxStore.toast("Element deleted", 2000);
            }
          } else {
            // bubble this up
            this.dispatchEvent(new CustomEvent("hax-app-picker-selection", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: this._elements[key]
            }));
          }
        }

        this.opened = false;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_4b08cb60b3b911e9b58d79562a23326c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "hax-app-picker";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * raw element set
           */
          _elements: {
            type: Array,
            value: []
          },

          /**
           * Refactored list for selection purposes
           */
          selectionList: {
            type: Array,
            value: []
          },

          /**
           * Title for the dialog
           */
          title: {
            type: String,
            value: "Pick an options"
          },

          /**
           * Allow multiple uses
           */
          pickerType: {
            type: String,
            value: "gizmo"
          },

          /**
           * Opened status to bind to the dialog box being open
           */
          opened: {
            type: Boolean,
            value: false,
            observer: "_openedChanged"
          }
        };
      }
    }]);
    return HaxAppPicker;
  }(_polymerElement.PolymerElement);

  _exports.HaxAppPicker = HaxAppPicker;
  window.customElements.define(HaxAppPicker.tag, HaxAppPicker);
});