define(["exports", "meta", "require", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, meta, _require, _litElement, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImageCompareSlider = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_8a305bd0a11d11eaa169d9d604127774() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <h2>", "</h2>\n            "]);

    _templateObject3_8a305bd0a11d11eaa169d9d604127774 = function _templateObject3_8a305bd0a11d11eaa169d9d604127774() {
      return data;
    };

    return data;
  }

  function _templateObject2_8a305bd0a11d11eaa169d9d604127774() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div>\n        ", "\n        <slot name=\"heading\"></slot>\n        <slot name=\"description\"></slot>\n        <slot name=\"top\" hidden></slot>\n        <slot name=\"bottom\" hidden></slot>\n        <div id=\"container\" style=\"background-image: url(", ");\">\n          <div id=\"top\" style=\"background-image: url(", ");\"></div>\n        </div>\n        <user-action track=\"click\">\n          <paper-slider id=\"slider\" value=\"50\"></paper-slider>\n        </user-action>\n        <div></div>\n      </div>\n    "]);

    _templateObject2_8a305bd0a11d11eaa169d9d604127774 = function _templateObject2_8a305bd0a11d11eaa169d9d604127774() {
      return data;
    };

    return data;
  }

  function _templateObject_8a305bd0a11d11eaa169d9d604127774() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          width: 100%;\n        }\n        :host > div,\n        :host #container,\n        :host #top {\n          width: 100%;\n        }\n        :host #container {\n          background-size: cover;\n          overflow: visible;\n        }\n        :host #top {\n          background-size: auto 100%;\n          overflow: hidden;\n        }\n        :host #slider {\n          width: calc(100% + 30px);\n          margin-left: -15px;\n        }\n      "]);

    _templateObject_8a305bd0a11d11eaa169d9d604127774 = function _templateObject_8a305bd0a11d11eaa169d9d604127774() {
      return data;
    };

    return data;
  }

  /**
   * `image-compare-slider`
   * Layers images over each other with a slider interface to compare them
   * @demo demo/index.html
   * @element image-compare-slider
   */
  var ImageCompareSlider =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(ImageCompareSlider, _SchemaBehaviors);
    babelHelpers.createClass(ImageCompareSlider, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_8a305bd0a11d11eaa169d9d604127774())];
      }
    }]);

    function ImageCompareSlider() {
      var _this;

      babelHelpers.classCallCheck(this, ImageCompareSlider);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ImageCompareSlider).call(this));
      _this.opacity = false;
      new Promise(function (res, rej) {
        return _require.default(["../user-action/user-action.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-image/iron-image.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-slider/paper-slider.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(ImageCompareSlider, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_8a305bd0a11d11eaa169d9d604127774(), this.title ? (0, _litElement.html)(_templateObject3_8a305bd0a11d11eaa169d9d604127774(), this.title) : "", this.bottomSrc, this.topSrc);
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ImageCompareSlider.prototype), "connectedCallback", this).call(this);
        this.slotUpdate();
        this.observer.observe(this, {
          attributes: false,
          childList: true,
          subtree: false
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this.observer && this.observer.disconnect) this.observer.disconnect();
        if (babelHelpers.get(babelHelpers.getPrototypeOf(ImageCompareSlider.prototype), "disconnectedCallback", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ImageCompareSlider.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["topSrc"].includes(propName)) {
            _this2._updateAspect();

            _this2._slide();
          }
        });
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this3 = this;

        this.shadowRoot.querySelector("#slider").addEventListener("immediate-value-changed", function (e) {
          _this3._slide();
        });
      }
      /**
       * updates element based on slotted data
       * @memberof ImageCompareSlider
       */

    }, {
      key: "slotUpdate",
      value: function slotUpdate() {
        console.log(this, this.querySelector("[slot=top]"), this.querySelector("[slot=bottom]"));
        var top = this.querySelector("[slot=top]"),
            topSrc = top ? top.getAttribute("src") : false,
            bottom = this.querySelector("[slot=bottom]"),
            bottomSrc = bottom ? bottom.getAttribute("src") : false;
        if (topSrc) this.topSrc = topSrc;
        if (bottomSrc) this.bottomSrc = bottomSrc;
      }
      /**
       * updates the slider
       */

    }, {
      key: "_slide",
      value: function _slide() {
        if (this.opacity === false) {
          this.shadowRoot.querySelector("#top").style.width = this.shadowRoot.querySelector("#slider").immediateValue + "%";
        } else {
          this.shadowRoot.querySelector("#top").style.opacity = this.shadowRoot.querySelector("#slider").immediateValue / 100;
        }
      }
      /**
       * updates the aspect ratio
       */

    }, {
      key: "_updateAspect",
      value: function _updateAspect() {
        var img = document.createElement("img"),
            el = this.shadowRoot.querySelector("#top"),
            getAspect = function getAspect(img) {
          el.style.paddingTop = img.height * 100 / img.width + "%";
        };

        this.__aspect = "75";
        img.setAttribute("src", this.topSrc);

        if (img.height !== undefined && img.height > 0) {
          getAspect(img);
        } else {
          img.addEventListener("load", function () {
            getAspect(img);
          });
        }
      }
    }, {
      key: "observer",

      /**
       * mutation observer for tabs
       * @readonly
       * @returns {object}
       */
      get: function get() {
        var _this4 = this;

        var callback = function callback() {
          return _this4.slotUpdate();
        };

        return new MutationObserver(callback);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "image-compare-slider";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ImageCompareSlider), "properties", this), {
          /**
           * @deprecated Use `slot=heading`
           */
          title: {
            type: String
          },

          /**
           * src for top image
           */
          topSrc: {
            type: String,
            attribute: "top-src"
          },

          /**
           * mode for the slider: wipe
           */
          opacity: {
            type: Boolean
          },

          /**
           * src for top image
           */
          bottomSrc: {
            type: String,
            attribute: "bottom-src"
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Image comparison",
            description: "Simple element to allow one image to swipe over top of the other.",
            icon: "image:compare",
            color: "orange",
            groups: ["Image", "Media"],
            handles: [{
              type: "image",
              source: "bottomSrc",
              source2: "topSrc",
              title: "title"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              slot: "heading",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "opacity",
              title: "Slider Behavior",
              description: "Do you want the slider to wipe the top image across the bottom one (default), or to adjust the opacity of the top image?",
              inputMethod: "boolean",
              icon: "image:compare"
            }],
            configure: [{
              slot: "heading",
              title: "Title",
              inputMethod: "textfield"
            }, {
              slot: "description",
              title: "Optional Desscription",
              inputMethod: "code-editor"
            }, {
              property: "topSrc",
              title: "Top image",
              description: "The top image that swipes over",
              inputMethod: "haxupload",
              validationType: "url"
            }, {
              property: "bottomSrc",
              title: "Bottom image",
              description: "The base image to swipe over",
              inputMethod: "haxupload",
              validationType: "url"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "image-compare-slider",
            properties: {
              topSrc: new URL("./demo/images/Matterhorn01.png", meta.url),
              bottomSrc: new URL("./demo/images/Matterhorn02.png", meta.url),
              style: "width:100%;max-width:400px"
            },
            content: "<h2 slot=\"heading\">Image Compare Slider Default</h2><p slot=\"description\">The slider will fade away the top image.</p>"
          }, {
            tag: "image-compare-slider",
            properties: {
              opacity: true,
              topSrc: new URL("./demo/images/Matterhorn01.png", meta.url),
              bottomSrc: new URL("./demo/images/Matterhorn02.png", meta.url),
              style: "width:100%;max-width:400px"
            },
            content: "<h2 slot=\"heading\">Image Compare Slider Wipe</h2><p slot=\"description\">The slider will wipe away the top image.</p>"
          }]
        };
      }
    }]);
    return ImageCompareSlider;
  }((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));

  _exports.ImageCompareSlider = ImageCompareSlider;
  window.customElements.define(ImageCompareSlider.tag, ImageCompareSlider);
});