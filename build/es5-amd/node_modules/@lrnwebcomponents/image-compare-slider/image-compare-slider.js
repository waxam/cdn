define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _require, _polymerElement, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImageCompareSlider = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_93940e30e53211e9a0cfefb808989d41() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-flex;\n          width: 100%;\n          @apply --image-compare-slider;\n        }\n        :host > div,\n        :host #container,\n        :host #top {\n          width: 100%;\n        }\n        :host #container {\n          background-size: cover;\n          overflow: visible;\n          @apply --image-compare-slider-container;\n        }\n        :host #top {\n          background-size: auto 100%;\n          overflow: hidden;\n        }\n        :host #slider {\n          width: calc(100% + 30px);\n          margin-left: -15px;\n          @apply --image-compare-slider-control;\n        }\n      </style>\n      <div>\n        <h2>[[title]]</h2>\n        <div id=\"container\" style$=\"background-image: url([[bottomSrc]]);\">\n          <div id=\"top\" style$=\"background-image: url([[topSrc]]);\"></div>\n        </div>\n        <user-action track=\"click\">\n          <paper-slider id=\"slider\" value=\"50\"></paper-slider>\n        </user-action>\n        <div></div>\n      </div>\n    "]);

    _templateObject_93940e30e53211e9a0cfefb808989d41 = function _templateObject_93940e30e53211e9a0cfefb808989d41() {
      return data;
    };

    return data;
  }

  /**
   * `image-compare-slider`
   * Layers images over each other with a slider interface to compare them
   * @microcopy - the mental model for this element
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var ImageCompareSlider =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(ImageCompareSlider, _SchemaBehaviors);

    function ImageCompareSlider() {
      var _this;

      babelHelpers.classCallCheck(this, ImageCompareSlider);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ImageCompareSlider).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../user-action/user-action.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-image/iron-image.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-slider/paper-slider.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(ImageCompareSlider, [{
      key: "ready",
      value: function ready() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(ImageCompareSlider.prototype), "ready", this).call(this);

        this._updateAspect();

        this._slide();

        this.shadowRoot.querySelector("#slider").addEventListener("immediate-value-changed", function (e) {
          _this2._slide();
        });
      }
      /**
       * updates the slider
       */

    }, {
      key: "_slide",
      value: function _slide() {
        if (this.opacity === false) {
          this.shadowRoot.querySelector("#top").style.width = this.shadowRoot.querySelector("#slider").immediateValue + "%";
        } else {
          this.shadowRoot.querySelector("#top").style.opacity = this.shadowRoot.querySelector("#slider").immediateValue / 100;
        }
      }
      /**
       * updates the aspect ratio
       */

    }, {
      key: "_updateAspect",
      value: function _updateAspect() {
        var img = document.createElement("img"),
            el = this.shadowRoot.querySelector("#top"),
            getAspect = function getAspect(img) {
          el.style.paddingTop = img.height * 100 / img.width + "%";
        };

        this.__aspect = "75";
        img.setAttribute("src", this.topSrc);

        if (img.height !== undefined && img.height > 0) {
          getAspect(img);
        } else {
          img.addEventListener("load", function () {
            getAspect(img);
          });
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_93940e30e53211e9a0cfefb808989d41());
      }
    }, {
      key: "tag",
      get: function get() {
        return "image-compare-slider";
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_setStyles(width,height,sliderPercent)"];
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * src for top image
           */
          topSrc: {
            type: String,
            observer: "_updateAspect"
          },

          /**
           * mode for the slider: wipe
           */
          opacity: {
            type: Boolean,
            value: false
          },

          /**
           * src for top image
           */
          bottomSrc: {
            type: String
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ImageCompareSlider), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(ImageCompareSlider), "properties", this));
        }

        return props;
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Image comparison",
            description: "Simple element to allow one image to swipe over top of the other.",
            icon: "image:compare",
            color: "orange",
            groups: ["Image", "Media"],
            handles: [{
              type: "image",
              source: "bottomSrc",
              source2: "topSrc",
              title: "title"
            }],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "opacity",
              title: "Slider Behavior",
              description: "Do you want the slider to wipe the top image across the bottom one (default), or to adjust the opacity of the top image?",
              inputMethod: "select",
              options: {
                false: "wipe across",
                true: "adjust opacity"
              },
              icon: "image:compare"
            }],
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield"
            }, {
              property: "bottomSrc",
              title: "Bottom image",
              description: "The base image to swipe over",
              inputMethod: "haxupload",
              validationType: "url"
            }, {
              property: "topSrc",
              title: "Top image",
              description: "The top image that swipes over",
              inputMethod: "haxupload",
              validationType: "url"
            }],
            advanced: []
          }
        };
      }
    }]);
    return ImageCompareSlider;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.ImageCompareSlider = ImageCompareSlider;
  window.customElements.define(ImageCompareSlider.tag, ImageCompareSlider);
});