define(["exports","require","../../@polymer/polymer/polymer-element.js","../../@polymer/polymer/lib/mixins/mutable-data.js","../../@polymer/polymer/lib/utils/render-status.js","../../@polymer/polymer/lib/legacy/polymer.dom.js","../hax-body-behaviors/lib/HAXWiring.js","../../@polymer/paper-button/paper-button.js","../simple-toast/simple-toast.js","../../@polymer/iron-ajax/iron-ajax.js","../simple-colors/simple-colors.js","../../@vaadin/vaadin-split-layout/vaadin-split-layout.js","../multiple-choice/multiple-choice.js","./lib/game-show-quiz-modal.js"],function(_exports,_require,_polymerElement,_mutableData,_renderStatus,_polymerDom,_HAXWiring,_paperButton,_simpleToast,_ironAjax,_simpleColors,_vaadinSplitLayout,_multipleChoice,_gameShowQuizModal){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.GameShowQuiz=void 0;_require=babelHelpers.interopRequireWildcard(_require);function _templateObject_ce6ec0a066fb11e984d945fe2fe0aa60(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors\">\n        :host {\n          display: block;\n          --game-show-bg-color: var(--simple-colors-default-theme-blue-11);\n          --game-show-text-color: var(--simple-colors-default-theme-blue-1);\n        }\n        app-toolbar {\n          background-color: var(--game-show-bg-color);\n          color: var(--game-show-text-color);\n          font-size: 24px;\n          display: flex;\n        }\n        iron-icon {\n          display: inline-block;\n        }\n        table {\n          width: 90%;\n        }\n        tr {\n          outline: 1px solid black;\n        }\n        td {\n          border-left: 1px solid black;\n          padding: 16px;\n          text-align: center;\n        }\n\n        paper-button {\n          --paper-button-ink-color: var(--game-show-bg-color);\n          text-transform: none;\n          display: block;\n        }\n        #helpbutton {\n          text-align: center;\n          padding: 8px;\n          font-size: 12px;\n          vertical-align: middle;\n          display: inline-flex;\n        }\n        paper-button + [main-title] {\n          margin-left: 24px;\n          display: inline-flex;\n        }\n        app-header {\n          color: var(--game-show-text-color);\n          --app-header-background-rear-layer: {\n            background-color: #ef6c00;\n          }\n        }\n        responsive-grid-row {\n          --responsive-grid-row-inner: {\n            margin-left: 0;\n            margin-right: 0;\n          }\n        }\n        responsive-grid-col {\n          --responsive-grid-col-inner: {\n            padding-left: 0;\n            padding-right: 0;\n          }\n        }\n        #contentcontainer {\n          margin: 0 auto;\n          font-size: 16px;\n        }\n        .grid-button {\n          width: 100%;\n          height: 80px;\n          font-size: 24px;\n          text-align: center;\n          min-width: unset;\n          padding: 0;\n          margin: 0;\n          align-items: center;\n          display: flex;\n        }\n        .status-icon {\n          border-radius: 50%;\n          width: 48px;\n          height: 48px;\n          opacity: 0.5;\n          right: 0;\n          bottom: 0;\n          position: absolute;\n        }\n        .correct {\n          color: var(--simple-colors-default-theme-green-6);\n          background-color: var(--simple-colors-default-theme-green-11);\n        }\n        .incorrect {\n          color: var(--simple-colors-default-theme-red-6);\n          background-color: var(--simple-colors-default-theme-red-11);\n        }\n        .row-0 paper-button[disabled] {\n          font-weight: bold;\n          font-size: 16px;\n        }\n        @media screen and (max-width: 600px) {\n          app-toolbar {\n            font-size: 14px;\n          }\n          paper-button {\n            padding: 0;\n            margin: 0;\n            width: 16px;\n            height: 16px;\n            min-width: unset;\n          }\n          game-show-quiz-modal paper-button {\n            height: 48px;\n            width: 100%;\n          }\n          .grid-button {\n            font-size: 14px;\n          }\n          .status-icon {\n            width: 24px;\n            height: 24px;\n            opacity: 1;\n            display: inline-block;\n          }\n          .row-0 paper-button[disabled] {\n            font-weight: bold;\n            font-size: 10px;\n          }\n        }\n      </style>\n      <app-header>\n        <app-toolbar>\n          <paper-button id=\"helpbutton\" on-tap=\"directionsToggle\">\n            <iron-icon icon=\"help\"></iron-icon\n            ><label for=\"helpbutton\">Directions</label>\n          </paper-button>\n          <div main-title>[[title]]</div>\n        </app-toolbar>\n      </app-header>\n      <div id=\"contentcontainer\">\n        <template is=\"dom-repeat\" items=\"[[gameBoard]]\" as=\"row\" mutable-data>\n          <responsive-grid-row gutter=\"0\" class$=\"row row-[[index]]\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[row.cols]]\"\n              as=\"col\"\n              mutable-data\n            >\n              <responsive-grid-col xl=\"2\" lg=\"2\" md=\"2\" sm=\"2\" xs=\"2\">\n                <paper-button\n                  class=\"grid-button\"\n                  raised=\"[[!col.notRaised]]\"\n                  data-question-uuid$=\"[[col.uuid]]\"\n                  data-value$=\"[[col.points]]\"\n                  data-type$=\"[[col.type]]\"\n                  disabled$=\"[[col.disabled]]\"\n                  >[[col.title]]<br />[[col.points]]</paper-button\n                >\n              </responsive-grid-col>\n            </template>\n          </responsive-grid-row>\n        </template>\n        <div>\n          <h3>Scoreboard</h3>\n          <table>\n            <tbody>\n              <tr>\n                <th></th>\n                <th>Slide ID</th>\n                <th>Terms</th>\n                <th>Reading</th>\n                <th>Lecture</th>\n                <th>Bonus</th>\n                <th>Total</th>\n              </tr>\n              <tr>\n                <th>Points Attempted</th>\n                <td>[[points.slideid.attempted]]</td>\n                <td>[[points.terminology.attempted]]</td>\n                <td>[[points.reading.attempted]]</td>\n                <td>[[points.lecture.attempted]]</td>\n                <td>[[points.bonus.attempted]]</td>\n                <td>[[points.total.attempted]]</td>\n              </tr>\n              <tr>\n                <th>Points Earned</th>\n                <td>[[points.slideid.earned]]</td>\n                <td>[[points.terminology.earned]]</td>\n                <td>[[points.reading.earned]]</td>\n                <td>[[points.lecture.earned]]</td>\n                <td>[[points.bonus.earned]]</td>\n                <td>[[points.total.earned]]</td>\n              </tr>\n              <tr>\n                <th>Category Percentage</th>\n                <td>[[points.slideid.percent]]</td>\n                <td>[[points.terminology.percent]]</td>\n                <td>[[points.reading.percent]]</td>\n                <td>[[points.lecture.percent]]</td>\n                <td>[[points.bonus.percent]]</td>\n                <td>[[points.total.percent]]</td>\n              </tr>\n            </tbody>\n          </table>\n          <div>Points Remaining to Attempt: [[remainingAttempts]]</div>\n        </div>\n      </div>\n      <game-show-quiz-modal id=\"directions\" title=\"[[directionsTitle]]\">\n        <div slot=\"content\"><slot name=\"directions\"></slot></div>\n        <paper-button\n          aria-label=\"Close directions dialog and return to game\"\n          slot=\"buttons\"\n          id=\"dismiss\"\n          dialog-confirm\n          raised\n          >Good luck!</paper-button\n        >\n      </game-show-quiz-modal>\n      <game-show-quiz-modal id=\"dialog\" title=\"[[questionTitle]]\">\n        <vaadin-split-layout slot=\"content\" style=\"height:80vh;\">\n          <iron-image\n            style=\"min-width:100px; width:100%; min-height:50vh; height:75vh; background-color: lightgray;\"\n            sizing=\"contain\"\n            preload=\"\"\n            src$=\"[[activeQuestion.image]]\"\n          ></iron-image>\n          <multiple-choice\n            randomize\n            single-option\n            id=\"question\"\n            hide-buttons\n            title=\"[[activeQuestion.title]]\"\n            answers=\"[[activeQuestion.data]]\"\n          ></multiple-choice>\n        </vaadin-split-layout>\n        <paper-button\n          slot=\"buttons\"\n          hidden$=\"[[activeQuestion.submitted]]\"\n          id=\"submit\"\n          raised=\"\"\n          disabled$=\"[[__submitDisabled]]\"\n          >Submit answer\n          <iron-icon\n            hidden$=\"[[__submitDisabled]]\"\n            icon=\"icons:touch-app\"\n          ></iron-icon\n        ></paper-button>\n        <paper-button\n          slot=\"buttons\"\n          id=\"continue\"\n          hidden$=\"[[!activeQuestion.submitted]]\"\n          dialog-confirm\n          raised\n          aria-disabled$=\"[[activeQuestion.submitted]]\"\n          aria-label=\"Return to game board\"\n          >Continue <iron-icon icon=\"icons:arrow-forward\"></iron-icon\n        ></paper-button>\n      </game-show-quiz-modal>\n      <iron-ajax\n        auto\n        id=\"gamedata\"\n        url=\"[[gameData]]\"\n        handle-as=\"json\"\n        last-response=\"{{gameBoardData}}\"\n      ></iron-ajax>\n    "],["\n      <style include=\"simple-colors\">\n        :host {\n          display: block;\n          --game-show-bg-color: var(--simple-colors-default-theme-blue-11);\n          --game-show-text-color: var(--simple-colors-default-theme-blue-1);\n        }\n        app-toolbar {\n          background-color: var(--game-show-bg-color);\n          color: var(--game-show-text-color);\n          font-size: 24px;\n          display: flex;\n        }\n        iron-icon {\n          display: inline-block;\n        }\n        table {\n          width: 90%;\n        }\n        tr {\n          outline: 1px solid black;\n        }\n        td {\n          border-left: 1px solid black;\n          padding: 16px;\n          text-align: center;\n        }\n\n        paper-button {\n          --paper-button-ink-color: var(--game-show-bg-color);\n          text-transform: none;\n          display: block;\n        }\n        #helpbutton {\n          text-align: center;\n          padding: 8px;\n          font-size: 12px;\n          vertical-align: middle;\n          display: inline-flex;\n        }\n        paper-button + [main-title] {\n          margin-left: 24px;\n          display: inline-flex;\n        }\n        app-header {\n          color: var(--game-show-text-color);\n          --app-header-background-rear-layer: {\n            background-color: #ef6c00;\n          }\n        }\n        responsive-grid-row {\n          --responsive-grid-row-inner: {\n            margin-left: 0;\n            margin-right: 0;\n          }\n        }\n        responsive-grid-col {\n          --responsive-grid-col-inner: {\n            padding-left: 0;\n            padding-right: 0;\n          }\n        }\n        #contentcontainer {\n          margin: 0 auto;\n          font-size: 16px;\n        }\n        .grid-button {\n          width: 100%;\n          height: 80px;\n          font-size: 24px;\n          text-align: center;\n          min-width: unset;\n          padding: 0;\n          margin: 0;\n          align-items: center;\n          display: flex;\n        }\n        .status-icon {\n          border-radius: 50%;\n          width: 48px;\n          height: 48px;\n          opacity: 0.5;\n          right: 0;\n          bottom: 0;\n          position: absolute;\n        }\n        .correct {\n          color: var(--simple-colors-default-theme-green-6);\n          background-color: var(--simple-colors-default-theme-green-11);\n        }\n        .incorrect {\n          color: var(--simple-colors-default-theme-red-6);\n          background-color: var(--simple-colors-default-theme-red-11);\n        }\n        .row-0 paper-button[disabled] {\n          font-weight: bold;\n          font-size: 16px;\n        }\n        @media screen and (max-width: 600px) {\n          app-toolbar {\n            font-size: 14px;\n          }\n          paper-button {\n            padding: 0;\n            margin: 0;\n            width: 16px;\n            height: 16px;\n            min-width: unset;\n          }\n          game-show-quiz-modal paper-button {\n            height: 48px;\n            width: 100%;\n          }\n          .grid-button {\n            font-size: 14px;\n          }\n          .status-icon {\n            width: 24px;\n            height: 24px;\n            opacity: 1;\n            display: inline-block;\n          }\n          .row-0 paper-button[disabled] {\n            font-weight: bold;\n            font-size: 10px;\n          }\n        }\n      </style>\n      <app-header>\n        <app-toolbar>\n          <paper-button id=\"helpbutton\" on-tap=\"directionsToggle\">\n            <iron-icon icon=\"help\"></iron-icon\n            ><label for=\"helpbutton\">Directions</label>\n          </paper-button>\n          <div main-title>[[title]]</div>\n        </app-toolbar>\n      </app-header>\n      <div id=\"contentcontainer\">\n        <template is=\"dom-repeat\" items=\"[[gameBoard]]\" as=\"row\" mutable-data>\n          <responsive-grid-row gutter=\"0\" class\\$=\"row row-[[index]]\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[row.cols]]\"\n              as=\"col\"\n              mutable-data\n            >\n              <responsive-grid-col xl=\"2\" lg=\"2\" md=\"2\" sm=\"2\" xs=\"2\">\n                <paper-button\n                  class=\"grid-button\"\n                  raised=\"[[!col.notRaised]]\"\n                  data-question-uuid\\$=\"[[col.uuid]]\"\n                  data-value\\$=\"[[col.points]]\"\n                  data-type\\$=\"[[col.type]]\"\n                  disabled\\$=\"[[col.disabled]]\"\n                  >[[col.title]]<br />[[col.points]]</paper-button\n                >\n              </responsive-grid-col>\n            </template>\n          </responsive-grid-row>\n        </template>\n        <div>\n          <h3>Scoreboard</h3>\n          <table>\n            <tbody>\n              <tr>\n                <th></th>\n                <th>Slide ID</th>\n                <th>Terms</th>\n                <th>Reading</th>\n                <th>Lecture</th>\n                <th>Bonus</th>\n                <th>Total</th>\n              </tr>\n              <tr>\n                <th>Points Attempted</th>\n                <td>[[points.slideid.attempted]]</td>\n                <td>[[points.terminology.attempted]]</td>\n                <td>[[points.reading.attempted]]</td>\n                <td>[[points.lecture.attempted]]</td>\n                <td>[[points.bonus.attempted]]</td>\n                <td>[[points.total.attempted]]</td>\n              </tr>\n              <tr>\n                <th>Points Earned</th>\n                <td>[[points.slideid.earned]]</td>\n                <td>[[points.terminology.earned]]</td>\n                <td>[[points.reading.earned]]</td>\n                <td>[[points.lecture.earned]]</td>\n                <td>[[points.bonus.earned]]</td>\n                <td>[[points.total.earned]]</td>\n              </tr>\n              <tr>\n                <th>Category Percentage</th>\n                <td>[[points.slideid.percent]]</td>\n                <td>[[points.terminology.percent]]</td>\n                <td>[[points.reading.percent]]</td>\n                <td>[[points.lecture.percent]]</td>\n                <td>[[points.bonus.percent]]</td>\n                <td>[[points.total.percent]]</td>\n              </tr>\n            </tbody>\n          </table>\n          <div>Points Remaining to Attempt: [[remainingAttempts]]</div>\n        </div>\n      </div>\n      <game-show-quiz-modal id=\"directions\" title=\"[[directionsTitle]]\">\n        <div slot=\"content\"><slot name=\"directions\"></slot></div>\n        <paper-button\n          aria-label=\"Close directions dialog and return to game\"\n          slot=\"buttons\"\n          id=\"dismiss\"\n          dialog-confirm\n          raised\n          >Good luck!</paper-button\n        >\n      </game-show-quiz-modal>\n      <game-show-quiz-modal id=\"dialog\" title=\"[[questionTitle]]\">\n        <vaadin-split-layout slot=\"content\" style=\"height:80vh;\">\n          <iron-image\n            style=\"min-width:100px; width:100%; min-height:50vh; height:75vh; background-color: lightgray;\"\n            sizing=\"contain\"\n            preload=\"\"\n            src\\$=\"[[activeQuestion.image]]\"\n          ></iron-image>\n          <multiple-choice\n            randomize\n            single-option\n            id=\"question\"\n            hide-buttons\n            title=\"[[activeQuestion.title]]\"\n            answers=\"[[activeQuestion.data]]\"\n          ></multiple-choice>\n        </vaadin-split-layout>\n        <paper-button\n          slot=\"buttons\"\n          hidden\\$=\"[[activeQuestion.submitted]]\"\n          id=\"submit\"\n          raised=\"\"\n          disabled\\$=\"[[__submitDisabled]]\"\n          >Submit answer\n          <iron-icon\n            hidden$=\"[[__submitDisabled]]\"\n            icon=\"icons:touch-app\"\n          ></iron-icon\n        ></paper-button>\n        <paper-button\n          slot=\"buttons\"\n          id=\"continue\"\n          hidden\\$=\"[[!activeQuestion.submitted]]\"\n          dialog-confirm\n          raised\n          aria-disabled\\$=\"[[activeQuestion.submitted]]\"\n          aria-label=\"Return to game board\"\n          >Continue <iron-icon icon=\"icons:arrow-forward\"></iron-icon\n        ></paper-button>\n      </game-show-quiz-modal>\n      <iron-ajax\n        auto\n        id=\"gamedata\"\n        url=\"[[gameData]]\"\n        handle-as=\"json\"\n        last-response=\"{{gameBoardData}}\"\n      ></iron-ajax>\n    "]);_templateObject_ce6ec0a066fb11e984d945fe2fe0aa60=function _templateObject_ce6ec0a066fb11e984d945fe2fe0aa60(){return data};return data}/**
 * `game-show-quiz`
 * `Simple game show with questions and answers`
 * @demo demo/index.html
 * @microcopy - the mental model for this element
 * - game show - a display board in the style of Jeopardy
 */var GameShowQuiz=/*#__PURE__*/function(_MutableData){babelHelpers.inherits(GameShowQuiz,_MutableData);babelHelpers.createClass(GameShowQuiz,null,[{key:"tag",get:function get(){return"game-show-quiz"}}]);function GameShowQuiz(){var _this;babelHelpers.classCallCheck(this,GameShowQuiz);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(GameShowQuiz).call(this));new Promise(function(res,rej){return _require.default(["../../@polymer/iron-image/iron-image.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../responsive-grid/lib/responsive-grid-row.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../responsive-grid/lib/responsive-grid-col.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../@polymer/app-layout/app-drawer/app-drawer.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../@polymer/app-layout/app-header/app-header.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../@polymer/app-layout/app-toolbar/app-toolbar.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../@polymer/iron-flex-layout/iron-flex-layout.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../@polymer/iron-icon/iron-icon.js"],res,rej)});new Promise(function(res,rej){return _require.default(["../../@polymer/iron-icons/iron-icons.js"],res,rej)});return _this}babelHelpers.createClass(GameShowQuiz,[{key:"directionsToggle",/**
   * Toggle the directions to appear
   */value:function directionsToggle(e){this.$.directions.toggle()}/**
   * Continue button pressed.
   */},{key:"continueGameTap",value:function continueGameTap(e){// destroy this so it rebuilds every time for correct target element
// while focusing on the next item just to place keyboard focus more
// logically
if(babelHelpers.typeof(this.__activeTap)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&null!=(0,_polymerDom.dom)(this.__activeTap).parentNode.nextElementSibling.firstElementChild){(0,_polymerDom.dom)(this.__activeTap).parentNode.nextElementSibling.firstElementChild.focus();delete this.__activeTap}}/**
   * Register a tap on the board.
   */},{key:"registerTap",value:function registerTap(e){var found=!0;for(var i in this.$.question.answers){if(this.$.question.answers[i].userGuess){found=!1}}// ensure they touch the board before ability to submit
this.__submitDisabled=found}/**
   * Submit answer to see what they got.
   */},{key:"submitAnswer",value:function submitAnswer(e){// flip submitted status
this.set("activeQuestion.submitted",!0);this.notifyPath("activeQuestion.submitted");this.$.continue.focus();// maker this disabled on the board
this.__activeTap.disabled=!0;// start to build a status icon
var icon=document.createElement("iron-icon");icon.classList.add("status-icon");// update attempts for the category
var num=parseInt(this.points[this.__activeType].attempted)+parseInt(this.__activeValue);this.set("points."+this.__activeType+".attempted",num);this.notifyPath("points."+this.__activeType+".attempted");// update the global totals for attempt
var total=parseInt(this.points.total.attempted)+parseInt(this.__activeValue);this.set("points.total.attempted",total);this.notifyPath("points.total.attempted");// update remaining attempts
this.remainingAttempts=this.remainingAttempts-parseInt(this.__activeValue);// if current answer is correct
if(this.$.question.checkAnswers()){// show correct
var evt=new CustomEvent("simple-toast-show",{bubbles:!0,cancelable:!0,detail:{text:"Correct!",duration:4e3}});this.dispatchEvent(evt);// @todo need an area for placing feedback
// update the earned column
var _num=parseInt(this.points[this.__activeType].earned)+parseInt(this.__activeValue);this.set("points."+this.__activeType+".earned",_num);this.notifyPath("points."+this.__activeType+".earned");// set icon to correct
icon.icon="icons:check-circle";icon.classList.add("correct");// update total column
var _total=parseInt(this.points.total.earned)+parseInt(this.__activeValue);this.set("points.total.earned",_total);this.notifyPath("points.total.earned")}else{// show wrong
var _evt=new CustomEvent("simple-toast-show",{bubbles:!0,cancelable:!0,detail:{text:":( You got it wrong",duration:4e3}});this.dispatchEvent(_evt);// @todo show feedback for wrong answer as to why
// set icon to incorrect
icon.icon="icons:cancel";icon.classList.add("incorrect")}// update the percent for this column
var percent=(100*(parseInt(this.points[this.__activeType].earned)/parseInt(this.points[this.__activeType].attempted))).toFixed(1);this.set("points."+this.__activeType+".percent",percent);this.notifyPath("points."+this.__activeType+".percent");// update the percent
total=(100*(parseInt(this.points.total.earned)/parseInt(this.points.total.attempted))).toFixed(1);this.set("points.total.percent",total);this.notifyPath("points.total.percent");// append child via polymer so we can style it correctly in shadow dom
(0,_polymerDom.dom)(this.__activeTap).appendChild(icon)}/**
   * Notice that something was tapped, resolve what it was.
   */},{key:"_gameBoardTap",value:function _gameBoardTap(e){var _this2=this,normalizedEvent=(0,_polymerDom.dom)(e),local=normalizedEvent.localTarget;if(null!=local.getAttribute("data-question-uuid")){this.__submitDisabled=!0;this.__activeTap=local;this.__activeType=local.getAttribute("data-type");this.__activeValue=local.getAttribute("data-value");var uuid=local.getAttribute("data-question-uuid");this.set("activeQuestion",{});this.set("activeQuestion",this._gameBoardFlat[uuid].question);this.notifyPath("activeQuestion.*");this.notifyPath("activeQuestion.data.*");this.$.question.resetAnswers();setTimeout(function(){_this2.$.dialog.toggle()},100)}}/**
   * Notice the game board has changed from the backend loading it most likely.
   */},{key:"_gameBoardDataChanged",value:function _gameBoardDataChanged(newValue,oldvalue){var _this3=this;if(newValue){this._gameBoardFlat={};// @todo this needs to come in via settings some how
var gameBoard=[{cols:[{title:"Slide id",points:"",notRaised:!0,disabled:!0},{title:"Terms",points:"",notRaised:!0,disabled:!0},{title:"Reading",points:"",notRaised:!0,disabled:!0},{title:"Lecture",points:"",notRaised:!0,disabled:!0}]}],row={},gameData=newValue,keys=Object.keys(gameData),count=0,pointMap={1:4,2:2,3:1,bonus:1};// row prototype
// 4 iterations for 1 points
for(var pointLevel in pointMap){count=0;while(count<pointMap[pointLevel]){count++;// tee up the key used array so we can track random questions used in banks
var keysUsed=[];for(var type in keys){keysUsed[keys[type]]=[]}// reset the row
row={cols:[]};// loop over the keys coming in so we can build each row across
for(var type in keys){if(gameData[keys[type]][pointLevel]){// get a random key based on what hasn't been used here previously
var qKey=Math.floor(Math.random()*gameData[keys[type]][pointLevel].questions.length);while(babelHelpers.typeof(keysUsed[keys[type]][qKey])!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){qKey=Math.floor(Math.random()*gameData[keys[type]][pointLevel].questions.length)}keysUsed[keys[type]][qKey]=qKey;var questionObject={uuid:this.generateUUID(),type:gameData[keys[type]][pointLevel].type,title:gameData[keys[type]][pointLevel].title,points:gameData[keys[type]][pointLevel].points,question:gameData[keys[type]][pointLevel].questions[qKey]};row.cols.push(questionObject);this._gameBoardFlat[questionObject.uuid]=questionObject}}gameBoard.push(row)}}// this delay helps with updating the board after the fact
this.set("gameBoard",[]);setTimeout(function(){_this3.set("gameBoard",gameBoard);_this3.notifyPath("gameBoard.*")},100)}}},{key:"generateUUID",value:function generateUUID(){return"item-sss-ss-ss".replace(/s/g,this._uuidPart)}},{key:"_uuidPart",value:function _uuidPart(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}/**
   * Reset focus on close back to the help button
   */},{key:"resetFocus",value:function resetFocus(e){this.$.helpbutton.focus()}/**
   * HAX bindings
   */},{key:"connectedCallback",/**
   * Attached to the DOM, now fire.
   */value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(GameShowQuiz.prototype),"connectedCallback",this).call(this);window.SimpleToast.requestAvailability();(0,_renderStatus.afterNextRender)(this,function(){this.HAXWiring=new _HAXWiring.HAXWiring;this.HAXWiring.setup(GameShowQuiz.haxProperties,GameShowQuiz.tag,this);this.$.dismiss.addEventListener("tap",this.resetFocus.bind(this));this.$.contentcontainer.addEventListener("tap",this._gameBoardTap.bind(this));this.$.submit.addEventListener("tap",this.submitAnswer.bind(this));this.$.continue.addEventListener("tap",this.continueGameTap.bind(this));this.$.question.addEventListener("click",this.registerTap.bind(this))})}/**
   * detached life cycke
   */},{key:"disconnectedCallback",value:function disconnectedCallback(){this.$.dismiss.removeEventListener("tap",this.resetFocus.bind(this));this.$.contentcontainer.removeEventListener("tap",this._gameBoardTap.bind(this));this.$.submit.removeEventListener("tap",this.submitAnswer.bind(this));this.$.continue.removeEventListener("tap",this.continueGameTap.bind(this));this.$.question.removeEventListener("click",this.registerTap.bind(this));babelHelpers.get(babelHelpers.getPrototypeOf(GameShowQuiz.prototype),"disconnectedCallback",this).call(this)}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_ce6ec0a066fb11e984d945fe2fe0aa60())}},{key:"properties",get:function get(){return{/**
       * Title
       */title:{type:String},/**
       * Points object
       */points:{type:Object,value:{slideid:{attempted:0,earned:0,percent:0},terminology:{attempted:0,earned:0,percent:0},reading:{attempted:0,earned:0,percent:0},lecture:{attempted:0,earned:0,percent:0},bonus:{attempted:0,earned:0,percent:0},total:{attempted:0,earned:0,percent:0}}},/**
       * Remaining attempts for the user
       */remainingAttempts:{type:Number,value:30},/**
       * Title to use on the directions dialog.
       */directionsTitle:{type:String,value:"Directions"},/**
       * Title to use on the question dialog.
       */questionTitle:{type:String,value:"Answer the following question"},/**
       * Rows on the gameshow board
       */gameBoard:{type:Array},gameBoardData:{type:Object,observer:"_gameBoardDataChanged"},/**
       * URL to load data for the game.
       */gameData:{type:String},/**
       * Active item that is in the modal.
       */activeQuestion:{type:Object}}}},{key:"haxProperties",get:function get(){return{canScale:!0,canPosition:!0,canEditSource:!1,gizmo:{title:"Game show",description:"Tweak the game show options",icon:"av:play-circle-filled",color:"grey",groups:["Video","Media"],handles:[{type:"video",url:"source"}],meta:{author:"Your organization on github"}},settings:{quick:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield",icon:"editor:title"}],configure:[{property:"title",title:"Title",description:"The title of the element",inputMethod:"textfield",icon:"editor:title"}],advanced:[]}}}}]);return GameShowQuiz}((0,_mutableData.MutableData)(_polymerElement.PolymerElement));_exports.GameShowQuiz=GameShowQuiz;window.customElements.define(GameShowQuiz.tag,GameShowQuiz)});