define(["exports", "../utils/utils.js"], function (_exports, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SchemaBehaviors = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SchemaBehaviors = function SchemaBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      /**
       * HTMLElement
       */
      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.schemaResourceID = "";
        _this.schemaMap = {
          prefix: {
            oer: "http://oerschema.org/",
            schema: "http://schema.org/",
            dc: "http://purl.org/dc/terms/",
            foaf: "http://xmlns.com/foaf/0.1/",
            cc: "http://creativecommons.org/ns#",
            bib: "http://bib.schema.org"
          }
        };
        return _this;
      }
      /**
       * Popular convention across libraries
       */


      babelHelpers.createClass(_class, [{
        key: "updated",
        value:
        /**
         * LitElement support
         */
        function updated(changedProperties) {
          var _this2 = this;

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          }

          changedProperties.forEach(function (oldValue, propName) {
            if (propName == "schemaMap") {
              _this2._schemaMapChanged(_this2[propName], oldValue);
            }
          });
        }
        /**
         * Notice the schema map has changed, reprocess attributes.
         */

      }, {
        key: "_schemaMapChanged",
        value: function _schemaMapChanged(newValue, oldValue) {
          if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            // use this to tie into schemaResourceID build
            this.schemaResourceID = this.getAttribute("resource"); // if it still doesn't have one then we have to check

            if (this.schemaResourceID == "" || this.schemaResourceID == null || this.schemaResourceID == "null") {
              this.schemaResourceID = (0, _utils.generateResourceID)();
              this.setAttribute("resource", this.schemaResourceID);
            }

            var prefixes = newValue.prefix;
            var prefix = ""; // build prefix string

            for (var property in prefixes) {
              if (prefixes.hasOwnProperty(property)) {
                prefix += property + ":" + prefixes[property] + " ";
              }
            } // set prefix on the main element itself


            if (prefix != "") {
              this.setAttribute("prefix", prefix);
            }
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * Schema Map for the element, used to generate a valid prefix on the fly
             * Props set for Polymer compatibility
             */
            schemaMap: {
              type: Object,
              readOnly: true,
              observer: "_schemaMapChanged"
            }
          });
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.SchemaBehaviors = SchemaBehaviors;
});