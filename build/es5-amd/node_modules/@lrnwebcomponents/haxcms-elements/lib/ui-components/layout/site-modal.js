define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../simple-modal/lib/simple-modal-template.js", "../../../../../@polymer/paper-icon-button/paper-icon-button.js"], function (_exports, _require, _polymerElement, _polymerDom, _simpleModalTemplate, _paperIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteModal = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_31ca6560e48211e9b5c6f7b0a264592f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        paper-icon-button {\n          @apply --site-modal-icon;\n        }\n        paper-tooltip {\n          @apply --site-modal-tooltip;\n        }\n        simple-modal-template {\n          @apply --site-modal-modal;\n        }\n      </style>\n      <paper-icon-button\n        disabled$=\"[[disabled]]\"\n        id=\"btn\"\n        icon=\"[[icon]]\"\n        title=\"[[buttonLabel]]\"\n      ></paper-icon-button>\n      <paper-tooltip for=\"btn\" position=\"[[position]]\" offset=\"14\">\n        [[buttonLabel]]\n      </paper-tooltip>\n      <simple-modal-template id=\"smt\" title=\"[[title]]\">\n        <div id=\"content\" slot=\"content\"></div>\n      </simple-modal-template>\n    "]);

    _templateObject_31ca6560e48211e9b5c6f7b0a264592f = function _templateObject_31ca6560e48211e9b5c6f7b0a264592f() {
      return data;
    };

    return data;
  }

  /**
   * `site-modal`
   * `A basic site dialog`
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var SiteModal =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SiteModal, _PolymerElement);
    babelHelpers.createClass(SiteModal, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "site-modal";
      }
    }]);

    function SiteModal() {
      var _this;

      babelHelpers.classCallCheck(this, SiteModal);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SiteModal).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/paper-tooltip/paper-tooltip.js"], res, rej);
      });
      return _this;
    } // render function


    babelHelpers.createClass(SiteModal, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SiteModal.prototype), "connectedCallback", this).call(this);
        this.$.smt.associateEvents(this.$.btn);
        var nodes = (0, _polymerDom.dom)(this).getEffectiveChildNodes();

        for (var i in nodes) {
          this.$.content.appendChild(nodes[i]);
        }
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SiteModal.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_31ca6560e48211e9b5c6f7b0a264592f());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          disabled: {
            type: Boolean,
            reflectToAttribute: true
          },
          title: {
            type: String,
            value: "Dialog"
          },
          icon: {
            type: String,
            value: "icons:menu"
          },
          buttonLabel: {
            type: String,
            value: "Open dialog"
          },
          position: {
            type: String,
            value: "bottom"
          }
        };
      }
    }]);
    return SiteModal;
  }(_polymerElement.PolymerElement);

  _exports.SiteModal = SiteModal;
  window.customElements.define(SiteModal.tag, SiteModal);
});