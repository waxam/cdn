define(["exports", "meta", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../utils/utils.js", "../../../../../@polymer/polymer/lib/utils/async.js", "../../core/haxcms-site-store.js", "../../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../../mobx/lib/mobx.module.js"], function (_exports, meta, _require, _polymerElement, _utils, _async, _haxcmsSiteStore, _ironAjax, _mobxModule) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteRenderItem = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_9a8f5920c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      <iron-ajax\n        id=\"content\"\n        url=\"[[location]]\"\n        handle-as=\"text\"\n        loading=\"{{loading}}\"\n        debounce-duration=\"250\"\n        last-response=\"{{itemContent}}\"\n      ></iron-ajax>\n      <slot></slot>\n    "]);

    _templateObject_9a8f5920c96f11ea8be5e1d5fe7ec787 = function _templateObject_9a8f5920c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `site-render-item`
   * `Title of the active page in the site`
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var SiteRenderItem =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SiteRenderItem, _PolymerElement);

    function SiteRenderItem() {
      babelHelpers.classCallCheck(this, SiteRenderItem);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SiteRenderItem).apply(this, arguments));
    }

    babelHelpers.createClass(SiteRenderItem, [{
      key: "_computeLocation",
      value: function _computeLocation(itemId, render) {
        if (itemId && render) {
          var item = _haxcmsSiteStore.store.findItem(itemId); // ensure it loads fresh


          return item.slug + "?" + Math.floor(Date.now() / 1000);
        }
      }
    }, {
      key: "locationChanged",
      value: function locationChanged(newValue) {
        if (newValue) {
          this.shadowRoot.querySelector("#content").generateRequest();
        }
      } // simple path from a url modifier

    }, {
      key: "pathFromUrl",
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
      /**
       * React to content being loaded from a page.
       */

    }, {
      key: "_itemContentChanged",
      value: function _itemContentChanged(newValue, oldValue) {
        var _this = this;

        if (newValue) {
          var html = newValue; // only append if not empty

          if (html !== null) {
            html = (0, _utils.encapScript)(newValue);
            (0, _utils.wipeSlot)(this, "*"); // insert the content as quickly as possible, then work on the dynamic imports

            _async.microTask.run(function () {
              setTimeout(function () {
                var frag = document.createRange().createContextualFragment(html);

                _this.appendChild(frag);
              }, 5);
            }); // if there are, dynamically import them


            if (!window.WCAutoload && (0, _utils.varExists)(this.manifest, "metadata.node.dynamicElementLoader")) {
              var i;

              (function () {
                var tagsFound = (0, _utils.findTagsInHTML)(html);

                var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

                var _loop = function _loop() {
                  var tagName = tagsFound[i];

                  if (_this.manifest.metadata.node.dynamicElementLoader[tagName] && !window.customElements.get(tagName)) {
                    new Promise(function (res, rej) {
                      return _require.default(["".concat(basePath, "../../../../../").concat(_this.manifest.metadata.node.dynamicElementLoader[tagName])], res, rej);
                    }).then(function (response) {//console.log(tagName + ' dynamic import');
                    }).catch(function (error) {
                      /* Error handling */
                      console.log(error);
                    });
                  }
                };

                for (i in tagsFound) {
                  _loop();
                }
              })();
            }
          }
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteRenderItem.prototype), "connectedCallback", this).call(this);
        this.__disposer = [];
        (0, _mobxModule.autorun)(function (reaction) {
          _this2.manifest = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.manifest);

          _this2.__disposer.push(reaction);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i];
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteRenderItem.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "site-render-item";
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_9a8f5920c96f11ea8be5e1d5fe7ec787());
      }
      /**
       * Props
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          render: {
            type: Boolean,
            value: false
          },
          itemId: {
            type: String
          },
          location: {
            type: String,
            computed: "_computeLocation(itemId, render)",
            observer: "locationChanged"
          },

          /**
           * item content
           */
          itemContent: {
            type: String,
            notify: true,
            observer: "_itemContentChanged"
          }
        };
      }
    }]);
    return SiteRenderItem;
  }(_polymerElement.PolymerElement);

  _exports.SiteRenderItem = SiteRenderItem;
  window.customElements.define(SiteRenderItem.tag, SiteRenderItem);
});