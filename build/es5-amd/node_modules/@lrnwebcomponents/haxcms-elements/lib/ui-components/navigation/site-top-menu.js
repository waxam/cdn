define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js", "../query/site-query.js", "../../../../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _require, _polymerElement, _haxcmsSiteStore, _mobxModule, _siteQuery, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteTopMenu = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_74601d60d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --site-top-menu-bg: var(--haxcms-color, #ffffff);\n          --site-top-menu-indicator-arrow: 6px;\n          transition: 0.2s opacity linear;\n          opacity: 1;\n        }\n        :host([edit-mode]) {\n          opacity: 0.2;\n          pointer-events: none;\n        }\n        :host([sticky]) {\n          position: fixed;\n          top: 0;\n          left: 0;\n          right: 0;\n          z-index: 1000;\n          @apply --site-top-menu-sticky;\n        }\n        .wrapper {\n          display: flex;\n          justify-content: space-evenly;\n          background-color: var(--site-top-menu-bg);\n          @apply --site-top-menu-wrapper;\n        }\n        :host .wrapper ::slotted(div.spacing) {\n          display: inline-flex;\n          @apply --site-top-menu-spacing;\n        }\n        .spacing {\n          display: inline-flex;\n          @apply --site-top-menu-spacing;\n        }\n        .link {\n          color: var(--site-top-menu-link-color, #444444);\n          @apply --site-top-menu-link;\n        }\n        paper-button {\n          text-transform: unset;\n          min-width: unset;\n          @apply --site-top-menu-button;\n        }\n        .active {\n          color: var(--site-top-menu-link-active-color, #000000);\n          @apply --site-top-menu-link-active;\n        }\n        #indicator {\n          transition: 0.4s ease-in-out left;\n          transition-delay: 0.2s;\n          position: relative;\n          width: 0;\n          height: 0;\n          visibility: hidden;\n        }\n        :host([indicator=\"line\"]) #indicator {\n          border-bottom: 2px solid var(--site-top-menu-indicator-color, #000000);\n          @apply --site-top-menu-indicator;\n        }\n        :host([indicator=\"arrow\"]) #indicator {\n          border-left: var(--site-top-menu-indicator-arrow) solid transparent;\n          border-right: var(--site-top-menu-indicator-arrow) solid transparent;\n          border-bottom: var(--site-top-menu-indicator-arrow) solid\n            var(--site-top-menu-indicator-color, #000000);\n          @apply --site-top-menu-indicator;\n        }\n        #indicator.activated {\n          visibility: visible;\n          position: absolute;\n          @apply --site-top-menu-indicator-activated;\n        }\n        :host([notitle]) .spacing .link-title {\n          display: none;\n        }\n        .spacing .link-index {\n          display: none;\n        }\n        :host([showindex]) .spacing .link-index {\n          display: inline-flex;\n        }\n        .mobiletitle,\n        paper-icon-button {\n          display: none;\n        }\n        @media screen and (max-width: 640px) {\n          .wrapper .spacing {\n            display: none;\n          }\n          .wrapper .mobiletitle,\n          .wrapper paper-icon-button {\n            display: inline-block;\n          }\n          .wrapper {\n            display: block;\n          }\n        }\n\n        @media screen and (max-width: 640px) {\n          #indicator {\n            display: none !important;\n          }\n          .wrapper.responsive {\n            position: relative;\n          }\n          .wrapper.responsive .spacing {\n            float: none;\n            display: block;\n            text-align: left;\n          }\n        }\n      </style>\n      <site-query\n        result=\"{{__items}}\"\n        sort=\"[[sort]]\"\n        conditions=\"[[conditions]]\"\n      ></site-query>\n      <div id=\"wrapper\" class=\"wrapper\">\n        <paper-icon-button\n          icon=\"menu\"\n          id=\"menu\"\n          title=\"Open navigation\"\n        ></paper-icon-button>\n        <span class=\"mobiletitle\">[[mobileTitle]]</span>\n        <slot name=\"prefix\"></slot>\n        <dom-repeat items=\"[[__items]]\" mutable-data>\n          <template>\n            <div class=\"spacing\">\n              <a\n                data-id$=\"[[item.id]]\"\n                class=\"link\"\n                tabindex=\"-1\"\n                title$=\"Go to [[item.title]]\"\n                href$=\"[[item.slug]]\"\n              >\n                <paper-button id$=\"item-[[item.id]]\" noink=\"[[noink]]\">\n                  <span class=\"link-index\">[[humanIndex(index)]]</span>\n                  <span class=\"link-title\">[[item.title]]</span>\n                </paper-button>\n              </a>\n            </div>\n          </template>\n        </dom-repeat>\n        <slot name=\"suffix\"></slot>\n      </div>\n      <div id=\"indicator\"></div>\n    "]);

    _templateObject_74601d60d34d11ea880ba1e93364c49c = function _templateObject_74601d60d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `site-top-menu`
   * `Menu on top of the site typically a bar of options`
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var SiteTopMenu =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SiteTopMenu, _PolymerElement);
    babelHelpers.createClass(SiteTopMenu, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "site-top-menu";
      }
    }]);

    function SiteTopMenu() {
      var _this;

      babelHelpers.classCallCheck(this, SiteTopMenu);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SiteTopMenu).call(this));
      _this.__disposer = [];
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/paper-icon-button/paper-icon-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      return _this;
    } // render function


    babelHelpers.createClass(SiteTopMenu, [{
      key: "humanIndex",
      value: function humanIndex(index) {
        return index + 1;
      }
    }, {
      key: "toggleOpen",
      value: function toggleOpen() {
        var wrapper = this.shadowRoot.querySelector("#wrapper");

        if (wrapper.classList.contains("responsive")) {
          wrapper.classList.remove("responsive");
        } else {
          wrapper.classList.add("responsive");
        }
      }
      /**
       * When active ID changes, see if we know what to highlight automatically
       */

    }, {
      key: "_activeIdChanged",
      value: function _activeIdChanged(newValue) {
        var _this2 = this;

        // as long as didn't disable the indicator, do this processing
        if (this.indicator != "none") {
          if (newValue) {
            this.shadowRoot.querySelector("#indicator").classList.add("activated");
            var el = null; //ensure that this level is included

            if (this.shadowRoot.querySelector('[data-id="' + newValue + '"]')) {
              el = this.shadowRoot.querySelector('[data-id="' + newValue + '"]');
            } else {
              (function () {
                var tmpItem = _this2.manifest.items.find(function (i) {
                  return i.id == newValue;
                }); // fallback, maybe there's a child of this currently active


                while (el === null && tmpItem && tmpItem.parent != null) {
                  // take the parent object of this current item
                  tmpItem = _this2.manifest.items.find(function (i) {
                    return i.id == tmpItem.parent;
                  }); // see if IT lives in the dom, if not, keep going until we run out

                  if (tmpItem && _this2.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]')) {
                    el = _this2.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]');
                  }
                }
              })();
            }

            if (this._prevEl) {
              this._prevEl.classList.remove("active");
            }

            if (el) {
              el.classList.add("active");
              this._prevEl = el;

              if (this.indicator == "arrow") {
                this.shadowRoot.querySelector("#indicator").style.left = el.offsetLeft + el.offsetWidth / 2 - this.arrowSize + "px";
                this.shadowRoot.querySelector("#indicator").style.top = el.offsetTop + el.offsetHeight - this.arrowSize + "px";
              } else {
                this.shadowRoot.querySelector("#indicator").style.left = el.offsetLeft + "px";
                this.shadowRoot.querySelector("#indicator").style.top = el.offsetTop + el.offsetHeight + "px";
                this.shadowRoot.querySelector("#indicator").style.width = el.offsetWidth + "px";
              }
            }
          } else {
            // shouldn't be possible but might as well list
            this.shadowRoot.querySelector("#indicator").classList.remove("activated");
          }
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteTopMenu.prototype), "connectedCallback", this).call(this);
        this.shadowRoot.querySelector("#menu").addEventListener("click", this.toggleOpen.bind(this));
        (0, _mobxModule.autorun)(function (reaction) {
          _this3.manifest = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.manifest);

          _this3.__disposer.push(reaction);
        });
        (0, _mobxModule.autorun)(function (reaction) {
          _this3.editMode = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.editMode);

          _this3.__disposer.push(reaction);
        }); // minor timing thing to ensure store has picked active
        // needed if routes set on first paint or lifecycles miss

        setTimeout(function () {
          (0, _mobxModule.autorun)(function (reaction) {
            _this3.activeId = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.activeId);

            _this3.__disposer.push(reaction);
          });
        }, 50);
        window.addEventListener("resize", function () {
          _this3._activeIdChanged(_this3.activeId);
        }, true);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this4 = this;

        // clean up state
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        window.removeEventListener("resize", function () {
          _this4._activeIdChanged(_this4.activeId);
        }, true);
        babelHelpers.get(babelHelpers.getPrototypeOf(SiteTopMenu.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_74601d60d34d11ea880ba1e93364c49c());
      }
      /**
       * Props
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * manifest of everything, in case we need to check on children of parents
           */
          manifest: {
            type: Object
          },

          /**
           * acitvely selected item
           */
          activeId: {
            type: String,
            observer: "_activeIdChanged"
          },

          /**
           * visually stick to top of interface at all times
           */
          sticky: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * visualize the indicator as a a line, arrow, or not at all
           */
          indicator: {
            type: String,
            reflectToAttribute: true,
            value: "line"
          },

          /**
           * ink on the buttons
           */
          noink: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * hide title on the buttons
           */
          notitle: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * ink on the buttons
           */
          showindex: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * Stupid but faster then calculating on the fly for sure
           */
          arrowSize: {
            type: Number,
            value: 6
          },

          /**
           * Allow customization of sort
           */
          sort: {
            type: Object,
            value: {
              order: "ASC"
            }
          },

          /**
           * Allow customization of the conditions if needed
           */
          conditions: {
            type: Object,
            value: {
              parent: null
            }
          },
          mobileTitle: {
            type: String,
            value: "Navigation"
          },
          editMode: {
            type: Boolean,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return SiteTopMenu;
  }(_polymerElement.PolymerElement);

  _exports.SiteTopMenu = SiteTopMenu;
  window.customElements.define(SiteTopMenu.tag, SiteTopMenu);
});