define(["exports", "require", "../../../../../lit-element/lit-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/dist/mobx.esm.js", "../../core/utils/HAXCMSThemeParts.js", "../../../../simple-icon/lib/simple-icon-lite.js", "../../../../simple-icon/lib/simple-icons.js"], function (_exports, _require, _litElement, _haxcmsSiteStore, _mobxEsm, _HAXCMSThemeParts2, _simpleIconLite, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteMenuButton = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_cdf37c7054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <simple-tooltip\n              for=\"menulink\"\n              offset=\"8\"\n              .position=\"", "\"\n            >\n              ", "\n            </simple-tooltip>\n          "]);

    _templateObject3_cdf37c7054f111eba18757df1555c032 = function _templateObject3_cdf37c7054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _templateObject2_cdf37c7054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <a\n        tabindex=\"-1\"\n        ?disabled=\"", "\"\n        aria-label=\"", "\"\n        .part=\"", "\"\n      >\n        <button\n          id=\"menulink\"\n          noink\n          ?disabled=\"", "\"\n          ?raised=\"", "\"\n          aria-label=\"", "\"\n          .part=\"", "\"\n        >\n          <slot name=\"prefix\"></slot>\n          <simple-icon-lite icon=\"", "\"></simple-icon-lite>\n          <slot name=\"suffix\"></slot>\n        </button>\n      </a>\n      ", "\n    "]);

    _templateObject2_cdf37c7054f111eba18757df1555c032 = function _templateObject2_cdf37c7054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _templateObject_cdf37c7054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-size: 16px;\n        }\n        :host([disabled]) {\n          pointer-events: none;\n          opacity: 0.3;\n        }\n        a {\n          display: block;\n          height: 100%;\n          width: 100%;\n          color: var(--site-menu-button-link-color);\n          text-decoration: var(--site-menu-button-link-decoration, underline);\n        }\n        button {\n          display: flex;\n          transition: 0.2s color linear;\n          min-width: unset;\n          background-color: transparent;\n          border: 0;\n          border-radius: 0;\n          height: 100%;\n          width: 100%;\n        }\n        button:hover,\n        button:focus,\n        button:active {\n          color: var(--site-menu-button-button-hover-color, inherit);\n          outline: 2px solid var(--site-menu-button-button-hover-color, inherit);\n          outline-offset: 2px;\n          background-color: var(\n            --site-menu-button-button-hover-background-color,\n            inherit\n          );\n        }\n        button:hover simple-icon-lite,\n        button:focus simple-icon-lite,\n        button:active simple-icon-lite {\n          --simple-icon-fill-color: var(\n            --site-menu-button-button-hover-color,\n            black\n          );\n        }\n        simple-icon-lite {\n          display: block;\n          margin-top: 25px;\n          font-size: 16px;\n          --simple-icon-width: var(--site-menu-button-icon-width, 32px);\n          --simple-icon-height: var(--site-menu-button-icon-height, 32px);\n          --simple-icon-fill-color: var(\n            --site-menu-button-icon-fill-color,\n            black\n          );\n        }\n        simple-tooltip {\n          --simple-tooltip-background: var(\n            --haxcms-tooltip-background-color,\n            #000000\n          );\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: var(--haxcms-tooltip-color, #ffffff);\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-border-radius: 0;\n        }\n      "]);

    _templateObject_cdf37c7054f111eba18757df1555c032 = function _templateObject_cdf37c7054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `site-menu-button`
   * `Menu button based on the hierarchy`
   *
   * @demo demo/index.html
   */
  var SiteMenuButton = /*#__PURE__*/function (_HAXCMSThemeParts) {
    babelHelpers.inherits(SiteMenuButton, _HAXCMSThemeParts);

    var _super = _createSuper(SiteMenuButton);

    babelHelpers.createClass(SiteMenuButton, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SiteMenuButton), "styles", this)), [(0, _litElement.css)(_templateObject_cdf37c7054f111eba18757df1555c032())]);
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "site-menu-button";
      }
    }]);

    function SiteMenuButton() {
      var _this;

      babelHelpers.classCallCheck(this, SiteMenuButton);
      _this = _super.call(this);
      _this.hideLabel = false;
      _this.__disposer = _this.__disposer ? _this.__disposer : [];
      (0, _mobxEsm.autorun)(function (reaction) {
        _this.activeRouterManifestIndex = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeRouterManifestIndex);

        _this.__disposer.push(reaction);
      });
      (0, _mobxEsm.autorun)(function (reaction) {
        _this.routerManifest = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.routerManifest);

        _this.__disposer.push(reaction);
      });
      (0, _mobxEsm.autorun)(function (reaction) {
        _this.editMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.editMode);

        _this.__disposer.push(reaction);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    } // render function


    babelHelpers.createClass(SiteMenuButton, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_cdf37c7054f111eba18757df1555c032(), this.disabled, this.label, this.editMode ? "edit-mode-active" : "", this.disabled, this.raised, this.label, this.editMode ? "edit-mode-active" : "", this.icon, !this.hideLabel ? (0, _litElement.html)(_templateObject3_cdf37c7054f111eba18757df1555c032(), this.position, this.label) : "");
      }
      /**
       * Props
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SiteMenuButton.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SiteMenuButton.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "type") {
            _this2._typeChanged(_this2[propName], oldValue);
          }

          if (propName == "link") {
            _this2._linkChanged(_this2[propName]);
          }

          if (propName == "label") {
            _this2.dispatchEvent(new CustomEvent("".concat(propName, "-changed"), {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (["type", "activeRouterManifestIndex", "routerManifest"].includes(propName) && _this2.routerManifest) {
            _this2.link = _this2.pageLink(_this2.type, _this2.activeRouterManifestIndex, _this2.routerManifest.items);
            _this2.label = _this2.pageLinkLabel(_this2.type, _this2.activeRouterManifestIndex, _this2.routerManifest.items);
          }

          if (["type", "activeRouterManifestIndex", "routerManifest", "editMode", "link"].includes(propName) && _this2.routerManifest) {
            _this2.disabled = _this2.pageLinkStatus(_this2.type, _this2.activeRouterManifestIndex, _this2.routerManifest.items, _this2.editMode, _this2.link);
          }
        });
      }
    }, {
      key: "_linkChanged",
      value: function _linkChanged(newValue) {
        if (newValue == null) {
          this.shadowRoot.querySelector("a").removeAttribute("href");
        } else {
          this.shadowRoot.querySelector("a").setAttribute("href", newValue);
        }
      }
    }, {
      key: "_typeChanged",
      value: function _typeChanged(newValue) {
        if (newValue === "prev") {
          if (!this.icon) {
            this.icon = "icons:chevron-left";
          }

          if (!this.position) {
            this.position = "right";
          }
        } else if (newValue === "next") {
          if (!this.icon) {
            this.icon = "icons:chevron-right";
          }

          if (!this.position) {
            this.position = "left";
          }
        } // @todo add support for up and down as far as children and parent relationships
        else {
            this.icon = "";
            this.direction = "";
          }
      }
    }, {
      key: "pageLink",
      value: function pageLink(type, activeRouterManifestIndex, items) {
        if (type === "prev" && items) {
          if (activeRouterManifestIndex > 0 && items[activeRouterManifestIndex - 1]) {
            return items[activeRouterManifestIndex - 1].slug;
          }

          return null;
        } else if (type === "next" && items) {
          if (activeRouterManifestIndex < items.length - 1 && items[activeRouterManifestIndex + 1]) {
            return items[activeRouterManifestIndex + 1].slug;
          }

          return null;
        } // @todo add support for up and down as far as children and parent relationships
        else {
            return null;
          }
      }
      /**
       * true is disabled
       */

    }, {
      key: "pageLinkStatus",
      value: function pageLinkStatus(type, activeRouterManifestIndex, items, editMode, link) {
        if (editMode || link == null) {
          return true;
        }

        if (type === "prev") {
          if (activeRouterManifestIndex === 0 || activeRouterManifestIndex === -1) {
            return true;
          }
        } else if (type === "next" && items) {
          if (activeRouterManifestIndex >= items.length - 1) {
            return true;
          }
        }

        return false;
      }
    }, {
      key: "pageLinkLabel",
      value: function pageLinkLabel(type, activeRouterManifestIndex, items) {
        if (type === "prev" && items) {
          if (activeRouterManifestIndex === 0 || activeRouterManifestIndex === -1 || !items[activeRouterManifestIndex - 1]) {
            return "";
          } else {
            return items[activeRouterManifestIndex - 1].title;
          }
        } else if (type === "next" && items) {
          if (activeRouterManifestIndex >= items.length - 1 || !items[activeRouterManifestIndex + 1]) {
            return "";
          } else {
            return items[activeRouterManifestIndex + 1].title;
          }
        }
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteMenuButton.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SiteMenuButton), "properties", this)), {}, {
          type: {
            type: String,
            reflect: true
          },

          /**
           * acitvely selected item
           */
          activeRouterManifestIndex: {
            type: String
          },
          routerManifest: {
            type: Object
          },
          link: {
            type: String
          },
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },
          disabled: {
            type: Boolean,
            reflect: true,
            attribute: "disabled"
          },
          label: {
            type: String
          },
          hideLabel: {
            type: Boolean,
            attribute: "hide-label"
          },
          icon: {
            type: String
          },
          position: {
            type: String
          },
          raised: {
            type: Boolean
          }
        });
      }
    }]);
    return SiteMenuButton;
  }((0, _HAXCMSThemeParts2.HAXCMSThemeParts)(_litElement.LitElement));

  _exports.SiteMenuButton = SiteMenuButton;
  window.customElements.define(SiteMenuButton.tag, SiteMenuButton);
});