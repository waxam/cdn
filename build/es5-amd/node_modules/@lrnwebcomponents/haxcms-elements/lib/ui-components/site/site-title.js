define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js"], function (_exports, _require, _polymerElement, _haxcmsSiteStore, _mobxModule) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteTitle = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_123b4dc0e53311e9a0cfefb808989d41() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          text-rendering: optimizelegibility;\n          position: relative;\n        }\n        a {\n          @apply --site-title-link;\n        }\n        a:hover,\n        a:focus,\n        a:active {\n          @apply --site-title-link-hover;\n        }\n        a h1 {\n          text-rendering: optimizelegibility;\n          @apply --site-title-heading;\n        }\n        iron-icon {\n          @apply --site-title-icon;\n        }\n      </style>\n      <a\n        id=\"btn\"\n        href$=\"[[homeLink]]\"\n        title$=\"[[label]]\"\n        disabled$=\"[[disabled]]\"\n      >\n        <iron-icon hidden$=\"[[!icon]]\" icon=\"[[icon]]\"></iron-icon>\n        <h1 hidden$=\"[[notitle]]\">[[siteTitle]]</h1>\n      </a>\n    "]);

    _templateObject_123b4dc0e53311e9a0cfefb808989d41 = function _templateObject_123b4dc0e53311e9a0cfefb808989d41() {
      return data;
    };

    return data;
  }

  /**
   * `site-title`
   * `Title of the site`
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var SiteTitle =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SiteTitle, _PolymerElement);
    babelHelpers.createClass(SiteTitle, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "site-title";
      }
    }]);

    function SiteTitle() {
      var _this;

      babelHelpers.classCallCheck(this, SiteTitle);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SiteTitle).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      return _this;
    } // render function


    babelHelpers.createClass(SiteTitle, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteTitle.prototype), "connectedCallback", this).call(this);
        this.__disposer = [];
        (0, _mobxModule.autorun)(function (reaction) {
          _this2.siteTitle = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.siteTitle);

          _this2.__disposer.push(reaction);
        });
        (0, _mobxModule.autorun)(function (reaction) {
          _this2.homeLink = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.homeLink);

          _this2.__disposer.push(reaction);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SiteTitle.prototype), "disconnectedCallback", this).call(this);

        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_123b4dc0e53311e9a0cfefb808989d41());
      }
      /**
       * Props
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          disabled: {
            type: Boolean,
            reflectToAttribute: true
          },

          /**
           * Site title
           */
          siteTitle: {
            type: String
          },

          /**
           * HREF to the home page
           */
          homeLink: {
            type: String
          },

          /**
           * Label
           */
          label: {
            type: String,
            value: "Home"
          },

          /**
           * optional icon
           */
          icon: {
            type: String,
            value: false
          },

          /**
           * If the title should be displayed or not
           */
          notitle: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          }
        };
      }
    }]);
    return SiteTitle;
  }(_polymerElement.PolymerElement);

  _exports.SiteTitle = SiteTitle;
  window.customElements.define(SiteTitle.tag, SiteTitle);
});