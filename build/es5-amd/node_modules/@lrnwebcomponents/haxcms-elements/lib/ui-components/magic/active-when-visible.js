define(["exports", "../../../../../lit-element/lit-element.js", "../../core/haxcms-site-store.js"], function (_exports, _litElement, _haxcmsSiteStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ActiveWhenVisible = void 0;

  function _templateObject2_74445800d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        a {\n          height: 10px;\n          width: 10px;\n          float: left;\n          pointer-events: none;\n          background-color: transparent;\n        }\n      "]);

    _templateObject2_74445800d34d11ea880ba1e93364c49c = function _templateObject2_74445800d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_74445800d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div>\n        <a\n          id=\"a\"\n          .href=\"", "\"\n          .name=\"#", "\"\n          aria-hidden=\"true\"\n        ></a>\n        <slot></slot>\n      </div>\n    "]);

    _templateObject_74445800d34d11ea880ba1e93364c49c = function _templateObject_74445800d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `active-when-visible`
   * `Title of the site`
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var ActiveWhenVisible =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(ActiveWhenVisible, _LitElement);
    babelHelpers.createClass(ActiveWhenVisible, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_74445800d34d11ea880ba1e93364c49c(), this._a, this.itemId);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_74445800d34d11ea880ba1e93364c49c())];
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "active-when-visible";
      }
    }]);

    function ActiveWhenVisible() {
      var _this;

      babelHelpers.classCallCheck(this, ActiveWhenVisible);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ActiveWhenVisible).call(this));
      _this.thresholds = [0.0, 0.25, 0.5, 0.75, 1.0];
      _this.rootMargin = "0px";
      _this.visibleLimit = 0.5;
      _this.isVisible = false;
      return _this;
    }

    babelHelpers.createClass(ActiveWhenVisible, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "isVisible") {
            // fire an event that this is a core piece of the system
            _this2.dispatchEvent(new CustomEvent("is-visible-changed", {
              detail: _this2[propName]
            }));
          }
        });
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ActiveWhenVisible.prototype), "connectedCallback", this).call(this); // setup the intersection observer

        this.observer = new IntersectionObserver(this.handleIntersectionCallback.bind(this), {
          root: document.rootElement,
          rootMargin: this.rootMargin,
          threshold: this.thresholds
        });
        this.observer.observe(this);
      }
      /**
       * Handle this being visible
       */

    }, {
      key: "handleIntersectionCallback",
      value: function handleIntersectionCallback(entries) {
        var _this3 = this;

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var entry = _step.value;

            if (Number(entry.intersectionRatio).toFixed(2) >= this.visibleLimit) {
              // now we care
              if (this.itemId) {
                var item = _haxcmsSiteStore.store.findItem(this.itemId);

                this._a = item.slug;
                this.isVisible = true;
                setTimeout(function () {
                  _this3.shadowRoot.querySelector("#a").click();
                }, 25);
              }
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          itemId: {
            type: String,
            attribute: "item-id"
          },
          _a: {
            type: String
          },
          thresholds: {
            type: Array
          },
          rootMargin: {
            type: String,
            attribute: "root-margin"
          },
          visibleLimit: {
            type: Number,
            reflect: true,
            attribute: "visible-limit"
          },
          isVisible: {
            type: Boolean,
            attribute: "is-visible"
          }
        };
      }
    }]);
    return ActiveWhenVisible;
  }(_litElement.LitElement);

  _exports.ActiveWhenVisible = ActiveWhenVisible;
  window.customElements.define(ActiveWhenVisible.tag, ActiveWhenVisible);
});