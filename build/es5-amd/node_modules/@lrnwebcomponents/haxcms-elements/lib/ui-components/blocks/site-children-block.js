define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js", "../../../../../@polymer/polymer/lib/utils/render-status.js", "../query/site-query-menu-slice.js", "../../../../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _require, _polymerElement, _haxcmsSiteStore, _mobxModule, _renderStatus, _siteQueryMenuSlice, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteChildrenBlock = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_9ad73790c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --site-children-block-indent: 16px;\n          --site-children-block-link-active-bg: rgba(255, 255, 255, 0.1);\n          transition: 0.2s opacity linear;\n          opacity: 1;\n        }\n        :host([edit-mode]) {\n          opacity: 0.2;\n          pointer-events: none;\n        }\n        .wrapper {\n          @apply --site-children-block-wrapper;\n        }\n        .spacing {\n          @apply --site-children-block-spacing;\n        }\n        .link {\n          display: block;\n          color: var(--site-children-block-link-color, #444444);\n          @apply --site-children-block-link;\n        }\n        paper-button {\n          text-transform: unset;\n          min-width: unset;\n          width: 100%;\n          margin: 0;\n          border-radius: 0;\n          justify-content: flex-start;\n          @apply --site-children-block-button;\n        }\n        paper-button:hover,\n        paper-button:focus,\n        paper-button:active {\n          @apply --site-children-block-button-active;\n        }\n        .active {\n          color: var(--site-children-block-link-active-color, #000000);\n          background-color: var(--site-children-block-link-active-bg);\n          @apply --site-children-block-link-active;\n        }\n        .spacing .indent {\n          display: inline-flex;\n        }\n        .indent-1 {\n          margin-left: calc(var(--site-children-block-indent) * 1);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-2 {\n          margin-left: calc(var(--site-children-block-indent) * 2);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-3 {\n          margin-left: calc(var(--site-children-block-indent) * 3);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-4 {\n          margin-left: calc(var(--site-children-block-indent) * 4);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-5 {\n          margin-left: calc(var(--site-children-block-indent) * 5);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-6 {\n          margin-left: calc(var(--site-children-block-indent) * 6);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-7 {\n          margin-left: calc(var(--site-children-block-indent) * 7);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-8 {\n          margin-left: calc(var(--site-children-block-indent) * 8);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-9 {\n          margin-left: calc(var(--site-children-block-indent) * 9);\n          @apply --site-children-block-indent-1;\n        }\n        .indent-10 {\n          margin-left: calc(var(--site-children-block-indent) * 10);\n          @apply --site-children-block-indent-1;\n        }\n      </style>\n      <div class=\"wrapper\">\n        <site-query-menu-slice\n          result=\"{{__items}}\"\n          dynamic-methodology=\"[[dynamicMethodology]]\"\n          start=\"[[start]]\"\n          end=\"[[end]]\"\n          parent=\"[[parent]]\"\n          fixed-id=\"[[fixedId]]\"\n        ></site-query-menu-slice>\n        <dom-repeat items=\"[[__items]]\">\n          <template>\n            <div class=\"spacing\">\n              <a\n                data-id$=\"[[item.id]]\"\n                class=\"link\"\n                tabindex=\"-1\"\n                href$=\"[[item.slug]]\"\n              >\n                <paper-button noink=\"[[noink]]\">\n                  <div class$=\"indent indent-[[item.indent]]\"></div>\n                  [[item.title]]\n                </paper-button>\n              </a>\n            </div>\n          </template>\n        </dom-repeat>\n      </div>\n    "]);

    _templateObject_9ad73790c96f11ea8be5e1d5fe7ec787 = function _templateObject_9ad73790c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `site-children-block`
   * `Child pages of whatever is active`
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var SiteChildrenBlock =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SiteChildrenBlock, _PolymerElement);
    babelHelpers.createClass(SiteChildrenBlock, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "site-children-block";
      }
    }]);

    function SiteChildrenBlock() {
      var _this;

      babelHelpers.classCallCheck(this, SiteChildrenBlock);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SiteChildrenBlock).call(this));
      _this.__disposer = [];
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      return _this;
    } // render function


    babelHelpers.createClass(SiteChildrenBlock, [{
      key: "_activeIdChanged",

      /**
       * When active ID changes, see if we know what to highlight automatically
       */
      value: function _activeIdChanged(newValue) {
        var _this2 = this;

        if (newValue) {
          var el = null; //ensure that this level is included

          if (this.shadowRoot.querySelector('[data-id="' + newValue + '"]')) {
            el = this.shadowRoot.querySelector('[data-id="' + newValue + '"]');
          } else {
            (function () {
              var tmpItem = _this2.manifest.items.find(function (i) {
                return i.id == newValue;
              }); // fallback, maybe there's a child of this currently active


              while (el === null && tmpItem && tmpItem.parent != null) {
                // take the parent object of this current item
                tmpItem = _this2.manifest.items.find(function (i) {
                  return i.id == tmpItem.parent;
                }); // see if IT lives in the dom, if not, keep going until we run out

                if (tmpItem && _this2.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]')) {
                  el = _this2.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]');
                }
              }
            })();
          }

          if (this._prevEl) {
            this._prevEl.classList.remove("active");
          }

          if (el) {
            el.classList.add("active");
            this._prevEl = el;
          }
        } else {
          // shouldn't be possible but might as well list
          if (this._prevEl) {
            this._prevEl.classList.remove("active");
          }
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteChildrenBlock.prototype), "connectedCallback", this).call(this);
        (0, _mobxModule.autorun)(function (reaction) {
          _this3.editMode = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.editMode);

          _this3.__disposer.push(reaction);
        });
        (0, _mobxModule.autorun)(function (reaction) {
          _this3.manifest = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.manifest);

          _this3.__disposer.push(reaction);
        });
        (0, _renderStatus.afterNextRender)(this, function () {
          var _this4 = this;

          // minor timing thing to ensure store has picked active
          // needed if routes set on first paint or lifecycles miss
          setTimeout(function () {
            (0, _mobxModule.autorun)(function (reaction) {
              _this4.activeId = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.activeId);

              _this4.__disposer.push(reaction);
            });
          }, 250);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        // clean up state
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteChildrenBlock.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_9ad73790c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * How we should obtain the parent who's children we should show
           * options are direct, above, or root
           */
          dynamicMethodology: {
            type: String,
            value: "direct"
          },

          /**
           * starting level for the menu items
           */
          start: {
            type: Number,
            value: 1
          },

          /**
           * ending level for the menu items
           */
          end: {
            type: Number,
            value: 1000
          },

          /**
           * parent for the menu id
           */
          parent: {
            type: String
          },

          /**
           * Use this boolean to force this to fix to 1 parent
           * Otherwise it will dynamically update (default behavior)
           */
          fixedId: {
            type: Boolean,
            value: false
          },

          /**
           * to control ink on the buttons
           */
          noink: {
            type: Boolean,
            value: false
          },

          /**
           * just to bind data between things
           */
          __items: {
            type: Array,
            notify: true
          },

          /**
           * acitvely selected item
           */
          activeId: {
            type: String,
            observer: "_activeIdChanged"
          },
          editMode: {
            type: Boolean,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return SiteChildrenBlock;
  }(_polymerElement.PolymerElement);

  _exports.SiteChildrenBlock = SiteChildrenBlock;
  window.customElements.define(SiteChildrenBlock.tag, SiteChildrenBlock);
});