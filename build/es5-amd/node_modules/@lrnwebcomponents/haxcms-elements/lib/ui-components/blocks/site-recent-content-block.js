define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../core/haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js", "../../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../query/site-query.js"], function (_exports, _require, _polymerElement, _haxcmsSiteStore, _mobxModule, _domRepeat, _siteQuery) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteRecentContentBlock = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_9ade3c70c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          background-color: #fff;\n          box-shadow: 0 1px 2px #dcdcdc;\n          padding: 10px;\n          margin-top: 10px;\n          --site-recent-content-block-header-color: #363533;\n          --site-recent-content-block-item-link-color: #363533;\n        }\n        .header h3 {\n          font-size: 26px;\n          margin: 0 0 10px;\n          color: var(--site-recent-content-block-header-color);\n        }\n        .item-wrap {\n          display: flex;\n          align-items: center;\n          border-bottom: solid 1px #dcdcdc;\n          padding-bottom: 8px;\n          padding-top: 8px;\n          @apply --site-recent-content-block-item-wrap;\n        }\n        .item-heading a {\n          text-decoration: none;\n          text-transform: none;\n          color: var(--site-recent-content-block-item-link-color);\n          font-size: 16px;\n          @apply --site-recent-content-block-item-link;\n        }\n        .item-heading a:hover,\n        .item-heading a:focus,\n        .item-heading a:active {\n          @apply --site-recent-content-block-item-link-hover;\n        }\n        .active {\n          border-left: solid;\n          border-left-width: 4px;\n          border-left-color: var(--site-recent-content-block-active-color);\n          background-color: whitesmoke;\n          padding-left: 5px;\n          @apply --site-recent-content-block-item-active;\n        }\n        .image-wrapper {\n          display: flex;\n          margin-right: 10px;\n          @apply --site-recent-content-block-image-wrapper;\n        }\n        .image-wrapper iron-image {\n          height: 50px;\n          width: 50px;\n          @apply --site-recent-content-block-image;\n        }\n      </style>\n      <aside>\n        <div class=\"header\">\n          <h3>[[title]]</h3>\n        </div>\n        <site-query\n          result=\"{{__items}}\"\n          sort=\"[[sort]]\"\n          conditions=\"[[conditions]]\"\n          limit=\"[[limit]]\"\n          start-index=\"[[startIndex]]\"\n        >\n        </site-query>\n        <dom-repeat items=\"[[__items]]\" mutable-data>\n          <template>\n            <div class=\"item-wrap\" data-id$=\"[[item.id]]\">\n              <div class=\"image-wrapper\">\n                <iron-image\n                  sizing=\"cover\"\n                  src=\"[[item.metadata.fields.image]]\"\n                ></iron-image>\n              </div>\n              <div class=\"item-heading\">\n                <a href$=\"[[item.slug]]\">[[item.title]]</a>\n              </div>\n            </div>\n          </template>\n        </dom-repeat>\n      </aside>\n    "], ["\n      <style>\n        :host {\n          display: block;\n          background-color: #fff;\n          box-shadow: 0 1px 2px #dcdcdc;\n          padding: 10px;\n          margin-top: 10px;\n          --site-recent-content-block-header-color: #363533;\n          --site-recent-content-block-item-link-color: #363533;\n        }\n        .header h3 {\n          font-size: 26px;\n          margin: 0 0 10px;\n          color: var(--site-recent-content-block-header-color);\n        }\n        .item-wrap {\n          display: flex;\n          align-items: center;\n          border-bottom: solid 1px #dcdcdc;\n          padding-bottom: 8px;\n          padding-top: 8px;\n          @apply --site-recent-content-block-item-wrap;\n        }\n        .item-heading a {\n          text-decoration: none;\n          text-transform: none;\n          color: var(--site-recent-content-block-item-link-color);\n          font-size: 16px;\n          @apply --site-recent-content-block-item-link;\n        }\n        .item-heading a:hover,\n        .item-heading a:focus,\n        .item-heading a:active {\n          @apply --site-recent-content-block-item-link-hover;\n        }\n        .active {\n          border-left: solid;\n          border-left-width: 4px;\n          border-left-color: var(--site-recent-content-block-active-color);\n          background-color: whitesmoke;\n          padding-left: 5px;\n          @apply --site-recent-content-block-item-active;\n        }\n        .image-wrapper {\n          display: flex;\n          margin-right: 10px;\n          @apply --site-recent-content-block-image-wrapper;\n        }\n        .image-wrapper iron-image {\n          height: 50px;\n          width: 50px;\n          @apply --site-recent-content-block-image;\n        }\n      </style>\n      <aside>\n        <div class=\"header\">\n          <h3>[[title]]</h3>\n        </div>\n        <site-query\n          result=\"{{__items}}\"\n          sort=\"[[sort]]\"\n          conditions=\"[[conditions]]\"\n          limit=\"[[limit]]\"\n          start-index=\"[[startIndex]]\"\n        >\n        </site-query>\n        <dom-repeat items=\"[[__items]]\" mutable-data>\n          <template>\n            <div class=\"item-wrap\" data-id$=\"[[item.id]]\">\n              <div class=\"image-wrapper\">\n                <iron-image\n                  sizing=\"cover\"\n                  src=\"[[item.metadata.fields.image]]\"\n                ></iron-image>\n              </div>\n              <div class=\"item-heading\">\n                <a href\\$=\"[[item.slug]]\">[[item.title]]</a>\n              </div>\n            </div>\n          </template>\n        </dom-repeat>\n      </aside>\n    "]);

    _templateObject_9ade3c70c96f11ea8be5e1d5fe7ec787 = function _templateObject_9ade3c70c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `site-recent-content-block`
   * `Block to display recent content`
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var SiteRecentContentBlock =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SiteRecentContentBlock, _PolymerElement);
    babelHelpers.createClass(SiteRecentContentBlock, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "site-recent-content-block";
      }
    }]);

    function SiteRecentContentBlock() {
      var _this;

      babelHelpers.classCallCheck(this, SiteRecentContentBlock);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SiteRecentContentBlock).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/iron-image/iron-image.js"], res, rej);
      });
      return _this;
    } // render function


    babelHelpers.createClass(SiteRecentContentBlock, [{
      key: "_activeIdChanged",
      value: function _activeIdChanged(newValue) {
        var _this2 = this;

        if (newValue) {
          var el = null; //ensure that this level is included

          if (this.shadowRoot.querySelector('[data-id="' + newValue + '"]')) {
            el = this.shadowRoot.querySelector('[data-id="' + newValue + '"]');
          } else {
            (function () {
              var tmpItem = _haxcmsSiteStore.store.manifest.items.find(function (i) {
                return i.id == newValue;
              }); // fallback, maybe there's a child of this currently active


              while (el === null && tmpItem && tmpItem.parent != null) {
                // take the parent object of this current item
                tmpItem = _haxcmsSiteStore.store.manifest.items.find(function (i) {
                  return i.id == tmpItem.parent;
                }); // see if IT lives in the dom, if not, keep going until we run out

                if (tmpItem && _this2.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]')) {
                  el = _this2.shadowRoot.querySelector('[data-id="' + tmpItem.id + '"]');
                }
              }
            })();
          }

          if (this._prevEl) {
            this._prevEl.classList.remove("active");
          }

          if (el) {
            el.classList.add("active");
            this._prevEl = el;
          }
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteRecentContentBlock.prototype), "connectedCallback", this).call(this);
        setTimeout(function () {
          _this3.__disposer = (0, _mobxModule.autorun)(function () {
            _this3.activeId = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.activeId);
          });
        }, 50);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this.__disposer) {
          this.__disposer();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(SiteRecentContentBlock.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_9ade3c70c96f11ea8be5e1d5fe7ec787());
      }
      /**
       * Props
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * starting level for the menu items
           */
          limit: {
            type: Number,
            value: 10
          },

          /**
           * ending level for the menu items
           */
          startIndex: {
            type: Number,
            value: 0
          },

          /**
           * optional sort
           */
          sort: {
            type: Object,
            value: {
              "metadata.created": "ASC"
            }
          },

          /**
           * conditions to query on
           */
          conditions: {
            type: Object,
            value: {}
          },

          /**
           * title for the block;
           */
          title: {
            type: String,
            value: "Recent content"
          },

          /**
           * acitvely selected item
           */
          activeId: {
            type: String,
            observer: "_activeIdChanged"
          }
        };
      }
    }]);
    return SiteRecentContentBlock;
  }(_polymerElement.PolymerElement);

  _exports.SiteRecentContentBlock = SiteRecentContentBlock;
  window.customElements.define(SiteRecentContentBlock.tag, SiteRecentContentBlock);
});