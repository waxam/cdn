define(["exports", "../../../../../lit/index.js", "../../../../simple-icon/lib/simple-icon-button.js", "../../../../simple-icon/lib/simple-icons.js", "../../../../hax-iconset/lib/simple-hax-iconset.js", "../../../../simple-tooltip/simple-tooltip.js", "./HAXCMSI18NMixin.js", "./HAXCMSThemeParts.js"], function (_exports, _index, _simpleIconButton, _simpleIcons, _simpleHaxIconset, _simpleTooltip, _HAXCMSI18NMixin, _HAXCMSThemeParts2) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSButton = void 0;

  var _templateObject_0adc5760a15411ecad533bc0497e45a3, _templateObject2_0adc5760a15411ecad533bc0497e45a3;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  // translation support baked in, use this class to reduce
  // complexity in adding new buttons to the HAXcms UI for editors
  var HAXCMSButton = /*#__PURE__*/function (_HAXCMSThemeParts) {
    babelHelpers.inherits(HAXCMSButton, _HAXCMSThemeParts);

    var _super = _createSuper(HAXCMSButton);

    function HAXCMSButton() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSButton);
      _this = _super.call(this);
      _this.icon = "mdextra:hexagon-multiple";
      _this.label = "button";
      _this.voiceCommand = "";
      _this.dark = false;
      return _this;
    }

    babelHelpers.createClass(HAXCMSButton, [{
      key: "HAXCMSFireButtonEvent",
      value: // wrapper on CustomEvent so we include the payload as these are listened for on window
      function HAXCMSFireButtonEvent(name, target, payload) {
        // send message off so that the control board hands it off to the CMS
        var evt = new CustomEvent(name, {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            originalTarget: target,
            values: payload
          }
        });
        this.dispatchEvent(evt);
      } // this ensures data binding doesn't fail

    }, {
      key: "HAXCMSButtonClick",
      value: function HAXCMSButtonClick(e) {// stub, the classes implementing this will actually do something
        // you always will call super.HAXCMS
      }
    }, {
      key: "renderButton",
      value: function renderButton(label, tooltip) {
        return (0, _index.html)(_templateObject_0adc5760a15411ecad533bc0497e45a3 || (_templateObject_0adc5760a15411ecad533bc0497e45a3 = babelHelpers.taggedTemplateLiteral(["\n      <simple-icon-button\n        .part=\"", "\"\n        id=\"button\"\n        label=\"", "\"\n        @click=\"", "\"\n        ?dark=\"", "\"\n        icon=\"", "\"\n        voice-command=\"", "\"\n      ></simple-icon-button>\n      <simple-tooltip for=\"button\" position=\"right\" offset=\"14\">\n        ", "\n      </simple-tooltip>\n    "])), this.editMode ? "edit-mode-active" : "", label, this.HAXCMSButtonClick, this.dark, this.icon, this.voiceCommand, tooltip);
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButton), "properties", this)), {}, {
          icon: {
            type: String
          },
          label: {
            type: String
          },
          dark: {
            type: Boolean,
            reflect: true
          },
          voiceCommand: {
            type: String
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        var styles = babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSButton), "styles", this) || [];
        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject2_0adc5760a15411ecad533bc0497e45a3 || (_templateObject2_0adc5760a15411ecad533bc0497e45a3 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        simple-icon-button {\n          display: block;\n          --simple-icon-width: 24px;\n          --simple-icon-height: 24px;\n          border-radius: 50%;\n          border: none;\n          background-color: var(--simple-colors-default-theme-accent-1, black);\n          color: var(--simple-colors-default-theme-accent-12, white);\n          text-align: center;\n          line-height: 40px;\n          min-width: unset;\n          padding: 0;\n          margin: 4px 2px;\n          width: 40px;\n          height: 40px;\n          transition: 0.2s all ease-in-out;\n          position: relative;\n          box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),\n            0 3px 14px 2px rgba(0, 0, 0, 0.12),\n            0 5px 5px -3px rgba(0, 0, 0, 0.4);\n        }\n        simple-icon-button:hover,\n        simple-icon-button:focus,\n        simple-icon-button:active {\n          background-color: var(--haxcms-color);\n          color: var(--simple-colors-default-theme-accent-1, white);\n        }\n        simple-tooltip:not(:defined) {\n          display: none !important;\n        }\n        simple-tooltip {\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-duration-in: 200ms;\n          --simple-tooltip-duration-out: 0;\n          --simple-tooltip-border-radius: 0;\n          --simple-tooltip-font-size: 14px;\n          --simple-tooltip-width: 145px;\n        }\n      "])))]);
      }
    }]);
    return HAXCMSButton;
  }((0, _HAXCMSThemeParts2.HAXCMSThemeParts)((0, _HAXCMSI18NMixin.HAXCMSI18NMixin)(_index.LitElement)));

  _exports.HAXCMSButton = HAXCMSButton;
});