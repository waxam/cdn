define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../../@polymer/polymer/lib/utils/render-status.js", "../../../../../@polymer/paper-styles/shadow.js", "../../../../../@polymer/paper-styles/typography.js", "../../../../../@polymer/paper-styles/color.js"], function (_exports, _require, _polymerElement, _renderStatus, _shadow, _typography, _color) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SiteLogin = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_690016b0e3b511e9b0d5a5c01151ac03() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        #loginform {\n          width: 450px;\n          height: 450px;\n          background: var(--login-form-background-color, white);\n          @apply --shadow-elevation-12dp;\n          @apply --login-form;\n        }\n\n        #loginformcontent {\n          padding: 48px;\n        }\n\n        #loginformcontent > * {\n          margin-top: 8px;\n          margin-bottom: 8px;\n        }\n\n        #loginbtn {\n          margin-top: 24px;\n          float: right;\n          background-color: var(\n            --login-btn-background-color,\n            var(--paper-indigo-500)\n          );\n          color: var(--login-btn-text-color, white);\n          --paper-button-raised-keyboard-focus: {\n            background-color: var(\n              --login-btn-raised-background-color,\n              var(--paper-pink-a200)\n            ) !important;\n            color: var(--login-btn-text-color, white) !important;\n          }\n          @apply --login-btn;\n        }\n        #loginbtn[disabled] {\n          background-color: var(\n            --login-btn-disabled-background-color,\n            var(--paper-indigo-100)\n          );\n        }\n\n        h1 {\n          @apply --paper-font-display1;\n          margin: 0;\n          @apply --login-title;\n        }\n\n        h2 {\n          @apply --paper-font-title;\n          margin: 0;\n          @apply --login-subtitle;\n        }\n\n        paper-progress {\n          width: 100%;\n        }\n\n        #errormsg {\n          margin-top: 16px;\n          color: var(--login-error-label-color, var(--error-color));\n          @apply --paper-font-menu;\n        }\n      </style>\n      <div id=\"loginform\">\n        <paper-progress disabled=\"[[!loading]]\" indeterminate></paper-progress>\n        <div id=\"loginformcontent\">\n          <h1>[[title]]</h1>\n          <h2>[[subtitle]]</h2>\n          <div id=\"errormsg\">[[errorMsg]]</div>\n          <paper-input\n            id=\"userinput\"\n            value=\"{{username}}\"\n            disabled=\"[[loading]]\"\n            type=\"text\"\n            label=\"[[userInputLabel]]\"\n            required\n            error-message=\"[[userInputErrMsg]]\"\n          ></paper-input>\n          <paper-input\n            id=\"passinput\"\n            value=\"{{password}}\"\n            disabled=\"[[loading]]\"\n            type=\"password\"\n            label=\"[[passwordInputLabel]]\"\n            required\n            error-message=\"[[passwordInputErrMsg]]\"\n          ></paper-input>\n          <paper-button\n            on-click=\"_login\"\n            disabled=\"[[loading]]\"\n            id=\"loginbtn\"\n            raised\n            class=\"indigo\"\n            >[[loginBtnText]]</paper-button\n          >\n          <slot name=\"links\"></slot>\n        </div>\n      </div>\n    "]);

    _templateObject_690016b0e3b511e9b0d5a5c01151ac03 = function _templateObject_690016b0e3b511e9b0d5a5c01151ac03() {
      return data;
    };

    return data;
  }

  /**
   * `site-login`
   * `Visual element to broker a user login`
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var SiteLogin =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SiteLogin, _PolymerElement);

    function SiteLogin() {
      var _this;

      babelHelpers.classCallCheck(this, SiteLogin);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SiteLogin).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/paper-input/paper-input.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../../@polymer/paper-progress/paper-progress.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(SiteLogin, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SiteLogin.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.shadowRoot.querySelector("#loginform").addEventListener("keypress", this._keyPress.bind(this));
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.shadowRoot.querySelector("#loginform").removeEventListener("keypress", this._keyPress.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(SiteLogin.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Listen for key presses
       */

    }, {
      key: "_keyPress",
      value: function _keyPress(e) {
        if (e.keyCode == 13) {
          //Enter
          this._login();

          return false;
        }
      }
    }, {
      key: "_login",
      value: function _login() {
        if (this.shadowRoot.querySelector("#userinput").validate() && this.shadowRoot.querySelector("#passinput").validate()) {
          this.dispatchEvent(new CustomEvent("login-btn-click", {
            bubbles: true,
            composed: true
          }));
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_690016b0e3b511e9b0d5a5c01151ac03());
      }
    }, {
      key: "tag",
      get: function get() {
        return "site-login";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Title of the loginscreen
           */
          title: String,

          /**
           * Subtitle of the loginscreen
           */
          subtitle: String,

          /**
           * Error message to show (example : "Invalid username")
           */
          errorMsg: String,

          /**
           * Content of the username field
           */
          username: {
            type: String,
            notify: true
          },

          /**
           * Content of the password field
           */
          password: {
            type: String,
            notify: true
          },

          /**
           * When true, all fields are disabled and the progress bar is visible
           */
          loading: {
            type: Boolean,
            value: false
          },

          /**
           * Placeholder of the username field
           */
          userInputLabel: {
            type: String,
            value: "Username"
          },

          /**
           * Error message of the username field
           */
          userInputErrMsg: {
            type: String,
            value: "Username required"
          },

          /**
           * Placeholder of the password field
           */
          passwordInputLabel: {
            type: String,
            value: "Password"
          },

          /**
           * Error message of the password field
           */
          passwordInputErrMsg: {
            type: String,
            value: "Password required"
          },

          /**
           * Login button label
           */
          loginBtnText: {
            type: String,
            value: "Login"
          }
        };
      }
    }]);
    return SiteLogin;
  }(_polymerElement.PolymerElement);

  _exports.SiteLogin = SiteLogin;
  window.customElements.define(SiteLogin.tag, SiteLogin);
});