define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../../@polymer/polymer/lib/utils/settings.js", "../../../../../@polymer/polymer/lib/utils/render-status.js", "../../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../jwt-login/jwt-login.js", "../../../../hexagon-loader/hexagon-loader.js", "../../../../json-outline-schema/json-outline-schema.js", "../../../../simple-toast/simple-toast.js", "../../../../simple-modal/simple-modal.js", "../../../../simple-datetime/simple-datetime.js", "../../../../simple-fields/simple-fields.js", "../../../../simple-colors/simple-colors.js", "../../../../../@vaadin/vaadin-upload/vaadin-upload.js"], function (_exports, _require, _polymerElement, _settings, _renderStatus, _ironAjax, _jwtLogin, _hexagonLoader, _jsonOutlineSchema, _simpleToast, _simpleModal, _simpleDatetime, _simpleFields, _simpleColors, _vaadinUpload) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteListing = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_7f101260e14a11e9bce923988a998e3c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles\">\n        paper-icon-button {\n          --paper-icon-button-ink-color: var(--haxcms-system-action-color);\n        }\n        app-toolbar div.main-title {\n          margin-left: 8px;\n          font-size: 24px;\n          min-width: 50px;\n        }\n        app-header {\n          color: var(--haxcms-site-listing-color-light);\n          @apply --layout-fixed-top;\n          --app-header-background-rear-layer: {\n            background-color: var(--haxcms-site-listing-color-dark);\n          }\n        }\n        app-toolbar {\n          color: var(--haxcms-site-listing-color-light);\n          background-color: var(--haxcms-site-listing-color-dark);\n        }\n        vaadin-grid {\n          margin-top: 64px;\n          height: calc(100vh - 64px);\n        }\n        .login-prompt {\n          margin: 80px auto 0;\n          display: flex;\n          justify-content: center;\n        }\n        .login-prompt[hidden] {\n          display: none;\n        }\n        .login-prompt div#selfie {\n          position: absolute;\n          margin: 0;\n        }\n        .has-snap {\n          z-index: 3;\n        }\n        .hide-camera {\n          display:none;\n        }\n        .login-prompt div#selfie img {\n          z-index: 2;\n          position: absolute;\n          margin: 0 0 0 -78px;\n          width: 355px;\n          height: 200px;\n          display: block;\n        }\n        simple-login {\n          background: #EEEEEE;\n          color: var(--haxcms-system-bg);\n          --primary-color: var(--haxcms-system-bg);\n          --primary-text-color: var(--haxcms-system-bg);\n          --paper-input-container-focus-color: var(--haxcms-system-action-color);\n          --login-btn-background-color: var(--haxcms-system-bg);\n          --login-btn-raised-background-color: var(--haxcms-system-action-color);\n          --login-form-color: var(--haxcms-system-bg);\n          --login-btn-width: 80%;\n          --login-btn-display: flex;\n        }\n        .forgot {\n          margin: 32px 0 -16px 0;\n          padding: 0;\n          font-size: 12px;\n          text-align: center;\n        }\n        hax-logo {\n          margin-top: -50px;\n          margin-bottom: 16px;\n          text-align: center;\n          --hax-logo-font-size: 24px;\n          --hax-logo-letter-spacing: 0px;\n        }\n        .camera-buttons {\n          width: 100%;\n          justify-content: center;\n          display: flex;\n        }\n        paper-dialog {\n          width: 60vw;\n        }\n        paper-dialog-scrollable {\n          overflow: scroll;\n          height: 40vh;\n        }\n        h2.dialog-header {\n          background-color: var(--haxcms-site-listing-color-dark);\n          margin: 0;\n          padding: 28px;\n          color: var(--haxcms-site-listing-color-light);\n        }\n        .buttons {\n          text-align: center;\n          margin: 0 auto;\n          display: flex;\n          justify-content: center;\n          margin-top: 2em;\n          color: var(--haxcms-site-listing-color-dark);\n          font-weight: 500;\n        }\n        .action-button {\n          width: 50%;\n          height: 64px;\n          background-color: var(--haxcms-site-listing-color-dark);\n          color: var(--haxcms-site-listing-color-light);\n          margin-right: 48px;\n        }\n        .action-button:hover,\n        .action-button:active,\n        .action-button:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n        }\n        .action-button iron-icon {\n          margin-right: 8px;\n        }\n        paper-input {\n          --paper-input-container-focus-color: var(--haxcms-site-listing-color-hover);\n        }\n        .small-location {\n          font-size: 11px;\n          text-align: center;\n          font-style: italic;\n        }\n        #loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 1;\n          padding: 24px;\n          top: 0;\n          position: absolute;\n          background-color: rgba(250, 250, 250, 0.8);\n          transition: all linear 1s;\n          visibility: visible;\n          color: white;\n        }\n        #loading[data-loading] {\n          background-color: rgba(0, 0, 0, 0);\n          opacity: 0;\n          visibility: hidden;\n        }\n        a {\n          text-decoration: none;\n        }\n        .site-title {\n          font-size: 20px;\n          color: black;\n          text-align: center;\n          width: 100%;\n          text-transform: unset;\n          min-width: unset;\n        }\n        .site-title:hover,\n        .site-title:active,\n        .site-title:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: var(--haxcms-site-listing-color-light);\n        }\n        .operations paper-button {\n          font-weight: 500;\n          font-size: 20px;\n          color: var(--haxcms-site-listing-color-light);\n          margin: 0;\n          padding: 8px;\n          min-width: 100px;\n          width: auto;\n          display: inline-flex;\n          height: 48px;\n        }\n        .operations paper-button:hover,\n        .operations paper-button:active,\n        .operations paper-button:focus {\n          background-color: var(--haxcms-site-listing-color-light);\n          color: var(--haxcms-site-listing-color-hover);\n        }\n        #add {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: (--haxcms-site-listing-color-light);\n          transition: .2s all linear;\n        }\n        #add:hover,\n        #add:active,\n        #add:focus {\n          background-color: var(--haxcms-site-listing-color-light);\n          color: var(--haxcms-site-listing-color-hover);\n        }\n        .selected-operations {\n          margin: 0 16px;\n          transition: 0.3s linear all;\n          display: inline-flex;\n          visibility: visible;\n          opacity: 1;\n          border-left: 2px solid var(--haxcms-site-listing-color-light);\n          border-right: 2px solid var(--haxcms-site-listing-color-light);\n          height: 64px;\n        }\n        .selected-operations[data-hidden] {\n          visibility: hidden;\n          opacity: 0;\n        }\n        .selected-operations paper-button {\n          background-color: var(--haxcms-site-listing-color-light);\n          font-weight: 500;\n          font-size: 16px;\n          color: var(--haxcms-site-listing-color-dark);\n          margin: 0;\n          min-width: unset;\n          margin: 8px;\n          height: 48px;\n        }\n        .selected-operations paper-button:active,\n        .selected-operations paper-button:hover,\n        .selected-operations paper-button:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: var(--haxcms-site-listing-color-light); !important;\n        }\n        .danger {\n          color: var(--simple-colors-default-theme-red-7) !important;\n        }\n        .danger:hover {\n          color: var(--haxcms-site-listing-color-light) !important;\n        }\n        eco-json-schema-object {\n          --eco-json-schema-object-form: {\n            -ms-flex: unset;\n            -webkit-flex: unset;\n            flex: unset;\n            -webkit-flex-basis: unset;\n            flex-basis: unset;\n          }\n        }\n        #configform {\n          --eco-json-schema-object-form: {\n            display: block !important;\n          }\n        }\n      </style>\n      <div>\n        <jwt-login\n          id=\"jwt\"\n          method=\"[[method]]\"\n          body=\"[[jwtBody]]\"\n          url=\"[[__loginPath]]\"\n          logout-url=\"[[__logoutPath]]\"\n          jwt=\"{{jwt}}\"\n        ></jwt-login>\n        <iron-ajax\n          id=\"loaddata\"\n          auto=\"\"\n          loading=\"{{__loading}}\"\n          url=\"[[dataSource]]\"\n          handle-as=\"json\"\n          debounce-duration=\"250\"\n          last-response=\"{{sitesResponse}}\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"createrequest\"\n          method=\"[[method]]\"\n          body=\"[[createParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__createNewSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleCreateResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"gitimportrequest\"\n          method=\"[[method]]\"\n          body=\"[[gitImportParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__gitImportSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleGitImportResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"downloadrequest\"\n          method=\"[[method]]\"\n          body=\"[[downloadParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__downloadSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleDownloadResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"archiverequest\"\n          method=\"[[method]]\"\n          body=\"[[archiveParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__archiveSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleArchiveResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"deleterequest\"\n          method=\"[[method]]\"\n          body=\"[[deleteParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__deleteSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleDeleteResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"clonerequest\"\n          method=\"[[method]]\"\n          body=\"[[cloneParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__cloneSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleCloneResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"publishrequest\"\n          method=\"[[method]]\"\n          body=\"[[publishParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__publishSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handlePublishResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"syncrequest\"\n          method=\"[[method]]\"\n          body=\"[[syncParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__syncSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleSyncResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"getconfigrequest\"\n          method=\"[[method]]\"\n          body=\"[[configParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__getConfigPath]]\"\n          handle-as=\"json\"\n          on-response=\"handleConfigResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"setconfigrequest\"\n          method=\"[[method]]\"\n          body=\"[[setConfigParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__setConfigPath]]\"\n          handle-as=\"json\"\n          on-response=\"handleSetConfigResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"getuserdatarequest\"\n          method=\"[[method]]\"\n          body=\"[[getUserDataParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__getUserDataPath]]\"\n          handle-as=\"json\"\n          on-response=\"handleGetUserDataResponse\"\n        ></iron-ajax>\n      </div>\n      <div id=\"loading\" data-loading$=\"[[!__loading]]\">\n        <hexagon-loader\n          item-count=\"4\"\n          color=\"white\"\n          loading\n          size=\"large\"\n        ></hexagon-loader>\n      </div>\n      <app-header reveals>\n        <app-toolbar>\n          <slot name=\"app-header-pre\"></slot>\n          <div class=\"operations\">\n            <paper-button\n              on-click=\"_addTap\"\n              id=\"add\"\n              raised\n              hidden$=\"[[!loggedIn]]\"\n            >\n              <iron-icon icon=\"icons:add\"></iron-icon> Create\n            </paper-button>\n            <paper-button\n              on-click=\"_importTap\"\n              id=\"import\"\n              raised\n              hidden$=\"[[!loggedIn]]\"\n            >\n              <iron-icon icon=\"icons:cloud-download\"></iron-icon> Import\n            </paper-button>\n          </div>\n          <div class=\"main-title\" hidden$=\"[[!loggedIn]]\">[[title]]</div>\n          <div class=\"selected-operations\" data-hidden$=\"[[!hasSelectedItems]]\">\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"publish\" raised>\n              <iron-icon icon=\"editor:publish\"></iron-icon> Publish\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"sync\" raised>\n              <iron-icon icon=\"notification:sync\"></iron-icon> Sync\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"clone\" raised>\n              <iron-icon icon=\"icons:content-copy\"></iron-icon> Clone\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"download\" raised>\n              <iron-icon icon=\"icons:file-download\"></iron-icon> Download\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"archive\" raised>\n              <iron-icon icon=\"icons:archive\"></iron-icon> Archive\n            </paper-button>\n            <paper-button\n              on-click=\"_bulkSitesConfirm\"\n              id=\"delete\"\n              raised\n              class=\"danger\"\n            >\n              <iron-icon icon=\"icons:delete-forever\"></iron-icon> Delete\n            </paper-button>\n          </div>\n          <div class=\"operations\">\n            <paper-button\n              on-click=\"_settingsTap\"\n              id=\"settings\"\n              raised\n              hidden$=\"[[!showSpecialButtons(hideGlobalSettings,loggedIn)]]\"\n            >\n              <iron-icon icon=\"icons:settings\"></iron-icon> Settings\n            </paper-button>\n            <paper-button\n              hidden$=\"[[!showSpecialButtons(hideLogin,loggedIn)]]\"\n              on-click=\"_loginUserRoutine\"\n              id=\"login\"\n              ><iron-icon icon=\"[[__loginIcon]]\"></iron-icon>\n              [[__loginText]]</paper-button\n            >\n          </div>\n        </app-toolbar>\n      </app-header>\n\n      <vaadin-grid\n        hidden$=\"[[!loggedIn]]\"\n        id=\"grid\"\n        items=\"[[sites]]\"\n        theme=\"row-dividers\"\n        column-reordering-allowed\n        multi-sort\n      >\n        <vaadin-grid-selection-column\n          auto-select\n          frozen\n        ></vaadin-grid-selection-column>\n        <vaadin-grid-filter-column width=\"6em\" path=\"title\">\n          <template>\n            <portal-launcher>\n              <a tabindex=\"-1\" href$=\"[[item.location]]\">\n                <paper-button raised class=\"site-title\">\n                  [[item.title]]\n                </paper-button>\n                <div class=\"small-location\">\n                  [[cleanLocation(item.location)]]\n                </div>\n              </a>\n            </portal-launcher>\n          </template>\n        </vaadin-grid-filter-column>\n        <vaadin-grid-filter-column\n          width=\"2em\"\n          path=\"metadata.theme.name\"\n          header=\"Theme\"\n        ></vaadin-grid-filter-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          path=\"metadata.pageCount\"\n          header=\"Pages\"\n        ></vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          header=\"Last published\"\n          path=\"metadata.lastPublished\"\n        >\n          <template>\n            <template\n              is=\"dom-if\"\n              if=\"[[item.metadata.site.static.lastPublished]]\"\n            >\n              <simple-datetime\n                format=\"M jS, Y\"\n                timestamp=\"[[item.metadata.site.static.lastPublished]]\"\n                unix\n              ></simple-datetime>\n            </template>\n          </template>\n        </vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          header=\"Updated\"\n          path=\"metadata.updated\"\n        >\n          <template>\n            <template is=\"dom-if\" if=\"[[item.metadata.site.updated]]\">\n              <simple-datetime\n                format=\"M jS, Y\"\n                timestamp=\"[[item.metadata.site.updated]]\"\n                unix\n              ></simple-datetime>\n            </template>\n          </template>\n        </vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          header=\"Created\"\n          path=\"metadata.created\"\n        >\n          <template>\n            <template is=\"dom-if\" if=\"[[item.metadata.site.created]]\">\n              <simple-datetime\n                format=\"M jS, Y\"\n                timestamp=\"[[item.metadata.site.created]]\"\n                unix\n              ></simple-datetime>\n            </template>\n          </template>\n        </vaadin-grid-sort-column>\n        <vaadin-grid-column width=\"1em\" header=\"Icon\">\n          <template\n            ><iron-icon\n              icon=\"[[item.metadata.theme.variables.icon]]\"\n            ></iron-icon\n          ></template>\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"1em\" header=\"Color\">\n          <template>\n            <div\n              style$=\"border:1px solid black;width:48px;height:48px;background-color:[[item.metadata.theme.variables.hexCode]];\"\n            ></div>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"1em\" header=\"Banner\">\n          <template\n            ><iron-image\n              sizing=\"contain\"\n              preload\n              src$=\"[[item.metadata.theme.variables.image]]\"\n              style=\"width:100px; height:48px;\"\n            ></iron-image\n          ></template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n      <div class=\"login-prompt\" hidden$=\"[[loggedIn]]\">\n        <simple-login>\n          <hax-logo size=\"mini\" hide-hax><span>HAXcms login</span></hax-logo>\n          <div class=\"camera-buttons\">\n            <paper-icon-button\n              id=\"snap\"\n              icon=\"image:camera-alt\"\n              title=\"Snap photo\"\n            ></paper-icon-button>\n            <paper-icon-button\n              id=\"newsnap\"\n              icon=\"icons:cancel\"\n              title=\"Clear photo\"\n            ></paper-icon-button>\n          </div>\n          <simple-login-avatar>\n            <div id=\"selfie\"></div>\n            <simple-login-camera id=\"camera\" autoplay></simple-login-camera>\n          </simple-login-avatar>\n          <p class=\"forgot\" slot=\"buttons\">\n            Forget your login? Check <strong>_config/config.php</strong>\n          </p>\n        </simple-login>\n        <vaadin-upload\n          capture\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          method=\"[[method]]\"\n          form-data-name=\"file-upload\"\n          hidden\n          id=\"fileupload\"\n        ></vaadin-upload>\n      </div>\n      <paper-dialog id=\"confirm\">\n        <h2 class=\"dialog-header\">\n          [[activeOpertion]] these [[selectedItems.length]] sites\n        </h2>\n        <paper-dialog-scrollable>\n          <ul>\n            <dom-repeat items=\"[[selectedItems]]\" as=\"site\">\n              <template>\n                <li>[[site.title]]</li>\n              </template>\n            </dom-repeat>\n          </ul>\n        </paper-dialog-scrollable>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_confirmBulkOperation\"\n            dialog-confirm\n            id=\"bulksites\"\n            class=\"action-button\"\n            raised\n            ><iron-icon icon=\"icons:thumb-up\"></iron-icon> Yes,\n            [[activeOpertion]]</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"createsite\">\n        <h2 class=\"dialog-header\">Create new site</h2>\n        <paper-dialog-scrollable>\n          <form>\n            <simple-fields id=\"createsitefields\" autofocus></simple-fields>\n          </form>\n        </paper-dialog-scrollable>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_createSite\"\n            class=\"action-button\"\n            dialog-confirm\n            id=\"create\"\n            raised\n            ><iron-icon icon=\"icons:home\"></iron-icon> Create your new\n            site!</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"importsite\">\n        <h2 class=\"dialog-header\">Import site from git repo</h2>\n        <paper-input id=\"importurl\" label=\"Git url\"></paper-input>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_gitImportSite\"\n            class=\"action-button\"\n            dialog-confirm\n            id=\"importsite\"\n            raised\n            ><iron-icon icon=\"icons:home\"></iron-icon> Import</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"settingsdialog\">\n        <h2 class=\"dialog-header\">Edit HAXCMS configuration</h2>\n        <paper-dialog-scrollable>\n          <eco-json-schema-object id=\"settingsform\"></eco-json-schema-object>\n        </paper-dialog-scrollable>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_saveConfig\"\n            dialog-confirm\n            id=\"saveconfig\"\n            class=\"action-button\"\n            raised\n            ><iron-icon icon=\"icons:save\"></iron-icon> Save</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n    "], ["\n      <style include=\"simple-colors-shared-styles\">\n        paper-icon-button {\n          --paper-icon-button-ink-color: var(--haxcms-system-action-color);\n        }\n        app-toolbar div.main-title {\n          margin-left: 8px;\n          font-size: 24px;\n          min-width: 50px;\n        }\n        app-header {\n          color: var(--haxcms-site-listing-color-light);\n          @apply --layout-fixed-top;\n          --app-header-background-rear-layer: {\n            background-color: var(--haxcms-site-listing-color-dark);\n          }\n        }\n        app-toolbar {\n          color: var(--haxcms-site-listing-color-light);\n          background-color: var(--haxcms-site-listing-color-dark);\n        }\n        vaadin-grid {\n          margin-top: 64px;\n          height: calc(100vh - 64px);\n        }\n        .login-prompt {\n          margin: 80px auto 0;\n          display: flex;\n          justify-content: center;\n        }\n        .login-prompt[hidden] {\n          display: none;\n        }\n        .login-prompt div#selfie {\n          position: absolute;\n          margin: 0;\n        }\n        .has-snap {\n          z-index: 3;\n        }\n        .hide-camera {\n          display:none;\n        }\n        .login-prompt div#selfie img {\n          z-index: 2;\n          position: absolute;\n          margin: 0 0 0 -78px;\n          width: 355px;\n          height: 200px;\n          display: block;\n        }\n        simple-login {\n          background: #EEEEEE;\n          color: var(--haxcms-system-bg);\n          --primary-color: var(--haxcms-system-bg);\n          --primary-text-color: var(--haxcms-system-bg);\n          --paper-input-container-focus-color: var(--haxcms-system-action-color);\n          --login-btn-background-color: var(--haxcms-system-bg);\n          --login-btn-raised-background-color: var(--haxcms-system-action-color);\n          --login-form-color: var(--haxcms-system-bg);\n          --login-btn-width: 80%;\n          --login-btn-display: flex;\n        }\n        .forgot {\n          margin: 32px 0 -16px 0;\n          padding: 0;\n          font-size: 12px;\n          text-align: center;\n        }\n        hax-logo {\n          margin-top: -50px;\n          margin-bottom: 16px;\n          text-align: center;\n          --hax-logo-font-size: 24px;\n          --hax-logo-letter-spacing: 0px;\n        }\n        .camera-buttons {\n          width: 100%;\n          justify-content: center;\n          display: flex;\n        }\n        paper-dialog {\n          width: 60vw;\n        }\n        paper-dialog-scrollable {\n          overflow: scroll;\n          height: 40vh;\n        }\n        h2.dialog-header {\n          background-color: var(--haxcms-site-listing-color-dark);\n          margin: 0;\n          padding: 28px;\n          color: var(--haxcms-site-listing-color-light);\n        }\n        .buttons {\n          text-align: center;\n          margin: 0 auto;\n          display: flex;\n          justify-content: center;\n          margin-top: 2em;\n          color: var(--haxcms-site-listing-color-dark);\n          font-weight: 500;\n        }\n        .action-button {\n          width: 50%;\n          height: 64px;\n          background-color: var(--haxcms-site-listing-color-dark);\n          color: var(--haxcms-site-listing-color-light);\n          margin-right: 48px;\n        }\n        .action-button:hover,\n        .action-button:active,\n        .action-button:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n        }\n        .action-button iron-icon {\n          margin-right: 8px;\n        }\n        paper-input {\n          --paper-input-container-focus-color: var(--haxcms-site-listing-color-hover);\n        }\n        .small-location {\n          font-size: 11px;\n          text-align: center;\n          font-style: italic;\n        }\n        #loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 1;\n          padding: 24px;\n          top: 0;\n          position: absolute;\n          background-color: rgba(250, 250, 250, 0.8);\n          transition: all linear 1s;\n          visibility: visible;\n          color: white;\n        }\n        #loading[data-loading] {\n          background-color: rgba(0, 0, 0, 0);\n          opacity: 0;\n          visibility: hidden;\n        }\n        a {\n          text-decoration: none;\n        }\n        .site-title {\n          font-size: 20px;\n          color: black;\n          text-align: center;\n          width: 100%;\n          text-transform: unset;\n          min-width: unset;\n        }\n        .site-title:hover,\n        .site-title:active,\n        .site-title:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: var(--haxcms-site-listing-color-light);\n        }\n        .operations paper-button {\n          font-weight: 500;\n          font-size: 20px;\n          color: var(--haxcms-site-listing-color-light);\n          margin: 0;\n          padding: 8px;\n          min-width: 100px;\n          width: auto;\n          display: inline-flex;\n          height: 48px;\n        }\n        .operations paper-button:hover,\n        .operations paper-button:active,\n        .operations paper-button:focus {\n          background-color: var(--haxcms-site-listing-color-light);\n          color: var(--haxcms-site-listing-color-hover);\n        }\n        #add {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: (--haxcms-site-listing-color-light);\n          transition: .2s all linear;\n        }\n        #add:hover,\n        #add:active,\n        #add:focus {\n          background-color: var(--haxcms-site-listing-color-light);\n          color: var(--haxcms-site-listing-color-hover);\n        }\n        .selected-operations {\n          margin: 0 16px;\n          transition: 0.3s linear all;\n          display: inline-flex;\n          visibility: visible;\n          opacity: 1;\n          border-left: 2px solid var(--haxcms-site-listing-color-light);\n          border-right: 2px solid var(--haxcms-site-listing-color-light);\n          height: 64px;\n        }\n        .selected-operations[data-hidden] {\n          visibility: hidden;\n          opacity: 0;\n        }\n        .selected-operations paper-button {\n          background-color: var(--haxcms-site-listing-color-light);\n          font-weight: 500;\n          font-size: 16px;\n          color: var(--haxcms-site-listing-color-dark);\n          margin: 0;\n          min-width: unset;\n          margin: 8px;\n          height: 48px;\n        }\n        .selected-operations paper-button:active,\n        .selected-operations paper-button:hover,\n        .selected-operations paper-button:focus {\n          background-color: var(--haxcms-site-listing-color-hover);\n          color: var(--haxcms-site-listing-color-light); !important;\n        }\n        .danger {\n          color: var(--simple-colors-default-theme-red-7) !important;\n        }\n        .danger:hover {\n          color: var(--haxcms-site-listing-color-light) !important;\n        }\n        eco-json-schema-object {\n          --eco-json-schema-object-form: {\n            -ms-flex: unset;\n            -webkit-flex: unset;\n            flex: unset;\n            -webkit-flex-basis: unset;\n            flex-basis: unset;\n          }\n        }\n        #configform {\n          --eco-json-schema-object-form: {\n            display: block !important;\n          }\n        }\n      </style>\n      <div>\n        <jwt-login\n          id=\"jwt\"\n          method=\"[[method]]\"\n          body=\"[[jwtBody]]\"\n          url=\"[[__loginPath]]\"\n          logout-url=\"[[__logoutPath]]\"\n          jwt=\"{{jwt}}\"\n        ></jwt-login>\n        <iron-ajax\n          id=\"loaddata\"\n          auto=\"\"\n          loading=\"{{__loading}}\"\n          url=\"[[dataSource]]\"\n          handle-as=\"json\"\n          debounce-duration=\"250\"\n          last-response=\"{{sitesResponse}}\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"createrequest\"\n          method=\"[[method]]\"\n          body=\"[[createParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__createNewSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleCreateResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"gitimportrequest\"\n          method=\"[[method]]\"\n          body=\"[[gitImportParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__gitImportSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleGitImportResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"downloadrequest\"\n          method=\"[[method]]\"\n          body=\"[[downloadParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__downloadSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleDownloadResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"archiverequest\"\n          method=\"[[method]]\"\n          body=\"[[archiveParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__archiveSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleArchiveResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"deleterequest\"\n          method=\"[[method]]\"\n          body=\"[[deleteParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__deleteSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleDeleteResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"clonerequest\"\n          method=\"[[method]]\"\n          body=\"[[cloneParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__cloneSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleCloneResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"publishrequest\"\n          method=\"[[method]]\"\n          body=\"[[publishParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__publishSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handlePublishResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"syncrequest\"\n          method=\"[[method]]\"\n          body=\"[[syncParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__syncSitePath]]\"\n          handle-as=\"json\"\n          on-response=\"handleSyncResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"getconfigrequest\"\n          method=\"[[method]]\"\n          body=\"[[configParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__getConfigPath]]\"\n          handle-as=\"json\"\n          on-response=\"handleConfigResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"setconfigrequest\"\n          method=\"[[method]]\"\n          body=\"[[setConfigParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__setConfigPath]]\"\n          handle-as=\"json\"\n          on-response=\"handleSetConfigResponse\"\n        ></iron-ajax>\n        <iron-ajax\n          id=\"getuserdatarequest\"\n          method=\"[[method]]\"\n          body=\"[[getUserDataParams]]\"\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          content-type=\"application/json\"\n          url=\"[[__getUserDataPath]]\"\n          handle-as=\"json\"\n          on-response=\"handleGetUserDataResponse\"\n        ></iron-ajax>\n      </div>\n      <div id=\"loading\" data-loading\\$=\"[[!__loading]]\">\n        <hexagon-loader\n          item-count=\"4\"\n          color=\"white\"\n          loading\n          size=\"large\"\n        ></hexagon-loader>\n      </div>\n      <app-header reveals>\n        <app-toolbar>\n          <slot name=\"app-header-pre\"></slot>\n          <div class=\"operations\">\n            <paper-button\n              on-click=\"_addTap\"\n              id=\"add\"\n              raised\n              hidden$=\"[[!loggedIn]]\"\n            >\n              <iron-icon icon=\"icons:add\"></iron-icon> Create\n            </paper-button>\n            <paper-button\n              on-click=\"_importTap\"\n              id=\"import\"\n              raised\n              hidden$=\"[[!loggedIn]]\"\n            >\n              <iron-icon icon=\"icons:cloud-download\"></iron-icon> Import\n            </paper-button>\n          </div>\n          <div class=\"main-title\" hidden$=\"[[!loggedIn]]\">[[title]]</div>\n          <div class=\"selected-operations\" data-hidden$=\"[[!hasSelectedItems]]\">\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"publish\" raised>\n              <iron-icon icon=\"editor:publish\"></iron-icon> Publish\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"sync\" raised>\n              <iron-icon icon=\"notification:sync\"></iron-icon> Sync\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"clone\" raised>\n              <iron-icon icon=\"icons:content-copy\"></iron-icon> Clone\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"download\" raised>\n              <iron-icon icon=\"icons:file-download\"></iron-icon> Download\n            </paper-button>\n            <paper-button on-click=\"_bulkSitesConfirm\" id=\"archive\" raised>\n              <iron-icon icon=\"icons:archive\"></iron-icon> Archive\n            </paper-button>\n            <paper-button\n              on-click=\"_bulkSitesConfirm\"\n              id=\"delete\"\n              raised\n              class=\"danger\"\n            >\n              <iron-icon icon=\"icons:delete-forever\"></iron-icon> Delete\n            </paper-button>\n          </div>\n          <div class=\"operations\">\n            <paper-button\n              on-click=\"_settingsTap\"\n              id=\"settings\"\n              raised\n              hidden$=\"[[!showSpecialButtons(hideGlobalSettings,loggedIn)]]\"\n            >\n              <iron-icon icon=\"icons:settings\"></iron-icon> Settings\n            </paper-button>\n            <paper-button\n              hidden$=\"[[!showSpecialButtons(hideLogin,loggedIn)]]\"\n              on-click=\"_loginUserRoutine\"\n              id=\"login\"\n              ><iron-icon icon=\"[[__loginIcon]]\"></iron-icon>\n              [[__loginText]]</paper-button\n            >\n          </div>\n        </app-toolbar>\n      </app-header>\n\n      <vaadin-grid\n        hidden$=\"[[!loggedIn]]\"\n        id=\"grid\"\n        items=\"[[sites]]\"\n        theme=\"row-dividers\"\n        column-reordering-allowed\n        multi-sort\n      >\n        <vaadin-grid-selection-column\n          auto-select\n          frozen\n        ></vaadin-grid-selection-column>\n        <vaadin-grid-filter-column width=\"6em\" path=\"title\">\n          <template>\n            <portal-launcher>\n              <a tabindex=\"-1\" href$=\"[[item.location]]\">\n                <paper-button raised class=\"site-title\">\n                  [[item.title]]\n                </paper-button>\n                <div class=\"small-location\">\n                  [[cleanLocation(item.location)]]\n                </div>\n              </a>\n            </portal-launcher>\n          </template>\n        </vaadin-grid-filter-column>\n        <vaadin-grid-filter-column\n          width=\"2em\"\n          path=\"metadata.theme.name\"\n          header=\"Theme\"\n        ></vaadin-grid-filter-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          path=\"metadata.pageCount\"\n          header=\"Pages\"\n        ></vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          header=\"Last published\"\n          path=\"metadata.lastPublished\"\n        >\n          <template>\n            <template\n              is=\"dom-if\"\n              if=\"[[item.metadata.site.static.lastPublished]]\"\n            >\n              <simple-datetime\n                format=\"M jS, Y\"\n                timestamp=\"[[item.metadata.site.static.lastPublished]]\"\n                unix\n              ></simple-datetime>\n            </template>\n          </template>\n        </vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          header=\"Updated\"\n          path=\"metadata.updated\"\n        >\n          <template>\n            <template is=\"dom-if\" if=\"[[item.metadata.site.updated]]\">\n              <simple-datetime\n                format=\"M jS, Y\"\n                timestamp=\"[[item.metadata.site.updated]]\"\n                unix\n              ></simple-datetime>\n            </template>\n          </template>\n        </vaadin-grid-sort-column>\n        <vaadin-grid-sort-column\n          width=\"1em\"\n          header=\"Created\"\n          path=\"metadata.created\"\n        >\n          <template>\n            <template is=\"dom-if\" if=\"[[item.metadata.site.created]]\">\n              <simple-datetime\n                format=\"M jS, Y\"\n                timestamp=\"[[item.metadata.site.created]]\"\n                unix\n              ></simple-datetime>\n            </template>\n          </template>\n        </vaadin-grid-sort-column>\n        <vaadin-grid-column width=\"1em\" header=\"Icon\">\n          <template\n            ><iron-icon\n              icon=\"[[item.metadata.theme.variables.icon]]\"\n            ></iron-icon\n          ></template>\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"1em\" header=\"Color\">\n          <template>\n            <div\n              style$=\"border:1px solid black;width:48px;height:48px;background-color:[[item.metadata.theme.variables.hexCode]];\"\n            ></div>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"1em\" header=\"Banner\">\n          <template\n            ><iron-image\n              sizing=\"contain\"\n              preload\n              src$=\"[[item.metadata.theme.variables.image]]\"\n              style=\"width:100px; height:48px;\"\n            ></iron-image\n          ></template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n      <div class=\"login-prompt\" hidden$=\"[[loggedIn]]\">\n        <simple-login>\n          <hax-logo size=\"mini\" hide-hax><span>HAXcms login</span></hax-logo>\n          <div class=\"camera-buttons\">\n            <paper-icon-button\n              id=\"snap\"\n              icon=\"image:camera-alt\"\n              title=\"Snap photo\"\n            ></paper-icon-button>\n            <paper-icon-button\n              id=\"newsnap\"\n              icon=\"icons:cancel\"\n              title=\"Clear photo\"\n            ></paper-icon-button>\n          </div>\n          <simple-login-avatar>\n            <div id=\"selfie\"></div>\n            <simple-login-camera id=\"camera\" autoplay></simple-login-camera>\n          </simple-login-avatar>\n          <p class=\"forgot\" slot=\"buttons\">\n            Forget your login? Check <strong>_config/config.php</strong>\n          </p>\n        </simple-login>\n        <vaadin-upload\n          capture\n          headers='{\"Authorization\": \"Bearer [[jwt]]\"}'\n          method=\"[[method]]\"\n          form-data-name=\"file-upload\"\n          hidden\n          id=\"fileupload\"\n        ></vaadin-upload>\n      </div>\n      <paper-dialog id=\"confirm\">\n        <h2 class=\"dialog-header\">\n          [[activeOpertion]] these [[selectedItems.length]] sites\n        </h2>\n        <paper-dialog-scrollable>\n          <ul>\n            <dom-repeat items=\"[[selectedItems]]\" as=\"site\">\n              <template>\n                <li>[[site.title]]</li>\n              </template>\n            </dom-repeat>\n          </ul>\n        </paper-dialog-scrollable>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_confirmBulkOperation\"\n            dialog-confirm\n            id=\"bulksites\"\n            class=\"action-button\"\n            raised\n            ><iron-icon icon=\"icons:thumb-up\"></iron-icon> Yes,\n            [[activeOpertion]]</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"createsite\">\n        <h2 class=\"dialog-header\">Create new site</h2>\n        <paper-dialog-scrollable>\n          <form>\n            <simple-fields id=\"createsitefields\" autofocus></simple-fields>\n          </form>\n        </paper-dialog-scrollable>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_createSite\"\n            class=\"action-button\"\n            dialog-confirm\n            id=\"create\"\n            raised\n            ><iron-icon icon=\"icons:home\"></iron-icon> Create your new\n            site!</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"importsite\">\n        <h2 class=\"dialog-header\">Import site from git repo</h2>\n        <paper-input id=\"importurl\" label=\"Git url\"></paper-input>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_gitImportSite\"\n            class=\"action-button\"\n            dialog-confirm\n            id=\"importsite\"\n            raised\n            ><iron-icon icon=\"icons:home\"></iron-icon> Import</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n      <paper-dialog id=\"settingsdialog\">\n        <h2 class=\"dialog-header\">Edit HAXCMS configuration</h2>\n        <paper-dialog-scrollable>\n          <eco-json-schema-object id=\"settingsform\"></eco-json-schema-object>\n        </paper-dialog-scrollable>\n        <div class=\"buttons\">\n          <paper-button\n            on-click=\"_saveConfig\"\n            dialog-confirm\n            id=\"saveconfig\"\n            class=\"action-button\"\n            raised\n            ><iron-icon icon=\"icons:save\"></iron-icon> Save</paper-button\n          >\n          <paper-button class=\"action-button\" dialog-dismiss\n            ><iron-icon icon=\"icons:thumb-down\"></iron-icon>\n            Cancel</paper-button\n          >\n        </div>\n      </paper-dialog>\n    "]);

    _templateObject_7f101260e14a11e9bce923988a998e3c = function _templateObject_7f101260e14a11e9bce923988a998e3c() {
      return data;
    };

    return data;
  }

  /**
   * `haxcms-site-listing`
   * `A listing of all sites being managed by this instance.`
   */
  var HAXCMSSiteListing =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HAXCMSSiteListing, _PolymerElement);

    /**
     * created life cycle
     */
    function HAXCMSSiteListing() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteListing);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXCMSSiteListing).call(this));
      _this.SimpleColors = new _simpleColors.SimpleColors();
      (0, _settings.setPassiveTouchGestures)(true);
      window.HAXCMS = {};
      new Promise(function (res, rej) {
        return _require.default(["./haxcms-site-listing-deps.js"], res, rej);
      });
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(HAXCMSSiteListing, [{
      key: "_sitesResponseChanged",

      /**
       * Parse JSON Outline Schema for the items and bind that to sites
       */
      value: function _sitesResponseChanged(newValue, oldValue) {
        if (newValue) {
          if (babelHelpers.typeof(newValue.items) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.title = newValue.title;
            this.set("sites", []);
            this.set("sites", newValue.items);
            this.notifyPath("sites.*");
          }
        }
      }
    }, {
      key: "cleanLocation",
      value: function cleanLocation(location) {
        return location.replace("/_sites/", "").replace("/", "");
      }
    }, {
      key: "showSpecialButtons",

      /**
       * Show the login button if we have cause
       */
      value: function showSpecialButtons(hideButton, loggedIn) {
        if (hideButton) {
          return false;
        }

        if (!loggedIn) {
          return false;
        }

        return true;
      }
    }, {
      key: "_selectedItemsChanged",
      value: function _selectedItemsChanged(newValue) {
        if (newValue && newValue.length > 0) {
          this.hasSelectedItems = true;
        } else {
          this.hasSelectedItems = false;
        }
      }
    }, {
      key: "_dataSourceChanged",
      value: function _dataSourceChanged(newValue) {
        if (newValue) {
          this._dataSource = newValue + "?" + Math.floor(Date.now() / 1000);
        }
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "_jwtLoggedIn",
      value: function _jwtLoggedIn(e) {
        if (e.detail) {
          this.loggedIn = true;
        } else {
          this.loggedIn = false;
        }
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue) {
        if (newValue) {
          this.__editIcon = "icons:check";
        } else {
          this.__editIcon = "icons:create";
        }
      }
      /**
       * Open the new dialog when tapped
       */

    }, {
      key: "_addTap",
      value: function _addTap() {
        this._resetNewSiteForm();

        this.shadowRoot.querySelector("#createsite").opened = true;
      }
      /**
       * Open the import dialog when tapped
       */

    }, {
      key: "_importTap",
      value: function _importTap() {
        this.shadowRoot.querySelector("#importurl").value = "";
        this.shadowRoot.querySelector("#importsite").opened = true;
      }
      /**
       * Login state changed
       */

    }, {
      key: "_loggedInChanged",
      value: function _loggedInChanged(newValue, oldValue) {
        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (newValue) {
            document.body.setAttribute("data-logged-in", "data-logged-in");
            this.__loginText = "Log out";
            this.__loginIcon = "icons:account-circle";
            this.standardResponse("Welcome, log in successful!");
            this.shadowRoot.querySelector("#add").hidden = false;
          } else {
            document.body.removeAttribute("data-logged-in");
            this.__loginText = "Log in";
            this.__loginIcon = "icons:power-settings-new";
            this.standardResponse("You logged out");
            this.shadowRoot.querySelector("#add").hidden = true;
          }
        }
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "_jwtChanged",
      value: function _jwtChanged(newValue) {
        var _this2 = this;

        if (newValue) {
          this.__loginText = "Log out";
          this.__loginIcon = "icons:account-circle"; // see if we should update the photo from the webcam
          // this value is available if we hit camera snap earlier in the operation

          if (this.__cameraBlob) {
            var file = new File([this.__cameraBlob], "userPhoto" + Date.now() + ".jpg");
            this.shadowRoot.querySelector("#fileupload").target = this.__setUserPhotoPath + "&jwt=" + newValue;

            this.shadowRoot.querySelector("#fileupload")._addFile(file);

            this.shadowRoot.querySelector("#fileupload").uploadFiles();
          } // refresh user data request, delay this in case we uploaded a photo
          // @todo this is a lazy way of doing this


          setTimeout(function () {
            _this2.set("getUserDataParams", {});

            _this2.set("getUserDataParams", {
              jwt: newValue
            });

            _this2.notifyPath("getUserDataParams.*");

            _this2.shadowRoot.querySelector("#getuserdatarequest").generateRequest();
          }, 500);
        } else {
          this.__loginText = "Log in";
          this.__loginIcon = "icons:power-settings-new";
        }
      }
      /**
       * Request a user login if we need one or log out
       */

    }, {
      key: "_loginUserRoutine",
      value: function _loginUserRoutine(e) {
        this.shadowRoot.querySelector("#jwt").toggleLogin();
      }
      /**
       * Toggle edit state
       */

    }, {
      key: "_editTap",
      value: function _editTap(e) {
        this.editMode = !this.editMode;
      }
      /**
       * _settingsTap
       */

    }, {
      key: "_settingsTap",
      value: function _settingsTap(e) {
        this._loadConfig();

        this.shadowRoot.querySelector("#settingsdialog").opened = true;
      }
      /**
       * force the request to regenerate
       */

    }, {
      key: "refreshData",
      value: function refreshData(e) {
        this.shadowRoot.querySelector("#loaddata").generateRequest();
      }
    }, {
      key: "_gridSelectedItemsChanged",
      value: function _gridSelectedItemsChanged(e) {
        // skip splicing, just rebuild whole object
        this.set("selectedItems", []);
        this.set("selectedItems", e.path[0].selectedItems);
      }
      /**
       * Attached life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteListing.prototype), "connectedCallback", this).call(this); // if we're on an insecure environment, hide the buttons for camera

        if (!navigator.mediaDevices) {
          this.shadowRoot.querySelector("#snap").style.display = "none";
          this.shadowRoot.querySelector("#newsnap").style.display = "none";
        } // detect upload utilized


        this.shadowRoot.querySelector("#fileupload").addEventListener("upload-response", this.handleSetUserPhotoResponse.bind(this));

        if (this.jwt) {
          this.loggedIn = true;
        }

        window.addEventListener("sites-listing-refresh-data", this.refreshData.bind(this));
        (0, _renderStatus.afterNextRender)(this, function () {
          /**
           * These are our bad actors in polyfill'ed browsers.
           * This means that https://github.com/webcomponents/webcomponentsjs/commit/ce464bb533bf39b544c312906499a6044ee0d30d
           * explains things but basically if shadow-dom is polyfilled
           * then we can't safely execute a DOM manipulating execCommand.
           * This
           */
          if (document.head.createShadowRoot || document.head.attachShadow) {} else {
            console.warn("Shadow DOM missing, ALL YOUR IE R BELONG TO US");
            console.warn("HAXCMS DOES NOT LOVE YOUR OLD BROWSER FOR EDITING JUST VIEWING");
            console.warn("You get no authoring experience. Good day to you!");
            var evt = new CustomEvent("simple-toast-show", {
              bubbles: true,
              composed: true,
              cancelable: true,
              detail: {
                text: "WARNING: You are using a polyfilled browser. HAXcms requires modern browsers, please upgrade or switch to a modern browser to edit in HAXcms!",
                duration: 10000
              }
            });
            this.dispatchEvent(evt);
          }

          if (this.hideCamera) {
            this.shadowRoot.querySelector("#newsnap").classList.add("hide-camera");
            this.shadowRoot.querySelector("#snap").classList.add("hide-camera");
            this.shadowRoot.querySelector("#camera").classList.add("hide-camera");
          } else {
            new Promise(function (res, rej) {
              return _require.default(["../../../../simple-login/lib/simple-login-camera.js"], res, rej);
            });
          }

          this.addEventListener("simple-login-login", this.loginPromptEvent.bind(this));
          this.shadowRoot.querySelector("#grid").addEventListener("selected-items-changed", this._gridSelectedItemsChanged.bind(this));
          this.__loginPath = window.appSettings.login;
          this.__logoutPath = window.appSettings.logout;
          this.__setConfigPath = window.appSettings.setConfigPath;
          this.__getUserDataPath = window.appSettings.getUserDataPath;
          this.__setUserPhotoPath = window.appSettings.setUserPhotoPath;
          this.__getConfigPath = window.appSettings.getConfigPath;
          this.__createNewSitePath = window.appSettings.createNewSitePath;
          this.__gitImportSitePath = window.appSettings.gitImportSitePath;
          this.__downloadSitePath = window.appSettings.downloadSitePath;
          this.__archiveSitePath = window.appSettings.archiveSitePath;
          this.__cloneSitePath = window.appSettings.cloneSitePath;
          this.__publishSitePath = window.appSettings.publishSitePath;
          this.__syncSitePath = window.appSettings.syncSitePath;
          this.__revertSitePath = window.appSettings.revertSitePath;
          this.__deleteSitePath = window.appSettings.deleteSitePath; // case where backend has set the JWT ahead of time
          // useful for systems that are managing login above HAXcms

          if (window.appSettings.jwt) {
            this.set("jwt", window.appSettings.jwt);
          }

          document.body.addEventListener("haxcms-load-site", this.loadActiveSite.bind(this));
          this.shadowRoot.querySelector("#snap").addEventListener("click", this.snapPhoto.bind(this));
          this.shadowRoot.querySelector("#newsnap").addEventListener("click", this.clearPhoto.bind(this));
        });
      }
    }, {
      key: "snapPhoto",
      value: function () {
        var _snapPhoto = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee(e) {
          var camera, img, selfie;
          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  camera = this.shadowRoot.querySelector("#camera"); // snap the photo to a blob

                  _context.next = 3;
                  return camera.takeASnap().then(camera.imageBlob);

                case 3:
                  this.__cameraBlob = _context.sent;
                  // make an img to show on screen
                  img = document.createElement("img"); // turn blob into a url to visualize locally

                  img.src = URL.createObjectURL(this.__cameraBlob);
                  camera.removeAttribute("autoplay");
                  selfie = this.shadowRoot.querySelector("#selfie");
                  selfie.innerHTML = ""; // append to dom so they see the photo

                  selfie.appendChild(img);
                  selfie.classList.add("has-snap");

                case 11:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function snapPhoto(_x) {
          return _snapPhoto.apply(this, arguments);
        }

        return snapPhoto;
      }()
    }, {
      key: "clearPhoto",
      value: function clearPhoto(e) {
        var camera = this.shadowRoot.querySelector("#camera");
        camera.setAttribute("autoplay", "autoplay");
        var selfie = this.shadowRoot.querySelector("#selfie");
        selfie.innerHTML = "";
        selfie.classList.remove("has-snap");
      }
    }, {
      key: "loginPromptEvent",
      value: function loginPromptEvent(e) {
        this.set("jwtBody", {});
        this.set("jwtBody", {
          u: e.detail.u,
          p: e.detail.p
        });

        this._loginUserRoutine(e);
      }
      /**
       * queue up the site creation form
       */

    }, {
      key: "_resetNewSiteForm",
      value: function _resetNewSiteForm() {
        // establish the theme options based on globals that were set
        var themeOptions = [];
        var firstTheme = null;

        for (var theme in window.appSettings.themes) {
          themeOptions[theme] = window.appSettings.themes[theme].name;

          if (!firstTheme) {
            firstTheme = theme;
          }
        }

        var fields = this.shadowRoot.querySelector("#createsitefields");
        fields.fields = [{
          property: "id",
          title: "id",
          description: "",
          inputMethod: "boolean",
          hidden: true
        }, {
          property: "manifest",
          inputMethod: "tabs",
          properties: [{
            property: "site",
            title: "Details",
            properties: [{
              property: "name",
              title: "Site name",
              description: "This forms the folder name and metadata title for the site",
              inputMethod: "textfield",
              required: true
            }, {
              property: "domain",
              title: "Domain",
              description: "Optional domain name",
              inputMethod: "textfield"
            }, {
              property: "description",
              title: "Description",
              description: "Addition detail, for personal use as well as search engine optimization",
              inputMethod: "textfield"
            }]
          }, {
            property: "theme",
            title: "Theme",
            properties: [{
              property: "name",
              title: "Theme",
              description: "Design for presenting your new site",
              inputMethod: "select",
              allowNull: false,
              options: themeOptions
            }, {
              property: "image",
              title: "Image",
              description: "The image is typically used as the banner in themes",
              inputMethod: "haxupload",
              validationType: "url"
            }, {
              property: "icon",
              title: "Pick an icon.",
              description: "The icon is used in some designs areas to help you know what site your on",
              inputMethod: "iconpicker"
            }, {
              property: "color",
              title: "Color",
              description: "Choose a primary color to tint the UI or be used in the theme",
              inputMethod: "colorpicker"
            }]
          }]
        }];
        fields.value = {
          id: false,
          manifest: {
            site: {
              name: "",
              domain: "",
              description: ""
            },
            theme: {
              name: firstTheme,
              image: "assets/banner.jpg",
              color: "blue",
              icon: "icons:add-circle-outline"
            }
          }
        };
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("sites-listing-refresh-data", this.refreshData.bind(this));
        document.body.removeEventListener("haxcms-load-site", this.loadActiveSite.bind(this));
        this.removeEventListener("simple-login-login", this.loginPromptEvent.bind(this));
        this.shadowRoot.querySelector("#snap").removeEventListener("click", this.snapPhoto.bind(this));
        this.shadowRoot.querySelector("#newsnap").removeEventListener("click", this.clearPhoto.bind(this));
        this.shadowRoot.querySelector("#grid").removeEventListener("selected-items-changed", this._gridSelectedItemsChanged.bind(this));
        this.shadowRoot.querySelector("#jwt").removeEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteListing.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Ready life cycle
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteListing.prototype), "ready", this).call(this);
        this.shadowRoot.querySelector("#jwt").addEventListener("jwt-logged-in", this._jwtLoggedIn.bind(this));
        window.JSONOutlineSchema.requestAvailability();
        window.SimpleModal.requestAvailability();
        window.SimpleToast.requestAvailability();
      }
      /**
       * Simple method of loading whatever's been dictated as active.
       */

    }, {
      key: "loadActiveSite",
      value: function loadActiveSite(e) {
        var findSite = this.sites.filter(function (site) {
          if (site.id !== e.detail.id) {
            return false;
          }

          return true;
        });
        var item = findSite.pop(); // if location isn't there, push out to it

        if (item.location) {
          window.open(item.location);
        } else {
          window.open(this.basePath + "_sites/" + item.metadata.site.name + "/");
        }
      }
      /**
       * Import a site from a git repo
       */

    }, {
      key: "_gitImportSite",
      value: function _gitImportSite(e) {
        var values = Object.assign({
          jwt: this.jwt,
          site: {
            git: {
              url: this.shadowRoot.querySelector("#importurl").value
            }
          }
        });
        this.set("gitImportParams", {});
        this.set("gitImportParams", values);
        this.notifyPath("gitImportParams.*");
        this.shadowRoot.querySelector("#gitimportrequest").generateRequest();
      }
      /**
       * Create a new site button was clicked
       */

    }, {
      key: "_createSite",
      value: function _createSite(e) {
        var values = Object.assign({
          jwt: this.jwt
        }, this.shadowRoot.querySelector("#createsitefields").value.manifest);
        this.set("createParams", {});
        this.set("createParams", values);
        this.notifyPath("createParams.*");
        this.shadowRoot.querySelector("#createrequest").generateRequest();
      }
      /**
       * Download site button was hit, package and send a zip
       */

    }, {
      key: "_downloadSites",
      value: function () {
        var _downloadSites2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee2(e) {
          var i;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  this.set("downloadParams", {});
                  this.set("downloadParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("downloadParams.*");
                  _context2.t0 = regeneratorRuntime.keys(this.selectedItems);

                case 4:
                  if ((_context2.t1 = _context2.t0()).done) {
                    _context2.next = 14;
                    break;
                  }

                  i = _context2.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("downloadParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("downloadParams.site.name");
                  _context2.next = 12;
                  return this.shadowRoot.querySelector("#downloadrequest").generateRequest();

                case 12:
                  _context2.next = 4;
                  break;

                case 14:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function _downloadSites(_x2) {
          return _downloadSites2.apply(this, arguments);
        }

        return _downloadSites;
      }()
      /**
       * Archive sites
       */

    }, {
      key: "_archiveSites",
      value: function () {
        var _archiveSites2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee3(e) {
          var i;
          return regeneratorRuntime.wrap(function _callee3$(_context3) {
            while (1) {
              switch (_context3.prev = _context3.next) {
                case 0:
                  this.set("archiveParams", {});
                  this.set("archiveParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("archiveParams.*");
                  _context3.t0 = regeneratorRuntime.keys(this.selectedItems);

                case 4:
                  if ((_context3.t1 = _context3.t0()).done) {
                    _context3.next = 14;
                    break;
                  }

                  i = _context3.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("archiveParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("archiveParams.site.name");
                  _context3.next = 12;
                  return this.shadowRoot.querySelector("#archiverequest").generateRequest();

                case 12:
                  _context3.next = 4;
                  break;

                case 14:
                case "end":
                  return _context3.stop();
              }
            }
          }, _callee3, this);
        }));

        function _archiveSites(_x3) {
          return _archiveSites2.apply(this, arguments);
        }

        return _archiveSites;
      }()
      /**
       * Confirm delete
       */

    }, {
      key: "_bulkSitesConfirm",
      value: function _bulkSitesConfirm(e) {
        this.activeOpertion = e.target.id;
        this.shadowRoot.querySelector("#confirm").opened = true;
      }
    }, {
      key: "_confirmBulkOperation",
      value: function () {
        var _confirmBulkOperation2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee4(e) {
          return regeneratorRuntime.wrap(function _callee4$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  _context4.next = 2;
                  return this["_" + this.activeOpertion + "Sites"]();

                case 2:
                  this.activeOpertion = "";
                  this.shadowRoot.querySelector("#grid").set("selectedItems", []);

                case 4:
                case "end":
                  return _context4.stop();
              }
            }
          }, _callee4, this);
        }));

        function _confirmBulkOperation(_x4) {
          return _confirmBulkOperation2.apply(this, arguments);
        }

        return _confirmBulkOperation;
      }()
      /**
       * Delete sites
       */

    }, {
      key: "_deleteSites",
      value: function () {
        var _deleteSites2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee5(e) {
          var i;
          return regeneratorRuntime.wrap(function _callee5$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  this.set("deleteParams", {});
                  this.set("deleteParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("deleteParams.*");
                  _context5.t0 = regeneratorRuntime.keys(this.selectedItems);

                case 4:
                  if ((_context5.t1 = _context5.t0()).done) {
                    _context5.next = 14;
                    break;
                  }

                  i = _context5.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("deleteParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("deleteParams.site.name");
                  _context5.next = 12;
                  return this.shadowRoot.querySelector("#deleterequest").generateRequest();

                case 12:
                  _context5.next = 4;
                  break;

                case 14:
                case "end":
                  return _context5.stop();
              }
            }
          }, _callee5, this);
        }));

        function _deleteSites(_x5) {
          return _deleteSites2.apply(this, arguments);
        }

        return _deleteSites;
      }()
      /**
       * Clone sites
       */

    }, {
      key: "_cloneSites",
      value: function () {
        var _cloneSites2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee6(e) {
          var i;
          return regeneratorRuntime.wrap(function _callee6$(_context6) {
            while (1) {
              switch (_context6.prev = _context6.next) {
                case 0:
                  this.set("cloneParams", {});
                  this.set("cloneParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("cloneParams.*");
                  _context6.t0 = regeneratorRuntime.keys(this.selectedItems);

                case 4:
                  if ((_context6.t1 = _context6.t0()).done) {
                    _context6.next = 14;
                    break;
                  }

                  i = _context6.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("cloneParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("cloneParams.site.name");
                  _context6.next = 12;
                  return this.shadowRoot.querySelector("#clonerequest").generateRequest();

                case 12:
                  _context6.next = 4;
                  break;

                case 14:
                case "end":
                  return _context6.stop();
              }
            }
          }, _callee6, this);
        }));

        function _cloneSites(_x6) {
          return _cloneSites2.apply(this, arguments);
        }

        return _cloneSites;
      }()
      /**
       * Clone sites
       */

    }, {
      key: "_publishSites",
      value: function () {
        var _publishSites2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee7(e) {
          var i;
          return regeneratorRuntime.wrap(function _callee7$(_context7) {
            while (1) {
              switch (_context7.prev = _context7.next) {
                case 0:
                  this.set("publishParams", {});
                  this.set("publishParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("publishParams.*");
                  _context7.t0 = regeneratorRuntime.keys(this.selectedItems);

                case 4:
                  if ((_context7.t1 = _context7.t0()).done) {
                    _context7.next = 14;
                    break;
                  }

                  i = _context7.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("publishParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("publishParams.site.name");
                  _context7.next = 12;
                  return this.shadowRoot.querySelector("#publishrequest").generateRequest();

                case 12:
                  _context7.next = 4;
                  break;

                case 14:
                case "end":
                  return _context7.stop();
              }
            }
          }, _callee7, this);
        }));

        function _publishSites(_x7) {
          return _publishSites2.apply(this, arguments);
        }

        return _publishSites;
      }()
      /**
       * sync sites
       */

    }, {
      key: "_syncSites",
      value: function () {
        var _syncSites2 = babelHelpers.asyncToGenerator(
        /*#__PURE__*/
        regeneratorRuntime.mark(function _callee8(e) {
          var i;
          return regeneratorRuntime.wrap(function _callee8$(_context8) {
            while (1) {
              switch (_context8.prev = _context8.next) {
                case 0:
                  this.set("syncParams", {});
                  this.set("syncParams", {
                    jwt: this.jwt,
                    site: {}
                  });
                  this.notifyPath("syncParams.*");
                  _context8.t0 = regeneratorRuntime.keys(this.selectedItems);

                case 4:
                  if ((_context8.t1 = _context8.t0()).done) {
                    _context8.next = 14;
                    break;
                  }

                  i = _context8.t1.value;
                  this.set("activeItem", {});
                  this.set("activeItem", this.selectedItems[i]);
                  this.set("syncParams.site.name", this.selectedItems[i].metadata.site.name);
                  this.notifyPath("syncParams.site.name");
                  _context8.next = 12;
                  return this.shadowRoot.querySelector("#syncrequest").generateRequest();

                case 12:
                  _context8.next = 4;
                  break;

                case 14:
                case "end":
                  return _context8.stop();
              }
            }
          }, _callee8, this);
        }));

        function _syncSites(_x8) {
          return _syncSites2.apply(this, arguments);
        }

        return _syncSites;
      }()
      /**
       * Load configuration
       */

    }, {
      key: "_loadConfig",
      value: function _loadConfig() {
        // pass along the jwt for user "session" purposes
        this.set("configParams", {});
        this.set("configParams", {
          jwt: this.jwt,
          token: this.createParams.token
        });
        this.notifyPath("configParams.*");
        this.shadowRoot.querySelector("#getconfigrequest").generateRequest();
      }
      /**
       * Save configuration
       */

    }, {
      key: "_saveConfig",
      value: function _saveConfig(e) {
        window.HAXCMS.config.values = this.shadowRoot.querySelector("#settingsform").value;
        this.set("setConfigParams", {});
        this.set("setConfigParams", {
          jwt: this.jwt,
          token: this.createParams.token,
          values: window.HAXCMS.config.values
        });
        this.notifyPath("setConfigParams.*");
        this.shadowRoot.querySelector("#setconfigrequest").generateRequest();
      }
      /**
       * Standard response that refreshes the listing too
       */

    }, {
      key: "standardResponse",
      value: function standardResponse(toast) {
        var refresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;

        if (refresh) {
          this.dispatchEvent(new CustomEvent("sites-listing-refresh-data", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: true
          }));
        }

        this.dispatchEvent(new CustomEvent("simple-toast-show", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            text: toast,
            duration: 5000
          }
        }));
      }
      /**
       * Create a new site button was clicked
       */

    }, {
      key: "handleCreateResponse",
      value: function handleCreateResponse(e) {
        // update the listing data
        this._dataSource = this.dataSource + "?" + Math.floor(Date.now() / 1000);
        this.standardResponse(e.detail.response.title + " created!");
      }
      /**
       * Git import site response
       */

    }, {
      key: "handleGitImportResponse",
      value: function handleGitImportResponse(e) {
        // update the listing data
        this._dataSource = this.dataSource + "?" + Math.floor(Date.now() / 1000);
        this.standardResponse(e.detail.response.title + " imported!");
      }
    }, {
      key: "handleConfigResponse",
      value: function handleConfigResponse(e) {
        window.HAXCMS.config = e.detail.response;
        this.shadowRoot.querySelector("#settingsform").set("schema", window.HAXCMS.config.schema);
        this.shadowRoot.querySelector("#settingsform").set("value", window.HAXCMS.config.values);
        var evt = document.createEvent("UIEvents");
        evt.initUIEvent("resize", true, false, window, 0);
        window.dispatchEvent(evt);
      }
    }, {
      key: "handleSetConfigResponse",
      value: function handleSetConfigResponse(e) {
        this.shadowRoot.querySelector("#settingsdialog").opened = false;
        this.standardResponse("HAXCMS configuration updated!");
      }
      /**
       * Load user data up from the backend
       */

    }, {
      key: "handleGetUserDataResponse",
      value: function handleGetUserDataResponse(e) {
        this.userData = e.detail.response.data;
      }
      /**
       * Callback after saving a photo to the backend
       */

    }, {
      key: "handleSetUserPhotoResponse",
      value: function handleSetUserPhotoResponse(e) {
        // remove this once we've saved it
        delete this.__cameraBlob;
        this.standardResponse("User photo saved!", false);
      }
      /**
       * Download a site
       */

    }, {
      key: "handleDownloadResponse",
      value: function handleDownloadResponse(e) {
        var element = document.createElement("a");
        element.setAttribute("href", e.detail.response.link);
        element.style.display = "none";
        document.body.appendChild(element);
        element.click();
        document.body.removeChild(element);
        this.standardResponse(this.activeItem.title + " downloaded!");
      }
    }, {
      key: "handleArchiveResponse",
      value: function handleArchiveResponse(e) {
        this.standardResponse(this.activeItem.title + " archived!");
      }
    }, {
      key: "handleDeleteResponse",
      value: function handleDeleteResponse(e) {
        this.standardResponse(this.activeItem.title + " deleted!");
      }
    }, {
      key: "handleCloneResponse",
      value: function handleCloneResponse(e) {
        this.standardResponse(this.activeItem.title + " cloned!");
      }
    }, {
      key: "handlePublishResponse",
      value: function handlePublishResponse(e) {
        this.standardResponse(this.activeItem.title + " published!");
      }
    }, {
      key: "handleSyncResponse",
      value: function handleSyncResponse(e) {
        this.standardResponse(this.activeItem.title + " published!");
      }
    }], [{
      key: "tag",
      get: function get() {
        return "haxcms-site-listing";
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_7f101260e14a11e9bce923988a998e3c());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          __loading: {
            type: Boolean
          },
          jwtBody: {
            type: Object,
            value: {}
          },

          /**
           * Object, JSON Outline Schema format
           */
          sitesResponse: {
            type: Object,
            notify: true,
            observer: "_sitesResponseChanged"
          },
          method: {
            type: String,
            value: "POST"
          },

          /**
           * Title
           */
          title: {
            type: String,
            value: "My sites"
          },
          sites: {
            type: Array,
            notify: true
          },

          /**
           * Base path of where this is located.
           */
          basePath: {
            type: String
          },

          /**
           * If we should hide the login button all the time or not
           */
          hideLogin: {
            type: Boolean,
            value: false
          },

          /**
           * If we should hide the login button all the time or not
           */
          hideGlobalSettings: {
            type: Boolean,
            value: false
          },

          /**
           * Data Source to power the loading of sites in JSON Outline Schema format.
           */
          dataSource: {
            type: String,
            observer: "_dataSourceChanged"
          },

          /**
           * JSON Web token
           */
          jwt: {
            type: String,
            notify: true,
            observer: "_jwtChanged"
          },
          userData: {
            type: Object,
            value: {}
          },

          /**
           * Request params for creating a new site
           */
          createParams: {
            type: Object,
            value: {}
          },
          downloadParams: {
            type: Object,
            value: {}
          },
          deleteParams: {
            type: Object,
            value: {}
          },
          cloneParams: {
            type: Object,
            value: {}
          },
          publishParams: {
            type: Object,
            value: {}
          },
          syncParams: {
            type: Object,
            value: {}
          },
          archiveParams: {
            type: Object,
            value: {}
          },
          configParams: {
            type: Object,
            value: {}
          },
          setConfigParams: {
            type: Object,
            value: {}
          },
          getUserDataParams: {
            type: Object,
            value: {}
          },
          activeOpertion: {
            type: String
          },
          selectedItems: {
            type: Array,
            value: [],
            observer: "_selectedItemsChanged"
          },

          /**
           * Active item that's being reviewed / has bubbled up.
           */
          activeItem: {
            type: Object,
            notify: true
          },

          /**
           * Logged in state
           */
          loggedIn: {
            type: Boolean,
            value: false,
            notify: true,
            reflectToAttribute: true,
            observer: "_loggedInChanged"
          },

          /**
           * Edit mode
           */
          editMode: {
            type: Boolean,
            notify: true,
            reflectToAttribute: true,
            value: false,
            observer: "_editModeChanged"
          },
          hasSelectedItems: {
            type: Boolean,
            value: false
          },
          hideCamera: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return HAXCMSSiteListing;
  }(_polymerElement.PolymerElement);

  _exports.HAXCMSSiteListing = HAXCMSSiteListing;
  window.customElements.define(HAXCMSSiteListing.tag, HAXCMSSiteListing);
});