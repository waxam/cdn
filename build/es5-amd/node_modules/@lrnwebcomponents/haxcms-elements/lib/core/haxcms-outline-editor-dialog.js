define(["exports", "../../../../lit/index.js", "./haxcms-site-store.js", "../../../../mobx/dist/mobx.esm.js", "../../../json-outline-schema/json-outline-schema.js", "../../../editable-outline/editable-outline.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js"], function (_exports, _index, _haxcmsSiteStore, _mobxEsm, _jsonOutlineSchema, _editableOutline, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSOutlineEditorDialog = void 0;

  var _templateObject_45ab8030ce4711ecb13bcf602138080f, _templateObject2_45ab8030ce4711ecb13bcf602138080f;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-outline-editor-dialog`
   * `Dialog for presenting an editable outline`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   */
  var HAXCMSOutlineEditorDialog = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HAXCMSOutlineEditorDialog, _LitElement);

    var _super = _createSuper(HAXCMSOutlineEditorDialog);

    function HAXCMSOutlineEditorDialog() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSOutlineEditorDialog);
      _this = _super.call(this);
      _this.__disposer = [];
      _this.viewMode = false;
      return _this;
    }

    babelHelpers.createClass(HAXCMSOutlineEditorDialog, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_45ab8030ce4711ecb13bcf602138080f || (_templateObject_45ab8030ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <editable-outline\n        id=\"outline\"\n        edit-mode\n        .hidden=\"", "\"\n        .items=\"", "\"\n      ></editable-outline>\n      <div class=\"buttons\">\n        <button id=\"savebtn\" @click=\"", "\">\n          <simple-icon icon=\"icons:save\" dark></simple-icon>Save\n        </button>\n        <button @click=\"", "\">\n          <simple-icon icon=\"icons:cancel\"></simple-icon>Cancel\n        </button>\n      </div>\n    "])), this.viewMode, this.manifestItems, this._saveTap, this._cancelTap);
      }
    }, {
      key: "updated",
      value:
      /**
       * LitElement property change life cycle
       */
      function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened") {
            // notify
            _this2.dispatchEvent(new CustomEvent("opened-changed", {
              detail: _this2[propName]
            }));
          }

          if (propName == "manifestItems") {
            // observer
            _this2._manifestItemsChanged(_this2[propName], oldValue); // notify


            _this2.dispatchEvent(new CustomEvent("manifest-edit-mode-changed", {
              detail: _this2[propName]
            }));
          }
        });
      }
    }, {
      key: "_manifestItemsChanged",
      value: function _manifestItemsChanged(newValue) {
        if (newValue) {
          window.JSONOutlineSchema.requestAvailability().items = newValue;
          this.manifestItemsStatic = JSON.stringify(newValue, null, 2);
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        this.shadowRoot.querySelector("#outline").importJsonOutlineSchemaItems();
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSOutlineEditorDialog.prototype), "connectedCallback", this).call(this);
        (0, _mobxEsm.autorun)(function (reaction) {
          _this3.manifestItems = babelHelpers.toConsumableArray((0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest.items));

          _this3.__disposer.push(reaction);
        });
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSOutlineEditorDialog.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Save hit, send the message to push up the outline changes.
       */

    }, {
      key: "_saveTap",
      value: function _saveTap(e) {
        var _this4 = this;

        _haxcmsSiteStore.store.playSound('click');

        window.dispatchEvent(new CustomEvent("haxcms-save-outline", {
          bubbles: true,
          composed: true,
          detail: this.shadowRoot.querySelector("#outline").exportJsonOutlineSchemaItems(true)
        }));
        setTimeout(function () {
          // ensure things don't conflict w/ the modal if its around
          _this4.dispatchEvent(new CustomEvent("simple-modal-hide", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: false
          }));
        }, 0);
      }
    }, {
      key: "_cancelTap",
      value: function _cancelTap(e) {
        _haxcmsSiteStore.store.playSound('error');

        this.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: false
        }));
      }
    }], [{
      key: "styles",
      get:
      /**
       * LitElement constructable styles enhancement
       */
      function get() {
        return [(0, _index.css)(_templateObject2_45ab8030ce4711ecb13bcf602138080f || (_templateObject2_45ab8030ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          height: 60vh;\n          min-width: 50vw;\n          overflow: auto;\n        }\n        .buttons {\n          position: absolute;\n          bottom: 0;\n          z-index: 1000000;\n          background-color: var(--simple-modal-titlebar-background, #000000);\n          color: var(--simple-modal-titlebar-color, #ffffff);\n          left: 0;\n          right: 0;\n        }\n        .buttons button {\n          color: black;\n          background-color: white;\n        }\n        simple-icon {\n          margin-right: 4px;\n        }\n        editable-outline:not(:defined) {\n          display: none;\n        }\n        #toggle {\n          float: right;\n          text-transform: unset;\n        }\n        #savebtn {\n          color: white;\n          background-color: var(--haxcms-color, #2196f3);\n        }\n        editable-outline {\n          margin-bottom: 32px;\n        }\n      "])))];
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "haxcms-outline-editor-dialog";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * opened state of the dialog inside here
           */
          opened: {
            type: Boolean
          },

          /**
           * Outline of items in json outline schema format
           */
          manifestItems: {
            type: Array
          },

          /**
           * Stringify'ed representation of items
           */
          manifestItemsStatic: {
            type: String,
            attribute: "manifest-items-static"
          },

          /**
           * Display label, switch when hitting the toggle button
           */
          viewLabel: {
            type: String,
            attribute: "view-label"
          },

          /**
           * Which edit mode to display
           */
          viewMode: {
            type: Boolean,
            attribute: "view-mode"
          }
        };
      }
    }]);
    return HAXCMSOutlineEditorDialog;
  }(_index.LitElement);

  _exports.HAXCMSOutlineEditorDialog = HAXCMSOutlineEditorDialog;
  window.customElements.define(HAXCMSOutlineEditorDialog.tag, HAXCMSOutlineEditorDialog);
});