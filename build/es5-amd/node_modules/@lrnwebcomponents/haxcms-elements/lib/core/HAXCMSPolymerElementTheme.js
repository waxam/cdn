define(["exports", "../../../../@polymer/polymer/polymer-element.js", "./HAXCMSThemeWiring.js"], function (_exports, _polymerElement, _HAXCMSThemeWiring) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSPolymerElementTheme = void 0;

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * PolymerElement Version of HAXCMSTheme
   */
  var HAXCMSPolymerElementTheme =
  /*#__PURE__*/
  function (_HAXCMSTheme) {
    babelHelpers.inherits(HAXCMSPolymerElementTheme, _HAXCMSTheme);

    function HAXCMSPolymerElementTheme() {
      babelHelpers.classCallCheck(this, HAXCMSPolymerElementTheme);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXCMSPolymerElementTheme).apply(this, arguments));
    }

    babelHelpers.createClass(HAXCMSPolymerElementTheme, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSPolymerElementTheme.prototype), "connectedCallback", this).call(this); // we don't have a content container, establish one

        if (babelHelpers.typeof(this.contentContainer) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.contentContainer = this.shadowRoot.querySelector("#contentcontainer");
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return babelHelpers.objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSPolymerElementTheme), "properties", this), {
          /**
           * Class for the color
           */
          hexColor: {
            type: String
          },

          /**
           * Color class work to apply
           */
          color: {
            type: String,
            reflectToAttribute: true,
            observer: "_colorChanged"
          },

          /**
           * editting state for the page
           */
          editMode: {
            type: Boolean,
            reflectToAttribute: true,
            notify: true,
            value: false,
            observer: "_editModeChanged"
          },

          /**
           * editting state for the page
           */
          isLoggedIn: {
            type: Boolean,
            reflectToAttribute: true,
            notify: true,
            value: false
          },

          /**
           * DOM node that wraps the slot
           */
          contentContainer: {
            type: Object,
            notify: true,
            observer: "_contentContainerChanged"
          },

          /**
           * location as object
           */
          _location: {
            type: Object,
            observer: "_locationChanged"
          }
        });
      }
    }]);
    return HAXCMSPolymerElementTheme;
  }((0, _HAXCMSThemeWiring.HAXCMSTheme)(_polymerElement.PolymerElement));

  _exports.HAXCMSPolymerElementTheme = HAXCMSPolymerElementTheme;
});