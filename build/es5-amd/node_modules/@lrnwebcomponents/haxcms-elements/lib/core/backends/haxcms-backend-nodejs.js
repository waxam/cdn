define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../jwt-login/jwt-login.js", "../haxcms-site-store.js"], function (_exports, _require, _polymerElement, _jwtLogin, _haxcmsSiteStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSBackendNodeJS = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_0b4784c0e53311e9a0cfefb808989d41() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <jwt-login\n        id=\"jwt\"\n        url=\"[[jwtLoginLocation]]\"\n        url-logout=\"[[jwtLogoutLocation]]\"\n        jwt=\"{{jwt}}\"\n      ></jwt-login>\n    "]);

    _templateObject_0b4784c0e53311e9a0cfefb808989d41 = function _templateObject_0b4784c0e53311e9a0cfefb808989d41() {
      return data;
    };

    return data;
  }

  /**
   * `haxcms-backend-nodejs`
   * `a simple element to check for and fetch JWTs`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   */
  var HAXCMSBackendNodeJS =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HAXCMSBackendNodeJS, _PolymerElement);
    babelHelpers.createClass(HAXCMSBackendNodeJS, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "haxcms-backend-nodejs";
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_0b4784c0e53311e9a0cfefb808989d41());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Location of what endpoint to hit for
           */
          jwtLoginLocation: {
            type: String,
            value: function value() {
              if (window.appSettings) {
                return window.appSettings.login;
              }
            }
          },

          /**
           * Location of what endpoint to hit for logging out
           */
          jwtLogoutLocation: {
            type: String,
            value: function value() {
              if (window.appSettings) {
                return window.appSettings.logout;
              }
            }
          },

          /**
           * JSON Web token, it'll come from a global call if it's available
           */
          jwt: {
            type: String
          }
        };
      }
      /**
       * created life cycle
       */

    }]);

    function HAXCMSBackendNodeJS() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSBackendNodeJS);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXCMSBackendNodeJS).call(this));
      document.body.addEventListener("jwt-token", _this._jwtTokenFired.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }
    /**
     * detached life cycle
     */


    babelHelpers.createClass(HAXCMSBackendNodeJS, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        document.body.removeEventListener("jwt-token", this._jwtTokenFired.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSBackendNodeJS.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * JWT token fired, let's capture it
       */

    }, {
      key: "_jwtTokenFired",
      value: function _jwtTokenFired(e) {
        this.jwt = e.detail;
        _haxcmsSiteStore.store.jwt = this.jwt;
      }
      /**
       * Attached life cycle
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSBackendNodeJS.prototype), "connectedCallback", this).call(this);

        if (this.jwt != null && this.jwt != "" && typeof this.jwt == "string") {
          // attempt to dynamically import the hax cms site editor
          // which will appear to be injecting into the page
          // but because of this approach it should be non-blocking
          try {
            new Promise(function (res, rej) {
              return _require.default(["../haxcms-site-editor.js"], res, rej);
            }).then(function (e) {
              // if we don't have appSettings by this point
              // it means we don't actually have a backend / directions
              // this would be a published state or a state where
              // there is no actual backend to bother confiring with
              // possibly a user navigated to a site that doesn't
              // have JWT credentials but isn't actually published
              if (window.appSettings) {
                _haxcmsSiteStore.store.cmsSiteEditorAvailability();

                _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = _this2.jwt;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.saveNodePath = window.appSettings.saveNodePath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.saveManifestPath = window.appSettings.saveManifestPath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.saveOutlinePath = window.appSettings.saveOutlinePath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.getNodeFieldsPath = window.appSettings.getNodeFieldsPath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.getSiteFieldsPath = window.appSettings.getSiteFieldsPath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.getFormToken = window.appSettings.getFormToken;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.publishSitePath = window.appSettings.publishSitePath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.syncSitePath = window.appSettings.syncSitePath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.revertSitePath = window.appSettings.revertSitePath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.createNodePath = window.appSettings.createNodePath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.deleteNodePath = window.appSettings.deleteNodePath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.getUserDataPath = window.appSettings.getUserDataPath;
                _haxcmsSiteStore.store.cmsSiteEditor.instance.appStore = window.appSettings.appStore;
              }
            }, function (e) {//import failed
            });
          } catch (err) {// error in the event this is a double registration
          }
        } else {
          // other things will have to sort out the fact that while we
          // DO have a dynamic backend, we didn't get a hit on the JWT
          // meaning that we are in a dynamic environment but logged out
          // at the moment (or viewing a site we don't have authorization to)
          window.dispatchEvent(new CustomEvent("haxcms-not-logged-in", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: this
          }));
        }
      }
    }]);
    return HAXCMSBackendNodeJS;
  }(_polymerElement.PolymerElement);

  _exports.HAXCMSBackendNodeJS = HAXCMSBackendNodeJS;
  window.customElements.define(HAXCMSBackendNodeJS.tag, HAXCMSBackendNodeJS);
});