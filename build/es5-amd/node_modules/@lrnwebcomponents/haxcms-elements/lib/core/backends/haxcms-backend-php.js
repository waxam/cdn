define(["exports", "require", "../../../../../lit-element/lit-element.js", "../haxcms-site-store.js", "../../../../../mobx/lib/mobx.module.js", "../../../../jwt-login/jwt-login.js"], function (_exports, _require, _litElement, _haxcmsSiteStore, _mobxModule, _jwtLogin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSBackendPHP = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_9a2d14e0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <jwt-login\n        id=\"jwt\"\n        jwt=\"", "\"\n        @jwt-changed=\"", "\"\n      ></jwt-login>\n    "]);

    _templateObject_9a2d14e0c96f11ea8be5e1d5fe7ec787 = function _templateObject_9a2d14e0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `haxcms-backend-php`
   * `a simple element to check for and fetch JWTs`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   */
  var HAXCMSBackendPHP =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HAXCMSBackendPHP, _LitElement);
    babelHelpers.createClass(HAXCMSBackendPHP, [{
      key: "render",

      /**
       * LitElement
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_9a2d14e0c96f11ea8be5e1d5fe7ec787(), this.jwt, this.jwtChanged);
      }
    }, {
      key: "jwtChanged",
      value: function jwtChanged(e) {
        this.jwt = e.detail.value;
        _haxcmsSiteStore.store.jwt = this.jwt;

        if (_haxcmsSiteStore.store.cmsSiteEditor && _haxcmsSiteStore.store.cmsSiteEditor.instance) {
          _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = this.jwt;
        } // support updates after the fact


        if (this.jwt != null && this.jwt != "null" && this.jwt != "" && typeof this.jwt == "string") {
          this.dynamicallyImportEditor();
        }
      }
      /**
       * LitElement life cycle - ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this2 = this;

        setTimeout(function () {
          if (window.appSettings) {
            var jwtlogin = _this2.shadowRoot.querySelector("#jwt");

            jwtlogin.url = window.appSettings.login;
            jwtlogin.refreshUrl = window.appSettings.refreshUrl;
            jwtlogin.logoutUrl = window.appSettings.logout;
            jwtlogin.redirectUrl = window.appSettings.redirectUrl; // allow setting in session driven environments
            // its not a real JWT but it drives the environment to operate correctly

            if (window.appSettings.jwt) {
              _this2.jwt = window.appSettings.jwt;
            }
          }

          if (_this2.jwt != null && _this2.jwt != "null" && _this2.jwt != "" && typeof _this2.jwt == "string") {
            _this2.dynamicallyImportEditor();
          } else {
            // other things will have to sort out the fact that while we
            // DO have a dynamic backend, we didn't get a hit on the JWT
            // meaning that we are in a dynamic environment but logged out
            // at the moment (or viewing a site we don't have authorization to)
            window.dispatchEvent(new CustomEvent("haxcms-not-logged-in", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: _this2
            }));
          }
        }, 500);
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "haxcms-backend-php";
      }
    }]);

    function HAXCMSBackendPHP() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSBackendPHP);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXCMSBackendPHP).call(this));
      _this.__disposer = []; // see up a tag to place RIGHT next to the site-builder itself

      (0, _mobxModule.autorun)(function (reaction) {
        _this.jwt = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.jwt);

        _this.__disposer.push(reaction);
      });
      return _this;
    }
    /**
     * Detatched life cycle
     */


    babelHelpers.createClass(HAXCMSBackendPHP, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSBackendPHP.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * LitElement / popular convention
       */

    }, {
      key: "dynamicallyImportEditor",

      /**
       * Import the editor
       */
      value: function dynamicallyImportEditor() {
        var _this3 = this;

        // attempt to dynamically import the hax cms site editor
        // which will appear to be injecting into the page
        // but because of this approach it should be non-blocking
        try {
          new Promise(function (res, rej) {
            return _require.default(["../haxcms-site-editor.js"], res, rej);
          }).then(function (e) {
            // if we don't have appSettings by this point
            // it means we don't actually have a backend / directions
            // this would be a published state or a state where
            // there is no actual backend to bother confiring with
            // possibly a user navigated to a site that doesn't
            // have JWT credentials but isn't actually published
            // we also need this here because PHP is the assumed
            // fallback backend
            if (window.appSettings) {
              _haxcmsSiteStore.store.cmsSiteEditorAvailability();

              _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = _this3.jwt;
              _haxcmsSiteStore.store.jwt = _this3.jwt;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveNodePath = window.appSettings.saveNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveManifestPath = window.appSettings.saveManifestPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveOutlinePath = window.appSettings.saveOutlinePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getNodeFieldsPath = window.appSettings.getNodeFieldsPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getSiteFieldsPath = window.appSettings.getSiteFieldsPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getFormToken = window.appSettings.getFormToken;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.publishSitePath = window.appSettings.publishSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.syncSitePath = window.appSettings.syncSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.revertSitePath = window.appSettings.revertSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.createNodePath = window.appSettings.createNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.deleteNodePath = window.appSettings.deleteNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getUserDataPath = window.appSettings.getUserDataPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.appStore = window.appSettings.appStore;
            }
          }, function (e) {//import failed
          });
        } catch (err) {// error in the event this is a double registration
        }
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * JSON Web token, it'll come from a global call if it's available
           */
          jwt: {
            type: String
          }
        };
      }
    }]);
    return HAXCMSBackendPHP;
  }(_litElement.LitElement);

  _exports.HAXCMSBackendPHP = HAXCMSBackendPHP;
  window.customElements.define(HAXCMSBackendPHP.tag, HAXCMSBackendPHP);
});