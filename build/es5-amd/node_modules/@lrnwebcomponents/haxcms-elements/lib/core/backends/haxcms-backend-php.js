define(["exports", "require", "../../../../../@polymer/polymer/polymer-element.js", "../../../../jwt-login/jwt-login.js", "../haxcms-site-store.js"], function (_exports, _require, _polymerElement, _jwtLogin, _haxcmsSiteStore) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSBackendPHP = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_69256fe0dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <jwt-login\n        id=\"jwt\"\n        url=\"[[jwtLoginLocation]]\"\n        url-logout=\"[[jwtLogoutLocation]]\"\n        jwt=\"{{jwt}}\"\n      ></jwt-login>\n    "]);

    _templateObject_69256fe0dbdc11e9bcafdb98156fc1d6 = function _templateObject_69256fe0dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
   * `haxcms-backend-php`
   * `a simple element to check for and fetch JWTs`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   * - jwt - a json web token which is an encrypted security token to talk
   */
  var HAXCMSBackendPHP =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HAXCMSBackendPHP, _PolymerElement);
    babelHelpers.createClass(HAXCMSBackendPHP, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "haxcms-backend-php";
      } // render function

    }, {
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_69256fe0dbdc11e9bcafdb98156fc1d6());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Location of what endpoint to hit for
           */
          jwtLoginLocation: {
            type: String,
            value: function value() {
              if (window.appSettings) {
                return window.appSettings.login;
              }
            }
          },

          /**
           * Location of what endpoint to hit for logging out
           */
          jwtLogoutLocation: {
            type: String,
            value: function value() {
              if (window.appSettings) {
                return window.appSettings.logout;
              }
            }
          },

          /**
           * JSON Web token, it'll come from a global call if it's available
           */
          jwt: {
            type: String
          }
        };
      }
      /**
       * created life cycle
       */

    }]);

    function HAXCMSBackendPHP() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSBackendPHP);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXCMSBackendPHP).call(this));
      document.body.addEventListener("jwt-token", _this._jwtTokenFired.bind(babelHelpers.assertThisInitialized(_this)));
      return _this;
    }
    /**
     * Attached life cycle
     */


    babelHelpers.createClass(HAXCMSBackendPHP, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSBackendPHP.prototype), "connectedCallback", this).call(this);

        if (this.jwt != null && this.jwt != "" && typeof this.jwt == "string") {
          this.dynamicallyImportEditor();
        } else {
          // other things will have to sort out the fact that while we
          // DO have a dynamic backend, we didn't get a hit on the JWT
          // meaning that we are in a dynamic environment but logged out
          // at the moment (or viewing a site we don't have authorization to)
          window.dispatchEvent(new CustomEvent("haxcms-not-logged-in", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: this
          }));
        }
      }
      /**
       * detached life cycle
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        document.body.removeEventListener("jwt-token", this._jwtTokenFired.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSBackendPHP.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * JWT token fired, let's capture it
       */

    }, {
      key: "_jwtTokenFired",
      value: function _jwtTokenFired(e) {
        this.jwt = e.detail;
        _haxcmsSiteStore.store.jwt = this.jwt; // support updates after the fact

        if (this.jwt != null && this.jwt != "" && typeof this.jwt == "string") {
          this.dynamicallyImportEditor();
        }
      }
      /**
       * Import the editor
       */

    }, {
      key: "dynamicallyImportEditor",
      value: function dynamicallyImportEditor() {
        var _this2 = this;

        // attempt to dynamically import the hax cms site editor
        // which will appear to be injecting into the page
        // but because of this approach it should be non-blocking
        try {
          new Promise(function (res, rej) {
            return _require.default(["../haxcms-site-editor.js"], res, rej);
          }).then(function (e) {
            // if we don't have appSettings by this point
            // it means we don't actually have a backend / directions
            // this would be a published state or a state where
            // there is no actual backend to bother confiring with
            // possibly a user navigated to a site that doesn't
            // have JWT credentials but isn't actually published
            // we also need this here because PHP is the assumed
            // fallback backend
            if (window.appSettings) {
              _haxcmsSiteStore.store.cmsSiteEditorAvailability();

              _haxcmsSiteStore.store.cmsSiteEditor.instance.jwt = _this2.jwt;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveNodePath = window.appSettings.saveNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveManifestPath = window.appSettings.saveManifestPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.saveOutlinePath = window.appSettings.saveOutlinePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getNodeFieldsPath = window.appSettings.getNodeFieldsPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getSiteFieldsPath = window.appSettings.getSiteFieldsPath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.getFormToken = window.appSettings.getFormToken;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.publishSitePath = window.appSettings.publishSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.syncSitePath = window.appSettings.syncSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.revertSitePath = window.appSettings.revertSitePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.createNodePath = window.appSettings.createNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.deleteNodePath = window.appSettings.deleteNodePath;
              _haxcmsSiteStore.store.cmsSiteEditor.instance.appStore = window.appSettings.appStore;
            }
          }, function (e) {//import failed
          });
        } catch (err) {// error in the event this is a double registration
        }
      }
    }]);
    return HAXCMSBackendPHP;
  }(_polymerElement.PolymerElement);

  _exports.HAXCMSBackendPHP = HAXCMSBackendPHP;
  window.customElements.define(HAXCMSBackendPHP.tag, HAXCMSBackendPHP);
});