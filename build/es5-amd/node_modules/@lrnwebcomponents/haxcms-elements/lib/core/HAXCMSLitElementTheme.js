define(["exports", "../../../../lit-element/lit-element.js", "./HAXCMSThemeWiring.js", "../../../responsive-utility/lib/responsive-utility-behaviors.js", "./haxcms-site-store.js", "../../../../mobx/dist/mobx.esm.js"], function (_exports, _litElement, _HAXCMSThemeWiring, _responsiveUtilityBehaviors, _haxcmsSiteStore, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSLitElementTheme = void 0;

  function _templateObject_b120a520569311eb862f2bcd7dd1af42() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host([edit-mode]) {\n          opacity: 1;\n          --hax-base-styles-p-min-height: 38px;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        [hidden] {\n          display: none !important;\n        }\n\n        @media (prefers-reduced-motion: reduce) {\n          * {\n            transition: none !important;\n          }\n        }\n        /**\n        * Hide the slotted content during edit mode. This must be here to work.\n        */\n        :host([edit-mode]) #slot {\n          display: none;\n        }\n        #slot {\n          min-height: 50vh;\n        }\n      "]);

    _templateObject_b120a520569311eb862f2bcd7dd1af42 = function _templateObject_b120a520569311eb862f2bcd7dd1af42() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * LitElement Version of HAXCMSTheme
   */
  var HAXCMSLitElementTheme = /*#__PURE__*/function (_HAXCMSTheme) {
    babelHelpers.inherits(HAXCMSLitElementTheme, _HAXCMSTheme);

    var _super = _createSuper(HAXCMSLitElementTheme);

    function HAXCMSLitElementTheme() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSLitElementTheme);
      _this = _super.call(this);
      _this.editMode = false;
      _this.isLoggedIn = false;
      _this.__disposer = _this.__disposer ? _this.__disposer : [];
      (0, _mobxEsm.autorun)(function (reaction) {
        _this.editMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.editMode);

        _this.__disposer.push(reaction);
      });
      return _this;
    }

    babelHelpers.createClass(HAXCMSLitElementTheme, [{
      key: "firstUpdated",
      // LitElement life cycle
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSLitElementTheme.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSLitElementTheme.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (this.contentContainer == null) {
          this.contentContainer = this.shadowRoot.querySelector("#contentcontainer");
        }
      } // LitElement life cycle

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSLitElementTheme.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSLitElementTheme.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "_location") {
            _this2._locationChanged(_this2[propName], oldValue);
          }

          if (propName == "color") {
            _this2._colorChanged(_this2[propName], oldValue);
          }

          if (propName == "contentContainer") {
            // fire an to match notify
            _this2.dispatchEvent(new CustomEvent("content-container-changed", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: _this2[propName]
            }));

            _this2._contentContainerChanged(_this2[propName], oldValue);
          }

          if (propName == "isLoggedIn") {
            // fire an to match notify
            _this2.dispatchEvent(new CustomEvent("is-logged-in-changed", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: _this2[propName]
            }));
          }

          if (propName == "editMode") {
            // fire an to match notify
            _this2.dispatchEvent(new CustomEvent("edit-mode-changed", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: _this2[propName]
            }));

            _this2._editModeChanged(_this2[propName], oldValue);
          }
        });
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSLitElementTheme), "properties", this)), {}, {
          /**
           * Class for the color
           */
          hexColor: {
            type: String,
            attribute: "hex-color"
          },

          /**
           * Color class work to apply
           */
          color: {
            type: String,
            reflect: true
          },

          /**
           * editting state for the page
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * editting state for the page
           */
          isLoggedIn: {
            type: Boolean,
            reflect: true,
            attribute: "is-logged-in"
          },

          /**
           * DOM node that wraps the slot
           */
          contentContainer: {
            type: Object
          },

          /**
           * location as object
           */
          _location: {
            type: Object
          }
        });
      }
    }, {
      key: "styles",
      get: function get() {
        var styles = [];

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSLitElementTheme), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSLitElementTheme), "styles", this);
        }

        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _litElement.css)(_templateObject_b120a520569311eb862f2bcd7dd1af42())]);
      }
    }]);
    return HAXCMSLitElementTheme;
  }((0, _HAXCMSThemeWiring.HAXCMSTheme)((0, _responsiveUtilityBehaviors.ResponsiveUtilityBehaviors)(_litElement.LitElement)));

  _exports.HAXCMSLitElementTheme = HAXCMSLitElementTheme;
});