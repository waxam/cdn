define(["exports", "require", "../../../../lit-element/lit-element.js", "./haxcms-site-store.js", "../../../../mobx/dist/mobx.esm.js", "../../../simple-icon/simple-icon.js", "../../../simple-icon/lib/simple-icons.js", "../../../simple-icon/lib/simple-icon-button.js"], function (_exports, _require, _litElement, _haxcmsSiteStore, _mobxEsm, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteEditorUI = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_c80c688054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <slot name=\"haxcms-site-editor-ui-prefix-avatar\"></slot>\n      <paper-avatar\n        @click=", "\n        id=\"username\"\n        label=\"", "\"\n        two-chars\n        src=\"", "\"\n      ></paper-avatar>\n      <slot name=\"haxcms-site-editor-ui-prefix-buttons\"></slot>\n      <simple-icon-button\n        hidden\n        dark\n        id=\"editbutton\"\n        icon=\"", "\"\n        @click=\"", "\"\n        title=\"", "\"\n        voice-command=\"edit (this) page\"\n      ></simple-icon-button>\n      <simple-icon-button\n        id=\"cancelbutton\"\n        dark\n        icon=\"icons:cancel\"\n        @click=\"", "\"\n        .hidden=\"", "\"\n        title=\"Cancel editing\"\n        voice-command=\"cancel (editing)\"\n      ></simple-icon-button>\n      <simple-icon-button\n        hidden\n        dark\n        id=\"editdetails\"\n        icon=\"hax:page-details\"\n        @click=\"", "\"\n        title=\"Edit details\"\n        voice-command=\"edit (page) details\"\n      ></simple-icon-button>\n      <simple-icon-button\n        hidden\n        dark\n        id=\"addbutton\"\n        icon=\"hax:add-page\"\n        @click=\"", "\"\n        title=\"Add page\"\n        voice-command=\"add page\"\n      ></simple-icon-button>\n      <simple-icon-button\n        hidden\n        dark\n        id=\"deletebutton\"\n        icon=\"icons:delete\"\n        @click=\"", "\"\n        title=\"Delete page\"\n        voice-command=\"delete page\"\n      ></simple-icon-button>\n      <simple-icon-button\n        hidden\n        dark\n        id=\"outlinebutton\"\n        icon=\"hax:site-map\"\n        @click=\"", "\"\n        title=\"Edit site outline\"\n        voice-command=\"edit site outline\"\n      ></simple-icon-button>\n      <simple-icon-button\n        hidden\n        dark\n        id=\"manifestbutton\"\n        icon=\"", "\"\n        @click=\"", "\"\n        title=\"", "\"\n        voice-command=\"edit site settings\"\n      ></simple-icon-button>\n      <simple-tooltip for=\"username\" position=\"right\" offset=\"14\"\n        >", "</simple-tooltip\n      >\n      <simple-tooltip for=\"cancelbutton\" position=\"right\" offset=\"14\"\n        >Cancel editing</simple-tooltip\n      >\n      <simple-tooltip for=\"editbutton\" position=\"right\" offset=\"14\"\n        >", "</simple-tooltip\n      >\n      <simple-tooltip for=\"editdetails\" position=\"right\" offset=\"14\"\n        >Edit details</simple-tooltip\n      >\n      <simple-tooltip for=\"deletebutton\" position=\"right\" offset=\"14\"\n        >Delete page</simple-tooltip\n      >\n      <simple-tooltip for=\"addbutton\" position=\"right\" offset=\"14\"\n        >Add page</simple-tooltip\n      >\n      <simple-tooltip for=\"outlinebutton\" position=\"right\" offset=\"14\"\n        >Edit site outline</simple-tooltip\n      >\n      <simple-tooltip for=\"manifestbutton\" position=\"right\" offset=\"14\"\n        >", "</simple-tooltip\n      >\n      <slot name=\"haxcms-site-editor-ui-suffix-buttons\"></slot>\n    "]);

    _templateObject2_c80c688054f111eba18757df1555c032 = function _templateObject2_c80c688054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _templateObject_c80c688054f111eba18757df1555c032() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host *:not(:defined) {\n          display: none;\n        }\n        :host {\n          display: block;\n          position: fixed;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          background-color: var(--haxcms-system-bg, #37474f);\n          z-index: 10000;\n          border-right: 2px solid black;\n          visibility: visible;\n        }\n        :host([edit-mode]) {\n          z-index: 9999;\n        }\n        :host([dashboard-opened]) {\n          left: 50vw;\n        }\n        @media screen and (max-width: 800px) {\n          :host([dashboard-opened]) {\n            left: 90vw;\n          }\n          :host([edit-mode]) {\n            bottom: unset;\n          }\n        }\n        /**\n         * Dashboard open trumps all contextual settings\n         */\n        :host([dashboard-opened]) #editbutton,\n        :host([dashboard-opened]) #editdetails,\n        :host([dashboard-opened]) #deletebutton,\n        :host([dashboard-opened]) #addbutton,\n        :host([dashboard-opened]) #outlinebutton {\n          display: none !important;\n        }\n        :host *[hidden] {\n          display: none;\n        }\n        simple-tooltip:not(:defined) {\n          display: none !important;\n        }\n        paper-avatar {\n          width: 48px;\n          height: 48px;\n          line-height: 20px;\n          padding: 12px;\n        }\n        :host([painting]) {\n          opacity: 0;\n          visibility: hidden;\n        }\n        simple-icon-button {\n          display: block;\n          --simple-icon-width: 24px;\n          --simple-icon-height: 24px;\n          border-radius: 50%;\n          border: none;\n          background-color: black;\n          color: white;\n          text-align: center;\n          line-height: 40px;\n          min-width: unset;\n          padding: 0;\n          margin: 4px 2px;\n          width: 40px;\n          height: 40px;\n          transition: 0.2s all ease-in-out;\n          position: relative;\n          box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),\n            0 3px 14px 2px rgba(0, 0, 0, 0.12),\n            0 5px 5px -3px rgba(0, 0, 0, 0.4);\n        }\n        paper-avatar:hover,\n        paper-avatar:focus,\n        paper-avatar:active {\n          cursor: pointer;\n        }\n        simple-icon-button:hover,\n        simple-icon-button:focus,\n        simple-icon-button:active {\n          background-color: var(--haxcms-color, blue);\n          color: #ffffff;\n        }\n        #cancelbutton {\n          background-color: var(--haxcms-system-danger-color);\n        }\n        #editbutton,\n        #editdetails,\n        #deletebutton {\n          visibility: hidden;\n          opacity: 0;\n        }\n        :host([page-allowed]) #editbutton,\n        :host([page-allowed]) #editdetails,\n        :host([page-allowed]) #deletebutton {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([edit-mode]) #editbutton {\n          color: white;\n          background-color: var(--haxcms-system-action-color, blue) !important;\n        }\n        :host([edit-mode]) #manifestbutton,\n        :host([edit-mode]) #editdetails,\n        :host([edit-mode]) #deletebutton,\n        :host([edit-mode]) #addbutton,\n        :host([edit-mode]) #outlinebutton {\n          display: none !important;\n        }\n\n        :host(:hover),\n        :host(:active),\n        :host(:focus) {\n          opacity: 1;\n        }\n        simple-tooltip {\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-duration-in: 200ms;\n          --simple-tooltip-duration-out: 0;\n          --simple-tooltip-border-radius: 0;\n          --simple-tooltip-font-size: 14px;\n          --simple-tooltip-width: 145px;\n        }\n      "]);

    _templateObject_c80c688054f111eba18757df1555c032 = function _templateObject_c80c688054f111eba18757df1555c032() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `haxcms-site-editor-ui`
   * `haxcms editor element buttons that you see`
   *
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   */
  var HAXCMSSiteEditorUI = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(HAXCMSSiteEditorUI, _LitElement);

    var _super = _createSuper(HAXCMSSiteEditorUI);

    babelHelpers.createClass(HAXCMSSiteEditorUI, null, [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject_c80c688054f111eba18757df1555c032())];
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "haxcms-site-editor-ui";
      }
    }]);

    function HAXCMSSiteEditorUI() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteEditorUI);
      _this = _super.call(this);
      _this.__disposer = [];
      _this.backText = "Back to site list";
      _this.painting = true;
      _this.pageAllowed = false;
      _this.editMode = false;
      _this.__editIcon = "hax:page-edit";
      _this.icon = "hax:site-settings";
      _this.manifestEditMode = false;
      setTimeout(function () {
        // prettier-ignore
        new Promise(function (res, rej) {
          return _require.default(["./haxcms-outline-editor-dialog.js"], res, rej);
        }); // prettier-ignore

        new Promise(function (res, rej) {
          return _require.default(["./haxcms-site-dashboard.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../simple-tooltip/simple-tooltip.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../simple-modal/simple-modal.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../simple-fields/lib/simple-fields-form.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../../paper-avatar/paper-avatar.js"], res, rej);
        });
      }, 0);
      return _this;
    } // render function


    babelHelpers.createClass(HAXCMSSiteEditorUI, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_c80c688054f111eba18757df1555c032(), this.redirectToSites, this.userName, this.userPicture, this.__editIcon, this._editButtonTap, this.__editText, this._cancelButtonTap, !this.editMode, this._editDetailsButtonTap, this._addButtonTap, this._deleteButtonTap, this._outlineButtonTap, this.icon, this._manifestButtonTap, this.__settingsText, this.backText, this.__editText, this.__settingsText);
      }
      /*
       * Function to redirect back to sites page
       */

    }, {
      key: "redirectToSites",
      value: function redirectToSites() {
        var redirectUrl = "";

        if (window.appSettings && window.appSettings.backLink) {
          redirectUrl = window.appSettings.backLink;
        } else {
          var webTypeRegex = /^http/;
          var tmp = document.createElement("a");
          tmp.href = window.location.href;

          if (webTypeRegex.test(tmp.href)) {
            redirectUrl = "http://".concat(tmp.host);
          } else {
            redirectUrl = "https://".concat(tmp.host);
          }
        }

        window.location.replace(redirectUrl);
      }
      /**
       * update buttons since these are triggered by a mix of
       * differnet backend types we can't leverage the store
       * since a CMS needs to just hardcode these at run time
       * for some environments
       */

    }, {
      key: "updateAvailableButtons",
      value: function updateAvailableButtons() {
        var _this2 = this;

        if (this.shadowRoot) {
          setTimeout(function () {
            // backText
            if (window.appSettings && window.appSettings.backText) {
              _this2.backText = window.appSettings.backText;
            }

            var ary = [{
              varPath: "getNodeFieldsPath",
              selector: "#editdetails"
            }, {
              varPath: "deleteNodePath",
              selector: "#deletebutton"
            }, {
              varPath: "saveNodePath",
              selector: "#editbutton"
            }, {
              varPath: "createNodePath",
              selector: "#addbutton"
            }, {
              varPath: "saveOutlinePath",
              selector: "#outlinebutton"
            }, {
              varPath: "saveManifestPath",
              selector: "#manifestbutton",
              dep: "getSiteFieldsPath"
            }, {
              varPath: "getSiteFieldsPath",
              selector: "#manifestbutton",
              dep: "saveManifestPath"
            }]; // see which features should be enabled

            ary.forEach(function (pair) {
              if (window.appSettings && window.appSettings[pair.varPath] && window.appSettings[pair.varPath] != null && window.appSettings[pair.varPath] != "" && window.appSettings[pair.varPath] != "null") {
                if (pair.dep) {
                  if (window.appSettings[pair.dep] != null && window.appSettings[pair.dep] != "" && window.appSettings[pair.dep] != "null") {
                    _this2.shadowRoot.querySelector(pair.selector).removeAttribute("hidden");
                  } else {// a dependency didn't meet the requirement
                  }
                } else {
                  _this2.shadowRoot.querySelector(pair.selector).removeAttribute("hidden");
                }
              }
            });
          }, 100);
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        var _this3 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.updateAvailableButtons(); // load user data

        this.dispatchEvent(new CustomEvent("haxcms-load-user-data", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: true
        }));
        this.shadowRoot.querySelectorAll("[voice-command]").forEach(function (el) {
          if (el.getAttribute("id") == "editbutton") {
            _this3.dispatchEvent(new CustomEvent("hax-add-voice-command", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: {
                command: ":name: save (this) page",
                context: el,
                callback: "click"
              }
            }));
          } else if (el.getAttribute("id") == "manifestbutton") {
            _this3.dispatchEvent(new CustomEvent("hax-add-voice-command", {
              bubbles: true,
              composed: true,
              cancelable: false,
              detail: {
                command: ":name: cancel site settings",
                context: el,
                callback: "click"
              }
            }));
          }

          _this3.dispatchEvent(new CustomEvent("hax-add-voice-command", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: {
              command: ":name: " + el.getAttribute("voice-command"),
              context: el,
              callback: "click"
            }
          }));
        });
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this4 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "editMode") {
            // observer
            _this4._editModeChanged(_this4[propName], oldValue); // notify


            _this4.dispatchEvent(new CustomEvent("edit-mode-changed", {
              detail: _this4[propName]
            }));
          }

          if (propName == "manifestEditMode") {
            // observer
            _this4._manifestEditModeChanged(_this4[propName], oldValue); // notify


            _this4.dispatchEvent(new CustomEvent("manifest-edit-mode-changed", {
              detail: _this4[propName]
            }));
          }

          if (propName == "dashboardOpened") {
            // observer
            _this4._dashboardOpenedChanged(_this4[propName], oldValue);
          }
        });
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this5 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "connectedCallback", this).call(this);
        (0, _mobxEsm.autorun)(function (reaction) {
          if (_haxcmsSiteStore.store.userData) {
            _this5.userName = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.userData.userName);
            _this5.userPicture = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.userData.userPicture); // update buttons to match since we got a state response

            _this5.updateAvailableButtons();
          }

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.editMode = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.editMode);

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.manifest = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.manifest);
          _this5.icon = "hax:site-settings";

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          _this5.dashboardOpened = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.dashboardOpened);

          _this5.__disposer.push(reaction);
        });
        (0, _mobxEsm.autorun)(function (reaction) {
          var activeItem = (0, _mobxEsm.toJS)(_haxcmsSiteStore.store.activeItem); // update buttons to match since we got a state response

          _this5.updateAvailableButtons();

          if (activeItem && activeItem.id) {
            _this5.activeTitle = activeItem.title;
            _this5.pageAllowed = true;
          } else {
            _this5.pageAllowed = false;
          }

          _this5.__disposer.push(reaction);
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_dashboardOpenedChanged",
      value: function _dashboardOpenedChanged(newValue, oldValue) {
        if (newValue) {
          this.__settingsText = "Close site settings";
          this.icon = "icons:cancel";
        } else if (!newValue) {
          this.__settingsText = "Edit site settings";
          this.icon = "hax:site-settings";
        }
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_editButtonTap",
      value: function _editButtonTap(e) {
        this.editMode = !this.editMode; // save button shifted to edit

        if (!this.editMode) {
          this.dispatchEvent(new CustomEvent("haxcms-save-node", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: _haxcmsSiteStore.store.activeItem
          }));
        }

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
    }, {
      key: "_editDetailsButtonTap",
      value: function _editDetailsButtonTap(e) {
        var evt = new CustomEvent("haxcms-load-node-fields", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.target
        });
        window.dispatchEvent(evt);
      }
    }, {
      key: "_cancelButtonTap",
      value: function _cancelButtonTap(e) {
        this.editMode = false;
        this.dispatchEvent(new CustomEvent("hax-cancel", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.detail
        }));
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Add button hit
       * @todo simplify this to just what's needed; no crazy options
       */

    }, {
      key: "_addButtonTap",
      value: function _addButtonTap(e) {
        this.__newForm = document.createElement("simple-fields-form"); // get a prototype schema for an item

        this.__newForm.fields = [{
          property: "title",
          title: "Title",
          description: "Main title for this page in menus",
          inputMethod: "textfield",
          required: true
        }, {
          property: "location",
          title: "Location",
          description: "What is displayed in the bnowser bar after your site name / URL",
          inputMethod: "textfield",
          required: true
        }, {
          property: "parentId",
          title: "Parent ID",
          description: "Parent id",
          inputMethod: "textfield",
          hidden: true,
          required: true
        }]; // default values

        this.__newForm.value = {
          title: "New page",
          location: "",
          // parentId is the active page item or the site in general if none found
          parentId: _haxcmsSiteStore.store.activeItem && _haxcmsSiteStore.store.activeItem.id ? _haxcmsSiteStore.store.activeItem.id : _haxcmsSiteStore.store.manifest.id
        };
        var b1 = document.createElement("button");
        var icon = document.createElement("simple-icon");
        icon.icon = "icons:add";
        icon.dark = true;
        b1.appendChild(icon);
        b1.appendChild(document.createTextNode("Create page"));
        b1.style.color = "white";
        b1.style.backgroundColor = "#2196f3";
        b1.addEventListener("click", this._createNewItem.bind(this));
        var b2 = document.createElement("button");
        var icon2 = document.createElement("simple-icon");
        icon2.icon = "icons:cancel";
        b2.appendChild(icon2);
        b2.appendChild(document.createTextNode("cancel"));
        b2.setAttribute("dialog-dismiss", "dialog-dismiss");
        var b = document.createElement("span");
        b.appendChild(b1);
        b.appendChild(b2);
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Add a new page",
            styles: {
              "--simple-modal-width": "50vw",
              "--simple-modal-max-width": "50vw",
              "--simple-modal-height": "40vh",
              "--simple-modal-max-height": "40vh"
            },
            elements: {
              content: this.__newForm,
              buttons: b
            },
            invokedBy: this.shadowRoot.querySelector("#addbutton"),
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * create new item
       */

    }, {
      key: "_createNewItem",
      value: function _createNewItem(e) {
        var evt = new CustomEvent("haxcms-create-node", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            values: this.__newForm.value
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * Fire item
       */

    }, {
      key: "_updateItem",
      value: function _updateItem(e) {
        var local = e.target;
        var values;

        if (!local.__form) {
          values = local.parentNode.__form.value;
        } else {
          values = local.__form.value;
        } // fire event with details for saving


        window.dispatchEvent(new CustomEvent("haxcms-save-node-details", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: values
        })); // fire event to close the modal

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Delete button hit, confirm they want to do this
       */

    }, {
      key: "_deleteButtonTap",
      value: function _deleteButtonTap(e) {
        var c = document.createElement("span");
        c.innerHTML = "\"".concat(_haxcmsSiteStore.store.activeItem.title, "\" will be removed from the outline but its content stays on the file system.");
        var b1 = document.createElement("button");
        var icon = document.createElement("simple-icon");
        icon.icon = "icons:delete";
        b1.appendChild(icon);
        b1.appendChild(document.createTextNode("Confirm"));
        b1.style.color = "white";
        b1.style.backgroundColor = "#ee0000";
        b1.addEventListener("click", this._deleteActive.bind(this));
        var b2 = document.createElement("button");
        var icon2 = document.createElement("simple-icon");
        icon2.icon = "icons:cancel";
        b2.appendChild(icon2);
        b2.appendChild(document.createTextNode("cancel"));
        b2.setAttribute("dialog-dismiss", "dialog-dismiss");
        var b = document.createElement("span");
        b.appendChild(b1);
        b.appendChild(b2);
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Are you sure you want to delete this page?",
            styles: {
              "--simple-modal-min-width": "30vw",
              "--simple-modal-min-height": "30vh"
            },
            elements: {
              content: c,
              buttons: b
            },
            invokedBy: this.shadowRoot.querySelector("#deletebutton"),
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * delete active item
       */

    }, {
      key: "_deleteActive",
      value: function _deleteActive(e) {
        var evt = new CustomEvent("haxcms-delete-node", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            item: _haxcmsSiteStore.store.activeItem
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_outlineButtonTap",
      value: function _outlineButtonTap(e) {
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Edit site outline",
            styles: {
              "--simple-modal-width": "70vw",
              "--simple-modal-max-width": "70vw",
              "--simple-modal-height": "70vh",
              "--simple-modal-max-height": "70vh"
            },
            elements: {
              content: document.createElement("haxcms-outline-editor-dialog")
            },
            invokedBy: this.shadowRoot.querySelector("#outlinebutton"),
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_manifestButtonTap",
      value: function _manifestButtonTap(e) {
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
        window.dispatchEvent(new CustomEvent("haxcms-load-site-dashboard", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.target
        }));
      }
      /**
       * Edit state has changed.
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        if (newValue) {
          // enable it some how
          this.__editIcon = "icons:save";
          this.__editText = "Save page content";
        } else {
          // disable it some how
          this.__editIcon = "hax:page-edit";
          this.__editText = "Edit page content";
        }

        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          _haxcmsSiteStore.store.editMode = newValue;
        }
      }
      /**
       * Note changes to the outline / structure of the page's items
       */

    }, {
      key: "_outlineEditModeChanged",
      value: function _outlineEditModeChanged(newValue, oldValue) {
        this.dispatchEvent(new CustomEvent("haxcms-outline-edit-mode-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: newValue
        }));
      }
      /**
       * Note changes to the outline / structure of the page's items
       */

    }, {
      key: "_manifestEditModeChanged",
      value: function _manifestEditModeChanged(newValue, oldValue) {
        this.dispatchEvent(new CustomEvent("haxcms-manifest-edit-mode-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: newValue
        }));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          userName: {
            type: String,
            attribute: "user-name"
          },
          userPicture: {
            type: String,
            attribute: "user-picture"
          },
          backLink: {
            type: String
          },
          backText: {
            type: String
          },
          __editIcon: {
            type: String
          },
          __editText: {
            type: String
          },
          __settingsText: {
            type: String
          },

          /**
           * small visual lock that events break on initial paint
           */
          painting: {
            type: Boolean,
            reflect: true
          },

          /**
           * page allowed
           */
          pageAllowed: {
            type: Boolean,
            attribute: "page-allowed",
            reflect: true
          },

          /**
           * if the page is in an edit state or not
           */
          editMode: {
            type: Boolean,
            reflect: true,
            attribute: "edit-mode"
          },

          /**
           * Manifest editing state
           */
          manifestEditMode: {
            type: Boolean,
            attribute: "manifest-edit-mode",
            reflect: true
          },
          activeTitle: {
            type: String,
            attribute: "active-title"
          },
          manifest: {
            type: Object
          },
          icon: {
            type: String
          },
          dashboardOpened: {
            type: Boolean,
            reflect: true,
            attribute: "dashboard-opened"
          }
        };
      }
    }]);
    return HAXCMSSiteEditorUI;
  }(_litElement.LitElement);

  _exports.HAXCMSSiteEditorUI = HAXCMSSiteEditorUI;
  window.customElements.define(HAXCMSSiteEditorUI.tag, HAXCMSSiteEditorUI);
});