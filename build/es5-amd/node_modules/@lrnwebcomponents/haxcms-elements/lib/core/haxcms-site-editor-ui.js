define(["exports", "require", "../../../../@polymer/polymer/polymer-element.js", "./haxcms-site-store.js", "../../../hax-body/lib/haxutils.js", "../../../../mobx/lib/mobx.module.js", "../../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../../@polymer/polymer/lib/utils/render-status.js", "../../../../@polymer/paper-tooltip/paper-tooltip.js", "../../../../@polymer/paper-icon-button/paper-icon-button.js", "../../../simple-modal/simple-modal.js", "../../../../@polymer/iron-icons/editor-icons.js", "../../../../@polymer/paper-fab/paper-fab.js", "../../../paper-avatar/paper-avatar.js"], function (_exports, _require, _polymerElement, _haxcmsSiteStore, _haxutils, _mobxModule, _polymerDom, _renderStatus, _paperTooltip, _paperIconButton, _simpleModal, _editorIcons, _paperFab, _paperAvatar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXCMSSiteEditorUI = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_510bbbe0e3b511e9b0d5a5c01151ac03() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          position: fixed;\n          left: 0;\n          top: 0;\n          bottom: 0;\n          transition: 0.8s left linear;\n          background-color: var(--haxcms-system-bg, #37474f);\n          z-index: 10000;\n          border-right: 2px solid black;\n          visibility: visible;\n        }\n        :host([edit-mode]) {\n          z-index: 9999;\n        }\n        :host([dashboard-opened]) {\n          left: 50vw;\n        }\n        @media screen and (max-width: 600px) {\n          :host([dashboard-opened]) {\n            left: 90vw;\n          }\n        }\n        /**\n         * Dashboard open trumps all contextual settings\n         */\n        :host([dashboard-opened]) #editbutton,\n        :host([dashboard-opened]) #editdetails,\n        :host([dashboard-opened]) #deletebutton,\n        :host([dashboard-opened]) #addbutton,\n        :host([dashboard-opened]) #outlinebutton {\n          display: none !important;\n        }\n        :host *[hidden] {\n          display: none;\n        }\n        paper-fab:not(:defined),\n        paper-tooltip:not(:defined),\n        paper-icon-button:not(:defined) {\n          display: none !important;\n        }\n        paper-avatar {\n          width: 48px;\n          height: 48px;\n          line-height: 20px;\n          padding: 12px;\n        }\n        paper-fab {\n          display: block;\n          width: 48px;\n          height: 48px;\n          line-height: 20px;\n          background-color: black;\n          color: #ffffff;\n          transition: 0.3s all ease-in-out;\n          padding: 12px;\n          margin: 0;\n          position: relative;\n          @apply --shadow-elevation-8dp;\n        }\n        :host([painting]) {\n          opacity: 0;\n          visibility: hidden;\n        }\n        paper-icon-button {\n          display: block;\n          padding: 8px;\n          width: 48px;\n          min-width: 48px;\n          height: 48px;\n          border-radius: 50%;\n          margin: 0px;\n          background-color: black;\n          color: #ffffff;\n          transition: 0.3s all ease-in-out;\n          @apply --shadow-elevation-8dp;\n        }\n        paper-fab:hover,\n        paper-fab:focus,\n        paper-fab:active,\n        paper-icon-button:hover,\n        paper-icon-button:focus,\n        paper-icon-button:active {\n          background-color: var(--haxcms-color, blue);\n          color: #ffffff;\n        }\n        #cancelbutton {\n          background-color: var(--haxcms-system-danger-color);\n        }\n        #editbutton,\n        #editdetails,\n        #deletebutton {\n          visibility: hidden;\n          opacity: 0;\n        }\n        :host([page-allowed]) #editbutton,\n        :host([page-allowed]) #editdetails,\n        :host([page-allowed]) #deletebutton {\n          visibility: visible;\n          opacity: 1;\n        }\n        :host([edit-mode]) #editbutton {\n          color: white;\n          background-color: var(--haxcms-system-action-color, blue) !important;\n        }\n        :host([edit-mode]) #manifestbutton,\n        :host([edit-mode]) #editdetails,\n        :host([edit-mode]) #deletebutton,\n        :host([edit-mode]) #addbutton,\n        :host([edit-mode]) #outlinebutton {\n          display: none !important;\n        }\n\n        :host(:hover),\n        :host(:active),\n        :host(:focus) {\n          opacity: 1;\n        }\n        paper-tooltip {\n          width: 100px;\n          --paper-tooltip-background: #000000;\n          --paper-tooltip-opacity: 1;\n          --paper-tooltip-text-color: #ffffff;\n          --paper-tooltip-delay-in: 0;\n          --paper-tooltip: {\n            border-radius: 0;\n          }\n        }\n      </style>\n      <paper-avatar\n        id=\"username\"\n        label=\"[[userName]]\"\n        two-chars\n        src=\"[[userPicture]]\"\n      ></paper-avatar>\n      <paper-fab\n        id=\"editbutton\"\n        icon=\"[[__editIcon]]\"\n        on-click=\"_editButtonTap\"\n        title$=\"[[__editText]]\"\n      ></paper-fab>\n      <paper-fab\n        id=\"cancelbutton\"\n        icon=\"icons:cancel\"\n        on-click=\"_cancelButtonTap\"\n        hidden$=\"[[!editMode]]\"\n        title=\"Cancel editing\"\n      ></paper-fab>\n      <paper-fab\n        id=\"editdetails\"\n        icon=\"icons:fingerprint\"\n        on-click=\"_editDetailsButtonTap\"\n        title=\"Edit page details\"\n      ></paper-fab>\n      <paper-icon-button\n        id=\"addbutton\"\n        icon=\"icons:add\"\n        on-click=\"_addButtonTap\"\n        title=\"Add new page\"\n      ></paper-icon-button>\n      <paper-fab\n        id=\"deletebutton\"\n        icon=\"icons:delete\"\n        on-click=\"_deleteButtonTap\"\n        title=\"Delete current page\"\n      ></paper-fab>\n      <paper-icon-button\n        id=\"outlinebutton\"\n        icon=\"icons:list\"\n        on-click=\"_outlineButtonTap\"\n        title=\"Edit site outline\"\n      ></paper-icon-button>\n      <paper-icon-button\n        id=\"manifestbutton\"\n        icon=\"[[icon]]\"\n        on-click=\"_manifestButtonTap\"\n        title=\"[[__settingsText]]\"\n      ></paper-icon-button>\n      <paper-tooltip for=\"username\" position=\"right\" offset=\"14\"\n        >[[userName]]</paper-tooltip\n      >\n      <paper-tooltip for=\"cancelbutton\" position=\"right\" offset=\"14\"\n        >Cancel</paper-tooltip\n      >\n      <paper-tooltip for=\"editbutton\" position=\"right\" offset=\"14\"\n        >[[__editText]]</paper-tooltip\n      >\n      <paper-tooltip for=\"editdetails\" position=\"right\" offset=\"14\"\n        >Page details</paper-tooltip\n      >\n      <paper-tooltip for=\"deletebutton\" position=\"right\" offset=\"14\"\n        >Delete page</paper-tooltip\n      >\n      <paper-tooltip for=\"addbutton\" position=\"right\" offset=\"14\"\n        >Add page</paper-tooltip\n      >\n      <paper-tooltip for=\"outlinebutton\" position=\"right\" offset=\"14\"\n        >Site outline</paper-tooltip\n      >\n      <paper-tooltip for=\"manifestbutton\" position=\"right\" offset=\"14\"\n        >[[__settingsText]]</paper-tooltip\n      >\n    "]);

    _templateObject_510bbbe0e3b511e9b0d5a5c01151ac03 = function _templateObject_510bbbe0e3b511e9b0d5a5c01151ac03() {
      return data;
    };

    return data;
  }

  /**
   * `haxcms-site-editor-ui`
   * `haxcms editor element buttons that you see`
   *
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   */
  var HAXCMSSiteEditorUI =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(HAXCMSSiteEditorUI, _PolymerElement);
    babelHelpers.createClass(HAXCMSSiteEditorUI, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "haxcms-site-editor-ui";
      }
    }]);

    function HAXCMSSiteEditorUI() {
      var _this;

      babelHelpers.classCallCheck(this, HAXCMSSiteEditorUI);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI).call(this));
      _this.__disposer = [];
      return _this;
    } // render function


    babelHelpers.createClass(HAXCMSSiteEditorUI, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          var _this2 = this;

          new Promise(function (res, rej) {
            return _require.default(["./haxcms-outline-editor-dialog.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["./haxcms-site-dashboard.js"], res, rej);
          }); // this ensures that an initial paint won't get a cached copy of the site.json file
          // this is more than possible given that it will register to most backends
          // as a static file rather than dynamic end point as it is in this instance (sorta)

          this.dispatchEvent(new CustomEvent("haxcms-trigger-update", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: true
          })); // load user data

          this.dispatchEvent(new CustomEvent("haxcms-load-user-data", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: true
          }));
          (0, _mobxModule.autorun)(function (reaction) {
            _this2.userName = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.userData.userName);
            _this2.userPicture = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.userData.userPicture);

            _this2.__disposer.push(reaction);
          });
          (0, _mobxModule.autorun)(function (reaction) {
            _this2.editMode = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.editMode);

            _this2.__disposer.push(reaction);
          });
          (0, _mobxModule.autorun)(function (reaction) {
            _this2.manifest = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.manifest);
            _this2.icon = (0, _haxutils.varGet)(_this2.manifest, "manifest.metadata.theme.variables.icon", "icons:settings");

            _this2.__disposer.push(reaction);
          });
          (0, _mobxModule.autorun)(function (reaction) {
            _this2.dashboardOpened = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.dashboardOpened);

            _this2.__disposer.push(reaction);
          });
          (0, _mobxModule.autorun)(function (reaction) {
            var activeItem = (0, _mobxModule.toJS)(_haxcmsSiteStore.store.activeItem);

            if (activeItem && activeItem.id) {
              _this2.activeTitle = activeItem.title;
              _this2.pageAllowed = true;
            } else {
              _this2.pageAllowed = false;
            }

            _this2.__disposer.push(reaction);
          });
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        for (var i in this.__disposer) {
          this.__disposer[i].dispose();
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(HAXCMSSiteEditorUI.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_dashboardOpenedChanged",
      value: function _dashboardOpenedChanged(newValue, oldValue) {
        if (newValue) {
          this.__settingsText = "Close";
          this.icon = "icons:cancel";
        } else if (!newValue) {
          this.__settingsText = "Site settings";
          this.icon = (0, _haxutils.varGet)(this.manifest, "manifest.metadata.theme.variables.icon", "icons:settings");
        }
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_editButtonTap",
      value: function _editButtonTap(e) {
        this.editMode = !this.editMode; // save button shifted to edit

        if (!this.editMode) {
          this.dispatchEvent(new CustomEvent("haxcms-save-node", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: _haxcmsSiteStore.store.activeItem
          }));
        }

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
    }, {
      key: "_editDetailsButtonTap",
      value: function _editDetailsButtonTap(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var evt = new CustomEvent("haxcms-load-node-fields", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: normalizedEvent.localTarget
        });
        window.dispatchEvent(evt);
      }
    }, {
      key: "_cancelButtonTap",
      value: function _cancelButtonTap(e) {
        this.editMode = false;
        this.dispatchEvent(new CustomEvent("hax-cancel", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.detail
        }));
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Add button hit
       * @todo simplify this to just what's needed; no crazy options
       */

    }, {
      key: "_addButtonTap",
      value: function _addButtonTap(e) {
        this.__newForm = document.createElement("eco-json-schema-object");
        var outline = window.JSONOutlineSchema.requestAvailability(); // get a prototype schema for an item

        this.__newForm.schema = outline.getItemSchema("item"); // drop these for now cause we just care about title

        delete this.__newForm.schema.properties.id;
        delete this.__newForm.schema.properties.description;
        delete this.__newForm.schema.properties.order;
        delete this.__newForm.schema.properties.parent;
        delete this.__newForm.schema.properties.metadata;
        delete this.__newForm.schema.properties.indent;
        this.__newForm.schema.properties.title.value = "";
        var b1 = document.createElement("paper-button");
        var icon = document.createElement("iron-icon");
        icon.icon = "icons:add";
        b1.appendChild(icon);
        b1.appendChild(document.createTextNode("Create page"));
        b1.style.color = "white";
        b1.style.backgroundColor = "#2196f3";
        b1.addEventListener("click", this._createNewItem.bind(this));
        var b2 = document.createElement("paper-button");
        b2.appendChild(document.createTextNode("cancel"));
        b2.setAttribute("dialog-dismiss", "dialog-dismiss");
        var b = document.createElement("span");
        b.appendChild(b1);
        b.appendChild(b2);
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Add a new page",
            styles: {
              "--simple-modal-width": "75vw",
              "--simple-modal-max-width": "75vw"
            },
            elements: {
              content: this.__newForm,
              buttons: b
            },
            invokedBy: this.$.addbutton,
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * create new item
       */

    }, {
      key: "_createNewItem",
      value: function _createNewItem(e) {
        var evt = new CustomEvent("haxcms-create-node", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            values: this.__newForm.value
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * Fire item
       */

    }, {
      key: "_updateItem",
      value: function _updateItem(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var local = normalizedEvent.localTarget;
        var values;

        if (!local.__form) {
          values = local.parentNode.__form.value;
        } else {
          values = local.__form.value;
        } // fire event with details for saving


        window.dispatchEvent(new CustomEvent("haxcms-save-node-details", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: values
        })); // fire event to close the modal

        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {}
        }));
      }
      /**
       * Delete button hit, confirm they want to do this
       */

    }, {
      key: "_deleteButtonTap",
      value: function _deleteButtonTap(e) {
        var c = document.createElement("span");
        c.innerHTML = "\"".concat(_haxcmsSiteStore.store.activeItem.title, "\" will be removed from the outline but its content stays on the file system.");
        var b1 = document.createElement("paper-button");
        var icon = document.createElement("iron-icon");
        icon.icon = "icons:delete";
        b1.appendChild(icon);
        b1.appendChild(document.createTextNode("Confirm"));
        b1.style.color = "white";
        b1.style.backgroundColor = "#ee0000";
        b1.addEventListener("click", this._deleteActive.bind(this));
        var b2 = document.createElement("paper-button");
        b2.appendChild(document.createTextNode("cancel"));
        b2.setAttribute("dialog-dismiss", "dialog-dismiss");
        var b = document.createElement("span");
        b.appendChild(b1);
        b.appendChild(b2);
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Are you sure you want to delete this page?",
            styles: {
              "--simple-modal-width": "75vw",
              "--simple-modal-max-width": "75vw"
            },
            elements: {
              content: c,
              buttons: b
            },
            invokedBy: this.$.deletebutton,
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * delete active item
       */

    }, {
      key: "_deleteActive",
      value: function _deleteActive(e) {
        var evt = new CustomEvent("haxcms-delete-node", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            item: _haxcmsSiteStore.store.activeItem
          }
        });
        this.dispatchEvent(evt);
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_outlineButtonTap",
      value: function _outlineButtonTap(e) {
        var evt = new CustomEvent("simple-modal-show", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: {
            title: "Edit site outline",
            styles: {
              "--simple-modal-width": "75vw",
              "--simple-modal-height": "75vh",
              "--simple-modal-max-width": "75vw",
              "--simple-modal-max-height": "75vh"
            },
            elements: {
              content: document.createElement("haxcms-outline-editor-dialog")
            },
            invokedBy: this.$.outlinebutton,
            clone: false,
            modal: true
          }
        });
        window.dispatchEvent(evt);
      }
      /**
       * toggle state on button tap
       */

    }, {
      key: "_manifestButtonTap",
      value: function _manifestButtonTap(e) {
        window.dispatchEvent(new CustomEvent("simple-modal-hide", {
          bubbles: true,
          cancelable: true,
          detail: {}
        }));
        window.dispatchEvent(new CustomEvent("haxcms-load-site-dashboard", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: e.target
        }));
      }
      /**
       * Edit state has changed.
       */

    }, {
      key: "_editModeChanged",
      value: function _editModeChanged(newValue, oldValue) {
        if (newValue) {
          // enable it some how
          this.__editIcon = "icons:save";
          this.__editText = "Save page";
        } else {
          // disable it some how
          this.__editIcon = "editor:mode-edit";
          this.__editText = "Edit page";
        }

        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          _haxcmsSiteStore.store.editMode = newValue;
        }
      }
      /**
       * Note changes to the outline / structure of the page's items
       */

    }, {
      key: "_outlineEditModeChanged",
      value: function _outlineEditModeChanged(newValue, oldValue) {
        this.dispatchEvent(new CustomEvent("haxcms-outline-edit-mode-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: newValue
        }));
      }
      /**
       * Note changes to the outline / structure of the page's items
       */

    }, {
      key: "_manifestEditModeChanged",
      value: function _manifestEditModeChanged(newValue, oldValue) {
        this.dispatchEvent(new CustomEvent("haxcms-manifest-edit-mode-changed", {
          bubbles: true,
          composed: true,
          cancelable: false,
          detail: newValue
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_510bbbe0e3b511e9b0d5a5c01151ac03());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          userName: {
            type: String
          },
          userPicture: {
            type: String
          },

          /**
           * small visual lock that events break on initial paint
           */
          painting: {
            type: Boolean,
            value: true,
            reflectToAttribute: true
          },

          /**
           * page allowed
           */
          pageAllowed: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * if the page is in an edit state or not
           */
          editMode: {
            type: Boolean,
            reflectToAttribute: true,
            observer: "_editModeChanged",
            value: false,
            notify: true
          },

          /**
           * Manifest editing state
           */
          manifestEditMode: {
            type: Boolean,
            reflectToAttribute: true,
            observer: "_manifestEditModeChanged",
            value: false,
            notify: true
          },
          activeTitle: {
            type: String
          },
          manifest: {
            type: Object
          },
          icon: {
            type: String
          },
          dashboardOpened: {
            type: Boolean,
            reflectToAttribute: true,
            observer: "_dashboardOpenedChanged"
          }
        };
      }
    }]);
    return HAXCMSSiteEditorUI;
  }(_polymerElement.PolymerElement);

  _exports.HAXCMSSiteEditorUI = HAXCMSSiteEditorUI;
  window.customElements.define(HAXCMSSiteEditorUI.tag, HAXCMSSiteEditorUI);
});