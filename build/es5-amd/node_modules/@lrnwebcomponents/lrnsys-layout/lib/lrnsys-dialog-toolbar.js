define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/app-layout/app-toolbar/app-toolbar.js", "./lrnsys-dialog-toolbar-button.js"], function (_exports, _polymerElement, _renderStatus, _appToolbar, _lrnsysDialogToolbarButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysDialogToolbar = void 0;

  function _templateObject_82221280b54611e9b6ba27231b6f684a() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\">\n        :host {\n          display: block;\n          --app-toolbar-primary-height: 40px;\n          --app-toolbar-secondary-height: 50px;\n          --app-toolbar-secondary-color: var(\n            --lrnsys-dialog-secondary-background-color\n          );\n          --app-toolbar-primary-color: var(\n            --lrnsys-dialog-toolbar-background-color\n          );\n          position: relative;\n          margin: 0;\n          padding: 0;\n        }\n        app-toolbar#primary {\n          color: var(--lrnsys-dialog-color, #000);\n          background-color: var(--app-toolbar-primary-color);\n          z-index: 10;\n          position: relative;\n          height: var(--app-toolbar-primary-height);\n        }\n        app-toolbar#secondary {\n          color: var(--lrnsys-dialog-color, #000);\n          background-color: var(--app-toolbar-secondary-color);\n          z-index: 5;\n          position: absolute;\n          width: 100%;\n          transform: translateY(-100%);\n          transition: all 0.3s ease-in;\n          height: var(--app-toolbar-primary-height);\n          display: flex;\n          justify-content: center;\n          padding: 0;\n        }\n        :host([secondary-visible]) #secondary {\n          transform: translateY(0);\n          height: var(--app-toolbar-secondary-height);\n        }\n        .secondary-buttons {\n          display: flex;\n        }\n        .secondary-buttons ::slotted(*) {\n          display: inline-flex;\n        }\n      </style>\n      <app-toolbar id=\"primary\">\n        <slot name=\"primary\"></slot>\n        <div main-title=\"\"></div>\n        <lrnsys-dialog-toolbar-button\n          icon=\"close\"\n          id=\"close\"\n          title=\"close dialog\"\n        ></lrnsys-dialog-toolbar-button>\n      </app-toolbar>\n      <app-toolbar id=\"secondary\" hidden$=\"[[!_secondaryHasChildren]]\">\n        <div class=\"secondary-buttons\">\n          <slot name=\"secondary\" id=\"secondary-slot\"></slot>\n        </div>\n      </app-toolbar>\n    "], ["\n      <style is=\"custom-style\">\n        :host {\n          display: block;\n          --app-toolbar-primary-height: 40px;\n          --app-toolbar-secondary-height: 50px;\n          --app-toolbar-secondary-color: var(\n            --lrnsys-dialog-secondary-background-color\n          );\n          --app-toolbar-primary-color: var(\n            --lrnsys-dialog-toolbar-background-color\n          );\n          position: relative;\n          margin: 0;\n          padding: 0;\n        }\n        app-toolbar#primary {\n          color: var(--lrnsys-dialog-color, #000);\n          background-color: var(--app-toolbar-primary-color);\n          z-index: 10;\n          position: relative;\n          height: var(--app-toolbar-primary-height);\n        }\n        app-toolbar#secondary {\n          color: var(--lrnsys-dialog-color, #000);\n          background-color: var(--app-toolbar-secondary-color);\n          z-index: 5;\n          position: absolute;\n          width: 100%;\n          transform: translateY(-100%);\n          transition: all 0.3s ease-in;\n          height: var(--app-toolbar-primary-height);\n          display: flex;\n          justify-content: center;\n          padding: 0;\n        }\n        :host([secondary-visible]) #secondary {\n          transform: translateY(0);\n          height: var(--app-toolbar-secondary-height);\n        }\n        .secondary-buttons {\n          display: flex;\n        }\n        .secondary-buttons ::slotted(*) {\n          display: inline-flex;\n        }\n      </style>\n      <app-toolbar id=\"primary\">\n        <slot name=\"primary\"></slot>\n        <div main-title=\"\"></div>\n        <lrnsys-dialog-toolbar-button\n          icon=\"close\"\n          id=\"close\"\n          title=\"close dialog\"\n        ></lrnsys-dialog-toolbar-button>\n      </app-toolbar>\n      <app-toolbar id=\"secondary\" hidden\\$=\"[[!_secondaryHasChildren]]\">\n        <div class=\"secondary-buttons\">\n          <slot name=\"secondary\" id=\"secondary-slot\"></slot>\n        </div>\n      </app-toolbar>\n    "]);

    _templateObject_82221280b54611e9b6ba27231b6f684a = function _templateObject_82221280b54611e9b6ba27231b6f684a() {
      return data;
    };

    return data;
  }

  var LrnsysDialogToolbar =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrnsysDialogToolbar, _PolymerElement);

    function LrnsysDialogToolbar() {
      babelHelpers.classCallCheck(this, LrnsysDialogToolbar);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnsysDialogToolbar).apply(this, arguments));
    }

    babelHelpers.createClass(LrnsysDialogToolbar, [{
      key: "_tapHandler",

      /**
       * Button tapped
       */
      value: function _tapHandler(e) {
        this.dispatchEvent(new CustomEvent("button-clicked", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: e.detail
        }));
      }
      /**
       * Ready.
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysDialogToolbar.prototype), "ready", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          var _this = this;

          // listen to see if buttons have been initialized in the secondary toolbar
          this.$.secondary.addEventListener("button-initialized", function (e) {
            _this._secondaryHasChildren = true;
          });
          this.addEventListener("dialog-toolbar-button-tapped", this._tapHandler.bind(this));
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        var _this2 = this;

        this.$.secondary.removeEventListener("button-initialized", function (e) {
          _this2._secondaryHasChildren = true;
        });
        this.removeEventListener("dialog-toolbar-button-tapped", this._tapHandler.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysDialogToolbar.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_82221280b54611e9b6ba27231b6f684a());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-dialog-toolbar";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Internal state of secondary toolbar
           */
          _secondaryHasChildren: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return LrnsysDialogToolbar;
  }(_polymerElement.PolymerElement);

  _exports.LrnsysDialogToolbar = LrnsysDialogToolbar;
  window.customElements.define(LrnsysDialogToolbar.tag, LrnsysDialogToolbar);
});