define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/iron-icon/iron-icon.js", "../../../@polymer/iron-icons/iron-icons.js", "../../../@polymer/paper-tooltip/paper-tooltip.js"], function (_exports, _polymerElement, _polymerDom, _paperButton, _ironIcon, _ironIcons, _paperTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysDialogToolbarButton = void 0;

  function _templateObject_499b66c0dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-block;\n        }\n        iron-icon {\n          display: inline-block;\n          height: 16px;\n          width: 16px;\n        }\n      </style>\n      <paper-button\n        raised\n        on-click=\"_onTap\"\n        id$=\"[[id]]\"\n        aria-label$=\"[[title]]\"\n      >\n        <iron-icon icon=\"[[icon]]\"></iron-icon> [[title]]\n      </paper-button>\n      <paper-tooltip for$=\"[[id]]\" animation-delay=\"200\"\n        >[[title]]</paper-tooltip\n      >\n    "]);

    _templateObject_499b66c0dbdc11e9bcafdb98156fc1d6 = function _templateObject_499b66c0dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  var LrnsysDialogToolbarButton =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrnsysDialogToolbarButton, _PolymerElement);

    function LrnsysDialogToolbarButton() {
      babelHelpers.classCallCheck(this, LrnsysDialogToolbarButton);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnsysDialogToolbarButton).apply(this, arguments));
    }

    babelHelpers.createClass(LrnsysDialogToolbarButton, [{
      key: "ready",

      /**
       * Ready lifecycle
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysDialogToolbarButton.prototype), "ready", this).call(this);
        this.dispatchEvent(new CustomEvent("button-initialized", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            id: this.id
          }
        }));
      }
      /**
       * Button has been tapped.
       */

    }, {
      key: "_onTap",
      value: function _onTap(e) {
        var normalizedEvent = (0, _polymerDom.dom)(e);
        var localTarget = normalizedEvent.localTarget;
        var id = localTarget.getAttribute("id");
        this.dispatchEvent(new CustomEvent("dialog-toolbar-button-tapped", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            id: id
          }
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_499b66c0dbdc11e9bcafdb98156fc1d6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-dialog-toolbar-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The title of the button.
           */
          title: {
            type: String
          },

          /**
           * The button icon.
           */
          icon: {
            type: String
          },

          /**
           * The button ID.
           */
          id: {
            type: String
          }
        };
      }
    }]);
    return LrnsysDialogToolbarButton;
  }(_polymerElement.PolymerElement);

  _exports.LrnsysDialogToolbarButton = LrnsysDialogToolbarButton;
  window.customElements.define(LrnsysDialogToolbarButton.tag, LrnsysDialogToolbarButton);
});