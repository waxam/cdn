define(["exports", "require", "../../../lit-element/lit-element.js", "../../simple-icon/simple-icon.js", "../../simple-icon/lib/simple-icons.js"], function (_exports, _require, _litElement, _simpleIcon, _simpleIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysDialogToolbarButton = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_904fcbd0552d11ebb4022f4768b4777e() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n        simple-icon {\n          display: inline-block;\n          --simple-icon-height: 16px;\n          --simple-icon-width: 16px;\n        }\n        button {\n          border: none;\n          background: transparent;\n        }\n      "]);

    _templateObject2_904fcbd0552d11ebb4022f4768b4777e = function _templateObject2_904fcbd0552d11ebb4022f4768b4777e() {
      return data;
    };

    return data;
  }

  function _templateObject_904fcbd0552d11ebb4022f4768b4777e() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <button\n        raised\n        @click=\"", "\"\n        id=\"", "\"\n        aria-label=\"", "\"\n      >\n        <simple-icon\n          icon=\"", "\"\n          accent-color=\"grey\"\n          contrast=\"4\"\n          dark\n        ></simple-icon>\n        ", "\n      </button>\n      <simple-tooltip for=\"", "\" animation-delay=\"0\"\n        >", "</simple-tooltip\n      >\n    "]);

    _templateObject_904fcbd0552d11ebb4022f4768b4777e = function _templateObject_904fcbd0552d11ebb4022f4768b4777e() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  var LrnsysDialogToolbarButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(LrnsysDialogToolbarButton, _LitElement);

    var _super = _createSuper(LrnsysDialogToolbarButton);

    babelHelpers.createClass(LrnsysDialogToolbarButton, [{
      key: "render",

      /**
       * LitElement render
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_904fcbd0552d11ebb4022f4768b4777e(), this._onTap, this.id, this.title, this.icon, this.title, this.id, this.title);
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_904fcbd0552d11ebb4022f4768b4777e())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-dialog-toolbar-button";
      }
      /**
       * HTMLElement
       */

    }]);

    function LrnsysDialogToolbarButton() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysDialogToolbarButton);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    }
    /**
     * LitElement / popular convention
     */


    babelHelpers.createClass(LrnsysDialogToolbarButton, [{
      key: "firstUpdated",

      /**
       * Ready lifecycle
       */
      value: function firstUpdated(changedProperties) {
        this.dispatchEvent(new CustomEvent("button-initialized", {
          detail: {
            id: this.id
          }
        }));
      }
      /**
       * Button has been tapped.
       */

    }, {
      key: "_onTap",
      value: function _onTap(e) {
        this.dispatchEvent(new CustomEvent("dialog-toolbar-button-tapped", {
          detail: {
            id: e.target.getAttribute("id")
          }
        }));
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * The title of the button.
           */
          title: {
            type: String
          },

          /**
           * The button icon.
           */
          icon: {
            type: String
          },

          /**
           * The button ID.
           */
          id: {
            type: String
          }
        };
      }
    }]);
    return LrnsysDialogToolbarButton;
  }(_litElement.LitElement);

  _exports.LrnsysDialogToolbarButton = LrnsysDialogToolbarButton;
  window.customElements.define(LrnsysDialogToolbarButton.tag, LrnsysDialogToolbarButton);
});