define(["../../../@polymer/polymer/polymer-legacy.js","../../../@polymer/polymer/lib/legacy/polymer.dom.js","../../simple-colors/simple-colors.js","../../simple-drawer/simple-drawer.js","../../paper-avatar/paper-avatar.js","../../../@polymer/app-layout/app-layout.js","../../../@polymer/paper-tooltip/paper-tooltip.js","../../../@polymer/paper-button/paper-button.js","../../../@polymer/iron-icons/iron-icons.js","./lrnsys-button-inner.js"],function(_polymerLegacy,_polymerDom,_simpleColors,_simpleDrawer,_paperAvatar,_appLayout,_paperTooltip,_paperButton,_ironIcons,_lrnsysButtonInner){"use strict";function _templateObject_d2f9194068f411e996b0af119cd7f5ea(){var data=babelHelpers.taggedTemplateLiteral(["\n    <style is=\"custom-style\" include=\"simple-colors\">\n      :host {\n        display: block;\n        --lrnsys-drawer-color: var(--simple-colors-foreground1);\n        --lrnsys-drawer-background-color: var(--simple-colors-background1);\n      }\n      paper-button {\n        display: inline-block;\n      }\n    </style>\n    <paper-button\n      class$=\"[[class]]\"\n      id=\"flyouttrigger\"\n      on-tap=\"toggleDrawer\"\n      raised=\"[[raised]]\"\n      disabled$=\"[[disabled]]\"\n      title=\"[[alt]]\"\n    >\n      <lrnsys-button-inner avatar=\"[[avatar]]\" icon=\"[[icon]]\" text=\"[[text]]\">\n        <slot name=\"button\"></slot>\n      </lrnsys-button-inner>\n    </paper-button>\n    <paper-tooltip for=\"flyouttrigger\" animation-delay=\"0\"\n      >[[alt]]</paper-tooltip\n    >\n  "],["\n    <style is=\"custom-style\" include=\"simple-colors\">\n      :host {\n        display: block;\n        --lrnsys-drawer-color: var(--simple-colors-foreground1);\n        --lrnsys-drawer-background-color: var(--simple-colors-background1);\n      }\n      paper-button {\n        display: inline-block;\n      }\n    </style>\n    <paper-button\n      class\\$=\"[[class]]\"\n      id=\"flyouttrigger\"\n      on-tap=\"toggleDrawer\"\n      raised=\"[[raised]]\"\n      disabled\\$=\"[[disabled]]\"\n      title=\"[[alt]]\"\n    >\n      <lrnsys-button-inner avatar=\"[[avatar]]\" icon=\"[[icon]]\" text=\"[[text]]\">\n        <slot name=\"button\"></slot>\n      </lrnsys-button-inner>\n    </paper-button>\n    <paper-tooltip for=\"flyouttrigger\" animation-delay=\"0\"\n      >[[alt]]</paper-tooltip\n    >\n  "]);_templateObject_d2f9194068f411e996b0af119cd7f5ea=function _templateObject_d2f9194068f411e996b0af119cd7f5ea(){return data};return data}/**
 * `lrnsys-drawer`
 *
 * @demo demo/index.html
 */(0,_polymerLegacy.Polymer)({_template:(0,_polymerLegacy.html)(_templateObject_d2f9194068f411e996b0af119cd7f5ea()),is:"lrnsys-drawer",listeners:{mousedown:"tapEventOn",mouseover:"tapEventOn",mouseout:"tapEventOff"},properties:{/**
     * State for if it is currently open.
     */opened:{type:Boolean,value:!1,reflectToAttribute:!0/* transition */ /* transition */},/**
     * If the button should be visually lifted off the UI.
     */raised:{type:Boolean,reflectToAttribute:!0},/**
     * Icon to present for clicking.
     */icon:{type:String},/**
     * Icon to present for clicking.
     */avatar:{type:String},/**
     * Text to present for clicking.
     */text:{type:String},/**
     * Side of the screen to align the flyout (right or left)
     */align:{type:String,value:"left"},/**
     * Alt / hover text for this link
     */alt:{type:String,reflectToAttribute:!0},/**
     * Header for the drawer
     */header:{type:String},/**
     * Disabled state.
     */disabled:{type:Boolean,value:!1,reflectToAttribute:!0},/**
     * Classes to add / subtract based on the item being hovered
     */hoverClass:{type:String},/**
     * Heading classes to apply downstream.
     */headingClass:{type:String,value:"white-text black"},/**
     * Tracks if focus state is applied
     */focusState:{type:Boolean,value:!1}},/**
   * Ready lifecycle
   */ready:function ready(){this.__modal=window.SimpleDrawer.requestAvailability()},/**
   * Attached lifecycle
   */attached:function attached(){this.$.flyouttrigger.addEventListener("focused-changed",this.focusToggle.bind(this))},/**
   * detached lifecycle
   */detached:function detached(){this.$.flyouttrigger.removeEventListener("focused-changed",this.focusToggle.bind(this))},/**
   * Handle a mouse on event and add the hoverclasses
   * to the classList array for paper-button.
   */tapEventOn:function tapEventOn(e){var _this=this;if(babelHelpers.typeof(this.hoverClass)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var classes=this.hoverClass.split(" ");classes.forEach(function(item,index){if(""!=item){_this.$.flyouttrigger.classList.add(item)}})}},/**
   * Handle a mouse out event and remove the hoverclasses
   * from the classList array for paper-button.
   */tapEventOff:function tapEventOff(e){var _this2=this;if(babelHelpers.typeof(this.hoverClass)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var classes=this.hoverClass.split(" ");classes.forEach(function(item,index){if(""!=item){_this2.$.flyouttrigger.classList.remove(item)}})}},/**
   * Toggle the drawer to open / close.
   */toggleDrawer:function toggleDrawer(){// assemble everything in the slot
var nodes=(0,_polymerDom.dom)(this).getEffectiveChildNodes(),h=document.createElement("span"),c=document.createElement("span");for(var i in nodes){if(babelHelpers.typeof(nodes[i].tagName)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){switch(nodes[i].getAttribute("slot")){case"header":h.appendChild(nodes[i].cloneNode(!0));break;default:c.appendChild(nodes[i].cloneNode(!0));break;}}}var evt=new CustomEvent("simple-drawer-show",{bubbles:!0,cancelable:!0,detail:{title:this.header,elements:{content:c,header:h},invokedBy:this.$.flyouttrigger,align:this.align,size:"30%",clone:!1}});this.dispatchEvent(evt)},/**
   * Handle toggle for mouse class and manage classList array for paper-button.
   */focusToggle:function focusToggle(e){var _this3=this;this.fire("focus-changed",{focus:this.focusState});// see if it has hover classes
if(babelHelpers.typeof(this.hoverClass)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){// break class into array
var classes=this.hoverClass.split(" ");// run through each and add or remove classes
classes.forEach(function(item,index){if(""!=item){if(_this3.focusState){_this3.$.flyouttrigger.classList.add(item)}else{_this3.$.flyouttrigger.classList.remove(item)}}})}this.focusState=!this.focusState},/**
   * Find out if the text does not have an avatar or an icon to the left,
   * and add a class to remove the left margin.
   */_getTextLabelClass:function _getTextLabelClass(){if(!this.avatar&&!this.icon){return"text-label-only"}return"text-label"}})});