define(["exports", "require", "../../lit/index.js", "../simple-colors/simple-colors.js", "../simple-icon/lib/simple-icon-lite.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button-lite.js", "../intersection-element/lib/IntersectionObserverMixin.js"], function (_exports, _require, _index, _simpleColors, _simpleIconLite, _simpleIcons, _simpleIconButtonLite, _IntersectionObserverMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CsvRender = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_db402750ce4611ecb13bcf602138080f, _templateObject2_db402750ce4611ecb13bcf602138080f, _templateObject3_db402750ce4611ecb13bcf602138080f, _templateObject4_db402750ce4611ecb13bcf602138080f, _templateObject5_db402750ce4611ecb13bcf602138080f, _templateObject6_db402750ce4611ecb13bcf602138080f;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `csv-render`
   * `Remote render a CSV file in place as an accessible table.`
   *
   * @microcopy - language worth noting:
   *  - CSV is comma separated values
   *
   * @demo ./demo/index.html
   * @element csv-render
   */
  var CsvRender = /*#__PURE__*/function (_IntersectionObserver) {
    babelHelpers.inherits(CsvRender, _IntersectionObserver);

    var _super = _createSuper(CsvRender);

    /**
     * HTMLElement
     */
    function CsvRender() {
      var _this;

      babelHelpers.classCallCheck(this, CsvRender);
      _this = _super.call(this);
      _this.loading = false;
      _this.table = [];
      _this.tableHeadings = [];
      _this.tableData = "";
      return _this;
    }
    /**
     * LitElement life cycle - property changed
     */


    babelHelpers.createClass(CsvRender, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(CsvRender.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(CsvRender.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "elementVisible" && _this2.elementVisible) {
            new Promise(function (res, rej) {
              return _require.default(["../hexagon-loader/hexagon-loader.js"], res, rej);
            });
            new Promise(function (res, rej) {
              return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
            });
          }

          if (["dataSource", "elementVisible"].includes(propName) && _this2.dataSource && _this2.elementVisible) {
            clearTimeout(_this2.__debouce);
            _this2.loading = true;
            _this2.__debouce = setTimeout(function () {
              _this2.loadCSVData();
            }, 500);
          }
        });
      }
      /**
       * LitElement render
       */

    }, {
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_db402750ce4611ecb13bcf602138080f || (_templateObject_db402750ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <hexagon-loader\n        id=\"loading\"\n        accent-color=\"", "\"\n        ?loading=\"", "\"\n        item-count=\"4\"\n        size=\"small\"\n      ></hexagon-loader>\n      <a href=\"", "\" id=\"download\" tabindex=\"-1\">\n        <simple-icon-button-lite\n          id=\"ficon\"\n          icon=\"file-download\"\n        ></simple-icon-button-lite>\n      </a>\n      <simple-tooltip for=\"ficon\" offset=\"14\" position=\"top\"\n        >Download table data</simple-tooltip\n      >\n      <table class=\"table\" summary=\"", "\">\n        ", "\n        <thead>\n          <tr>\n            ", "\n          </tr>\n        </thead>\n        <tbody>\n          ", "\n        </tbody>\n      </table>\n    "])), this.accentColor, this.loading, this.dataSource, this.summary, this.caption ? (0, _index.html)(_templateObject2_db402750ce4611ecb13bcf602138080f || (_templateObject2_db402750ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n              <caption>\n                ", "\n              </caption>\n            "])), this.caption) : "", this.tableHeadings.map(function (heading) {
          return (0, _index.html)(_templateObject3_db402750ce4611ecb13bcf602138080f || (_templateObject3_db402750ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral([" <th scope=\"col\">", "</th> "])), heading);
        }), this.table.map(function (row) {
          return (0, _index.html)(_templateObject4_db402750ce4611ecb13bcf602138080f || (_templateObject4_db402750ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n              <tr>\n                ", "\n              </tr>\n            "])), row.map(function (col) {
            return (0, _index.html)(_templateObject5_db402750ce4611ecb13bcf602138080f || (_templateObject5_db402750ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral([" <td>", "</td> "])), col);
          }));
        }));
      }
    }, {
      key: "handleResponse",
      value:
      /**
       * Convert from csv text to an array in the table function
       */
      function handleResponse() {
        this.table = this.CSVtoArray(this.tableData);
        this.tableHeadings = this.table.shift();
        this.loading = false;
      }
      /**
       * Mix of solutions from https://stackoverflow.com/questions/8493195/how-can-i-parse-a-csv-string-with-javascript-which-contains-comma-in-data
       */

    }, {
      key: "CSVtoArray",
      value: function CSVtoArray(text) {
        var p = "",
            row = [""],
            ret = [row],
            i = 0,
            r = 0,
            s = !0,
            l;

        for (l in text) {
          l = text[l];

          if ('"' === l) {
            if (s && l === p) row[i] += l;
            s = !s;
          } else if ("," === l && s) l = row[++i] = "";else if ("\n" === l && s) {
            if ("\r" === p) row[i] = row[i].slice(0, -1);
            row = ret[++r] = [l = ""];
            i = 0;
          } else row[i] += l;

          p = l;
        }

        return ret;
      }
      /**
       * generate appstore query
       */

    }, {
      key: "loadCSVData",
      value: function () {
        var _loadCSVData = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
          var _this3 = this;

          return regeneratorRuntime.wrap(function _callee$(_context) {
            while (1) {
              switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return fetch(this.dataSource, {
                    method: this.method
                  }).then(function (response) {
                    if (response.ok) return response.text();
                  }).then(function (text) {
                    _this3.tableData = text;

                    _this3.handleResponse();
                  });

                case 2:
                case "end":
                  return _context.stop();
              }
            }
          }, _callee, this);
        }));

        function loadCSVData() {
          return _loadCSVData.apply(this, arguments);
        }

        return loadCSVData;
      }()
    }], [{
      key: "styles",
      get:
      /**
       * LitElement style construction
       */
      function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(CsvRender), "styles", this)), [(0, _index.css)(_templateObject6_db402750ce4611ecb13bcf602138080f || (_templateObject6_db402750ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        .table {\n          width: 100%;\n          border: 1px solid var(--simple-colors-default-theme-accent-6);\n          border-collapse: collapse;\n          white-space: nowrap;\n          font-size: 16px;\n          background-color: var(--simple-colors-default-theme-grey-1);\n        }\n        .table thead {\n          padding-bottom: 0.16px;\n          position: sticky;\n        }\n        .table caption {\n          background-color: var(--simple-colors-default-theme-accent-1);\n          font-weight: bold;\n          padding: 8px;\n          border: 1px solid var(--simple-colors-default-theme-accent-6);\n          border-bottom: none;\n        }\n        :host(:not([accent-color])) .table caption,\n        :host([accent-color=\"grey\"]) .table caption {\n          background-color: var(--simple-colors-default-theme-accent-2);\n        }\n        .table tbody tr {\n          position: relative;\n          height: 48px;\n          -webkit-transition-duration: 0.28s;\n          transition-duration: 0.28s;\n          -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n          -webkit-transition-property: background-color;\n          transition-property: background-color;\n        }\n        .table tbody tr:hover {\n          background-color: var(--simple-colors-default-theme-accent-1);\n        }\n        :host(:not([accent-color])) .table tbody tr:hover,\n        :host([accent-color=\"grey\"]) .table tbody tr:hover {\n          background-color: var(--simple-colors-default-theme-accent-2);\n        }\n        .table td,\n        .table thead th,\n        .table th {\n          padding: 0 1.125em;\n          text-align: left;\n        }\n        .table td {\n          border-top: 1px solid var(--simple-colors-default-theme-accent-6);\n          border-bottom: 1px solid var(--simple-colors-default-theme-accent-6);\n        }\n        .table th {\n          position: relative;\n          vertical-align: bottom;\n          text-overflow: ellipsis;\n          font-size: 16px;\n          font-weight: bold;\n          line-height: 24px;\n          letter-spacing: 0;\n          color: rgba(0, 0, 0, 0.54);\n          height: 48px;\n          padding-bottom: 8px;\n          box-sizing: border-box;\n        }\n        #loading {\n          position: absolute;\n          left: calc(50% - 70px);\n        }\n        simple-icon-lite {\n          display: inline-flex;\n          margin: 0;\n          padding: 0;\n        }\n        #download button:hover,\n        #download button:focus,\n        #download button:active {\n          color: var(--simple-colors-default-theme-accent-8);\n          outline: 2px solid var(--simple-colors-default-theme-accent-6);\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "csv-render";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(CsvRender), "properties", this)), {}, {
          /**
           * Location of the CSV file.
           */
          dataSource: {
            type: String,
            attribute: "data-source"
          },
          loading: {
            type: Boolean
          },

          /**
           * Caption for the table to improve accessibility and readability.
           */
          caption: {
            type: String
          },

          /**
           * Summary to improve accessibility for screen readers.
           */
          summary: {
            type: String
          },

          /**
           * Table busted out as an array.
           */
          table: {
            type: Array
          },

          /**
           * Headings from the first row of the csv
           */
          tableHeadings: {
            type: Array
          },

          /**
           * Raw data pulled in from the csv file.
           */
          tableData: {
            type: String,
            attribute: "table-data"
          }
        });
      }
    }]);
    return CsvRender;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_simpleColors.SimpleColors));

  _exports.CsvRender = CsvRender;
  window.customElements.define(CsvRender.tag, CsvRender);
});