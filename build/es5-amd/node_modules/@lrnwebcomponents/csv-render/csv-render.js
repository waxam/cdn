define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../simple-colors/simple-colors.js", "../../@polymer/polymer/lib/elements/dom-if.js", "../../@polymer/polymer/lib/elements/dom-repeat.js"], function (_exports, _require, _polymerElement, _renderStatus, _simpleColors, _domIf, _domRepeat) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.CsvRender = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_0a361930b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        .table {\n          width: 100%;\n          border: 1px solid rgba(0, 0, 0, 0.12);\n          border-collapse: collapse;\n          white-space: nowrap;\n          font-size: 16px;\n          background-color: rgb(255, 255, 255);\n        }\n        .table thead {\n          padding-bottom: 0.16px;\n          position: sticky;\n        }\n        .table caption {\n          background-color: #eee;\n          font-weight: bold;\n          padding: 8px;\n          border: 1px solid rgba(0, 0, 0, 0.12);\n          border-bottom: none;\n        }\n        .table thead th {\n          text-align: center;\n        }\n        .table tbody tr {\n          position: relative;\n          height: 48px;\n          -webkit-transition-duration: 0.28s;\n          transition-duration: 0.28s;\n          -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);\n          -webkit-transition-property: background-color;\n          transition-property: background-color;\n        }\n        .table tbody tr:hover {\n          background-color: #eeeeee;\n        }\n        .table td,\n        .table th {\n          padding: 0 1.125em;\n          text-align: right;\n        }\n        .table td:first-of-type,\n        .table th:first-of-type {\n          padding-left: 24px;\n        }\n        .table td:last-of-type,\n        .table th:last-of-type {\n          padding-right: 24px;\n        }\n        .table td {\n          border-top: 1px solid rgba(0, 0, 0, 0.12);\n          border-bottom: 1px solid rgba(0, 0, 0, 0.12);\n        }\n        .table th {\n          position: relative;\n          vertical-align: bottom;\n          text-overflow: ellipsis;\n          font-size: 16px;\n          font-weight: bold;\n          line-height: 24px;\n          letter-spacing: 0;\n          color: rgba(0, 0, 0, 0.54);\n          height: 48px;\n          padding-bottom: 8px;\n          box-sizing: border-box;\n        }\n        #loading {\n          position: absolute;\n        }\n        #download paper-button {\n          border-radius: 36px;\n          width: 36px;\n          height: 36px;\n          min-width: unset;\n          padding: 0;\n          margin: 0;\n          display: inline-flex;\n        }\n        iron-icon {\n          display: inline-flex;\n          margin: 0;\n          padding: 0;\n        }\n        #download paper-button:hover,\n        #download paper-button:focus,\n        #download paper-button:active {\n          outline: 2px solid grey;\n        }\n      </style>\n      <iron-ajax\n        auto\n        url=\"[[dataSource]]\"\n        handle-as=\"text\"\n        debounce-duration=\"500\"\n        last-response=\"{{tableData}}\"\n        on-response=\"handleResponse\"\n      ></iron-ajax>\n      <hexagon-loader\n        id=\"loading\"\n        loading\n        color=\"[[color]]\"\n        item-count=\"4\"\n        size=\"small\"\n      ></hexagon-loader>\n      <a\n        href=\"[[dataSource]]\"\n        id=\"download\"\n        tabindex=\"-1\"\n        style$=\"color:[[hexColor]]\"\n      >\n        <paper-button\n          ><iron-icon icon=\"file-download\"></iron-icon\n        ></paper-button>\n      </a>\n      <paper-tooltip for=\"download\" animation-delay=\"200\" offset=\"14\"\n        >Download table data</paper-tooltip\n      >\n      <table class=\"table\" summary=\"[[summary]]\">\n        <template is=\"dom-if\" if=\"[[caption]]\">\n          <caption>\n            [[caption]]\n          </caption>\n        </template>\n        <thead>\n          <tr>\n            <template is=\"dom-repeat\" items=\"[[tableHeadings]]\" as=\"heading\">\n              <th scope=\"col\">[[heading]]</th>\n            </template>\n          </tr>\n        </thead>\n        <tbody>\n          <template is=\"dom-repeat\" items=\"[[table]]\" as=\"row\">\n            <tr>\n              <template is=\"dom-repeat\" items=\"[[row]]\" as=\"col\">\n                <td>[[col]]</td>\n              </template>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n    "]);

    _templateObject_0a361930b3b911e9b58d79562a23326c = function _templateObject_0a361930b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  /**
   * `csv-render`
   * `Remote render a CSV file in place as an accessible table.`
   *
   * @microcopy - language worth noting:
   *  - CSV is comma separated values
   *
   * @customElement
   * @polymer
   * @polymerLegacy
   * @demo demo/index.html
   */
  var CsvRender =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(CsvRender, _PolymerElement);

    function CsvRender() {
      var _this;

      babelHelpers.classCallCheck(this, CsvRender);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(CsvRender).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../hexagon-loader/hexagon-loader.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-ajax/iron-ajax.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(CsvRender, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(CsvRender.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/paper-button/paper-button.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/paper-tooltip/paper-tooltip.js"], res, rej);
          });
        });
      }
    }, {
      key: "handleResponse",

      /**
       * Convert from csv text to an array in the table function
       */
      value: function handleResponse(e) {
        this.table = this.CSVtoArray(this.tableData);
        this.tableHeadings = this.table.shift();
        this.shadowRoot.querySelector("#loading").loading = false;
      }
      /**
       * Mix of solutions from https://stackoverflow.com/questions/8493195/how-can-i-parse-a-csv-string-with-javascript-which-contains-comma-in-data
       */

    }, {
      key: "CSVtoArray",
      value: function CSVtoArray(text) {
        var p = "",
            row = [""],
            ret = [row],
            i = 0,
            r = 0,
            s = !0,
            l;

        for (l in text) {
          l = text[l];

          if ('"' === l) {
            if (s && l === p) row[i] += l;
            s = !s;
          } else if ("," === l && s) l = row[++i] = "";else if ("\n" === l && s) {
            if ("\r" === p) row[i] = row[i].slice(0, -1);
            row = ret[++r] = [l = ""];
            i = 0;
          } else row[i] += l;

          p = l;
        }

        return ret;
      }
    }, {
      key: "_getHexColor",
      value: function _getHexColor(color) {
        var name = color.replace("-text", "");
        var tmp = new _simpleColors.SimpleColors();

        if (tmp.colors[name]) {
          return tmp.colors[name][6];
        }

        return "#000000";
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_0a361930b3b911e9b58d79562a23326c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "csv-render";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Location of the CSV file.
           */
          dataSource: {
            type: String
          },

          /**
           * Caption for the table to improve accessibility and readability.
           */
          caption: {
            type: String
          },

          /**
           * Summary to improve accessibility for screen readers.
           */
          summary: {
            type: String
          },

          /**
           * Table busted out as an array.
           */
          table: {
            type: Array,
            value: []
          },

          /**
           * Headings from the first row of the csv
           */
          tableHeadings: {
            type: Array,
            value: []
          },

          /**
           * Raw data pulled in from the csv file.
           */
          tableData: {
            type: String,
            value: ""
          },

          /**
           * Class for the color
           */
          hexColor: {
            type: String,
            computed: "_getHexColor(color)"
          },

          /**
           * Color class work to apply
           */
          color: {
            type: String,
            value: "grey",
            reflectToAttribute: true
          }
        };
      }
    }]);
    return CsvRender;
  }(_polymerElement.PolymerElement);

  _exports.CsvRender = CsvRender;
  window.customElements.define(CsvRender.tag, CsvRender);
});