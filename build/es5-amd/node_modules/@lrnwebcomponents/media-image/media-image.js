define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../hax-body-behaviors/lib/HAXWiring.js", "../schema-behaviors/schema-behaviors.js", "../../@polymer/polymer/lib/elements/dom-if.js", "../../@polymer/polymer/lib/utils/flattened-nodes-observer.js"], function (_exports, _require, _polymerElement, _renderStatus, _HAXWiring, _schemaBehaviors, _domIf, _flattenedNodesObserver) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MediaImage = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject3_501e32f0add011e983121daa910d1ce6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        .caption {\n          padding-bottom: 25px;\n          border-bottom: dashed 2px lightgray;\n          margin-bottom: 25px;\n          line-height: 1.5;\n          font-size: 18px;\n        }\n\n        ::slotted(*) {\n          margin-top: 0;\n        }\n        ::slotted(*:last-child) {\n          margin-bottom: 0;\n        }\n      </style>\n      <div class=\"caption\" hidden$=\"[[!__hasContent]]\">\n        <slot id=\"slot\"></slot>\n      </div>\n    "]);

    _templateObject3_501e32f0add011e983121daa910d1ce6 = function _templateObject3_501e32f0add011e983121daa910d1ce6() {
      return data;
    };

    return data;
  }

  function _templateObject2_501e32f0add011e983121daa910d1ce6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        .citation {\n          font-size: 12.8px;\n          font-style: italic;\n          color: #4c4c4c;\n          margin: 15px 0 15px;\n        }\n      </style>\n      <div class=\"citation\"><slot></slot></div>\n    "]);

    _templateObject2_501e32f0add011e983121daa910d1ce6 = function _templateObject2_501e32f0add011e983121daa910d1ce6() {
      return data;
    };

    return data;
  }

  function _templateObject_501e32f0add011e983121daa910d1ce6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          width: auto;\n          margin: auto;\n          --box-background-color: #f7f6ef;\n        }\n\n        :host([card]) {\n          box-shadow: 0 1px 5px rgba(0, 0, 0, 0.14);\n          padding: 20px;\n        }\n\n        :host([box]) {\n          background-color: var(--box-background-color);\n          padding: 20px;\n        }\n\n        :host([round]) iron-image {\n          border-radius: 50%;\n        }\n\n        @media screen and (min-width: 450px) {\n          :host([size=\"small\"]) {\n            max-width: 50%;\n          }\n        }\n\n        @media screen and (min-width: 650px) {\n          :host([size=\"small\"]) {\n            max-width: 35%;\n          }\n        }\n\n        @media screen and (min-width: 900px) {\n          :host([size=\"small\"]) {\n            max-width: 25%;\n          }\n        }\n\n        iron-image {\n          width: 100%;\n          --iron-image-width: 100%;\n        }\n\n        :host([offset=\"left\"]) {\n          float: left;\n          margin: var(--media-image-offset-width, 1.5vw);\n          margin-left: calc(-2 * var(--media-image-offset-width, 1.5vw));\n          margin-top: 0;\n          margin-bottom: calc(0.1 * var(--media-image-offset-width, 1.5vw));\n        }\n\n        :host([offset=\"right\"]) {\n          float: right;\n          margin: var(--media-image-offset-width, 1.5vw);\n          margin-right: calc(-2 * var(--media-image-offset-width, 1.5vw));\n          margin-top: 0;\n          margin-bottom: calc(0.1 * var(--media-image-offset-width, 1.5vw));\n        }\n\n        :host([offset=\"wide\"]) {\n          margin: 0 calc(-1 * var(--media-image-offset-wide-width, 3.5vw));\n          max-width: 100vw;\n        }\n\n        :host([offset=\"narrow\"]) {\n          max-width: var(--media-image-offset-narrow-max-width, 500px);\n          margin: auto;\n        }\n      </style>\n      <iron-image\n        resource$=\"[[schemaResourceID]]-image\"\n        src$=\"[[source]]\"\n        alt$=\"[[alt]]\"\n      ></iron-image>\n\n      <media-image-citation>\n        <slot name=\"citation\">\n          [[citation]]\n        </slot>\n      </media-image-citation>\n\n      <media-image-caption>\n        <slot name=\"caption\">\n          [[caption]]\n        </slot>\n      </media-image-caption>\n    "], ["\n      <style>\n        :host {\n          display: block;\n          width: auto;\n          margin: auto;\n          --box-background-color: #f7f6ef;\n        }\n\n        :host([card]) {\n          box-shadow: 0 1px 5px rgba(0, 0, 0, 0.14);\n          padding: 20px;\n        }\n\n        :host([box]) {\n          background-color: var(--box-background-color);\n          padding: 20px;\n        }\n\n        :host([round]) iron-image {\n          border-radius: 50%;\n        }\n\n        @media screen and (min-width: 450px) {\n          :host([size=\"small\"]) {\n            max-width: 50%;\n          }\n        }\n\n        @media screen and (min-width: 650px) {\n          :host([size=\"small\"]) {\n            max-width: 35%;\n          }\n        }\n\n        @media screen and (min-width: 900px) {\n          :host([size=\"small\"]) {\n            max-width: 25%;\n          }\n        }\n\n        iron-image {\n          width: 100%;\n          --iron-image-width: 100%;\n        }\n\n        :host([offset=\"left\"]) {\n          float: left;\n          margin: var(--media-image-offset-width, 1.5vw);\n          margin-left: calc(-2 * var(--media-image-offset-width, 1.5vw));\n          margin-top: 0;\n          margin-bottom: calc(0.1 * var(--media-image-offset-width, 1.5vw));\n        }\n\n        :host([offset=\"right\"]) {\n          float: right;\n          margin: var(--media-image-offset-width, 1.5vw);\n          margin-right: calc(-2 * var(--media-image-offset-width, 1.5vw));\n          margin-top: 0;\n          margin-bottom: calc(0.1 * var(--media-image-offset-width, 1.5vw));\n        }\n\n        :host([offset=\"wide\"]) {\n          margin: 0 calc(-1 * var(--media-image-offset-wide-width, 3.5vw));\n          max-width: 100vw;\n        }\n\n        :host([offset=\"narrow\"]) {\n          max-width: var(--media-image-offset-narrow-max-width, 500px);\n          margin: auto;\n        }\n      </style>\n      <iron-image\n        resource\\$=\"[[schemaResourceID]]-image\"\n        src\\$=\"[[source]]\"\n        alt\\$=\"[[alt]]\"\n      ></iron-image>\n\n      <media-image-citation>\n        <slot name=\"citation\">\n          [[citation]]\n        </slot>\n      </media-image-citation>\n\n      <media-image-caption>\n        <slot name=\"caption\">\n          [[caption]]\n        </slot>\n      </media-image-caption>\n    "]);

    _templateObject_501e32f0add011e983121daa910d1ce6 = function _templateObject_501e32f0add011e983121daa910d1ce6() {
      return data;
    };

    return data;
  }

  // This blows up for some reason
  // import './lib/media-image-caption.js'
  // import './lib/media-image-citation.js'

  /**
   * `media-image`
   * `A simple image presentaiton with minor documented options`
   * @demo demo/index.html
   */
  var MediaImage =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(MediaImage, _SchemaBehaviors);

    function MediaImage() {
      var _this;

      babelHelpers.classCallCheck(this, MediaImage);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MediaImage).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-image/iron-image.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      (0, _renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this), function () {
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(MediaImage.haxProperties, MediaImage.tag, this);
      });
      return _this;
    }

    babelHelpers.createClass(MediaImage, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_501e32f0add011e983121daa910d1ce6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "media-image";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Image source.
           */
          source: {
            type: String,
            value: ""
          },

          /**
           * Image citation.
           */
          citation: {
            type: String,
            value: ""
          },

          /**
           * Image caption.
           */
          caption: {
            type: String,
            value: ""
          },

          /**
           * Image alt.
           */
          alt: {
            type: String,
            value: ""
          },

          /**
           * The size of the image (small, wide).
           */
          size: {
            type: String,
            value: "wide",
            reflectToAttribute: true
          },

          /**
           * The shape of the image (round).
           */
          round: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Applies card styling.
           */
          card: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Applies box styling.
           */
          box: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Applies left or right offset
           * - none
           * - left
           * - right
           * - wide
           * - narrow
           */
          offset: {
            type: String,
            value: "none",
            reflectToAttribute: true
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(MediaImage), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(MediaImage), "properties", this));
        }

        return props;
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Styled image",
            descrption: "An image gizmo with the ability to provide simple, consistent styling and accessibility options.",
            icon: "editor:insert-photo",
            color: "indigo",
            groups: ["Image", "Media"],
            handles: [{
              type: "image",
              source: "source",
              title: "alt",
              alt: "alt",
              citation: "citation",
              caption: "caption"
            }],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [{
              property: "source",
              title: "Source",
              description: "The URL for the image.",
              inputMethod: "textfield",
              icon: "link",
              required: true
            }, {
              property: "alt",
              title: "Alternative text",
              description: "Text to describe the image to non-sighted users.",
              inputMethod: "textfield",
              icon: "accessibility",
              required: false
            }],
            configure: [{
              property: "source",
              title: "Source",
              description: "The URL for the image.",
              inputMethod: "haxupload",
              icon: "link",
              required: true
            }, {
              property: "alt",
              title: "Alternative text",
              description: "Text to describe the image to non-sighted users.",
              inputMethod: "alt",
              icon: "accessibility",
              required: true
            }, {
              property: "round",
              title: "Round image",
              description: "Crops the image appearance to be circle in shape.",
              inputMethod: "boolean",
              icon: "account",
              required: false
            }, {
              property: "card",
              title: "Card",
              description: "Apply a drop shadow to give the appearance of being a raised card.",
              inputMethod: "boolean",
              icon: "check-box-outline-blank",
              required: false
            }, {
              property: "box",
              title: "Box",
              description: "Apply a visual box around the image.",
              inputMethod: "boolean",
              icon: "image:crop-square",
              required: false
            }, {
              property: "offset",
              title: "Offset",
              description: "Apply a left or right offset to the image.",
              inputMethod: "select",
              icon: "image:crop-square",
              options: {
                none: "none",
                left: "left",
                right: "right",
                wide: "wide",
                narrow: "narrow"
              }
            }, {
              property: "citation",
              title: "Citation",
              description: "Citation for the image.",
              inputMethod: "textfield",
              icon: "text-format",
              required: false
            }, {
              property: "caption",
              title: "Caption",
              description: "Caption for the image.",
              inputMethod: "textfield",
              icon: "text-format",
              required: false
            }]
          }
        };
      }
    }]);
    return MediaImage;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.MediaImage = MediaImage;
  window.customElements.define(MediaImage.tag, MediaImage);
  /**
   * `media-image-citation`
   * `A simple image presentaiton with minor documented options`
   * @demo demo/index.html
   */

  var MediaImageCitation =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(MediaImageCitation, _PolymerElement);

    function MediaImageCitation() {
      babelHelpers.classCallCheck(this, MediaImageCitation);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MediaImageCitation).apply(this, arguments));
    }

    babelHelpers.createClass(MediaImageCitation, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject2_501e32f0add011e983121daa910d1ce6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "media-image-citation";
      }
    }]);
    return MediaImageCitation;
  }(_polymerElement.PolymerElement);

  window.customElements.define(MediaImageCitation.tag, MediaImageCitation);
  /**
   * `media-image-caption`
   * `A simple image presentaiton with minor documented options`
   * @demo demo/index.html
   */

  var MediaImageCaption =
  /*#__PURE__*/
  function (_PolymerElement2) {
    babelHelpers.inherits(MediaImageCaption, _PolymerElement2);

    function MediaImageCaption() {
      babelHelpers.classCallCheck(this, MediaImageCaption);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MediaImageCaption).apply(this, arguments));
    }

    babelHelpers.createClass(MediaImageCaption, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject3_501e32f0add011e983121daa910d1ce6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "media-image-caption";
      }
    }]);
    return MediaImageCaption;
  }(_polymerElement.PolymerElement);

  window.customElements.define(MediaImageCaption.tag, MediaImageCaption);
});