define(["exports", "require", "../../../lit/index.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../simple-tooltip/simple-tooltip.js"], function (_exports, _require, _index, _simpleIconLite, _simpleIcons, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleToolbarButtonBehaviors = _exports.SimpleToolbarButton = _exports.SimpleToolbarGlobalProperties = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_008e9ad0feba11eb8439e3eec9305af7, _templateObject2_008e9ad0feba11eb8439e3eec9305af7, _templateObject3_008e9ad0feba11eb8439e3eec9305af7, _templateObject4_008e9ad0feba11eb8439e3eec9305af7, _templateObject5_008e9ad0feba11eb8439e3eec9305af7, _templateObject6_008e9ad0feba11eb8439e3eec9305af7, _templateObject7_008e9ad0feba11eb8439e3eec9305af7, _templateObject8_008e9ad0feba11eb8439e3eec9305af7, _templateObject9_008e9ad0feba11eb8439e3eec9305af7, _templateObject10_008e9ad0feba11eb8439e3eec9305af7, _templateObject11_008e9ad0feba11eb8439e3eec9305af7, _templateObject12_008e9ad0feba11eb8439e3eec9305af7;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var SimpleToolbarGlobalProperties = {
    /**
     * override default centered alignment of button: "left" or "right" default center
     */
    alignHorizontal: {
      attribute: "align-horizontal",
      reflect: true,
      type: String
    },

    /**
     * override vertical alignment of button: "top" or "bottom" default middle
     */
    alignVertical: {
      attribute: "align-vertical",
      reflect: true,
      type: String
    },

    /**
     * is toolbar collapsed?
     */
    disabled: {
      name: "disabled",
      type: Boolean,
      attribute: "disabled",
      reflect: true
    },

    /**
     * is toolbar collapsed?
     */
    hidden: {
      name: "hidden",
      type: Boolean,
      attribute: "hidden",
      reflect: true
    },

    /**
     * Optionally place icon at top, bottom, or right of label
     */
    iconPosition: {
      type: String,
      attribute: "icon-position",
      reflect: true
    },

    /**
     * show text label for more button.
     */
    showTextLabel: {
      name: "showTextLabel",
      type: Boolean,
      attribute: "more-show-text-label"
    },

    /**
     * Direction that the tooltip should flow
     */
    tooltipDirection: {
      type: String,
      attribute: "tooltip-direction",
      reflect: true
    }
  };
  _exports.SimpleToolbarGlobalProperties = SimpleToolbarGlobalProperties;

  var SimpleToolbarButtonBehaviors = function SimpleToolbarButtonBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);
        _this = _super.call(this);
        _this.iconPosition = "left";
        _this.alignVertical = "center";
        _this.alignHorizontal = "center";
        _this.disabled = false;
        _this.showTextLabel = false;
        _this.toggles = false;
        _this.shortcutKeys = "";
        new Promise(function (res, rej) {
          return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
        });
        return _this;
      }
      /**
       * gets button element
       *
       * @readonly
       * @memberof SimpleToolbarButton
       */


      babelHelpers.createClass(_class, [{
        key: "button",
        get: function get() {
          if (!this.__button) this.__button = this.shadowRoot && this.shadowRoot.querySelector("button[part=button]") ? this.shadowRoot.querySelector("button[part=button]") : undefined;
          return this.__button;
        }
        /**
         * current label based on toggled state
         *
         * @readonly
         * @memberof SimpleToolbarButton
         */

      }, {
        key: "currentLabel",
        get: function get() {
          return this._defaultOrToggled(this.label, this.toggledLabel, this.isToggled);
        }
        /**
         * current icon based on toggled state
         *
         * @readonly
         * @memberof SimpleToolbarButton
         */

      }, {
        key: "currentIcon",
        get: function get() {
          return this._defaultOrToggled(this.icon, this.toggledIcon, this.isToggled);
        }
        /**
         * current label based on toggled state
         *
         * @readonly
         * @memberof SimpleToolbarButton
         */

      }, {
        key: "currentTooltip",
        get: function get() {
          return this._defaultOrToggled(this.tooltip, this.toggledTootip, this.isToggled) || this.currentLabel;
        }
        /**
         * determines if button is toggled
         *
         * @readonly
         * @memberof SimpleToolbarButton
         */

      }, {
        key: "isToggled",
        get: function get() {
          return !!this.toggles & !!this.toggled;
        }
      }, {
        key: "updated",
        value: function updated(changedProperties) {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "updated", this).call(this, changedProperties);
          changedProperties.forEach(function (oldValue, propName) {});
        }
        /**
         * Called every time the element is inserted into the DOM. Useful for
         * running setup code, such as fetching resources or rendering.
         * Generally, you should try to delay work until this time.
         */

      }, {
        key: "connectedCallback",
        value: function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          this.dispatchEvent(new CustomEvent("register-button", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
        /**
         * life cycle, element is detatched
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          this.dispatchEvent(new CustomEvent("deregister-button", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
        }
        /**
         * updates a button value based on whether or not button is toggled
         *
         * @param {string} the value when toggled off
         * @param {string} the value when toggled on
         * @param {boolean} whether the button is toggled
         * @returns {string} the correct value based on
         * whether or not the button is toggled
         */

      }, {
        key: "_defaultOrToggled",
        value: function _defaultOrToggled(toggledOff, toggledOn) {
          return this._uniqueText(toggledOn) && this.isToggled ? toggledOn : toggledOff;
        }
        /**
         * handles button click
         *
         * @param {event} e event
         */

      }, {
        key: "_handleClick",
        value: function _handleClick(e) {
          this.toggle();
        }
        /**
         * customizable event for when shortcut keys are pressed
         *
         * @param {string} key
         */

      }, {
        key: "_handleShortcutKeys",
        value: function _handleShortcutKeys(e, key) {}
      }, {
        key: "toggle",
        value: function toggle() {
          if (this.toggles) this.toggled = !this.toggled;
        }
      }, {
        key: "click",
        value: function click(e) {
          this._handleClick(e);
        }
        /**
         * updates toolbar buttonregistry as needed
         *
         */

      }, {
        key: "updateButtonRegistry",
        value: function updateButtonRegistry() {
          this.dispatchEvent(new CustomEvent("update-button-registry", {
            bubbles: true,
            cancelable: true,
            composed: true,
            detail: this
          }));
        }
        /**
         * is label specified
         *
         * @readonly
         */

      }, {
        key: "hasLabel",
        get: function get() {
          return this._uniqueText(this.currentLabel);
        }
        /**
         * is icon specified
         *
         * @readonly
         */

      }, {
        key: "hasIcon",
        get: function get() {
          return this._uniqueText(this.currentIcon);
        }
        /**
         * is tooltip specified
         *
         * @readonly
         */

      }, {
        key: "hasTooltip",
        get: function get() {
          return this._uniqueText(this.currentTooltip);
        }
        /**
         * is visible label is needed or specified
         *
         * @readonly
         */

      }, {
        key: "labelVisible",
        get: function get() {
          return (!this.hasIcon || this.showTextLabel) && this.hasLabel;
        }
        /**
         * is tooltip needed or specified
         *
         * @readonly
         */

      }, {
        key: "tooltipVisible",
        get: function get() {
          return (this.hasTooltip || this.hasLabel) && (this.showTooltip || !this.labelVisible || this._uniqueText(this.currentLabel, this.currentTooltip));
        }
        /**
         * checks to see if a string is unique and not empty
         *
         * @param {string} [string1='']
         * @param {string} [string2='']
         * @returns
         */

      }, {
        key: "_uniqueText",
        value: function _uniqueText() {
          var string1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
          var string2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          return (string1 || "").trim() !== (string2 || "").trim();
        }
        /**
         * template for button icon
         *
         * @readonly
         */

      }, {
        key: "iconTemplate",
        get: function get() {
          return !this.hasIcon ? "" : (0, _index.html)(_templateObject_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["<simple-icon-lite\n            id=\"icon\"\n            aria-hidden=\"true\"\n            icon=\"", "\"\n            part=\"icon\"\n          ></simple-icon-lite>"])), this.currentIcon);
        }
        /**
         * template for button label
         *
         * @readonly
         */

      }, {
        key: "labelTemplate",
        get: function get() {
          return !this.hasLabel ? "" : (0, _index.html)(_templateObject2_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject2_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["<span\n            id=\"label\"\n            class=\"", "\"\n            part=\"label\"\n            >", "</span\n          >"])), this.labelVisible ? "" : "offscreen", this.currentLabel);
        }
        /**
         * template for button tooltip
         *
         * @readonly
         */

      }, {
        key: "tooltipTemplate",
        get: function get() {
          return !this.tooltipVisible ? "" : (0, _index.html)(_templateObject3_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject3_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["<simple-tooltip\n            id=\"tooltip\"\n            for=\"button\"\n            position=\"", "\"\n            part=\"tooltip\"\n            fit-to-visible-bounds\n            >", "</simple-tooltip\n          >"])), this.tooltipDirection || "bottom", this.currentTooltip || this.currentLabel);
        }
        /**
         * template for button, based on whether or not the button toggles
         *
         * @readonly
         */

      }, {
        key: "buttonTemplate",
        get: function get() {
          return this.toggles ? (0, _index.html)(_templateObject4_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject4_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral([" <button\n              id=\"button\"\n              aria-pressed=\"", "\"\n              class=\"simple-toolbar-button\"\n              ?disabled=\"", "\"\n              ?controls=\"", "\"\n              @click=\"", "\"\n              @keypress=\"", "\"\n              tabindex=\"0\"\n              part=\"button\"\n            >\n              ", " ", "\n            </button>\n            ", ""])), this.isToggled ? "true" : "false", this.disabled, this.controls, this._handleClick, this._handleKeys, this.iconTemplate, this.labelTemplate, this.tooltipTemplate) : (0, _index.html)(_templateObject5_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject5_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral([" <button\n              id=\"button\"\n              class=\"simple-toolbar-button\"\n              ?disabled=\"", "\"\n              ?controls=\"", "\"\n              @click=\"", "\"\n              @keypress=\"", "\"\n              tabindex=\"0\"\n              part=\"button\"\n            >\n              ", " ", "\n            </button>\n            ", ""])), this.disabled, this.controls, this._handleClick, this._handleKeys, this.iconTemplate, this.labelTemplate, this.tooltipTemplate);
        }
      }, {
        key: "render",
        value: function render() {
          return (0, _index.html)(_templateObject6_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject6_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["", ""])), this.buttonTemplate);
        }
        /**
         * styles for offscreen elements
         *
         * @readonly
         * @static
         */

      }], [{
        key: "tag",
        get:
        /**
         * Store the tag name to make it easier to obtain directly.
         */
        function get() {
          return "simple-toolbar-button";
        }
      }, {
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, SimpleToolbarGlobalProperties), {}, {
            /**
             * The `id` of the `simple-toolbar` that the toolbar controls.
             */
            controls: {
              type: String,
              attribute: "controls",
              reflect: true
            },

            /**
             * Optional iron icon name for the button.
             */
            icon: {
              type: String,
              attribute: "icon",
              reflect: true
            },

            /**
             * Label for the icon.
             */
            label: {
              type: String
            },

            /**
             * Optional space-separated list of shortcut keys
             */
            shortcutKeys: {
              attribute: "shortcut-keys",
              type: String
            },

            /**
             * Show text label even if an icon is named?
             */
            showTextLabel: {
              attribute: "show-text-label",
              type: Boolean,
              reflect: true
            },

            /**
             * Alway show tooltip.
             */
            showTooltip: {
              attribute: "show-tooltip",
              type: Boolean,
              reflect: true
            },

            /**
             * The active selected range, inherited from the toolbar
             */
            target: {
              type: Object
            },

            /**
             * Optional iron icon name for the button if it is toggled.
             */
            toggledIcon: {
              attribute: "toggled-icon",
              type: String
            },

            /**
             * Label for the icon, if button is toggled.
             */
            toggledLabel: {
              attribute: "toggled-label",
              type: String
            },

            /**
             * Can this button toggle?
             */
            toggles: {
              type: Boolean
            },

            /**
             * Can this button toggle?
             */
            toggled: {
              attribute: "toggled",
              type: Boolean
            },

            /**
             * Label for the icon, if button is toggled.
             */
            toggledTooltip: {
              attribute: "toggled-tooltip",
              type: String
            }
          });
        }
      }, {
        key: "labelStyles",
        get: function get() {
          return [(0, _index.css)(_templateObject7_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject7_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n          #label {\n            padding: 0 var(--simple-toolbar-button-label-padding, 2px);\n            white-space: var(--simple-toolbar-button-label-white-space, normal);\n          }\n          .offscreen {\n            position: absolute;\n            left: -999999px;\n            top: 0;\n            height: 0;\n            width: 0;\n            overflow: hidden;\n          }\n        "])))];
        }
        /**
         * styles for button icon
         *
         * @readonly
         * @static
         */

      }, {
        key: "iconStyles",
        get: function get() {
          return [(0, _index.css)(_templateObject8_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject8_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n          #icon:not([icon]) {\n            display: none;\n          }\n          #icon[icon] {\n            width: var(\n              --simple-toolbar-button-width,\n              var(--simple-toolbar-button-height, 24px)\n            );\n            height: var(--simple-toolbar-button-height, 24px);\n            flex: 0 0 auto;\n          }\n        "])))];
        }
        /**
         * styles for button tooltip
         *
         * @readonly
         * @static
         */

      }, {
        key: "tooltipStyles",
        get: function get() {
          return [(0, _index.css)(_templateObject9_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject9_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n          simple-tooltip {\n            z-index: -1;\n          }\n          :host(:hover) simple-tooltip,\n          :host(:focus-within) simple-tooltip {\n            z-index: var(--simple-toolbar-button-z-index, 2);\n          }\n        "])))];
        }
        /**
         * these styles are essential to how the button works
         *
         * @readonly
         * @static
         */

      }, {
        key: "simpleButtonCoreStyles",
        get: function get() {
          return [(0, _index.css)(_templateObject10_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject10_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            display: inline-flex;\n            white-space: nowrap;\n            transition: all 0.5s;\n            z-index: 1;\n            transition: z-index 0s;\n          }\n          :host(:hover),\n          :host(:focus-wthin) {\n            z-index: var(--simple-toolbar-focus-z-index, 100) !important;\n          }\n          :host([hidden]) {\n            z-index: -1;\n            visibility: hidden;\n            opacity: 0;\n            height: 0;\n            overflow: hidden;\n          }\n          :host([disabled]) {\n            pointer-events: none;\n          }\n          button[part=\"button\"] {\n            display: flex;\n            margin: 0;\n            white-space: nowrap;\n            width: 100%;\n            height: 100%;\n          }\n        "])))];
        }
        /**
         * these styles can be extended and overridden if button layout needs to change
         *
         * @readonly
         * @static
         */

      }, {
        key: "simpleButtonLayoutStyles",
        get: function get() {
          return [(0, _index.css)(_templateObject11_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject11_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n          :host {\n            font-family: sans-serif;\n            font-size: 13px;\n            flex: 0 1 auto;\n            min-width: var(\n              --simple-toolbar-button-min-width,\n              var(\n                --simple-toolbar-button-width,\n                var(--simple-toolbar-button-height, 24px)\n              )\n            );\n            z-index: 1;\n          }\n          :host(:hover),\n          :host(:focus),\n          :host(:focus-within) {\n            z-index: 2;\n          }\n          button[part=\"button\"] {\n            font-family: inherit;\n            font-size: inherit;\n            min-width: var(\n              --simple-toolbar-button-min-width,\n              var(\n                --simple-toolbar-button-width,\n                var(--simple-toolbar-button-height, 24px)\n              )\n            );\n            min-height: var(--simple-toolbar-button-height, 24px);\n            padding: var(--simple-toolbar-button-padding, 1px);\n            flex: var(--simple-toolbar-button-flex, 0 0 auto);\n            transition: all 0.5s;\n            align-items: var(--simple-toolbar-button-align, center);\n            justify-content: var(--simple-toolbar-button-justify, center);\n          }\n\n          :host([icon-position=\"top\"]) button[part=\"button\"] {\n            flex-direction: column;\n          }\n          :host([icon-position=\"bottom\"]) button[part=\"button\"] {\n            flex-direction: column-reverse;\n          }\n          :host([icon-position=\"right\"]) button[part=\"button\"] {\n            flex-direction: row-reverse;\n          }\n          :host([align-vertical=\"top\"][icon-position=\"left\"])\n            button[part=\"button\"],\n          :host([align-vertical=\"top\"][icon-position=\"right\"])\n            button[part=\"button\"],\n          :host([align-horizontal=\"left\"][icon-position=\"top\"])\n            button[part=\"button\"],\n          :host([align-horizontal=\"left\"][icon-position=\"bottom\"])\n            button[part=\"button\"] {\n            align-items: flex-start;\n          }\n          :host([align-vertical=\"bottom\"][icon-position=\"left\"])\n            button[part=\"button\"],\n          :host([align-vertical=\"bottom\"][icon-position=\"right\"])\n            button[part=\"button\"],\n          :host([align-horizontal=\"right\"][icon-position=\"top\"])\n            button[part=\"button\"],\n          :host([align-horizontal=\"right\"][icon-position=\"bottom\"]) {\n            align-items: flex-end;\n          }\n          :host([align-horizontal=\"left\"][icon-position=\"left\"])\n            button[part=\"button\"],\n          :host([align-horizontal=\"left\"][icon-position=\"right\"])\n            button[part=\"button\"],\n          :host([align-vertical=\"top\"][icon-position=\"top\"])\n            button[part=\"button\"],\n          :host([align-vertical=\"top\"][icon-position=\"bottom\"]) {\n            justify-content: flex-start;\n          }\n          :host([align-horizontal=\"right\"][icon-position=\"left\"])\n            button[part=\"button\"],\n          :host([align-horizontal=\"right\"][icon-position=\"right\"])\n            button[part=\"button\"],\n          :host([align-vertical=\"bottom\"][icon-position=\"top\"])\n            button[part=\"button\"],\n          :host([align-vertical=\"bottom\"][icon-position=\"bottom\"]) {\n            justify-content: flex-end;\n          }\n        "])))];
        }
        /**
         * these styles can be extended and overridden if button colors need to change
         *
         * @readonly
         * @static
         */

      }, {
        key: "simpleButtonThemeStyles",
        get: function get() {
          return [(0, _index.css)(_templateObject12_008e9ad0feba11eb8439e3eec9305af7 || (_templateObject12_008e9ad0feba11eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n          button[part=\"button\"] {\n            color: var(--simple-toolbar-button-color);\n            border-color: var(\n              --simple-toolbar-button-border-color,\n              var(--simple-toolbar-border-color, transparent)\n            );\n            background-color: var(--simple-toolbar-button-bg, transparent);\n            opacity: var(--simple-toolbar-button-opacity, 1);\n            border-width: var(\n              --simple-toolbar-button-border-width,\n              var(--simple-toolbar-border-width, 1px)\n            );\n            border-radius: var(--simple-toolbar-border-radius, 3px);\n            border-style: solid;\n            text-transform: unset;\n          }\n          button[part=\"button\"][aria-pressed=\"true\"] {\n            color: var(--simple-toolbar-button-toggled-color);\n            border-color: var(--simple-toolbar-button-toggled-border-color);\n            background-color: var(--simple-toolbar-button-toggled-bg);\n            opacity: var(--simple-toolbar-button-toggled-opacity, 0.8);\n          }\n          button[part=\"button\"]:focus,\n          button[part=\"button\"]:hover {\n            color: var(--simple-toolbar-button-hover-color);\n            background-color: var(--simple-toolbar-button-hover-bg);\n            border-color: var(--simple-toolbar-button-hover-border-color);\n            opacity: var(--simple-toolbar-button-hover-opacity, 0.8);\n          }\n          button[part=\"button\"][disabled] {\n            cursor: not-allowed;\n            color: var(--simple-toolbar-button-disabled-color, unset);\n            background-color: var(--simple-toolbar-button-disabled-bg, unset);\n            border-color: var(\n              --simple-toolbar-button-disabled-border-color,\n              unset\n            );\n            opacity: var(--simple-toolbar-button-disabled-opacity, 0.5);\n          }\n        "])))];
        }
        /**
         * aggregates separate styles
         *
         * @readonly
         * @static
         */

      }, {
        key: "styles",
        get: function get() {
          return [].concat(babelHelpers.toConsumableArray(this.iconStyles), babelHelpers.toConsumableArray(this.labelStyles), babelHelpers.toConsumableArray(this.tooltipStyles), babelHelpers.toConsumableArray(this.simpleButtonCoreStyles), babelHelpers.toConsumableArray(this.simpleButtonLayoutStyles), babelHelpers.toConsumableArray(this.simpleButtonThemeStyles));
        }
      }]);
      return _class;
    }(SuperClass);
  };
  /**
   * `simple-toolbar-button`
   * a button for rich text editor (custom buttons can extend this)
   *
  ### Styling
  
  `<simple-toolbar-button>` provides following custom properties and mixins
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  --simple-toolbar-button-height | button height | 24px
  --simple-toolbar-button-flex | flex for button in a toolbar | 0 0 auto
  --simple-toolbar-button-min-width | button min-width | --simple-toolbar-button-height
  --simple-toolbar-button-padding | button padding | 0
  --simple-toolbar-button-opacity | button opacity | 1
  --simple-toolbar-button-color | button text color | unset
  --simple-toolbar-button-bg | button background color | transparent
  --simple-toolbar-button-border-color | button border color | --simple-toolbar-border-color
  --simple-toolbar-button-border-width | button border width | --simple-toolbar-border-width
  --simple-toolbar-button-border-radius | button border radius | 3px
  --simple-toolbar-button-toggled-opacity | button opacity when toggled | 0.8
  --simple-toolbar-button-toggled-color | button text color when toggled | unset
  --simple-toolbar-button-toggled-bg | button background color when toggled | unset
  --simple-toolbar-button-toggled-border-color | button border color when toggled | unset
  --simple-toolbar-button-hover-opacity | button opacity when hovered | 0.8
  --simple-toolbar-button-hover-color | button text color when hovered | unset
  --simple-toolbar-button-hover-bg | button background color when hovered | unset
  --simple-toolbar-button-hover-border-color | button border color when hovered | unset
  --simple-toolbar-button-disabled-opacity | button opacity when disabled | 0.5
  --simple-toolbar-button-disabled-color | button text color when disabled | unset
  --simple-toolbar-button-disabled-bg | button background color when disabled | unset
  --simple-toolbar-button-disabled-border-color | button border color when disabled | unset
   * 
   * @customElement
   * @extends SimpleToolbarButtonBehaviors
   * @extends LitElement
   * @lit-html
   * @lit-element
   * @demo ./demo/buttons.html
   */


  _exports.SimpleToolbarButtonBehaviors = SimpleToolbarButtonBehaviors;

  var SimpleToolbarButton = /*#__PURE__*/function (_SimpleToolbarButtonB) {
    babelHelpers.inherits(SimpleToolbarButton, _SimpleToolbarButtonB);

    var _super2 = _createSuper(SimpleToolbarButton);

    function SimpleToolbarButton() {
      babelHelpers.classCallCheck(this, SimpleToolbarButton);
      return _super2.apply(this, arguments);
    }

    return SimpleToolbarButton;
  }(SimpleToolbarButtonBehaviors(_index.LitElement));

  _exports.SimpleToolbarButton = SimpleToolbarButton;
  window.customElements.define(SimpleToolbarButton.tag, SimpleToolbarButton);
});