define(["exports","meta","../../../@polymer/polymer/polymer-element.js","../../circle-progress/circle-progress.js","../../../@polymer/paper-button/paper-button.js","../../simple-tooltip/simple-tooltip.js","../../../@polymer/paper-styles/paper-styles.js","../../../@polymer/paper-spinner/paper-spinner.js","../../../@polymer/neon-animation/neon-animation.js","../../../@polymer/iron-icons/iron-icons.js"],function(_exports,meta,_polymerElement,_circleProgress,_paperButton,_simpleTooltip,_paperStyles,_paperSpinner,_neonAnimation,_ironIcons){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.LrnsysProgressCircle=void 0;meta=babelHelpers.interopRequireWildcard(meta);function _templateObject_28b6aab07a0011eab074ed896f61b288(){var data=babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style is=\"custom-style\" include=\"paper-material-styles\">\n          :host {\n            --paper-button-ink-color: var(\n              --lrnsys-progress-color,\n              var(--paper-green-500)\n            );\n            display: block;\n            transition: box-shadow\n                var(--lrnsys-progress-circle-transition, 0.5s) linear,\n              color var(--lrnsys-progress-circle-transition, 0.5s) ease-in-out,\n              background-color var(--lrnsys-progress-circle-transition, 0.5s)\n                ease-in-out;\n          }\n          :host([status=\"complete\"]) .circle-wrapper {\n            --paper-button-ink-color: var(\n              --lrnsys-progress-complete-color,\n              var(--paper-green-500)\n            );\n            box-shadow: 0px 0px 0px 0.16px\n              var(--lrnsys-progress-complete-color, var(--paper-green-900));\n          }\n          :host([status=\"disabled\"]) .circle-wrapper {\n            box-shadow: none;\n          }\n          :host([status=\"available\"]) .circle-wrapper {\n            box-shadow: none;\n          }\n          :host([active]) .circle-wrapper {\n            box-shadow: 0px 0px 0px 0.16px var(--google-grey-500, #555555);\n          }\n          .circle-wrapper {\n            border-radius: 100%;\n          }\n          .button {\n            margin: 0;\n            padding: 0;\n            display: flex;\n            min-width: 40px;\n            border-radius: 100%;\n          }\n          paper-button {\n            width: var(--lrnsys-progress-circle-size, 40px);\n            height: var(--lrnsys-progress-circle-size, 40px);\n          }\n          circle-progress {\n            margin: 0;\n            --circle-progress-width: var(--lrnsys-progress-circle-size, 40px);\n            --circle-progress-height: var(--lrnsys-progress-circle-size, 40px);\n            --circle-progress-stroke-color: var(\n              --lrnsys-progress-color,\n              var(--paper-green-500)\n            );\n            --circle-progress-bg-stroke-color: var(\n              --lrnsys-progress-container-color,\n              var(--google-grey-300)\n            );\n            --circle-progress-transition: 0.5s;\n            --circle-progress-stroke-linecap: square;\n            transition: color 0.5s ease-in-out,\n              background-color 0.5s ease-in-out;\n          }\n          paper-spinner {\n            display: block;\n            font-size: 16px;\n            width: var(--lrnsys-progress-spinner-size, 32px);\n            height: var(--lrnsys-progress-spinner-size, 32px);\n            position: absolute;\n            z-index: 1;\n            margin: 4px;\n            padding: 0;\n            visibility: visible;\n            opacity: 1;\n            transition: visibility 0.4s, opacity 0.4s ease;\n          }\n          paper-spinner.multi {\n            --paper-spinner-layer-1-color: var(--paper-purple-500);\n            --paper-spinner-layer-2-color: var(--paper-cyan-500);\n            --paper-spinner-layer-3-color: var(--paper-blue-grey-500);\n            --paper-spinner-layer-4-color: var(--paper-amber-500);\n          }\n          .transition {\n            opacity: 0.4;\n            width: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n            height: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n          }\n          iron-icon {\n            visibility: visible;\n            opacity: 1;\n            transition: width 0.1s linear, height 0.1s linear,\n              visibility 0.4s ease, opacity 0.4s ease;\n            width: var(--lrnsys-progress-icon-size, 24px);\n            height: var(--lrnsys-progress-icon-size, 24px);\n          }\n          .disabled {\n            background-color: var(\n              --lrnsys-progress-disabled-color,\n              var(--google-grey-500)\n            );\n            color: white;\n          }\n          .loading {\n            background-color: white;\n            color: black;\n          }\n          .finished iron-icon:not(.activeIcon) {\n            width: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n            height: calc(var(--lrnsys-progress-icon-size, 24px) - 8px);\n          }\n          .available {\n            background-color: var(\n              --lrnsys-progress-active-color,\n              var(--google-grey-300)\n            );\n            color: var(\n              --lrnsys-progress-active-text-color,\n              var(--google-grey-500)\n            );\n          }\n          .activeIcon {\n            color: black;\n          }\n          .complete .activeIcon {\n            color: white;\n          }\n          :host([active]) .complete .activeIcon,\n          :host([active]) .finished .activeIcon {\n            color: black;\n          }\n          .complete,\n          .finished {\n            background-color: var(\n              --lrnsys-progress-container-color,\n              var(--paper-green-500)\n            );\n            color: white;\n          }\n          :host([active]) circle-progress {\n            background-color: white;\n            color: black;\n          }\n          .listview-title {\n            font-size: 16px;\n            padding: 0;\n            margin: 0;\n          }\n          .description-content {\n            font-size: 8px;\n            font-style: italic;\n          }\n          .circle-wrapper {\n            display: inline-block;\n          }\n          .listview {\n            height: 32px;\n            padding: 4px 0;\n            margin: 0;\n            vertical-align: top;\n          }\n          .link {\n            height: 40px;\n            width: 100%;\n          }\n          :host([list-view]) .button {\n            margin: 0;\n            padding: 0;\n            display: block;\n            min-width: 40px;\n            border-radius: 0;\n          }\n        </style>\n      </custom-style>\n      <simple-tooltip\n        hidden$=\"[[!toolTip]]\"\n        for=\"button\"\n        position=\"bottom\"\n        offset=\"8\"\n        animation-delay=\"0\"\n      >\n        [[label]]\n      </simple-tooltip>\n      <paper-button\n        id=\"button\"\n        class=\"button\"\n        disabled$=\"[[disabled]]\"\n        title=\"[[label]]\"\n      >\n        <span class=\"circle-wrapper\">\n          <paper-spinner\n            active$=\"[[loading]]\"\n            hidden$=\"[[!loading]]\"\n            class=\"multi\"\n            alt$=\"Loading content for [[label]]\"\n          ></paper-spinner>\n          <circle-progress\n            class$=\"[[status]]\"\n            value=\"[[value]]\"\n            max=\"[[max]]\"\n            stroke-width=\"[[strokeWidth]]\"\n            angle=\"180\"\n          >\n            <iron-icon\n              id=\"icon\"\n              icon=\"[[activeIcon]]\"\n              hidden$=\"[[!activeIcon]]\"\n            ></iron-icon>\n            <slot name=\"image\"></slot>\n          </circle-progress>\n        </span>\n        <span hidden$=\"[[!listView]]\" id=\"listview\" class=\"listview\">\n          <h3 class=\"listview-title\">[[label]]</h3>\n          <div class=\"description-content\">\n            <slot name=\"description\"></slot> <slot></slot>\n          </div>\n        </span>\n      </paper-button>\n    "]);_templateObject_28b6aab07a0011eab074ed896f61b288=function _templateObject_28b6aab07a0011eab074ed896f61b288(){return data};return data}/**
 * `lrnsys-progress-circle`
 * @element lrnsys-progress-circle
 * `circle that the outline grows as the percentage ticks up`
 *
 */var LrnsysProgressCircle=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(LrnsysProgressCircle,_PolymerElement);babelHelpers.createClass(LrnsysProgressCircle,[{key:"pathFromUrl",// simple path from a url modifier
value:function pathFromUrl(url){return url.substring(0,url.lastIndexOf("/")+1)}/**
   * Ready state
   */},{key:"ready",value:function ready(){babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysProgressCircle.prototype),"ready",this).call(this);// seems odd but if we don't do this we can get issues with
// this field being unified across all circles when really
// we have to track this state per circle.
this._bubbleProgress={25:!1,50:!1,75:!1}}/**
   * Test if the value = max meaning that we hit complete from available
   */},{key:"_testValueComplete",value:function _testValueComplete(newValue,oldValue){// ensure we were previously available before marking complete
// this way we don't conflict with the finished state which can
// only be set from outside the circle as the circle doesn't
// know how many items are in the set
if(newValue>=this.max&&"available"==this.status){this.status="complete"}// add events for certain mile stones; this has to be in reverse order
// otherwise we could actuall be passing 75 but it was at 0. This allows
// for jumping ahead and not triggering 25/50/75 all at once and preventing
// over reported percentages upstream
else if(.75<=newValue/this.max&&!this._bubbleProgress[75]){this.dispatchEvent(new CustomEvent("node-percent-milestone",{bubbles:!0,cancelable:!0,composed:!0,detail:{percentage:75}}));this._bubbleProgress[75]=!0}else if(.5<=newValue/this.max&&!this._bubbleProgress[50]){this.dispatchEvent(new CustomEvent("node-percent-milestone",{bubbles:!0,cancelable:!0,composed:!0,detail:{percentage:50}}));this._bubbleProgress[50]=!0}else if(.25<=newValue/this.max&&!this._bubbleProgress[25]){this.dispatchEvent(new CustomEvent("node-percent-milestone",{bubbles:!0,cancelable:!0,composed:!0,detail:{percentage:25}}));this._bubbleProgress[25]=!0}}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_28b6aab07a0011eab074ed896f61b288())}},{key:"tag",get:function get(){return"lrnsys-progress-circle"}},{key:"properties",get:function get(){return{/**
       * Current value.
       */value:{type:Number,value:0,notify:!0,reflectToAttribute:!0,observer:"_testValueComplete"},/**
       * Whether to add a tooltip on hover.
       */toolTip:{type:Boolean,value:!0,reflectToAttribute:!0},/**
       * If this is in a list view, expand the output.
       */listView:{type:Boolean,value:!0,reflectToAttribute:!0},/**
       * Icon.
       */icon:{type:String,value:"icons:description",reflectToAttribute:!0},/**
       * Special icon to use when the item has been completed.
       */iconComplete:{type:String,value:"icons:description",reflectToAttribute:!0},/**
       * Loading icon
       */loadingIcon:{type:String,value:"hourglass-full",reflectToAttribute:!0},/**
       * Finished icon
       */finishedIcon:{type:String,value:"thumb-up",reflectToAttribute:!0},/**
       * Current value.
       */activeIcon:{type:String,notify:!0,computed:"_getActiveIcon(icon, iconComplete, status)"},/**
       * Array position within a larger body of items.
       */step:{type:Number,value:0,reflectToAttribute:!0},/**
       * If this item is active or not in the larger list
       */active:{type:Boolean,value:!1,reflectToAttribute:!0,notify:!0},/**
       * Status of the progression.
       * Possible values are disabled, loading, available, complete
       */status:{type:String,value:"available",reflectToAttribute:!0,notify:!0,observer:"_statusChange"},/**
       * Correctly disable the button if it's status is such.
       */disabled:{type:Boolean,computed:"_disableStatus(status)"},/**
       * Calculate if something is in a loading status which invokes a swirl.
       */loading:{type:Boolean,computed:"_loadingStatus(status)"},/**
       * Boolean to invoke "finished" state. Useful for the last circle
       * in a series.
       */finished:{type:Boolean,computed:"_finishedStatus(status)"},/**
       * Max progression for doing math against.
       */max:{type:String,reflectToAttribute:!0},/**
       * Internal property to ensure we only ding 1x
       */__chimed:{type:Boolean,value:!1},/**
       * Internal property to ensure we only finish 1x
       */__finishchimed:{type:Boolean,value:!1},/**
       * URL to link to on click.
       */url:{type:String,value:"#",reflectToAttribute:!0},/**
       * Data url to bubble up for more advanced implementations.
       */dataUrl:{type:String,value:!1,reflectToAttribute:!0},/**
       * Stroke width.
       */strokeWidth:{type:Number,value:4},/**
       * Tracks if focus state is applied for element consistency
       * when dealing with focus vs hover states.
       */focusState:{type:Boolean,value:!1},/**
       * Play sound status; if this should play sound
       * when it hits certain milestones or not.
       */playSound:{type:Boolean,value:!1,reflectToAttribute:!0},/**
       * Play sound at end; if this should play sound
       * when it hits certain milestones or not.
       */playFinishSound:{type:Boolean,value:!1,reflectToAttribute:!0},/**
       * Play sound on complete.
       */completeSound:{type:String,value:this.pathFromUrl(decodeURIComponent(meta.url))+"assets/complete.mp3",reflectToAttribute:!0},/**
       * Play sound on complete.
       */finishedSound:{type:String,value:this.pathFromUrl(decodeURIComponent(meta.url))+"assets/finished.mp3",reflectToAttribute:!0},/**
       * Fire and track milestones towards completion state.
       */_bubbleProgress:{type:Object,value:{25:!1,50:!1,75:!1}}}}}]);function LrnsysProgressCircle(){var _this;babelHelpers.classCallCheck(this,LrnsysProgressCircle);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(LrnsysProgressCircle).call(this));setTimeout(function(){_this.addEventListener("click",_this.tapEventOn.bind(babelHelpers.assertThisInitialized(_this)));_this.addEventListener("mouseover",_this.focusOn.bind(babelHelpers.assertThisInitialized(_this)));_this.addEventListener("mouseout",_this.focusOff.bind(babelHelpers.assertThisInitialized(_this)));_this.addEventListener("focused-changed",_this.focusEvent.bind(babelHelpers.assertThisInitialized(_this)))},0);return _this}/**
   * Focus event for UX consistency.
   */babelHelpers.createClass(LrnsysProgressCircle,[{key:"focusEvent",value:function focusEvent(e){// see if it has hover classes
if(!this.disabled&&"loading"!=this.status){// focus shows focus
if(this.focusState){// force icon to be set to real one and class added
this.shadowRoot.querySelector("#icon").icon=this.icon;this.shadowRoot.querySelector("#icon").classList.add("activeIcon")}else{// if complete set it back to what it was
if("complete"==this.status||"finished"==this.status){this.shadowRoot.querySelector("#icon").icon=this.activeIcon}// drop the class for active step
this.shadowRoot.querySelector("#icon").classList.remove("activeIcon")}this.focusState=!this.focusState}}/**
   * Focus event for UX consistency.
   */},{key:"focusOn",value:function focusOn(e){// see if it has hover classes
if(!this.disabled&&"loading"!=this.status){// force icon to be set to real one and class added
this.shadowRoot.querySelector("#icon").icon=this.icon;this.shadowRoot.querySelector("#icon").classList.add("activeIcon")}}/**
   * Focus event for UX consistency.
   */},{key:"focusOff",value:function focusOff(e){// see if it has hover classes
if(!this.disabled&&"loading"!=this.status){// if complete set it back to what it was
if("complete"==this.status||"finished"==this.status){this.shadowRoot.querySelector("#icon").icon=this.activeIcon}// drop the class for active step
this.shadowRoot.querySelector("#icon").classList.remove("activeIcon")}}/**
   * Tapped on the item.
   */},{key:"tapEventOn",value:function tapEventOn(e){var target=e.target;this.dispatchEvent(new CustomEvent("node-is-active",{bubbles:!0,cancelable:!0,composed:!0,detail:{target:target}}))}/**
   * Calculate which icon to present.
   */},{key:"_getActiveIcon",value:function _getActiveIcon(icon,iconComplete,status){if(babelHelpers.typeof(icon)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){var tmp=icon;// support for a loading icon while loading
if("loading"==status){tmp=this.loadingIcon;this.shadowRoot.querySelector("#icon").classList.add("transition")}else if("finished"==status){tmp=this.finishedIcon}else if("complete"==status&&babelHelpers.typeof(iconComplete)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){if(this.playSound&&!this.__chimed){this._playSound()}tmp=iconComplete}else{this.shadowRoot.querySelector("#icon").classList.remove("transition")}return tmp}return!1}/**
   * Play the sound effect.
   */},{key:"_playSound",value:function _playSound(){// calculate sound to use and ensure it only ever happens once
// via the __chimed flag
if("complete"==this.status){window.audio=new Audio(this.completeSound);this.__chimed=!0}else if("finished"==this.status){window.audio=new Audio(this.finishedSound);this.__finishchimed=!0}else{// shouldn't be possible
window.audio=new Audio}window.audio.play()}/**
   * Calculate loading based on the status of the item.
   */},{key:"_loadingStatus",value:function _loadingStatus(status){if("loading"==status){return!0}return!1}/**
   * Calculate loading based on the status of the item.
   */},{key:"_finishedStatus",value:function _finishedStatus(status){if("finished"==status){if(this.playFinishSound&&!this.__finishchimed){this._playSound()}return!0}return!1}/**
   * Notice when state changes to fire up an event for others to respond to.
   */},{key:"_statusChange",value:function _statusChange(newValue,oldValue){// verify this isn't loading up
if(babelHelpers.typeof(oldValue)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))&&newValue!==oldValue){this.dispatchEvent(new CustomEvent("node-status-change",{bubbles:!0,cancelable:!0,composed:!0,detail:{status:newValue}}))}}/**
   * Calculate disable based on the status of the item.
   */},{key:"_disableStatus",value:function _disableStatus(status){if("disabled"==status){return!0}return!1}}]);return LrnsysProgressCircle}(_polymerElement.PolymerElement);_exports.LrnsysProgressCircle=LrnsysProgressCircle;window.customElements.define(LrnsysProgressCircle.tag,LrnsysProgressCircle)});