define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../hax-body-behaviors/lib/HAXWiring.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _polymerElement, _renderStatus, _HAXWiring, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ParallaxImage = void 0;

  function _templateObject_0e1d6ad0b49011e9ae0d876050e9d419() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --parallax-image-background: \"\";\n          --parallax-title-background: rgba(0, 0, 0, 0.3);\n          --parallax-title-font: #fff;\n        }\n\n        .parallax_container {\n          height: 400px;\n          width: 100%;\n          overflow: hidden;\n          display: flex;\n          justify-content: center;\n        }\n\n        .parallax {\n          background-image: var(--parallax-image-background);\n          background-attachment: fixed;\n          background-position: top center;\n          background-repeat: no-repeat;\n          background-size: cover;\n          width: 100%;\n          height: 100%;\n          justify-content: center;\n        }\n\n        #bgParallax {\n          display: flex;\n          align-items: center;\n        }\n\n        .title {\n          background: var(--parallax-title-background);\n          display: block;\n          padding: 20px 15px;\n          text-align: center;\n          width: 40%;\n          color: var(--parallax-title-font);\n          font-size: 32px;\n          position: absolute;\n          margin-top: 120px;\n        }\n\n        @media screen and (max-width: 900px) {\n          .title {\n            font-size: 16px;\n          }\n        }\n      </style>\n\n      <a href=\"[[url]]\" target$=\"[[_urlTarget(url)]]\">\n        <div class=\"parallax_container\">\n          <div id=\"bgParallax\" class=\"parallax\">\n            <div class=\"title\" id=\"titleParallax\">\n              <slot name=\"parallax_heading\"></slot>\n            </div>\n          </div>\n        </div>\n      </a>\n    "]);

    _templateObject_0e1d6ad0b49011e9ae0d876050e9d419 = function _templateObject_0e1d6ad0b49011e9ae0d876050e9d419() {
      return data;
    };

    return data;
  }

  /**
   * `parallax-image`
   * @demo demo/index.html
   */
  var ParallaxImage =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(ParallaxImage, _SchemaBehaviors);

    function ParallaxImage() {
      var _this;

      babelHelpers.classCallCheck(this, ParallaxImage);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ParallaxImage).call(this));
      (0, _renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this), function () {
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(ParallaxImage.haxProperties, ParallaxImage.tag, this);
      });
      return _this;
    }

    babelHelpers.createClass(ParallaxImage, [{
      key: "_urlTarget",
      value: function _urlTarget(url) {
        if (url) {
          var external = this._outsideLink(url);

          if (external) {
            return "_blank";
          }
        }

        return false;
      }
      /**
       * Internal function to check if a url is external
       */

    }, {
      key: "_outsideLink",
      value: function _outsideLink(url) {
        if (url.indexOf("http") != 0) return false;
        var loc = location.href,
            path = location.pathname,
            root = loc.substring(0, loc.indexOf(path));
        return url.indexOf(root) != 0;
      }
    }, {
      key: "__updateStyles",
      value: function __updateStyles(imageBg) {
        this.updateStyles({
          "--parallax-image-background": "url(".concat(imageBg, ")")
        });
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ParallaxImage.prototype), "ready", this).call(this);
        var bgParallax = this.$.bgParallax;
        var titleParallax = this.$.titleParallax;
        window.addEventListener("scroll", function (e) {
          var yParallaxPosition = window.scrollY * -0.2;
          var yParallaxPositionTitle = yParallaxPosition * 1.4;
          bgParallax.style.backgroundPosition = "center ".concat(yParallaxPosition, "px");
          titleParallax.style.transform = "translate3D(0, ".concat(yParallaxPositionTitle, "px, 0)");
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("scroll", function (e) {
          var yParallaxPosition = window.scrollY * -0.2;
          var yParallaxPositionTitle = yParallaxPosition * 1.4;
          bgParallax.style.backgroundPosition = "center ".concat(yParallaxPosition, "px");
          titleParallax.style.transform = "translate3D(0, ".concat(yParallaxPositionTitle, "px, 0)");
        });
        babelHelpers.get(babelHelpers.getPrototypeOf(ParallaxImage.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_0e1d6ad0b49011e9ae0d876050e9d419());
      }
    }, {
      key: "tag",
      get: function get() {
        return "parallax-image";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Image
           */
          imageBg: {
            type: String,
            value: "",
            reflectToAttribute: true
          },

          /**
           * Url
           */
          url: {
            type: String,
            value: "",
            reflectToAttribute: true
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ParallaxImage), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(ParallaxImage), "properties", this));
        }

        return props;
      }
    }, {
      key: "observers",
      get: function get() {
        return ["__updateStyles(imageBg)"];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Sample gizmo",
            description: "The user will be able to see this for selection in a UI.",
            icon: "av:play-circle-filled",
            color: "grey",
            groups: ["Video", "Media"],
            handles: [{
              type: "video",
              url: "source"
            }],
            meta: {
              author: "Your organization on github"
            }
          },
          settings: {
            quick: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: []
          }
        };
      }
    }]);
    return ParallaxImage;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.ParallaxImage = ParallaxImage;
  window.customElements.define(ParallaxImage.tag, ParallaxImage);
});