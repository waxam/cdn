define(["exports", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _litElement, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ParallaxImage = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_8ae99c60c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --parallax-image-background: \"\";\n          --parallax-title-background: rgba(0, 0, 0, 0.3);\n          --parallax-title-font: #fff;\n        }\n\n        .parallax_container {\n          height: 400px;\n          width: 100%;\n          overflow: hidden;\n          display: flex;\n          justify-content: center;\n        }\n\n        .parallax {\n          background-image: var(--parallax-image-background);\n          background-attachment: fixed;\n          background-position: top center;\n          background-repeat: no-repeat;\n          background-size: cover;\n          width: 100%;\n          height: 100%;\n          justify-content: center;\n        }\n\n        #bgParallax {\n          display: flex;\n          align-items: center;\n        }\n\n        .title {\n          background: var(--parallax-title-background);\n          display: block;\n          padding: 20px 15px;\n          text-align: center;\n          width: 40%;\n          color: var(--parallax-title-font);\n          font-size: 32px;\n          position: absolute;\n          margin-top: 120px;\n        }\n\n        @media screen and (max-width: 900px) {\n          .title {\n            font-size: 16px;\n          }\n        }\n      "]);

    _templateObject2_8ae99c60c96f11ea8be5e1d5fe7ec787 = function _templateObject2_8ae99c60c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_8ae99c60c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div\n        class=\"parallax_container\"\n        aria-describedby=\"", "\"\n      >\n        <div id=\"bgParallax\" class=\"parallax\">\n          <div class=\"title\" id=\"titleParallax\">\n            <slot name=\"parallax_heading\"></slot>\n          </div>\n        </div>\n      </div>\n    "]);

    _templateObject_8ae99c60c96f11ea8be5e1d5fe7ec787 = function _templateObject_8ae99c60c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `parallax-image`
   * @demo demo/index.html
   * @element parallax-image
   */
  var ParallaxImage =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(ParallaxImage, _SchemaBehaviors);
    babelHelpers.createClass(ParallaxImage, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8ae99c60c96f11ea8be5e1d5fe7ec787(), this.describedBy || "");
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_8ae99c60c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "parallax-image";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ParallaxImage), "properties", this), {
          /**
           * Image
           */
          imageBg: {
            type: String,
            attribute: "image-bg",
            reflect: true
          },

          /**
           * Aria-describedby data passed down to appropriate tag
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          }
        });
      }
    }]);

    function ParallaxImage() {
      var _this;

      babelHelpers.classCallCheck(this, ParallaxImage);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ParallaxImage).call(this));
      _this.imageBg = "";
      return _this;
    }

    babelHelpers.createClass(ParallaxImage, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "imageBg") {
            _this2.style.setProperty("--parallax-image-background", "url(".concat(_this2.imageBg, ")"));
          }
        });
      }
    }, {
      key: "scrollBy",
      value: function scrollBy(e) {
        var bgParallax = this.shadowRoot.querySelector("#bgParallax");
        var titleParallax = this.shadowRoot.querySelector("#titleParallax");
        var yParallaxPosition = window.scrollY * -0.2;
        var yParallaxPositionTitle = yParallaxPosition * 1.4;
        bgParallax.style.backgroundPosition = "center ".concat(yParallaxPosition, "px");
        titleParallax.style.transform = "translate3D(0, ".concat(yParallaxPositionTitle, "px, 0)");
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(ParallaxImage.prototype), "connectedCallback", this).call(this);
        setTimeout(function () {
          window.addEventListener("scroll", _this3.scrollBy.bind(_this3));
        }, 0);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("scroll", this.scrollBy.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(ParallaxImage.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Parallax image",
            description: "Image scroll by",
            icon: "av:play-circle-filled",
            color: "grey",
            groups: ["Image", "Media"],
            handles: [{
              type: "image",
              url: "source",
              ariaDescribedby: "describedBy"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "imageBg",
              title: "Image",
              description: "image",
              inputMethod: "haxupload",
              icon: "image"
            }],
            configure: [{
              property: "imageBg",
              title: "Image",
              description: "image to be involved in the background",
              inputMethod: "haxupload"
            }, {
              slot: "parallax_heading",
              title: "Heading area",
              description: "Heading text area",
              inputMethod: "textarea"
            }],
            advanced: [{
              property: "describedBy",
              title: "aria-describedby",
              description: "Space-separated list of IDs for elements that describe the image.",
              inputMethod: "textfield"
            }]
          }
        };
      }
    }]);
    return ParallaxImage;
  }((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));

  _exports.ParallaxImage = ParallaxImage;
  window.customElements.define(ParallaxImage.tag, ParallaxImage);
});