define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@vaadin/vaadin-grid/vaadin-grid.js", "../../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../simple-tooltip/simple-tooltip.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-column-group.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-filter.js", "../../../../@polymer/paper-input/paper-input.js", "../elmsln-base-deps.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-sorter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-selection-column.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/iron-image/iron-image.js", "../../../lrnsys-layout/lib/lrnsys-dialog.js", "../../../elmsln-loading/elmsln-loading.js", "../../../lrndesign-avatar/lrndesign-avatar.js"], function (_exports, _polymerElement, _vaadinGrid, _domRepeat, _simpleTooltip, _domIf, _vaadinGridColumnGroup, _vaadinGridFilter, _paperInput, _elmslnBaseDeps, _vaadinGridSorter, _vaadinGridSelectionColumn, _ironAjax, _ironImage, _lrnsysDialog, _elmslnLoading, _lrndesignAvatar) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappCanvasListing = void 0;

  function _templateObject_6fa57b80d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"materializecss-styles\">\n        :host {\n          display: block;\n          margin: 0 2em;\n        }\n        .loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 0.8;\n          text-align: center;\n          align-content: center;\n          justify-content: center;\n          height: 100vh;\n          position: absolute;\n          background-color: white;\n        }\n        vaadin-grid#material {\n          height: 75vh;\n          font-family: Roboto, sans-serif;\n          --divider-color: rgba(0, 0, 0, var(--dark-divider-opacity));\n\n          --vaadin-grid-cell: {\n            padding: 0;\n          }\n\n          --vaadin-grid-header-cell: {\n            height: 3.5em;\n            color: rgba(0, 0, 0, var(--dark-secondary-opacity));\n            font-size: 1em;\n          }\n\n          --vaadin-grid-body-cell: {\n            height: 3em;\n            color: rgba(0, 0, 0, var(--dark-primary-opacity));\n            font-size: 0.8em;\n          }\n\n          --vaadin-grid-body-row-hover-cell: {\n            background-color: var(--paper-grey-200);\n          }\n\n          --vaadin-grid-body-row-selected-cell: {\n            background-color: var(--paper-grey-100);\n          }\n\n          --vaadin-grid-focused-cell: {\n            box-shadow: none;\n            font-weight: bold;\n          }\n        }\n\n        vaadin-grid#material .cell {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          padding-right: 56px;\n        }\n\n        vaadin-grid#material .cell.last {\n          padding-right: 24px;\n        }\n\n        vaadin-grid#material .cell.numeric {\n          text-align: right;\n        }\n\n        vaadin-grid#material paper-checkbox {\n          --primary-color: var(--paper-indigo-500);\n          margin: 0 24px;\n        }\n\n        vaadin-grid#material vaadin-grid-sorter {\n          --vaadin-grid-sorter-arrow: {\n            display: none !important;\n          }\n        }\n\n        vaadin-grid#material vaadin-grid-sorter .cell {\n          flex: 1;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        vaadin-grid#material vaadin-grid-sorter iron-icon {\n          transform: scale(0.8);\n        }\n\n        vaadin-grid#material vaadin-grid-sorter:not([direction]) iron-icon {\n          color: rgba(0, 0, 0, var(--dark-disabled-opacity));\n        }\n\n        vaadin-grid#material vaadin-grid-sorter[direction] {\n          color: rgba(0, 0, 0, var(--dark-primary-opacity));\n        }\n\n        vaadin-grid#material vaadin-grid-sorter[direction=\"desc\"] iron-icon {\n          transform: scale(0.8) rotate(180deg);\n        }\n        vaadin-grid-sorter {\n          text-align: center;\n        }\n        lrndesign-avatar {\n          display: inline-flex;\n        }\n        lrnsys-dialog {\n          display: inline-flex;\n        }\n        lrnsys-dialog #dialog-trigger span {\n          pointer-events: none;\n        }\n        .avatar-name {\n          line-height: 2em;\n          margin: 0;\n          display: inline-block;\n        }\n        .listing-select {\n          display: block;\n          height: 100%;\n          margin: 0;\n          width: 100%;\n        }\n      </style>\n      <iron-ajax\n        auto\n        url=\"[[sourcePath]]\"\n        params='{\"return\": \"courses\"}'\n        handle-as=\"json\"\n        on-response=\"handleResponse\"\n        last-response=\"{{queryResponse}}\"\n      ></iron-ajax>\n      <div id=\"loading\" class=\"loading\">\n        <h3>Loading..</h3>\n        <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n      </div>\n      <vaadin-grid\n        column-reordering-allowed\n        id=\"material\"\n        aria-label=\"Course list\"\n        items=\"[[_toArray(canvasCourses)]]\"\n      >\n        <vaadin-grid-column width=\"50px\" flex-grow=\"0\">\n          <template class=\"header\"\n            >#</template\n          >\n          <template\n            >[[index]]</template\n          >\n          <template class=\"footer\"\n            >#</template\n          >\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"200px\" flex-grow=\"0\" resizable>\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"term\">Semester</vaadin-grid-sorter>\n          </template>\n          <template>\n            [[item.term]]\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Semester\"\n              path=\"term\"\n              value=\"[[_filterTerm]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Semester\"\n                value=\"{{_filterTerm::input}}\"\n                focus-target\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable>\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"name\">Name</vaadin-grid-sorter>\n          </template>\n          <template\n            >[[item.name]]</template\n          >\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Course\"\n              path=\"name\"\n              value=\"[[_filterCourse]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Course\"\n                value=\"{{_filterCourse::input}}\"\n                focus-target\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column resizable>\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"sis_course_id\">SIS</vaadin-grid-sorter>\n          </template>\n          <template>\n            [[item.sis_course_id]]\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Student information system ID\"\n              path=\"sis_course_id\"\n              value=\"[[_filterSIS]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"SIS\"\n                value=\"{{_filterSIS::input}}\"\n                focus-target\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"100px\" flex-grow=\"0\" resizable>\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"student_count\"\n              >Students</vaadin-grid-sorter\n            >\n          </template>\n          <template\n            >[[item.student_count]]</template\n          >\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"100px\" flex-grow=\"0\" resizable>\n          <template class=\"header\">\n            <vaadin-grid-sorter path=\"workflow_state\">State</vaadin-grid-sorter>\n          </template>\n          <template\n            >[[item.workflow_state]]</template\n          >\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Workflow state\"\n              path=\"workflow_state\"\n              value=\"[[_filterWorkflow]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"State\"\n                value=\"{{_filterWorkflow::input}}\"\n                focus-target\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column>\n          <template class=\"header\"\n            >ELMSLN Course</template\n          >\n          <template>\n            <select\n              name$=\"elmsln--map--:key:[[item.sis_course_id]]:key:[[item.term]]:key:[[item.start]]:key:[[item.end]]\"\n              class=\"listing-select\"\n              value=\"{{item.elmslnCourse::input}}\"\n            >\n              <template\n                is=\"dom-repeat\"\n                items=\"[[elmslnCourses]]\"\n                as=\"elmsCourse\"\n              >\n                <option value=\"[[elmsCourse.machineName]]\"\n                  >[[elmsCourse.name]] ([[elmsCourse.machineName]])</option\n                >\n              </template>\n            </select>\n          </template>\n          <template class=\"footer\">\n            <vaadin-grid-filter\n              aria-label=\"Course\"\n              path=\"elmslnCourse\"\n              value=\"[[_filterELMSLNCourse]]\"\n            >\n              <paper-input\n                slot=\"filter\"\n                label=\"Course\"\n                value=\"{{_filterELMSLNCourse::input}}\"\n                focus-target\n              ></paper-input>\n            </vaadin-grid-filter>\n          </template>\n        </vaadin-grid-column>\n        <vaadin-grid-column width=\"100px\" flex-grow=\"0\">\n          <template class=\"header\"></template>\n          <template>\n            <paper-button\n              raised\n              on-click=\"_triggerDialog\"\n              id$=\"{{item.sis_course_id}}\"\n              >Details</paper-button\n            >\n          </template>\n          <template class=\"footer\"></template>\n        </vaadin-grid-column>\n      </vaadin-grid>\n      <iron-ajax\n        id=\"request\"\n        url=\"[[sourcePath]]\"\n        params='{\"return\": \"users\"}'\n        handle-as=\"json\"\n        on-response=\"handleRosterResponse\"\n        last-response=\"{{queryResponse}}\"\n      ></iron-ajax>\n      <lrnsys-dialog\n        tabindex=\"-1\"\n        id=\"details-dialog\"\n        body-append\n        header=\"{{activeCourse.name}}\"\n      >\n        <div slot=\"content\">\n          <template is=\"dom-if\" if=\"{{!roster}}\">\n            <div id=\"loadingRoster\" class=\"loading\">\n              <h3>Loading..</h3>\n              <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n            </div>\n          </template>\n        </div>\n        <div slot=\"header\">\n          <template is=\"dom-if\" if=\"{{roster}}\">\n            <template is=\"dom-if\" if=\"{{activeCourse.image}}\">\n              <iron-image\n                style=\"width:100%; height:200px; background-color: lightgray;\"\n                sizing=\"cover\"\n                preload\n                fade\n                src$=\"{{activeCourse.image}}\"\n              ></iron-image>\n            </template>\n            <span class=\"heading\">\n              <span>Student count: {{activeCourse.student_count}}</span>\n              <span>SIS ID: {{activeCourse.sis_course_id}}</span>\n              <span>Term: {{activeCourse.term}}</span>\n              <span>Workflow: {{activeCourse.workflow_state}}</span>\n            </span>\n          </template>\n        </div>\n        <div id=\"loadingContent\" slot=\"content\">\n          <template is=\"dom-repeat\" items=\"[[_toArray(roster)]]\" as=\"roleList\">\n            <h2>{{roleList.role}}s</h2>\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_toArray(roleList.users)]]\"\n              as=\"user\"\n            >\n              <div class=\"avatar-name\" id$=\"user-{{user.id}}\">\n                <lrndesign-avatar\n                  label$=\"{{user.name}}\"\n                  src$=\"{{user.picture}}\"\n                ></lrndesign-avatar>\n              </div>\n              <simple-tooltip for$=\"user-{{user.id}}\"\n                >{{user.name}}</simple-tooltip\n              >\n            </template>\n          </template>\n        </div>\n      </lrnsys-dialog>\n    "]);

    _templateObject_6fa57b80d34d11ea880ba1e93364c49c = function _templateObject_6fa57b80d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  var LrnappCanvasListing =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrnappCanvasListing, _PolymerElement);

    function LrnappCanvasListing() {
      babelHelpers.classCallCheck(this, LrnappCanvasListing);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnappCanvasListing).apply(this, arguments));
    }

    babelHelpers.createClass(LrnappCanvasListing, [{
      key: "_toArray",

      /**
       * Simple way to convert from object to array.
       */
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
      /**
       * Toggling collapse on an iron element.
       */

    }, {
      key: "collapseToggle",
      value: function collapseToggle(e) {
        e.target.nextElementSibling.toggle();
      }
      /**
       * Trigger the dialog box to opened and kick off request for data.
       */

    }, {
      key: "_triggerDialog",
      value: function _triggerDialog(e) {
        this.querySelector("#details-dialog").toggleDialog();
        this.roster = false;
        this.activeCourse = this.canvasCourses[e.target.id];
        this.querySelector("#request").params["sis_course_id"] = this.activeCourse.sis_course_id;
        this.querySelector("#request").generateRequest();
        this.querySelector("#loadingContent").style.display = "none";
      }
    }, {
      key: "handleResponse",
      value: function handleResponse() {
        this.elmslnCourses = this.queryResponse.data.elmslnCourses;
        this.canvasCourses = this.queryResponse.data.canvasCourses;
        this.$.loading.hidden = true;
      }
    }, {
      key: "handleRosterResponse",
      value: function handleRosterResponse() {
        this.roster = this.queryResponse.data;
        this.querySelector("#loadingContent").style.display = "block";
      }
      /**
       * highjack shadowDom
       */

    }, {
      key: "_attachDom",
      value: function _attachDom(dom) {
        this.appendChild(dom);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6fa57b80d34d11ea880ba1e93364c49c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-canvas-listing";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String
          },
          csrfToken: {
            type: String
          },
          endPoint: {
            type: String
          },
          elmslnCourses: {
            type: Array,
            notify: true
          },
          canvasCourses: {
            type: Array,
            notify: true
          },
          roster: {
            type: Array,
            notify: true,
            value: false
          },
          queryResponse: {
            type: Array,
            notify: true
          },
          sourcePath: {
            type: String,
            notify: true
          },
          activeCourse: {
            type: String,
            notify: true,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return LrnappCanvasListing;
  }(_polymerElement.PolymerElement);

  _exports.LrnappCanvasListing = LrnappCanvasListing;
  window.customElements.define(LrnappCanvasListing.tag, LrnappCanvasListing);
});