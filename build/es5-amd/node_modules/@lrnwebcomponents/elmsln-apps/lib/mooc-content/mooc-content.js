define(["exports", "../../../../lit-element/lit-element.js", "../../../../@polymer/iron-icons/iron-icons.js", "../../../../@polymer/iron-icons/hardware-icons.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-icon-button/paper-icon-button.js", "../../../../@polymer/paper-styles/color.js", "../../../../@polymer/paper-tooltip/paper-tooltip.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../../../grid-plate/grid-plate.js", "../../../responsive-grid/lib/responsive-grid-row.js", "../../../responsive-grid/lib/responsive-grid-col.js", "../../../materializecss-styles/materializecss-styles.js", "../../../../@polymer/polymer/lib/elements/custom-style.js"], function (_exports, _litElement, _ironIcons, _hardwareIcons, _ironAjax, _paperIconButton, _color, _paperTooltip, _appLocation, _appRoute, _gridPlate, _responsiveGridRow, _responsiveGridCol, _materializecssStyles, _customStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MoocContent = void 0;

  function _templateObject2_6d2bd1b02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style include=\"materializecss-styles\">\n          :host {\n            display: block;\n          }\n        </style>\n      </custom-style>\n      <div id=\"hackycontainer\"><style id=\"hackycsspotterhates\"></style></div>\n      <iron-ajax\n        id=\"fulloutlinepath\"\n        url=\"", "\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-response-changed=\"", "\"\n      ></iron-ajax>\n      <iron-ajax\n        id=\"pageajax\"\n        .params=\"", "\"\n        url=\"", "\"\n        handle-as=\"json\"\n        @response=\"", "\"\n        @last-response-changed=\"", "\"\n        loading=\"", "\"\n        @loading-changed=\"", "\"\n      ></iron-ajax>\n      <app-location\n        route=\"", "\"\n        @route-changed=\"", "\"\n        .query-params=\"", "\"\n        @query-params-changed=\"", "\"\n      ></app-location>\n      <app-route\n        route=\"", "\"\n        @route-changed=\"", "\"\n        pattern=\"", "/:type/:id\"\n        data=\"", "\"\n        @data-changed=\"", "\"\n        tail=\"", "\"\n        @tail-changed=\"", "\"\n        .query-params=\"", "\"\n        @query-params-changed=\"", "\"\n      >\n      </app-route>\n      <main id=\"etb-tool-nav\" data-offcanvas=\"\">\n        <div id=\"anchor\"></div>\n        <div class=\"inner-wrap\">\n          <section class=\"main-section etb-book\" style=\"min-height: 318px;\">\n            <h2 class=\"element-invisible\">Content navigation</h2>\n            <div class=\"r-header row\">\n              <div class=\"r-header__left\">\n                <div\n                  class=\"book-navigation-header book-sibling-nav-container book-navigation-header-2\"\n                >\n                  <div\n                    class=\"book-navigation-header book-sibling-nav-container\"\n                  >\n                    <lrnsys-dialog\n                      id=\"outlinepopover\"\n                      data-voicecommand=\"open outline\"\n                      label=\"Outline\"\n                      header=\"Outline\"\n                    >\n                      <span slot=\"button\">\n                        <iron-icon icon=\"explore\"></iron-icon>\n                        Outline\n                      </span>\n                      <div\n                        class=\"elmsln-modal-content\"\n                        id=\"block-mooc-helper-mooc-helper-toc-nav-modal\"\n                      >\n                        <div id=\"outlinemodal\" @click=\"", "\">\n                          <slot name=\"outlinemodal\"></slot>\n                        </div>\n                      </div>\n                    </lrnsys-dialog>\n                    <div id=\"navigation\"><slot name=\"navigation\"></slot></div>\n                  </div>\n                </div>\n              </div>\n              <div id=\"options\" class=\"r-header__right\">\n                <slot name=\"options\"></slot>\n              </div>\n            </div>\n            <div class=\"elmsln-content-wrap\" role=\"main\">\n              <responsive-grid-row gutter=\"4\">\n                <responsive-grid-col xl=\"3\" lg=\"3\" md=\"3\" sm=\"4\" xs=\"12\">\n                  <section\n                    id=\"block-mooc-nav-block-mooc-nav-nav\"\n                    class=\"mooc-nav-block-left block block-mooc-nav-block contextual-links-region block-mooc-nav-block-mooc-nav column\"\n                    role=\"navigation\"\n                    aria-label=\"", "\"\n                  >\n                    <div\n                      class=\"block-mooc-nav-block-mooc-title black white-text\"\n                    >\n                      ", "\n                    </div>\n                    <div id=\"outline\"><slot name=\"outline\"></slot></div>\n                  </section>\n                  <div id=\"blocks\"><slot name=\"blocks\"></slot></div>\n                </responsive-grid-col>\n                <responsive-grid-col xl=\"8\" lg=\"8\" md=\"9\" sm=\"7\" xs=\"12\">\n                  <a\n                    id=\"main-content\"\n                    class=\"scrollspy\"\n                    data-scrollspy=\"scrollspy\"\n                  ></a>\n                  <div class=\"column\">\n                    <div id=\"content\" ?data-loading=\"", "\">\n                      <slot name=\"content\"></slot>\n                    </div>\n                  </div>\n                </responsive-grid-col>\n              </responsive-grid-row>\n            </div>\n          </section>\n          <a class=\"exit-off-canvas\"></a>\n        </div>\n      </main>\n    "]);

    _templateObject2_6d2bd1b02d8511ea80ccf124101da415 = function _templateObject2_6d2bd1b02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  function _templateObject_6d2bd1b02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-size: 16px;\n          box-sizing: content-box;\n        }\n        #content[data-loading] {\n          opacity: 0.2 !important;\n          pointer-events: none;\n        }\n        #content {\n          opacity: 1;\n          visibility: visible;\n          transition: all 0.4s ease;\n        }\n      "]);

    _templateObject_6d2bd1b02d8511ea80ccf124101da415 = function _templateObject_6d2bd1b02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  var makeSlot = function makeSlot(name) {
    var slot = document.createElement("slot");

    if (name) {
      slot.name = name;
    }

    return slot;
  };
  /**
   * `lrnapp-book`
   * A LRN element
   *
   * @demo demo/index.html
   * @microcopy
   * - node / circle - A progress circle on the line
   * - nodes / items - the list of items in the progress bar
   * - bubble - reserved for when events fire out of an element or value is tracking events
   * - percentage - amount complete either in the bar or the nodes themselves
   * - bar - the underlayed bar that's tracking overall progression
   * - author mode - authoring mode
   */


  var MoocContent =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(MoocContent, _LitElement);
    babelHelpers.createClass(MoocContent, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject_6d2bd1b02d8511ea80ccf124101da415())];
      }
      /**
       * HTMLElement
       */

    }]);

    function MoocContent() {
      var _this;

      babelHelpers.classCallCheck(this, MoocContent);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(MoocContent).call(this));
      _this.__modal = window.SimpleModal.requestAvailability();
      _this.requestParams = {
        node: null
      };
      _this.pageData = {};
      _this.outlineData = {};
      _this.resetScroll = false;
      _this.responseData = {};
      _this.loading = false;
      _this.activeNodeItem = null;

      _this.shadowRoot.appendChild(makeSlot("outlinemodal"));

      _this.shadowRoot.appendChild(makeSlot("navigation"));

      _this.shadowRoot.appendChild(makeSlot("options"));

      _this.shadowRoot.appendChild(makeSlot("outline"));

      _this.shadowRoot.appendChild(makeSlot("content"));

      _this.shadowRoot.appendChild(makeSlot("blocks"));

      return _this;
    }
    /**
     * HTMLElement
     */


    babelHelpers.createClass(MoocContent, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(MoocContent.prototype), "connectedCallback", this).call(this);
        this.observer = new MutationObserver(function (mutations) {
          mutations.forEach(function (mutation) {
            mutation.removedNodes.forEach(function (node) {
              if (node.nodeType !== Node.COMMENT_NODE) {
                _this2.appendChild(node);
              }
            });
          });
        });
        this.observer.observe(this, {
          childList: true
        });
      }
      /**
       * LitElement shadow root thing
       */

    }, {
      key: "createRenderRoot",
      value: function createRenderRoot() {
        this.attachShadow({
          mode: "open"
        });
        return this;
      }
      /**
       * LitElement render
       */

    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_6d2bd1b02d8511ea80ccf124101da415(), this.fullOutlinePath, this.handleOutlineResponse, this.outlineDataChanged, this.requestParams, this.sourcePath, this.handleResponse, this.pageDataChanged, this._loading, this._loadingChanged, this.route, this.routeChangedEvent, this.queryParams, this.queryParamsChanged, this.route, this.routeChangedEvent, this.endPoint, this.data, this.dataChanged, this.tail, this.tailChanged, this.queryParams, this.queryParamsChanged, this._modalTap, this.outlineTitle, this.outlineTitle, this.loading);
      }
    }, {
      key: "tailChanged",
      value: function tailChanged(e) {
        this.tail = e.detail.value;
      }
    }, {
      key: "dataChanged",
      value: function dataChanged(e) {
        this.data = e.detail.value;
      }
    }, {
      key: "queryParamsChanged",
      value: function queryParamsChanged(e) {
        this.queryParams = e.detail.value;
      }
    }, {
      key: "routeChangedEvent",
      value: function routeChangedEvent(e) {
        this.route = e.detail.value;
      }
    }, {
      key: "outlineDataChanged",
      value: function outlineDataChanged(e) {
        this.outlineData = e.detail.value;
      }
    }, {
      key: "_loadingChanged",
      value: function _loadingChanged(e) {
        this._loading = e.detail.value;
      }
    }, {
      key: "pageDataChanged",
      value: function pageDataChanged(e) {
        this.pageData = e.detail.value;
      }
    }, {
      key: "updated",

      /**
       * LitElement properties changed
       */
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["data", "route", "endPoint"].includes(propName)) {
            _this3._routeChanged(_this3.data, _this3.route, _this3.endPoint);
          }

          if (propName === "route") {
            // notify
            _this3.dispatchEvent(new CustomEvent("route-changed", {
              detail: {
                value: _this3[propName]
              }
            }));
          }

          if (propName === "requestParams") {
            // notify
            _this3.dispatchEvent(new CustomEvent("request-params-changed", {
              detail: {
                value: _this3[propName]
              }
            }));
          }

          if (propName === "_loading") {
            _this3._contentLoading(_this3[propName], oldValue);
          }
        });
      }
      /**
       * Ensure modal is closed on tap of an item.
       */

    }, {
      key: "_modalTap",
      value: function _modalTap(e) {
        var local = e.target; // verify that it is a buttonß

        if (local.tagName === "LRNSYS-BUTTON") {
          if (this.activeNodeItem != null) {
            this.activeNodeItem.classList.remove("book-menu-item-active");
          }

          this.activeNodeItem = local;
          this.activeNodeItem.classList.add("book-menu-item-active");
          this.shadowRoot.querySelector("#outlinepopover").toggleDialog();
        }
      }
      /**
       * Notice loading state has changed.
       */

    }, {
      key: "_contentLoading",
      value: function _contentLoading(newValue, oldValue) {
        var _this4 = this;

        if ((typeof newValue === "undefined" ? "undefined" : babelHelpers.typeof(newValue)) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !newValue) {
          setTimeout(function () {
            _this4.loading = false;

            _this4._resetScroll("anchor");

            _this4.shadowRoot.querySelector("#main-content").focus();
          }, 500);
        } else {
          this.loading = true;
        }
      }
      /**
       * Callback to push the data into the page.
       */

    }, {
      key: "handleResponse",
      value: function handleResponse(e) {
        // handle the HTML we just got
        if (babelHelpers.typeof(this.pageData.data) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var data = this.pageData.data; // test for advanced ops

          if (babelHelpers.typeof(data.ops.redirect) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            this.route.path = data.ops.redirect;

            this._routeChanged(this.data, this.route, this.endPoint);
          } else {
            this.outlineTitle = data.bookOutline.subject;
            this.shadowRoot.querySelector("#content").innerHTML = data.content;
            this.shadowRoot.querySelector("#navigation").innerHTML = data.topNavigation;
            this.shadowRoot.querySelector("#outline").innerHTML = data.bookOutline.content;
            this.shadowRoot.querySelector("#options").innerHTML = data.options; // inject styles, destroying previous ones

            this.__injectStyle(data.styles); // fire drupal behaviors.. this is evil. Polymer is invoking Drupal behaviors..


            if (window.Drupal) {
              window.Drupal.attachBehaviors(document, window.Drupal.settings);
            } // first time this fires let's get the outline block in the background


            if (babelHelpers.typeof(this.outlineData.data) === (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.shadowRoot.querySelector("#fulloutlinepath").generateRequest();
            }

            window.dispatchEvent(new Event("resize"));
          }
        }
      }
      /**
       * Callback to push the data into the page.
       */

    }, {
      key: "handleOutlineResponse",
      value: function handleOutlineResponse(e) {
        // handle the HTML we just got
        var data = this.outlineData.data;

        if ((typeof data === "undefined" ? "undefined" : babelHelpers.typeof(data)) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          this.shadowRoot.querySelector("#outlinemodal").innerHTML = data.outline;
          this.aliases = data.aliases;
        }
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (window.Drupal) {
          window.Drupal.attachBehaviors(document, window.Drupal.settings);
        }

        this.observer.disconnect();
      }
      /**
       * If the current route is outside the scope of our app then allow
       * the website to break out of the single page application routing.
       *
       * This is really critical that we get happy paths that don't trigger a redirec
       * loop so some of the logic will seem a bit repetative but we're trying to trap
       * may different potentially valid addresses / use-cases which still must trigger
       * a reload within the app (without looping) and still allow outbound links to go
       * through as they should.
       */

    }, {
      key: "_routeChanged",
      value: function _routeChanged(data, route, endPoint) {
        if (typeof route.path === "string") {
          // target for url alias that might be delivered into content
          // and menu items throughout the UI
          var urlAlias = route.path.replace("/" + this.elmslnCourse + "/", "");

          if (route.path.startsWith("/" + this.elmslnCourse + "/node/")) {
            var tmp = route.path.split("/"); // ensure this is a number so we know what we're doing

            if (!isNaN(parseFloat(tmp[tmp.length - 1])) && isFinite(tmp[tmp.length - 1])) {
              this.nid = tmp[tmp.length - 1]; // trigger change if data location changed

              this.requestParams.node = this.nid; // send request out the door to the actual end point

              this.shadowRoot.querySelector("#pageajax").generateRequest(); // if open, close this

              if (this.__modal && this.__modal.opened) {
                window.dispatchEvent(new CustomEvent("simple-modal-hide", {
                  bubbles: true,
                  cancelable: true,
                  detail: {}
                }));
              }

              return;
            } else if (tmp[tmp.length - 1] == "edit") {
              window.location.reload();
            }
          } // test for an node alias, then send off
          else if (babelHelpers.typeof(this.aliases[urlAlias]) !== (typeof undefined === "undefined" ? "undefined" : typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.nid = this.aliases[urlAlias].replace("node/", ""); // trigger change if data location changed

              this.requestParams.node = this.nid;
              this.shadowRoot.querySelector("#pageajax").generateRequest(); // if this is open, close it

              if (this.__modal && this.__modal.opened) {
                window.dispatchEvent(new CustomEvent("simple-modal-hide", {
                  bubbles: true,
                  cancelable: true,
                  detail: {}
                }));
              }

              return;
            } // implies front page on first load, so fix that
            else if (urlAlias == "") {
                this.requestParams.node = this.nid; // ensure that we don't see this again

                this.route.path = "/" + this.elmslnCourse + "/node/" + this.nid;
                this.shadowRoot.querySelector("#pageajax").generateRequest();
                return;
              }
        } // ensure nothing went super wrong which may be leading to a busted site
        // so we can avoid an infinite loop


        if (this.elmslnCourse != "") {
          // reload the page which since route changed will load that page
          window.location.reload();
        }
      }
      /**
       * Reset scroll position visually and internally data wise.
       */

    }, {
      key: "_resetScroll",
      value: function _resetScroll() {
        var item = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "anchor";
        this.resetScroll = true;
        this.shadowRoot.querySelector("#" + item).scrollIntoView({
          block: "nearest",
          behavior: "smooth"
        });
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
      /**
       * Inject styles dynamically from inline CSS blocks.
       * This is a function and capability that will drive Potter nuts.
       * Because of this we're using the unheard of ___ convention. This
       * means that it's such a private function that we wish we'd never
       * actually have thought of it. Fortunately, it came from a stackoverflow
       * article so we don't have to take credit for our own undoing with
       * what this enables.
       */

    }, {
      key: "__injectStyle",
      value: function __injectStyle(style) {
        // target and wipe our id area by force
        if (this.shadowRoot.querySelector("#hackycsspotterhates") != null) {
          this.shadowRoot.querySelector("#hackycontainer").innerHTML = "";
        } // construct a new style tag and inject it overtop of what was there previously


        var customStyle = document.createElement("style", "custom-style");
        customStyle.id = "hackycsspotterhates"; // inject our styles

        customStyle.textContent = style; // we have now successfully ruined something encapsulated and once beautiful

        this.shadowRoot.querySelector("#hackycontainer").appendChild(customStyle);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "mooc-content";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String,
            attribute: "elmsln-course"
          },
          elmslnSection: {
            type: String,
            attribute: "elmsln-section"
          },
          basePath: {
            type: String,
            attribute: "base-path"
          },
          csrfToken: {
            type: String,
            attribute: "csrf-token"
          },
          endPoint: {
            type: String,
            attribute: "end-point"
          },

          /**
           * Source of data
           */
          sourcePath: {
            type: String,
            attribute: "source-path"
          },

          /**
           * Full outline path
           */
          fullOutlinePath: {
            type: String,
            attribute: "full-outline-path"
          },

          /**
           * App route tracking.
           */
          route: {
            type: Object
          },

          /**
           * Title for the content
           */
          currentTitle: {
            type: String,
            attribute: "current-title"
          },

          /**
           * Params for the request for outline/book to load.
           */
          requestParams: {
            type: Object
          },

          /**
           * Returned data for processing.
           */
          pageData: {
            type: Object
          },

          /**
           * Returned data for processing.
           */
          outlineData: {
            type: Object
          },

          /**
           * Ensure scrolling doesn't influence during a transition.
           */
          resetScroll: {
            type: Boolean,
            attribute: "reset-scroll"
          },

          /**
           * Store current page data.
           */
          responseData: {
            type: Object
          },

          /**
           * nav title
           */
          outlineTitle: {
            type: String,
            attribute: "outline-title"
          },

          /**
           * Node ID
           */
          nid: {
            type: Number
          },

          /**
           * loading pegged to the ajax call running
           */
          _loading: {
            type: Boolean
          },

          /**
           * loading pegged to the ajax call running
           */
          loading: {
            type: Boolean,
            reflect: true
          },

          /**
           * Aliases
           */
          aliases: {
            type: Array
          },

          /**
           * active item for tracking reference after clicks.
           */
          activeNodeItem: {
            type: Object
          }
        };
      }
    }]);
    return MoocContent;
  }(_litElement.LitElement);

  _exports.MoocContent = MoocContent;
  window.customElements.define(MoocContent.tag, MoocContent);
});