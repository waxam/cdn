define(["exports", "require", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/polymer/lib/utils/render-status.js", "../../../simple-colors/simple-colors.js"], function (_exports, _require, _polymerElement, _renderStatus, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ElmsMediaUpload = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_23f63450e48211e9b5c6f7b0a264592f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles\">\n        :host {\n          display: block;\n        }\n        paper-button {\n          padding: 0;\n          margin: 0;\n          min-width: 1rem;\n        }\n        vaadin-upload.thick-border {\n          --primary-color: #396;\n          --dark-primary-color: #063;\n          --light-primary-color: #6c9;\n          --error-color: darkred;\n          border: 2px solid #ccc;\n          padding: 14px;\n          background: #eee;\n          border-radius: 0;\n        }\n        vaadin-upload.thick-border[dragover] {\n          border-color: #396;\n        }\n        .green {\n          background-color: var(--simple-colors-default-theme-green-6);\n        }\n      </style>\n      <vaadin-upload\n        target$=\"[[uploadPath]]\"\n        method=\"POST\"\n        form-data-name=\"file-upload\"\n        timeout=\"0\"\n        accept=\"video/mp4,image/*,audio/*,application/pdf,application/zip\"\n      ></vaadin-upload>\n      <paper-dialog id=\"dialog\">\n        <app-toolbar>\n          <paper-dropdown-menu label=\"Display style\">\n            <paper-listbox slot=\"dropdown-content\" class=\"dropdown-content\">\n              <paper-item value=\"image\">Image</paper-item>\n              <paper-item value=\"image__circle\">Circle</paper-item>\n            </paper-listbox>\n          </paper-dropdown-menu>\n          <paper-checkbox class=\"styled\" checked=\"{{hasLightbox}}\">\n            Lightbox <span class=\"subtitle\"> Users can click to expand </span>\n          </paper-checkbox>\n          <paper-button raised class=\"green\">Save</paper-button>\n        </app-toolbar>\n        <h2>[[uploadTitle]]</h2>\n        <paper-input\n          label=\"Title\"\n          placeholder=\"Title\"\n          value=\"{{uploadTitle}}\"\n        ></paper-input>\n        <div id=\"content\"></div>\n      </paper-dialog>\n    "]);

    _templateObject_23f63450e48211e9b5c6f7b0a264592f = function _templateObject_23f63450e48211e9b5c6f7b0a264592f() {
      return data;
    };

    return data;
  }

  var ElmsMediaUpload =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(ElmsMediaUpload, _PolymerElement);

    function ElmsMediaUpload() {
      var _this;

      babelHelpers.classCallCheck(this, ElmsMediaUpload);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ElmsMediaUpload).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@vaadin/vaadin-upload/vaadin-upload.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-dialog/paper-dialog.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/app-layout/app-toolbar/app-toolbar.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-dropdown-menu/paper-dropdown-menu.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-listbox/paper-listbox.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-item/paper-item.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-checkbox/paper-checkbox.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../../@polymer/paper-input/paper-input.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(ElmsMediaUpload, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ElmsMediaUpload.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("upload-success", this._uploadSuccess.bind(this));
        });
      }
    }, {
      key: "_uploadSuccess",

      /**
       * _uploadSuccess triggered after an event of a successful upload goes through
       */
      value: function _uploadSuccess(event) {
        // parse the raw response cause it won't be natively
        // since event wants to tell you about the file generally
        var response = JSON.parse(event.detail.xhr.response);
        this.uploadTitle = response.data.node.title;
        this.shadowRoot.querySelector("#content").innerHTML = response.data.node.nid;
        this.shadowRoot.querySelector("#dialog").open();
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_23f63450e48211e9b5c6f7b0a264592f());
      }
    }, {
      key: "tag",
      get: function get() {
        return "elmsmedia-upload";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          uploadPath: {
            type: String,
            notify: true
          },
          uploadTitle: {
            type: String,
            notify: true
          },
          hasLightbox: {
            type: Boolean,
            notify: true
          }
        };
      }
    }]);
    return ElmsMediaUpload;
  }(_polymerElement.PolymerElement);

  _exports.ElmsMediaUpload = ElmsMediaUpload;
  window.customElements.define(ElmsMediaUpload.tag, ElmsMediaUpload);
});