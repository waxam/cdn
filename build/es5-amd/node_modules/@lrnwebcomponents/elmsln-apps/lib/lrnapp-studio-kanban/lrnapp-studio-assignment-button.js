define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-toast/paper-toast.js", "../../../../@polymer/polymer/lib/elements/dom-if.js", "../../../lrnsys-button/lrnsys-button.js"], function (_exports, _polymerElement, _ironAjax, _paperToast, _domIf, _lrnsysButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioAssignmentButton = void 0;

  var _templateObject_4ae27e00ce4711ecb13bcf602138080f;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /*
  `lrnapp-studio-assignment-button`
  Allows users to either start a assignment or link to a assignment.
  
  Usage:
  ```
  <lrnapp-studio-assignment-button assignment-id="[[id]]" assignment-id="{{assignmentId}}" end-point="[[endPoint]]" csrf-token=[[csrfToken]]></lrnapp-studio-assignment-button>
  */
  var LrnappStudioAssignmentButton = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrnappStudioAssignmentButton, _PolymerElement);

    var _super = _createSuper(LrnappStudioAssignmentButton);

    function LrnappStudioAssignmentButton() {
      babelHelpers.classCallCheck(this, LrnappStudioAssignmentButton);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(LrnappStudioAssignmentButton, [{
      key: "_createAssignment",
      value: function _createAssignment() {
        this.shadowRoot.querySelector("#ajaxCreateStub").generateRequest();
      }
    }, {
      key: "_ajaxCreateStubHandler",
      value: function _ajaxCreateStubHandler(e) {
        var status = e.detail.response.status;
        var response = e.detail.response;

        if (status === 201) {
          var assignment = e.detail.response.data;

          if (assignment) {
            this.dispatchEvent(new CustomEvent("assignment-created", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: {
                assignment: assignment
              }
            }));
          }
        } // if we have errors to display


        if (typeof response.errors !== "undefined") {
          var ul = document.createElement("ul");
          var text = "";
          response.errors.forEach(function (error) {
            text = text + " " + error;
          });
          this.shadowRoot.querySelector("#toast").show(text);
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_4ae27e00ce4711ecb13bcf602138080f || (_templateObject_4ae27e00ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      <lrnsys-button\n        on-click=\"_createAssignment\"\n        icon-class=\"[[iconClass]]\"\n        alt=\"[[alt]]\"\n        class$=\"[[classes]]\"\n        button-class$=\"[[classes]]\"\n        hover-class=\"[[hoverClass]]\"\n        icon=\"[[icon]]\"\n      ></lrnsys-button>\n      <iron-ajax\n        id=\"ajaxCreateStub\"\n        url=\"[[endPoint]]/api/assignments/create-stub?token=[[csrfToken]]\"\n        method=\"POST\"\n        body=\"[[projectId]]\"\n        handle-as=\"json\"\n        on-response=\"_ajaxCreateStubHandler\"\n      ></iron-ajax>\n      <template is=\"dom-if\" if=\"[[displayErrors]]\">\n        <paper-toast id=\"toast\"></paper-toast>\n      </template>\n    "])));
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-assignment-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String
          },
          elmslnSection: {
            type: String
          },
          basePath: {
            type: String,
            notify: true
          },
          csrfToken: {
            type: String,
            notify: true,
            reflectToAttribute: true
          },
          endPoint: {
            type: String,
            notify: true,
            reflectToAttribute: true
          },
          auto: {
            type: Boolean,
            reflectToAttribute: true,
            value: false,
            notify: true
          },
          displayErrors: {
            type: Boolean,
            value: true
          },
          projectId: {
            type: String
          },
          iconClass: {
            type: String,
            value: null
          },
          alt: {
            type: String,
            value: null
          },
          classes: {
            type: String,
            value: null
          },
          hoverClass: {
            type: String,
            value: null
          },
          icon: {
            type: String,
            value: null
          }
        };
      }
    }]);
    return LrnappStudioAssignmentButton;
  }(_polymerElement.PolymerElement);

  _exports.LrnappStudioAssignmentButton = LrnappStudioAssignmentButton;
  window.customElements.define(LrnappStudioAssignmentButton.tag, LrnappStudioAssignmentButton);
});