define(["exports", "../../../../lit-element/lit-element.js", "../../../../@polymer/app-route/app-location.js", "../../../../@polymer/app-route/app-route.js", "../../../../@polymer/app-layout/app-header/app-header.js", "../../../../@polymer/app-layout/app-toolbar/app-toolbar.js", "../../../../@polymer/iron-ajax/iron-ajax.js", "../../../../@polymer/paper-toggle-button/paper-toggle-button.js", "../../../../@polymer/paper-item/paper-item.js", "../../../../@polymer/paper-badge/paper-badge.js", "../../../../@polymer/paper-button/paper-button.js", "../../../../@polymer/paper-input/paper-input.js", "../../../../@polymer/paper-icon-button/paper-icon-button.js", "../../../../@polymer/paper-tooltip/paper-tooltip.js", "../../../../@vaadin/vaadin-grid/vaadin-grid.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-filter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-sorter.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-column-group.js", "../../../../@vaadin/vaadin-grid/vaadin-grid-selection-column.js", "../../../elmsln-loading/elmsln-loading.js", "../../../lrndesign-chart/lib/lrndesign-bar.js", "../../../lrndesign-chart/lib/lrndesign-line.js", "../../../lrndesign-chart/lib/lrndesign-pie.js", "../../../simple-picker/simple-picker.js", "../../../lrnsys-button/lrnsys-button.js", "../../../lrndesign-avatar/lrndesign-avatar.js", "../../../../@polymer/paper-dialog/paper-dialog.js", "../../../materializecss-styles/materializecss-styles.js", "../lrnapp-studio-submission/lrnapp-studio-submission.js", "../../../materializecss-styles/lib/colors.js"], function (_exports, _litElement, _appLocation, _appRoute, _appHeader, _appToolbar, _ironAjax, _paperToggleButton, _paperItem, _paperBadge, _paperButton, _paperInput, _paperIconButton, _paperTooltip, _vaadinGrid, _vaadinGridFilter, _vaadinGridSorter, _vaadinGridColumnGroup, _vaadinGridSelectionColumn, _elmslnLoading, _lrndesignBar, _lrndesignLine, _lrndesignPie, _simplePicker, _lrnsysButton, _lrndesignAvatar, _paperDialog, _materializecssStyles, _lrnappStudioSubmission, _colors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappStudioInstructor = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject6_e98ff8e02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          align-content: center;\n          padding: 0.8em;\n        }\n        paper-dialog {\n          width: 70vw;\n          min-height: 50vh;\n        }\n        vaadin-grid-table-body > vaadin-grid-cell-content {\n          height: unset !important;\n        }\n        app-toolbar {\n          background-color: #4285f4;\n          color: #fff;\n          margin: 20px 0;\n        }\n        #loading {\n          width: 100%;\n          z-index: 1000;\n          opacity: 0.8;\n          text-align: center;\n          align-content: center;\n          justify-content: center;\n          height: 100vh;\n          position: absolute;\n          background-color: white;\n        }\n        .center-data {\n          text-align: center;\n        }\n        vaadin-grid {\n          height: 75vh;\n          font-family: Roboto, sans-serif;\n          --divider-color: rgba(0, 0, 0, var(--dark-divider-opacity));\n\n          --vaadin-grid-cell: {\n            padding: 0;\n          }\n\n          --vaadin-grid-header-cell: {\n            height: 3.5em;\n            color: rgba(0, 0, 0, var(--dark-secondary-opacity));\n            font-size: 1em;\n          }\n\n          --vaadin-grid-body-cell: {\n            height: 3em;\n            color: rgba(0, 0, 0, var(--dark-primary-opacity));\n            font-size: 0.8em;\n          }\n\n          --vaadin-grid-body-row-hover-cell: {\n            background-color: var(--paper-grey-200);\n          }\n\n          --vaadin-grid-body-row-selected-cell: {\n            background-color: var(--paper-grey-100);\n          }\n\n          --vaadin-grid-focused-cell: {\n            box-shadow: none;\n            font-weight: bold;\n          }\n        }\n\n        vaadin-grid .cell {\n          overflow: hidden;\n          text-overflow: ellipsis;\n          padding-right: 56px;\n        }\n\n        vaadin-grid .cell.last {\n          padding-right: 24px;\n        }\n\n        vaadin-grid .cell.numeric {\n          text-align: right;\n        }\n\n        vaadin-grid paper-checkbox {\n          --primary-color: var(--paper-indigo-500);\n          margin: 0 24px;\n        }\n\n        vaadin-grid vaadin-grid-sorter .cell {\n          flex: 1;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n        }\n\n        vaadin-grid vaadin-grid-sorter iron-icon {\n          transform: scale(0.8);\n        }\n\n        vaadin-grid vaadin-grid-sorter:not([direction]) iron-icon {\n          color: rgba(0, 0, 0, var(--dark-disabled-opacity));\n        }\n\n        vaadin-grid vaadin-grid-sorter[direction] {\n          color: rgba(0, 0, 0, var(--dark-primary-opacity));\n        }\n\n        vaadin-grid vaadin-grid-sorter[direction=\"desc\"] iron-icon {\n          transform: scale(0.8) rotate(180deg);\n        }\n        vaadin-grid-sorter {\n          text-align: center;\n        }\n\n        lrndesign-avatar {\n          display: inline-block;\n        }\n        .avatar-label {\n          display: inline-block;\n          margin-left: 0.2em;\n        }\n        .assignment-button {\n          height: 1em;\n        }\n        .project-button {\n          height: 1em;\n        }\n        paper-badge {\n          top: 0 !important;\n          left: unset !important;\n          right: 0;\n          z-index: 1;\n        }\n        .avatar-link {\n          color: black;\n        }\n        .avatar-link paper-button {\n          text-transform: unset;\n        }\n        #selectedproject {\n          display: inline-block;\n        }\n        #datatype {\n          display: inline-block;\n          vertical-align: middle;\n          --paper-toggle-button-checked-bar-color: var(--paper-green-500);\n          --paper-toggle-button-checked-button-color: var(--paper-green-500);\n          --paper-toggle-button-checked-ink-color: var(--paper-green-500);\n          --paper-toggle-button-unchecked-bar-color: var(--paper-amber-900);\n          --paper-toggle-button-unchecked-button-color: var(--paper-amber-900);\n          --paper-toggle-button-unchecked-ink-color: var(--paper-amber-900);\n        }\n        .comment-list {\n          list-style-image: none;\n          display: inline-block;\n          padding: 0;\n          margin: 0;\n        }\n        .stats-text {\n          font-size: 0.8em;\n          font-style: italic;\n          line-height: 1em;\n          padding: 0 0 0 2em;\n          display: inline-block;\n          text-align: right;\n        }\n        #selectedchart {\n          padding-left: 8px;\n        }\n      "]);

    _templateObject6_e98ff8e02da211eaa247b36e11306899 = function _templateObject6_e98ff8e02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject5_e98ff8e02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <div>\n                  <h3>No submission for this assignment</h3>\n                  <p>\n                    This student has not submitted anything for this assignment\n                    at this time.\n                  </p>\n                </div>\n              "]);

    _templateObject5_e98ff8e02da211eaa247b36e11306899 = function _templateObject5_e98ff8e02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject4_e98ff8e02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                <lrnapp-studio-submission-page\n                  base-path=\"", "\"\n                  .route=\"", "\"\n                  @route-changed=\"", "\"\n                  id=\"", "\"\n                  end-point=\"", "lrnapp-studio-submission\"\n                  csrf-token=\"", "\"\n                  data=\"", "\"\n                  hide-menu-bar\n                ></lrnapp-studio-submission-page>\n              "]);

    _templateObject4_e98ff8e02da211eaa247b36e11306899 = function _templateObject4_e98ff8e02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject3_e98ff8e02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        <vaadin-grid-column resizable>\n          <template class=\"header\">\n            <span>[[assignment.title]]</span>\n          </template>\n          <template>\n            <template is=\"dom-if\" if=\"[[_submissionStatus(item, assignment, dataType)]]\">\n              <template is=\"dom-if\" if=\"[[!dataType]]\">\n                <lrnsys-button icon=\"[[_submissionPiece(item, assignment, 'icon')]]\" id=\"student-[[item.id]]-assignment-[[assignment.id]]-submission-[[_submissionID(item, assignment)]]\" label=\"[[_submissionPiece(item, assignment, 'title')]]\" @click=\"", "\">\n                </lrnsys-button>\n              </template>\n              <template is=\"dom-if\" if=\"[[dataType]]\">\n                <ul class=\"comment-list\">\n                <template is=\"dom-repeat\" items=\"[[_submissionPiece(item, assignment, 'comments')]]\" as=\"commented\">\n                  <li>\n                    <lrnsys-button icon=\"communication:comment\" id=\"student-[[item.id]]-assignment-[[assignment.id]]-submission-[[commented]]\" label=\"#[[_commentIndex(index)]]\" @click=\"", "\">\n                    </lrnsys-button>\n                  </li>\n                </template>\n                </ul>\n              </template>\n            </template>\n            <template is=\"dom-if\" if=\"[[!_submissionStatus(item, assignment, dataType)]]\">\n              <paper-button disabled class=\"project-button\" id=\"student-[[item.id]]-assignment-[[assignment.id]]-submission-null\">X</paper-button>\n            </template>\n            <template is=\"dom-if\" if=\"[[_commentCount(item, assignment, dataType)]]\">\n              <paper-badge id=\"student-[[item.id]]-assignment-[[assignment.id]]-tip\" for=\"student-[[item.id]]-assignment-[[assignment.id]]\" label=\"[[_commentCount(item, assignment, dataType)]]\"></paper-badge>\n              <paper-tooltip for=\"student-[[item.id]]-assignment-[[assignment.id]]-tip\">Comments left on classmates [[assignment.title]]</paper-badge>\n            </template>\n          </template>\n        </vaadin-grid-column>\n      "]);

    _templateObject3_e98ff8e02da211eaa247b36e11306899 = function _templateObject3_e98ff8e02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject2_e98ff8e02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          <paper-item value=\"", "\"\n            >", "</paper-item\n          >\n        "]);

    _templateObject2_e98ff8e02da211eaa247b36e11306899 = function _templateObject2_e98ff8e02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  function _templateObject_e98ff8e02da211eaa247b36e11306899() {
    var data = babelHelpers.taggedTemplateLiteral(["\n    <custom-style>\n    <style>\n      vaadin-grid {\n        --vaadin-grid-cell: {\n          padding: 0;\n        };\n\n        --vaadin-grid-header-cell: {\n          height: 3.5em;\n          color: rgba(0, 0, 0, var(--dark-secondary-opacity));\n          font-size: 1em;\n        };\n\n        --vaadin-grid-body-cell: {\n          height: 3em;\n          color: rgba(0, 0, 0, var(--dark-primary-opacity));\n          font-size: .8em;\n        };\n\n        --vaadin-grid-body-row-hover-cell: {\n          background-color: var(--paper-grey-200);\n        };\n\n        --vaadin-grid-body-row-selected-cell: {\n          background-color: var(--paper-grey-100);\n        };\n\n        --vaadin-grid-focused-cell: {\n          box-shadow: none;\n          font-weight: bold;\n        };\n      }\n    </style>\n    </custom-style>\n    <app-location \n      .route=\"", "\"\n      @route-changed=\"", "\"\n    ></app-location>\n    <app-route\n      .route=\"", "\"\n      @route-changed=\"", "\"\n      pattern=\"", "/submissions/:submission\"\n      .data=\"", "\"\n      @data-changed=\"", "\"\n      .tail=\"", "\"\n      @tail-changed=\"", "\"  \n      >\n    </app-route>\n    <iron-ajax auto\n      id=\"projectrequest\"\n      url=\"", "\"\n      handle-as=\"json\"\n      @last-response-changed=\"", "\"\n      @response=\"", "\"></iron-ajax>\n    <iron-ajax\n      id=\"studentrequest\"\n      url=\"", "\"\n      .params=\"", "\"\n      handle-as=\"json\"\n      @last-response-changed=\"", "\"\n      @response=\"", "\"></iron-ajax>\n    <div id=\"loading\">\n      <h3>Loading..</h3>\n      <elmsln-loading color=\"grey-text\" size=\"large\"></elmsln-loading>\n    </div>\n    <div ?hidden=\"", "\">Select a project to begin reviewing work</div>\n    <dropdown-select id=\"selectedproject\" label=\"Project\">\n      ", "\n    </dropdown-select>\n    <paper-toggle-button id=\"datatype\"\n     ?checked=\"", "\"\n      @checked-changed=\"", "\"\n      disabled\n    >\n      ", "\n    </paper-toggle-button>\n    <paper-button id=\"statsdialogbutton\" disabled><iron-icon icon=\"editor:show-chart\"></iron-icon> Statistics (beta)</span></paper-button>\n    <paper-dialog id=\"statsdialog\">\n      <app-header>\n        <app-toolbar>\n          <div main-title>", "</div>\n          <label for=\"selectedchart\">Graph style</label>\n          <simple-picker id=\"selectedchart\" .options=\"", "\"></simple-picker>\n          <paper-button dialog-dismiss><iron-icon icon=\"close\"></iron-icon> Close</paper-button>\n        </app-toolbar>\n      </app-header>\n      <paper-dialog-scrollable>\n        <div class=\"stats-text\">", "</div>\n        <lrndesign-bar\n        chart-title=\"", "\"\n        chart-desc=\"", "\"\n        .data=\"", "\"\n        ></lrndesign-bar>\n      </paper-dialog-scrollable>\n    </paper-dialog>\n    <vaadin-grid ?hidden=\"", "\" id=\"material\" aria-label=\"Student project list\" .items=\"", "\">\n      <vaadin-grid-column resizable>\n        <template class=\"header\">\n          <vaadin-grid-sorter id=\"sorter\" path=\"sis.sortable_name\">Student</vaadin-grid-sorter>\n        </template>\n        <template>\n          <a href=\"", "lrnapp-open-studio/projects?author=[[item.id]]&project=", "\" tabindex=\"-1\" target=\"_blank\" class=\"avatar-link ferpa-protect\">\n            <paper-button class=\"avatar-button\">\n              <lrndesign-avatar label=\"[[item.name]]\" src=\"[[item.avatar]]\"></lrndesign-avatar>\n              <span class=\"avatar-label\">[[item.sis.sortable_name]]</span>\n            </paper-button>\n          </a>\n        </template>\n        <template class=\"footer\">\n          <vaadin-grid-filter aria-label=\"Student\" path=\"sis.sortable_name\" value=\"[[_filterName]]\">\n            <paper-input slot=\"filter\" label=\"Student\" value=\"{{_filterName::input}}\" focus-target></paper-input>\n          </vaadin-grid-filter>\n        </template>\n      </vaadin-grid-column>\n      ", "\n    </vaadin-grid>\n    <paper-dialog id=\"dialog\" style=\"overflow: visible;\">\n      <app-header>\n        <app-toolbar>\n          <span style=\"width:15em;\">\n            <paper-icon-button @click=\"", "\" id=\"prevstudent\" icon=\"arrow-upward\" title=\"previous student\"></paper-icon-button>\n            <paper-icon-button @click=\"", "\" id=\"nextstudent\" icon=\"arrow-downward\" title=\"next student\"></paper-icon-button>\n            <lrndesign-avatar class=\"ferpa-protect\" label=\"", "\" src=\"", "\" style=\"display:inline-block;vertical-align:middle;\"></lrndesign-avatar>\n            <span class=\"avatar-label ferpa-protect\" style=\"margin-left:1em;\">", "</span>\n          </span>\n          <paper-icon-button @click=\"", "\" id=\"prevassignment\" icon=\"arrow-back\" title=\"previous assignment\" style=\"margin-left:1em;\"></paper-icon-button>\n          <paper-icon-button @click=\"", "\" id=\"nextassignment\" icon=\"arrow-forward\" title=\"next assignment\"></paper-icon-button>\n          <span style=\"font-weight:bold;\" main-title>Assignment: ", "</span>\n          <paper-button dialog-dismiss><iron-icon icon=\"close\"></iron-icon> Close</paper-button>\n        </app-toolbar>\n      </app-header>\n      <paper-dialog-scrollable>\n        ", "\n      </paper-dialog-scrollable>\n    </paper-dialog>"]);

    _templateObject_e98ff8e02da211eaa247b36e11306899 = function _templateObject_e98ff8e02da211eaa247b36e11306899() {
      return data;
    };

    return data;
  }

  var LrnappStudioInstructor =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(LrnappStudioInstructor, _LitElement);
    babelHelpers.createClass(LrnappStudioInstructor, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject_e98ff8e02da211eaa247b36e11306899(), this.route, this.routeChangedEvent, this.route, this.routeChangedEvent, this.endPoint, this.data, this.dataChangedEvent, this.tail, this.tailChangedEvent, this.sourceProjectPath, this._projectDataChanged, this._handleProjectResponse, this.sourceStudentPath, this.studentParams, this._studentDataChanged, this._handleStudentResponse, this.activeProject, this._toArray(this.projects).map(function (project) {
          return (0, _litElement.html)(_templateObject2_e98ff8e02da211eaa247b36e11306899(), project.id, project.attributes.title);
        }), this.dataType, this.checkedChangedEvent, this.dataTypeText, this.stats.header, this.simplePickerOptions, this.stats.overview, this.activeChart.title, this.activeChart.description, this.activeChart.data, !this.students, this._toArray(this.students), this.basePath, this.activeProject, this._toArray(this.assignments).map(function (assignment) {
          return (0, _litElement.html)(_templateObject3_e98ff8e02da211eaa247b36e11306899(), _this2._setActiveSubmission, _this2._setActiveComment);
        }), this._changeActiveItem, this._changeActiveItem, this.activeData.student.name, this.activeData.student.avatar, this.activeData.student.sis.sortable_name, this._changeActiveItem, this._changeActiveItem, this.activeData.assignment.title, this.activeData.submission ? (0, _litElement.html)(_templateObject4_e98ff8e02da211eaa247b36e11306899(), this.basePath, this.tail, this.tailChangedEvent, this.data.submission, this.basePath, this.csrfToken, this.data) : (0, _litElement.html)(_templateObject5_e98ff8e02da211eaa247b36e11306899()));
      }
    }, {
      key: "_studentDataChanged",
      value: function _studentDataChanged(e) {
        this._studentData = e.detail.value;
      }
    }, {
      key: "_projectDataChanged",
      value: function _projectDataChanged(e) {
        this._projectData = e.detail.value;
      }
    }, {
      key: "tailChangedEvent",
      value: function tailChangedEvent(e) {
        this.tail = e.detail.value;
      }
    }, {
      key: "routeChangedEvent",
      value: function routeChangedEvent(e) {
        this.route = e.detail.value;
      }
    }, {
      key: "dataChangedEvent",
      value: function dataChangedEvent(e) {
        this.data = e.detail.value;
      }
    }, {
      key: "checkedChangedEvent",
      value: function checkedChangedEvent(e) {
        this.checked = e.detail.value;
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [_colors.materialCssStyles, (0, _litElement.css)(_templateObject6_e98ff8e02da211eaa247b36e11306899())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-studio-instructor";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          elmslnCourse: {
            type: String,
            attribute: "elmsln-course"
          },
          elmslnSection: {
            type: String,
            attribute: "elmsln-section"
          },
          basePath: {
            type: String,
            attribute: "base-path"
          },
          csrfToken: {
            type: String,
            attribute: "csrf-token"
          },
          endPoint: {
            type: String,
            attribute: "end-point"
          },
          sourceProjectPath: {
            type: String
          },
          sourceStudentPath: {
            type: String
          },
          simplePickerOptions: {
            type: Array
          },

          /**
           * Type of data to display, either submission centric or comment centric.
           * False = submission, true = comment
           */
          dataType: {
            type: Boolean
          },
          dataTypeText: {
            type: String
          },

          /**
           * Internal value for mapping the raw response data.
           */
          _projectData: {
            type: Object
          },

          /**
           * studentParams for the request
           */
          studentParams: {
            type: Object
          },

          /**
           * Internal value for mapping the raw response data.
           */
          _studentData: {
            type: Object
          },

          /**
           * Internal width so they are all unified from editing this
           */
          _numWidth: {
            type: String
          },

          /**
           * Endpoint for submission data.
           */
          sourcePath: {
            type: String,
            attribute: "source-path"
          },

          /**
           * The projects to render
           */
          projects: {
            type: Object
          },

          /**
           * The assignments to render
           */
          assignments: {
            type: Object
          },

          /**
           * The submissions to render
           */
          students: {
            type: Object
          },

          /**
           * routing variable for url
           */
          route: {
            type: String
          },

          /**
           * Data binding object for the submission render
           */
          data: {
            type: Object
          },

          /**
           * Internal ID for active project
           */
          activeProject: {
            type: Number
          },

          /**
           * Active Data based on selection
           */
          activeData: {
            type: Object
          },

          /**
           * raw Stats data from backend.
           */
          stats: {
            type: Object
          },

          /**
           * Selected chart with data cleaned up to match formatting.
           */
          activeChart: {
            type: Object
          }
        };
      }
    }]);

    function LrnappStudioInstructor() {
      var _this;

      babelHelpers.classCallCheck(this, LrnappStudioInstructor);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnappStudioInstructor).call(this));
      _this.studentParams = {
        projectId: null,
        type: "submission"
      };
      _this.simplePickerOptions = [[{
        alt: "Submissions by Assignment",
        value: "byassignment-submissions"
      }], [{
        alt: "Comments by Assignment",
        value: "byassignment-comments"
      }], [{
        alt: "Commenters by Assignment",
        value: "byassignment-commenters"
      }]];
      _this._numWidth = "2.25em";
      _this.dataType = false;
      _this.activeChart = {};
      _this.stats = {};
      _this.activeData = {
        student: {
          sis: {}
        },
        assignment: false,
        submission: false
      };
      _this.students = {};
      _this.activeProject = null;
      _this._projectData = {};
      _this.dataTypeText = "Submissions";
      return _this;
    }

    babelHelpers.createClass(LrnappStudioInstructor, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["basePath", "sourcePath", "students", "assignments", "projects"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), " -changed");

            _this3.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this3[propName]
              }
            }));
          }

          if (propName == "dataType") {
            _this3._dataTypeChanged(_this3[propName], oldValue);
          }

          if (["route", "endPoint"].includes(propName)) {
            _this3._routeChanged(_this3.route, _this3.endPoint);
          }

          if (propName == "activeData") {
            _this3._activeDataChanged(_this3.activeData.student, _this3.activeData.assignment);
          }
        });
      }
      /**
       * Rebuild the chart whenever the select list is changed.
       */

    }, {
      key: "_chartChanged",
      value: function _chartChanged(e) {
        var attr = this.activeChart;
        attr.title = e.detail.value;
        attr.description = "Chart of values relative to " + e.detail.value;
        attr.data = this._formatChartData(e.detail.value);
        this.activeChart = _objectSpread({}, attr);
      }
      /**
       * Format data in a way that chartist likes and that matches
       * the currently active display mechanism
       */

    }, {
      key: "_formatChartData",
      value: function _formatChartData(type) {
        var labels = [];
        var series = [[]];
        var stats = this.stats.stats;

        var assignments = this._toArray(this.assignments);

        var parts = type.split("-");

        if (babelHelpers.typeof(stats[parts[0]]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(stats[parts[0]][parts[1]]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // make sure the data aligns now w/ the IDs in question
          // or we'll start mixing up our data.
          for (var i in assignments) {
            var title = assignments[i].title;

            if (babelHelpers.typeof(stats[parts[0]][parts[1]][assignments[i].id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              series[0].push(stats[parts[0]][parts[1]][assignments[i].id]);
              title += " (".concat(stats[parts[0]][parts[1]][assignments[i].id], ")");
            } else {
              series[0].push(0);
              title += " (0)";
            }

            labels.push(title);
          }
        }

        return {
          labels: labels,
          series: series
        };
      }
      /**
       * When type changes, make sure we adjust what the request going
       * out the door will be. For simplicity, false / true for the two
       * modes are binded to submission (default) and comment methods
       * of data return. This allows us to leverage the same endpoint
       * and render things more or less using much of the same code
       * and event
       */

    }, {
      key: "_dataTypeChanged",
      value: function _dataTypeChanged(newValue, oldValue) {
        // if type changes values and not from undefined to defined
        // then we should execute the request for data after setting type
        if (babelHelpers.typeof(oldValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (newValue) {
            this.dataTypeText = "Comments (beta)";
          } else {
            this.dataTypeText = "Submissions";
          }
        }
      }
      /**
       * Stupid thing to make it go from array position 0 to 1.
       */

    }, {
      key: "_commentIndex",
      value: function _commentIndex(index) {
        return index + 1;
      }
      /**
       * If the current route is outside the scope of our app
       * then allow the website to break out of the single page
       * application routing
       */

    }, {
      key: "_routeChanged",
      value: function _routeChanged(route, endPoint) {
        if (typeof route.path === "string") {
          if (typeof endPoint === "string") {
            if (route.path.startsWith(endPoint)) {
              return;
            }
          } // reload the page which since route changed will load that page


          window.location.reload();
        }
      }
      /**
       * Test if buttons should be visible or not
       */

    }, {
      key: "_activeDataChanged",
      value: function _activeDataChanged(student, assignment) {
        if (babelHelpers.typeof(student.id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          if (this._getObjectByPosition(this.students, student.id, -1) == -1) {
            this.shadowRoot.querySelector("#prevstudent").disabled = true;
          } else {
            this.shadowRoot.querySelector("#prevstudent").disabled = false;
          }

          if (this._getObjectByPosition(this.students, student.id, 1) == -1) {
            this.shadowRoot.querySelector("#nextstudent").disabled = true;
          } else {
            this.shadowRoot.querySelector("#nextstudent").disabled = false;
          }

          if (this._getObjectByPosition(this.assignments, assignment.id, -1) == -1) {
            this.shadowRoot.querySelector("#prevassignment").disabled = true;
          } else {
            this.shadowRoot.querySelector("#prevassignment").disabled = false;
          }

          if (this._getObjectByPosition(this.assignments, assignment.id, 1) == -1) {
            this.shadowRoot.querySelector("#nextassignment").disabled = true;
          } else {
            this.shadowRoot.querySelector("#nextassignment").disabled = false;
          }
        }
      }
      /**
       * Project updated
       */

    }, {
      key: "_projectChanged",
      value: function _projectChanged(e) {
        this.shadowRoot.querySelector("#loading").hidden = false; // default a11y positioning back to the stats dialog

        this.__rememberClick = this.shadowRoot.querySelector("#statsdialogbutton");
        this.shadowRoot.querySelector("#statsdialogbutton").disabled = false;
        this.shadowRoot.querySelector("#datatype").disabled = false;
        this.activeProject = e.detail.value; // this should fire off the new request

        this.studentParams.projectId = this.activeProject;
        this.shadowRoot.querySelector("#studentrequest").generateRequest();
      }
    }, {
      key: "_openStatsDialog",
      value: function _openStatsDialog(e) {
        this.shadowRoot.querySelector("#statsdialog").toggle();
      }
      /**
       * attached life cycle
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this4 = this;

        setTimeout(function () {
          _this4.shadowRoot.querySelector("#statsdialogbutton").addEventListener("click", _this4._openStatsDialog.bind(_this4)); // listen for focus event to have fired


          _this4.shadowRoot.querySelector("#statsdialog").addEventListener("opened-changed", _this4._accessibleFocus.bind(_this4));

          _this4.shadowRoot.querySelector("#dialog").addEventListener("opened-changed", _this4._accessibleFocus.bind(_this4));

          _this4.shadowRoot.querySelector("#selectedproject").addEventListener("change", _this4._projectChanged.bind(_this4));

          _this4.shadowRoot.querySelector("#selectedchart").addEventListener("change", _this4._chartChanged.bind(_this4));
        }, 0);
      }
      /**
       * Set ourselves as having focus after the modal closes.
       */

    }, {
      key: "_accessibleFocus",
      value: function _accessibleFocus(e) {
        if (!e.detail) {
          document.body.classList.remove("scroll-disabled"); // focus on our dialog triggering button

          this.__rememberClick.focus();
        }
      }
      /**
       * Handle response for the whole projects object.
       */

    }, {
      key: "_handleProjectResponse",
      value: function _handleProjectResponse(event) {
        this.shadowRoot.querySelector("#loading").hidden = true;
        this.projects = this._projectData.data.projects;
      }
      /**
       * Handle response for the whole projects object.
       */

    }, {
      key: "_handleStudentResponse",
      value: function _handleStudentResponse(event) {
        var _this5 = this;

        this.shadowRoot.querySelector("#loading").hidden = true;
        this.students = babelHelpers.toConsumableArray(this._studentData.data.students);
        this.assignments = babelHelpers.toConsumableArray(this._studentData.data.assignments);
        this.stats = this._studentData.data.stats;
        this.stats.header = "Statistics for " + this.projects["project-" + this.activeProject].attributes.title; // make sure default is asc data

        setTimeout(function () {
          _this5.shadowRoot.querySelector("#sorter").direction = "asc";
        }, 200);
      }
      /**
       * Pie menu operation handler based on which was clicked.
       */

    }, {
      key: "_changeActiveItem",
      value: function _changeActiveItem(e) {
        document.body.classList.add("scroll-disabled");
        var local = e.target;
        var newstudent;
        var newassignment; // use button id in order to move around in the grid as far as active

        switch (local.id) {
          case "prevstudent":
            newstudent = this._getObjectByPosition(this.students, this.activeData.student.id, -1);

            if (newstudent != -1 && babelHelpers.typeof(newstudent.assignments[this.activeData.assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.activeData.student = _objectSpread({}, newstudent);
              this.activeData.submission = _objectSpread({}, newstudent.assignments[this.activeData.assignment.id]);
              this.route.path = this.endPoint + "/submissions/" + this.activeData.submission.id;
            }

            break;

          case "nextstudent":
            newstudent = this._getObjectByPosition(this.students, this.activeData.student.id, 1);

            if (newstudent != -1 && babelHelpers.typeof(newstudent.assignments[this.activeData.assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              this.activeData.student = _objectSpread({}, newstudent);
              this.activeData.submission = _objectSpread({}, newstudent.assignments[this.activeData.assignment.id]);
              this.route.path = this.endPoint + "/submissions/" + this.activeData.submission.id;
            }

            break;

          case "prevassignment":
            newassignment = this._getObjectByPosition(this.assignments, this.activeData.assignment.id, -1);

            if (newassignment != -1) {
              this.activeData.assignment = _objectSpread({}, newassignment);

              if (babelHelpers.typeof(this.activeData.student.assignments[newassignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                this.activeData.submission = _objectSpread({}, this.activeData.student.assignments[newassignment.id]);
                this.route.path = this.endPoint + "/submissions/" + this.activeData.student.assignments[newassignment.id].id;
              } else {
                this.activeData.submission = false;
              }
            }

            break;

          case "nextassignment":
            newassignment = this._getObjectByPosition(this.assignments, this.activeData.assignment.id, 1);

            if (newassignment != -1) {
              this.activeData.assignment = _objectSpread({}, newassignment);

              if (babelHelpers.typeof(this.activeData.student.assignments[newassignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                this.activeData.submission = _objectSpread({}, this.activeData.student.assignments[newassignment.id]);
                this.route.path = this.endPoint + "/submissions/" + this.activeData.student.assignments[newassignment.id].id;
              } else {
                this.activeData.submission = false;
              }
            }

            break;
        }
      }
      /**
       * Helper to move back and forth in an object like you can an array
       */

    }, {
      key: "_getObjectByPosition",
      value: function _getObjectByPosition(items, key, i) {
        var keys = Object.keys(items).sort(function (a, b) {
          if (babelHelpers.typeof(items[a].sis) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            if (items[a].sis.sortable_name > items[b].sis.sortable_name) {
              return 1;
            } else if (items[a].sis.sortable_name < items[b].sis.sortable_name) {
              return -1;
            }

            return 0;
          } else {
            return a - b;
          }
        });

        if (key !== undefined) {
          key = key.toString();
        }

        var index = keys.indexOf(key); // try fallback for type issues

        if (index == -1) {
          index = keys.indexOf(parseInt(key));
        }

        if (i == -1 && index > 0 || i == 1 && index < keys.length - 1) {
          return items[keys[index + i]];
        } else {
          return -1;
        }
      }
      /**
       * Test student submission status relative to assignments
       */

    }, {
      key: "_submissionStatus",
      value: function _submissionStatus(student, assignment, dataType) {
        if (student != null) {
          if (!dataType && babelHelpers.typeof(student.assignments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(student.assignments[assignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            return true;
          } else if (dataType && babelHelpers.typeof(student.assignmentComments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this._toArray(student.assignmentComments[assignment.id]).length > 0) {
            return true;
          }
        }

        return false;
      }
      /**
       * Test student submission status relative to assignments
       */

    }, {
      key: "_submissionID",
      value: function _submissionID(student, assignment) {
        if (student != null && babelHelpers.typeof(student.assignments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(student.assignments[assignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return student.assignments[assignment.id].id;
        }

        return false;
      }
      /**
       * Return a piece of the submission needed for visualization bc of template scope
       */

    }, {
      key: "_submissionPiece",
      value: function _submissionPiece(student, assignment, piece) {
        if (student != null && babelHelpers.typeof(student.assignments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(student.assignments[assignment.id].id) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var submission = student.assignments[assignment.id];

          switch (piece) {
            case "url":
              return this.basePath + "lrnapp-studio-submission/submissions/" + submission.id;
              break;

            case "title":
              return submission.attributes.title;
              break;

            case "icon":
              return submission.meta.state_icon;
              break;

            case "color":
              return submission.meta.state_color;
              break;

            case "comments":
              return this._toArray(student.assignmentComments[assignment.id]);
              break;
          }
        }

        return "";
      }
      /**
       * Return number of comments on an assignment for display.
       */

    }, {
      key: "_commentCount",
      value: function _commentCount(student, assignment, dataType) {
        if (!dataType && student != null && babelHelpers.typeof(student.assignmentComments[assignment.id]) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return this._toArray(student.assignmentComments[assignment.id]).length;
        }

        return false;
      }
      /**
       * Set route for active submission to load
       */

    }, {
      key: "_setActiveSubmission",
      value: function _setActiveSubmission(e) {
        var local = e.target;
        this.__rememberClick = local;
        var item = local.id.split("-"); // find the active elements

        this.activeData.student = _objectSpread({}, this.students[item[1]]);
        this.activeData.assignment = _objectSpread({}, this.assignments[item[3]]);
        this.activeData.submission = _objectSpread({}, this.students[item[1]].assignments[item[3]]);
        this.route.path = this.endPoint + "/submissions/" + item[item.length - 1];
        document.body.classList.add("scroll-disabled");
        this.shadowRoot.querySelector("#dialog").toggle();
      }
      /**
       * Set route for active submission via comment click
       */

    }, {
      key: "_setActiveComment",
      value: function _setActiveComment(e) {
        // disable all buttons for in modal nav
        this.shadowRoot.querySelector("#nextassignment").disabled = true;
        this.shadowRoot.querySelector("#prevassignment").disabled = true;
        this.shadowRoot.querySelector("#nextstudent").disabled = true;
        this.shadowRoot.querySelector("#prevstudent").disabled = true;
        var local = e.target;
        this.__rememberClick = local;
        var item = local.id.split("-"); // find the active elements

        this.activeData.student = _objectSpread({}, this.students[item[1]]);
        this.activeData.assignment = _objectSpread({}, this.assignments[item[3]]);
        this.activeData.submission = _objectSpread({}, this.students[item[1]].assignments[item[3]]);
        this.route.path = this.endPoint + "/submissions/" + item[item.length - 1];
        document.body.classList.add("scroll-disabled");
        this.shadowRoot.querySelector("#dialog").toggle();
      }
      /**
       * Simple way to convert from object to array.
       */

    }, {
      key: "_toArray",
      value: function _toArray(obj) {
        if (obj == null) {
          return [];
        }

        return Object.keys(obj).map(function (key) {
          return obj[key];
        });
      }
    }]);
    return LrnappStudioInstructor;
  }(_litElement.LitElement);

  _exports.LrnappStudioInstructor = LrnappStudioInstructor;
  window.customElements.define(LrnappStudioInstructor.tag, LrnappStudioInstructor);
});