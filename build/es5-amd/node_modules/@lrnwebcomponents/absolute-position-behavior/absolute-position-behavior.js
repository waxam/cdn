define(["exports", "../../lit-element/lit-element.js", "./lib/absolute-position-state-manager.js"], function (_exports, _litElement, _absolutePositionStateManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AbsolutePositionBehavior = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_7a1bda60c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n          z-index: 99999999;\n          position: absolute;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_7a1bda60c96f11ea8be5e1d5fe7ec787 = function _templateObject2_7a1bda60c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_7a1bda60c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <slot></slot>\n    "]);

    _templateObject_7a1bda60c96f11ea8be5e1d5fe7ec787 = function _templateObject_7a1bda60c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `absolute-position-behavior`
   * abstracts absolute positioning behavior to be resusable in other elements
   * @demo ./demo/index.html
   * @element absolute-position-behavior
   */
  var AbsolutePositionBehavior =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(AbsolutePositionBehavior, _LitElement);
    babelHelpers.createClass(AbsolutePositionBehavior, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_7a1bda60c96f11ea8be5e1d5fe7ec787());
      } // properties available to the custom element for data binding

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_7a1bda60c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(AbsolutePositionBehavior), "properties", this), {
          /**
           * Element is positioned from connected to disconnected?
           * Otherwise setPosition and unsetPosition must be called manually.
           */
          auto: {
            type: Boolean,
            attribute: "auto"
          },

          /**
           * If true, no parts of the tooltip will ever be shown offscreen.
           */
          fitToVisibleBounds: {
            type: Boolean,
            attribute: "fit-to-visible-bounds"
          },

          /**
           * If true, no parts of the tooltip will ever be shown offscreen.
           */
          hidden: {
            type: Boolean,
            attribute: "hidden"
          },

          /**
           * The id of the element that the tooltip is anchored to. This element
           * must be a sibling of the tooltip. If this property is not set,
           * then the tooltip will be centered to the parent node containing it.
           */
          for: {
            type: String,
            attribute: "for",
            reflect: true
          },

          /**
           * The spacing between the top of the tooltip and the element it is
           * anchored to.
           */
          offset: {
            type: Number,
            attribute: "offset"
          },

          /**
           * Positions the tooltip to the top, right, bottom, left of its content.
           */
          position: {
            type: String,
            attribute: "position",
            reflect: true
          },

          /**
           * Aligns at the start, or end fo target. Default is centered.
           */
          positionAlign: {
            type: String,
            attribute: "position-align",
            reflect: true
          },

          /**
           * The actual target element
           */
          target: {
            type: Object
          },

          /**
           * The element's style
           */
          __positions: {
            type: Object
          }
        });
      }
      /**
       * Store tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "absolute-position-behavior";
      }
    }]);

    function AbsolutePositionBehavior() {
      var _this;

      babelHelpers.classCallCheck(this, AbsolutePositionBehavior);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(AbsolutePositionBehavior).call(this));
      _this.auto = false;
      _this.fitToVisibleBounds = false;
      _this.for = null;
      _this.offset = 0;
      _this.position = "bottom";
      _this.target = null;
      _this.__positions = {};
      _this.__observe = false;
      _this.__manager = window.AbsolutePositionStateManager.requestAvailability();
      return _this;
    }

    babelHelpers.createClass(AbsolutePositionBehavior, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "auto" && _this2.auto) _this2.setPosition();
          if (propName === "auto" && !_this2.auto) _this2.unsetPosition();
          if (propName === "fitToVisibleBounds") _this2.updatePosition();
          if (propName === "for") _this2.updatePosition();
          if (propName === "offset") _this2.updatePosition();
          if (propName === "position") _this2.updatePosition();
          if (propName === "positionAlign") _this2.updatePosition();
          if (propName === "target") _this2.updatePosition();
          if (propName === "hidden") _this2.updatePosition();
        });
      }
      /**
       * Registers element with AbsolutePositionStateManager
       * @returns {void}
       */

    }, {
      key: "setPosition",
      value: function setPosition() {
        this.__observe = true;

        this.__manager.loadElement(this);
      }
      /**
       * Unregisters element with AbsolutePositionStateManager
       * @returns {void}
       */

    }, {
      key: "unsetPosition",
      value: function unsetPosition() {
        this.__observe = false;

        this.__manager.unloadElement(this);
      }
      /**
       * Updates  element's position
       * @returns {void}
       */

    }, {
      key: "updatePosition",
      value: function updatePosition() {
        if (this.__observe === true) {
          this.__manager.positionElement(this);
        }
      }
      /**
       * life cycle, element is removed from DOM
       * @returns {void}
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.unsetPosition();
        babelHelpers.get(babelHelpers.getPrototypeOf(AbsolutePositionBehavior.prototype), "disconnectedCallback", this).call(this);
      }
    }]);
    return AbsolutePositionBehavior;
  }(_litElement.LitElement);

  _exports.AbsolutePositionBehavior = AbsolutePositionBehavior;
  window.customElements.define(AbsolutePositionBehavior.tag, AbsolutePositionBehavior);
});