define(["exports", "../../@polymer/polymer/polymer-element.js", "../schema-behaviors/schema-behaviors.js", "../es-global-bridge/es-global-bridge.js"], function (_exports, _polymerElement, _schemaBehaviors, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AframePlayer = void 0;

  function _templateObject_75df2340dedc11e9bf5a076df0f16721() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          position: relative;\n        }\n        .a-hidden {\n          display: hidden;\n        }\n      </style>\n      <a-scene\n        id=\"scene\"\n        class=\"embedded\"\n        embedded\n        arjs$=\"[[ar]]\"\n        style$=\"height:[[height]];width:[[width]];\"\n      >\n        <a-sky color$=\"[[skyColor]]\"></a-sky>\n        <a-marker-camera preset=\"hiro\"></a-marker-camera>\n      </a-scene>\n    "], ["\n      <style>\n        :host {\n          display: block;\n          position: relative;\n        }\n        .a-hidden {\n          display: hidden;\n        }\n      </style>\n      <a-scene\n        id=\"scene\"\n        class=\"embedded\"\n        embedded\n        arjs$=\"[[ar]]\"\n        style$=\"height:[[height]];width:[[width]];\"\n      >\n        <a-sky color\\$=\"[[skyColor]]\"></a-sky>\n        <a-marker-camera preset=\"hiro\"></a-marker-camera>\n      </a-scene>\n    "]);

    _templateObject_75df2340dedc11e9bf5a076df0f16721 = function _templateObject_75df2340dedc11e9bf5a076df0f16721() {
      return data;
    };

    return data;
  }

  /**
   * `aframe-player`
   * `A wrapper to do data binding into aframe`
   *
   * @demo demo/index.html
   */
  var AframePlayer =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(AframePlayer, _SchemaBehaviors);

    function AframePlayer() {
      babelHelpers.classCallCheck(this, AframePlayer);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(AframePlayer).apply(this, arguments));
    }

    babelHelpers.createClass(AframePlayer, [{
      key: "_attachDom",

      /**
       * highjack shadowDom
       */
      value: function _attachDom(dom) {
        this.appendChild(dom);
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-aframePlayer-loaded", this._aframeLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(AframePlayer.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "connectedCallback",

      /**
       * Attached.
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(AframePlayer.prototype), "connectedCallback", this).call(this);
        var location = "https://aframe.io/releases/0.9.2/aframe.min.js";
        if ((typeof TWEEN === "undefined" ? "undefined" : babelHelpers.typeof(TWEEN)) === "object") this._aframeLoaded.bind(this);
        window.addEventListener("es-bridge-aframePlayer-loaded", this._aframeLoaded.bind(this));
        window.ESGlobalBridge.requestAvailability();
        window.ESGlobalBridge.instance.load("aframePlayer", location);
      }
    }, {
      key: "_aframeLoaded",
      value: function _aframeLoaded(el) {
        // ensure that this doesn't put full screen styles on the page!
        this.$.scene.removeFullScreenStyles();
        this.__entity = document.createElement("a-entity");

        this.__entity.setAttribute("gltf-model", "url(" + this.source + ")");

        this._positionChanged();

        this.$.scene.appendChild(this.__entity);
      }
      /**
       * Generate position object based on format a-frame expects.
       */

    }, {
      key: "_computePosition",
      value: function _computePosition(x, y, z, width, height) {
        return {
          x: x,
          y: y,
          z: z
        };
      }
      /**
       * When position is updated, inject this into a-frame tag.
       */

    }, {
      key: "_positionChanged",
      value: function _positionChanged(position) {
        if (this.__entity !== undefined) this.__entity.setAttribute("position", position);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_75df2340dedc11e9bf5a076df0f16721());
      }
    }, {
      key: "tag",
      get: function get() {
        return "aframe-player";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Source to reference for the 3D object
           */
          source: {
            type: String,
            value: ""
          },

          /**
           * height of the element
           */
          height: {
            type: String,
            value: "480px"
          },

          /**
           * width of the element
           */
          width: {
            type: String,
            value: "640px"
          },

          /**
           * Color of the sky / background.
           */
          skyColor: {
            type: String,
            value: "#DCDCDC"
          },

          /**
           * If this is for augmented reality or not.
           */
          ar: {
            type: Boolean,
            value: false
          },

          /**
           * x position for the AR element.
           */
          x: {
            type: String,
            value: "0"
          },

          /**
           * y position for the AR element.
           */
          y: {
            type: String,
            value: "0"
          },

          /**
           * z position for the AR element.
           */
          z: {
            type: String,
            value: "0"
          },

          /**
           * Generate a position object when coordinates change.
           */
          position: {
            type: Object,
            computed: "_computePosition(x, y, z, width, height)",
            observer: "_positionChanged"
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(AframePlayer), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(AframePlayer), "properties", this));
        }

        return props;
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: false,
          gizmo: {
            title: "3D player",
            description: "A 3D file / augmented reality player.",
            icon: "av:play-circle-filled",
            color: "amber",
            groups: ["3D", "Augmented reality"],
            handles: [{
              type: "3d",
              source: "source"
            }],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [{
              property: "height",
              title: "height",
              description: "height of the object",
              inputMethod: "textfield",
              type: "bar",
              icon: "image:photo-size-select-small",
              required: true
            }, {
              property: "width",
              title: "Width",
              description: "Width of the object",
              inputMethod: "textfield",
              type: "bar",
              icon: "image:straighten",
              required: true
            }],
            configure: [{
              property: "source",
              title: "Source",
              description: "The URL for this AR file.",
              inputMethod: "textfield",
              type: "bar",
              icon: "link",
              required: true
            }, {
              property: "x",
              title: "X",
              description: "X position of the element in AR.",
              inputMethod: "textfield",
              type: "bar",
              icon: "communication:location-on",
              required: true
            }, {
              property: "y",
              title: "Y",
              description: "Y position of the element in AR.",
              inputMethod: "textfield",
              type: "bar",
              icon: "communication:location-on",
              required: true
            }, {
              property: "z",
              title: "Z",
              description: "Z position of the element in AR.",
              inputMethod: "textfield",
              type: "bar",
              icon: "communication:location-on",
              required: true
            }, {
              property: "skyColor",
              title: "Sky color",
              description: "Select the color of the sky in the scene.",
              inputMethod: "colorpicker",
              type: "bar",
              icon: "editor:format-color-fill"
            }],
            advanced: []
          }
        };
      }
    }]);
    return AframePlayer;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.AframePlayer = AframePlayer;
  window.customElements.define(AframePlayer.tag, AframePlayer);
});