define(["exports", "require", "../simple-colors/simple-colors.js", "../../lit-element/lit-element.js"], function (_exports, _require, _simpleColors, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PlaceHolder = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_641dab70d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          border: none;\n          transition: 0.2s all linear;\n        }\n        :host([drag-over]) {\n          border: var(--place-holder-drag-over-border, 4px dashed #2196f3);\n        }\n        .wrapper {\n          text-align: center;\n          padding: 16px;\n          color: var(--simple-colors-default-theme-grey-11, #222222);\n          background-color: var(--simple-colors-default-theme-grey-2, #eeeeee);\n        }\n        iron-icon {\n          margin: 0 auto;\n          width: 50%;\n          height: 50%;\n          display: block;\n        }\n        .text {\n          line-height: 24px;\n          font-size: 24px;\n        }\n        .directions {\n          line-height: 16px;\n          font-size: 16px;\n          font-style: italic;\n        }\n      "]);

    _templateObject2_641dab70d34d11ea880ba1e93364c49c = function _templateObject2_641dab70d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_641dab70d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"wrapper\">\n        <iron-icon icon=\"", "\"></iron-icon>\n        <div class=\"text\">", "</div>\n        <div class=\"directions\">", "</div>\n      </div>\n    "]);

    _templateObject_641dab70d34d11ea880ba1e93364c49c = function _templateObject_641dab70d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `place-holder`
   * @element place-holder
   * Placeholder for a piece of media in the future
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   * - placeholder is a grey block on the page which can respond to drag and drop
   */
  var PlaceHolder =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(PlaceHolder, _SimpleColors);
    babelHelpers.createClass(PlaceHolder, [{
      key: "render",

      /**
       * LitElement render
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_641dab70d34d11ea880ba1e93364c49c(), this.iconFromType, this.calcText, this.directions);
      }
    }, {
      key: "updated",

      /**
       * LitElement properties changed
       */
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (["type", "dragOver"].includes(propName)) {
            _this2.iconFromType = _this2._getIconFromType(_this2.type, _this2.dragOver);
          }

          if (["text", "type", "dragOver"].includes(propName)) {
            _this2.calcText = _this2._getCalcText(_this2.text, _this2.type, _this2.dragOver);
          }
        });
      }
      /**
       * Fire an event for things to react to above us
       */

    }, {
      key: "fireReplaceEvent",
      value: function fireReplaceEvent(e) {
        this.dispatchEvent(new CustomEvent("place-holder-replace", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this.type
        }));
      }
      /**
       * Get the calculated text based on text being empty and type being set.
       */

    }, {
      key: "_getCalcText",
      value: function _getCalcText(text, type, dragOver) {
        if (dragOver) {
          return "Drop file to upload";
        } else if (text === "") {
          return "Placeholder for " + type;
        } else {
          return text;
        }
      }
      /**
       * Generate an icon based on the media type selected
       * for the place holder.
       */

    }, {
      key: "_getIconFromType",
      value: function _getIconFromType(type, dragOver) {
        if (!dragOver) {
          switch (type) {
            case "document":
              new Promise(function (res, rej) {
                return _require.default(["../../@polymer/iron-icons/editor-icons.js"], res, rej);
              });
              return "editor:insert-drive-file";
              break;

            case "audio":
              new Promise(function (res, rej) {
                return _require.default(["../../@polymer/iron-icons/av-icons.js"], res, rej);
              });
              return "av:music-video";
              break;

            case "video":
              new Promise(function (res, rej) {
                return _require.default(["../../@polymer/iron-icons/notification-icons.js"], res, rej);
              });
              return "notification:ondemand-video";
              break;

            case "image":
              new Promise(function (res, rej) {
                return _require.default(["../../@polymer/iron-icons/image-icons.js"], res, rej);
              });
              return "image:crop-original";
              break;

            case "math":
              new Promise(function (res, rej) {
                return _require.default(["../../@polymer/iron-icons/editor-icons.js"], res, rej);
              });
              return "editor:functions";
              break;

            case "text":
            default:
              new Promise(function (res, rej) {
                return _require.default(["../../@polymer/iron-icons/editor-icons.js"], res, rej);
              });
              return "editor:format-align-left";
              break;
          }
        } else {
          new Promise(function (res, rej) {
            return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
          }); // we are dragging, ignore icon

          return "icons:file-upload";
        }
      }
      /**
       * HTMLElement
       */

    }], [{
      key: "styles",

      /**
       * LitElement render styles
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(PlaceHolder), "styles", this)), [(0, _litElement.css)(_templateObject2_641dab70d34d11ea880ba1e93364c49c())]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "place-holder";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * calculate an icon based on the type that was used
           */
          iconFromType: {
            type: String
          },

          /**
           * Text place holder for describing this place holder element.
           */
          text: {
            type: String
          },
          directions: {
            type: String
          },

          /**
           * Calculate text based on the type in the event we have no default.
           */
          calcText: {
            type: String
          },

          /**
           * A media type to visualize and also bubble events off of.
           */
          type: {
            type: String
          },

          /**
           * Bind dragging state to a variable so we can apply CSS.
           */
          dragOver: {
            type: Boolean,
            reflect: true,
            attribute: "drag-over"
          }
        };
      }
    }]);

    function PlaceHolder() {
      var _this;

      babelHelpers.classCallCheck(this, PlaceHolder);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(PlaceHolder).call(this));
      _this.text = "";
      _this.type = "text";
      _this.dragOver = false;
      _this.directions = "Double click or drag and drop file to replace";

      _this.addEventListener("dragover", function (e) {
        this.dragOver = true;
        e.preventDefault();
        e.stopPropagation();
        this.classList.add("dragover");
      });

      _this.addEventListener("dragleave", function (e) {
        this.dragOver = false;
        e.preventDefault();
        e.stopPropagation();
        this.classList.remove("dragover");
      }); // self bind a drop event enough though something else
      // will need to step in and do something with this.
      // We are just making sure that this doesn't redirect the browser.


      _this.addEventListener("drop", function (e) {
        this.dragOver = false;
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        this.classList.remove("dragover"); // this helps ensure that what gets drag and dropped is a file
        // this prevents issues with selecting and dragging text (which triggers drag/drop)
        // as well as compatibility with things that are legit in a draggable state

        try {
          if (e.dataTransfer.items[0].kind === "file") {
            e.placeHolderElement = this; // fire this specialized event up so things like HAX can intercept

            this.dispatchEvent(new CustomEvent("place-holder-file-drop", {
              bubbles: true,
              cancelable: true,
              composed: true,
              detail: e
            }));
          }
        } catch (e) {}
      });

      _this.addEventListener("dblclick", _this.fireReplaceEvent.bind(babelHelpers.assertThisInitialized(_this)));

      return _this;
    }
    /**
     * HAX
     */


    babelHelpers.createClass(PlaceHolder, null, [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Placeholder",
            description: "A place holder that can be converted into the media type that's been selected",
            icon: "hax:placeholder-image",
            color: "grey",
            groups: ["Placeholder", "Content"],
            handles: [],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "type",
              title: "Type",
              description: "Type of gizmo that this accepts for replacement.",
              inputMethod: "select",
              options: {
                text: "Text / content",
                document: "Document / file",
                audio: "Audio",
                video: "Video",
                image: "Image",
                math: "Math"
              }
            }, {
              property: "text",
              title: "Text",
              description: "Identify the place holder desired in greater detail",
              inputMethod: "textfield",
              required: false
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["icon-from-type", "calc-text", "colors"],
            wipeSlot: true
          }
        };
      }
    }]);
    return PlaceHolder;
  }(_simpleColors.SimpleColors);

  _exports.PlaceHolder = PlaceHolder;
  window.customElements.define(PlaceHolder.tag, PlaceHolder);
});