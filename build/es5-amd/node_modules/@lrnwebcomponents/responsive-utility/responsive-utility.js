define(["exports", "../../lit-element/lit-element.js", "../../@juggle/resize-observer/lib/exports/resize-observer.js"], function (_exports, _litElement, _resizeObserver) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ResponsiveUtility = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_8b59ea60c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <slot></slot>\n    "]);

    _templateObject_8b59ea60c96f11ea8be5e1d5fe7ec787 = function _templateObject_8b59ea60c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `responsive-utility`
   * A singleton that manages responsive resize events for elements that invoke it.
   *
   * @element responsive-utility
   * @extends IronResizableBehavior
   * @demo ./index.html
   */
  window.ResponsiveUtility = {};
  window.ResponsiveUtility.instance = null;

  var ResponsiveUtility =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(ResponsiveUtility, _LitElement);
    babelHelpers.createClass(ResponsiveUtility, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_8b59ea60c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ResponsiveUtility.prototype), "connectedCallback", this).call(this);
        /* handle element registration */

        window.addEventListener("responsive-element", this.responiveElementEvent.bind(this));
        /* handle element deregistration */

        window.addEventListener("delete-responsive-element", this.deleteResponiveElementEvent.bind(this));
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("responsive-element", this.responiveElementEvent.bind(this));
        /* handle element deregistration */

        window.removeEventListener("delete-responsive-element", this.deleteResponiveElementEvent.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(ResponsiveUtility.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * adds a responsive element to the details array
       *
       * @param {event} e event to add responsive element
       * @memberof ResponsiveUtility
       */

    }, {
      key: "responiveElementEvent",
      value: function responiveElementEvent(e) {
        var detail = {
          element: e.detail.element,
          attribute: e.detail.attribute || "responsive-size",
          sm: e.detail.sm || 900,
          md: e.detail.md || 1200,
          lg: e.detail.lg || 1500,
          xl: e.detail.xl || 1800,
          custom: e.detail.custom || "responsive-width"
        };
        detail.observer = this._getObserver(detail);
        detail.observer.observe(detail.element);
        this.details.push(detail);
        window.ResponsiveUtility.setSize(detail);
      }
    }, {
      key: "_getObserver",
      value: function _getObserver(detail) {
        return new _resizeObserver.ResizeObserver(function (en) {
          return en.forEach(function (e) {
            return window.ResponsiveUtility.setSize(detail, e.contentBoxSize || e.borderBoxSize || e.contentRect || e.target ? e.target.offsetWidth : 0);
          });
        });
      }
      /**
       * deletes the responsive element from the details array
       * @param {event} e event to add responsive element
       */

    }, {
      key: "deleteResponiveElementEvent",
      value: function deleteResponiveElementEvent(e) {
        this.details = this.details.filter(function (detail) {
          return e.detail !== detail;
        });
      }
      /**
       * An array of objects. Each object is contains data about an element
       * that will be updated with responsive values.
       *
       * To add an element to this array, fire a 'responsive-element' event
       * with the following data:
       *
       * {
       *   "element": (the element itself),
       *   "attribute": (the attribute that will be set with the size),
       *   "sm": (optional custom sm breakpoint, default is 900),
       *   "md": (optional custom md breakpoint, default is 1200),
       *   "lg": (optional custom lg breakpoint, default is 1500),
       *   "xl": (optional custom xl breakpoint, default is 1800),
       * }
       *
       */

      /**
       * Makes sure there is a utility ready and listening for elements.
       */

    }], [{
      key: "tag",
      get: function get() {
        return "responsive-utility";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ResponsiveUtility), "properties", this), {
          /**
           * Array of details provided by responsive elements
           */
          details: {
            type: Array
          }
        });
      }
    }]);

    function ResponsiveUtility() {
      var _this;

      babelHelpers.classCallCheck(this, ResponsiveUtility);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ResponsiveUtility).call(this));
      _this.details = [];
      if (window.ResponsiveUtility.instance == null) window.ResponsiveUtility.instance = babelHelpers.assertThisInitialized(_this);
      return _this;
    }

    return ResponsiveUtility;
  }(_litElement.LitElement);

  _exports.ResponsiveUtility = ResponsiveUtility;
  window.customElements.define(ResponsiveUtility.tag, ResponsiveUtility);

  /**
   * Checks to see if there is an instance available, and if not appends one
   */
  window.ResponsiveUtility.requestAvailability = function () {
    if (window.ResponsiveUtility.instance == null) {
      window.ResponsiveUtility.instance = document.createElement("responsive-utility");
    }

    document.body.appendChild(window.ResponsiveUtility.instance);
  };
  /**
   * Sets responsive size based on detail provided by reponsive element
   * @param {object} detail object with element details, as in {
   *   "element": (the element itself),
   *   "attribute": (the attribute that will be set with the size),
   *   "sm": (optional custom sm breakpoint, default is 900),
   *   "md": (optional custom md breakpoint, default is 1200),
   *   "lg": (optional custom lg breakpoint, default is 1500),
   *   "xl": (optional custom xl breakpoint, default is 1800),
   * }
   */


  window.ResponsiveUtility.setSize = function (detail) {
    var width = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
    var size,
        el = detail.element,
        attr = detail.attribute,
        custom = detail.custom;

    if (width < detail.sm) {
      size = "xs";
    } else if (width < detail.md) {
      size = "sm";
    } else if (width < detail.lg) {
      size = "md";
    } else if (width < detail.xl) {
      size = "lg";
    } else {
      size = "xl";
    }

    if (!el.getAttribute(custom) || width !== el.getAttribute(custom)) el.setAttribute(custom, width);
    if (!el.getAttribute(attr) || size !== el.getAttribute(attr)) el.setAttribute(attr, size);
  };
});