define(["exports", "meta", "require", "../../lit-element/lit-element.js"], function (_exports, meta, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimplePages = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_6500b870d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        iron-pages:not(:defined) {\n          display: none;\n        }\n      </style>\n      <iron-pages\n        selected=\"", "\"\n        selected-attribute=\"", "\"\n        @selected-changed=\"", "\"\n      >\n        <slot></slot>\n      </iron-pages>\n    "]);

    _templateObject_6500b870d34d11ea880ba1e93364c49c = function _templateObject_6500b870d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `simple-pages`
   * `toggle between pages`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @demo demo/index.html
   * @element simple-pages
   */
  var SimplePages =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(SimplePages, _LitElement);
    babelHelpers.createClass(SimplePages, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_6500b870d34d11ea880ba1e93364c49c(), this.selected, this.selectedAttribute, this._selectedChanged);
      } // properties available to the custom element for data binding

    }], [{
      key: "properties",
      get: function get() {
        var props = {
          selected: {
            type: Number
          },
          selectedAttribute: {
            type: String,
            attribute: "selected-attribute"
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SimplePages), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(SimplePages), "properties", this));
        }

        return props;
      }
      /**
       * Convention we use
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-pages";
      }
      /**
       * HTMLElement
       */

    }]);

    function SimplePages() {
      var _this;

      babelHelpers.classCallCheck(this, SimplePages);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimplePages).call(this));
      _this.selected = 0;
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/iron-pages/iron-pages.js"], res, rej);
        });
      }, 0);
      return _this;
    }
    /**
     * Selected changed
     */


    babelHelpers.createClass(SimplePages, [{
      key: "_selectedChanged",
      value: function _selectedChanged(e) {
        if (this.children && this.children[e.detail.value] && this.children[e.detail.value].tagName && this.children[e.detail.value].getAttribute("data-dimport")) {
          var el = this.children[e.detail.value];

          if (!window.customElements.get(el.tagName.toLowerCase())) {
            var basePath = this.pathFromUrl(decodeURIComponent(meta.url));
            new Promise(function (res, rej) {
              return _require.default(["".concat(basePath, "../../").concat(el.getAttribute("data-dimport"))], res, rej);
            }).then(function (response) {
              setTimeout(function () {
                window.dispatchEvent(new Event("resize"));
              }, 0);
            });
          }
        }
      } // simple path from a url modifier

    }, {
      key: "pathFromUrl",
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {}
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        changedProperties.forEach(function (oldValue, propName) {
          /* notify example
          // notify
          if (propName == 'format') {
            this.dispatchEvent(
              new CustomEvent(`${propName}-changed`, {
                detail: {
                  value: this[propName],
                }
              })
            );
          }
          */

          /* observer example
          if (propName == 'activeNode') {
            this._activeNodeChanged(this[propName], oldValue);
          }
          */

          /* computed example
          if (['id', 'selected'].includes(propName)) {
            this.__selectedChanged(this.selected, this.id);
          }
          */
        });
      }
    }]);
    return SimplePages;
  }(_litElement.LitElement);

  _exports.SimplePages = SimplePages;
  customElements.define(SimplePages.tag, SimplePages);
});