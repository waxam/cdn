define(["exports", "../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TradingCard = void 0;

  var _templateObject_e9dbc710ce4611ecb13bcf602138080f, _templateObject2_e9dbc710ce4611ecb13bcf602138080f;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `trading-card`
   * `A playful element for presenting cards abot someone in a fun manner like a popular card game would.`
   * @demo demo/index.html
   * @element trading-card
   */
  var TradingCard = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(TradingCard, _LitElement);

    var _super = _createSuper(TradingCard);

    /**
     * HTMLElement
     */
    function TradingCard() {
      babelHelpers.classCallCheck(this, TradingCard);
      return _super.call(this);
    }
    /**
     * LitElement style callback
     */


    babelHelpers.createClass(TradingCard, [{
      key: "render",
      value:
      /**
       * LitElement render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_e9dbc710ce4611ecb13bcf602138080f || (_templateObject_e9dbc710ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <div>\n        <slot></slot>\n      </div>\n    "])));
      }
      /**
       * Convention we use
       */

    }, {
      key: "firstUpdated",
      value:
      /**
       * LitElement ready
       */
      function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(TradingCard.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(TradingCard.prototype), "firstUpdated", this).call(this, changedProperties);
        }
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(TradingCard.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(TradingCard.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          /* notify example
          // notify
          if (propName == 'format') {
            this.dispatchEvent(
              new CustomEvent(`${propName}-changed`, {
                detail: {
                  value: this[propName],
                }
              })
            );
          }
          */

          /* observer example
          if (propName == 'activeNode') {
            this._activeNodeChanged(this[propName], oldValue);
          }
          */

          /* computed example
          if (['id', 'selected'].includes(propName)) {
            this.__selectedChanged(this.selected, this.id);
          }
          */
        });
      }
    }], [{
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];

        if (babelHelpers.get(babelHelpers.getPrototypeOf(TradingCard), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(TradingCard), "styles", this);
        }

        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject2_e9dbc710ce4611ecb13bcf602138080f || (_templateObject2_e9dbc710ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "trading-card";
      }
    }]);
    return TradingCard;
  }(_index.LitElement);

  _exports.TradingCard = TradingCard;
  customElements.define(TradingCard.tag, TradingCard);
});