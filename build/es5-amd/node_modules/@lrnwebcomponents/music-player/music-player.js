define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MusicPlayer = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_c3dc2a6056b411ebb2c24bb50d8f41ab() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n        midi-player {\n          display: block;\n          width: var(--music-player-midi-player-width, unset);\n          margin: var(--music-player-midi-player-margin, 4px);\n        }\n        :host([no-visual]) midi-visualizer {\n          display: none;\n        }\n\n        :host([no-waterfall]) midi-visualizer .waterfall-notes-container {\n          display: none;\n        }\n        midi-visualizer .waterfall-visualizer {\n          overflow: auto;\n        }\n      "]);

    _templateObject2_c3dc2a6056b411ebb2c24bb50d8f41ab = function _templateObject2_c3dc2a6056b411ebb2c24bb50d8f41ab() {
      return data;
    };

    return data;
  }

  function _templateObject_c3dc2a6056b411ebb2c24bb50d8f41ab() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <midi-visualizer\n        type=\"", "\"\n        src=\"", "\"\n      ></midi-visualizer>\n      <midi-player src=\"", "\" sound-font></midi-player>\n    "]);

    _templateObject_c3dc2a6056b411ebb2c24bb50d8f41ab = function _templateObject_c3dc2a6056b411ebb2c24bb50d8f41ab() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `music-player`
   * `Visualize different types of music and simple format player`
   *
   * @demo demo/index.html
   * @element music-player
   */
  var MusicPlayer = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(MusicPlayer, _LitElement);

    var _super = _createSuper(MusicPlayer);

    babelHelpers.createClass(MusicPlayer, null, [{
      key: "tag",

      /**
       * Convention we use
       */
      get: function get() {
        return "music-player";
      }
      /**
       * HTMLElement
       */

    }]);

    function MusicPlayer() {
      var _this;

      babelHelpers.classCallCheck(this, MusicPlayer);
      _this = _super.call(this);
      _this.noWaterfall = false;
      _this.noVisual = false;
      _this.visualizer = "staff";
      return _this;
    } //styles function


    babelHelpers.createClass(MusicPlayer, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_c3dc2a6056b411ebb2c24bb50d8f41ab(), this.visualizer, this.source, this.source);
      } // properties available to the custom element for data binding

    }, {
      key: "firstUpdated",

      /**
       * LitElement life cycle - 1st updated
       */
      value: function firstUpdated() {
        var _this2 = this;

        this.visualizerElement = this.shadowRoot.querySelector("midi-visualizer");
        setTimeout(function () {
          new Promise(function (res, rej) {
            return _require.default(["./lib/html-midi-player.js"], res, rej);
          }).then(function (module) {
            // associate the visualizer to the player
            _this2.shadowRoot.querySelector("midi-player").addVisualizer(_this2.visualizerElement);
          });
        }, 0);
      }
      /**
       * Attached to the DOM, now fire.
       */

    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_c3dc2a6056b411ebb2c24bb50d8f41ab())];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          source: {
            type: String
          },
          visualizer: {
            type: String
          },
          noWaterfall: {
            type: Boolean,
            attribute: "no-waterfall",
            reflect: true
          },
          noVisual: {
            type: Boolean,
            attribute: "no-visual",
            reflect: true
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Music player",
            description: "Play music in context with a data visualization",
            icon: "image:music-note",
            color: "blue",
            groups: ["Media", "Music"],
            handles: [{
              type: "audio",
              source: "source"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "source",
              title: "Source",
              description: "Source of the file to play",
              inputMethod: "haxupload"
            }, {
              property: "visualizer",
              title: "Visualization",
              description: "How to visualize the music file",
              inputMethod: "select",
              options: {
                staff: "Staff",
                "piano-roll": "Piano roll",
                waterfall: "Piano + waterfall"
              }
            }, {
              property: "noWaterfall",
              title: "Hide waterfall",
              description: "Disable the waterfall of notes when visualized as a piano",
              inputMethod: "boolean"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "music-player",
            content: "",
            properties: {
              source: "https://magenta.github.io/magenta-js/music/demos/melody.mid"
            }
          }]
        };
      }
    }]);
    return MusicPlayer;
  }(_litElement.LitElement);

  _exports.MusicPlayer = MusicPlayer;
  customElements.define(MusicPlayer.tag, MusicPlayer);
});