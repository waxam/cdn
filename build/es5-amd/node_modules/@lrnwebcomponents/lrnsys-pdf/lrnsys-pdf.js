define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _require, _polymerElement, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysPdf = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_89e2dac0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n      </style>\n      <h2>[[title]]</h2>\n      <pdf-browser-viewer\n        id=\"pdfViewer\"\n        file=\"[[file]]#page=[[page]]\"\n        width=\"100%\"\n        card=\"[[card]]\"\n        elevation=\"2\"\n        download-label=\"[[downloadLabel]]\"\n      ></pdf-browser-viewer>\n    "]);

    _templateObject_89e2dac0c96f11ea8be5e1d5fe7ec787 = function _templateObject_89e2dac0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `lrnsys-pdf`
   * @element lrnsys-pdf
   * @demo demo/index.html
   */
  var LrnsysPdf =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(LrnsysPdf, _SchemaBehaviors);

    function LrnsysPdf() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysPdf);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnsysPdf).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../pdf-browser-viewer/pdf-browser-viewer.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(LrnsysPdf, [{
      key: "_computeDownloadLabel",

      /**
       * See if we should supply a label.
       */
      value: function _computeDownloadLabel(download) {
        if (download) {
          return "Download";
        } else {
          return null;
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_89e2dac0c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnsys-pdf";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrnsysPdf), "properties", this), {
          /**
           * Title prior to the PDF
           */
          title: {
            type: String,
            value: "lrnsys-pdf"
          },

          /**
           * Whether or not to present this as a card.
           */
          card: {
            type: Boolean,
            value: false
          },

          /**
           * Download Label.
           */
          downloadLabel: {
            type: String,
            computed: "_computeDownloadLabel(download)"
          },

          /**
           * Active Page
           */
          page: {
            type: String
          },

          /**
           * File to present
           */
          file: {
            type: String
          }
        });
      }
    }]);
    return LrnsysPdf;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.LrnsysPdf = LrnsysPdf;
  window.customElements.define(LrnsysPdf.tag, LrnsysPdf);
});