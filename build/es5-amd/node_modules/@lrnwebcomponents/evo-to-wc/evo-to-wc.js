define(["exports", "require"], function (_exports, _require) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EvoToWcConverter = _exports.EvoToWc = void 0;
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  /**
   * Copyright 2018 Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * evo-to-wc
   * Converts evolution content to web component equivalents
   *
   *
   * @demo ./demo/index.html Course Icons
   * @demo ./demo/tables.html Tables
   * @demo ./demo/callouts.html Callouts
   * @demo ./demo/images.html Images
   * @demo ./demo/nav.html Navigation
   * @element evo-to-wc
   */
  var EvoToWc = /*#__PURE__*/function () {
    function EvoToWc() {
      babelHelpers.classCallCheck(this, EvoToWc);
    }
    /**
     * Conversion function
     *
     * @param {object} [target=document.body] node to convert
     * @memberof EvoToWc
     */


    babelHelpers.createClass(EvoToWc, [{
      key: "courseicons",
      get:
      /**
       * icon conversions
       *
       * @memberof EvoToWc
       */
      function get() {
        return {
          assessment: "assessment",
          brainstorm: "lightbulb-outline",
          casestudy: "work",
          discussion: "question-answer",
          email: "mail",
          game: "hardware:videogame-asset",
          group: "social:group",
          handson: "pan-tool",
          image: "image:image",
          mobile: "hardware:phone-android",
          presentation: "device:dvr",
          reading: "chrome-reader-mode",
          reflection: "lightbulb-outline",
          rss: "mdi-social:rss-box",
          selfcheck: "assignment-turned-in",
          survey: "assignment",
          transcript: "receipt",
          video: "av:movie",
          webresource: "language",
          written: "create",
          yammer: "lrn:assessment"
        };
      }
      /**
       * list of headings to simplify selectors
       *
       * @readonly
       * @static
       * @memberof EvoToWc
       */

    }, {
      key: "headings",
      get: function get() {
        return ["h1", "h2", "h3", "h4", "h5", "h6"];
      }
    }, {
      key: "convert",
      value: function convert() {
        var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.body;
        this.convertIfNeeded(target, [{
          selector: ".coursework",
          function: "convertIcons"
        }, {
          selector: ".graphme",
          function: "convertGraphmes"
        }, {
          selector: ".tablestyle,.tablestyle2,.tablestyle3",
          function: "convertTablestyles"
        }, {
          selector: ".tabbed-interface",
          function: "convertTabs"
        }, {
          selector: ".expandable,.accordion-interface",
          function: "convertCollapses"
        }, {
          selector: "figure",
          function: "convertFigures"
        }, {
          selector: "img.gif-player",
          function: "convertGifs"
        }, {
          selector: ".image-thumbnail, .dynamic-image-group,.wcslideplayer, .clickable-list",
          function: "convertGalleries"
        }, {
          selector: ".newcolorbox,.colorbox,.pulltext,.yellownote,.speechbubble",
          function: "convertCards"
        }]);
      }
      /**
       * runs conversion function on each matching element
       *
       * @param {object} target node to convert
       * @param {array} [conversions=[]] matching objects to convert
       * @memberof EvoToWc
       */

    }, {
      key: "convertIfNeeded",
      value: function convertIfNeeded(target) {
        var _this = this;

        var conversions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        conversions.forEach(function (conversion) {
          var nodes = target.querySelectorAll(conversion.selector);
          if (nodes.length > 0) _this[conversion.function](nodes, target);
        });
      }
      /**
       * Converts Evo .accordion-interface to a11y-collapse-group
       *
       * @param {array} [accordions = []] array of accordions
       * @memberof EvoToWc
       */

    }, {
      key: "convertAccordions",
      value: function convertAccordions() {
        var _this2 = this;

        var accordions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        new Promise(function (res, rej) {
          return _require.default(["../a11y-collapse/lib/a11y-collapse-group.js"], res, rej);
        });
        accordions.forEach(function (accordion) {
          var group = document.createElement("a11y-collapse-group"),
              children = babelHelpers.toConsumableArray(accordion.childNodes),
              collapse;
          group.radio = true;
          group.headingButton = true;
          children.forEach(function (child) {
            if (_this2.isHeading(child)) {
              collapse = document.createElement("a11y-collapse");
              child.slot = "heading";
              collapse.headingButton = true;
              collapse.append(child);
              group.append(collapse);
            } else if (collapse) {
              collapse.append(child);
            }
          });
          accordion.parentElement.insertBefore(group, accordion);
          accordion.remove();
        });
      }
      /**
       * Conversions to accent-card
       *
       * @param {array} [nodes=[]] macthing nodes to convert
       * @param {object} target node to convert
       * @memberof EvoToWc
       */

    }, {
      key: "convertCards",
      value: function convertCards() {
        var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var target = arguments.length > 1 ? arguments[1] : undefined;
        new Promise(function (res, rej) {
          return _require.default(["../accent-card/accent-card.js"], res, rej);
        });
        this.convertIfNeeded(target, [{
          selector: ".newcolorbox",
          function: "convertNewcolorboxes"
        }, {
          selector: ".colorbox",
          function: "convertColorboxes"
        }, {
          selector: ".pulltext",
          function: "convertPulltexts"
        }, {
          selector: ".yellownote",
          function: "convertYellownotes"
        }, {
          selector: ".speechbubble",
          function: "convertSpeechbubbles"
        }]);
      }
      /**
       * Converts Evo carousels to lrndesign-gallery carousels
       *
       * @param {array} [carousels=[]]
       * @memberof EvoToWc
       */

    }, {
      key: "convertCarousels",
      value: function convertCarousels() {
        var _this3 = this;

        var carousels = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        carousels.forEach(function (group) {
          var gallery = document.createElement("lrndesign-gallery"),
              items = group.querySelectorAll("figure");
          gallery.layout = "carousel";
          gallery.accentColor = "light-blue";
          items.forEach(function (item) {
            return gallery.append(_this3.slotGallery(item));
          });
          group.parentNode.insertBefore(gallery, group);
          group.remove();
        });
      }
      /**
       * Converts Evo expandables and accordions to a11y-collapse
       *
       * @param {array} [nodes=[]] macthing nodes to convert
       * @param {object} target node to convert
       * @memberof EvoToWc
       */

    }, {
      key: "convertCollapses",
      value: function convertCollapses() {
        var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var target = arguments.length > 1 ? arguments[1] : undefined;
        new Promise(function (res, rej) {
          return _require.default(["../a11y-collapse/a11y-collapse.js"], res, rej);
        });
        this.convertIfNeeded(target, [{
          selector: ".expandable",
          function: "convertExpandables"
        }, {
          selector: ".accordion-interface",
          function: "convertAccordions"
        }]);
      }
      /**
       * Converts Evo .colorbox to accent-card
       *
       * @param {array} [cards=[]] array of colorboxes
       * @memberof EvoToWc
       */

    }, {
      key: "convertColorboxes",
      value: function convertColorboxes() {
        var _this4 = this;

        var cards = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        cards.forEach(function (box) {
          var card = document.createElement("accent-card");
          card.accentColor = "light-blue";

          _this4.replace(box, card, _this4.slotAccentCard);
        });
      }
      /**
       * Converts Evo .expandable to a11y-collapse
       *
       * @param {*} [expandables=[]] array fo expandables
       * @memberof EvoToWc
       */

    }, {
      key: "convertExpandables",
      value: function convertExpandables() {
        var expandables = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        expandables.forEach(function (expandable) {
          var collapse = document.createElement("a11y-collapse"),
              collapseable = expandable.querySelector(".collapseable"),
              content = collapseable ? babelHelpers.toConsumableArray(expandable.querySelector(".collapseable").childNodes) : [],
              expandcollapse = expandable.querySelector(".expandcollapse"),
              heading = document.createElement("span"),
              nodes = expandcollapse ? babelHelpers.toConsumableArray(expandcollapse.childNodes) : [];
          nodes.forEach(function (node) {
            return heading.append(node);
          });
          expandcollapse.parentNode.insertBefore(heading, expandcollapse);

          while (heading.parentNode && heading.parentNode !== expandable) {
            heading = heading.parentNode;
          }

          heading.slot = "heading";
          collapse.headingButton = true;
          collapse.append(heading);
          content.forEach(function (node) {
            return collapse.append(node);
          });
          expandable.parentNode.insertBefore(collapse, expandable);
          expandable.remove();
        });
      }
      /**
       * Converts Evo figure and .image-info to a11y-figure
       *
       * @param {*} [figures=[]] array of figures
       * @memberof EvoToWc
       */

    }, {
      key: "convertFigures",
      value: function convertFigures() {
        var _this5 = this;

        var figures = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        new Promise(function (res, rej) {
          return _require.default(["../a11y-figure/a11y-figure.js"], res, rej);
        });
        figures.forEach(function (figure) {
          var figcaption = figure.querySelector("figcaption"),
              a11y = document.createElement("a11y-figure"),
              image = figure.querySelector("img"),
              nodes,
              details,
              summary;

          if (figcaption && figure.classList.contains("image-info")) {
            nodes = babelHelpers.toConsumableArray(figcaption.childNodes);

            _this5.setSize(image, a11y);

            details = document.createElement("details");
            summary = document.createElement("summary");
            summary.innerHTML = "info";
            details.append(summary);
            nodes.forEach(function (node) {
              return details.append(node);
            });
            figcaption.append(details);
            figure.classList.remove("image-info");
          }

          figure.parentElement.insertBefore(a11y, figure);
          a11y.append(figure);
        });
      }
      /**
       * Converts Evo .gif-player into a11y-gif-player
       *
       * @param {*} [gifs=[]] array of gif players
       * @memberof EvoToWc
       */

    }, {
      key: "convertGifs",
      value: function convertGifs() {
        var _this6 = this;

        var gifs = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        new Promise(function (res, rej) {
          return _require.default(["../a11y-gif-player/a11y-gif-player.js"], res, rej);
        });
        gifs.forEach(function (image) {
          var player = document.createElement("a11y-gif-player"),
              src = image.src || "";

          _this6.setSize(image, player);

          _this6.setSize(image, player, "height");

          player.src = src;
          player.srcWithoutAnimation = src.replace(/\.\w+$/, ".gif");
          image.parentElement.insertBefore(player, image);
          image.remove();
        });
      }
      /**
       * Conversions to lrndesign-gallery
       *
       * @param {array} [nodes=[]] macthing nodes to convert
       * @param {object} target node to convert
       * @memberof EvoToWc
       */

    }, {
      key: "convertGalleries",
      value: function convertGalleries() {
        var nodes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        var target = arguments.length > 1 ? arguments[1] : undefined;
        new Promise(function (res, rej) {
          return _require.default(["../lrndesign-gallery/lrndesign-gallery.js"], res, rej);
        });
        this.convertIfNeeded(target, [{
          selector: ".image-thumbnail",
          function: "convertThumbnails"
        }, {
          selector: ".dynamic-image-group,.wcslideplayer",
          function: "convertCarousels"
        }, {
          selector: ".clickable-list",
          function: "convertImageLists"
        }]);
      }
      /**
       * Converts Evo .graphme to lrndesign-charts
       *
       * @param {*} [graphmes=[]] array of graphmes
       * @memberof EvoToWc
       */

    }, {
      key: "convertGraphmes",
      value: function convertGraphmes() {
        var _this7 = this;

        var graphmes = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        new Promise(function (res, rej) {
          return _require.default(["../lrndesign-chart/lib/lrndesign-bar.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../lrndesign-chart/lib/lrndesign-line.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../lrndesign-chart/lib/lrndesign-pie.js"], res, rej);
        });
        graphmes.forEach(function (graphme) {
          ["bar", "line", "pie"].forEach(function (type) {
            return _this7.insertChart(graphme, type);
          });
          if (!graphme.classList.contains("showtable")) graphme.remove();
          graphme.classList.remove("graphme");
        });
      }
      /**
       * Converts Evo .courseicon to simple-icon-lite
       *
       * @param {object} target node to convert
       * @memberof EvoToWc
       */

    }, {
      key: "convertIcons",
      value: function convertIcons(nodes, target) {
        var _this8 = this;

        new Promise(function (res, rej) {
          return _require.default(["../hax-iconset/lib/simple-hax-iconset.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../simple-icon/lib/simple-icon-lite.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../simple-icon/lib/simple-icons.js"], res, rej);
        });
        Object.keys(this.courseicons).forEach(function (key) {
          target.querySelectorAll(".coursework.".concat(key)).forEach(function (evoicon) {
            var child = evoicon.firstElementChild,
                icon = document.createElement("simple-icon-lite");
            icon.icon = _this8.courseicons[key];
            icon.style.marginRight = "0.25em";
            child.insertBefore(icon, child.firstChild);
            evoicon.classList.remove("coursework");
            evoicon.classList.remove(key);
          });
        });
      }
      /**
       * Converts Evo .clickable-list to .lrndesign-gallery
       *
       * @param {*} [lists=[]]
       * @memberof EvoToWc
       */

    }, {
      key: "convertImageLists",
      value: function convertImageLists() {
        var _this9 = this;

        var lists = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        lists.forEach(function (list) {
          var gallery = document.createElement("lrndesign-gallery"),
              items = list.querySelectorAll("li");
          gallery.layout = "grid";
          gallery.accentColor = "light-blue";
          items.forEach(function (item) {
            return gallery.append(_this9.slotGallery(item));
          });
          list.parentNode.insertBefore(gallery, list);
          list.remove();
        });
      }
      /**
       * Converts Evo .newcolorbox to accent-card
       *
       * @param {array} [cards=[]] array of newcolorboxes
       * @memberof EvoToWc
       */

    }, {
      key: "convertNewcolorboxes",
      value: function convertNewcolorboxes() {
        var _this10 = this;

        var cards = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        cards.forEach(function (box) {
          var card = document.createElement("accent-card");
          card.noBorder = true;
          card.flat = true;

          _this10.replace(box, card, _this10.slotAccentCard);
        });
      }
      /**
       * Converts Evo .pulltext to accent-card
       *
       * @param {array} [cards=[]] array of pulltexts
       * @memberof EvoToWc
       */

    }, {
      key: "convertPulltexts",
      value: function convertPulltexts() {
        var _this11 = this;

        var cards = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        cards.forEach(function (box) {
          var card = document.createElement("accent-card");
          card.accentColor = "light-blue";
          card.horizontal = true;

          _this11.replace(box, card, _this11.slotAccentCard);
        });
      }
      /**
       * Converts Evo .speechbubble to accent-card
       *
       * @param {array} [cards=[]] array of speechbubbles
       */

    }, {
      key: "convertSpeechbubbles",
      value: function convertSpeechbubbles() {
        var _this12 = this;

        var cards = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        cards.forEach(function (box) {
          var card = document.createElement("accent-card"),
              afterBox = box.nextElementSibling;
          card.accentColor = "light-blue";
          card.horizontal = true;

          _this12.replace(box, card, _this12.slotAccentCard);

          if (afterBox.classList.contains("speechbubble-caption")) {
            afterBox.slot = "footer";
            afterBox.style.fontSize = "85%";
            afterBox.classList.remove("speechbubble-caption");
            card.append(afterBox);
            afterBox.style.textAlign = "right";
          }
        });
      }
      /**
       * Converts Evo .tabbed-interface to a11y-tabs
       *
       * @param {array} [tabbed=[]] array of tabbed interfaces
       * @memberof EvoToWc
       */

    }, {
      key: "convertTabs",
      value: function convertTabs() {
        var _this13 = this;

        var tabbed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
        new Promise(function (res, rej) {
          return _require.default(["../a11y-tabs/a11y-tabs.js"], res, rej);
        });
        tabbed.forEach(function (tabs) {
          var a11ytabs = document.createElement("a11y-tabs");

          _this13.replace(tabs, a11ytabs, _this13.slotTabs.bind(_this13));
        });
      }
      /**
       * Converts Evo .tablestyle to editable-table
       *
       * @param {array} [tabbed=[]] array of tables
       * @memberof EvoToWc
       */

    }, {
      key: "convertTablestyles",
      value: function convertTablestyles(tablestyles) {
        new Promise(function (res, rej) {
          return _require.default(["../editable-table/editable-table.js"], res, rej);
        });
        tablestyles.forEach(function (table) {
          var editable = document.createElement("editable-table");
          editable.bordered = table.classList.contains("dottedrows") || table.classList.contains("dottedcols") || table.classList.contains("linedrows") || table.classList.contains("linedcols");
          editable.columnStriped = table.classList.contains("alternatecols");
          editable.striped = !editable.columnStriped && table.classList.contains("alternaterows");
          table.parentElement.insertBefore(editable, table);
          table.classList.remove("tablestyle");
          table.classList.remove("tablestyle2");
          table.classList.remove("tablestyle3");
          editable.append(table);
        });
      }
      /**
       * Converts Evo .image-thumbnail to lrndesign-gallery
       *
       * @param {array} [images=[]] array of images
       * @memberof EvoToWc
       */

    }, {
      key: "convertThumbnails",
      value: function convertThumbnails(images) {
        images.forEach(function (image) {
          var gallery = document.createElement("lrndesign-gallery"),
              src = image.src,
              thumb = src.match("_thumb.") ? src : undefined,
              large = thumb ? thumb.replace(/_thumb\./, "_full.") : undefined;
          gallery.innerHTML = "<figure><img src=\"".concat(src, "\" ").concat(thumb ? "" : "", "></figure>"), parent = image.parentElement;
          gallery.layout = "masonry";
          gallery.accentColor = "light-blue";
          gallery.sources = [{
            alt: image.alt || "",
            details: "",
            src: src,
            thumbnail: thumb,
            large: large,
            sizing: "contain",
            title: image.alt || ""
          }];
          gallery.style.display = "inline-block";
          gallery.style.width = "50%";
          gallery.style.minWidth = "400px";
          gallery.style.maxWidth = "800px";
          image.parentNode.insertBefore(gallery, image);
          image.remove();

          if (parent && parent.tagName.toLowerCase() == "figure") {
            parent.style.display = "flex";
            parent.style.flexDirection = "column";
            parent.style.alignItems = "stretch";
          }
        });
      }
      /**
       * Converts Evo .yellownote to accent-card
       *
       * @param {array} [cards=[]] array of yellow notes
       */

    }, {
      key: "convertYellownotes",
      value: function convertYellownotes(cards) {
        var _this14 = this;

        cards.forEach(function (box) {
          var card = document.createElement("accent-card");
          card.accentColor = "yellow";
          card.accentBackground = true;
          card.noBorder = true;

          _this14.replace(box, card, _this14.slotAccentCard);
        });
      }
      /**
       * Inserts an lnmdesign-chart based on table
       *
       * @param {object} table
       * @param {string} [type="bar"] chart type
       * @memberof EvoToWc
       */

    }, {
      key: "insertChart",
      value: function insertChart(table) {
        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "bar";
        var newTable = document.createElement("table"),
            chart = table.classList.contains("".concat(type, "chart")) ? document.createElement("lrndesign-".concat(type)) : undefined;

        if (chart) {
          chart.scale = "ct-octave";
          babelHelpers.toConsumableArray(table.childNodes).forEach(function (node) {
            return newTable.append(node.cloneNode(true));
          });
          chart.append(newTable);
          if (type !== "pie") chart.showGridBackground = true;
          if (type === "line") chart.fullWidth = true;
          table.parentNode.insertBefore(chart, table);
        }
      }
      /**
       * determines if a node is a heading
       *
       * @param {object} el node
       * @returns {boolean}
       * @memberof EvoToWc
       */

    }, {
      key: "isHeading",
      value: function isHeading(el) {
        return el && el.tagName && this.headings.includes(el.tagName.toLowerCase());
      }
      /**
       * replaces an Evo Element with a Hax Element
       *
       * @param {*} oldElem
       * @param {*} newElem
       * @param {*} childrenCallback
       * @returns
       * @memberof EvoToWc
       */

    }, {
      key: "replace",
      value: function replace(oldElem, newElem, childrenCallback) {
        oldElem.parentElement.insertBefore(newElem, oldElem);
        var children = babelHelpers.toConsumableArray(oldElem.childNodes);
        children.forEach(function (child) {
          child = childrenCallback ? childrenCallback(child) : child;
          if (child) newElem.append(child);
        });
        oldElem.remove();
        return newElem;
      }
      /**
       * sets size of one element based on image size
       *
       * @param {object} image
       * @param {object} elem
       * @param {string} type "width" or "height"
       * @memberof EvoToWc
       */

    }, {
      key: "setSize",
      value: function setSize(image, elem) {
        var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "width";
        var amt = "".concat(image[type]);

        if (amt) {
          if (amt.match(/\d$/)) amt = "".concat(amt, "px");
          elem.style[type] = amt;
        }
      }
      /**
       * gets a slot on an accent card node
       *
       * @param {object} node
       * @returns {object}
       * @memberof EvoToWc
       */

    }, {
      key: "slotAccentCard",
      value: function slotAccentCard(node) {
        if (node && node.tagName) {
          if (this.isHeading(node)) {
            node.slot = "heading";
          } else {
            node.slot = "content";
          }
        } else {
          var span = document.createElement("span");
          span.append(node);
          span.slot = "content";
          node = span;
        }

        return node;
      }
      /**
       * gets slotted figure to lrndesign-gallery
       *
       * @param {object} item node containing an image
       * @returns {object}
       * @memberof EvoToWc
       */

    }, {
      key: "slotGallery",
      value: function slotGallery(item) {
        var figure = document.createElement("figure"),
            figcaption = document.createElement("figcaption"),
            img = item.firstElementChild.querySelector("img") || item.querySelector("img"),
            siblings = item.querySelector("figcaption") ? babelHelpers.toConsumableArray(item.querySelector("figcaption").childNodes) : babelHelpers.toConsumableArray(item.childNodes),
            heading = item.querySelector(this.headings.join());

        if (img) {
          img.removeAttribute("width");
          img.removeAttribute("height");
          figure.append(img);
        }

        if (!heading) {
          heading = document.createElement("h3");
          if (img) heading.innerHTML = img.alt;
        }

        figcaption.append(heading);
        siblings.forEach(function (sibling) {
          if (sibling != item.firstElementChild) {
            figcaption.append(sibling);
          }
        });
        figure.append(figcaption);
        return figure;
      }
      /**
       * gets a tab for a11y-tabs
       *
       * @param {object} tab
       * @returns {object}
       * @memberof EvoToWc
       */

    }, {
      key: "slotTabs",
      value: function slotTabs(tab) {
        if (tab && tab.tagName) {
          var a11ytab = document.createElement("a11y-tab");
          a11ytab.id = tab.id;

          if (tab.firstElementChild) {
            tab.firstElementChild.slot = "label";
            a11ytab.append(tab.firstElementChild);
          } else if (tab.firstChild) {
            var span = document.createElement("span");
            span.slot = "label";
            span.append(tab);
            a11ytab.append(span);
          } else {
            a11ytab.label = a11ytab.id;
          }

          this.replace(tab, a11ytab);
          return a11ytab;
        }

        return false;
      }
    }]);
    return EvoToWc;
  }(); // register global bridge on window if needed


  _exports.EvoToWc = EvoToWc;
  window.EvoToWc = window.EvoToWc || {};

  window.EvoToWc.requestAvailability = function () {
    if (!window.EvoToWc.instance) {
      window.EvoToWc.instance = new EvoToWc();
    }

    window.dispatchEvent(new CustomEvent("register-hax-converter", {
      bubbles: true,
      composed: true,
      cancelable: true,
      detail: window.EvoToWc.instance.convert
    }));
    return window.EvoToWc.instance;
  };

  var EvoToWcConverter = window.EvoToWc.requestAvailability();
  _exports.EvoToWcConverter = EvoToWcConverter;
});