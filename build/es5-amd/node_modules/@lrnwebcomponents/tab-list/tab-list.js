define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../hax-body-behaviors/lib/HAXWiring.js"], function (_exports, _require, _polymerElement, _renderStatus, _HAXWiring) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TabList = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_6e44eda0b54611e9b6ba27231b6f684a() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          margin: 0 auto;\n          list-style: none;\n          display: block;\n          padding: 16px;\n          border-bottom: 1px solid black;\n        }\n        paper-tabs {\n          align-items: center;\n          justify-items: center;\n        }\n        paper-tab a {\n          text-decoration: none;\n          flex: unset;\n          height: unset;\n          width: 100%;\n          text-align: center;\n        }\n        paper-button {\n          text-transform: unset;\n          width: 100%;\n          display: block;\n          min-width: unset;\n          margin: 0;\n          text-overflow: ellipsis;\n          overflow: hidden;\n        }\n        @media screen and (max-width: 600px) {\n          paper-tab {\n            display: block;\n          }\n        }\n      </style>\n      <paper-tabs>\n        <template is=\"dom-repeat\" items=\"[[tabs]]\" as=\"tab\">\n          <paper-tab>\n            <a target=\"_blank\" href=\"[[tab.link]]\" tabindex=\"-1\">\n              <paper-button raised>[[tab.label]]</paper-button>\n            </a>\n          </paper-tab>\n        </template>\n      </paper-tabs>\n    "]);

    _templateObject_6e44eda0b54611e9b6ba27231b6f684a = function _templateObject_6e44eda0b54611e9b6ba27231b6f684a() {
      return data;
    };

    return data;
  }

  /**
   * `tab-list`
   * `A simple listing of tabed links / items`
   * @demo demo/index.html
   */
  var TabList =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(TabList, _PolymerElement);

    function TabList() {
      var _this;

      babelHelpers.classCallCheck(this, TabList);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TabList).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-tabs/paper-tabs.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-tabs/paper-tab.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      (0, _renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this), function () {
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(TabList.haxProperties, TabList.tag, this);
      });
      return _this;
    }

    babelHelpers.createClass(TabList, [{
      key: "_valueChanged",

      /**
       * Notice an array has changed and update the DOM.
       */
      value: function _valueChanged(e) {
        for (var i in e.base) {
          for (var j in e.base[i]) {
            this.notifyPath("tabs." + i + "." + j);
          }
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6e44eda0b54611e9b6ba27231b6f684a());
      }
    }, {
      key: "tag",
      get: function get() {
        return "tab-list";
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_valueChanged(tabs.*)"];
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * List of tabs
           */
          tabs: {
            type: Array,
            value: [],
            notify: true
          }
        };
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: false,
          gizmo: {
            title: "Tabs",
            description: "A list of links as tabs.",
            icon: "icons:tab",
            color: "grey",
            groups: ["Presentation", "Links"],
            handles: [],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "tabs",
              title: "Tabs",
              description: "Listing of tabs",
              inputMethod: "array",
              itemLabel: "label",
              properties: [{
                property: "link",
                title: "Link",
                description: "link to go to",
                inputMethod: "textfield",
                required: true
              }, {
                property: "label",
                title: "Label",
                description: "text to place on the tab",
                inputMethod: "textfield",
                required: true
              }]
            }],
            advanced: []
          }
        };
      }
    }]);
    return TabList;
  }(_polymerElement.PolymerElement);

  _exports.TabList = TabList;
  window.customElements.define(TabList.tag, TabList);
});