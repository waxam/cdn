define(["exports", "../../lit-element/lit-element.js", "../hax-body-behaviors/lib/HAXWiring.js", "../a11y-details/a11y-details.js"], function (_exports, _litElement, _HAXWiring, _a11yDetails) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yFigure = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_478b1060d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        figure {\n          position: relative;\n        }\n        figcaption {\n          display: flex;\n          width: 100%;\n          align-items: center;\n          justify-content: space-between;\n          margin: var(--a11y-figure-figcaption-margin, 0);\n          padding: var(--a11y-figure-figcaption-padding, 0);\n          font-size: var(--a11y-figure-figcaption-fontSize, unset);\n          background-color: var(--a11y-figure-figcaption-backgroundColor, #fff);\n          color: var(--a11y-figure-figcaption-color, #000);\n        }\n        ::slotted([slot=\"figcaption\"]) {\n          margin: 0;\n        }\n        img,\n        ::slotted([slot=\"image\"]) {\n          width: 100%;\n        }\n      "]);

    _templateObject3_478b1060d34d11ea880ba1e93364c49c = function _templateObject3_478b1060d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject2_478b1060d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              <img src=\"", "\" alt=\"", "\" />\n            "]);

    _templateObject2_478b1060d34d11ea880ba1e93364c49c = function _templateObject2_478b1060d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_478b1060d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <figure>\n        ", "\n        <slot name=\"image\" ?hidden=\"", "\"></slot>\n        <figcaption>\n          <slot name=\"figcaption\"></slot>\n          <a11y-details\n            open-text=\"", "\"\n            close-text=\"", "\"\n          >\n            <div slot=\"summary\"><slot name=\"summary\"></slot></div>\n            <div slot=\"details\"><slot name=\"details\"></slot></div>\n            <slot name=\"figdetails\"></slot>\n          </a11y-details>\n        </figcaption>\n      </figure>\n      <slot hidden></slot>\n    "]);

    _templateObject_478b1060d34d11ea880ba1e93364c49c = function _templateObject_478b1060d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-figure`
   * accessible progressive disclosure with detail and summary
  ### Styling
  #### Figure Caption
  Custom property | Description | Default
  ----------------|-------------|----------
  --a11y-details-figcaption-fontSize | font-size | unset
  --a11y-details-figcaption-color | text color | #000
  --a11y-details-figcaption-backgroundColor | background-color | #fff
  --a11y-details-figcaption-margin | padding | 0
  --a11y-details-figcaption-padding | padding | 0
  
  #### Summary Button
  Custom property | Description | Default
  ----------------|-------------|----------
  --a11y-details-summary-fontSize | font-size | 0.8em
  --a11y-details-summary-color | text color | #000
  --a11y-details-summary-backgroundColor | background-color | #fff
  --a11y-details-summary-borderColor | border-color | #000
  --a11y-details-summary-borderWidth | border-width | 1px
  --a11y-details-summary-borderStyle | border-style | solid
  --a11y-details-summary-borderRadius | border-radius | 3px
  --a11y-details-summary-padding | padding | 0.5em
  
  #### Summary Button (:focus state)
  Custom property | Description | Default
  ----------------|-------------|----------
  --a11y-details-summary-focus-color | text color | #000
  --a11y-details-summary-focus-backgroundColor | background-color | #fff
  --a11y-details-summary-focus-borderColor | border-color | #000
  --a11y-details-summary-focus-borderWidth | border-width | 1px
  --a11y-details-summary-focus-borderStyle | border-style | dotted
  --a11y-details-summary-focus-borderRadius | border-radius | 3px
  
  #### Details
  Custom property | Description | Default
  ----------------|-------------|----------
  --a11y-details-fontSize | font-size  | 0.8em
  --a11y-details-color | text color | #000
  --a11y-details-backgroundColor | background-color | rgba(255,255,255,0.8)
  --a11y-details-borderColor | border-color | #000
  --a11y-details-borderWidth | border-width | 1px
  --a11y-details-borderStyle | border-style | solid
  --a11y-details-borderRadius | border-radius | 3px
  --a11y-details-padding | padding | 0.5em
  --a11y-details-maxHeight | max-height | 400px
   * @lit-html
   * @lit-element
   * @demo demo/index.html
   */
  var A11yFigure =
  /*#__PURE__*/
  function (_A11yDetails) {
    babelHelpers.inherits(A11yFigure, _A11yDetails);
    babelHelpers.createClass(A11yFigure, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_478b1060d34d11ea880ba1e93364c49c(), this.imgSrc ? (0, _litElement.html)(_templateObject2_478b1060d34d11ea880ba1e93364c49c(), this.imgSrc, this.imgAlt) : "", this.imgSrc, this.openText, this.closeText);
      } // haxProperty definition

    }, {
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      value: function tag() {
        return "a11y-figure";
      } // life cycle

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject3_478b1060d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Accessible Figure",
            description: "Accessible figure with long description",
            icon: "av:call-to-action",
            color: "grey",
            groups: ["11"],
            handles: [{
              type: "image",
              source: "imgSrc",
              alt: "imgAlt",
              caption: "figcaption",
              ariaDescribedby: "describedBy"
            }],
            meta: {
              author: "nikkimk",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "imgSrc",
              title: "Image",
              inputMethod: "haxupload"
            }, {
              property: "imgAlt",
              title: "Alt Text",
              inputMethod: "alt",
              required: true
            }, {
              slot: "figcaption",
              title: "Figure Caption",
              description: "Figure caption text that is always visible.",
              inputMethod: "code-editor"
            }, {
              slot: "details",
              title: "Decription",
              description: "Detailed image description that can be hidden or shown",
              inputMethod: "code-editor"
            }, {
              slot: "summary",
              title: "Decription Button",
              description: 'Default for button that shows/hides description text, eg. "info", "medatadata", etc. ',
              inputMethod: "code-editor"
            }],
            advanced: [{
              property: "openText",
              title: "Optional summary text when details are open",
              inputMethod: "textfield",
              required: false
            }, {
              property: "closeText",
              title: "Optional summary text when details are closed",
              inputMethod: "textfield",
              required: false
            }]
          },
          demoSchema: [{
            tag: "a11y-figure",
            properties: {
              imgSrc: "//placekitten.com/400/300",
              imgAlt: "random kitten",
              openText: "Show Description",
              closeText: "Hide Description",
              style: "max-width:400px"
            },
            content: '<h4 slot="figcaption">Random Kitten</h4>\n<div slot="summary">Image Description</div>\n<div slot="details">Aenean eget nisl volutpat, molestie purus eget, bibendum metus. Pellentesque magna velit, tincidunt quis pharetra id, gravida placerat erat. Maecenas id dui pretium risus pulvinar feugiat vel nec leo. Praesent non congue tellus. Suspendisse ac tincidunt purus. Donec eu dui a metus vehicula bibendum sed nec tortor. Nunc convallis justo sed nibh consectetur, at pharetra nulla accumsan.</div>'
          }]
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(A11yFigure), "properties", this), {
          imgSrc: {
            type: String,
            attribute: "img-src"
          },
          imgAlt: {
            type: String,
            attribute: "img-alt"
          }
        });
      }
    }]);

    function A11yFigure() {
      var _this;

      babelHelpers.classCallCheck(this, A11yFigure);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yFigure).call(this));
      _this.tag = A11yFigure.tag;
      return _this;
    }
    /**
     * mutation observer for a11y-details
     * @readonly
     * @returns {object}
     */


    babelHelpers.createClass(A11yFigure, [{
      key: "_updateElement",

      /**
       * updates an element based on changes in slot
       *
       * @memberof A11yDetails
       */
      value: function _updateElement() {
        var figure = this.querySelector("* > figure"),
            image = figure ? figure.querySelector("* > img") : undefined,
            figcaption = figure ? figure.querySelector("* > figcaption") : undefined;

        if (image) {
          (this.querySelectorAll("[slot=image]") || []).forEach(function (image) {
            return image.remove();
          });
          image.cloneNode();
          image.slot = "image";
          this.appendChild(image);
        }

        if (figcaption) {
          this._copyAndFilter(figcaption.cloneNode(true), ["figcaption", "details", "summary"]);
        }
      }
    }, {
      key: "_copyAndFilter",
      value: function _copyAndFilter(clone) {
        var nodenames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
        var i = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        var childname = nodenames[i + 1],
            child = clone && childname ? clone.querySelector("* > ".concat(childname)) : undefined;

        if (child) {
          this._copyAndFilter(child, nodenames, i + 1);

          Object.keys(child || {}).forEach(function (index) {
            return child[index].remove();
          });
        }

        this._copyToSlot(nodenames[i], clone);
      }
      /**
       * watches the element's slots for a <details/> element
       *
       * @param {object} mutationsList
       * @memberof A11yDetails
       */

    }, {
      key: "_watchChildren",
      value: function _watchChildren(mutationsList) {
        if (this._hasMutations(mutationsList)) {
          this._updateElement();

          this.figureObserver.observe(this.querySelector("* > figure"), {
            childList: true,
            subtree: true,
            characterData: true
          });
        } else if (this._hasMutations(mutationsList, "removedNodes") && !this.querySelector("* > figureObserver") && this.detailsObserver.disconnect) {
          this.detailsObserver.disconnect();
        }
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yFigure.prototype), "connectedCallback", this).call(this);
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(A11yFigure.haxProperties, A11yFigure.tag, this);
      }
    }, {
      key: "observer",
      get: function get() {
        var _this2 = this;

        var callback = function callback(mutationsList) {
          return _this2._watchChildren(mutationsList);
        };

        return new MutationObserver(callback);
      }
      /**
       * mutation observer for <details/> in unnamed slot
       * @readonly
       * @returns {object}
       */

    }, {
      key: "figureObserver",
      get: function get() {
        var _this3 = this;

        var callback = function callback() {
          return _this3._updateElement();
        };

        return new MutationObserver(callback);
      }
    }]);
    return A11yFigure;
  }(_a11yDetails.A11yDetails);

  _exports.A11yFigure = A11yFigure;
  customElements.define("a11y-figure", A11yFigure);
});