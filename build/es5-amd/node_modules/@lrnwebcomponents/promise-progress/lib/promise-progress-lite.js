define(["exports", "../../../lit/index.js"], function (_exports, _index) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.PromiseProgressLite = void 0;

  var _templateObject_35b70730ce4711ecb13bcf602138080f, _templateObject2_35b70730ce4711ecb13bcf602138080f, _templateObject3_35b70730ce4711ecb13bcf602138080f;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `promise-progress`
   * `An element to display the progress visually of forfilling an array of JS Promise objects`
   * @demo demo/basic.html Basic
   * @demo demo/index.html Fancy
   * @demo demo/wc-preload.html WC-Preloader
   * @element promise-progress
   */
  var PromiseProgressLite = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(PromiseProgressLite, _LitElement);

    var _super = _createSuper(PromiseProgressLite);

    /**
     * HTMLElement
     */
    function PromiseProgressLite() {
      var _this;

      babelHelpers.classCallCheck(this, PromiseProgressLite);
      _this = _super.call(this);
      _this.list = [];
      _this.value = 0;
      _this.max = 100;
      _this.showCount = false;
      _this.canLoad = false;
      return _this;
    }
    /**
     * LitElement style callback
     */


    babelHelpers.createClass(PromiseProgressLite, [{
      key: "render",
      value:
      /**
       * LitElement render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_35b70730ce4711ecb13bcf602138080f || (_templateObject_35b70730ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n      <progress\n        part=\"progress\"\n        max=\"", "\"\n        value=\"", "\"\n      ></progress>\n      ", "\n      <slot></slot>\n    "])), this.max, this.value, this.list && this.showCount ? (0, _index.html)(_templateObject2_35b70730ce4711ecb13bcf602138080f || (_templateObject2_35b70730ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["", " / ", ""])), this.value, this.max) : "");
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(PromiseProgressLite.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(PromiseProgressLite.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        this.loadingBar = this.shadowRoot.querySelector("progress");
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(PromiseProgressLite.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(PromiseProgressLite.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          // notify but only after we actually render
          if (["value", "max"].includes(propName) && _this2.shadowRoot) {
            _this2.dispatchEvent(new CustomEvent("".concat(propName, "-changed"), {
              detail: {
                value: _this2[propName]
              }
            }));
          } // ensure we are allowed to load things


          if (propName == "list" && _this2[propName] && _this2[propName].length > 0 && _this2.max !== _this2.value) {
            _this2.canLoad = true;
          }
        });
      } // process the array of functions returning Promises

    }, {
      key: "process",
      value: function () {
        var _process = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
          var _this3 = this;

          var list, count, promises;
          return regeneratorRuntime.wrap(function _callee2$(_context2) {
            while (1) {
              switch (_context2.prev = _context2.next) {
                case 0:
                  list = this.list;

                  if (!this.canLoad) {
                    _context2.next = 8;
                    break;
                  }

                  count = 0;
                  _context2.next = 5;
                  return list.map( /*#__PURE__*/function () {
                    var _ref = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(item) {
                      return regeneratorRuntime.wrap(function _callee$(_context) {
                        while (1) {
                          switch (_context.prev = _context.next) {
                            case 0:
                              _context.next = 2;
                              return item().then(function (res) {
                                count = count + 1;
                                _this3.value = Math.round(count / _this3.list.length * 100);
                                _this3.loadingBar.textContent = "Loading ".concat(_this3.value, " of ").concat(_this3.max);
                                resolve(res);
                              }).catch(function (err) {
                                // an error occured
                                reject(err);
                              });

                            case 2:
                              return _context.abrupt("return", _context.sent);

                            case 3:
                            case "end":
                              return _context.stop();
                          }
                        }
                      }, _callee);
                    }));

                    return function (_x) {
                      return _ref.apply(this, arguments);
                    };
                  }());

                case 5:
                  promises = _context2.sent;
                  _context2.next = 8;
                  return Promise.allSettled(promises).then(function () {
                    _this3.loadingBar.textContent = "Loading Finished";
                    _this3.value = _this3.max;
                    setTimeout(function () {
                      _this3.dispatchEvent(new CustomEvent("promise-progress-finished", {
                        detail: {
                          value: true
                        }
                      }));
                    }, 100);
                  });

                case 8:
                case "end":
                  return _context2.stop();
              }
            }
          }, _callee2, this);
        }));

        function process() {
          return _process.apply(this, arguments);
        }

        return process;
      }()
    }], [{
      key: "tag",
      get:
      /**
       * Convention we use
       */
      function get() {
        return "promise-progress-lite";
      }
    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];

        if (babelHelpers.get(babelHelpers.getPrototypeOf(PromiseProgressLite), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(PromiseProgressLite), "styles", this);
        }

        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject3_35b70730ce4711ecb13bcf602138080f || (_templateObject3_35b70730ce4711ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          position: relative;\n        }\n      "])))]);
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(PromiseProgressLite), "properties", this)), {}, {
          max: {
            type: Number
          },
          value: {
            type: Number,
            reflect: true
          },
          list: {
            type: Array
          },
          showCount: {
            type: Boolean,
            attribute: "show-count"
          },
          canLoad: {
            type: Boolean
          }
        });
      }
    }]);
    return PromiseProgressLite;
  }(_index.LitElement);

  _exports.PromiseProgressLite = PromiseProgressLite;
  customElements.define(PromiseProgressLite.tag, PromiseProgressLite);
});