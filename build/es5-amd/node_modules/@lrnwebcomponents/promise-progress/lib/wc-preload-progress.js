define(["exports", "../../wc-autoload/wc-autoload.js", "../promise-progress.js"], function (_exports, _wcAutoload, _promiseProgress) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WCPreloadProgress = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `promise-progress`
   * `layer on top of promise progress with specific integration with the WC Autoloader registry`
   * @element wc-preload-progress
   */
  var WCPreloadProgress = /*#__PURE__*/function (_PromiseProgress) {
    babelHelpers.inherits(WCPreloadProgress, _PromiseProgress);

    var _super = _createSuper(WCPreloadProgress);

    function WCPreloadProgress() {
      var _this;

      babelHelpers.classCallCheck(this, WCPreloadProgress);
      _this = _super.call(this);
      _this.wcList = [];
      _this.registry = window.DynamicImportRegistry.requestAvailability();
      return _this;
    }

    babelHelpers.createClass(WCPreloadProgress, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(WCPreloadProgress.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(WCPreloadProgress.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "wcList" && _this2.wcList.length > 0) {
            var list = [];

            _this2.wcList.map(function (item) {
              return list.push(function () {
                return _this2.registry.loadDefinition(item);
              });
            });

            _this2.list = list;
          }
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "wc-preload-progress";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(WCPreloadProgress), "properties", this)), {}, {
          wcList: {
            type: Array
          }
        });
      }
    }]);
    return WCPreloadProgress;
  }(_promiseProgress.PromiseProgress);

  _exports.WCPreloadProgress = WCPreloadProgress;
  customElements.define(WCPreloadProgress.tag, WCPreloadProgress);
});