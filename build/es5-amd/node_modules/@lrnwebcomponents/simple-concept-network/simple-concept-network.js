define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../simple-colors/lib/simple-colors-polymer.js", "../a11y-behaviors/a11y-behaviors.js"], function (_exports, _require, _polymerElement, _simpleColorsPolymer, _a11yBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleConceptNetwork = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_8bb6d770c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles-polymer\">\n        :host {\n          display: block;\n        }\n        :host([visualization=\"network\"]) simple-concept-network-node {\n          position: relative;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(1) {\n          top: 150px;\n          left: 176px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(2) {\n          top: 0px;\n          left: 60px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(3) {\n          top: 75px;\n          left: 60px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(4) {\n          top: 230px;\n          left: -56px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(5) {\n          top: 300px;\n          left: -282px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(6) {\n          top: 230px;\n          left: -515px;\n        }\n        :host([visualization=\"network\"])\n          simple-concept-network-node:nth-child(7) {\n          top: 75px;\n          left: -630px;\n        }\n        :host([visualization=\"network\"]) {\n          display: block;\n          min-height: 450px;\n        }\n      </style>\n      <template is=\"dom-repeat\" items=\"[[nodes]]\" as=\"node\">\n        <simple-concept-network-node\n          accent-color$=\"[[node.color]]\"\n          colored-text$=\"[[coloredText]]\"\n          dark$=\"[[dark]]\"\n          visualization$=\"[[visualization]]\"\n          src$=\"[[node.src]]\"\n          icon$=\"[[node.icon]]\"\n          image$=\"[[node.image]]\"\n          label$=\"[[node.label]]\"\n          disabled$=\"[[node.disabled]]\"\n        ></simple-concept-network-node>\n      </template>\n    "]);

    _templateObject_8bb6d770c96f11ea8be5e1d5fe7ec787 = function _templateObject_8bb6d770c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
  `simple-concept-network`
  A small but effective little data visualizer for topics surrounding
  a central concept, much like the ELMS:LN snowflake icon.
  * @demo demo/index.html
  @microcopy - the mental model for this element
   - ELMS:LN - The ELMS: Learning Network "snowflake" is a network diagram
  */
  var SimpleConceptNetwork =
  /*#__PURE__*/
  function (_A11yBehaviors) {
    babelHelpers.inherits(SimpleConceptNetwork, _A11yBehaviors);

    function SimpleConceptNetwork() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleConceptNetwork);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleConceptNetwork).call(this));
      new Promise(function (res, rej) {
        return _require.default(["./lib/simple-concept-network-node.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(SimpleConceptNetwork, [{
      key: "_valueChanged",

      /**
       * Notice an answer has changed and update the DOM.
       */
      value: function _valueChanged(e) {
        for (var i in e.base) {
          for (var j in e.base[i]) {
            this.notifyPath("nodes." + i + "." + j);
          }
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_8bb6d770c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-concept-network";
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_valueChanged(nodes.*)"];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleConceptNetwork), "properties", this), {
          /**
           * Type of visualization
           */
          visualization: {
            type: String,
            reflectToAttribute: true,
            value: "3d"
          },

          /**
           * disabled status
           */
          disabled: {
            type: Boolean
          },

          /**
           * Apply color to text / icon instead of background.
           */
          coloredText: {
            type: Boolean,
            reflectToAttribute: true,
            value: false
          },

          /**
           * List of nodes to template stamp out
           */
          nodes: {
            type: Array,
            value: [],
            notify: true
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Concept Network",
            description: "A simple way of visualizing data in a small network style configuration.",
            icon: "lrn:network",
            color: "blue",
            groups: ["Image", "Visualization"],
            handles: [{
              type: "image",
              source: "nodes.source",
              title: "nodes.label",
              link: "nodes.src",
              description: "nodes.description"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "visualization",
              title: "Visualization",
              description: "How to visualize the concept",
              inputMethod: "select",
              options: {
                "3d": "3d plain",
                network: "network",
                flat: "flat"
              }
            }, {
              property: "dark",
              title: "Dark",
              description: "Use dark theme",
              inputMethod: "boolean",
              icon: "invert-colors"
            }, {
              property: "coloredText",
              title: "Colored Text / Icon",
              description: "Apply color to text / icon instead of background.",
              inputMethod: "boolean",
              icon: "editor:format-color-text"
            }, {
              property: "nodes",
              title: "Node list",
              description: "List of the items to present in the visual",
              inputMethod: "array",
              itemLabel: "label",
              properties: [{
                property: "color",
                title: "Node color",
                description: "Select the accent color for this node",
                inputMethod: "colorpicker",
                icon: "editor:format-color-fill"
              }, {
                property: "icon",
                title: "Icon",
                description: "icon to display in the middle",
                inputMethod: "iconpicker",
                options: []
              }, {
                property: "label",
                title: "Label",
                description: "Label",
                inputMethod: "textfield"
              }, {
                property: "image",
                title: "Image",
                description: "Image for the background",
                inputMethod: "textfield",
                validationType: "url"
              }, {
                property: "description",
                title: "Description",
                description: "A longer description that can be used as part of a modal presentation",
                inputMethod: "textfield"
              }, {
                property: "src",
                title: "Link",
                description: "Label",
                inputMethod: "textfield",
                validationType: "url"
              }]
            }],
            advanced: []
          }
        };
      }
    }]);
    return SimpleConceptNetwork;
  }((0, _a11yBehaviors.A11yBehaviors)(_simpleColorsPolymer.SimpleColorsPolymer));

  _exports.SimpleConceptNetwork = SimpleConceptNetwork;
  window.customElements.define(SimpleConceptNetwork.tag, SimpleConceptNetwork);
});