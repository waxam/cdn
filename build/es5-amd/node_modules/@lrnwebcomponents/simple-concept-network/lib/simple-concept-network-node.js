define(["exports", "require", "../../../@polymer/polymer/polymer-element.js", "../../simple-colors/lib/simple-colors-polymer.js"], function (_exports, _require, _polymerElement, _simpleColorsPolymer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleConceptNetworkNode = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_6cec00d0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles-polymer\">\n        :host {\n          display: inline-flex;\n          --simple-concept-network-color: var(\n            --simple-colors-default-theme-grey-12\n          );\n          --simple-concept-network-bg: var(\n            --simple-colors-default-theme-accent-5\n          );\n        }\n        :host([colored-text]) {\n          --simple-concept-network-bg: var(\n            --simple-colors-default-theme-grey-1\n          );\n          --simple-concept-network-color: var(\n            --simple-colors-default-theme-accent-8\n          );\n        }\n        paper-button {\n          -webkit-transition: 0.6s transform ease-in-out;\n          transition: 0.6s transform ease-in-out;\n          -webkit-clip-path: polygon(\n            50% 0%,\n            100% 25%,\n            100% 75%,\n            50% 100%,\n            0% 75%,\n            0% 25%\n          );\n          clip-path: polygon(\n            50% 0%,\n            100% 25%,\n            100% 75%,\n            50% 100%,\n            0% 75%,\n            0% 25%\n          );\n          color: var(--simple-concept-network-color);\n        }\n        :host([visualization=\"network\"]) paper-button:hover,\n        :host([visualization=\"network\"]) paper-button:focus {\n          opacity: 0.8;\n        }\n        :host([visualization=\"3d\"]) paper-button {\n          -webkit-transform: perspective(600px) rotateX(60deg);\n          -moz-transform: perspective(600px) rotateX(60deg);\n          -ms-transform: perspective(600px) rotateX(60deg);\n          -o-transform: perspective(600px) rotateX(60deg);\n          transform: perspective(600px) rotateX(60deg);\n        }\n        :host([visualization=\"3d\"]) paper-button:hover,\n        :host([visualization=\"3d\"]) paper-button:focus {\n          transform: perspective(0px) rotateX(0deg);\n        }\n        iron-icon {\n          width: 50px;\n          height: 50px;\n          margin: 1px 19px;\n          z-index: 3;\n          color: var(--simple-concept-network-color);\n        }\n        .hexagon {\n          position: relative;\n          width: 88px;\n          height: 50.81px;\n          margin: 25.4px 0;\n          background-size: auto 101.6136px;\n          background-position: center;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);\n          background-color: var(--simple-concept-network-bg);\n        }\n\n        .hexTop,\n        .hexBottom {\n          position: absolute;\n          z-index: 1;\n          width: 62.23px;\n          height: 62.23px;\n          overflow: hidden;\n          -webkit-transform: scaleY(0.5774) rotate(-45deg);\n          -ms-transform: scaleY(0.5774) rotate(-45deg);\n          transform: scaleY(0.5774) rotate(-45deg);\n          background: inherit;\n          left: 12.89px;\n          box-shadow: 0 0 20px rgba(0, 0, 0, 0.6);\n        }\n\n        /*counter transform the bg image on the caps*/\n        .hexTop:after,\n        .hexBottom:after {\n          content: \"\";\n          position: absolute;\n          width: 88px;\n          height: 50.80682368868707px;\n          -webkit-transform: rotate(45deg) scaleY(1.7321) translateY(-25.4034px);\n          -ms-transform: rotate(45deg) scaleY(1.7321) translateY(-25.4034px);\n          transform: rotate(45deg) scaleY(1.7321) translateY(-25.4034px);\n          -webkit-transform-origin: 0 0;\n          -ms-transform-origin: 0 0;\n          transform-origin: 0 0;\n          background: inherit;\n        }\n\n        .hexTop {\n          top: -31.1127px;\n        }\n\n        .hexTop:after {\n          background-position: center top;\n        }\n\n        .hexBottom {\n          bottom: -31.1127px;\n        }\n\n        .hexBottom:after {\n          background-position: center bottom;\n        }\n\n        .hexagon:after {\n          content: \"\";\n          position: absolute;\n          top: 0px;\n          left: 0;\n          width: 88px;\n          height: 50.8068px;\n          z-index: 2;\n          background: inherit;\n        }\n      </style>\n      <a tabindex=\"-1\" href=\"[[src]]\" disabled$=\"[[disabled]]\">\n        <paper-button disabled$=\"[[disabled]]\" id=\"button\">\n          <div class=\"hexagon\" style$=\"background-image: url([[image]]);\">\n            <div class=\"hexTop\"></div>\n            <div class=\"hexBottom\"></div>\n            <iron-icon icon=\"[[icon]]\">&gt;</iron-icon>\n          </div>\n        </paper-button>\n      </a>\n      <simple-tooltip for=\"button\" position=\"bottom\" offset=\"45\">\n        [[label]]\n      </simple-tooltip>\n    "]);

    _templateObject_6cec00d0d34d11ea880ba1e93364c49c = function _templateObject_6cec00d0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `simple-concept-network-node`
   * @element simple-concept-network-node
   * A small but effective little data visualizer for topics surrounding
   * a central concept, much like the ELMS:LN snowflake icon.
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - ELMS:LN - The ELMS: Learning Network "snowflake" is a network diagram
   */
  var SimpleConceptNetworkNode =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SimpleConceptNetworkNode, _PolymerElement);

    function SimpleConceptNetworkNode() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleConceptNetworkNode);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleConceptNetworkNode).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/paper-button/paper-button.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../lrn-icons/lrn-icons.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(SimpleConceptNetworkNode, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_6cec00d0d34d11ea880ba1e93364c49c());
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * make the default theme dark?
           */
          coloredText: {
            type: Boolean,
            value: false,
            reflectToAttribute: true,
            notify: true
          },

          /**
           * Visualization reflected to attribute for styling
           */
          visualization: {
            type: String,
            reflectToAttribute: true,
            value: "3d"
          },

          /**
           * Icon to present
           */
          icon: {
            type: String
          },

          /**
           * image to present
           */
          image: {
            type: String
          },

          /**
           * disabled status
           */
          disabled: {
            type: Boolean
          },

          /**
           * title / label text
           */
          label: {
            type: String
          },

          /**
           * Longer description used for more info
           */
          description: {
            type: String
          },

          /**
           * source for a link
           */
          src: {
            type: String
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-concept-network-node";
      }
    }]);
    return SimpleConceptNetworkNode;
  }(_polymerElement.PolymerElement);

  _exports.SimpleConceptNetworkNode = SimpleConceptNetworkNode;
  window.customElements.define(SimpleConceptNetworkNode.tag, SimpleConceptNetworkNode);
});