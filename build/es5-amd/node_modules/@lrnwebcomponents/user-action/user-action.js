define(["exports", "./lib/UserActionBroker.js"], function (_exports, _UserActionBroker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.UserAction = void 0;

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_d9339fb0576311eba9ce094baa5ca644() {
    var data = babelHelpers.taggedTemplateLiteral([" <style></style>\n      <slot></slot>"]);

    _templateObject_d9339fb0576311eba9ce094baa5ca644 = function _templateObject_d9339fb0576311eba9ce094baa5ca644() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `user-action`
   * @element user-action
   * `track user actions and allow them to talk to xAPI stores easily`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @demo demo/index.html
   */
  var UserAction = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(UserAction, _HTMLElement);

    var _super = _createSuper(UserAction);

    babelHelpers.createClass(UserAction, [{
      key: "render",
      // render function
      value: function render() {
        return html(_templateObject_d9339fb0576311eba9ce094baa5ca644());
      } // haxProperty definition

    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "User action",
            description: "track user actions and allow them to talk to xAPI stores easily",
            icon: "icons:touch-app",
            color: "green",
            groups: ["Action"],
            handles: [{
              type: "inline",
              text: ""
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              attribute: "track",
              title: "Track when the user: ",
              description: "What event to react to",
              inputMethod: "select",
              options: {
                visibility: "Can see this",
                keypress: "Presses a key here",
                click: "Clicks this"
              },
              required: true,
              icon: "icons:android"
            }, {
              attribute: "every",
              title: "Track every event",
              description: "Default behavior is just to track the first occurance",
              inputMethod: "boolean",
              required: false,
              icon: "icons:android"
            }, {
              slot: "",
              title: "Content",
              description: "Content that can emit events",
              inputMethod: "code-editor",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(UserAction), "properties", this)), {}, {
          track: {
            name: "track",
            type: String,
            value: "visibility"
          },
          eventname: {
            name: "eventname",
            type: String,
            value: "user-engagement"
          },
          every: {
            name: "every",
            type: Boolean,
            value: false
          },
          visiblelimit: {
            name: "visiblelimit",
            type: Number,
            value: 0.5
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "user-action";
      }
      /**
       * life cycle
       */

    }]);

    function UserAction() {
      var _this;

      var delayRender = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      babelHelpers.classCallCheck(this, UserAction);
      _this = _super.call(this);
      _this.UserActionBroker = new _UserActionBroker.UserActionBroker(); // set tag for later use

      _this.tag = UserAction.tag; // map our imported properties json to real props on the element
      // @notice static getter of properties is built via tooling
      // to edit modify src/user-action-properties.json

      var obj = UserAction.properties;

      for (var p in obj) {
        if (obj.hasOwnProperty(p)) {
          if (_this.hasAttribute(p)) {
            var val = _this.getAttribute(p);

            if (obj[p].type === "Boolean") {
              val = true;
            }

            _this[p] = val;
          } else {
            _this[p] = obj[p].value;
          }
        }
      }

      return _this;
    }
    /**
     * life cycle, element is afixed to the DOM
     */


    babelHelpers.createClass(UserAction, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        this.__ready = true;
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback(attr, oldValue, newValue) {
        // allow for customized event name
        if (attr === "eventname" && newValue) {
          this.UserActionBroker.eventname = newValue;
        }

        if (attr === "track" && newValue) {
          switch (newValue) {
            // visibility isn't a real event and needs a complex solution
            case "visibility":
              // set an interaction observer
              this.observer = new IntersectionObserver(this.handleIntersectionCallback.bind(this), {
                root: document.rootElement,
                rootMargin: "0px",
                threshold: [0.0, 0.25, 0.5, 0.75, 1.0]
              });
              this.observer.observe(this);
              break;

            default:
              this.addEventListener(newValue, this.userActionEvent.bind(this));
              break;
          }
        }
      }
      /**
       * Handle this being visible
       */

    }, {
      key: "handleIntersectionCallback",
      value: function handleIntersectionCallback(entries) {
        var _iterator = _createForOfIteratorHelper(entries),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var entry = _step.value;

            if (Number(entry.intersectionRatio).toFixed(2) >= this.visiblelimit) {
              if (this.__ready) {
                this.userActionEvent({
                  detail: "visible"
                });
              }
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }
      /**
       * Redirect event we were monitoring into a trackable event
       */

    }, {
      key: "userActionEvent",
      value: function userActionEvent(e) {
        if ((!this.fired || this.every) && this.UserActionBroker.valid(this.track)) {
          this.UserActionBroker.fireAction(this.track, e, this);
          this.fired = true;
        } else if (!this.UserActionBroker.valid(this.track)) {
          console.warn(this.track + " was not valid");
        }
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["track", "eventname"];
      }
    }]);
    return UserAction;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.UserAction = UserAction;
  window.customElements.define(UserAction.tag, UserAction);
});