define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/paper-button/paper-button.js"], function (_exports, _polymerElement, _paperButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LayoutBuilder = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject_84287c20c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host paper-button {\n          display: block;\n          margin: 0;\n        }\n        :host paper-button,\n        :host #content-wrapper {\n          border: 1px solid #ddd;\n        }\n\n        :host #content:not(:empty) {\n          padding: 15px;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      </style>\n      <div id=\"content-wrapper\">\n        <div id=\"prepend-child\">\n          <paper-button on-tap=\"_handleAddChild\"\n            >Insert into [[type]]</paper-button\n          >\n        </div>\n        <div id=\"content\"><slot></slot></div>\n      </div>\n      <div id=\"insert-sibling-after\">\n        <paper-button on-tap=\"_handleAddSibling\">Add new [[type]]</paper-button>\n      </div>\n    "]);

    _templateObject_84287c20c96f11ea8be5e1d5fe7ec787 = function _templateObject_84287c20c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `layout-builder`
   * @element layout-builder
   * `A new UI for adding content to layouts`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   * @demo demo/index.html
   */
  var LayoutBuilder =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LayoutBuilder, _PolymerElement);

    function LayoutBuilder() {
      babelHelpers.classCallCheck(this, LayoutBuilder);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LayoutBuilder).apply(this, arguments));
    }

    babelHelpers.createClass(LayoutBuilder, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LayoutBuilder.prototype), "connectedCallback", this).call(this);
        this.id = this._generateUUID();
      }
    }, {
      key: "_handleAddChild",
      value: function _handleAddChild() {
        var lb = document.createElement("layout-builder");
        lb.type = "sub-" + this.type;
        lb.innerHTML = "I am a ".concat(this.type, " of ").concat(this.id, ".");
        this.prepend(lb);
      }
    }, {
      key: "_handleAddSibling",
      value: function _handleAddSibling() {
        var lb = document.createElement("layout-builder");
        lb.type = this.type;
        lb.innerHTML = "I am a ".concat(this.type, " of ").concat(this.id, ".");
        this.parentNode.insertBefore(lb, this.nextSibling);
      }
      /**
       * Generate a UUID
       */

    }, {
      key: "_generateUUID",
      value: function _generateUUID() {
        var hex = Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);
        return this.type + "-ss-s-s-s-sss".replace(/s/g, hex);
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_84287c20c96f11ea8be5e1d5fe7ec787());
      } // haxProperty definition

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Layout builder",
            description: "A new UI for adding content to layouts",
            icon: "icons:android",
            color: "green",
            groups: ["Builder"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "nikkimk",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LayoutBuilder), "properties", this), {
          type: {
            name: "type",
            type: Boolean,
            value: "layout"
          },
          id: {
            name: "id",
            type: String,
            reflecttoAttribute: true
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "layout-builder";
      }
    }]);
    return LayoutBuilder;
  }(_polymerElement.PolymerElement);

  _exports.LayoutBuilder = LayoutBuilder;
  window.customElements.define(LayoutBuilder.tag, LayoutBuilder);
});