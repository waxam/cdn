define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ESGlobalBridgeStore = _exports.ESGlobalBridge = void 0;

  /**
   * Copyright 2018 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * Object to help load things in globally scoped and fire events when ready
   */
  var ESGlobalBridge = /*#__PURE__*/babelHelpers.createClass(function ESGlobalBridge() {
    var _this = this;

    babelHelpers.classCallCheck(this, ESGlobalBridge);
    this.imports = {};
    this.webpack = false;
    /**
     * alias for load
     */

    this.import = function (name, location) {
      var webpack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      return _this.load(name, location, webpack);
    };
    /**
     * Load location and register it by name
     */


    this.load = function (name, location) {
      var webpack = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
      //don't try to load file if a story.js is already working on importing the packed version of the file
      var imported = _this.imports[name],
          importing = !webpack && _this.webpack && _this.webpack[name];

      if (!importing && !imported) {
        return new Promise(function (resolve, reject) {
          var script = document.createElement("script");
          script.src = location;
          script.setAttribute("data-name", name);
          _this.imports[name] = location;

          script.onload = function () {
            resolve(_this.imports[name]);
            _this.imports[name] = true; // delay firing the event just to be safe

            setTimeout(function () {
              var evt = new CustomEvent("es-bridge-".concat(name, "-loaded"), {
                bubbles: true,
                cancelable: true,
                detail: {
                  name: name,
                  location: location
                }
              });
              document.dispatchEvent(evt);
            }, 100);
          };

          script.onerror = function () {
            reject(new Error("Failed to load ".concat(name, " script with location ").concat(location, ".")));
            delete _this.imports[name];
            _this.imports[name] = false;
          };

          document.documentElement.appendChild(script);
        });
      } else {
        return new Promise(function (resolve, reject) {
          resolve(_this.imports[name]);
        });
      }
    };
  }); // register global bridge on window if needed

  _exports.ESGlobalBridge = ESGlobalBridge;
  window.ESGlobalBridge = window.ESGlobalBridge || {};

  window.ESGlobalBridge.requestAvailability = function () {
    if (!window.ESGlobalBridge.instance) {
      window.ESGlobalBridge.instance = new ESGlobalBridge();
    }

    return window.ESGlobalBridge.instance;
  };

  var ESGlobalBridgeStore = window.ESGlobalBridge.requestAvailability();
  _exports.ESGlobalBridgeStore = ESGlobalBridgeStore;
});