define(["exports", "../../@polymer/polymer/polymer-element.js", "./lib/gitgraphjs/src/gitgraph.js"], function (_exports, _polymerElement, _gitgraph) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnGitgraph = void 0;

  function _templateObject_85db8350c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          overflow-x: scroll;\n        }\n      </style>\n      <canvas id=\"gitGraph\"></canvas>\n    "]);

    _templateObject_85db8350c96f11ea8be5e1d5fe7ec787 = function _templateObject_85db8350c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `lrn-gitgraph`
   * @element lrn-gitgraph
   * For each branch in your repo use the following git command:
   *   ```
   *   git log [branch_name] --format='{"refs": "%d", "commit": "%h", "tree": "%t", "parent": "%p", "subject": "%s", "date": "%cd", "author": "%an %ae"},' --reverse
   *   ```
   * @demo demo/index.html
   */
  var LrnGitgraph =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrnGitgraph, _PolymerElement);

    function LrnGitgraph() {
      babelHelpers.classCallCheck(this, LrnGitgraph);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnGitgraph).apply(this, arguments));
    }

    babelHelpers.createClass(LrnGitgraph, [{
      key: "_commitsChanged",
      value: function _commitsChanged(commits) {
        var root = this;

        if (root.config) {
          if (commits.length > 0) {
            var gitgraph = new GitGraph(root.config);
            var tree = [];
            commits.forEach(function (item) {
              if (item.commits) {
                item.commits.forEach(function (commit) {
                  commit["branch"] = item.branch;
                  tree.push(commit);
                });
              }
            }); // remove duplicate commits

            console.log("befor", tree);
            tree = root._treeRemoveDuplicates(tree); // sort by date

            tree = tree.sort(function (a, b) {
              return new Date(b.date) - new Date(a.date);
            }); // reverse the tree so the newest oldest is first

            tree.reverse(); // identify forks

            var branches = [];
            tree.forEach(function (item, i) {
              // if the branch doesn't exist create it
              if (typeof branches[item.branch] === "undefined") {
                branches[item.branch] = gitgraph.branch(item.branch);
              } // make the commit


              branches[item.branch].commit({
                sha1: item.commit,
                message: item.subject,
                author: item.author,
                tag: item.refs
              });
            });
          }
        }
      }
    }, {
      key: "_treeRemoveDuplicates",
      value: function _treeRemoveDuplicates(tree) {
        var htTree = [];
        var htCommits = [];
        tree.forEach(function (t) {
          if (!htCommits.includes(t.commit)) {
            htTree.push(t);
            htCommits.push(t.commit);
          }
        });
        return htTree;
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnGitgraph.prototype), "ready", this).call(this);
        var root = this;
        var config = {
          template: root.template,
          // could be: "blackarrow" or "metro" or `myTemplate` (custom Template object)
          reverseArrow: false,
          // to make arrows point to ancestors, if displayed
          orientation: root.orientation,
          element: root.shadowRoot.querySelector("#gitGraph")
        };

        if (root.mode !== "") {
          config.mode = root.mode;
        }

        root.config = config;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_85db8350c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrn-gitgraph";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          commits: {
            type: Array,
            value: []
          },
          template: {
            type: String,
            value: "blackarrow"
          },
          orientation: {
            type: String,
            value: "horizontal"
          },
          mode: {
            type: String,
            value: ""
          },
          reverseArrow: {
            type: Boolean,
            value: false
          },

          /**
           * @type {{template: String, reverseArrow: Boolean, orientation: String, element: Object}}
           */
          config: {
            type: Object
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_commitsChanged(commits)"];
      }
    }]);
    return LrnGitgraph;
  }(_polymerElement.PolymerElement);

  _exports.LrnGitgraph = LrnGitgraph;
  window.customElements.define(LrnGitgraph.tag, LrnGitgraph);
});