define(["exports", "require", "../../lit-element/lit-element.js", "../../@polymer/paper-dialog/paper-dialog.js", "../../@polymer/polymer/lib/elements/custom-style.js"], function (_exports, _require, _litElement, _paperDialog, _customStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleModal = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_64fe4770d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        paper-dialog-scrollable:not(:defined) {\n          display: none;\n        }\n\n        :host paper-dialog ::slotted(*) {\n          font-size: 14px;\n          width: 100%;\n        }\n\n        #dialog {\n          display: flex;\n          flex-direction: column;\n          margin: 15px auto;\n          z-index: 1000;\n          height: var(--simple-modal-height, auto);\n          width: var(--simple-modal-width, auto);\n          min-width: var(--simple-modal-min-width, unset);\n          max-width: var(--simple-modal-max-width, unset);\n          min-height: var(--simple-modal-min-height, unset);\n          max-height: var(--simple-modal-max-height, unset);\n          border-radius: 0;\n        }\n\n        #titlebar {\n          margin-top: 0;\n          padding: 0px 16px;\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          color: var(--simple-modal-titlebar-color, #444);\n          background-color: var(--simple-modal-titlebar-background, #ddd);\n          border-radius: 0;\n          height: 64px;\n          line-height: 64px;\n        }\n\n        #headerbar {\n          margin: 0;\n          padding: 0 16px;\n          color: var(--simple-modal-header-color, #222);\n          background-color: var(--simple-modal-header-background, #ccc);\n        }\n\n        h2 {\n          margin-right: 8px;\n          padding: 0;\n          flex: auto;\n          font-size: 18px;\n          line-height: 18px;\n        }\n\n        #close {\n          top: 0;\n          border: var(--simple-modal-titlebar-button-border, none);\n          padding: var(--simple-modal-titlebar-button-padding, 10px 0);\n          min-width: unset;\n          text-transform: none;\n          color: var(--simple-modal-titlebar-color, #444);\n          background-color: transparent;\n        }\n\n        #close:focus {\n          opacity: 0.7;\n          outline: var(--simple-modal-titlebar-button-outline, 2px dotted grey);\n          outline-offset: var(\n            --simple-modal-titlebar-button-outline-offset,\n            2px\n          );\n        }\n\n        #close iron-icon {\n          width: var(--simple-modal-titlebar-icon-width, 16px);\n          height: var(--simple-modal-titlebar-icon-height, 16px);\n          color: var(--simple-modal-titlebar-color, #444);\n        }\n\n        #simple-modal-content {\n          flex-grow: 1;\n          padding: 8px 16px;\n          margin: 0;\n          color: var(--simple-modal-content-container-color, #222);\n          background-color: var(\n            --simple-modal-content-container-background,\n            #fff\n          );\n        }\n\n        .buttons {\n          padding: 0;\n          margin: 0;\n          color: var(--simple-modal-buttons-color, unset);\n          background-color: var(--simple-modal-buttons-background, unset);\n        }\n\n        .buttons ::slotted(*) {\n          padding: 0;\n          margin: 0;\n          color: var(--simple-modal-button-color, --simple-modal-buttons-color);\n          background-color: var(\n            --simple-modal-button-background,\n            --simple-modal-buttons-background\n          );\n        }\n      "]);

    _templateObject2_64fe4770d34d11ea880ba1e93364c49c = function _templateObject2_64fe4770d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_64fe4770d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <custom-style>\n        <style>\n          :host paper-dialog ::slotted(*) {\n            @apply --simple-modal-content;\n          }\n\n          #dialog {\n            @apply --simple-modal-dialog;\n          }\n\n          #titlebar {\n            @apply --simple-modal-top;\n          }\n\n          #headerbar {\n            @apply --simple-modal-headerbar;\n          }\n\n          h2 {\n            @apply --simple-modal-title;\n          }\n\n          #close {\n            @apply --simple-modal-close;\n          }\n\n          #close iron-icon {\n            @apply --simple-modal-close-icon;\n          }\n\n          #simple-modal-content {\n            --paper-dialog-scrollable: {\n              padding: 0;\n            }\n            @apply --simple-modal-content-container;\n          }\n          .buttons {\n            @apply --simple-modal-buttons;\n          }\n          .buttons ::slotted(*) {\n            @apply --simple-modal-button;\n          }\n        </style>\n      </custom-style>\n      <paper-dialog\n        id=\"dialog\"\n        always-on-top\n        aria-describedby=\"simple-modal-content\"\n        aria-label=\"", "\"\n        aria-labelledby=\"", "\"\n        aria-modal=\"true\"\n        role=\"dialog\"\n        ?opened=\"", "\"\n        @opened-changed=\"", "\"\n        ?modal=\"", "\"\n        with-backdrop\n      >\n        <div id=\"titlebar\">\n          <h2 id=\"simple-modal-title\" ?hidden=\"", "\">\n            ", "\n          </h2>\n          <div></div>\n          <paper-button\n            id=\"close\"\n            dialog-dismiss\n            ?hidden=\"", "\"\n            label=\"", "\"\n          >\n            <iron-icon aria-hidden=\"true\" icon=\"", "\"></iron-icon>\n          </paper-button>\n        </div>\n        <div id=\"headerbar\"><slot name=\"header\"></slot></div>\n        <paper-dialog-scrollable id=\"simple-modal-content\">\n          <slot name=\"content\"></slot>\n        </paper-dialog-scrollable>\n        <div class=\"buttons\">\n          <slot name=\"buttons\"></slot>\n        </div>\n      </paper-dialog>\n    "]);

    _templateObject_64fe4770d34d11ea880ba1e93364c49c = function _templateObject_64fe4770d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `simple-modal`
   * `A simple modal that ensures accessibility and stack order context appropriately`
   * CSS Variables: ```
  --simple-modal-titlebar-color: #444;
  --simple-modal-titlebar-background: #ddd;
  --simple-modal-header-color: #222;
  --simple-modal-header-background: #ccc;
  --simple-modal-content-container-color: #222;
  --simple-modal-content-container-background: #fff;
  --simple-modal-buttons-color: unset;
  --simple-modal-buttons-background: unset;
  --simple-modal-button-color: var(--simple-modal-buttons-color);
  --simple-modal-button-background: var(--simple-modal-buttons-background-color);
  ```
   * @demo ./demo/index.html demo
   * @demo ./demo/css.html styling simple-modal via CSS
   * @demo ./demo/details.html styling simple-modal via event details
   * @demo ./demo/template.html using simple-modal-template
   * @element simple-modal
   */
  var SimpleModal =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(SimpleModal, _LitElement);
    babelHelpers.createClass(SimpleModal, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_64fe4770d34d11ea880ba1e93364c49c(), this._getAriaLabel(this.title), this._getAriaLabelledby(this.title), this.opened, this.openedChangedEvent, this.modal, !this.title, this.title, !this.opened, this.closeLabel, this.closeIcon);
      } // properties available to the custom element for data binding

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_64fe4770d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleModal), "properties", this), {
          /**
           * heading / label of the modal
           */
          title: {
            type: String
          },

          /**
           * open state
           */
          opened: {
            type: Boolean,
            reflect: true
          },

          /**
           * Close label
           */
          closeLabel: {
            attribute: "close-label",
            type: String
          },

          /**
           * Close icon
           */
          closeIcon: {
            type: String,
            attribute: "close-icon"
          },

          /**
           * The element that invoked this. This way we can track our way back accessibly
           */
          invokedBy: {
            type: Object
          },

          /**
           * support for modal flag
           */
          modal: {
            type: Boolean
          }
        });
      }
      /**
       * convention
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-modal";
      }
      /**
       * HTMLElement
       */

    }]);

    function SimpleModal() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleModal);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleModal).call(this));
      _this.title = "";
      _this.opened = false;
      _this.closeLabel = "Close";
      _this.closeIcon = "close";
      _this.modal = false;
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/paper-dialog-scrollable/paper-dialog-scrollable.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/paper-button/paper-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/iron-icon/iron-icon.js"], res, rej);
        });
      }, 0);
      return _this;
    }
    /**
     * LitElement
     */


    babelHelpers.createClass(SimpleModal, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "opened") {
            _this2._openedChanged(_this2[propName]);
          }
        });
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        this.shadowRoot.querySelector("#simple-modal-content").addEventListener("neon-animation-finish", this._ironOverlayClosed.bind(this));
      }
      /**
       * HTMLElement
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this3 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleModal.prototype), "connectedCallback", this).call(this);
        setTimeout(function () {
          window.addEventListener("simple-modal-hide", _this3.close.bind(_this3));
          window.addEventListener("simple-modal-show", _this3.showEvent.bind(_this3));
        }, 0);
      }
      /**
       * HTMLElement
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("simple-modal-hide", this.close.bind(this));
        window.removeEventListener("simple-modal-show", this.showEvent.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleModal.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Ensure everything is visible in what's been expanded.
       */

    }, {
      key: "_resizeContent",
      value: function _resizeContent(e) {
        // fake a resize event to make contents happy
        window.dispatchEvent(new Event("resize"));
      }
      /**
       * show event call to open the modal and display it's content
       *
       */

    }, {
      key: "showEvent",
      value: function showEvent(e) {
        var _this4 = this;

        // if we're already opened and we get told to open again....
        // swap out the contents
        if (this.opened) {
          // wipe the slot of our modal
          while (this.firstChild !== null) {
            this.removeChild(this.firstChild);
          }

          setTimeout(function () {
            _this4.show(e.detail.title, e.detail.elements, e.detail.invokedBy, e.detail.id, e.detail.modalClass, e.detail.styles, e.detail.clone, e.detail.modal);
          }, 100);
        } else {
          this.show(e.detail.title, e.detail.elements, e.detail.invokedBy, e.detail.id, e.detail.modalClass, e.detail.styles, e.detail.clone, e.detail.modal);
        }
      }
      /**
       * Show the modal and display the material
       */

    }, {
      key: "show",
      value: function show(title, elements, invokedBy) {
        var _this5 = this;

        var id = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
        var modalClass = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
        var styles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : null;
        var clone = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;
        var modal = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;
        this.invokedBy = invokedBy;
        this.modal = modal;
        this.title = title;
        var element; // append element areas into the appropriate slots
        // ensuring they are set if it wasn't previously

        var slots = ["header", "content", "buttons"];

        if (id) {
          this.setAttribute("id", id);
        } else {
          this.removeAttribute("id");
        }

        this.setAttribute("style", "");

        if (styles) {
          ["--simple-modal-width", "--simple-modal-height", "--simple-modal-min-width", "--simple-modal-min-height", "--simple-modal-max-width", "--simple-modal-max-height", "--simple-modal-titlebar-color", "--simple-modal-titlebar-background", "--simple-modal-header-color", "--simple-modal-header-background", "--simple-modal-content-container-color", "--simple-modal-content-container-background", "--simple-modal-buttons-color", "--simple-modal-buttons-background", "--simple-modal-button-color", "--simple-modal-button-background"].forEach(function (prop) {
            _this5.style.setProperty(prop, styles[prop] || "unset");
          });
        }

        if (modalClass) {
          this.setAttribute("class", modalClass);
        } else {
          this.removeAttribute("class");
        }

        for (var i in slots) {
          if (elements[slots[i]]) {
            if (clone) {
              element = elements[slots[i]].cloneNode(true);
            } else {
              element = elements[slots[i]];
            }

            element.setAttribute("slot", slots[i]);
            this.appendChild(element);
          }
        } // minor delay to help the above happen prior to opening


        setTimeout(function () {
          _this5.opened = true;

          _this5.shadowRoot.querySelector("#close").focus();

          _this5._resizeContent();
        }, 100);
      }
      /**
       * check state and if we should clean up on close.
       * This keeps the DOM tiddy and allows animation to happen gracefully.
       */

    }, {
      key: "animationEnded",
      value: function animationEnded(e) {
        var _this6 = this;

        // wipe the slot of our modal
        this.title = "";

        while (this.firstChild !== null) {
          this.removeChild(this.firstChild);
        }

        if (this.invokedBy) {
          setTimeout(function () {
            _this6.invokedBy.focus();
          }, 500);
        }
      }
      /**
       * Close the modal and do some clean up
       */

    }, {
      key: "close",
      value: function close() {
        this.shadowRoot.querySelector("#dialog").close();
      }
    }, {
      key: "openedChangedEvent",
      value: function openedChangedEvent(e) {
        this.opened = e.detail.value;
      } // Observer opened for changes

    }, {
      key: "_openedChanged",
      value: function _openedChanged(newValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !newValue) {
          this.animationEnded();
          var evt = new CustomEvent("simple-modal-closed", {
            bubbles: true,
            cancelable: true,
            detail: {
              opened: false,
              invokedBy: this.invokedBy
            }
          });
          this.dispatchEvent(evt);
        } else if (newValue) {
          var _evt = new CustomEvent("simple-modal-opened", {
            bubbles: true,
            cancelable: true,
            detail: {
              opened: true,
              invokedBy: this.invokedBy
            }
          });

          this.dispatchEvent(_evt);
        }
      }
      /**
       * If there is a title, aria-labelledby should point to #simple-modal-title
       */

    }, {
      key: "_getAriaLabelledby",
      value: function _getAriaLabelledby(title) {
        return !title ? null : "simple-modal-title";
      }
      /**
       * If there is no title, supply a generic aria-label
       */

    }, {
      key: "_getAriaLabel",
      value: function _getAriaLabel(title) {
        return !title ? "Modal Dialog" : null;
      }
    }, {
      key: "_ironOverlayClosed",
      value: function _ironOverlayClosed(e) {
        e.preventDefault();
        e.stopPropagation();
      }
    }]);
    return SimpleModal;
  }(_litElement.LitElement);

  _exports.SimpleModal = SimpleModal;
  window.customElements.define(SimpleModal.tag, SimpleModal);
  // register globally so we can make sure there is only one
  window.SimpleModal = window.SimpleModal || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.SimpleModal.requestAvailability = function () {
    if (!window.SimpleModal.instance) {
      window.SimpleModal.instance = document.createElement("simple-modal");
      document.body.appendChild(window.SimpleModal.instance);
    }

    return window.SimpleModal.instance;
  };
});