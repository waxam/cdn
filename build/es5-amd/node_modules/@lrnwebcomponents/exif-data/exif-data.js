define(["exports", "meta", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExifData = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `exif-data`
   * `obtain exif data from slotted elements`
   * @demo demo/index.html
   * @element exif-data
   */
  var ExifData =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(ExifData, _HTMLElement);
    babelHelpers.createClass(ExifData, [{
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;
        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
      /**
       * life cycle
       */

    }, {
      key: "html",
      get: function get() {
        return "\n    <style>\n      ul.showdata {\n        z-index: 1;\n        visibility: visible;\n        opacity: .9;\n      }\n      ul {\n        position: absolute;\n        transition: 0.3s linear all;\n        background-color: #000000;\n        opacity: 0;\n        visibility: hidden;\n        overflow: scroll;\n        padding: 0;\n        margin: 0;\n      }\n      ul li {\n        padding: 8px;\n        font-size: 14px;\n        color: white;\n      }\n    </style>\n    <slot></slot>\n    <ul id=\"data\"></ul>";
      }
    }], [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */
      get: function get() {
        return "exif-data";
      }
    }]);

    function ExifData() {
      var _this;

      babelHelpers.classCallCheck(this, ExifData);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ExifData).call(this));
      _this.nodeData = [];

      var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

      window.ESGlobalBridge.requestAvailability();
      window.ESGlobalBridge.instance.load("exif-js", "".concat(basePath, "lib/exif-js.js"));
      window.addEventListener("es-bridge-exif-js-loaded", _this._onExifJsLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      _this.template = document.createElement("template");

      _this.attachShadow({
        mode: "open"
      });

      _this.render();

      return _this;
    }
    /**
     * Library loaded
     */


    babelHelpers.createClass(ExifData, [{
      key: "_onExifJsLoaded",
      value: function _onExifJsLoaded() {
        window.removeEventListener("es-bridge-exif-js-loaded", this._onExifJsLoaded.bind(this));
        this.__ready = true;
        this.updateExif();
      }
    }, {
      key: "showDetails",
      value: function showDetails(item) {
        if (!item) {
          return;
        }

        var target = this.alignTarget;

        if (!target) {
          target = item.node;
        }

        var dim = target.getBoundingClientRect();
        var content = "";

        for (var key in item.data) {
          if (item.data[key] != "" && item.data[key] != false && item.data[key] != " " && item.data[key] != 0 && item.data[key] != null) {
            content += "<li><strong>".concat(key, "</strong>: ").concat(item.data[key], "</li>");
          }
        }

        this.dataElement.innerHTML = content;

        if (this.alignTargetTop) {
          this.dataElement.style.top = this.alignTargetTop;
        } else {
          this.dataElement.style.top = dim.top + "px";
        }

        this.dataElement.style.height = dim.height + "px";
        this.dataElement.style.width = dim.width + "px";

        if (!this.noLeft) {
          this.dataElement.style.left = dim.left + "px";
        }

        this.dataElement.classList.add("showdata");
      }
    }, {
      key: "clickImage",
      value: function clickImage(e) {
        var _this2 = this;

        if (e.target.tagName === "IMG") {
          this.nodeData.forEach(function (item) {
            if (item.node === e.target) {
              _this2.showDetails(item);
            }
          });
        }
      }
      /**
       * Load exifData
       */

    }, {
      key: "getExifData",
      value: function getExifData(node) {
        var _this3 = this;

        window.EXIF.getData(node, function () {
          var data = window.EXIF.getAllTags(node); // REALLY verbose field

          delete data.MakerNote;
          delete data.thumbnail;

          _this3.nodeData.push({
            node: node,
            data: data
          });
        });
      }
    }, {
      key: "updateExif",
      value: function updateExif() {
        var _this4 = this;

        var show = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        this.nodeData = [];
        this.dataElement.innerHTML = "";
        this.childNodes.forEach(function (node) {
          if (_this4.__ready && node.tagName && node.tagName === "IMG") {
            _this4.getExifData(node);
          }
        });

        if (show && this.children.length === 1) {
          setTimeout(function () {
            _this4.showDetails(_this4.nodeData[0]);
          }, 250);
        }
      }
    }, {
      key: "clickData",
      value: function clickData(e) {
        this.dataElement.classList.remove("showdata");
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        var _this5 = this;

        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }

        this.dataElement = this.shadowRoot.querySelector("#data");

        if (this.getAttribute("no-events") == null) {
          this.addEventListener("click", this.clickImage.bind(this));
          this.dataElement.addEventListener("click", this.clickData.bind(this));
        }

        if (this.getAttribute("no-left") == null) {
          this.noLeft = false;
        } else {
          this.noLeft = true;
        } // any change, update things


        this.observer = new MutationObserver(function (mutations) {
          _this5.updateExif();
        });
        this.observer.observe(this, {
          childList: true
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        if (this.getAttribute("no-events") == null) {
          this.removeEventListener("click", this.clickImage.bind(this));
          this.dataElement.removeEventListener("click", this.clickData.bind(this));
        }

        this.observer.disconnect();
      }
    }]);
    return ExifData;
  }(babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.ExifData = ExifData;
  window.customElements.define(ExifData.tag, ExifData);
});