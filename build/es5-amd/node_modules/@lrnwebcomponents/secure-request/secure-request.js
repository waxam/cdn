define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SecureRequestXhr = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `secure-request`
   * @element secure-request
   * `Wrapper behavior to provide the basis for a secure XHR`
   *
   * @demo demo/index.html
   * @polymerBehavior
   * @polymer
   */
  // superclass element mix in
  var SecureRequestXhr = function SecureRequestXhr(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(_class, [{
        key: "setCookies",
        value:
        /**
         * Set cookies for the request
         */
        function setCookies(endPoint, csrfToken) {
          this._eraseCookie("securerequest-endpoint");

          this._eraseCookie("securerequest-csrftoken");

          this._createCookie("securerequest-endpoint", endPoint, 30, endPoint);

          this._createCookie("securerequest-csrftoken", csrfToken, 30, endPoint);
        } // call this function from your child components to generate secure urls

      }, {
        key: "generateUrl",
        value: function generateUrl(url) {
          var endPoint = this.getEndPoint();
          var csrfToken = this.getCsrfToken();

          if (endPoint && csrfToken) {
            return endPoint + url + "?token=" + csrfToken;
          }

          return null;
        }
      }, {
        key: "getEndPoint",
        value: function getEndPoint() {
          return this._readCookie("securerequest-endpoint");
        }
      }, {
        key: "getCsrfToken",
        value: function getCsrfToken() {
          return this._readCookie("securerequest-csrftoken");
        }
      }, {
        key: "_createCookie",
        value: function _createCookie(name, value, days, path) {
          var expires = "";

          if (days) {
            var date = new Date();
            date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
            expires = "; expires=" + date.toUTCString();
          }

          document.cookie = name + "=" + value + expires + "; path=" + path;
        }
      }, {
        key: "_readCookie",
        value: function _readCookie(name) {
          var nameEQ = name + "=";
          var ca = document.cookie.split(";");

          for (var i = 0; i < ca.length; i++) {
            var c = ca[i];

            while (c.charAt(0) == " ") {
              c = c.substring(1, c.length);
            }

            if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
          }

          return null;
        }
      }, {
        key: "_eraseCookie",
        value: function _eraseCookie(name) {
          this._createCookie(name, "", -1);
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.SecureRequestXhr = SecureRequestXhr;
  window.SecureRequest = window.SecureRequest || {};
  window.SecureRequest.xhr = {
    // Call this function in your root component.
    setCookies: function setCookies(endPoint, csrfToken) {
      this._eraseCookie("securerequest-endpoint");

      this._eraseCookie("securerequest-csrftoken");

      this._createCookie("securerequest-endpoint", endPoint, 30, endPoint);

      this._createCookie("securerequest-csrftoken", csrfToken, 30, endPoint);
    },
    // call this function from your child components to generate secure urls
    generateUrl: function generateUrl(url) {
      var endPoint = this.getEndPoint();
      var csrfToken = this.getCsrfToken();

      if (endPoint && csrfToken) {
        return endPoint + url + "?token=" + csrfToken;
      }

      return null;
    },
    getEndPoint: function getEndPoint() {
      return this._readCookie("securerequest-endpoint");
    },
    getCsrfToken: function getCsrfToken() {
      return this._readCookie("securerequest-csrftoken");
    },
    _createCookie: function _createCookie(name, value, days, path) {
      var expires = "";

      if (days) {
        var date = new Date();
        date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
        expires = "; expires=" + date.toUTCString();
      }

      document.cookie = name + "=" + value + expires + "; path=" + path;
    },
    _readCookie: function _readCookie(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(";");

      for (var i = 0; i < ca.length; i++) {
        var c = ca[i];

        while (c.charAt(0) == " ") {
          c = c.substring(1, c.length);
        }

        if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
      }

      return null;
    },
    _eraseCookie: function _eraseCookie(name) {
      this._createCookie(name, "", -1);
    }
  };
});