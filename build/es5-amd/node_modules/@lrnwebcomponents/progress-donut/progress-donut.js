define(["exports", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js", "../lrndesign-chart/lib/lrndesign-pie.js"], function (_exports, _litElement, _simpleColors, _lrndesignPie) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ProgressDonut = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_642c9f90d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        .ct-center-image {\n          width: 100%;\n          height: 100%;\n          transform: translateX(25%) translateY(25%) scale(0.5);\n          clip-path: circle(50% at 50% 50%);\n        }\n\n        .ct-center-ellipse {\n          fill: var(--chartist-bg-color, #fff);\n        }\n      "]);

    _templateObject2_642c9f90d34d11ea880ba1e93364c49c = function _templateObject2_642c9f90d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_642c9f90d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      ", "\n    "]);

    _templateObject_642c9f90d34d11ea880ba1e93364c49c = function _templateObject_642c9f90d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `progress-donut`
   * @element progress-donut
   * shows progress in as a rounded shape w/ hollow middle
   *
   * @extends LrndesignPie
   * @see @lrnwebcomponents/lrndesign-chart/lib/lrndesign-pie.js
   * @see @lrnwebcomponents/lrndesign-chart/lrndesign-chart.js
   * @see @lrnwebcomponents/chartist-render/chartist-render.js
   * @see @lrnwebcomponents/simple-colors/simple-colors.js
   *
   * @demo demo/index.html
   */
  var ProgressDonut =
  /*#__PURE__*/
  function (_LrndesignPie) {
    babelHelpers.inherits(ProgressDonut, _LrndesignPie);
    babelHelpers.createClass(ProgressDonut, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_642c9f90d34d11ea880ba1e93364c49c(), babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut.prototype), "render", this).call(this));
      } // haxProperty definition

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut), "styles", this)), [(0, _litElement.css)(_templateObject2_642c9f90d34d11ea880ba1e93364c49c())]);
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Progress Donut",
            description: "Progression donut",
            icon: "av:play-circle-filled",
            color: "grey",
            groups: ["Presentation", "Data"],
            handles: [],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "animated",
              title: "Animated",
              description: "Whether progress animates on first load",
              inputMethod: "boolean"
            }, {
              property: "complete",
              title: "Complete",
              description: "An array of completed values.",
              inputMethod: "array",
              properties: [{
                title: "Number",
                description: "Completed number.",
                inputMethod: "number"
              }]
            }, {
              property: "total",
              title: "Total",
              description: "Total when all items are complete.",
              inputMethod: "number"
            }, {
              property: "startAngle",
              title: "Start Angle",
              description: "Donut angle where progress starts",
              inputMethod: "number"
            }],
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "desc",
              title: "Description",
              description: "Accessible long description",
              inputMethod: "textfield"
            }, {
              property: "imageSrc",
              title: "Image Source",
              description: "Source of image inside donut.",
              inputMethod: "haxupload",
              icon: "link",
              validationType: "url"
            }, {
              property: "imageAlt",
              title: "Image Alt Text",
              description: "Alt text for image.",
              inputMethod: "alt"
            }, {
              property: "animated",
              title: "Animated",
              description: "Whether progress animates on first load",
              inputMethod: "boolean"
            }, {
              property: "complete",
              title: "Complete",
              description: "An array of completed values.",
              inputMethod: "array"
            }, {
              property: "total",
              title: "Total",
              description: "Total when all items are complete.",
              inputMethod: "arrnumberay"
            }, {
              property: "startAngle",
              title: "Start Angle",
              description: "Donut angle where progress starts",
              inputMethod: "number"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut), "properties", this), {
          /**
           * Timing for animation or -1 for false
           */
          animation: {
            type: Number,
            attribute: "animation"
          },

          /**
           * Timing for animation or 0 none
           */
          animationDelay: {
            type: Number,
            attribute: "animation-delay"
          },

          /**
           * An array of completed values
           */
          complete: {
            type: Array
          },

          /**
           * Accessible long description
           */
          desc: {
            type: String
          },

          /**
           * Source of image in the center of the object.
           */
          imageSrc: {
            attribute: "image-src",
            type: String,
            reflect: true
          },

          /**
           * Alt text for image.
           */
          imageAlt: {
            attribute: "image-alt",
            type: String,
            reflect: true
          }
        });
      }
    }]);

    function ProgressDonut() {
      var _this;

      babelHelpers.classCallCheck(this, ProgressDonut);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ProgressDonut).call(this));
      babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut.prototype), "setProperties", babelHelpers.assertThisInitialized(_this)).call(babelHelpers.assertThisInitialized(_this));
      _this.animation = -1;
      _this.animationDelay = 0;
      _this.complete = [];
      _this.desc = "";
      _this.imageSrc = "";
      _this.imageAlt = "";
      _this.donut = false;
      _this.showLabel = false;
      _this.showTable = false;

      _this.addEventListener("chartist-render-draw", _this.addAnimation);

      return _this;
    }

    babelHelpers.createClass(ProgressDonut, [{
      key: "disconnectedCallback",

      /**
       * Called every time the element is removed from the DOM. Useful for
       * running clean up code (removing event listeners, etc.).
       */
      value: function disconnectedCallback() {
        this.removeEventListener("chartist-render-draw", this.addAnimation);
        babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Handles chart creation event.
       * @param {event} e create event
       */

    }, {
      key: "addAnimation",
      value: function addAnimation(e) {
        var data = e && e.detail ? e.detail : undefined;

        if (this.animation > 0 && data && data.type && data.type === "slice") {
          var opacity = 1,
              val = data.value || this.donutTotal / this.donutData.length,
              dur = this.animation * val / this.donutTotal;
          data.element.attr({
            c: opacity
          });
          var animationDefinition = {
            opacity: {
              id: "anim" + data.index,
              dur: dur,
              from: -opacity,
              to: 1,
              fill: "freeze"
            }
          };

          if (data.index !== 0) {
            animationDefinition["opacity"].begin = "anim" + (data.index - 1) + ".end";
          } else {
            animationDefinition["opacity"].begin = this.animationDelay;
          }

          if (this.donutData.length > 0) animationDefinition["opacity"].easing = Chartist.Svg.Easing.easeOutQuint;
          data.element.attr({
            opacity: -opacity
          });
          data.element.animate(animationDefinition, false);
        }

        console.log(data, data.element._node.getTotalLength());

        if (data && data.index === this.complete.length - 1 && this.chart) {
          data.group.append(new Chartist.Svg("ellipse", {
            cx: "50%",
            cy: "50%",
            rx: "32%",
            ry: "32%"
          }, "ct-center-ellipse"));
          data.group.append(new Chartist.Svg("image", {
            href: this.imageSrc,
            alt: this.imageAlt
          }, "ct-center-image"));
        }
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "complete" && _this2.complete !== oldValue) _this2.data = [_this2.donutLabels, _this2.donutData];
        });
        babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut.prototype), "updated", this).call(this, changedProperties);
      }
    }, {
      key: "donutData",
      get: function get() {
        return Array.isArray(this.complete) ? this.complete : JSON.parse(this.complete || "[]");
      }
    }, {
      key: "donutLabels",
      get: function get() {
        return this.donutData.map(function (h, i) {
          return "Item ".concat(i + 1);
        });
      }
    }, {
      key: "donutTotal",
      get: function get() {
        return Math.max(this.donutData.reduce(function (sum, val) {
          return sum + val;
        }), this.total);
      }
    }, {
      key: "options",
      get: function get() {
        return babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut.prototype), "options", this);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "progress-donut";
      }
    }]);
    return ProgressDonut;
  }(_lrndesignPie.LrndesignPie);

  _exports.ProgressDonut = ProgressDonut;
  window.customElements.define(ProgressDonut.tag, ProgressDonut);
});