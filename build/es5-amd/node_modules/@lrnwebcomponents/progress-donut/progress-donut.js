define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../hax-body-behaviors/lib/HAXWiring.js", "../schema-behaviors/schema-behaviors.js", "../simple-colors/simple-colors.js", "../chartist-render/chartist-render.js"], function (_exports, _polymerElement, _renderStatus, _HAXWiring, _schemaBehaviors, _simpleColors, _chartistRender) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ProgressDonut = void 0;

  function _templateObject_2c487ae0b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          background-color: var(--simple-colors-background1, #ffffff);\n          overflow: visible;\n          display: block;\n        }\n        :host #wrapper {\n          margin: 0 auto;\n          position: relative;\n        }\n        :host #wrapper > * {\n          position: absolute;\n        }\n        :host #wrapper #chart {\n          left: 0;\n          top: 0;\n        }\n        :host #wrapper,\n        :host #wrapper #chart {\n          width: 250px;\n          height: 250px;\n        }\n        :host([size=\"xs\"]) #wrapper,\n        :host([size=\"xs\"]) #wrapper #chart {\n          width: 150px;\n          height: 150px;\n        }\n        :host([size=\"sm\"]) #wrapper,\n        :host([size=\"sm\"]) #wrapper #chart {\n          width: 200px;\n          height: 200px;\n        }\n        :host([size=\"lg\"]) #wrapper,\n        :host([size=\"lg\"]) #wrapper #chart {\n          width: 300px;\n          height: 300px;\n        }\n        :host([size=\"xl\"]) #wrapper,\n        :host([size=\"xl\"]) #wrapper #chart {\n          width: 400px;\n          height: 400px;\n        }\n        :host #wrapper > #image {\n          left: 20%;\n          top: 20%;\n          width: 60%;\n          height: 60%;\n          -webkit-clip-path: circle(50% at 50% 50%);\n          clip-path: circle(50% at 50% 50%);\n        }\n      </style>\n      <div id=\"wrapper\">\n        <img\n          id=\"image\"\n          alt$=\"[[imageAlt]]\"\n          aria-hidden=\"true\"\n          hidden$=\"[[!imageSrc]]\"\n          src$=\"[[imageSrc]]\"\n          style$=\"[[imageStyle]]\"\n        />\n        <chartist-render\n          id=\"chart\"\n          data$=\"[[data]]\"\n          chart-desc$=\"[[desc]]\"\n          chart-title=\"[[title]]\"\n          scale=\"ct-square\"\n          options$=\"[[options]]\"\n          title$=\"[[title]]\"\n          type=\"pie\"\n        >\n        </chartist-render>\n      </div>\n    "], ["\n      <style>\n        :host {\n          background-color: var(--simple-colors-background1, #ffffff);\n          overflow: visible;\n          display: block;\n        }\n        :host #wrapper {\n          margin: 0 auto;\n          position: relative;\n        }\n        :host #wrapper > * {\n          position: absolute;\n        }\n        :host #wrapper #chart {\n          left: 0;\n          top: 0;\n        }\n        :host #wrapper,\n        :host #wrapper #chart {\n          width: 250px;\n          height: 250px;\n        }\n        :host([size=\"xs\"]) #wrapper,\n        :host([size=\"xs\"]) #wrapper #chart {\n          width: 150px;\n          height: 150px;\n        }\n        :host([size=\"sm\"]) #wrapper,\n        :host([size=\"sm\"]) #wrapper #chart {\n          width: 200px;\n          height: 200px;\n        }\n        :host([size=\"lg\"]) #wrapper,\n        :host([size=\"lg\"]) #wrapper #chart {\n          width: 300px;\n          height: 300px;\n        }\n        :host([size=\"xl\"]) #wrapper,\n        :host([size=\"xl\"]) #wrapper #chart {\n          width: 400px;\n          height: 400px;\n        }\n        :host #wrapper > #image {\n          left: 20%;\n          top: 20%;\n          width: 60%;\n          height: 60%;\n          -webkit-clip-path: circle(50% at 50% 50%);\n          clip-path: circle(50% at 50% 50%);\n        }\n      </style>\n      <div id=\"wrapper\">\n        <img\n          id=\"image\"\n          alt\\$=\"[[imageAlt]]\"\n          aria-hidden=\"true\"\n          hidden\\$=\"[[!imageSrc]]\"\n          src\\$=\"[[imageSrc]]\"\n          style\\$=\"[[imageStyle]]\"\n        />\n        <chartist-render\n          id=\"chart\"\n          data\\$=\"[[data]]\"\n          chart-desc\\$=\"[[desc]]\"\n          chart-title=\"[[title]]\"\n          scale=\"ct-square\"\n          options\\$=\"[[options]]\"\n          title\\$=\"[[title]]\"\n          type=\"pie\"\n        >\n        </chartist-render>\n      </div>\n    "]);

    _templateObject_2c487ae0b3b911e9b58d79562a23326c = function _templateObject_2c487ae0b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  /**
   * `progress-donut`
   * `Showing progression in a circle shape w/ hollow middle`
   *
   * @demo demo/index.html
   *
   * @microcopy - the mental model for this element
   *  -
   */
  var ProgressDonut =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(ProgressDonut, _SchemaBehaviors);

    function ProgressDonut() {
      var _this;

      babelHelpers.classCallCheck(this, ProgressDonut);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ProgressDonut).call(this));
      (0, _renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this), function () {
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(ProgressDonut.haxProperties, ProgressDonut.tag, this);
      });
      return _this;
    }

    babelHelpers.createClass(ProgressDonut, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("chartist-render-draw", this._onCreated.bind(this));
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("chartist-render-draw", this._onCreated.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Makes chart and returns the chart object.
       */

    }, {
      key: "_getData",
      value: function _getData(complete) {
        return {
          series: complete
        };
      }
      /**
       * Makes chart and returns the chart object.
       */

    }, {
      key: "_getImageStyle",
      value: function _getImageStyle(size) {
        var offset = "22%",
            diameter = "56%";

        if (this.size === "xs") {
          offset = "32%";
          diameter = "36%";
        } else if (this.size === "sm") {
          offset = "26%";
          diameter = "48%";
        } else if (this.size === "lg") {
          offset = "20%";
          diameter = "60%";
        } else if (this.size === "xl") {
          offset = "17%";
          diameter = "66%";
        }

        return "left: " + offset + "; top: " + offset + "; width: " + diameter + "; height: " + diameter + ";";
      }
      /**
       * Makes chart and returns the chart object.
       */

    }, {
      key: "_getOptions",
      value: function _getOptions(complete, total, size, colors, accentColor, dark) {
        var sum = 0;

        for (var i = 0; i < complete.length; i++) {
          sum += parseFloat(complete[i]);
        }

        return {
          donut: true,
          showLabel: false,
          startAngle: 0,
          total: Math.max(sum, total)
        };
      }
      /**
       * Handles chart creation event.
       */

    }, {
      key: "_onCreated",
      value: function _onCreated(e) {
        this.__chart = e.detail;
        this.makeChart(this.__chart);
      }
      /**
       * Makes chart and returns the chart object.
       */

    }, {
      key: "makeChart",
      value: function makeChart(chart) {
        if (chart !== undefined) {
          var colors = this.colors,
              strokeWidth = "10%",
              hex = _simpleColors.SimpleColors.colors,
              accent = this.accentColor !== null ? this.accentColor.replace(/-([a-z])/g, function (g) {
            return g[1].toUpperCase();
          }) : null;

          if (colors === undefined || colors === null || colors.length === 0) {
            if (accent !== null && hex[accent] !== null) {
              colors = this.dark ? [hex[accent][9], hex[accent][6], hex[accent][3], hex[accent][7], hex[accent][4]] : [hex[accent][0], hex[accent][3], hex[accent][5], hex[accent][2], hex[accent][4]];
            } else {
              colors = this.dark ? [hex.orange[6], hex.pink[4], hex.purple[5], hex.cyan[6], hex.lime[5]] : [hex.pink[5], hex.deepPurple[4], hex.blue[3], hex.teal[4], hex.yellow[5]];
            }
          }

          if (this.size === "xs") {
            strokeWidth = "8%";
          } else if (this.size === "sm") {
            strokeWidth = "9%";
          } else if (this.size === "lg") {
            strokeWidth = "11%";
          } else if (this.size === "xl") {
            strokeWidth = "12%";
          } // From chartist.js docs:


          chart.on("draw", function (data) {
            data.element._node.style.strokeWidth = strokeWidth;
            data.element._node.style.stroke = colors[data.index % colors.length];

            if (data.type === "slice") {
              var pathLength = data.element._node.getTotalLength();

              data.element.attr({
                "stroke-dasharray": pathLength + "px " + pathLength + "px"
              });
              var animationDefinition = {
                "stroke-dashoffset": {
                  id: "anim" + data.index,
                  dur: 500,
                  from: -pathLength + "px",
                  to: "0px",
                  easing: Chartist.Svg.Easing.easeOutQuint,
                  fill: "freeze"
                }
              };

              if (data.index !== 0) {
                animationDefinition["stroke-dashoffset"].begin = "anim" + (data.index - 1) + ".end";
              }

              data.element.attr({
                "stroke-dashoffset": -pathLength + "px"
              });
              data.element.animate(animationDefinition, false);
            }
          });
          return chart;
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_2c487ae0b3b911e9b58d79562a23326c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "progress-donut";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * An array of completed values
           */
          complete: {
            type: Array,
            value: []
          },

          /**
           * The thickness of the donut from 0-100
           */
          donutThickness: {
            type: Number
          },

          /**
           * An array of hex codes to use as colors for each section.
           * If null, colors are determined by accentColor & dark properties
           */
          colors: {
            type: Array,
            value: null
          },

          /**
           * An array of data for the donut chart
           */
          data: {
            type: Array,
            computed: "_getData(complete)"
          },

          /**
           * Accessible long description
           */
          desc: {
            type: String,
            value: null
          },

          /**
           * An array of data for the donut chart
           */
          options: {
            type: Array,
            computed: "_getOptions(complete,total,size,colors,accentColor,dark)"
          },

          /**
           * The source of the image in the center of the object.
           */
          imageSrc: {
            type: String,
            value: null,
            reflectToAttribute: true
          },

          /**
           * The alt text for the image.
           */
          imageAlt: {
            type: String,
            value: null,
            reflectToAttribute: true
          },

          /**
           * The style for the image based on the size of the donut
           */
          imageStyle: {
            type: String,
            computed: "_getImageStyle(size)"
          },

          /**
           * The size of the progress-donut: sx, sm, md, lg, or xl. Default is md
           */
          size: {
            type: String,
            value: "md",
            reflectToAttribute: true
          },

          /**
           * Title
           */
          title: {
            type: String
          },

          /**
           * a selected accent-color: grey, red, pink, purple, etc.
           */
          accentColor: {
            type: String,
            value: "grey",
            reflectToAttribute: true
          },

          /**
           * An array of incomplete values
           */
          total: {
            type: Number,
            value: 100
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(ProgressDonut), "properties", this));
        }

        return props;
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Sample gizmo",
            description: "The user will be able to see this for selection in a UI.",
            icon: "av:play-circle-filled",
            color: "grey",
            groups: ["Video", "Media"],
            handles: [{
              type: "video",
              url: "source"
            }],
            meta: {
              author: "Your organization on github"
            }
          },
          settings: {
            quick: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: []
          }
        };
      }
    }]);
    return ProgressDonut;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.ProgressDonut = ProgressDonut;
  window.customElements.define(ProgressDonut.tag, ProgressDonut);
});