define(["exports", "meta", "require", "../../../lit-element/lit-element.js", "../../img-pan-zoom/img-pan-zoom.js", "../../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _require, _litElement, _imgPanZoom, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ImgViewViewer = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject13_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        <p>\n          <input\n            type=\"number\"\n            min=\"1\"\n            max=\"", "\"\n            value=\"", "\"\n            @change=\"", "\"\n          />\n          of ", "\n        </p>\n      "]);

    _templateObject13_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject13_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject12_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        <table>\n          <caption>\n            Keyboard Shortcuts\n          </caption>\n          <tbody>\n            <tr>\n              <th scope=\"row\">pan\xA0up</th>\n              <td><kbd>w</kbd> or <kbd>&uarr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">pan\xA0down</th>\n              <td><kbd>s</kbd> or <kbd>&darr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">pan left</th>\n              <td><kbd>a</kbd> or <kbd>&larr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">pan\xA0right</th>\n              <td><kbd>d</kbd> or <kbd>&rarr;</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">home</th>\n              <td><kbd>0</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">zoom out</th>\n              <td><kbd>-</kbd> or <kbd>_</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">zoom in</th>\n              <td><kbd>+</kbd> or <kbd>=</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">rotate clockwise</th>\n              <td><kbd>r</kbd></td>\n            </tr>\n            <tr>\n              <th scope=\"row\">rotate counterclockwise</th>\n              <td><kbd>shift+r</kbd></td>\n            </tr>\n          </tbody>\n        </table>\n      "]);

    _templateObject12_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject12_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject11_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        toggle fullscreen\n      "]);

    _templateObject11_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject11_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject10_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          <simple-tooltip for=\"", "\">", "</simple-tooltip>\n        "]);

    _templateObject10_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject10_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject9_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          <p>\n            <iron-icon aria-hidden=\"true\" icon=\"", "\"></iron-icon>\n            <span class=\"", "\"\n              >", "</span\n            >\n          </p>\n        "]);

    _templateObject9_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject9_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject8_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          <button\n            .id=\"", "\"\n            ?hidden=\"", "\"\n            aria-pressed=\"", "\"\n            class=\"", "\"\n            controls=\"container\"\n            @click=\"", "\"\n          >\n            ", "\n          </button>\n          ", "\n        "]);

    _templateObject8_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject8_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject7_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          <button\n            .id=\"", "\"\n            class=\"", "\"\n            controls=\"container\"\n            @click=\"", "\"\n            ?disabled=\"", "\"\n          >\n            ", "\n          </button>\n          ", "\n        "]);

    _templateObject7_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject7_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject6_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n          <div\n            .id=\"", "\"\n            class=\"button-group ", "\"\n          >\n            ", "\n          </div>\n        "]);

    _templateObject6_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject6_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject5_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        <div class=\"misc-item\">", "</div>\n      "]);

    _templateObject5_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject5_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject4_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                  <hexagon-loader\n                    ?loading=", "\n                    item-count=\"4\"\n                    size=\"small\"\n                  ></hexagon-loader>\n                "]);

    _templateObject4_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject4_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject3_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            ", "\n            <img-loader\n              loaded=\"", "\"\n              @loaded-changed=\"", "\"\n              ?loading=\"", "\"\n              @loading-changed=\"", "\"\n              @page=\"", "\"\n              src=\"", "\"\n              described-by=\"", "\"\n            ></img-loader>\n          "]);

    _templateObject3_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject3_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject2_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <!-- Only preload regular images -->\n      ", "\n\n      <!-- Openseadragon -->\n      <div id=\"container\">\n        ", "\n        <div>\n          <div id=\"viewer\"></div>\n        </div>\n        <div id=\"placeholder\">\n          <div id=\"info\" ?hidden=\"", "\">\n            ", "\n          </div>\n        </div>\n        ", "\n      </div>\n    "]);

    _templateObject2_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject2_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  function _templateObject_a5974f70e8ab11eabe6cb3de058a4220() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          height: var(--img-view-viewer-height, 500px);\n        }\n        :host([hidden]),\n        *[hidden] {\n          display: none !important;\n        }\n        .sr-only {\n          position: absolute;\n          left: -9999999px;\n          width: 0;\n          overflow: hidden;\n        }\n        #container {\n          display: flex;\n          flex-direction: column;\n          align-items: stretch;\n          justify-content: space-between;\n          height: 100%;\n          background-color: var(--img-view-viewer-backgroundColor, white);\n          color: var(--img-view-viewer-color, black);\n        }\n        #container > * {\n          flex: 1 1 auto;\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        .misc-item,\n        .button-group {\n          display: flex;\n          align-items: stretch;\n          justify-content: center;\n        }\n        .misc-item {\n          align-items: center;\n          padding: 5px;\n        }\n        #top,\n        #bottom {\n          margin: 0;\n          flex: 0 0 auto;\n        }\n        #top > *,\n        #bottom > * {\n          margin: 0;\n        }\n        #top > *:not(:first-child),\n        #bottom > *:not(:first-child) {\n          border-left: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        button {\n          border: none;\n          background-color: transparent;\n        }\n        button.flex-grow {\n          flex: 1 0 auto;\n        }\n        button p {\n          display: flex;\n          align-items: center;\n          justify-content: flex-start;\n        }\n        button.icon-right p {\n          flex-direction: row-reverse;\n          justify-content: end;\n        }\n        button[aria-pressed=\"true\"] {\n          background-color: var(\n            --img-view-viewer-toggled-backgroundColor,\n            #eee\n          );\n        }\n        button:focus,\n        button:hover,\n        #viewer:focus-within {\n          outline: 1px solid blue;\n          z-index: 2;\n        }\n        simple-tooltip:not(:defined) {\n          display: none;\n        }\n        #placeholder {\n          position: relative;\n          max-height: 0;\n          overflow: visible;\n        }\n        #info {\n          position: absolute;\n          bottom: 0;\n          right: 0;\n          padding: 5px;\n          background-color: var(--img-view-viewer-backgroundColor, white);\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        table {\n          border-collapse: collapse;\n        }\n        th,\n        td {\n          padding: 2px 5px;\n          line-height: 140%;\n          border-top: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        th {\n          font-weight: normal;\n          text-align: left;\n        }\n        kbd {\n          border-radius: 2px;\n          padding: 1px 3px;\n          font-family: sans-serif;\n          font-size: 80%;\n          background: var(--img-view-viewer-toggled-backgroundColor, #eee);\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n        input[type=\"number\"] {\n          border: 1px solid var(--img-view-viewer-borderColor, #ddd);\n        }\n      "]);

    _templateObject_a5974f70e8ab11eabe6cb3de058a4220 = function _templateObject_a5974f70e8ab11eabe6cb3de058a4220() {
      return data;
    };

    return data;
  }

  /**
   * `img-view-viewer`
   * Combines img-pan-zoom and simple-modal for an easy image zoom solution
   * 
  ### Styling
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--img-view-viewer-backgroundColor` | background color | white
  `--img-view-viewer-color` | text color | black
  `--img-view-viewer-borderColor` | border color | #ddd
  `--img-view-viewer-toggled-backgroundColor` | background color of toggled buttons and kbd commands | #eee
   *
   * @demo demo/viewer.html
   * @element img-view-viewer
   * 
   */
  var ImgViewViewer =
  /*#__PURE__*/
  function (_ImgPanZoom) {
    babelHelpers.inherits(ImgViewViewer, _ImgPanZoom);
    babelHelpers.createClass(ImgViewViewer, null, [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer), "styles", this)), [(0, _litElement.css)(_templateObject_a5974f70e8ab11eabe6cb3de058a4220())]);
      }
    }]);

    function ImgViewViewer() {
      var _this;

      babelHelpers.classCallCheck(this, ImgViewViewer);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ImgViewViewer).call(this));
      _this.minZoomImageRatio = 1;
      _this.maxZoomPixelRatio = 3;
      _this.__screenfullLoaded = false;
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icon/iron-icon.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../../@polymer/iron-icons/image-icons.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../simple-tooltip/simple-tooltip.js"], res, rej);
      });

      if ((typeof screenfull === "undefined" ? "undefined" : babelHelpers.typeof(screenfull)) === "object") {
        _this._onScreenfullLoaded();
      } else {
        var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

        var location = "".concat(basePath, "screenfull/dist/screenfull.js");
        window.ESGlobalBridge.requestAvailability();
        window.ESGlobalBridge.instance.load("screenfullLib", location);
        window.addEventListener("es-bridge-screenfullLib-loaded", _this._onScreenfullLoaded);
      }

      return _this;
    }
    /**
     * life cycle, element is removed from the DOM
     */


    babelHelpers.createClass(ImgViewViewer, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-screenfullLib-loaded", this._onScreenfullLoaded);
        babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        return (0, _litElement.html)(_templateObject2_a5974f70e8ab11eabe6cb3de058a4220(), !this.dzi ? (0, _litElement.html)(_templateObject3_a5974f70e8ab11eabe6cb3de058a4220(), this.hideSpinner || this.loaded ? "" : (0, _litElement.html)(_templateObject4_a5974f70e8ab11eabe6cb3de058a4220(), this.loading || !this.loaded), this.loaded, this.loadedChangedEvent, this.loading, this.loadingChangedEvent, function (e) {
          return _this2.page = e.page;
        }, this.src, this.describedBy || "") : "", this.getToolbars(this.defaultToolbars, this.toolbars, "top"), !this.info, this.info, this.getToolbars(this.defaultToolbars, this.toolbars, "bottom"));
      }
    }, {
      key: "getToolbars",
      value: function getToolbars(defaultToolbars, customToolbars) {
        var topOrBottom = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "bottom";

        var toolbars = customToolbars || defaultToolbars,
            toolbar = toolbars && toolbars[topOrBottom] ? toolbars[topOrBottom] : {
          id: topOrBottom,
          contents: ""
        },
            div = this._item(toolbar);

        return div;
      }
      /**
       * default home button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "_item",

      /**
       * makes a toolbar item from config
       *  TOOLBAR CONFIG SCHEMA: {
       *    id : {{itemid / certain ids have default configs and bindings that can be used or overridden}},
       *    config: {{if item is a button, button config}},
       *    contents: {{if item is a group, string of text or array of items}},
       *  }
       * @param {*} [config={}]
       * @memberof imgViewViewer
       */
      value: function _item() {
        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (typeof config === "string" && this[config]) config = this[config];

        if (babelHelpers.typeof(config) !== "object") {
          return (0, _litElement.html)(_templateObject5_a5974f70e8ab11eabe6cb3de058a4220(), config);
        } else if (config && babelHelpers.typeof(config.contents) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          return this._button(config);
        } else {
          return this._group(config);
        }
      }
      /**
       * makes a toolbar group from config
       *  GROUP CONFIG SCHEMA: {
       *    id : {{groupid / certain ids have default item groupings that can be used or overridden}},
       *    type: {{group type to add to classlist}},
       *    contents: {{sting of text content or array of items in the group}}
       *  }
       * @param {object} [config={}]
       * @param {string} [id='']
       * @returns toolbar group html template
       * @memberof imgViewViewer
       */

    }, {
      key: "_group",
      value: function _group() {
        var _this3 = this;

        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (typeof config === "string" && this[config]) config = this[config];
        return !config ? "" : (0, _litElement.html)(_templateObject6_a5974f70e8ab11eabe6cb3de058a4220(), config.id || undefined, config.type || "", !Array.isArray(config.contents) ? config.contents : (config.contents || []).map(function (item) {
          return _this3._item(item);
        }));
      }
      /**
       * makes a toolbar button from config
       *  BUTTON CONFIG SCHEMA: {
       *    toggleProp : {{if button toggles, property button toggles}},
       *    icon: {{button icon}},
       *    iconRight: {{show icon to the right of text intead of left}},
       *    text: {{button text / default tooltip}},
       *    showText: {{show button text even if button has an icon}},
       *    tooltip: {{override button text as tooltip}}
       *  }
       * @param {object} [config={}]
       * @param {string} id
       * @returns button html template
       * @memberof imgViewViewer
       */

    }, {
      key: "_button",
      value: function _button() {
        var _this4 = this;

        var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        if (typeof config === "string" && this[config]) config = this[config]; //if (config) this._bindButton(config.id, config.tooltip || config.text);

        return !config ? "" : !config.toggleProp || !this[config.toggleProp] ? (0, _litElement.html)(_templateObject7_a5974f70e8ab11eabe6cb3de058a4220(), config.id || undefined, this._buttonClass(config), function (e) {
          return _this4._toolbarButtonClick(config.id, e);
        }, config.id === "prevbutton" && this.prevDisabled || config.id === "nextbutton" && this.nextDisabled, this._buttonInner(config), this._tooltip(config)) : (0, _litElement.html)(_templateObject8_a5974f70e8ab11eabe6cb3de058a4220(), config.id || undefined, config.id === "navigatorbutton" && !this.showNavigator || config.id === "infobutton" && this.figures.length === 0, this[config.toggleProp] ? "true" : "false", this._buttonClass(config), function (e) {
          return _this4._toolbarButtonClick(config.id, e);
        }, this._buttonInner(config), this._tooltip(config));
      }
    }, {
      key: "_buttonClass",
      value: function _buttonClass(config) {
        return "".concat(config.iconRight ? "icon-right" : "").concat(config.flexGrow ? " flex-grow" : "");
      }
    }, {
      key: "_buttonInner",
      value: function _buttonInner(config) {
        return !config ? "" : (0, _litElement.html)(_templateObject9_a5974f70e8ab11eabe6cb3de058a4220(), config.icon, config.icon && !config.showText ? "sr-only" : "", config.text);
      }
    }, {
      key: "_tooltip",
      value: function _tooltip(config) {
        return !config || !config.id ? "" : (0, _litElement.html)(_templateObject10_a5974f70e8ab11eabe6cb3de058a4220(), config.id, config.text);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {});
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        if (!this.src && this.sources.length === 0 && this.figures.length > 0) {
          var figs = this.figures.map(function (fig) {
            return fig.src;
          });
          this.src = figs[0];
          this.sources = figs.slice(1);
        }

        if (babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer.prototype), "firstUpdated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer.prototype), "firstUpdated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {});
      }
      /**
       * overrides fullscreen API
       *
       * @param {*} [mode=this.fullscreenToggled]
       * @memberof ImgPanZoom
       */

    }, {
      key: "_setFullscreen",
      value: function _setFullscreen() {
        var mode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.fullscreenToggled;
        console.log("fullscreen stuff", mode);

        if (this.fullscreenEnabled) {
          if (screenfull) {
            if (mode) {
              screenfull.request(this.shadowRoot.querySelector("#container"));
            } else {
              screenfull.exit(this.shadowRoot.querySelector("#container"));
            }
          }
        }
      }
      /**
       * sets the element's __screenfullLoaded variable to true once screenfull is loaded
       * and adds an event listener for screenfull
       * @param {event} e screenfull load
       */

    }, {
      key: "_onScreenfullLoaded",
      value: function _onScreenfullLoaded() {
        this.__screenfullLoaded = true;
      }
      /**
       * toggles fullscreen
       * @param {boolean} Toggle fullscreen on? `true` is on, `false` is off, and `null` toggles based on current state.
       */

    }, {
      key: "toggleFullscreen",
      value: function toggleFullscreen(mode) {}
    }, {
      key: "_toolbarButtonClick",
      value: function _toolbarButtonClick(buttonId, eventType) {
        /**
         * Fires when constructed, so that parent radio group can listen for it.
         *
         * @event toolbar-button-click
         */
        this.dispatchEvent(new CustomEvent("toolbar-button-click", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            buttonId: buttonId,
            eventType: eventType,
            viewer: this
          }
        }));
        if (buttonId === "homebutton") this.resetZoom();
        if (buttonId === "panupbutton") this.pan(0, 0.2);
        if (buttonId === "pandownbutton") this.pan(0, -0.2);
        if (buttonId === "panleftbutton") this.pan(0.2, 0);
        if (buttonId === "panrightbutton") this.pan(-0.2, 0);
        if (buttonId === "zoominbutton") this.zoomIn(0.2);
        if (buttonId === "zoomoutbutton") this.zoomOut(0.2);
        if (buttonId === "rotateccwbutton") this.rotate(-90);
        if (buttonId === "rotatecwbutton") this.rotate(90);
        if (buttonId === "navigatorbutton") this.navigatorToggled = !this.navigatorToggled;
        if (buttonId === "fullscreenbutton") this.fullscreenToggled = !this.fullscreenToggled;
        if (buttonId === "flipbutton") this.flipToggled = !this.flipToggled;

        if (buttonId === "infobutton") {
          this.kbdToggled = false;
          this.infoToggled = !this.infoToggled;
        }

        if (buttonId === "kbdbutton") {
          this.infoToggled = false;
          this.kbdToggled = !this.kbdToggled;
        }

        if (buttonId === "nextbutton") {
          this.page = Math.min(this.page + 1, this.viewer.tileSources.length - 1);
        }

        if (buttonId === "prevbutton") {
          this.page = Math.max(0, this.page - 1);
        }
      }
    }, {
      key: "goToPageXofY",
      value: function goToPageXofY(e) {
        this._toolbarButtonClick("navXofY", e);

        this.page = e.path[0].value - 1;
      }
    }, {
      key: "homebutton",
      get: function get() {
        return {
          id: "homebutton",
          icon: "home",
          text: "return image to home position"
        };
      }
      /**
       * default toggle fullscreen button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "fullscreenbutton",
      get: function get() {
        return {
          id: "fullscreenbutton",
          icon: "fullscreen",
          toggleProp: "fullscreenToggled",
          text: (0, _litElement.html)(_templateObject11_a5974f70e8ab11eabe6cb3de058a4220())
        };
      }
      /**
       * whether or not the fullscreen mode is be disabled
       * @returns {boolean}
       */

    }, {
      key: "fullscreenEnabled",
      get: function get() {
        var mobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        return (typeof screenfull === "undefined" ? "undefined" : babelHelpers.typeof(screenfull)) === "object" && !mobile;
      }
      /**
       * default toggle navigate window button configuration
       * Uses <a href="https://openseadragon.github.io/examples/ui-viewport-navigator/">Viewport Navigator</a>
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "navigatorbutton",
      get: function get() {
        return {
          id: "navigatorbutton",
          icon: "picture-in-picture",
          toggleProp: "navigatorToggled",
          text: "toggle nav window"
        };
      }
      /**
       * default toggle info button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "infobutton",
      get: function get() {
        return {
          id: "infobutton",
          icon: "info-outline",
          toggleProp: "infoToggled",
          text: "toggle information"
        };
      }
      /**
       * default toggle keyboard shorcuts help button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "kbdbutton",
      get: function get() {
        return {
          id: "kbdbutton",
          icon: "help-outline",
          toggleProp: "kbdToggled",
          text: "toggle keyboard shorcuts help",
          details: (0, _litElement.html)(_templateObject12_a5974f70e8ab11eabe6cb3de058a4220())
        };
      }
      /**
       * default flip horizontal button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "flipbutton",
      get: function get() {
        return {
          id: "flipbutton",
          icon: "image:flip",
          text: "flip horizontal",
          toggleProp: "flipToggled"
        };
      }
      /**
       * default rotate button group configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "rotategroup",
      get: function get() {
        return {
          id: "rotategroup",
          type: "toolbar-group",
          contents: [this.rotateccwbutton, this.rotatecwbutton]
        };
      }
      /**
       * default rotate counterclockwise button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "rotateccwbutton",
      get: function get() {
        return {
          id: "rotateccwbutton",
          icon: "image:rotate-left",
          text: "rotate counterclockwise"
        };
      }
      /**
       * default rotate counter button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "rotatecwbutton",
      get: function get() {
        return {
          id: "rotatecwbutton",
          icon: "image:rotate-right",
          text: "rotate clockwise"
        };
      }
      /**
       * default pan button group configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "pangroup",
      get: function get() {
        return {
          id: "pangroup",
          type: "toolbar-group",
          contents: [this.panleftbutton, this.panupbutton, this.pandownbutton, this.panrightbutton]
        };
      }
      /**
       * default pan left button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "panleftbutton",
      get: function get() {
        return {
          id: "panleftbutton",
          icon: "arrow-back",
          text: "pan left"
        };
      }
      /**
       * default pan up button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "panupbutton",
      get: function get() {
        return {
          id: "panupbutton",
          icon: "arrow-upward",
          text: "pan up"
        };
      }
      /**
       * default pan down button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "pandownbutton",
      get: function get() {
        return {
          id: "pandownbutton",
          icon: "arrow-downward",
          text: "pan down"
        };
      }
      /**
       * default pan right button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "panrightbutton",
      get: function get() {
        return {
          id: "panrightbutton",
          icon: "arrow-forward",
          text: "pan right"
        };
      }
      /**
       * default zoom button group configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "zoomgroup",
      get: function get() {
        return {
          id: "zoomgroup",
          type: "toolbar-group",
          contents: [this.zoominbutton, this.zoomoutbutton]
        };
      }
      /**
       * default zoom in button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "zoominbutton",
      get: function get() {
        return {
          id: "zoominbutton",
          icon: "zoom-in",
          text: "zoom in"
        };
      }
      /**
       * default zoom out button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "zoomoutbutton",
      get: function get() {
        return {
          id: "zoomoutbutton",
          icon: "zoom-out",
          text: "zoom out"
        };
      }
      /**
       * default prev button configuration
       * @return {object}
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "prevbutton",
      get: function get() {
        return {
          id: "prevbutton",
          showText: true,
          icon: "chevron-left",
          text: "prev",
          flexGrow: true
        };
      }
      /**
       * default next button configuration
       * @return {object} as { id, icon, iconRight, text, and showText }
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "nextbutton",
      get: function get() {
        return {
          id: "nextbutton",
          icon: "chevron-right",
          iconRight: true,
          text: "next",
          showText: true,
          flexGrow: true
        };
      }
    }, {
      key: "tileSources",
      get: function get() {
        return [this.src].concat(babelHelpers.toConsumableArray(this.sources));
      }
    }, {
      key: "prevDisabled",
      get: function get() {
        return this.page <= 0;
      }
    }, {
      key: "nextDisabled",
      get: function get() {
        return this.page + 1 >= this.tileSources.length;
      }
    }, {
      key: "info",
      get: function get() {
        return this.kbdToggled && this.kbdbutton.details ? this.kbdbutton.details : this.infoToggled && this.figures && this.figures[this.page] && this.figures[this.page].info ? this.figures[this.page].info : undefined;
      }
      /**
       * default x of y text for toolbar
       * @returns {string} 'x of y'
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "pageXofY",
      get: function get() {
        return "".concat((this.page || 0) + 1, " of ").concat(this.tileSources.length);
      }
    }, {
      key: "navXofY",
      get: function get() {
        return {
          id: "navXofY",
          type: "misc-item",
          contents: (0, _litElement.html)(_templateObject13_a5974f70e8ab11eabe6cb3de058a4220(), this.tileSources.length, this.page + 1, this.goToPageXofY, this.tileSources.length)
        };
      }
      /**
       * default toolbar config object,
       * where "top" contains config for toolbar above image(s),
       * and "bottom" contains config for toolbar above image(s)
       * @return {object} as { top: { id="top", contents:[]},  id="bottom", contents:[]}, }
       *
       * @readonly
       * @memberof imgViewViewer
       */

    }, {
      key: "defaultToolbars",
      get: function get() {
        return {
          bottom: {
            id: "bottom",
            type: "toolbar-group",
            contents: ["prevbutton", "rotategroup", "zoomgroup", "homebutton", "pangroup", "nextbutton"]
          }
        };
      }
    }], [{
      key: "tag",
      get: function get() {
        return "img-view-viewer";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ImgViewViewer), "properties", this), {
          figures: {
            type: Array
          },

          /**
           * whether info mode is toggled
           */
          infoToggled: {
            type: Boolean,
            attribute: "info-mode",
            reflect: true
          },

          /**
           * whether keyboard shortcuts help mode is toggled
           */
          kbdToggled: {
            type: Boolean,
            attribute: "keyboard-help-mode",
            reflect: true
          },

          /**
           * if used with multiple images and paged navigation, index of current item
           */
          toolbars: {
            type: Object,
            attribute: "toolbars",
            reflect: true
          },
          __screenfullLoaded: {
            type: Boolean
          }
        });
      }
    }]);
    return ImgViewViewer;
  }(_imgPanZoom.ImgPanZoom);

  _exports.ImgViewViewer = ImgViewViewer;
  window.customElements.define(ImgViewViewer.tag, ImgViewViewer);
});