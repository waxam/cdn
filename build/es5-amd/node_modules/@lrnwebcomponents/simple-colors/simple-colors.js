define(["exports", "../../@polymer/polymer/polymer-element.js", "./lib/simple-colors-styles.js"], function (_exports, _polymerElement, _simpleColorsStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleColors = void 0;

  function _templateObject_7205f2b0b49511e9bfd4f79a8a57e0f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style></style>\n      <slot></slot>\n    "]);

    _templateObject_7205f2b0b49511e9bfd4f79a8a57e0f7 = function _templateObject_7205f2b0b49511e9bfd4f79a8a57e0f7() {
      return data;
    };

    return data;
  }

  /**
   * `simple-colors`
   * `a shared set of styles for @lrnwebcomponents`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html demo
   * @demo demo/how.html getting started
   * @demo demo/colors.html all of the colors
   * @demo demo/picker.html simple-colors-picker
   * @demo demo/extending.html extending simple-colors
   */
  var SimpleColors =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SimpleColors, _PolymerElement);

    function SimpleColors() {
      babelHelpers.classCallCheck(this, SimpleColors);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleColors).apply(this, arguments));
    }

    babelHelpers.createClass(SimpleColors, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColors.prototype), "ready", this).call(this);
        var styles = window.SimpleColorsStyles.requestAvailability();

        if (!this.inheritStyles) {
          var style = document.createElement("style"),
              ruleList = styles.cssRules;
          this.shadowRoot.appendChild(style);
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = ruleList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              var rule = _step.value;
              var text = rule.cssText;
              style.innerText += text;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }
        }
      }
      /**
       * returns the maximum contrast to the shade
       *
       * @param {string} the shade
       * @param {number} the shade with maximum contrast
       */

    }, {
      key: "maxContrastShade",
      value: function maxContrastShade(shade) {
        return this.__utils.maxContrastShade(shade);
      }
      /**
       * gets the current shade
       *
       * @param {string} the shade
       * @param {number} the inverted shade
       */

    }, {
      key: "invertShade",
      value: function invertShade(shade) {
        return this.__utils.invertShade(shade);
      }
      /**
       * gets the color information of a given CSS variable or class
       *
       * @param {string} the CSS variable (eg. `--simple-colors-fixed-theme-red-3`) or a class (eg. `.simple-colors-fixed-theme-red-3-text`)
       * @param {object} an object that includes the theme, color, and shade information
       */

    }, {
      key: "getColorInfo",
      value: function getColorInfo(colorName) {
        return this.__utils.getColorInfo(colorName);
      }
      /**
       * returns a variable based on color name, shade, and fixed theme
       *
       * @param {string} the color name
       * @param {number} the color shade
       * @param {boolean} the color shade
       * @returns {string} the CSS Variable
       */

    }, {
      key: "makeVariable",
      value: function makeVariable() {
        var color = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "grey";
        var shade = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
        var theme = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "default";
        return this.__utils.makeVariable(color = "grey", shade = 1, theme = "default");
      }
      /**
       * for large or small text given a color and its shade,
       * lists all the colors and shades that would be
       * WCAG 2.0 AA-compliant for contrast
       *
       * @param {boolean} large text? >= 18pt || (bold && >= 14pt)
       * @param {string} color name, e.g. "deep-purple"
       * @param {string} color shade, e.g. 3
       * @param {object} all of the WCAG 2.0 AA-compliant colors and shades
       */

    }, {
      key: "getContrastingColors",
      value: function getContrastingColors(colorName, colorShade, isLarge) {
        return this.__utils.getContrastingColors(colorName, colorShade, isLarge);
      }
      /**
       * for large or small text given a color and its shade,
       * lists all the shades of another color that would be
       * WCAG 2.0 AA-compliant for contrast
       *
       * @param {boolean} large text? >= 18pt || (bold && >= 14pt)
       * @param {string} color name, e.g. "deep-purple"
       * @param {string} color shade, e.g. 3
       * @param {string} contrasting color name, e.g. "grey"
       * @param {array} all of the WCAG 2.0 AA-compliant shades of the contrasting color
       */

    }, {
      key: "getContrastingShades",
      value: function getContrastingShades(isLarge, colorName, colorShade, contrastName) {
        return this.__utils.getContrastingShades(isLarge, colorName, colorShade, contrastName);
      }
      /**
       * determines if two shades are WCAG 2.0 AA-compliant for contrast
       *
       * @param {boolean} large text? >= 18pt || (bold && >= 14pt)
       * @param {string} color name, e.g. "deep-purple"
       * @param {string} color shade, e.g. 3
       * @param {string} contrasting color name, e.g. "grey"
       * @param {string} contrast shade, e.g. 12
       * @param {boolean} whether or not the contrasting shade is WCAG 2.0 AA-compliant
       */

    }, {
      key: "isContrastCompliant",
      value: function isContrastCompliant(isLarge, colorName, colorShade, contrastName, contrastShade) {
        return this.__utils.isContrastCompliant(isLarge, colorName, colorShade, contrastName, contrastShade);
      }
    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_7205f2b0b49511e9bfd4f79a8a57e0f7());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * a selected accent-color: grey, red, pink, purple, etc.
           */
          accentColor: {
            name: "accentColor",
            type: "String",
            value: "grey",
            reflectToAttribute: true,
            notify: true
          },

          /**
           * make the default theme dark?
           */
          dark: {
            name: "dark",
            type: "Boolean",
            value: false,
            reflectToAttribute: true,
            notify: true
          },

          /**
           * make the default theme dark?
           */
          colors: {
            name: "colors",
            type: "Object",
            value: window.SimpleColorsStyles.colors,
            notify: true
          },

          /**
           * styles inherited based on an ancestor's accent and dark attributes.
           */
          inheritStyles: {
            name: "inheritStyles",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          }
        };
      }
    }, {
      key: "tag",
      get: function get() {
        return "simple-colors";
      }
    }]);
    return SimpleColors;
  }(_polymerElement.PolymerElement);

  _exports.SimpleColors = SimpleColors;
  customElements.define(SimpleColors.tag, SimpleColors);
});