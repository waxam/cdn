define(["exports", "../../../../@polymer/polymer/polymer-element.js", "../../simple-colors.js"], function (_exports, _polymerElement, _simpleColors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.simpleColorsSwatchInfo = void 0;

  function _templateObject_13404ab0dedd11e9bf5a076df0f16721() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"simple-colors-shared-styles\">\n        :host {\n          display: block;\n          margin: 15px 0;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host table {\n          width: 100%;\n          border: 1px solid black;\n          border-radius: 3px;\n          border-collapse: collapse;\n          margin: 0 0 15px;\n        }\n        :host table caption {\n          font-weight: bold;\n          background-color: #222;\n          color: white;\n        }\n        :host table th {\n          background-color: #e0e0e0;\n        }\n        :host table caption,\n        :host table th,\n        :host table td {\n          padding: 5px;\n          border: 1px solid black;\n          text-align: left;\n          line-height: 160%;\n        }\n        :host table td span {\n          padding: 5px; \n          white-space: nowrap;\n          margin: 5px 0;\n        }\n      </style>\n      <table summary=\"Each row represents a CSS variable or class with a description of what it does without the dark attribute and with the attribute.\">\n        <caption>\n          CSS Variables and Classes for [[swatchName]]\n        </caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Variable Name</th>\n            <th scope=\"col\">Color</th>\n            <th scope=\"col\">With <tt>dark</tt> Attribute</th>\n          </tr>\n        <thead>\n        <tbody>\n          <tr>\n            <th scope=\"row\">\n              --simple-colors-default-theme-[[swatchName]]\n            </th>\n            <td style$=\"[[bg]]\">default color</td>\n            <td style$=\"[[inverseBg]]\">inverted color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              --simple-colors-fixed-theme-[[swatchName]]\n            </th>\n            <td style$=\"[[bg]]\">default color</td>\n            <td style$=\"[[bg]]\">fixed color</td>\n          </tr>\n        </tbody>\n      </table>\n      \n      <table summary=\"A list of colors that meet WCAG 2.0 AA contrast requirements. Each contains all the contrasting shades for a given color, based on whether or not the text is regular or large.\">\n        <caption>WCAG 2.0 AA Contrast with [[swatchName]]</caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Color Name</th>\n            <th scope=\"col\">Regular Text</th>\n            <th scope=\"col\">Large Text*</th>\n          </tr>\n        </thead>\n        <tbody>\n          <template is=\"dom-repeat\" items=\"[[_getOptions(colors)]]\" as=\"color\">\n            <tr>\n              <th scope=\"row\">[[color]]</th>\n              <td>\n                <template is=\"dom-repeat\" items=\"[[_getAa(swatchId,color)]]\" as=\"contrast\">\n                  <span class=\"contrast\" style$=\"[[_getContrastBg(color,contrast)]]\">[[color]]-[[contrast]]</span>\n                </template>\n              </td>\n              <td>\n                <template is=\"dom-repeat\" items=\"[[_getAaLarge(swatchId,color)]]\" as=\"contrast\">\n                  <span class=\"contrast\" style$=\"[[_getContrastBg(color,contrast)]]\">[[color]]-[[contrast]]</span>\n                </template>\n              </td>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n      <p><small>* Large text is defined as bold text at least 14pt or normal text at least 18pt</small></p>\n    "]);

    _templateObject_13404ab0dedd11e9bf5a076df0f16721 = function _templateObject_13404ab0dedd11e9bf5a076df0f16721() {
      return data;
    };

    return data;
  }

  //import the shared styles

  /**
   * `simple-colors-swatch-info`
   * `A tool to document of all the colors in simple-colors`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/colors.html demo
   * @see "../../simple-colors.js"
   * @see "../simple-colors-picker.js"
   */
  var simpleColorsSwatchInfo =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(simpleColorsSwatchInfo, _SimpleColors);

    function simpleColorsSwatchInfo() {
      babelHelpers.classCallCheck(this, simpleColorsSwatchInfo);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(simpleColorsSwatchInfo).apply(this, arguments));
    }

    babelHelpers.createClass(simpleColorsSwatchInfo, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(simpleColorsSwatchInfo.prototype), "connectedCallback", this).call(this);
      }
      /**
       * life cycle, element is readt
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(simpleColorsSwatchInfo.prototype), "ready", this).call(this);
      }
      /**
       * given a particular swatch/shade of color,
       * returns all shades of another color that are WCAG 2.0AA-compliant
       *
       * @param {string} a swatch id (`color_index`)
       * @param {string} another color's name, eg. `pink`
       * @param {boolean} get contrasting shades that work for large text? eg. (bold && >= 14pt) || >= 18pt
       * @returns {array} the array indexes for the contrasting shades
       */

    }, {
      key: "_getAa",
      value: function _getAa(swatchId, color) {
        var aaLarge = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
        var data = swatchId.split("_"),
            index = parseInt(data[1]);
        return this.getContrastingShades(false, data[0], index, color);
      }
      /**
       * given a particular swatch/shade of color,
       * returns all shades of another color that are
       * large text-WCAG 2.0AA-compliant, eg. (bold && >= 14pt) || >= 18pt
       *
       * @param {string} a swatch id (`color_index`)
       * @param {string} another color's name, eg. `pink`
       * @returns {array} the array indexes for the contrasting shades
       */

    }, {
      key: "_getAaLarge",
      value: function _getAaLarge(swatchId, color) {
        return this._getAa(swatchId, color, true);
      }
      /**
       * gets a style where swatch color is the background-color,
       * eg. `background: var(--simple-colors-default-theme-red-11); color: var(--simple-colors-default-theme-grey-1);`
       *
       * @param {string} a swatch id (`color_index`)
       * @returns {string} the style
       */

    }, {
      key: "_getBg",
      value: function _getBg(swatchId) {
        var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var colors = this._getColors(swatchId, inverse);

        return "background: " + colors[0] + "; color: " + colors[1] + ";";
      }
      /**
       * gets a style where swatch color is the background-color in dark mode,
       * eg. `background: var(--simple-colors-default-theme-red-2); color: var(--simple-colors-default-theme-grey-12);`
       *
       * @param {string} a swatch id (`color_index`)
       * @returns {string} the style
       */

    }, {
      key: "_getInverseBg",
      value: function _getInverseBg(swatchId) {
        return this._getBg(swatchId, true);
      }
      /**
       * gets a style where swatch color is the text color in dark mode,
       * eg. `background: var(--simple-colors-default-theme-grey-12); color: var(--simple-colors-default-theme-red-2);`
       *
       * @param {string} a swatch id (`color_index`)
       * @returns {string} the style
       */

    }, {
      key: "_getInverseText",
      value: function _getInverseText(swatchId) {
        return this._getText(swatchId, true);
      }
      /**
       * gets the list of color names from the colors object
       *
       * @param {object} the colors object
       * @returns {array} the array of color names
       */

    }, {
      key: "_getOptions",
      value: function _getOptions(obj) {
        return Object.keys(obj);
      }
      /**
       * gets a style where swatch color is the text color,
       * eg. `background: var(--simple-colors-default-theme-grey-1); color: var(--simple-colors-default-theme-red-11);`
       *
       * @param {string} a swatch id (`color_index`)
       * @returns {string} the style
       */

    }, {
      key: "_getText",
      value: function _getText(swatchId) {
        var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        var colors = this._getColors(swatchId, inverse);

        return "color: " + colors[0] + "; background: " + colors[1] + ";";
      }
      /**
       * gets a background color based on a color and a shade
       *
       * @param {string} a color name, eg. `red`
       * @param  {number} the shade, eg., `11`
       * @returns {string} the style, eg. `background: var(--simple-colors-default-theme-red-11); color: var(--simple-colors-default-theme-grey-1);`
       */

    }, {
      key: "_getContrastBg",
      value: function _getContrastBg(color, shade) {
        return this._getBg(color + "_" + (parseInt(shade) - 1));
      }
      /**
       * given a swatch id, gets the color variable
       * and a variable for the highest contrasting grey
       *
       * @param {string} swatchId (`color_index`)
       * @param {boolean} inverse the color for dark mode?
       * @returns {array} the color variables ([color, contrasting color])
       */

    }, {
      key: "_getColors",
      value: function _getColors(swatchId) {
        var inverse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        var data = swatchId.split("_"),
            index = inverse ? 11 - parseInt(data[1]) : parseInt(data[1]);
        return [this.colors[data[0]][index], this.colors.grey[index > 5 ? 0 : 11]];
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "template",
      //render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_13404ab0dedd11e9bf5a076df0f16721());
      }
      /**
       * properties available to the custom element for data binding
       */

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The id of the swatch (`color_index`)
           */
          swatchId: {
            name: "swatchId",
            type: "String",
            value: "grey_0",
            reflectToAttribute: true
          },

          /**
           * The swatch name (`color-shade`)
           */
          swatchName: {
            name: "swatchName",
            type: "String",
            value: "grey-1",
            reflectToAttribute: true
          },

          /**
           * A style where swatch color is the background-color
           */
          bg: {
            name: "bg",
            type: "String",
            computed: "_getBg(swatchId)"
          },

          /**
           * A style where swatch color is the background-color in dark mode
           */
          inverseBg: {
            name: "inverseBg",
            type: "String",
            computed: "_getInverseBg(swatchId)"
          },

          /**
           * A style where swatch color is the text color
           */
          text: {
            name: "text",
            type: "String",
            computed: "_getText(swatchId)"
          },

          /**
           * A style where swatch color is the text color in dark mode
           */
          inverseText: {
            name: "inverseText",
            type: "String",
            computed: "_getInverseText(swatchId)"
          }
        };
      }
      /**
       * gets simple-colors behaviors
       */

    }, {
      key: "behaviors",
      get: function get() {
        return [_simpleColors.SimpleColors];
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-colors-swatch-info";
      }
    }]);
    return simpleColorsSwatchInfo;
  }(_simpleColors.SimpleColors);

  _exports.simpleColorsSwatchInfo = simpleColorsSwatchInfo;
  window.customElements.define(simpleColorsSwatchInfo.tag, simpleColorsSwatchInfo);
});