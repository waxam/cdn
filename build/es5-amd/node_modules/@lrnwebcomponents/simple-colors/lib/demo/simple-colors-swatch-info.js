define(["exports","../../../../@polymer/polymer/polymer-element.js","../../simple-colors.js"],function(_exports,_polymerElement,_simpleColors){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.simpleColorsSwatchInfo=void 0;function _templateObject_574e6410518b11e9b59003d8a4d666f3(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\" include=\"simple-colors\">\n        :host {\n          display: block;\n          margin: 15px 0;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host table {\n          width: 100%;\n          border: 1px solid black;\n          border-radius: 3px;\n          border-collapse: collapse;\n          margin: 0 0 15px;\n        }\n        :host table caption {\n          font-weight: bold;\n          background-color: #222;\n          color: white;\n        }\n        :host table th {\n          background-color: #e0e0e0;\n        }\n        :host table caption,\n        :host table th,\n        :host table td {\n          padding: 5px;\n          border: 1px solid black;\n          text-align: left;\n          line-height: 160%;\n        }\n        :host table td span {\n          padding: 5px; \n          white-space: nowrap;\n          margin: 5px 0;\n        }\n      </style>\n      <table summary=\"Each row represents a CSS variable or class with a description of what it does without the dark attribute and with the attribute.\">\n        <caption>\n          CSS Variables and Classes for [[swatchName]]\n        </caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Variable or Class Name</th>\n            <th scope=\"col\">Color</th>\n            <th scope=\"col\">With <tt>dark</tt> Attribute</th>\n          </tr>\n        <thead>\n        <tbody>\n          <tr>\n            <th scope=\"row\">\n              --simple-colors-default-theme-[[swatchName]]\n            </th>\n            <td style$=\"[[bg]]\">default color</td>\n            <td style$=\"[[inverseBg]]\">inverted color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              --simple-colors-fixed-theme-[[swatchName]]\n            </th>\n            <td style$=\"[[bg]]\">default color</td>\n            <td style$=\"[[bg]]\">fixed color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              <tt>.simple-colors-default-theme-[[swatchName]]</tt>\n            </th>\n            <td style$=\"[[bg]]\">default background color</td>\n            <td style$=\"[[inverseBg]]\">inverted background color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              <tt>.simple-colors-fixed-theme-[[swatchName]]</tt>\n            </th>\n            <td style$=\"[[bg]]\">default background color</td>\n            <td style$=\"[[bg]]\">fixed background color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              <tt>.simple-colors-default-theme-[[swatchName]]-text</tt>\n            </th>\n            <td style$=\"[[text]]\">default text color</td>\n            <td style$=\"[[inverseText]]\">inverted text color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              <tt>.simple-colors-fixed-theme-[[swatchName]]-text</tt>\n            </th>\n            <td style$=\"[[text]]\">default text color</td>\n            <td style$=\"[[text]]\">fixed text color</td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              <tt>.simple-colors-default-theme-[[swatchName]]-border</tt>\n            </th>\n            <td>\n              <div>\n                <span style$=\"[[border]]\"> default border color</span>\n              </div>\n            </td>\n            <td>\n              <div>\n                <span style$=\"[[inverseBorder]]\">inverted border color</span>\n              </div>\n            </td>\n          </tr>\n          <tr>\n            <th scope=\"row\">\n              <tt>.simple-colors-fixed-theme-[[swatchName]]-border</tt>\n            </th>\n            <td>\n              <div style$=\"[[border]]\">\n                default border color\n              </div>\n            </td>\n            <td>\n              <div style$=\"[[border]]\">\n                fixed border color\n              </div>\n            </td>\n          </tr>\n        </tbody>\n      </table>\n      \n      <table summary=\"A list of colors that meet WCAG 2.0 AA contrast requirements. Each contains all the contrasting shades for a given color, based on whether or not the text is regular or large.\">\n        <caption>WCAG 2.0 AA Contrast with [[swatchName]]</caption>\n        <thead>\n          <tr>\n            <th scope=\"col\">Color Name</th>\n            <th scope=\"col\">Regular Text</th>\n            <th scope=\"col\">Large Text*</th>\n          </tr>\n        </thead>\n        <tbody>\n          <template is=\"dom-repeat\" items=\"[[_getOptions(colors)]]\" as=\"color\">\n            <tr>\n              <th scope=\"row\">[[color]]</th>\n              <td>\n                <template is=\"dom-repeat\" items=\"[[_getAa(swatchId,color)]]\" as=\"contrast\">\n                  <span class=\"contrast\" style$=\"[[_getContrastBg(color,contrast)]]\">[[color]]-[[contrast]]</span>\n                </template>\n              </td>\n              <td>\n                <template is=\"dom-repeat\" items=\"[[_getAaLarge(swatchId,color)]]\" as=\"contrast\">\n                  <span class=\"contrast\" style$=\"[[_getContrastBg(color,contrast)]]\">[[color]]-[[contrast]]</span>\n                </template>\n              </td>\n            </tr>\n          </template>\n        </tbody>\n      </table>\n      <p><small>* Large text is defined as bold text at least 14pt or normal text at least 18pt</small></p>\n    "]);_templateObject_574e6410518b11e9b59003d8a4d666f3=function(){return data};return data}var simpleColorsSwatchInfo=function(_SimpleColors){babelHelpers.inherits(simpleColorsSwatchInfo,_SimpleColors);function simpleColorsSwatchInfo(){babelHelpers.classCallCheck(this,simpleColorsSwatchInfo);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(simpleColorsSwatchInfo).apply(this,arguments))}babelHelpers.createClass(simpleColorsSwatchInfo,[{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(simpleColorsSwatchInfo.prototype),"connectedCallback",this).call(this)}},{key:"ready",value:function ready(){babelHelpers.get(babelHelpers.getPrototypeOf(simpleColorsSwatchInfo.prototype),"ready",this).call(this)}},{key:"_getAa",value:function _getAa(swatchId,color){var aaLarge=2<arguments.length&&arguments[2]!==void 0?arguments[2]:!1,data=swatchId.split("_"),index=parseInt(data[1]);return this.getContrastingShades(!1,data[0],index,color)}},{key:"_getAaLarge",value:function _getAaLarge(swatchId,color){return this._getAa(swatchId,color,!0)}},{key:"_getBg",value:function _getBg(swatchId){var inverse=1<arguments.length&&arguments[1]!==void 0?arguments[1]:!1,colors=this._getColors(swatchId,inverse);return"background: "+colors[0]+"; color: "+colors[1]+";"}},{key:"_getBorder",value:function _getBorder(swatchId){var inverse=1<arguments.length&&arguments[1]!==void 0?arguments[1]:!1,colors=this._getColors(swatchId,inverse);return"border: 3px solid "+colors[0]+"; padding: 3px;"}},{key:"_getInverseBg",value:function _getInverseBg(swatchId){return this._getBg(swatchId,!0)}},{key:"_getInverseBorder",value:function _getInverseBorder(swatchId){return this._getBorder(swatchId,!0)}},{key:"_getInverseText",value:function _getInverseText(swatchId){return this._getText(swatchId,!0)}},{key:"_getOptions",value:function _getOptions(obj){return Object.keys(obj)}},{key:"_getText",value:function _getText(swatchId){var inverse=1<arguments.length&&arguments[1]!==void 0?arguments[1]:!1,colors=this._getColors(swatchId,inverse);return"color: "+colors[0]+"; background: "+colors[1]+";"}},{key:"_getContrastBg",value:function _getContrastBg(color,shade){return this._getBg(color+"_"+(parseInt(shade)-1))}},{key:"_getColors",value:function _getColors(swatchId){var inverse=1<arguments.length&&arguments[1]!==void 0?arguments[1]:!1,data=swatchId.split("_"),index=inverse?11-parseInt(data[1]):parseInt(data[1]);return[this.colors[data[0]][index],this.colors.grey[5<index?0:11]]}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_574e6410518b11e9b59003d8a4d666f3())}},{key:"properties",get:function get(){return{swatchId:{name:"swatchId",type:"String",value:"grey_0",reflectToAttribute:!0},swatchName:{name:"swatchName",type:"String",value:"grey-1",reflectToAttribute:!0},bg:{name:"bg",type:"String",computed:"_getBg(swatchId)"},inverseBg:{name:"inverseBg",type:"String",computed:"_getInverseBg(swatchId)"},text:{name:"text",type:"String",computed:"_getText(swatchId)"},inverseText:{name:"inverseText",type:"String",computed:"_getInverseText(swatchId)"},border:{name:"border",type:"String",computed:"_getBorder(swatchId)"},inverseBorder:{name:"inverseBorder",type:"String",computed:"_getInverseBorder(swatchId)"}}}},{key:"behaviors",get:function get(){return[_simpleColors.SimpleColors]}},{key:"tag",get:function get(){return"simple-colors-swatch-info"}}]);return simpleColorsSwatchInfo}(_simpleColors.SimpleColors);_exports.simpleColorsSwatchInfo=simpleColorsSwatchInfo;window.customElements.define(simpleColorsSwatchInfo.tag,simpleColorsSwatchInfo)});