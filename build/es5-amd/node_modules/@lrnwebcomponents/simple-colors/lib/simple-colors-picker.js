define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/elements/dom-repeat.js","../simple-colors.js","../../simple-picker/simple-picker.js"],function(_exports,_polymerElement,_domRepeat,_simpleColors,_simplePicker){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.SimpleColorsPicker=void 0;function _templateObject_1fb534e0984711e9810e6d9eee9273ff(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-block;\n          --simple-picker-selected-option-outline: 2px dashed black;\n          --simple-picker-active-option-outline: 2px solid black;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      </style>\n      <simple-picker\n        id=\"picker\"\n        aria-labelledby$=\"[[ariaLabelledby]]\"\n        disabled$=\"[[disabled]]\"\n        expanded$=\"[[expanded]]\"\n        hide-option-labels$=\"[[shades]]\"\n        label$=\"[[label]]\"\n        on-change=\"_handleChange\"\n        on-collapse=\"_handleCollapse\"\n        on-expand=\"_handleExpand\"\n        on-option-focus=\"_handleOptionFocus\"\n        value$=\"{{value}}\"\n      >\n      </simple-picker>\n    "]);_templateObject_1fb534e0984711e9810e6d9eee9273ff=function _templateObject_1fb534e0984711e9810e6d9eee9273ff(){return data};return data}/**
 * `simple-colors-inspector-select`
 * `a select element for changing simple-colors attributes in demos`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 * @demo demo/picker.html demo
 * @see "../simple-colors.js"
 * @see "./demo/simple-colors-picker-demo.js"
 */var SimpleColorsPicker=/*#__PURE__*/function(_SimpleColors){babelHelpers.inherits(SimpleColorsPicker,_SimpleColors);function SimpleColorsPicker(){babelHelpers.classCallCheck(this,SimpleColorsPicker);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(SimpleColorsPicker).apply(this,arguments))}babelHelpers.createClass(SimpleColorsPicker,[{key:"connectedCallback",/**
   * life cycle, element is afixed to the DOM
   */value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype),"connectedCallback",this).call(this)}/**
   * ready state
   */},{key:"ready",value:function ready(){babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype),"ready",this).call(this);this.__ready=!0}/**
   * gets options for the selectors
   *
   * @param {object} the options object to convert
   */},{key:"_getOptions",value:function _getOptions(colors,shades,dark){var options=[[]],theme=!1!==dark?"dark":"default";if(!1===shades){options=Object.keys(this.colors).map(function(key){return[{alt:key,style:"color: var(--simple-colors-"+theme+"-theme-grey-12); background-color: var(--simple-colors-"+theme+"-theme-"+key+"-4)",value:key}]});options.unshift([{alt:"none",style:"background-color: var(--simple-picker-background-color,#ddd)",value:null}])}else{for(var colorNames=Object.keys(colors),_loop=function _loop(i){var shade=Object.keys(colors).map(function(key){var name=key+"-"+(i+1),cssvar="--simple-colors-"+theme+"-theme-"+name;return{alt:name,style:"background-color: var("+cssvar+")",value:cssvar}});options.push(shade)},i=0;i<colors[colorNames[0]].length;i++){_loop(i)}}this.$.picker.options=options}/**
   * handles when the picker's value changes
   */},{key:"_handleChange",value:function _handleChange(e){this.value=e.detail.value;if(this.__ready!==void 0)this.dispatchEvent(new CustomEvent("change",{bubbles:!0,detail:this}))}/**
   * handles when the picker collapses
   */},{key:"_handleCollapse",value:function _handleCollapse(e){if(this.__ready!==void 0)this.dispatchEvent(new CustomEvent("collapse",{detail:this}))}/**
   * handles when the picker expands
   */},{key:"_handleExpand",value:function _handleExpand(e){if(this.__ready!==void 0)this.dispatchEvent(new CustomEvent("expand",{detail:this}))}/**
   * handles when the picker's focus changes
   */},{key:"_handleOptionFocus",value:function _handleOptionFocus(e){if(this.__ready!==void 0)this.dispatchEvent(new CustomEvent("option-focus",{detail:this}))}/**
   * life cycle, element is removed from the DOM
   */ //disconnectedCallback() {}
}],[{key:"template",// render function
get:function get(){return(0,_polymerElement.html)(_templateObject_1fb534e0984711e9810e6d9eee9273ff())}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return{/**
       * Optional. Sets the aria-labelledby attribute
       */ariaLabelledby:{name:"ariaLabelledby",type:String,value:null},/**
       * Is the picker disabled?
       */disabled:{name:"disabled",type:Boolean,value:!1},/**
       * Is it expanded?
       */expanded:{name:"expanded",type:Boolean,value:!1,reflectToAttribute:!0},/**
       * Optional. The label for the picker input
       */label:{name:"label",type:String,value:null},/**
       * An array of options for the picker, eg.: `
[
  {
    "icon": "editor:format-paint",      //Optional. Used if the picker is used as an icon picker.
    "alt": "Blue",                      //Required for accessibility. Alt text description of the choice.
    "style": "background-color: blue;", //Optional. Used to set an option's style.
    ...                                 //Optional. Any other properties that should be captured as part of the selected option's value
  },...
]`
        */options:{name:"options",type:Array,computed:"_getOptions(colors,shades,dark)",reflectToAttribute:!1,observer:!1},/**
       * Show all shades instead of just main accent-colors
       */shades:{name:"shades",type:Boolean,value:!1,reflectToAttribute:!0},/**
       * The value of the option.
       */value:{name:"label",type:"String",value:null,reflectToAttribute:!0,notify:!0}}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"simple-colors-picker"}/**
   * gets the simple-colors behaviors
   */},{key:"behaviors",get:function get(){return[_simpleColors.SimpleColors]}}]);return SimpleColorsPicker}(_simpleColors.SimpleColors);_exports.SimpleColorsPicker=SimpleColorsPicker;window.customElements.define(SimpleColorsPicker.tag,SimpleColorsPicker)});