define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js", "../simple-colors.js", "../../simple-picker/simple-picker.js"], function (_exports, _polymerElement, _domRepeat, _simpleColors, _simplePicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleColorsPicker = void 0;

  function _templateObject_9ae58290b49511e9bfd4f79a8a57e0f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-block;\n          --simple-picker-selected-option-outline: 2px dashed black;\n          --simple-picker-active-option-outline: 2px solid black;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      </style>\n      <simple-picker\n        id=\"picker\"\n        aria-labelledby$=\"[[ariaLabelledby]]\"\n        block-label$=\"[[blockLabel]]\"\n        disabled$=\"[[disabled]]\"\n        expanded$=\"[[expanded]]\"\n        hide-option-labels$=\"[[shades]]\"\n        label$=\"[[label]]\"\n        on-change=\"_handleChange\"\n        on-collapse=\"_handleCollapse\"\n        on-expand=\"_handleExpand\"\n        on-option-focus=\"_handleOptionFocus\"\n        value$=\"{{value}}\"\n      >\n      </simple-picker>\n    "]);

    _templateObject_9ae58290b49511e9bfd4f79a8a57e0f7 = function _templateObject_9ae58290b49511e9bfd4f79a8a57e0f7() {
      return data;
    };

    return data;
  }

  /**
   * `simple-colors-inspector-select`
   * `a select element for changing simple-colors attributes in demos`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/picker.html demo
   * @see "../simple-colors.js"
   * @see "./demo/simple-colors-picker-demo.js"
   */
  var SimpleColorsPicker =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(SimpleColorsPicker, _SimpleColors);

    function SimpleColorsPicker() {
      babelHelpers.classCallCheck(this, SimpleColorsPicker);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleColorsPicker).apply(this, arguments));
    }

    babelHelpers.createClass(SimpleColorsPicker, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype), "connectedCallback", this).call(this);
      }
      /**
       * ready state
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker.prototype), "ready", this).call(this);
        this.__ready = true;
      }
      /**
       * gets options for the selectors
       *
       * @param {object} the options object to convert
       */

    }, {
      key: "_getOptions",
      value: function _getOptions(colors, shades, dark) {
        var options = [[]],
            theme = dark !== false ? "dark" : "default";

        if (shades === false) {
          options = Object.keys(this.colors).map(function (key) {
            return [{
              alt: key,
              value: key
            }];
          });
          options.unshift([{
            alt: "none",
            value: null
          }]);
        } else {
          var colorNames = Object.keys(colors);

          var _loop = function _loop(i) {
            var shade = Object.keys(colors).map(function (key) {
              var name = key + "-" + (i + 1),
                  cssvar = "--simple-colors-" + theme + "-theme-" + name;
              return {
                alt: name,
                style: "background-color: var(" + cssvar + ")",
                value: cssvar
              };
            });
            options.push(shade);
          };

          for (var i = 0; i < colors[colorNames[0]].length; i++) {
            _loop(i);
          }
        }

        this.$.picker.options = options;
      }
      /**
       * handles when the picker's value changes
       */

    }, {
      key: "_handleChange",
      value: function _handleChange(e) {
        this.value = e.detail.value;
        if (this.__ready !== undefined) this.dispatchEvent(new CustomEvent("change", {
          bubbles: true,
          detail: this
        }));
      }
      /**
       * handles when the picker collapses
       */

    }, {
      key: "_handleCollapse",
      value: function _handleCollapse(e) {
        if (this.__ready !== undefined) this.dispatchEvent(new CustomEvent("collapse", {
          detail: this
        }));
      }
      /**
       * handles when the picker expands
       */

    }, {
      key: "_handleExpand",
      value: function _handleExpand(e) {
        if (this.__ready !== undefined) this.dispatchEvent(new CustomEvent("expand", {
          detail: this
        }));
      }
      /**
       * handles when the picker's focus changes
       */

    }, {
      key: "_handleOptionFocus",
      value: function _handleOptionFocus(e) {
        if (this.__ready !== undefined) this.dispatchEvent(new CustomEvent("option-focus", {
          detail: this
        }));
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_9ae58290b49511e9bfd4f79a8a57e0f7());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Optional. Sets the aria-labelledby attribute
           */
          ariaLabelledby: {
            name: "ariaLabelledby",
            type: String,
            value: null
          },

          /**
           * Display as a block
           */
          blockLabel: {
            name: "blockLabel",
            type: Boolean,
            value: false
          },

          /**
           * Is the picker disabled?
           */
          disabled: {
            name: "disabled",
            type: Boolean,
            value: false
          },

          /**
           * Is it expanded?
           */
          expanded: {
            name: "expanded",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Optional. The label for the picker input
           */
          label: {
            name: "label",
            type: String,
            value: null
          },

          /**
           * An array of options for the picker, eg.: `
          [
          {
          "icon": "editor:format-paint",      //Optional. Used if the picker is used as an icon picker.
          "alt": "Blue",                      //Required for accessibility. Alt text description of the choice.
          "style": "background-color: blue;", //Optional. Used to set an option's style.
          ...                                 //Optional. Any other properties that should be captured as part of the selected option's value
          },...
          ]`
            */
          options: {
            name: "options",
            type: Array,
            computed: "_getOptions(colors,shades,dark)",
            reflectToAttribute: false,
            observer: false
          },

          /**
           * Show all shades instead of just main accent-colors
           */
          shades: {
            name: "shades",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * The value of the option.
           */
          value: {
            name: "label",
            type: "String",
            value: null,
            reflectToAttribute: true,
            notify: true
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-colors-picker";
      }
      /**
       * gets the simple-colors behaviors
       */

    }, {
      key: "behaviors",
      get: function get() {
        return [_simpleColors.SimpleColors];
      }
    }]);
    return SimpleColorsPicker;
  }(_simpleColors.SimpleColors);

  _exports.SimpleColorsPicker = SimpleColorsPicker;
  window.customElements.define(SimpleColorsPicker.tag, SimpleColorsPicker);
});