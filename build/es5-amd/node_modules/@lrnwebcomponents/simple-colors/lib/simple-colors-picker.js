define(["exports", "../../../lit-element/lit-element.js", "../simple-colors.js", "../../simple-picker/simple-picker.js"], function (_exports, _litElement, _simpleColors, _simplePicker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleColorsPicker = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_93d58be0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_93d58be0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_93d58be0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_93d58be0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-picker\n        id=\"picker\"\n        ?block-label=\"", "\"\n        ?disabled=\"", "\"\n        ?expanded=\"", "\"\n        ?hide-option-labels=\"", "\"\n        @change=\"", "\"\n        @collapse=\"", "\"\n        @expand=\"", "\"\n        @option-focus=\"", "\"\n        .aria-labelledby=\"", "\"\n        .label=\"", "\"\n        .options=\"", "\"\n        .value=\"", "\"\n      >\n      </simple-picker>\n    "]);

    _templateObject_93d58be0c96f11ea8be5e1d5fe7ec787 = function _templateObject_93d58be0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `simple-colors-picker`
   * a select element for changing `simple-colors` attributes in demos
   *
  ### Styling
  See demo of "all of the colors" (`demo/colors.html`) for styling.
  * 
   * @extends SimpleColors
   * @demo ./demo/picker.html demo
   * @see "../simple-colors.js"
   * @see "./demo/simple-colors-picker-demo.js"
   * @element simple-colors-picker
   */
  var SimpleColorsPicker =
  /*#__PURE__*/
  function (_SimpleColors) {
    babelHelpers.inherits(SimpleColorsPicker, _SimpleColors);
    babelHelpers.createClass(SimpleColorsPicker, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_93d58be0c96f11ea8be5e1d5fe7ec787(), this.blockLabel, this.disabled, this.expanded, this.shades, this._handleChange, this._handleCollapse, this._handleExpand, this._handleOptionFocus, this.ariaLabelledby, this.label, this.options, this.value);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker), "styles", this)), [(0, _litElement.css)(_templateObject2_93d58be0c96f11ea8be5e1d5fe7ec787())]);
      }
    }]);

    function SimpleColorsPicker() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleColorsPicker);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimpleColorsPicker).call(this));
      _this.ariaLabelledby = null;
      _this.blockLabel = false;
      _this.disabled = false;
      _this.expanded = false;
      _this.label = null;
      _this.shades = false;
      _this.value = null;
      _this.__ready = false;
      _this.options = _this._getOptions(_this.colors, _this.shades, _this.dark);
      return _this;
    }

    babelHelpers.createClass(SimpleColorsPicker, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "colors") _this2.options = _this2._getOptions(_this2.colors, _this2.shades, _this2.dark);
          if (propName === "shades") _this2.options = _this2._getOptions(_this2.colors, _this2.shades, _this2.dark);
          if (propName === "dark") _this2.options = _this2._getOptions(_this2.colors, _this2.shades, _this2.dark);
          if (propName === "value") _this2._fireValueChangedEvent();

          _this2._fireChangeEvent();
        });
      } // properties available to the custom element for data binding

    }, {
      key: "_getOptions",

      /**
       * gets options for the selectors
       *
       * @param {object} the options object to convert
       */
      value: function _getOptions(colors, shades, dark) {
        var options = [[]],
            theme = dark !== false ? "dark" : "default";

        if (shades === false) {
          options = Object.keys(this.colors).map(function (key) {
            return [{
              alt: key,
              value: key
            }];
          });
          options.unshift([{
            alt: "none",
            value: null
          }]);
        } else {
          var colorNames = Object.keys(colors);

          var _loop = function _loop(i) {
            var shade = Object.keys(colors).map(function (key) {
              var name = key + "-" + (i + 1),
                  cssvar = "--simple-colors-" + theme + "-theme-" + name;
              return {
                alt: name,
                style: "background-color: var(" + cssvar + ")",
                value: cssvar
              };
            });
            options.push(shade);
          };

          for (var i = 0; i < colors[colorNames[0]].length; i++) {
            _loop(i);
          }
        }

        return options;
      }
      /**
       * Fires with any property change.
       *
       * @event value-changed
       */

    }, {
      key: "_fireValueChangedEvent",
      value: function _fireValueChangedEvent() {
        this.dispatchEvent(new CustomEvent("value-changed", {
          detail: this
        }));
      }
      /**
       * Fires with any property change.
       *
       * @event change
       */

    }, {
      key: "_fireChangeEvent",
      value: function _fireChangeEvent() {
        this.dispatchEvent(new CustomEvent("change", {
          bubbles: true,
          detail: this
        }));
      }
      /**
       * handles when the picker's value changes
       */

    }, {
      key: "_handleChange",
      value: function _handleChange(e) {
        this.value = e.detail.value;
        if (this.__ready !== undefined) this._fireChangeEvent();
      }
      /**
       * Fires when the picker collapses.
       *
       * @event collapse
       */

    }, {
      key: "_handleCollapse",
      value: function _handleCollapse() {
        if (this.__ready !== undefined) this.dispatchEvent(new CustomEvent("collapse", {
          detail: this
        }));
      }
      /**
       * Fires when the picker expands.
       *
       * @event expand
       */

    }, {
      key: "_handleExpand",
      value: function _handleExpand() {
        if (this.__ready !== undefined) this.dispatchEvent(new CustomEvent("expand", {
          detail: this
        }));
      }
      /**
       * Fires when the picker's focus changes
       *
       * @event option-focus
       */

    }, {
      key: "_handleOptionFocus",
      value: function _handleOptionFocus(e) {
        if (this.__ready !== undefined) this.dispatchEvent(new CustomEvent("option-focus", {
          detail: this
        }));
      }
    }], [{
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SimpleColorsPicker), "properties", this), {
          /**
           * Optional. Sets the aria-labelledby attribute
           */
          ariaLabelledby: {
            type: String,
            attribute: "aria-labelledby"
          },

          /**
           * Display as a block
           */
          blockLabel: {
            type: Boolean,
            attribute: "block-label"
          },

          /**
           * Is the picker disabled?
           */
          disabled: {
            type: Boolean
          },

          /**
           * Is it expanded?
           */
          expanded: {
            type: Boolean,
            reflect: true
          },

          /**
           * Optional. The label for the picker input
           */
          label: {
            type: String
          },

          /**
           * An array of options for the picker, eg.: `
          [
          {
          "icon": "editor:format-paint",      //Optional. Used if the picker is used as an icon picker.
          "alt": "Blue",                      //Required for accessibility. Alt text description of the choice.
          "style": "background-color: blue;", //Optional. Used to set an option's style.
          ...                                 //Optional. Any other properties that should be captured as part of the selected option's value
          },...
          ]`
            */
          options: {
            type: Array,
            reflect: false //,observer: false

          },

          /**
           * Show all shades instead of just main accent-colors
           */
          shades: {
            type: Boolean,
            reflect: true
          },

          /**
           * The value of the option.
           */
          value: {
            type: String,
            reflect: true //,notify: true

          },

          /**
           *
           */
          __ready: {
            type: Boolean
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-colors-picker";
      }
    }]);
    return SimpleColorsPicker;
  }(_simpleColors.SimpleColors);

  _exports.SimpleColorsPicker = SimpleColorsPicker;
  window.customElements.define(SimpleColorsPicker.tag, SimpleColorsPicker);
});