define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimpleProgress = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Copyright 2020 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `simple-progress`
   * `a simple progress slider bar`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @demo demo/index.html
   * @element simple-progress
   */
  var SimpleProgress = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(SimpleProgress, _HTMLElement);

    var _super = _createSuper(SimpleProgress);

    function SimpleProgress() {
      var _this;

      babelHelpers.classCallCheck(this, SimpleProgress);
      _this = _super.call(this); // create a template element for processing shadowRoot

      _this.template = document.createElement("template"); // create a shadowRoot

      _this.attachShadow({
        mode: "open"
      });

      _this.render();

      return _this;
    }

    babelHelpers.createClass(SimpleProgress, [{
      key: "html",
      get: // Template return function
      function get() {
        return "\n    <style>\n    :host {\n      display: block;\n      width: 100%;\n      height: 4px;\n      position: relative;\n      overflow: hidden;\n    }\n\n    :host([hidden]) {\n      display: none !important;\n    }\n\n    #primaryProgress {\n      background: var(--simple-progress-color, #37A0CE);\n      position:  absolute;\n      top: 0;\n      right: 0;\n      bottom: 0;\n      left: 0;\n      transform: scaleX(0);\n      transform-origin: right center;\n      animation: indeterminate-bar var(--simple-progress-duration, 2s) var(--simple-progress-delay, 0s) linear infinite;\n    }\n\n    #primaryProgress.finished {\n      animation: none;\n    }\n\n    #primaryProgress::after {\n      content: \"\";\n      transform-origin: center center;\n      animation: indeterminate-splitter var(--simple-progress-duration, 2s) var(--simple-progress-delay, 0s) linear infinite;\n    }\n\n    #primaryProgress.finished::after {\n      animation: none;\n    }\n\n    @keyframes indeterminate-bar {\n      0% {\n        transform: scaleX(1) translateX(-100%);\n      }\n      50% {\n        transform: scaleX(1) translateX(0%);\n      }\n      75% {\n        transform: scaleX(1) translateX(0%);\n        animation-timing-function: cubic-bezier(.28,.62,.37,.91);\n      }\n      100% {\n        transform: scaleX(0) translateX(0%);\n      }\n    }\n\n    @keyframes indeterminate-splitter {\n      0% {\n        transform: scaleX(.75) translateX(-125%);\n      }\n      30% {\n        transform: scaleX(.75) translateX(-125%);\n        animation-timing-function: cubic-bezier(.42,0,.6,.8);\n      }\n      90% {\n        transform: scaleX(.75) translateX(125%);\n      }\n      100% {\n        transform: scaleX(.75) translateX(125%);\n      }\n    }\n  </style>\n\n  <div id=\"primaryProgress\"></div>";
      }
    }, {
      key: "disabled",
      get: function get() {
        return this.hasAttribute("disabled");
      },
      set: function set(value) {
        if (value) {
          this.setAttribute("disabled", "");
        } else {
          this.removeAttribute("disabled");
        }
      }
    }, {
      key: "_iterationCallback",
      value: function _iterationCallback() {
        this.shadowRoot.querySelector("#primaryProgress").classList.add("finished");
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        if (window.ShadyCSS) {
          window.ShadyCSS.styleElement(this);
        }
      }
      /**
       * Render / rerender the shadowRoot
       */

    }, {
      key: "render",
      value: function render() {
        this.shadowRoot.innerHTML = null;
        this.template.innerHTML = this.html;

        if (window.ShadyCSS) {
          window.ShadyCSS.prepareTemplate(this.template, this.tag);
        }

        this.shadowRoot.appendChild(this.template.content.cloneNode(true));
      }
    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback() {
        var progress = this.shadowRoot.querySelector("#primaryProgress");
        if (this.disabled) progress.addEventListener("animationiteration", this._iterationCallback.bind(this), {
          once: true,
          passive: true
        });else progress.classList.remove("finished");
      }
    }], [{
      key: "tag",
      get: function get() {
        return "simple-progress";
      }
    }, {
      key: "observedAttributes",
      get: function get() {
        return ["disabled"];
      }
    }]);
    return SimpleProgress;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.SimpleProgress = SimpleProgress;
  customElements.define(SimpleProgress.tag, SimpleProgress);
});