define(["exports", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _litElement, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TaskList = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject5_656bfd60d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          border: var(--task-list-border, 1px solid #eeeeee);\n          font-size: var(--task-list-font-size, 18px);\n          padding: var(--task-list-padding, 16px);\n        }\n      "]);

    _templateObject5_656bfd60d34d11ea880ba1e93364c49c = function _templateObject5_656bfd60d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject4_656bfd60d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                    <span property=\"oer:task\">", "</span>\n                  "]);

    _templateObject4_656bfd60d34d11ea880ba1e93364c49c = function _templateObject4_656bfd60d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject3_656bfd60d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                    <a href=\"", "\" property=\"oer:task\">", "</a>\n                  "]);

    _templateObject3_656bfd60d34d11ea880ba1e93364c49c = function _templateObject3_656bfd60d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject2_656bfd60d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n            <li>\n              ", "\n            </li>\n          "]);

    _templateObject2_656bfd60d34d11ea880ba1e93364c49c = function _templateObject2_656bfd60d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_656bfd60d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <h3><span property=\"oer:name\">", "</span></h3>\n      <ol>\n        ", "\n      </ol>\n    "]);

    _templateObject_656bfd60d34d11ea880ba1e93364c49c = function _templateObject_656bfd60d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `task-list`
   * Visual listing of tasks with different design components that is
   * OER Schema capable!
   * @demo demo/index.html
   * @microcopy - the mental model for this element
   * - task - a singular thing to accomplish
   * @element task-list
   */
  var TaskList =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(TaskList, _SchemaBehaviors);
    babelHelpers.createClass(TaskList, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_656bfd60d34d11ea880ba1e93364c49c(), this.name, this.tasks.map(function (task) {
          return (0, _litElement.html)(_templateObject2_656bfd60d34d11ea880ba1e93364c49c(), task.link ? (0, _litElement.html)(_templateObject3_656bfd60d34d11ea880ba1e93364c49c(), task.link, task.name) : (0, _litElement.html)(_templateObject4_656bfd60d34d11ea880ba1e93364c49c(), task.name));
        }));
      }
    }], [{
      key: "styles",

      /**
       * LitElement constructable styles enhancement
       */
      get: function get() {
        return [(0, _litElement.css)(_templateObject5_656bfd60d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "task-list";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(TaskList), "properties", this), {
          /**
           * Name of this task list
           */
          name: {
            type: String
          },

          /**
           * Related Resource ID
           */
          relatedResource: {
            type: String,
            attribute: "related-resource"
          },

          /**
           * Task list
           */
          tasks: {
            type: Array
          },
          _resourceLink: {
            type: Object
          }
        });
      }
    }]);

    function TaskList() {
      var _this;

      babelHelpers.classCallCheck(this, TaskList);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TaskList).call(this));
      _this.tasks = [];
      _this.name = "Steps to completion";
      return _this;
    }

    babelHelpers.createClass(TaskList, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["tasks"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "relatedResource") {
            _this2._resourceLink = _this2._generateResourceLink(_this2[propName]);
          }
        });
      }
    }, {
      key: "_generateResourceLink",
      value: function _generateResourceLink(relatedResource) {
        if (this._resourceLink) {
          document.head.removeChild(this._resourceLink);
        }

        var link = document.createElement("link");
        link.setAttribute("property", "oer:forComponent");
        link.setAttribute("content", relatedResource);
        document.head.appendChild(link);
        return link;
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this3 = this;

        setTimeout(function () {
          _this3.setAttribute("typeof", "oer:SupportingMaterial");
        }, 0);
      }
    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Task list",
            description: "A list of tasks which is an ordered list",
            icon: "icons:list",
            color: "orange",
            groups: ["Content", "Instructional"],
            handles: [],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "name",
              title: "Name",
              description: "Name of the list",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "relatedResource",
              title: "Related resource",
              description: "A reference to the related Schema resource",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            configure: [{
              property: "name",
              title: "Name",
              description: "Name of the list",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "relatedResource",
              title: "Related resource",
              description: "A reference to the related Schema resource",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "tasks",
              title: "Tasks",
              description: "The tasks to be completed",
              inputMethod: "array",
              itemLabel: "label",
              properties: [{
                property: "name",
                title: "Name",
                description: "Name of the task",
                inputMethod: "textfield",
                required: true
              }, {
                property: "link",
                title: "Link",
                description: "Optional link",
                inputMethod: "textfield"
              }]
            }],
            advanced: []
          },
          saveOptions: {
            unsetAttributes: ["_resource-link"]
          }
        };
      }
    }]);
    return TaskList;
  }((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));

  _exports.TaskList = TaskList;
  window.customElements.define(TaskList.tag, TaskList);
});