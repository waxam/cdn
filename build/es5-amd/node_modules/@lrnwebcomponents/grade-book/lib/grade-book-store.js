define(["exports", "../../../lit/index.js", "../../../mobx/dist/mobx.esm.js"], function (_exports, _index, _mobxEsm) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.GradeBookStoreClass = _exports.GradeBookStore = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  (0, _mobxEsm.configure)({
    enforceActions: false,
    useProxies: "ifavailable"
  }); // strict mode off

  var GradeBookStoreClass = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(GradeBookStoreClass, _LitElement);

    var _super = _createSuper(GradeBookStoreClass);

    function GradeBookStoreClass() {
      var _this;

      babelHelpers.classCallCheck(this, GradeBookStoreClass);
      _this = _super.call(this);
      _this.gradeScale = [];
      _this.activeRubric = []; // internal data structure of the "app". This is bridging all data from the
      // backend sheets and then informing how our application works

      _this.database = {
        tags: {
          categories: [],
          data: []
        },
        submissions: [],
        rubrics: [],
        assignments: [],
        roster: [],
        grades: {},
        gradesDetails: {},
        gradeScale: [],
        settings: {}
      };
      _this.activeStudent = 0;
      _this.activeAssignment = 0;
      (0, _mobxEsm.makeObservable)(babelHelpers.assertThisInitialized(_this), {
        gradeScale: _mobxEsm.observable,
        activeStudent: _mobxEsm.observable,
        activeRubric: _mobxEsm.observable,
        activeAssignment: _mobxEsm.observable,
        database: _mobxEsm.observable,
        activeSubmission: _mobxEsm.computed
      });
      return _this;
    }

    babelHelpers.createClass(GradeBookStoreClass, [{
      key: "activeSubmission",
      get: function get() {
        var db = (0, _mobxEsm.toJS)(this.database);
        var activeStudent = (0, _mobxEsm.toJS)(this.activeStudent);
        var activeAssignment = (0, _mobxEsm.toJS)(this.activeAssignment);

        for (var i in this.database.submissions) {
          var row = this.database.submissions[i]; // look for student AND that the assignment column name is there

          if (row.student === db.roster[activeStudent].student && row[db.assignments[activeAssignment].shortName]) {
            return row[db.assignments[activeAssignment].shortName];
          }
        }

        return null;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "grade-book-store";
      }
    }]);
    return GradeBookStoreClass;
  }(_index.LitElement);

  _exports.GradeBookStoreClass = GradeBookStoreClass;
  customElements.define(GradeBookStoreClass.tag, GradeBookStoreClass);
  window.GradeBookStore = window.GradeBookStore || {};

  window.GradeBookStore.requestAvailability = function () {
    if (!window.GradeBookStore.instance) {
      window.GradeBookStore.instance = document.createElement("grade-book-store");
      document.body.appendChild(window.GradeBookStore.instance);
    }

    return window.GradeBookStore.instance;
  }; // export the singleton so everyone can directly reference it


  var GradeBookStore = window.GradeBookStore.requestAvailability();
  _exports.GradeBookStore = GradeBookStore;
});