define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/paper-styles/paper-styles.js"], function (_exports, _require, _polymerElement, _paperStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnappFabMenu = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_56c0fd102d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        lrnapp-fab-speed-dial-action:not(:defined),\n        paper-fab-speed-dial-overlay:not(:defined),\n        paper-fab-speed-dial:not(:defined) {\n          display: none;\n        }\n        .open,\n        .overlay {\n          position: fixed;\n          bottom: var(--paper-fab-speed-dial-bottom, 16px);\n          right: var(--paper-fab-speed-dial-right, 16px);\n        }\n        .open {\n          --paper-fab-background: var(--paper-fab-speed-dial-background);\n          --paper-fab-keyboard-focus-background: var(\n            --paper-fab-speed-dial-keyboard-focus-background\n          );\n        }\n        .close {\n          --paper-fab-background: var(--paper-grey-500);\n          --paper-fab-keyboard-focus-background: var(--paper-grey-500);\n          margin-top: 20px;\n          display: inline-block;\n        }\n        .overlay {\n          text-align: right;\n        }\n      </style>\n\n      <paper-fab\n        icon=\"[[icon]]\"\n        class=\"open\"\n        on-click=\"open\"\n        hidden$=\"[[opened]]\"\n        disabled$=\"[[disabled]]\"\n      ></paper-fab>\n\n      <paper-fab-speed-dial-overlay\n        class=\"overlay\"\n        opened=\"{{opened}}\"\n        with-backdrop\n      >\n        <slot></slot>\n        <paper-fab icon=\"close\" class=\"close\" on-click=\"close\"></paper-fab>\n      </paper-fab-speed-dial-overlay>\n    "]);

    _templateObject_56c0fd102d8511ea80ccf124101da415 = function _templateObject_56c0fd102d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  /**
   * `lrnapp-fab-menu`
   * @customElement lrnapp-fab-menu
   * `floating action button with menu`
   *
   * @demo demo/index.html
   */
  var LrnappFabMenu =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrnappFabMenu, _PolymerElement);

    function LrnappFabMenu() {
      var _this;

      babelHelpers.classCallCheck(this, LrnappFabMenu);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnappFabMenu).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-fab/paper-fab.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["./lib/lrnapp-fab-speed-dial-action.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../paper-fab-speed-dial/paper-fab-speed-dial.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../paper-fab-speed-dial/lib/paper-fab-speed-dial-overlay.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(LrnappFabMenu, [{
      key: "open",
      // Public methods
      value: function open(e) {
        // Required for mobile Safari to avoid passing the tap event to an element below the FAB
        if (e) {
          e.preventDefault();
        }

        this.opened = true;
      }
    }, {
      key: "close",
      value: function close(e) {
        // Required for mobile Safari to avoid passing the tap event to an element below the FAB
        if (e) {
          e.preventDefault();
        }

        this.opened = false;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_56c0fd102d8511ea80ccf124101da415());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrnapp-fab-menu";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          icon: {
            type: String,
            value: "add"
          },
          opened: {
            type: Boolean,
            notify: true
          },
          disabled: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return LrnappFabMenu;
  }(_polymerElement.PolymerElement);

  _exports.LrnappFabMenu = LrnappFabMenu;
  window.customElements.define(LrnappFabMenu.tag, LrnappFabMenu);
});