define(["exports", "require", "../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.MdBlock = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_c3afc33056b411ebb2c24bb50d8f41ab() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_c3afc33056b411ebb2c24bb50d8f41ab = function _templateObject2_c3afc33056b411ebb2c24bb50d8f41ab() {
      return data;
    };

    return data;
  }

  function _templateObject_c3afc33056b411ebb2c24bb50d8f41ab() {
    var data = babelHelpers.taggedTemplateLiteral([" <div>\n      <marked-element markdown=\"", "\">\n        <div slot=\"markdown-html\"></div>\n        <script\n          type=\"text/markdown\"\n          .src=\"", "\"\n        ></script>\n      </marked-element>\n    </div>"]);

    _templateObject_c3afc33056b411ebb2c24bb50d8f41ab = function _templateObject_c3afc33056b411ebb2c24bb50d8f41ab() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `md-block`
   * `a markdown block`
   * @demo demo/index.html
   * @element md-block
   */
  var MdBlock = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(MdBlock, _LitElement);

    var _super = _createSuper(MdBlock);

    babelHelpers.createClass(MdBlock, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_c3afc33056b411ebb2c24bb50d8f41ab(), this.markdown, this.source ? this.source : undefined);
      } // haxProperty definition

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_c3afc33056b411ebb2c24bb50d8f41ab())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Markdown",
            description: "A block of markdown content directly or remote loaded",
            icon: "icons:code",
            color: "yellow",
            groups: ["Block"],
            handles: [{
              type: "markdown",
              source: "source",
              src: "source"
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "markdown",
              title: "Markdown",
              description: "Raw markdown",
              inputMethod: "code-editor"
            }, {
              property: "source",
              title: "Source",
              description: "Source file for markdown",
              inputMethod: "haxupload"
            }],
            advanced: []
          },
          demoSchema: [{
            tag: "md-block",
            properties: {
              source: "https://raw.githubusercontent.com/elmsln/HAXcms/master/HAXDocs.md"
            },
            content: ""
          }]
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(MdBlock), "properties", this)), {}, {
          source: {
            type: String
          },
          markdown: {
            type: String
          }
        });
      }
    }]);

    function MdBlock() {
      var _this;

      babelHelpers.classCallCheck(this, MdBlock);
      _this = _super.call(this);
      _this.markdown = "";
      _this.source = "";
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/marked-element/marked-element.js"], res, rej);
      });
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(MdBlock, null, [{
      key: "tag",
      get: function get() {
        return "md-block";
      }
    }]);
    return MdBlock;
  }(_litElement.LitElement);

  _exports.MdBlock = MdBlock;
  window.customElements.define(MdBlock.tag, MdBlock);
});