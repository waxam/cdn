define(["exports", "../../../lit-element/lit-element.js", "./relative-heading-state-manager.js"], function (_exports, _litElement, _relativeHeadingStateManager) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RelativeHeadingLite = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_93093b30c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_93093b30c96f11ea8be5e1d5fe7ec787 = function _templateObject2_93093b30c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_93093b30c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <slot></slot>\n    "]);

    _templateObject_93093b30c96f11ea8be5e1d5fe7ec787 = function _templateObject_93093b30c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `relative-heading-lite`
   * `outputs the correct heading hierarchy based on parent heading`
   *
   * @demo demo/lite.html
   * @element relative-heading-lite
   */
  var RelativeHeadingLite =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(RelativeHeadingLite, _LitElement);
    babelHelpers.createClass(RelativeHeadingLite, [{
      key: "render",
      // render function
      value: function render() {
        return this.template;
      } // properties available to the custom element for data binding

    }, {
      key: "template",
      get: function get() {
        return (0, _litElement.html)(_templateObject_93093b30c96f11ea8be5e1d5fe7ec787());
      }
      /**
       * Makes sure there is a utility ready and listening for elements.
       */

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_93093b30c96f11ea8be5e1d5fe7ec787())];
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RelativeHeadingLite), "properties", this), {
          /**
           * The default heading level (1-6),
           * eg., 1 for <h1>, if there  is no parent.
           */
          defaultLevel: {
            type: Number,
            attribute: "default-level",
            reflect: true
          },

          /**
           * The relative-heading's UUID.
           */
          id: {
            type: String,
            attribute: "id",
            reflect: true
          },

          /**
           * The parent relative-heading's UUID.
           */
          parent: {
            type: String,
            attribute: "parent",
            reflect: true
          },

          /**
           * The parent relative-heading's UUID.
           */
          __level: {
            type: Number,
            attribute: "level",
            reflect: true
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "relative-heading-lite";
      }
    }]);

    function RelativeHeadingLite() {
      var _this;

      babelHelpers.classCallCheck(this, RelativeHeadingLite);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RelativeHeadingLite).call(this));
      _this.parent = null;

      _this.checkId();

      _this.__level = _this.querySelector("h1,h2,h3,h4,h5,h6") ? parseInt(_this.querySelector("h1,h2,h3,h4,h5,h6").tagName.replace(/\D/, "")) : 1;
      _this.defaultLevel = 1;
      return _this;
    }
    /**
     * life cycle, element is added to the DOM
     */


    babelHelpers.createClass(RelativeHeadingLite, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(RelativeHeadingLite.prototype), "connectedCallback", this).call(this);
        this.manager.addHeading(this);
        this.observer.observe(this, {
          childList: true
        });
      }
      /**
       * returns mutation observer
       * @readonly
       * @returns {object} MutationObserver to unwrap contents
       */

    }, {
      key: "checkId",

      /**
       * ensures that id is not blank
       */
      value: function checkId() {
        this.id = this.id || "heading-".concat(this._generateUUID());
      }
      /**
       * @param {map} changedProperties the properties that have changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "defaultLevel") {
            if (!_this2.defaultLevel || _this2.defaultLevel < 1 || _this2.defaultLevel > 6) _this2.defaultLevel = Math.min(0, Math.max(_this2.defaultLevel, 6));

            _this2.manager.updateDefaultLevel(_this2, oldValue);
          }

          if (propName === "id") {
            if (!_this2.id) _this2.checkId();

            _this2.manager.updateId(_this2, oldValue);
          }

          if (propName === "parent") _this2.manager.updateParent(_this2, oldValue);

          if (propName === "__level") {
            _this2.observer.disconnect();

            _this2.updateContents();

            _this2.observer.observe(_this2, {
              childList: true
            });
          }
        });
      }
      /**
       * sets the heading level
       * @param {number} level of heading
       */

    }, {
      key: "_setLevel",
      value: function _setLevel(level) {
        if (this.__level !== level) this.__level = level;
      }
      /**
       * unwraps tags on slotted content
       */

    }, {
      key: "updateContents",
      value: function updateContents() {
        if (!this.querySelector("h".concat(this.__level)) || this.children > 0) {
          this.innerHTML = "<h".concat(this.__level, ">").concat(this.children && this.children[0] ? this.children[0].innerHTML : this.textContent, "</h").concat(this.__level, ">");
        }
      }
      /**
       * generates a unique id
       * @returns {string } unique id
       */

    }, {
      key: "_generateUUID",
      value: function _generateUUID() {
        return "ss-s-s-s-sss".replace(/s/g, Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1));
      }
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.observer.disconnect();
        this.manager.removeHeading(this);
        babelHelpers.get(babelHelpers.getPrototypeOf(RelativeHeadingLite.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "observer",
      get: function get() {
        var _this3 = this;

        var unwrap = function unwrap() {
          return _this3.updateContents();
        };

        return new MutationObserver(unwrap);
      }
      /**
       * returns state manager
       * @readonly
       * @returns {object} window.RelativeHeadingStateManager instance
       */

    }, {
      key: "manager",
      get: function get() {
        return window.RelativeHeadingStateManager.requestAvailability();
      }
    }]);
    return RelativeHeadingLite;
  }(_litElement.LitElement);

  _exports.RelativeHeadingLite = RelativeHeadingLite;
  window.customElements.define(RelativeHeadingLite.tag, RelativeHeadingLite);
});