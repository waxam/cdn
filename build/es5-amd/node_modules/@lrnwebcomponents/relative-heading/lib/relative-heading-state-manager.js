define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RelativeHeadingStateManager = void 0;

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  // register globally so we can make sure there is only one
  window.RelativeHeadingStateManager = window.RelativeHeadingStateManager || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.RelativeHeadingStateManager.requestAvailability = function () {
    if (!window.RelativeHeadingStateManager.instance) {
      window.RelativeHeadingStateManager.instance = document.createElement("relative-heading-state-manager");
      document.body.appendChild(window.RelativeHeadingStateManager.instance);
    }

    return window.RelativeHeadingStateManager.instance;
  };
  /**
   * `relative-heading-state-manager`
   * @customElement relative-heading-state-manager
   * `A utility that determines headings relative to their parents.`
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   */


  var RelativeHeadingStateManager =
  /*#__PURE__*/
  function (_HTMLElement) {
    babelHelpers.inherits(RelativeHeadingStateManager, _HTMLElement);
    babelHelpers.createClass(RelativeHeadingStateManager, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "relative-heading-state-manager";
      }
      /**
       * Makes sure there is a utility ready and listening for elements.
       */

    }]);

    function RelativeHeadingStateManager() {
      var _this;

      babelHelpers.classCallCheck(this, RelativeHeadingStateManager);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RelativeHeadingStateManager).call(this)); // sets the instance to the current instance

      if (!window.RelativeHeadingStateManager.instance) {
        window.RelativeHeadingStateManager.instance = babelHelpers.assertThisInitialized(_this);
        window.addEventListener("set-relative-heading", _this.setRelativeHeading.bind(babelHelpers.assertThisInitialized(_this)));
      }

      return _this;
    }
    /**
     * geta target and parent & adds target to parent's children
     */


    babelHelpers.createClass(RelativeHeadingStateManager, [{
      key: "setRelativeHeading",
      value: function setRelativeHeading(e) {}
      /**
       * life cycle, element is removed from the DOM
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("set-relative-heading", this.setRelativeHeading.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(RelativeHeadingStateManager.prototype), "disconnectedCallback", this).call(this);
      }
    }]);
    return RelativeHeadingStateManager;
  }(babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.RelativeHeadingStateManager = RelativeHeadingStateManager;
  window.customElements.define(RelativeHeadingStateManager.tag, RelativeHeadingStateManager);
});