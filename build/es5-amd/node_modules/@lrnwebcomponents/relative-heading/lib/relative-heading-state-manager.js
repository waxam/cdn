define(["exports", "require", "../../../lit-element/lit-element.js"], function (_exports, _require, _litElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RelativeHeadingStateManager = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject2_930e6b50c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        simple-toast:not(:defined) {\n          display: none;\n        }\n      "]);

    _templateObject2_930e6b50c96f11ea8be5e1d5fe7ec787 = function _templateObject2_930e6b50c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_930e6b50c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-toast\n        id=\"relative-heading-toast\"\n        duration=\"5000\"\n        ?hidden=\"", "\"\n        ?disabled=\"", "\"\n        text=\"", ": ", "\"\n      >\n        <paper-icon-button\n          icon=\"", "\"\n          label=\"", "\"\n          title=\"", "\"\n          @click=\"", "\"\n        ></paper-icon-button>\n      </simple-toast>\n    "]);

    _templateObject_930e6b50c96f11ea8be5e1d5fe7ec787 = function _templateObject_930e6b50c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  /**
   * Copyright 2019 The Pennsylvania State University
   * @license Apache-2.0, see License.md for full text.
   */
  // register globally so we can make sure there is only one
  window.RelativeHeadingStateManager = window.RelativeHeadingStateManager || {}; // request if this exists. This helps invoke the element existing in the dom
  // as well as that there is only one of them. That way we can ensure everything
  // is rendered through the same modal

  window.RelativeHeadingStateManager.requestAvailability = function () {
    if (!window.RelativeHeadingStateManager.instance) {
      window.RelativeHeadingStateManager.instance = document.createElement("relative-heading-state-manager");
      document.body.appendChild(window.RelativeHeadingStateManager.instance);
    }

    return window.RelativeHeadingStateManager.instance;
  };
  /**
   * `relative-heading-state-manager`
   * ` A utility that determines headings relative to their parents.`
   * @element relative-heading-state-manager
   *
   * @microcopy - language worth noting:
   *  -
   *
  
   * @polymer
   */


  var RelativeHeadingStateManager =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(RelativeHeadingStateManager, _LitElement);
    babelHelpers.createClass(RelativeHeadingStateManager, null, [{
      key: "tag",

      /**
       * Store the tag name to make it easier to obtain directly.
       */
      get: function get() {
        return "relative-heading-state-manager";
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RelativeHeadingStateManager), "properties", this), {
          /**
           * icon for copy link's toast's close button
           */
          closeIcon: {
            type: String
          },

          /**
           * label for copy link's toast's close button
           */
          closeLabel: {
            type: String
          },

          /**
           * active heading for copying link
           */
          copyHeading: {
            type: Object
          },

          /**
           * message for copy link's toast
           */
          copyMessage: {
            type: String
          },

          /**
           * Stores an array of all the players on the page.
           */
          headings: {
            type: Object
          },

          /**
           * indicates is toast is already imported for copy link feature
           */
          usesCopyLink: {
            type: Boolean
          }
        });
      }
      /**
       * Makes sure there is a utility ready and listening for elements.
       */

    }]);

    function RelativeHeadingStateManager() {
      var _this;

      babelHelpers.classCallCheck(this, RelativeHeadingStateManager);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RelativeHeadingStateManager).call(this));
      _this.closeIcon = "close";
      _this.closeLabel = "Close";
      _this.copyMessage = "Copied to Clipboard";
      _this.headings = [];
      _this.copyHeading = {};
      _this.usesCopyLink = false; // sets the instance to the current instance

      if (!window.RelativeHeadingStateManager.instance) window.RelativeHeadingStateManager.instance = babelHelpers.assertThisInitialized(_this);
      return _this;
    }

    babelHelpers.createClass(RelativeHeadingStateManager, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_930e6b50c96f11ea8be5e1d5fe7ec787(), !this.usesCopyLink, !this.usesCopyLink, this.copyHeading.copyMessage || this.copyMessage, this.copyUrl, this.copyHeading.closeIcon || this.closeIcon, this.copyHeading.closeLabel || this.closeLabel, this.copyHeading.closeLabel || this.closeLabel, this.closeCopyLink);
      }
      /**
       * gets URL to be copied
       * @readonly
       * @returns {string}
       */

    }, {
      key: "useCopyLink",

      /**
       * imports toast if needed and not already loaded
       */
      value: function useCopyLink() {
        if (!this.usesCopyLink) {
          this.usesCopyLink = true;
          new Promise(function (res, rej) {
            return _require.default(["../../../@polymer/iron-icons/iron-icons.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../../@polymer/paper-icon-button/paper-icon-button.js"], res, rej);
          });
          new Promise(function (res, rej) {
            return _require.default(["../../simple-toast/simple-toast.js"], res, rej);
          });
        }
      }
      /**
       * handles copying the share link
       * @param {object} active heading
       */

    }, {
      key: "copyLink",
      value: function copyLink(heading) {
        this.copyHeading = heading;
        var el = document.createElement("textarea");
        el.value = this.copyUrl;
        document.body.appendChild(el);
        el.select();
        document.execCommand("copy");
        document.body.removeChild(el);
        if (this.shadowRoot.querySelector("#relative-heading-toast") && this.shadowRoot.querySelector("#relative-heading-toast").open) this.shadowRoot.querySelector("#relative-heading-toast").open();
      }
      /**
       * handles closing link toast
       */

    }, {
      key: "closeCopyLink",
      value: function closeCopyLink() {
        if (this.shadowRoot.querySelector("#relative-heading-toast") && this.shadowRoot.querySelector("#relative-heading-toast").close) this.shadowRoot.querySelector("#relative-heading-toast").close();
      }
      /**
       * adds heading to manager data
       * @param {object} heading to be added
       */

    }, {
      key: "addHeading",
      value: function addHeading(heading) {
        if (heading) {
          this.addSubhead(heading);
          this.setHeading(heading.id, heading);
          this.updateLevel(heading);
        }
      }
      /**
       * adds heading from manager data
       * @param {object} heading to be removed
       */

    }, {
      key: "removeHeading",
      value: function removeHeading(heading) {
        var _this2 = this;

        if (heading) {
          if (heading.id && this.headings[heading.id]) {
            this.headings[heading.id].heading = null;
            this.headings[heading.id].subheads.forEach(function (subhead) {
              return _this2.updateLevel(subhead);
            });
          }

          this.removeSubhead(heading.parent, heading);
        }
      }
      /**
       * updates heading id in manager data
       * @param {object} heading to be updated
       * @param {string} old heading id
       */

    }, {
      key: "updateId",
      value: function updateId(heading) {
        var old = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (heading) {
          if (old) this.setHeading(old, null);
          this.setHeading(heading.id, heading);
        }
      }
      /**
       * updates heading parent id in manager data
       * @param {object} heading to be updated
       * @param {string} old heading parent
       */

    }, {
      key: "updateParent",
      value: function updateParent(heading) {
        var old = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

        if (heading) {
          if (old) this.removeSubhead(old, heading);
          this.addSubhead(heading);
        }
      }
      /**
       * updates heading level based on default level
       * @param {object} heading to be updated
       */

    }, {
      key: "updateDefaultLevel",
      value: function updateDefaultLevel(heading) {
        var old = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
        if (heading) this.updateLevel(heading);
      }
      /**
       * adds heading to subhead data
       * @param {object} heading to be added
       */

    }, {
      key: "addSubhead",
      value: function addSubhead(heading) {
        if (heading) {
          if (heading.parent) {
            if (!this.headings[heading.parent]) this.headings[heading.parent] = {
              heading: null,
              subheads: []
            };
            if (!this.headings[heading.parent].subheads.includes(heading)) this.headings[heading.parent].subheads.push(heading);
          }

          this.updateLevel(heading);
        }
      }
      /**
       * removes heading from subhead data
       * @param {string} id to be updated
       * @param {object} heading to be removed
       */

    }, {
      key: "removeSubhead",
      value: function removeSubhead(id, heading) {
        if (id && this.headings[id] && this.headings[id].subheads) {
          this.headings[id].subheads = this.headings[id].subheads.filter(function (subhead) {
            return subhead != heading;
          });
        }
      }
      /**
       * sets manager's heading data
       * @param {string} id to be updated
       * @param {object} heading to be set
       */

    }, {
      key: "setHeading",
      value: function setHeading(id, heading) {
        if (id) {
          if (!this.headings[id]) this.headings[id] = {
            heading: null,
            subheads: []
          };
          this.headings[id].heading = heading;
        }
      }
      /**
       * updates heading level
       * @param {object} heading to be updated
       */

    }, {
      key: "updateLevel",
      value: function updateLevel(heading) {
        var _this3 = this;

        if (heading) {
          var parent = heading.parent && this.headings[heading.parent].heading ? parseInt(this.headings[heading.parent].heading.__level) : null,
              plevel = parent ? Math.min(6, Math.max(parent + 1, 1)) : null,
              level = plevel ? plevel : heading.defaultLevel;

          heading._setLevel(level);

          if (this.headings[heading.id]) this.headings[heading.id].subheads.forEach(function (subhead) {
            return _this3.updateLevel(subhead);
          });
        }
      }
    }, {
      key: "copyUrl",
      get: function get() {
        return "".concat(window.location.href.replace(window.location.hash, ""), "#").concat(this.copyHeading && this.copyHeading.id ? this.copyHeading.id : "");
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_930e6b50c96f11ea8be5e1d5fe7ec787())];
      }
    }]);
    return RelativeHeadingStateManager;
  }(_litElement.LitElement);

  _exports.RelativeHeadingStateManager = RelativeHeadingStateManager;
  window.customElements.define(RelativeHeadingStateManager.tag, RelativeHeadingStateManager);
});