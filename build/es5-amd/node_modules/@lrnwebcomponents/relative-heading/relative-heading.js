define(["exports", "../../lit-element/lit-element.js", "../utils/utils.js"], function (_exports, _litElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RelativeHeading = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_627449f02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n      "]);

    _templateObject2_627449f02d8511ea80ccf124101da415 = function _templateObject2_627449f02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  function _templateObject_627449f02d8511ea80ccf124101da415() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div><slot></slot></div>\n    "]);

    _templateObject_627449f02d8511ea80ccf124101da415 = function _templateObject_627449f02d8511ea80ccf124101da415() {
      return data;
    };

    return data;
  }

  /**
   * `relative-heading`
   * `outputs the correct heading hierarchy based on parent heading`
   *
   * @demo demo/index.html
   * @customElement relative-heading
   */
  var RelativeHeading =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(RelativeHeading, _LitElement);
    babelHelpers.createClass(RelativeHeading, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_627449f02d8511ea80ccf124101da415());
      } // haxProperty definition

    }, {
      key: "_getLevel",

      /**
       * update this level when the parent id changes
       */
      value: function _getLevel(parentId, defaultLevel) {
        var parent = document.querySelector("#" + parentId),
            parentLvl = parent !== null && parent.level !== undefined ? parent.level : defaultLevel - 1,
            level = parentLvl < 6 ? parentLvl + 1 : 6;
        return level;
      }
    }, {
      key: "_updateChildren",
      value: function _updateChildren() {
        var _this2 = this;

        document.querySelectorAll('relative-heading[parent-id="' + this.id + '"]').forEach(function (child) {
          child.parentId = null;
          child.parentId = _this2.id;
        });
      }
      /**
       * determines if the level matches a specific level
       *
       * @param {number} the heading level
       * @param {number} the level it might match
       * @returns {boolean} whether or not they match
       */

    }, {
      key: "_isLevel",
      value: function _isLevel(level, testLevel) {
        return level === testLevel;
      }
    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_627449f02d8511ea80ccf124101da415())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Relative heading",
            description: "outputs the correct heading hierarchy based on parent's heading",
            icon: "icons:android",
            color: "green",
            groups: ["Heading"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "nikkimk",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "parentHeading",
              description: "",
              inputMethod: "array",
              required: false,
              icon: "icons:android"
            }, {
              property: "tag",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(RelativeHeading), "properties", this), {
          /**
           * The default heading level (1-6), eg., 1 for <h1>, if there  is no parent.
           */
          defaultLevel: {
            type: Number,
            attribute: "default-level"
          },

          /**
           * The relative-heading's UUID.
           */
          id: {
            type: String
          },

          /**
           * The parent relative-heading's UUID.
           */
          parentId: {
            type: String,
            attribute: "parent-id"
          },

          /**
           * The heading text.
           */
          text: {
            type: String
          },

          /**
           * The heading level (1-6), eg., 1 for <h1>
           */
          level: {
            type: Number,
            reflect: true
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "relative-heading";
      }
    }]);

    function RelativeHeading() {
      var _this;

      babelHelpers.classCallCheck(this, RelativeHeading);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(RelativeHeading).call(this));
      _this.defaultLevel = 1;
      _this.parentId = null;
      _this.text = "";
      return _this;
    }

    babelHelpers.createClass(RelativeHeading, [{
      key: "updated",
      value: function updated(changedProperties) {
        var _this3 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "id") {
            _this3._updateChildren(_this3[propName], oldValue);
          }

          if (propName == "level" || propName == "text") {
            (0, _utils.wipeSlot)(_this3);
            var level = document.createElement("h".concat(_this3.level));
            level.innerText = _this3.text;

            _this3.appendChild(level);

            _this3._updateChildren(_this3.level, oldValue);
          }

          if (["parentId", "defaultLevel"].includes(propName)) {
            _this3.level = _this3._getLevel(_this3.parentId, _this3.defaultLevel);
          }
        });
      }
    }]);
    return RelativeHeading;
  }(_litElement.LitElement);

  _exports.RelativeHeading = RelativeHeading;
  window.customElements.define(RelativeHeading.tag, RelativeHeading);
});