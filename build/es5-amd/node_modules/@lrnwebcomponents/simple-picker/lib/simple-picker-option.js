define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../lrn-shared-styles/lrn-shared-styles.js", "../../../@polymer/iron-icon/iron-icon.js", "../../../@polymer/iron-icons/iron-icons.js"], function (_exports, _polymerElement, _lrnSharedStyles, _ironIcon, _ironIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimplePickerOption = void 0;

  function _templateObject_549b6930dbdc11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"lrn-shared-styles\">\n        :host {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n          color: var(--simple-picker-color);\n        }\n        :host div {\n          margin: unset;\n          padding: unset;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host .label {\n          padding: var(--simple-picker-option-padding, 2px 10px);\n          line-height: 100%;\n          @apply --simple-picker-option-label;\n        }\n\n        :host iron-icon {\n          width: var(--simple-picker-option-size, 24px);\n          min-height: var(--simple-picker-option-size, 24px);\n          min-width: var(--simple-picker-option-size, 24px);\n          line-height: var(--simple-picker-option-size, 24px);\n          @apply --simple-picker-icon;\n        }\n      </style>\n      <iron-icon\n        aria-hidden=\"true\"\n        hidden$=\"[[_hideIcon(icon)]]\"\n        icon$=\"[[icon]]\"\n      ></iron-icon>\n      <div id=\"label\" class$=\"[[_getSrOnly(hideOptionLabels)]]\">[[label]]</div>\n    "]);

    _templateObject_549b6930dbdc11e9bcafdb98156fc1d6 = function _templateObject_549b6930dbdc11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
   * `simple-picker-option`
   * `a simple picker for options, icons, etc.`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @see ../simple-picker.js
   * @see ../simple-color-picker-row.js
   */
  var SimplePickerOption =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(SimplePickerOption, _PolymerElement);

    function SimplePickerOption() {
      babelHelpers.classCallCheck(this, SimplePickerOption);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimplePickerOption).apply(this, arguments));
    }

    babelHelpers.createClass(SimplePickerOption, [{
      key: "_hideIcon",

      /**
       * If the option is not an iron-icon, hide the iron-icon.
       *
       * @param {string} icon the icon property
       * @returns {boolean} whether or not the iron iron should be hidden
       */
      value: function _hideIcon(icon) {
        return this.icon === null;
      }
      /**
       * On keyboard focus, fires an event to the picker so that active descendant can be set.
       * @returns {void}
       */

    }, {
      key: "_handleFocus",
      value: function _handleFocus() {
        this.dispatchEvent(new CustomEvent("option-focus", {
          detail: this
        }));
      }
      /**
       * On mouse hover, fires an event to the picker so that active descendant can be set.
       * @returns {void}
       */

    }, {
      key: "_handleHover",
      value: function _handleHover() {
        this.dispatchEvent(new CustomEvent("option-focus", {
          detail: this
        }));
      }
      /**
       * determines if a label should visible on screen
       *
       * @param {boolean} hideOptionLabels property
       * @returns {string} the sr-only (screenreader-only) class
       */

    }, {
      key: "_getSrOnly",
      value: function _getSrOnly(hideOptionLabels) {
        return hideOptionLabels === false ? "label" : "label sr-only";
      }
      /**
       * updates the title
       * @returns {void}
       */

    }, {
      key: "_updateLabel",
      value: function _updateLabel() {
        var label = document.createElement("span");

        if (this.titleAsHtml !== false) {
          label.innerHTML = this.label;
          this.$.label.innerHTML = "";
          this.$.label.appendChild(label);
        }
      }
      /**
       * Set event listeners
       * @returns {void}
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(SimplePickerOption.prototype), "ready", this).call(this);
        var root = this;

        this._updateLabel();

        this.addEventListener("focus", function (e) {
          root._handleFocus();
        });
        this.addEventListener("mouseover", function (e) {
          root._handleHover();
        });
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_549b6930dbdc11e9bcafdb98156fc1d6());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Is the option active?
           */
          active: {
            name: "active",
            type: Boolean,
            value: null,
            reflectToAttribute: true
          },

          /**
           * The style of the option. (Required for accessibility.)
           */
          data: {
            name: "data",
            type: Object,
            value: null
          },

          /**
           * If the option is hidden
           */
          hidden: {
            name: "hidden",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Hide option labels? As color-picker or icon-picker, labels may be redundant.
           * This option would move the labels off-screen so that only screen-readers will have them.
           */
          hideOptionLabels: {
            name: "hideOptionLabels",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Optional. If option is an iron icon, the iconset:name of the icon
           */
          icon: {
            name: "icon",
            type: String,
            value: null,
            reflectToAttribute: false
          },

          /**
           * The id of the option
           */
          id: {
            name: "order",
            type: String,
            value: null,
            reflectToAttribute: true
          },

          /**
           * The text of the option. (Required for accessibility.)
           */
          label: {
            name: "label",
            type: String,
            value: null,
            reflectToAttribute: true,
            observer: "_updateLabel"
          },

          /**
           * Is the option selected?
           */
          selected: {
            name: "selected",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Renders html as title. (Good for titles with HTML in them.)
           */
          titleAsHtml: {
            name: "titleAsHtml",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * The value of the option.
           */
          value: {
            name: "label",
            type: String,
            value: null,
            reflectToAttribute: true
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-picker-option";
      }
    }]);
    return SimplePickerOption;
  }(_polymerElement.PolymerElement);

  _exports.SimplePickerOption = SimplePickerOption;
  window.customElements.define(SimplePickerOption.tag, SimplePickerOption);
});