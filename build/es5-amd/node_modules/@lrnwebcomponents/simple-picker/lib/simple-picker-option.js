define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/iron-icon/iron-icon.js","../../../@polymer/iron-icons/iron-icons.js","../../lrn-shared-styles/lrn-shared-styles.js"],function(_exports,_polymerElement,_ironIcon,_ironIcons,_lrnSharedStyles){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.SimplePickerOption=void 0;function _templateObject_cdebed9083ae11e9bca9910ed3db32b8(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\" include=\"lrn-shared-styles\">\n        :host {\n          display: flex;\n          align-items: center;\n          justify-content: space-between;\n        }\n        :host .label {\n          padding: 2px 10px;\n          line-height: 100%;\n          @apply --simple-picker-option-label;\n        }\n      </style>\n      <iron-icon\n        aria-hidden=\"true\"\n        hidden$=\"[[_hideIcon(icon)]]\"\n        icon$=\"[[icon]]\"\n      ></iron-icon>\n      <div id=\"title\" class$=\"[[_getSrOnly(hideOptionLabels)]]\">[[title]]</div>\n    "]);_templateObject_cdebed9083ae11e9bca9910ed3db32b8=function _templateObject_cdebed9083ae11e9bca9910ed3db32b8(){return data};return data}/**
 * `simple-picker-option`
 * `a simple picker for options, icons, etc.`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 * @see ../simple-picker.js
 * @see ../simple-color-picker-row.js
 */var SimplePickerOption=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(SimplePickerOption,_PolymerElement);function SimplePickerOption(){babelHelpers.classCallCheck(this,SimplePickerOption);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(SimplePickerOption).apply(this,arguments))}babelHelpers.createClass(SimplePickerOption,[{key:"_hideIcon",/**
   * If the option is not an iron-icon, hide the iron-icon.
   *
   * @param {string} the icon property
   * @returns {boolean} whether or not the iron iron should be hidden
   */value:function _hideIcon(icon){return null===this.icon}/**
   * On keyboard focus, fires an event to the picker so that active descendant can be set.
   */},{key:"_handleFocus",value:function _handleFocus(){this.dispatchEvent(new CustomEvent("option-focus",{detail:this}))}/**
   * On mouse hover, fires an event to the picker so that active descendant can be set.
   */},{key:"_handleHover",value:function _handleHover(){this.dispatchEvent(new CustomEvent("option-focus",{detail:this}))}/**
   * determines if a label should visible on screen
   *
   * @param {boolean} hideOptionLabels property
   * @returns {string} the sr-only (screenreader-only) class
   */},{key:"_getSrOnly",value:function _getSrOnly(hideOptionLabels){return!1===hideOptionLabels?"label":"label sr-only"}/**
   * updates the title
   */},{key:"_updateTitle",value:function _updateTitle(){var title=document.createElement("span");if(!1!==this.titleAsHtml){title.innerHTML=this.title;this.$.title.innerHTML="";this.$.title.appendChild(title)}}/**
   * Set event listeners
   */},{key:"ready",value:function ready(){babelHelpers.get(babelHelpers.getPrototypeOf(SimplePickerOption.prototype),"ready",this).call(this);var root=this;this._updateTitle();this.addEventListener("focus",function(e){root._handleFocus()});this.addEventListener("mouseover",function(e){root._handleHover()})}/**
   * life cycle, element is afixed to the DOM
   */},{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(SimplePickerOption.prototype),"connectedCallback",this).call(this)}/**
   * life cycle, element is removed from the DOM
   */ //disconnectedCallback() {}
}],[{key:"template",// render function
get:function get(){return(0,_polymerElement.html)(_templateObject_cdebed9083ae11e9bca9910ed3db32b8())}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return{/**
       * Is the option active?
       */active:{name:"active",type:"Boolean",value:null,reflectToAttribute:!0},/**
       * Optional. If option is an iron icon, the iconset:name of the icon
       */icon:{name:"icon",type:"String",value:null,reflectToAttribute:!1},/**
       * Hide option labels? As color-picker or icon-picker, labels may be redundant.
       * This option would move the labels off-screen so that only screen-readers will have them.
       */hideOptionLabels:{name:"hideOptionLabels",type:"Boolean",value:!1,reflectToAttribute:!0},/**
       * The id of the option
       */id:{name:"order",type:"String",value:null,reflectToAttribute:!0},/**
       * Is the option selected?
       */selected:{name:"selected",type:"Boolean",value:!1,reflectToAttribute:!0},/**
       * The style of the option. (Required for accessibility.)
       */data:{name:"data",type:"Object",value:null},/**
       * The text of the option. (Required for accessibility.)
       */title:{name:"title",type:"String",value:null,reflectToAttribute:!0,observer:"_updateTitle"},/**
       * Renders html as title. (Good for titles with HTML in them.)
       */titleAsHtml:{name:"titleAsHtml",type:"Boolean",value:!1,reflectToAttribute:!0},/**
       * The value of the option.
       */value:{name:"label",type:"String",value:null,reflectToAttribute:!0}}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"simple-picker-option"}}]);return SimplePickerOption}(_polymerElement.PolymerElement);_exports.SimplePickerOption=SimplePickerOption;window.customElements.define(SimplePickerOption.tag,SimplePickerOption)});