define(["exports", "../../../lit-element/lit-element.js", "../../../@polymer/iron-icon/iron-icon.js", "../../../@polymer/iron-icons/iron-icons.js"], function (_exports, _litElement, _ironIcon, _ironIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SimplePickerOption = void 0;

  function _templateObject4_9467e0d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["red"]);

    _templateObject4_9467e0d0c96f11ea8be5e1d5fe7ec787 = function _templateObject4_9467e0d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject3_9467e0d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      :host {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        color: var(--simple-picker-color);\n      }\n      :host([hidden]) {\n        display: none;\n      }\n      div {\n        margin: unset;\n        padding: unset;\n      }\n      #label {\n        padding: var(\n          --simple-picker-option-label-padding,\n          var(--simple-picker-option-padding, 2px 10px)\n        );\n        line-height: 100%;\n        width: max-content;\n      }\n\n      :host([hide-option-labels]) #label {\n        position: absolute;\n        left: -999999px;\n        width: 0;\n        height: 0;\n        overflow: hidden;\n      }\n\n      iron-icon {\n        width: var(--simple-picker-option-size, 24px);\n        min-height: var(--simple-picker-option-size, 24px);\n        min-width: var(--simple-picker-option-size, 24px);\n        line-height: var(--simple-picker-option-size, 24px);\n      }\n    "]);

    _templateObject3_9467e0d0c96f11ea8be5e1d5fe7ec787 = function _templateObject3_9467e0d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject2_9467e0d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n              ", "\n            "]);

    _templateObject2_9467e0d0c96f11ea8be5e1d5fe7ec787 = function _templateObject2_9467e0d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  function _templateObject_9467e0d0c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <iron-icon\n        ?hidden=\"", "\"\n        .icon=\"", "\"\n        aria-hidden=\"true\"\n      ></iron-icon>\n      <div id=\"label\">\n        ", "\n      </div>\n    "]);

    _templateObject_9467e0d0c96f11ea8be5e1d5fe7ec787 = function _templateObject_9467e0d0c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `simple-picker-option`
   * a simple picker for options, icons, etc.
   * 
  ### Styling
  
  `<a11y-gif-player>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--simple-picker-color` | color of simple picker text | unset
  `--simple-picker-option-padding` | padding within each simple picker option | 2px 10px
  `--simple-picker-option-label-padding` | adding within each simple picker option's label | --simple-picker-option-padding
  `--simple-picker-option-size` | size of each simple picker option | 24px
   *
   * @see ../simple-picker.js
   * @element simple-picker-option
   */
  var SimplePickerOption =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(SimplePickerOption, _LitElement);
    babelHelpers.createClass(SimplePickerOption, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_9467e0d0c96f11ea8be5e1d5fe7ec787(), !this.icon, this.icon, this.titleAsHtml ? (0, _litElement.html)(_templateObject2_9467e0d0c96f11ea8be5e1d5fe7ec787(), this.label) : this.label);
      }
    }], [{
      key: "styles",
      //styles
      get: function get() {
        return (0, _litElement.css)(_templateObject3_9467e0d0c96f11ea8be5e1d5fe7ec787());
      }
    }]);

    function SimplePickerOption() {
      var _this;

      babelHelpers.classCallCheck(this, SimplePickerOption);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SimplePickerOption).call(this));
      _this.active = null;
      _this.data = null;
      _this.hidden = false;
      _this.hideOptionLabels = false;
      _this.icon = null;
      _this.id = null;
      _this.label = null;
      _this.selected = false;
      _this.titleAsHtml = false;
      _this.value = null;
      setTimeout(function () {
        _this.addEventListener("focus", _this._handleFocus.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseover", _this._handleHover.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    } // properties available to the custom element for data binding


    babelHelpers.createClass(SimplePickerOption, [{
      key: "_handleFocus",

      /**
       * On keyboard focus, fires an event to the picker so that active descendant can be set.
       * @returns {void}
       */
      value: function _handleFocus() {
        this.dispatchEvent(new CustomEvent("option-focus", {
          detail: this
        }));
      }
      /**
       * On mouse hover, fires an event to the picker so that active descendant can be set.
       * @returns {void}
       */

    }, {
      key: "_handleHover",
      value: function _handleHover() {
        this.dispatchEvent(new CustomEvent("option-focus", {
          detail: this
        }));
      }
    }, {
      key: "_getColor",
      value: function _getColor() {
        return (0, _litElement.css)(_templateObject4_9467e0d0c96f11ea8be5e1d5fe7ec787());
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * Is the option active?
           */
          active: {
            type: Boolean,
            reflect: true
          },

          /**
           * The style of the option. (Required for accessibility.)
           */
          data: {
            type: Object
          },

          /**
           * If the option is hidden
           */
          hidden: {
            type: Boolean,
            reflect: true
          },

          /**
           * Hide option labels? As color-picker or icon-picker, labels may be redundant.
           * This option would move the labels off-screen so that only screen-readers will have them.
           */
          hideOptionLabels: {
            type: Boolean,
            reflect: true,
            attribute: "hide-option-labels"
          },

          /**
           * Optional. If option is an iron icon, the iconset:name of the icon
           */
          icon: {
            type: String
          },

          /**
           * The id of the option
           */
          id: {
            type: String,
            reflect: true
          },

          /**
           * The text of the option. (Required for accessibility.)
           */
          label: {
            type: String,
            reflect: true
          },

          /**
           * Is the option selected?
           */
          selected: {
            type: Boolean,
            reflect: true
          },

          /**
           * styles object to allow for piercing of shadow DOM
           */
          styles: {
            type: Object
          },

          /**
           * Renders html as title. (Good for titles with HTML in them.)
           */
          titleAsHtml: {
            type: Boolean,
            reflect: true,
            attribute: "title-as-html"
          },

          /**
           * The value of the option.
           */
          value: {
            type: String,
            reflect: true
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       */

    }, {
      key: "tag",
      get: function get() {
        return "simple-picker-option";
      }
    }]);
    return SimplePickerOption;
  }(_litElement.LitElement);

  _exports.SimplePickerOption = SimplePickerOption;
  window.customElements.define(SimplePickerOption.tag, SimplePickerOption);
});