define(["exports", "require", "../../lit-element/lit-element.js", "../simple-colors/simple-colors.js", "../schema-behaviors/schema-behaviors.js", "../lazy-image-helpers/lazy-image-helpers.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js"], function (_exports, _require, _litElement, _simpleColors, _schemaBehaviors, _lazyImageHelpers, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SelfCheck = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject3_f34dc330512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          margin: 15px 0;\n        }\n        :host([hidden]),\n        *[hidden] {\n          display: none !important;\n        }\n\n        div.card {\n          box-shadow: 0 5px 10px rgba(0, 0, 0, 0.3);\n          width: 100%;\n          color: var(\n            --self-check-question-text,\n            var(--simple-colors-default-theme-grey-12, #000)\n          );\n          background-color: var(\n            --self-check-question-color,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n          overflow: hidden;\n        }\n\n        simple-icon-button {\n          --simple-icon-width: 24px;\n          --simple-icon-height: 24px;\n          position: relative;\n          left: 10px;\n          bottom: -10px;\n          padding: 2px;\n        }\n\n        .check_button {\n          display: flex;\n          justify-content: flex-end;\n        }\n        .close_button {\n          display: flex;\n          justify-content: flex-end;\n        }\n\n        simple-icon#questionmark {\n          --simple-icon-width: 35px;\n          --simple-icon-height: 35px;\n          padding: 5px;\n          color: var(\n            --self-check-heading-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n        }\n\n        .heading {\n          text-transform: uppercase;\n          font-size: 22px;\n          margin: 10px;\n          color: var(\n            --self-check-heading-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n        }\n\n        #header_wrap {\n          color: var(\n            --self-check-heading-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n          background-color: var(\n            --self-check-heading-color,\n            var(--simple-colors-default-theme-accent-8, #444)\n          );\n          display: flex;\n          align-items: center;\n          width: 100%;\n          margin: -20px 0 0;\n        }\n\n        #question_wrap {\n          color: var(\n            --self-check-question-text,\n            var(--simple-colors-default-theme-grey-12, #000)\n          );\n          background-color: var(\n            --self-check-question-color,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n          position: relative;\n        }\n\n        .question {\n          font-size: 16px;\n          padding: 15px 15px;\n        }\n\n        :host([correct]) .question {\n          display: none;\n        }\n\n        #answer_wrap {\n          visibility: hidden;\n          opacity: 0;\n          color: var(\n            --self-check-answer-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n          background-color: var(\n            --self-check-answer-color,\n            var(--simple-colors-default-theme-light-green-8, #00762e)\n          );\n          border-top: 2px solid\n            var(\n              --self-check-answer-text,\n              var(--simple-colors-default-theme-grey-1, #fff)\n            );\n          width: 100%;\n          top: 0;\n          transition: all 0.2s ease;\n          left: calc(100%);\n          position: absolute;\n        }\n\n        :host([correct]) #answer_wrap {\n          visibility: visible;\n          opacity: 1;\n          position: relative;\n          left: 0;\n        }\n\n        .answer {\n          font-size: 16px;\n          padding: 15px;\n          line-height: 19.2px;\n        }\n\n        #quote_start {\n          display: inline-flex;\n          transform: rotateY(180deg);\n        }\n\n        #quote_end {\n          display: inline-flex;\n        }\n\n        .triangle {\n          width: 0;\n          height: 0;\n          border-left: 20px solid transparent;\n          border-right: 20px solid transparent;\n          border-bottom: 20px solid\n            var(\n              --self-check-heading-color,\n              var(--simple-colors-default-theme-accent-8, #444)\n            );\n          position: relative;\n          top: -20px;\n          left: -1px;\n        }\n\n        .more_info {\n          display: inline;\n        }\n\n        .more_info a {\n          color: var(\n            --self-check-answer-text,\n            var(--simple-colors-default-theme-grey-1, #fff)\n          );\n        }\n\n        .more_info a:hover {\n          text-decoration: none;\n        }\n        .image-wrap {\n          max-height: 400px;\n          overflow: hidden;\n        }\n      "]);

    _templateObject3_f34dc330512d11eba3cb872b69c5cbbb = function _templateObject3_f34dc330512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _templateObject2_f34dc330512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n                    <div class=\"more_info\">\n                      <user-action track=\"click\" every\n                        ><a href=\"", "\" target=\"_blank\"\n                          >More info...</a\n                        ></user-action\n                      >\n                    </div>\n                  "]);

    _templateObject2_f34dc330512d11eba3cb872b69c5cbbb = function _templateObject2_f34dc330512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _templateObject_f34dc330512d11eba3cb872b69c5cbbb() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"card\">\n        <div class=\"image-wrap\">\n          ", "\n          <img\n            src=\"", "\"\n            alt=\"", "\"\n            aria-describedby=\"", "\"\n            loading=\"lazy\"\n          />\n        </div>\n        <div class=\"triangle\"></div>\n        <div id=\"header_wrap\">\n          <simple-icon\n            id=\"questionmark\"\n            icon=\"icons:help\"\n            ?dark=\"", "\"\n            contrast=\"4\"\n          ></simple-icon>\n          <div class=\"heading\" id=\"title\">", "</div>\n        </div>\n        <div id=\"question_wrap\">\n          <div class=\"question\" aria-hidden=\"", "\">\n            <slot name=\"question\"></slot>\n            <div class=\"check_button\">\n              <simple-icon-button\n                controls=\"answer_wrap\"\n                aria-label=\"Reveal Answer\"\n                id=\"checkBtn\"\n                class=\"check-btn\"\n                icon=\"icons:check-circle\"\n                ?dark=\"", "\"\n                @click=\"", "\"\n              ></simple-icon-button>\n              <simple-tooltip aria-hidden=\"true\" for=\"checkBtn\" position=\"left\">\n                Reveal Answer\n              </simple-tooltip>\n            </div>\n          </div>\n          <div\n            id=\"answer_wrap\"\n            aria-hidden=\"", "\"\n            aria-live=\"polite\"\n          >\n            <div class=\"answer\">\n              <user-action track=\"visibility\">\n                <slot></slot>\n              </user-action>\n              ", "\n              <div class=\"close_button\">\n                <simple-icon-button\n                  aria-label=\"Close\"\n                  id=\"closeBtn\"\n                  dark\n                  icon=\"icons:close\"\n                  @click=\"", "\"\n                >\n                </simple-icon-button>\n                <simple-tooltip\n                  aria-hidden=\"true\"\n                  for=\"closeBtn\"\n                  position=\"left\"\n                >\n                  Close\n                </simple-tooltip>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    "]);

    _templateObject_f34dc330512d11eba3cb872b69c5cbbb = function _templateObject_f34dc330512d11eba3cb872b69c5cbbb() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `self-check`
   * 
  ### Styling
  
  `<self-check>` provides the following custom properties
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--a11y-collapse-margin` | margin around a11y-collapse | 15px 0
  `--self-check-question-color` | question background color | var(--simple-colors-default-theme-grey-1, #fff)
  `--self-check-question-text` | question text color  | var(--simple-colors-default-theme-grey-12, #000)
  `--self-check-heading-color` | heading background color | var(--simple-colors-default-theme-accent-8, #444)
  `--self-check-heading-text` | heading text color | var(--simple-colors-default-theme-grey-1, #fff)
  `--self-check-answer-color` | answer background color | var(--simple-colors-default-theme-light-green-8, #00762e)
  `--self-check-answer-text` | answer text color | var(--simple-colors-default-theme-grey-1, #fff)
   * 
  
   * @extends LitElement
   * @extends SimpleColors
   * @extends SchemaBehaviors
   * @demo ./demo/index.html
   * @element self-check
   * 
   */
  var SelfCheck = /*#__PURE__*/function (_lazyImageLoader) {
    babelHelpers.inherits(SelfCheck, _lazyImageLoader);

    var _super = _createSuper(SelfCheck);

    function SelfCheck() {
      var _this;

      babelHelpers.classCallCheck(this, SelfCheck);
      _this = _super.call(this);
      _this.correct = false;
      _this.alt = "";
      _this.image = "";
      _this.question = "";
      _this.title = "Self-Check";
      return _this;
    }

    babelHelpers.createClass(SelfCheck, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_f34dc330512d11eba3cb872b69c5cbbb(), this.renderSVGLoader(), this.image, this.alt, this.describedBy || "", !this.dark, this.title, this.correct, this.dark, this.openAnswer, this.correct ? "false" : "true", this.link ? (0, _litElement.html)(_templateObject2_f34dc330512d11eba3cb872b69c5cbbb(), this.link) : "", this.openAnswer);
      }
      /**
       * LitElement life cycle - property changed
       */

    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(SelfCheck.prototype), "updated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(SelfCheck.prototype), "updated", this).call(this, changedProperties);
        }

        changedProperties.forEach(function (oldValue, propName) {
          if (propName == "elementVisible" && _this2.elementVisible) {
            new Promise(function (res, rej) {
              return _require.default(["../user-action/user-action.js"], res, rej);
            });
            new Promise(function (res, rej) {
              return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
            });
          }
        });
      }
    }, {
      key: "haxHooks",

      /**
       * Implements haxHooks to tie into life-cycle if hax exists.
       */
      value: function haxHooks() {
        return {
          activeElementChanged: "haxactiveElementChanged"
        };
      }
      /**
       * double-check that we are set to inactivate click handlers
       * this is for when activated in a duplicate / adding new content state
       */

    }, {
      key: "haxactiveElementChanged",
      value: function haxactiveElementChanged(el, val) {
        // flag for HAX to not trigger active on changes
        var container = this.shadowRoot.querySelector("#title");

        if (val) {
          container.setAttribute("contenteditable", true);
        } else {
          container.removeAttribute("contenteditable");
          this.title = container.innerText;
        }

        return false;
      }
      /**
       * Property for toggling "checkbtn".
       */

    }, {
      key: "openAnswer",
      value: function openAnswer(e) {
        this.correct = !this.correct;
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(SelfCheck), "styles", this)), [(0, _litElement.css)(_templateObject3_f34dc330512d11eba3cb872b69c5cbbb())]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "self-check";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(SelfCheck), "properties", this)), {}, {
          /**
           * Title.
           */
          title: {
            type: String
          },

          /**
           * Question.
           */
          question: {
            type: String
          },

          /**
           * Image.
           */
          image: {
            type: String,
            reflect: true
          },

          /**
           * Alt text for image.
           */
          alt: {
            type: String,
            reflect: true
          },

          /**
           * Aria-describedby data passed down to appropriate tag
           */
          describedBy: {
            type: String,
            attribute: "described-by"
          },

          /**
           * Link for more information.
           */
          link: {
            type: String,
            reflect: true
          },

          /**
           * Property for toggling "checkbtn".
           */
          correct: {
            type: Boolean,
            reflect: true
          }
        });
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          contentEditable: true,
          gizmo: {
            title: "Self-Check",
            description: "The user will be able to complete a self-check.",
            icon: "icons:check-circle",
            color: "orange",
            groups: ["Image", "Assessment"],
            handles: [{
              type: "image",
              source: "image",
              title: "question",
              description: "answer",
              ariaDescribedby: "describedBy"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            configure: [{
              property: "title",
              title: "Title",
              description: "The title of the element",
              inputMethod: "textfield"
            }, {
              property: "accentColor",
              title: "Accent Color",
              description: "The accent color of the self-check",
              inputMethod: "colorpicker",
              icon: "editor:format-color-fill"
            }, {
              property: "dark",
              title: "Dark Theme",
              description: "Enable Dark Theme",
              inputMethod: "boolean",
              icon: "icons:invert-colors"
            }, {
              property: "image",
              title: "Image",
              description: "The image of the element",
              inputMethod: "haxupload",
              validationType: "url"
            }, {
              property: "link",
              title: "More link",
              description: "Link to additional information",
              inputMethod: "haxupload",
              validationType: "url"
            }, {
              property: "alt",
              title: "Alt Text",
              description: "Add alt text to the image",
              inputMethod: "alt"
            }],
            advanced: [{
              property: "describedBy",
              title: "aria-describedby",
              description: "Space-separated list of IDs for elements that describe the image.",
              inputMethod: "textfield"
            }]
          },
          saveOptions: {
            unsetAttributes: ["colors", "image-loaded"]
          },
          demoSchema: [{
            tag: "self-check",
            properties: {
              "accent-color": "light-blue",
              title: "Sharks Self Check",
              image: "https://kids.nationalgeographic.com/content/dam/kids/photos/animals/Fish/A-G/great-white-shark-teeth.ngsversion.1396530884408.adapt.1900.1.jpg",
              alt: "Great White Shark"
            },
            content: "<span slot=\"question\">How large can the average great white shark grow to be?</span>\n          The Great White shark can grow to be 15 ft to more than 20 ft in length and weigh 2.5 tons or more."
          }]
        };
      }
    }]);
    return SelfCheck;
  }((0, _lazyImageHelpers.lazyImageLoader)((0, _schemaBehaviors.SchemaBehaviors)(_simpleColors.SimpleColors)));

  _exports.SelfCheck = SelfCheck;
  window.customElements.define(SelfCheck.tag, SelfCheck);
});