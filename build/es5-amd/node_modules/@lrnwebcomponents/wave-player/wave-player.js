define(["exports", "meta", "require", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js", "../es-global-bridge/es-global-bridge.js"], function (_exports, meta, _require, _litElement, _schemaBehaviors, _esGlobalBridge) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.WavePlayer = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_65f9e580d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          height: 150px;\n          background-color: var(--dark-primary-color);\n          display: block;\n        }\n\n        paper-icon-button {\n          position: absolute;\n        }\n\n        .title,\n        .subtitle {\n          transition: all 0.5s ease;\n          padding: 10px 10px 10px 0;\n          left: 160px;\n          position: absolute;\n        }\n\n        .subtitle {\n          bottom: 0;\n        }\n\n        .controls {\n          height: 50px;\n          width: 100%;\n          top: 0;\n          background: var(--accent-color);\n          z-index: 20;\n        }\n\n        paper-fab {\n          transition: all 0.5s ease;\n          top: -25px;\n          z-index: 25;\n          border-radius: 0;\n        }\n\n        .albuminfo {\n          position: relative;\n          transition: all 0.5s ease;\n          top: -156px;\n          margin-bottom: -150px;\n          z-index: 20;\n          height: 150px;\n          background-color: rgba(0, 0, 0, 0.4);\n          color: #fff;\n          font-family: Roboto, sans-serif;\n        }\n\n        .albuminfoActive {\n          top: -25;\n          height: 25px;\n          width: 100%;\n          margin-bottom: -19px;\n        }\n\n        .waveContainer {\n          top: -31px;\n          transition: all 0.5s ease;\n          background-color: var(--dark-primary-color);\n          transform: scaleY(1.5);\n        }\n\n        .circleAnimation {\n          border-radius: 50%;\n          overflow: auto;\n          -moz-box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.4);\n          box-shadow: 0 2px 5px 0 rgba(0, 0, 0, 0.4);\n        }\n\n        .circleAnimation:active {\n          -moz-box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2);\n          box-shadow: 0 8px 17px 0 rgba(0, 0, 0, 0.2);\n        }\n\n        .playActive {\n          top: 0;\n          width: 100%;\n          height: 50px;\n        }\n\n        .waveActive {\n          top: 0px;\n          transform: scaleY(1);\n        }\n\n        .centred,\n        .titleActive {\n          transform: scaleY(0);\n        }\n\n        .titleActive {\n          opacity: 0;\n        }\n\n        #playbutton {\n          transition: all 0.5s ease;\n        }\n\n        .coverart {\n          transition: all 0.5s ease;\n          width: 150px;\n          height: 150px;\n        }\n\n        .title {\n          font-size: 24px;\n        }\n\n        .coverartActive {\n          width: 25px;\n          height: 25px;\n        }\n\n        .nameActive {\n          font-size: 19px;\n          padding: 3px 3px 3px 0;\n          left: 30px;\n        }\n\n        .centred {\n          top: calc(50% - 20px);\n          left: calc(50% - 20px);\n          transition: all 0.3s ease;\n        }\n\n        .left,\n        .middle,\n        .right {\n          transform: scale(1);\n        }\n\n        .left {\n          left: calc(25% - 20px);\n        }\n\n        .right {\n          left: calc(75% - 20px);\n        }\n        .hidden {\n          display: none;\n        }\n        @media only screen and (max-width: 500px) {\n          .albuminfo {\n            width: 100%;\n          }\n        }\n      "]);

    _templateObject2_65f9e580d34d11ea880ba1e93364c49c = function _templateObject2_65f9e580d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_65f9e580d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <paper-fab\n        id=\"playbutton\"\n        class=\"circleAnimation\"\n        disabled=\"\"\n        icon=\"av:play-arrow\"\n        @click=\"", "\"\n      ></paper-fab>\n      <paper-material id=\"controls\" class=\"controls hidden\" elevation=\"2\">\n        <paper-icon-button\n          class=\"centred middle\"\n          style=\"color: white;\"\n          icon=\"av:pause\"\n          @click=\"", "\"\n        ></paper-icon-button>\n        <paper-icon-button\n          id=\"replay\"\n          class=\"centred\"\n          style=\"color: white;\"\n          icon=\"av:replay-30\"\n          @click=\"", "\"\n        ></paper-icon-button>\n        <paper-icon-button\n          id=\"mute\"\n          class=\"centred\"\n          style=\"color: white;\"\n          icon=\"av:volume-up\"\n          @click=\"", "\"\n        ></paper-icon-button>\n      </paper-material>\n      <div id=\"container\" class=\"waveContainer\" elevation=\"0\"></div>\n      <div id=\"albuminfo\" class=\"albuminfo\">\n        <img loading=\"lazy\" class=\"coverart\" src=\"", "\" />\n        <span class=\"title\">", "</span>\n        <span class=\"subtitle\">", "</span>\n      </div>\n    "]);

    _templateObject_65f9e580d34d11ea880ba1e93364c49c = function _templateObject_65f9e580d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `wave-player`
   * `A player for visualizing a sound file`
   * @demo demo/index.html
   * @element wave-player
   */
  var WavePlayer =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(WavePlayer, _SchemaBehaviors);
    babelHelpers.createClass(WavePlayer, [{
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_65f9e580d34d11ea880ba1e93364c49c(), this.togglePlay, this.togglePlay, this.throwBack, this.toggleMute, this.coverart, this.title, this.subtitle);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          var notifiedProps = ["src", "title", "subtitle", "coverart", "lean", "wavecolor", "progresscolor"];

          if (notifiedProps.includes(propName)) {
            // notify
            var eventName = "".concat(propName.replace(/([a-z0-9]|(?=[A-Z]))([A-Z])/g, "$1-$2").toLowerCase(), "-changed");

            _this2.dispatchEvent(new CustomEvent(eventName, {
              detail: {
                value: _this2[propName]
              }
            }));
          }

          if (propName == "src") {
            _this2._srcChanged(_this2[propName], oldValue);
          }
        });
      }
    }, {
      key: "_srcChanged",

      /**
       * Source changed, let's test if we should update wavesurfer
       */
      value: function _srcChanged(newValue, oldValue) {
        // don't care what it is so long as it's a value
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && this.__wavesurfer) {
          window.wavesurferobject.load(newValue);
        }
      }
      /**
       * created life cycle
       */

    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_65f9e580d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "wave-player";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(WavePlayer), "properties", this), {
          src: {
            type: String
          },
          title: {
            type: String
          },
          subtitle: {
            type: String
          },
          coverart: {
            type: String
          },
          wavesurfer: {
            type: Object
          },
          lean: {
            type: String
          },
          wavecolor: {
            type: String
          },
          progresscolor: {
            type: String
          }
        });
      }
    }]);

    function WavePlayer() {
      var _this;

      babelHelpers.classCallCheck(this, WavePlayer);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(WavePlayer).call(this));
      _this.title = "";
      _this.subtitle = "";
      _this.coverart = "";
      _this.lean = "left";
      _this.wavecolor = "#ffffff";
      _this.progresscolor = "#CFD8DC";
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/paper-material/paper-material.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/paper-fab/paper-fab.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/paper-icon-button/paper-icon-button.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/iron-icons/iron-icons.js"], res, rej);
        });
        new Promise(function (res, rej) {
          return _require.default(["../../@polymer/iron-icons/av-icons.js"], res, rej);
        });
      }, 0);

      var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

      var location = "".concat(basePath, "lib/wavesurferjs/dist/wavesurfer.js");
      window.addEventListener("es-bridge-wavesurfer-loaded", _this._wavesurferLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability();
      window.ESGlobalBridge.instance.load("wavesurfer", location);
      return _this;
    }

    babelHelpers.createClass(WavePlayer, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-wavesurfer-loaded", this._wavesurferLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(WavePlayer.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * Ready life cycle
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        if (this.lean === "right") {
          this.shadowRoot.querySelector("#playbutton").style.right = "25";
          this.shadowRoot.querySelector("#controls").style.right = "0";
        } else {
          this.shadowRoot.querySelector("#playbutton").style.left = "25";
          this.shadowRoot.querySelector("#controls").style.left = "0";
        }

        if (this.name === "") {
          this.shadowRoot.querySelector("#albuminfo").classList.add("hidden");
        } // basic default for coverart if none


        if (this.coverart === "") {
          var basePath = this.pathFromUrl(decodeURIComponent(meta.url));
          this.coverart = "".concat(basePath, "lib/art.jpg");
        }
      } // simple path from a url modifier

    }, {
      key: "pathFromUrl",
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
      /**
       * invoke wavesurfer once we know it's globally scoped
       */

    }, {
      key: "_wavesurferLoaded",
      value: function _wavesurferLoaded() {
        this.__wavesurfer = true;
        window.removeEventListener("es-bridge-wavesurfer-loaded", this._wavesurferLoaded.bind(this));
        this.initWaveSurfer();
      }
      /**
       * Function to update classes (for activate)
       */

    }, {
      key: "activateAnimation",
      value: function activateAnimation() {
        var self = this;
        var waveStyle = this.shadowRoot.querySelector("#container");
        var buttonStyle = this.shadowRoot.querySelector("#playbutton");
        var controlsStyle = this.shadowRoot.querySelector("#controls");
        var muteStyle = this.shadowRoot.querySelector("#mute");
        var replayStyle = this.shadowRoot.querySelector("#replay");
        var albumStyle = this.shadowRoot.querySelector("#albuminfo");
        var coverartStyle = albumStyle.querySelector(".coverart");
        var nameStyle = albumStyle.querySelector(".title");
        var titleStyle = albumStyle.querySelector(".subtitle");
        buttonStyle.setAttribute("icon", "av:pause");
        buttonStyle.classList.remove("circleAnimation");
        buttonStyle.classList.add("playActive");
        albumStyle.classList.add("albuminfoActive");
        coverartStyle.classList.add("coverartActive");
        nameStyle.classList.add("nameActive");
        titleStyle.classList.add("titleActive");

        if (self.lean === "right") {
          this.shadowRoot.querySelector("#playbutton").style.right = "0";
        } else {
          this.shadowRoot.querySelector("#playbutton").style.left = "0";
        }

        waveStyle.classList.add("waveActive");
        setTimeout(function () {
          controlsStyle.classList.remove("hidden");
          buttonStyle.classList.add("hidden");
        }, 500);
        setTimeout(function () {
          muteStyle.classList.add("right");
          replayStyle.classList.add("left");
        }, 600);
      }
      /**
       * Function to update classes (for deactivate)
       */

    }, {
      key: "deactivateAnimation",
      value: function deactivateAnimation() {
        var self = this;
        var waveStyle = this.shadowRoot.querySelector("#container");
        var buttonStyle = this.shadowRoot.querySelector("#playbutton");
        var controlsStyle = this.shadowRoot.querySelector("#controls");
        var muteStyle = this.shadowRoot.querySelector("#mute");
        var replayStyle = this.shadowRoot.querySelector("#replay");
        var albumStyle = this.shadowRoot.querySelector("#albuminfo");
        var coverartStyle = albumStyle.querySelector(".coverart");
        var nameStyle = albumStyle.querySelector(".title");
        var titleStyle = albumStyle.querySelector(".subtitle");
        muteStyle.classList.remove("right");
        replayStyle.classList.remove("left");
        setTimeout(function () {
          controlsStyle.classList.add("hidden");
          buttonStyle.classList.remove("hidden");
        }, 100);
        setTimeout(function () {
          buttonStyle.setAttribute("icon", "av:play-arrow");
          buttonStyle.classList.add("circleAnimation");
          buttonStyle.classList.remove("playActive");
          albumStyle.classList.remove("albuminfoActive");
          coverartStyle.classList.remove("coverartActive");
          nameStyle.classList.remove("nameActive");
          titleStyle.classList.remove("titleActive");

          if (self.lean === "right") {
            buttonStyle.style.right = "25";
          } else {
            buttonStyle.style.left = "25";
          }

          waveStyle.classList.remove("waveActive");
        }, 200);
      }
      /**
       * Initializing wave object
       */

    }, {
      key: "initWaveSurfer",
      value: function initWaveSurfer() {
        var _this3 = this;

        window.wavesurferobject = new WaveSurfer({
          container: this.shadowRoot.querySelector("#container"),
          waveColor: this.wavecolor,
          progressColor: this.progresscolor,
          // --primary-background-color
          fillParent: true,
          height: 100
        });
        window.wavesurferobject.init();

        if (babelHelpers.typeof(this.src) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          window.wavesurferobject.load(this.src);
        }

        window.wavesurferobject.on("ready", function () {
          _this3.shadowRoot.querySelector("#playbutton").removeAttribute("disabled");
        });
        window.wavesurferobject.on("finish", function () {
          _this3.deactivateAnimation();
        });
      }
      /**
       * Toggle play and pause
       */

    }, {
      key: "togglePlay",
      value: function togglePlay(e) {
        // make sure we have the correct instance loaded before we play
        window.wavesurferobject.playPause();
        var iconType = this.shadowRoot.querySelector("#playbutton").getAttribute("icon");

        if (iconType === "av:play-arrow") {
          this.activateAnimation();
        } else {
          this.deactivateAnimation();
        }
      }
      /**
       * Toggle mute on and off
       */

    }, {
      key: "toggleMute",
      value: function toggleMute(e) {
        var muteStyle = this.shadowRoot.querySelector("#mute");
        var iconType = muteStyle.getAttribute("icon");
        window.wavesurferobject.toggleMute();

        if (iconType === "av:volume-up") {
          muteStyle.setAttribute("icon", "av:volume-off");
        } else {
          muteStyle.setAttribute("icon", "av:volume-up");
        }
      }
      /**
       * Jumps back 30 seconds
       */

    }, {
      key: "throwBack",
      value: function throwBack(e) {
        window.wavesurferobject.skipBackward(30);
      }
    }], [{
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Audio player",
            description: "Audio that is just like spotify.",
            icon: "av:play-circle-filled",
            color: "purple",
            groups: ["Audio", "Media"],
            handles: [{
              type: "audio",
              source: "src",
              title: "title",
              caption: "subtitle"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "src",
              title: "Source",
              description: "The URL for this video.",
              inputMethod: "textfield",
              icon: "link",
              required: true,
              validationType: "url"
            }],
            configure: [{
              property: "src",
              title: "Source",
              description: "The URL for this video.",
              inputMethod: "textfield",
              icon: "link",
              required: true,
              validationType: "url"
            }, {
              property: "title",
              title: "Title",
              description: "A simple title",
              inputMethod: "textfield",
              icon: "av:video-label",
              required: false,
              validationType: "text"
            }],
            advanced: []
          }
        };
      }
    }]);
    return WavePlayer;
  }((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));

  _exports.WavePlayer = WavePlayer;
  window.customElements.define(WavePlayer.tag, WavePlayer);
});