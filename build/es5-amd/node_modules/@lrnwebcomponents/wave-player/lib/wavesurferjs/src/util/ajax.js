define(["exports", "./observer.js"], function (_exports, _observer) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = ajax;
  _observer = babelHelpers.interopRequireDefault(_observer);

  /**
   * Perform an ajax request
   *
   * @param {Options} options Description
   *
   * @returns {Object} Observer instance
   */
  function ajax(options) {
    var instance = new _observer.default();
    var xhr = new XMLHttpRequest();
    var fired100 = false;
    xhr.open(options.method || "GET", options.url, true);
    xhr.responseType = options.responseType || "json";

    if (options.xhr) {
      if (options.xhr.requestHeaders) {
        // add custom request headers
        options.xhr.requestHeaders.forEach(function (header) {
          xhr.setRequestHeader(header.key, header.value);
        });
      }

      if (options.xhr.withCredentials) {
        // use credentials
        xhr.withCredentials = true;
      }
    }

    xhr.addEventListener("progress", function (e) {
      instance.fireEvent("progress", e);

      if (e.lengthComputable && e.loaded == e.total) {
        fired100 = true;
      }
    });
    xhr.addEventListener("load", function (e) {
      if (!fired100) {
        instance.fireEvent("progress", e);
      }

      instance.fireEvent("load", e);

      if (200 == xhr.status || 206 == xhr.status) {
        instance.fireEvent("success", xhr.response, e);
      } else {
        instance.fireEvent("error", e);
      }
    });
    xhr.addEventListener("error", function (e) {
      return instance.fireEvent("error", e);
    });
    xhr.send();
    instance.xhr = xhr;
    return instance;
  }
});