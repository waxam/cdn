define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = void 0;

  /*global MediaMetadata*/

  /**
   * @typedef {Object} MediaSessionPluginParams
   * @property {MediaMetadata} metadata A MediaMetadata object: a representation
   * of the metadata associated with a MediaSession that can be used by user agents
   * to provide a customized user interface.
   * @property {?boolean} deferInit Set to true to manually call
   * `initPlugin('mediasession')`
   */

  /**
   * Visualise MediaSession information for a wavesurfer instance.
   *
   * @implements {PluginClass}
   * @extends {Observer}
   * @example
   * // es6
   * import MediaSessionPlugin from 'wavesurfer.mediasession.js';
   *
   * // commonjs
   * var MediaSessionPlugin = require('wavesurfer.mediasession.js');
   *
   * // if you are using <script> tags
   * var MediaSessionPlugin = window.WaveSurfer.mediasession;
   *
   * // ... initialising wavesurfer with the plugin
   * var wavesurfer = WaveSurfer.create({
   *   // wavesurfer options ...
   *   plugins: [
   *     MediaSessionPlugin.create({
   *       // plugin options ...
   *     })
   *   ]
   * });
   */
  var MediaSessionPlugin = /*#__PURE__*/function () {
    function MediaSessionPlugin(params, ws) {
      var _this = this;

      babelHelpers.classCallCheck(this, MediaSessionPlugin);
      this.params = params;
      this.wavesurfer = ws;

      if ("mediaSession" in navigator) {
        // update metadata
        this.metadata = this.params.metadata;
        this.update(); // update metadata when playback starts

        this.wavesurfer.on("play", function () {
          _this.update();
        }); // set playback action handlers

        navigator.mediaSession.setActionHandler("play", function () {
          _this.wavesurfer.play();
        });
        navigator.mediaSession.setActionHandler("pause", function () {
          _this.wavesurfer.playPause();
        });
        navigator.mediaSession.setActionHandler("seekbackward", function () {
          _this.wavesurfer.skipBackward();
        });
        navigator.mediaSession.setActionHandler("seekforward", function () {
          _this.wavesurfer.skipForward();
        });
      }
    }

    babelHelpers.createClass(MediaSessionPlugin, [{
      key: "init",
      value: function init() {}
    }, {
      key: "destroy",
      value: function destroy() {}
    }, {
      key: "update",
      value: function update() {
        if ((typeof MediaMetadata === "undefined" ? "undefined" : babelHelpers.typeof(MediaMetadata)) === (typeof Function === "undefined" ? "undefined" : babelHelpers.typeof(Function))) {
          // set metadata
          navigator.mediaSession.metadata = new MediaMetadata(this.metadata);
        }
      }
    }], [{
      key: "create",
      value:
      /**
       * MediaSession plugin definition factory
       *
       * This function must be used to create a plugin definition which can be
       * used by wavesurfer to correctly instantiate the plugin.
       *
       * @param  {MediaSessionPluginParams} params parameters use to initialise the plugin
       * @return {PluginDefinition} an object representing the plugin
       */
      function create(params) {
        return {
          name: "mediasession",
          deferInit: params && params.deferInit ? params.deferInit : false,
          params: params,
          instance: MediaSessionPlugin
        };
      }
    }]);
    return MediaSessionPlugin;
  }();

  _exports.default = MediaSessionPlugin;
});