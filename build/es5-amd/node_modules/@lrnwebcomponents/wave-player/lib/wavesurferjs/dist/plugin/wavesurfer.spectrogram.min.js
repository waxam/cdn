/*!
 * wavesurfer.js 2.1.0 (Mon Oct 01 2018 11:34:54 GMT+0200 (Central European Summer Time))
 * https://github.com/katspaugh/wavesurfer.js
 * @license BSD-3-Clause
 */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : babelHelpers.typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : babelHelpers.typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define("spectrogram", [], t) : "object" == (typeof exports === "undefined" ? "undefined" : babelHelpers.typeof(exports)) ? exports.spectrogram = t() : (e.WaveSurfer = e.WaveSurfer || {}, e.WaveSurfer.spectrogram = t());
}(window, function () {
  return function (r) {
    var a = {};

    function i(e) {
      if (a[e]) return a[e].exports;
      var t = a[e] = {
        i: e,
        l: !1,
        exports: {}
      };
      return r[e].call(t.exports, t, t.exports, i), t.l = !0, t.exports;
    }

    return i.m = r, i.c = a, i.d = function (e, t, r) {
      i.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: r
      });
    }, i.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, i.t = function (t, e) {
      if (1 & e && (t = i(t)), 8 & e) return t;
      if (4 & e && "object" == babelHelpers.typeof(t) && t && t.__esModule) return t;
      var r = Object.create(null);
      if (i.r(r), Object.defineProperty(r, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var a in t) {
        i.d(r, a, function (e) {
          return t[e];
        }.bind(null, a));
      }
      return r;
    }, i.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };
      return i.d(t, "a", t), t;
    }, i.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, i.p = "localhost:8080/dist/plugin/", i(i.s = 3);
  }({
    3: function _(e, t, r) {
      "use strict";

      function a(e, t) {
        for (var r = 0; r < t.length; r++) {
          var a = t[r];
          a.enumerable = a.enumerable || !1, a.configurable = !0, "value" in a && (a.writable = !0), Object.defineProperty(e, a.key, a);
        }
      }

      function n(e, t, r) {
        return t && a(e.prototype, t), r && a(e, r), e;
      }

      Object.defineProperty(t, "__esModule", {
        value: !0
      }), t.default = void 0;

      var v = function v(e, t, r, a) {
        switch (this.bufferSize = e, this.sampleRate = t, this.bandwidth = 2 / e * (t / 2), this.sinTable = new Float32Array(e), this.cosTable = new Float32Array(e), this.windowValues = new Float32Array(e), this.reverseTable = new Uint32Array(e), this.peakBand = 0, this.peak = 0, r) {
          case "bartlett":
            for (var i = 0; i < e; i++) {
              this.windowValues[i] = 2 / (e - 1) * ((e - 1) / 2 - Math.abs(i - (e - 1) / 2));
            }

            break;

          case "bartlettHann":
            for (i = 0; i < e; i++) {
              this.windowValues[i] = .62 - .48 * Math.abs(i / (e - 1) - .5) - .38 * Math.cos(2 * Math.PI * i / (e - 1));
            }

            break;

          case "blackman":
            a = a || .16;

            for (i = 0; i < e; i++) {
              this.windowValues[i] = (1 - a) / 2 - .5 * Math.cos(2 * Math.PI * i / (e - 1)) + a / 2 * Math.cos(4 * Math.PI * i / (e - 1));
            }

            break;

          case "cosine":
            for (i = 0; i < e; i++) {
              this.windowValues[i] = Math.cos(Math.PI * i / (e - 1) - Math.PI / 2);
            }

            break;

          case "gauss":
            a = a || .25;

            for (i = 0; i < e; i++) {
              this.windowValues[i] = Math.pow(Math.E, -.5 * Math.pow((i - (e - 1) / 2) / (a * (e - 1) / 2), 2));
            }

            break;

          case "hamming":
            for (i = 0; i < e; i++) {
              this.windowValues[i] = (.54 - .46) * Math.cos(2 * Math.PI * i / (e - 1));
            }

            break;

          case "hann":
          case void 0:
            for (i = 0; i < e; i++) {
              this.windowValues[i] = .5 * (1 - Math.cos(2 * Math.PI * i / (e - 1)));
            }

            break;

          case "lanczoz":
            for (i = 0; i < e; i++) {
              this.windowValues[i] = Math.sin(Math.PI * (2 * i / (e - 1) - 1)) / (Math.PI * (2 * i / (e - 1) - 1));
            }

            break;

          case "rectangular":
            for (i = 0; i < e; i++) {
              this.windowValues[i] = 1;
            }

            break;

          case "triangular":
            for (i = 0; i < e; i++) {
              this.windowValues[i] = 2 / e * (e / 2 - Math.abs(i - (e - 1) / 2));
            }

            break;

          default:
            throw Error("No such window function '" + r + "'");
        }

        for (var n = 1, s = e >> 1; n < e;) {
          for (i = 0; i < n; i++) {
            this.reverseTable[i + n] = this.reverseTable[i] + s;
          }

          n <<= 1, s >>= 1;
        }

        for (i = 0; i < e; i++) {
          this.sinTable[i] = Math.sin(-Math.PI / i), this.cosTable[i] = Math.cos(-Math.PI / i);
        }

        this.calculateSpectrum = function (e) {
          var t,
              r,
              a,
              i = this.bufferSize,
              n = this.cosTable,
              s = this.sinTable,
              o = this.reverseTable,
              l = new Float32Array(i),
              h = new Float32Array(i),
              f = 2 / this.bufferSize,
              u = Math.sqrt,
              c = new Float32Array(i / 2),
              p = Math.floor(Math.log(i) / Math.LN2);
          if (Math.pow(2, p) !== i) throw "Invalid buffer size, must be a power of 2.";
          if (i !== e.length) throw "Supplied buffer is not the same size as defined FFT. FFT Size: " + i + " Buffer Size: " + e.length;

          for (var d, v, w, b, y, m, g, M, S = 1, x = 0; x < i; x++) {
            l[x] = e[o[x]] * this.windowValues[o[x]], h[x] = 0;
          }

          for (; S < i;) {
            d = n[S], v = s[S], w = 1;

            for (var k = b = 0; k < S; k++) {
              for (x = k; x < i;) {
                m = w * l[y = x + S] - b * h[y], g = w * h[y] + b * l[y], l[y] = l[x] - m, h[y] = h[x] - g, l[x] += m, h[x] += g, x += S << 1;
              }

              w = (M = w) * d - b * v, b = M * v + b * d;
            }

            S <<= 1;
          }

          x = 0;

          for (var T = i / 2; x < T; x++) {
            (a = f * u((t = l[x]) * t + (r = h[x]) * r)) > this.peak && (this.peakBand = x, this.peak = a), c[x] = a;
          }

          return c;
        };
      },
          i = function () {
        function i(t, r) {
          var a = this;
          !function (e, t) {
            if (!babelHelpers.instanceof(e, t)) throw new TypeError("Cannot call a class as a function");
          }(this, i), this.params = t, this.wavesurfer = r, this.util = r.util, this.frequenciesDataUrl = t.frequenciesDataUrl, this._onScroll = function (e) {
            a.updateScroll(e);
          }, this._onReady = function () {
            var e = a.drawer = r.drawer;
            if (a.container = "string" == typeof t.container ? document.querySelector(t.container) : t.container, !a.container) throw Error("No container for WaveSurfer spectrogram");
            a.width = e.width, a.pixelRatio = a.params.pixelRatio || r.params.pixelRatio, a.fftSamples = a.params.fftSamples || r.params.fftSamples || 512, a.height = a.fftSamples / 2, a.noverlap = t.noverlap, a.windowFunc = t.windowFunc, a.alpha = t.alpha, a.createWrapper(), a.createCanvas(), a.render(), e.wrapper.addEventListener("scroll", a._onScroll), r.on("redraw", function () {
              return a.render();
            });
          };
        }

        return n(i, null, [{
          key: "create",
          value: function value(e) {
            return {
              name: "spectrogram",
              deferInit: !(!e || !e.deferInit) && e.deferInit,
              params: e,
              staticProps: {
                FFT: v
              },
              instance: i
            };
          }
        }]), n(i, [{
          key: "init",
          value: function value() {
            this.wavesurfer.isReady && this._onReady(), this.wavesurfer.on("ready", this._onReady);
          }
        }, {
          key: "destroy",
          value: function value() {
            this.unAll(), this.wavesurfer.un("ready", this._onReady), this.drawer.wrapper.removeEventListener("scroll", this._onScroll), this.wavesurfer = null, this.util = null, this.params = null, this.wrapper && (this.wrapper.parentNode.removeChild(this.wrapper), this.wrapper = null);
          }
        }, {
          key: "createWrapper",
          value: function value() {
            var r = this,
                e = this.container.querySelector("spectrogram");
            e && this.container.removeChild(e);
            var t = this.wavesurfer.params;

            if (this.wrapper = document.createElement("spectrogram"), this.params.labels) {
              var a = this.labelsEl = document.createElement("canvas");
              a.classList.add("spec-labels"), this.drawer.style(a, {
                left: 0,
                position: "absolute",
                zIndex: 9,
                height: "".concat(this.height / this.pixelRatio, "px"),
                width: "".concat(55 / this.pixelRatio, "px")
              }), this.wrapper.appendChild(a), this.loadLabels("rgba(68,68,68,0.5)", "12px", "10px", "", "#fff", "#f7f7f7", "center", "#specLabels");
            }

            this.drawer.style(this.wrapper, {
              display: "block",
              position: "relative",
              userSelect: "none",
              webkitUserSelect: "none",
              height: "".concat(this.height / this.pixelRatio, "px")
            }), (t.fillParent || t.scrollParent) && this.drawer.style(this.wrapper, {
              width: "100%",
              overflowX: "hidden",
              overflowY: "hidden"
            }), this.container.appendChild(this.wrapper), this.wrapper.addEventListener("click", function (e) {
              e.preventDefault();
              var t = "offsetX" in e ? e.offsetX : e.layerX;
              r.fireEvent("click", t / r.scrollWidth || 0);
            });
          }
        }, {
          key: "createCanvas",
          value: function value() {
            var e = this.canvas = this.wrapper.appendChild(document.createElement("canvas"));
            this.spectrCc = e.getContext("2d"), this.util.style(e, {
              position: "absolute",
              zIndex: 4
            });
          }
        }, {
          key: "render",
          value: function value() {
            this.updateCanvasStyle(), this.frequenciesDataUrl ? this.loadFrequenciesData(this.frequenciesDataUrl) : this.getFrequencies(this.drawSpectrogram);
          }
        }, {
          key: "updateCanvasStyle",
          value: function value() {
            var e = Math.round(this.width / this.pixelRatio) + "px";
            this.canvas.width = this.width, this.canvas.height = this.height, this.canvas.style.width = e;
          }
        }, {
          key: "drawSpectrogram",
          value: function value(e, t) {
            t.spectrCc, t.wavesurfer.backend.getDuration();
            var r,
                a,
                i = t.height,
                n = t.resample(e),
                s = t.buffer ? 2 / t.buffer.numberOfChannels : 1;

            for (r = 0; r < n.length; r++) {
              for (a = 0; a < n[r].length; a++) {
                var o = 255 - n[r][a];
                t.spectrCc.fillStyle = "rgb(" + o + ", " + o + ", " + o + ")", t.spectrCc.fillRect(r, i - a * s, 1, s);
              }
            }
          }
        }, {
          key: "getFrequencies",
          value: function value(e) {
            var t = this.fftSamples,
                r = this.buffer = this.wavesurfer.backend.buffer,
                a = r.getChannelData(0),
                i = r.length,
                n = r.sampleRate,
                s = [];

            if (r) {
              var o = this.noverlap;

              if (!o) {
                var l = r.length / this.canvas.width;
                o = Math.max(0, Math.round(t - l));
              }

              for (var h = new v(t, n, this.windowFunc, this.alpha), f = (Math.floor(i / (t - o)), 0); f + t < a.length;) {
                var u = a.slice(f, f + t),
                    c = h.calculateSpectrum(u),
                    p = new Uint8Array(t / 2),
                    d = void 0;

                for (d = 0; d < t / 2; d++) {
                  p[d] = Math.max(-255, 45 * Math.log10(c[d]));
                }

                s.push(p), f += t - o;
              }

              e(s, this);
            } else this.fireEvent("error", "Web Audio buffer is not available");
          }
        }, {
          key: "loadFrequenciesData",
          value: function value(e) {
            var t = this,
                r = this.util.ajax({
              url: e
            });
            return r.on("success", function (e) {
              return t.drawSpectrogram(JSON.parse(e), t);
            }), r.on("error", function (e) {
              return t.fireEvent("error", "XHR error: " + e.target.statusText);
            }), r;
          }
        }, {
          key: "freqType",
          value: function value(e) {
            return 1e3 <= e ? (e / 1e3).toFixed(1) : Math.round(e);
          }
        }, {
          key: "unitType",
          value: function value(e) {
            return 1e3 <= e ? "KHz" : "Hz";
          }
        }, {
          key: "loadLabels",
          value: function value(e, t, r, a, i, n, s, o) {
            e = e || "rgba(68,68,68,0)", t = t || "12px", r = r || "10px", a = a || "Helvetica", i = i || "#fff", n = n || "#fff", s = s || "center", o = o || "#specLabels";
            var l,
                h = this.height || 512,
                f = h / 256 * 5,
                u = (this.wavesurfer.backend.ac.sampleRate / 2 - 0) / f,
                c = this.labelsEl.getContext("2d");

            for (this.labelsEl.height = this.height, this.labelsEl.width = 55, c.fillStyle = e, c.fillRect(0, 0, 55, h), c.fill(), l = 0; l <= f; l++) {
              c.textAlign = s, c.textBaseline = "middle";
              var p = 0 + u * l,
                  d = (Math.round(p / (this.sampleRate / 2) * this.fftSamples), this.freqType(p)),
                  v = this.unitType(p);
              0 == l ? (c.fillStyle = n, c.font = r + " " + a, c.fillText(v, 40, h + l - 10), c.fillStyle = i, c.font = t + " " + a, c.fillText(d, 16, h + l - 10)) : (c.fillStyle = n, c.font = r + " " + a, c.fillText(v, 40, h - 50 * l + 2), c.fillStyle = i, c.font = t + " " + a, c.fillText(d, 16, h - 50 * l + 2));
            }
          }
        }, {
          key: "updateScroll",
          value: function value(e) {
            this.wrapper && (this.wrapper.scrollLeft = e.target.scrollLeft);
          }
        }, {
          key: "resample",
          value: function value(e) {
            var t,
                r = this.width,
                a = [],
                i = 1 / e.length,
                n = 1 / r;

            for (t = 0; t < r; t++) {
              var s = new Array(e[0].length),
                  o = void 0;

              for (o = 0; o < e.length; o++) {
                var l = o * i,
                    h = l + i,
                    f = t * n,
                    u = f + n,
                    c = h <= f || u <= l ? 0 : Math.min(Math.max(h, f), Math.max(u, l)) - Math.max(Math.min(h, f), Math.min(u, l)),
                    p = void 0;
                if (0 < c) for (p = 0; p < e[0].length; p++) {
                  null == s[p] && (s[p] = 0), s[p] += c / n * e[o][p];
                }
              }

              var d = new Uint8Array(e[0].length),
                  v = void 0;

              for (v = 0; v < e[0].length; v++) {
                d[v] = s[v];
              }

              a.push(d);
            }

            return a;
          }
        }]), i;
      }();

      t.default = i, e.exports = t.default;
    }
  });
});