/*!
 * wavesurfer.js 2.1.0 (Mon Oct 01 2018 11:34:54 GMT+0200 (Central European Summer Time))
 * https://github.com/katspaugh/wavesurfer.js
 * @license BSD-3-Clause
 */
!function (e, t) {
  "object" == (typeof exports === "undefined" ? "undefined" : babelHelpers.typeof(exports)) && "object" == (typeof module === "undefined" ? "undefined" : babelHelpers.typeof(module)) ? module.exports = t() : "function" == typeof define && define.amd ? define("timeline", [], t) : "object" == (typeof exports === "undefined" ? "undefined" : babelHelpers.typeof(exports)) ? exports.timeline = t() : (e.WaveSurfer = e.WaveSurfer || {}, e.WaveSurfer.timeline = t());
}(window, function () {
  return function (a) {
    var r = {};

    function n(e) {
      if (r[e]) return r[e].exports;
      var t = r[e] = {
        i: e,
        l: !1,
        exports: {}
      };
      return a[e].call(t.exports, t, t.exports, n), t.l = !0, t.exports;
    }

    return n.m = a, n.c = r, n.d = function (e, t, a) {
      n.o(e, t) || Object.defineProperty(e, t, {
        enumerable: !0,
        get: a
      });
    }, n.r = function (e) {
      "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
        value: "Module"
      }), Object.defineProperty(e, "__esModule", {
        value: !0
      });
    }, n.t = function (t, e) {
      if (1 & e && (t = n(t)), 8 & e) return t;
      if (4 & e && "object" == babelHelpers.typeof(t) && t && t.__esModule) return t;
      var a = Object.create(null);
      if (n.r(a), Object.defineProperty(a, "default", {
        enumerable: !0,
        value: t
      }), 2 & e && "string" != typeof t) for (var r in t) {
        n.d(a, r, function (e) {
          return t[e];
        }.bind(null, r));
      }
      return a;
    }, n.n = function (e) {
      var t = e && e.__esModule ? function () {
        return e.default;
      } : function () {
        return e;
      };
      return n.d(t, "a", t), t;
    }, n.o = function (e, t) {
      return Object.prototype.hasOwnProperty.call(e, t);
    }, n.p = "localhost:8080/dist/plugin/", n(n.s = 0);
  }([function (e, t, a) {
    "use strict";

    function r(e, t) {
      for (var a = 0; a < t.length; a++) {
        var r = t[a];
        r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(e, r.key, r);
      }
    }

    function n(e, t, a) {
      return t && r(e.prototype, t), a && r(e, a), e;
    }

    Object.defineProperty(t, "__esModule", {
      value: !0
    }), t.default = void 0;

    var i = function () {
      function r(e, t) {
        var a = this;
        if (function (e, t) {
          if (!babelHelpers.instanceof(e, t)) throw new TypeError("Cannot call a class as a function");
        }(this, r), o.call(this), this.container = "string" == typeof e.container ? document.querySelector(e.container) : e.container, !this.container) throw new Error("No container for wavesurfer timeline");
        this.wavesurfer = t, this.util = t.util, this.params = this.util.extend({}, {
          height: 20,
          notchPercentHeight: 90,
          labelPadding: 5,
          unlabeledNotchColor: "#c0c0c0",
          primaryColor: "#000",
          secondaryColor: "#c0c0c0",
          primaryFontColor: "#000",
          secondaryFontColor: "#000",
          fontFamily: "Arial",
          fontSize: 10,
          zoomDebounce: !1,
          formatTimeCallback: this.defaultFormatTimeCallback,
          timeInterval: this.defaultTimeInterval,
          primaryLabelInterval: this.defaultPrimaryLabelInterval,
          secondaryLabelInterval: this.defaultSecondaryLabelInterval
        }, e), this.canvases = [], this.wrapper = null, this.drawer = null, this.pixelRatio = null, this.maxCanvasWidth = null, this.maxCanvasElementWidth = null, this._onZoom = this.params.zoomDebounce ? this.wavesurfer.util.debounce(function () {
          return a.render();
        }, this.params.zoomDebounce) : function () {
          return a.render();
        };
      }

      return n(r, null, [{
        key: "create",
        value: function value(e) {
          return {
            name: "timeline",
            deferInit: !(!e || !e.deferInit) && e.deferInit,
            params: e,
            instance: r
          };
        }
      }]), n(r, [{
        key: "init",
        value: function value() {
          this.wavesurfer.on("ready", this._onReady), this.wavesurfer.isReady && this._onReady();
        }
      }, {
        key: "destroy",
        value: function value() {
          this.unAll(), this.wavesurfer.un("redraw", this._onRedraw), this.wavesurfer.un("zoom", this._onZoom), this.wavesurfer.un("ready", this._onReady), this.wavesurfer.drawer.wrapper.removeEventListener("scroll", this._onScroll), this.wrapper && this.wrapper.parentNode && (this.wrapper.removeEventListener("click", this._onWrapperClick), this.wrapper.parentNode.removeChild(this.wrapper), this.wrapper = null);
        }
      }, {
        key: "createWrapper",
        value: function value() {
          var e = this.wavesurfer.params;
          this.container.innerHTML = "", this.wrapper = this.container.appendChild(document.createElement("timeline")), this.util.style(this.wrapper, {
            display: "block",
            position: "relative",
            userSelect: "none",
            webkitUserSelect: "none",
            height: "".concat(this.params.height, "px")
          }), (e.fillParent || e.scrollParent) && this.util.style(this.wrapper, {
            width: "100%",
            overflowX: "hidden",
            overflowY: "hidden"
          }), this.wrapper.addEventListener("click", this._onWrapperClick);
        }
      }, {
        key: "render",
        value: function value() {
          this.wrapper || this.createWrapper(), this.updateCanvases(), this.updateCanvasesPositioning(), this.renderCanvases();
        }
      }, {
        key: "updateCanvases",
        value: function value() {
          for (var e, t, a = this, r = Math.round(this.drawer.wrapper.scrollWidth), n = Math.ceil(r / this.maxCanvasElementWidth); this.canvases.length < n;) {
            void 0, e = a.wrapper.appendChild(document.createElement("canvas")), a.canvases.push(e), a.util.style(e, {
              position: "absolute",
              zIndex: 4
            });
          }

          for (; this.canvases.length > n;) {
            t = void 0, (t = a.canvases.pop()).parentElement.removeChild(t);
          }
        }
      }, {
        key: "updateCanvasesPositioning",
        value: function value() {
          var r = this,
              n = this.canvases.length;
          this.canvases.forEach(function (e, t) {
            var a = t === n - 1 ? r.drawer.wrapper.scrollWidth - r.maxCanvasElementWidth * (n - 1) : r.maxCanvasElementWidth;
            e.width = a * r.pixelRatio, e.height = (r.params.height + 1) * r.pixelRatio, r.util.style(e, {
              width: "".concat(a, "px"),
              height: "".concat(r.params.height, "px"),
              left: "".concat(t * r.maxCanvasElementWidth, "px")
            });
          });
        }
      }, {
        key: "renderCanvases",
        value: function value() {
          var r = this,
              e = this.wavesurfer.backend.getDuration();

          if (!(e <= 0)) {
            var t,
                a = this.wavesurfer.params,
                n = this.params.fontSize * a.pixelRatio,
                i = parseInt(e, 10) + 1,
                o = a.fillParent && !a.scrollParent ? this.drawer.getWidth() : this.drawer.wrapper.scrollWidth * a.pixelRatio,
                s = this.params.height * this.pixelRatio,
                l = this.params.height * (this.params.notchPercentHeight / 100) * this.pixelRatio,
                c = o / e,
                u = this.params.formatTimeCallback,
                h = function h(e) {
              return "function" == typeof e ? e(c) : e;
            },
                p = h(this.params.timeInterval),
                f = h(this.params.primaryLabelInterval),
                d = h(this.params.secondaryLabelInterval),
                v = 0,
                m = 0,
                y = [];

            for (t = 0; t < i / p; t++) {
              y.push([t, m, v]), m += p, v += c * p;
            }

            var w = function w(t) {
              y.forEach(function (e) {
                t(e[0], e[1], e[2]);
              });
            };

            this.setFillStyles(this.params.primaryColor), this.setFonts("".concat(n, "px ").concat(this.params.fontFamily)), this.setFillStyles(this.params.primaryFontColor), w(function (e, t, a) {
              e % f == 0 && (r.fillRect(a, 0, 1, s), r.fillText(u(t, c), a + r.params.labelPadding * r.pixelRatio, s));
            }), this.setFillStyles(this.params.secondaryColor), this.setFonts("".concat(n, "px ").concat(this.params.fontFamily)), this.setFillStyles(this.params.secondaryFontColor), w(function (e, t, a) {
              e % d == 0 && (r.fillRect(a, 0, 1, s), r.fillText(u(t, c), a + r.params.labelPadding * r.pixelRatio, s));
            }), this.setFillStyles(this.params.unlabeledNotchColor), w(function (e, t, a) {
              e % d != 0 && e % f != 0 && r.fillRect(a, 0, 1, l);
            });
          }
        }
      }, {
        key: "setFillStyles",
        value: function value(t) {
          this.canvases.forEach(function (e) {
            e.getContext("2d").fillStyle = t;
          });
        }
      }, {
        key: "setFonts",
        value: function value(t) {
          this.canvases.forEach(function (e) {
            e.getContext("2d").font = t;
          });
        }
      }, {
        key: "fillRect",
        value: function value(n, i, o, s) {
          var l = this;
          this.canvases.forEach(function (e, t) {
            var a = t * l.maxCanvasWidth,
                r = {
              x1: Math.max(n, t * l.maxCanvasWidth),
              y1: i,
              x2: Math.min(n + o, t * l.maxCanvasWidth + e.width),
              y2: i + s
            };
            r.x1 < r.x2 && e.getContext("2d").fillRect(r.x1 - a, r.y1, r.x2 - r.x1, r.y2 - r.y1);
          });
        }
      }, {
        key: "fillText",
        value: function value(r, n, i) {
          var o,
              s = 0;
          this.canvases.forEach(function (e) {
            var t = e.getContext("2d"),
                a = t.canvas.width;
            n + o < s || (n < s + a && (o = t.measureText(r).width, t.fillText(r, n - s, i)), s += a);
          });
        }
      }, {
        key: "defaultFormatTimeCallback",
        value: function value(e, t) {
          if (1 < e / 60) {
            var a = parseInt(e / 60, 10);
            return e = (e = parseInt(e % 60, 10)) < 10 ? "0" + e : e, "".concat(a, ":").concat(e);
          }

          return Math.round(1e3 * e) / 1e3;
        }
      }, {
        key: "defaultTimeInterval",
        value: function value(e) {
          return 25 <= e ? 1 : 25 <= 5 * e ? 5 : 25 <= 15 * e ? 15 : 60 * Math.ceil(.5 / e);
        }
      }, {
        key: "defaultPrimaryLabelInterval",
        value: function value(e) {
          return 25 <= e ? 10 : 25 <= 5 * e ? 6 : 4;
        }
      }, {
        key: "defaultSecondaryLabelInterval",
        value: function value(e) {
          return 25 <= e ? 5 : 2;
        }
      }]), r;
    }();

    t.default = i;

    var o = function o() {
      var a = this;
      this._onScroll = function () {
        a.wrapper && a.drawer.wrapper && (a.wrapper.scrollLeft = a.drawer.wrapper.scrollLeft);
      }, this._onRedraw = function () {
        return a.render();
      }, this._onReady = function () {
        var e = a.wavesurfer;
        a.drawer = e.drawer, a.pixelRatio = e.drawer.params.pixelRatio, a.maxCanvasWidth = e.drawer.maxCanvasWidth || e.drawer.width, a.maxCanvasElementWidth = e.drawer.maxCanvasElementWidth || Math.round(a.maxCanvasWidth / a.pixelRatio), e.drawer.wrapper.addEventListener("scroll", a._onScroll), e.on("redraw", a._onRedraw), e.on("zoom", a._onZoom), a.render();
      }, this._onWrapperClick = function (e) {
        e.preventDefault();
        var t = "offsetX" in e ? e.offsetX : e.layerX;
        a.fireEvent("click", t / a.wrapper.scrollWidth || 0);
      };
    };

    e.exports = t.default;
  }]);
});