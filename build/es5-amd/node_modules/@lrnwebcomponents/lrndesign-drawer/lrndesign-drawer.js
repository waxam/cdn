define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button.js"], function (_exports, _require, _polymerElement, _simpleIcon, _simpleIcons, _simpleIconButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignDrawer = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_a0c4ded0569311eb862f2bcd7dd1af42() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --lrndesign-drawer-width: 30%;\n        }\n        app-header {\n          z-index: 100;\n        }\n        app-drawer {\n          --app-drawer-width: var(--lrndesign-drawer-width);\n          --app-drawer-content-container: {\n            padding: 16px;\n            overflow-y: scroll;\n            margin-top: 112px;\n          }\n        }\n      </style>\n      <app-header>\n        <app-drawer opened=\"{{opened}}\" align=\"{{align}}\">\n          <slot></slot>\n        </app-drawer>\n      </app-header>\n      <simple-icon-button\n        icon=\"[[icon]]\"\n        alt=\"[[alt]]\"\n        id=\"flyoutdrawer\"\n      ></simple-icon-button>\n      <simple-tooltip for=\"flyoutdrawer\">[[alt]]</simple-tooltip>\n    "]);

    _templateObject_a0c4ded0569311eb862f2bcd7dd1af42 = function _templateObject_a0c4ded0569311eb862f2bcd7dd1af42() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `lrndesign-drawer`
   * @element lrndesign-drawer
   * @demo demo/index.html
   */
  var LrndesignDrawer = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(LrndesignDrawer, _PolymerElement);

    var _super = _createSuper(LrndesignDrawer);

    function LrndesignDrawer() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignDrawer);
      _this = _super.call(this);
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-header/app-header.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/app-layout/app-drawer/app-drawer.js"], res, rej);
      });
      new Promise(function (res, rej) {
        return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    }

    babelHelpers.createClass(LrndesignDrawer, [{
      key: "ready",

      /**
       * Initalize the flyout and ensure it's not open to start
       * while adding the click event to it.
       */
      value: function ready() {
        var _this2 = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignDrawer.prototype), "ready", this).call(this);
        this.shadowRoot.querySelector("simple-icon-button").addEventListener("click", function (e) {
          _this2.opened = !_this2.opened;
        });
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_a0c4ded0569311eb862f2bcd7dd1af42());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-drawer";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * State for if it is currently open.
           */
          opened: {
            type: Boolean,
            value: false
          },

          /**
           * Icon to present for clicking.
           */
          icon: {
            type: String,
            value: "icon"
          },

          /**
           * Side of the screen to align the flyout (right or left)
           */
          align: {
            type: String,
            value: "left"
          },

          /**
           * Alt / hover text for this link
           */
          alt: {
            type: String,
            value: ""
          }
        };
      }
    }]);
    return LrndesignDrawer;
  }(_polymerElement.PolymerElement);

  _exports.LrndesignDrawer = LrndesignDrawer;
  window.customElements.define(LrndesignDrawer.tag, LrndesignDrawer);
});