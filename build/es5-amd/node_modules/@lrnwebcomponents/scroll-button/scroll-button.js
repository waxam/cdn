define(["exports", "require", "../../lit/index.js", "../simple-icon/simple-icon.js", "../simple-icon/lib/simple-icons.js", "../simple-icon/lib/simple-icon-button-lite.js", "../../@polymer/polymer/lib/elements/custom-style.js"], function (_exports, _require, _index, _simpleIcon, _simpleIcons, _simpleIconButtonLite, _customStyle) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ScrollButton = void 0;
  _require = _interopRequireWildcard(_require);

  var _templateObject_a41ef830feb911eb8439e3eec9305af7, _templateObject2_a41ef830feb911eb8439e3eec9305af7;

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `scroll-button`
   * `button to scroll to an area or back to top`
   * @demo demo/index.html
   * @element scroll-button
   */
  var ScrollButton = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(ScrollButton, _LitElement);

    var _super = _createSuper(ScrollButton);

    function ScrollButton() {
      var _this;

      babelHelpers.classCallCheck(this, ScrollButton);
      _this = _super.call(this);
      _this.icon = "icons:expand-less";
      _this.label = "Backt to top";
      _this.position = "top";
      new Promise(function (res, rej) {
        return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
      });
      return _this;
    }
    /**
     * Store the tag name to make it easier to obtain directly.
     * @notice function name must be here for tooling to operate correctly
     */


    babelHelpers.createClass(ScrollButton, [{
      key: "render",
      value: // render function
      function render() {
        return (0, _index.html)(_templateObject_a41ef830feb911eb8439e3eec9305af7 || (_templateObject_a41ef830feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral([" <custom-style>\n        <style>\n          simple-icon-button-lite {\n            @apply --scroll-button-button;\n          }\n          simple-icon-button-lite:hover,\n          simple-icon-button-lite:active,\n          simple-icon-button-lite:focus {\n            @apply --scroll-button-button-active;\n          }\n          simple-tooltip {\n            @apply --scroll-button-tooltip;\n          }\n        </style>\n      </custom-style>\n      <simple-icon-button-lite\n        @click=\"", "\"\n        id=\"btn\"\n        icon=\"", "\"\n        aria-label=\"", "\"\n      ></simple-icon-button-lite>\n      <simple-tooltip for=\"btn\" position=\"", "\" offset=\"14\">\n        ", "\n      </simple-tooltip>"])), this.scrollEvent, this.icon, this.label, this.position, this.label);
      } // haxProperty definition

    }, {
      key: "scrollEvent",
      value:
      /**
       * life cycle, element is afixed to the DOM
       */
      function scrollEvent(e) {
        if (this.target) {
          this.target.scrollIntoView({
            behavior: "smooth",
            block: "end",
            inline: "nearest"
          });
        } else {
          window.scrollTo({
            top: 0,
            left: 0,
            behavior: "smooth"
          });
        }
      }
    }], [{
      key: "styles",
      get: //styles function
      function get() {
        return [(0, _index.css)(_templateObject2_a41ef830feb911eb8439e3eec9305af7 || (_templateObject2_a41ef830feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --scroll-button-z-index: 99;\n          z-index: var(--scroll-button-z-index);\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        simple-icon-button-lite {\n          background-color: var(\n            --scroll-button-background-color,\n            rgba(0, 0, 0, 0.6)\n          );\n          color: var(--scroll-button-color, white);\n        }\n\n        simple-icon-button-lite:hover,\n        simple-icon-button-lite:active,\n        simple-icon-button-lite:focus {\n          color: var(--scroll-button-background-color, rgba(0, 0, 0, 1));\n          background-color: var(--scroll-button-color, white);\n        }\n\n        simple-tooltip {\n          --simple-tooltip-background: var(\n            --scroll-button-tooltip-background-color,\n            #000000\n          );\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: var(\n            --scroll-button-tooltip-color,\n            #ffffff\n          );\n          --simple-tooltip-delay-in: 0;\n          --simple-tooltip-border-radius: 0;\n        }\n      "])))];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: true,
          gizmo: {
            title: "Scroll button",
            description: "button to scroll to an area or back to top",
            icon: "icons:android",
            color: "green",
            groups: ["Button"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            configure: [{
              property: "target",
              description: "",
              inputMethod: "array",
              required: false,
              icon: "icons:android"
            }, {
              property: "icon",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }, {
              property: "label",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:android"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(ScrollButton), "properties", this)), {}, {
          target: {
            type: Object
          },
          icon: {
            type: String
          },
          label: {
            type: String
          },
          position: {
            type: String
          }
        });
      }
    }, {
      key: "tag",
      get: function get() {
        return "scroll-button";
      }
    }]);
    return ScrollButton;
  }(_index.LitElement);

  _exports.ScrollButton = ScrollButton;
  window.customElements.define(ScrollButton.tag, ScrollButton);
});