define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/paper-tooltip/paper-tooltip.js", "../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "../../../@polymer/iron-icons/iron-icons.js", "./extensible-toolbar-button-styles.js"], function (_exports, _polymerElement, _paperButton, _paperTooltip, _ironA11yKeys, _ironIcons, _extensibleToolbarButtonStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExtensibleToolbarButton = void 0;

  function _templateObject_db5643a0e53211e9a0cfefb808989d41() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"extensible-toolbar-button-styles\">\n        :host .toolbar-button {\n          min-width: var(--extensible-toolbar-button-min-width);\n          height: var(--extensible-toolbar-button-height);\n          margin: var(--extensible-toolbar-button-margin);\n          padding: var(--extensible-toolbar-button-padding);\n        }\n      </style>\n      <iron-a11y-keys\n        id=\"a11y\"\n        target=\"[[__a11y]]\"\n        keys=\"enter\"\n        on-keys-pressed=\"_handleButton\"\n      >\n      </iron-a11y-keys>\n      <paper-button\n        id=\"button\"\n        class=\"toolbar-button\"\n        disabled$=\"[[disabled]]\"\n        controls$=\"[[controls]]\"\n        on-click=\"_handleButton\"\n        tabindex=\"0\"\n        toggled$=\"[[toggled]]\"\n      >\n        <iron-icon id=\"icon\" aria-hidden icon$=\"[[__icon]]\"></iron-icon>\n        <span id=\"label\" class$=\"[[labelStyle]]\">[[__label]]</span>\n      </paper-button>\n      <paper-tooltip id=\"tooltip\" aria-hidden for=\"button\"\n        >[[__label]]</paper-tooltip\n      >\n    "]);

    _templateObject_db5643a0e53211e9a0cfefb808989d41 = function _templateObject_db5643a0e53211e9a0cfefb808989d41() {
      return data;
    };

    return data;
  }

  /**
   * `extensible-toolbar-button`
   * `a button for rich text editor (custom buttons can extend this)`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   */
  var ExtensibleToolbarButton =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(ExtensibleToolbarButton, _PolymerElement);

    function ExtensibleToolbarButton() {
      babelHelpers.classCallCheck(this, ExtensibleToolbarButton);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ExtensibleToolbarButton).apply(this, arguments));
    }

    babelHelpers.createClass(ExtensibleToolbarButton, [{
      key: "ready",

      /**
       * life cycle, element is ready
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ExtensibleToolbarButton.prototype), "ready", this).call(this);
        var root = this;
        root.addEventListener("keypress", function (e) {
          e.preventDefault();
        });
      }
      /**
       * life cycle, element is afixed to the DOM
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ExtensibleToolbarButton.prototype), "connectedCallback", this).call(this);
        this.__a11y = this.$.button;
      }
      /**
       * life cycle, element is detatched
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ExtensibleToolbarButton.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * excutes the button's command
       */

    }, {
      key: "buttonAction",
      value: function buttonAction() {
        this.dispatchEvent(new CustomEvent("button-action", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Handles button tap
       */

    }, {
      key: "_handleButton",
      value: function _handleButton(e) {
        e.preventDefault();
        console.log("_handleButton", e);
        this.buttonAction();
      }
      /**
       * gets the label based on whether the button is toggled
       *
       * @param {boolean} toggled if the button is toggled
       * @param {string} label the default label
       * @param {string} toggledLabel the label when toggled
       * @returns {string} the label based on whether or not the button is toggled
       *
       */

    }, {
      key: "_getLabel",
      value: function _getLabel(toggled, label, toggledLabel) {
        return toggled && toggledLabel !== null ? toggledLabel : label;
      }
      /**
       * gets the icon based on whether the button is toggled
       *
       * @param {boolean} toggled if the button is toggled
       * @param {string} icon the default icon
       * @param {string} toggledIcon the label when toggled
       * @returns {string} the icon based on whether or not the button is toggled
       *
       */

    }, {
      key: "_getIcon",
      value: function _getIcon(toggled, icon, toggledIcon) {
        return toggled && toggledIcon !== null ? toggledIcon : icon;
      }
      /**
       * Handles keys the same way a button is handled
       * @param {event} e the  event
       */

    }, {
      key: "_keysPressed",
      value: function _keysPressed(e) {
        e.preventDefault();

        this._handleButton(e);
      }
      /**
       * Determines if an iron icon has been named for the button.
       *
       * @param {string} the name of the icon
       * @returns {boolean} if an icon is named
       */

    }, {
      key: "_labelStyle",
      value: function _labelStyle(icon, showTextLabel) {
        return icon !== undefined && icon !== null && icon !== "" && showTextLabel === false ? "offscreen" : null;
      }
    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_db5643a0e53211e9a0cfefb808989d41());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The minimum breakpoint where the button appears, expressed as `xs`, `sm`, `md`, `lg`, or `xl`
           */
          collapsedUntil: {
            name: "collapsedUntil",
            type: String,
            value: "xs",
            reflectToAttribute: true
          },

          /**
           * The `id` of the element that the toolbar controls.
           */
          controls: {
            name: "controls",
            type: String
          },

          /**
           * Is the button disabled? Default is false.
           */
          disabled: {
            name: "disabled",
            type: Boolean,
            value: false
          },

          /**
           * Optional iron icon name for the button.
           */
          icon: {
            name: "icon",
            type: String,
            value: null
          },

          /**
           * Label for the icon.
           */
          label: {
            name: "label",
            type: String,
            value: null
          },

          /**
           * Hide the label offscreen?
           */
          labelStyle: {
            name: "labelStyle",
            type: String,
            computed: "_labelStyle(icon,showTextLabel)",
            readOnly: true
          },

          /**
           * Optional space-sperated list of keyboard shortcuts for the editor
           * to fire this button, see iron-a11y-keys for more info.
           */
          shortcutKeys: {
            name: "shortcutKeys",
            type: String,
            value: null
          },

          /**
           * Show text label even if an icon is named?
           */
          showTextLabel: {
            name: "showTextLabel",
            type: Boolean,
            value: false
          },

          /**
           * Is this button toggled?
           */
          toggled: {
            name: "toggled",
            type: Boolean,
            value: false,
            notify: true
          },

          /**
           * Optional iron icon name for the button if it is toggled.
           */
          toggledIcon: {
            name: "toggledIcon",
            type: String,
            value: null
          },

          /**
           * Label for the icon, if button is toggled.
           */
          toggledLabel: {
            name: "toggledLabel",
            type: String,
            value: null
          },

          /**
           * The label for the button based on its toggled state
           */
          __label: {
            name: "__label",
            type: String,
            computed: "_getLabel(toggled,label,toggledLabel)",
            notify: true
          },

          /**
           * The label for the button based on its toggled state
           */
          __icon: {
            name: "__icon",
            type: String,
            computed: "_getIcon(toggled,icon,toggledIcon)",
            notify: true
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "extensible-toolbar-button";
      }
    }]);
    return ExtensibleToolbarButton;
  }(_polymerElement.PolymerElement);

  _exports.ExtensibleToolbarButton = ExtensibleToolbarButton;
  window.customElements.define(ExtensibleToolbarButton.tag, ExtensibleToolbarButton);
});