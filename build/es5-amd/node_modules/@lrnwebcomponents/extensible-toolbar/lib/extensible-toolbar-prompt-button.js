define(["exports", "../../../@polymer/polymer/polymer-element.js", "./extensible-toolbar-button.js", "../../../@polymer/paper-tooltip/paper-tooltip.js", "../../../@polymer/iron-icons/iron-icons.js", "./extensible-toolbar-prompt.js", "./extensible-toolbar-button-styles.js"], function (_exports, _polymerElement, _extensibleToolbarButton, _paperTooltip, _ironIcons, _extensibleToolbarPrompt, _extensibleToolbarButtonStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExtensibleToolbarPromptButton = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `extensible-toolbar-prompt-button`
   * `a button that prompts for more information for rich text editor (custom buttons can extend this)`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   */
  var ExtensibleToolbarPromptButton =
  /*#__PURE__*/
  function (_ExtensibleToolbarBut) {
    babelHelpers.inherits(ExtensibleToolbarPromptButton, _ExtensibleToolbarBut);

    function ExtensibleToolbarPromptButton() {
      babelHelpers.classCallCheck(this, ExtensibleToolbarPromptButton);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ExtensibleToolbarPromptButton).call(this));
    } // properties available to the custom element for data binding


    babelHelpers.createClass(ExtensibleToolbarPromptButton, [{
      key: "ready",

      /**
       * life cycle, element is ready
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ExtensibleToolbarPromptButton.prototype), "ready", this).call(this);
        this.__prompt = window.ExtensibleToolbarPrompt.requestAvailability();
      }
      /**
       * Handles button tap
       * @param {event} e the button tap event
       */

    }, {
      key: "_handleButton",
      value: function _handleButton(e) {
        e.preventDefault();
        this.open();
      }
      /**
       * cleans a field value if needed
       * @param {string} prop field property name
       * @returns {object} val the cleaned property value
       */

    }, {
      key: "getCleanValue",
      value: function getCleanValue(prop) {
        var val = this.value[prop];
        if (val && typeof val === "string") val = val.replace(/[\s\n\t]+/g, " ").trim();
        return val;
      }
      /**
       * updates the insertion based on fields
       */

    }, {
      key: "cancel",
      value: function cancel() {
        this.value = this.__oldValue;
        this.dispatchEvent(new CustomEvent("cancel", {
          detail: this
        }));
        this.deselect();
      }
      /**
       * updates the insertion based on fields
       */

    }, {
      key: "confirm",
      value: function confirm() {
        this.dispatchEvent(new CustomEvent("confirm", {
          detail: this
        }));
        this.deselect();
      }
      /**
       * Handles selecting text and opening prompt
       */

    }, {
      key: "open",
      value: function open() {
        this.updatePrompt();

        this.__prompt.setTarget(this);

        this.dispatchEvent(new CustomEvent("open-prompt", {
          detail: this
        }));
      }
      /**
       * updates prompt fields
       */

    }, {
      key: "updatePrompt",
      value: function updatePrompt(fields) {
        this.__oldValue = this.value;
        this.set("__fields", fields);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * fields for the prompt popover.
           */
          fields: {
            type: Array,
            value: [{
              property: "",
              title: "Text",
              description: "The inner text",
              inputMethod: "textfield"
            }]
          },

          /**
           * The prefilled value of the prompt
           */
          value: {
            type: Object,
            value: {
              "": null,
              id: null
            }
          },

          /**
           * fields for the prompt popover.
           */
          __fields: {
            type: Array,
            value: []
          },

          /**
           * the contents node inside the selected range
           */
          __oldValue: {
            name: "__oldValue",
            type: Object,
            value: null
          },

          /**
           * the prompt that pops up when button is pressed
           */
          __prompt: {
            name: "__prompt",
            type: Object,
            value: null
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "extensible-toolbar-prompt-button";
      }
    }]);
    return ExtensibleToolbarPromptButton;
  }(_extensibleToolbarButton.ExtensibleToolbarButton);

  _exports.ExtensibleToolbarPromptButton = ExtensibleToolbarPromptButton;
  window.customElements.define(ExtensibleToolbarPromptButton.tag, ExtensibleToolbarPromptButton);
});