define(["exports", "../../../@polymer/polymer/polymer-element.js", "./extensible-toolbar-button.js"], function (_exports, _polymerElement, _extensibleToolbarButton) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExtensibleToolbarMoreButton = void 0;

  /**
   * Copyright 2019 Penn State University
   * @license Apache-2.0, see License.md for full text.
   */

  /**
   * `extensible-toolbar-more-button`
   * `a more button to toggle collapsed buttons in the rich text editor`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   */
  var ExtensibleToolbarMoreButton =
  /*#__PURE__*/
  function (_ExtensibleToolbarBut) {
    babelHelpers.inherits(ExtensibleToolbarMoreButton, _ExtensibleToolbarBut);

    function ExtensibleToolbarMoreButton() {
      var _this;

      babelHelpers.classCallCheck(this, ExtensibleToolbarMoreButton);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ExtensibleToolbarMoreButton).call(this));
      _this.label = "More buttons";
      _this.labelToggled = "Fewer buttons";
      return _this;
    } // properties available to the custom element for data binding


    babelHelpers.createClass(ExtensibleToolbarMoreButton, [{
      key: "_handleButton",

      /**
       * Fires a button tap event
       */
      value: function _handleButton(e) {
        this.toggled = !this.toggled;
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * Can this button toggle?
           */
          toggled: {
            name: "toggled",
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * The maximum size where all of the buttons display
           */
          collapseMax: {
            name: "collapseMax",
            type: String,
            value: "xs",
            reflectToAttribute: true
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "extensible-toolbar-more-button";
      }
    }]);
    return ExtensibleToolbarMoreButton;
  }(_extensibleToolbarButton.ExtensibleToolbarButton);

  _exports.ExtensibleToolbarMoreButton = ExtensibleToolbarMoreButton;
  window.customElements.define(ExtensibleToolbarMoreButton.tag, ExtensibleToolbarMoreButton);
});