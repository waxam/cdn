define(["exports", "../../../@polymer/polymer/polymer-element.js", "./extensible-toolbar-button-styles.js"], function (_exports, _polymerElement, _extensibleToolbarButtonStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExtensibleToolbarGroup = void 0;

  function _templateObject_ff97e6d0e48111e9b5c6f7b0a264592f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"extensible-toolbar-button-styles\"></style>\n      <div class=\"group-label\" hidden$=\"[[!label]]\">[[label]]</div>\n      <slot></slot>\n    "]);

    _templateObject_ff97e6d0e48111e9b5c6f7b0a264592f = function _templateObject_ff97e6d0e48111e9b5c6f7b0a264592f() {
      return data;
    };

    return data;
  }

  /**
   * `extensible-toolbar-group`
   * ` a button group for extensible-toolbar (custom buttons can extend this)`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   */
  var ExtensibleToolbarGroup =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(ExtensibleToolbarGroup, _PolymerElement);

    function ExtensibleToolbarGroup() {
      babelHelpers.classCallCheck(this, ExtensibleToolbarGroup);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ExtensibleToolbarGroup).apply(this, arguments));
    }

    babelHelpers.createClass(ExtensibleToolbarGroup, null, [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_ff97e6d0e48111e9b5c6f7b0a264592f());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The minimum breakpoint where the group appears, expressed as `xs`, `sm`, `md`, `lg`, or `xl`
           */
          collapsedUntil: {
            name: "collapsedUntil",
            type: String,
            value: "xs",
            reflectToAttribute: true
          },

          /**
           * Label for the group.
           */
          label: {
            name: "label",
            type: String,
            value: null
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "extensible-toolbar-group";
      }
    }]);
    return ExtensibleToolbarGroup;
  }(_polymerElement.PolymerElement);

  _exports.ExtensibleToolbarGroup = ExtensibleToolbarGroup;
  window.customElements.define(ExtensibleToolbarGroup.tag, ExtensibleToolbarGroup);
});