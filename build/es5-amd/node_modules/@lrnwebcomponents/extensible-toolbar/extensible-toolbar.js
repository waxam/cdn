define(["exports", "../../@polymer/polymer/polymer-element.js", "../absolute-position-behavior/absolute-position-behavior.js", "../responsive-utility/responsive-utility.js", "./lib/extensible-toolbar-styles.js", "./lib/extensible-toolbar-group.js", "./lib/extensible-toolbar-button.js", "./lib/extensible-toolbar-more-button.js", "./lib/extensible-toolbar-button-styles.js", "../../@polymer/iron-icons/iron-icons.js", "../../@polymer/iron-icons/editor-icons.js", "../../@polymer/iron-icons/image-icons.js", "../md-extra-icons/md-extra-icons.js"], function (_exports, _polymerElement, _absolutePositionBehavior, _responsiveUtility, _extensibleToolbarStyles, _extensibleToolbarGroup, _extensibleToolbarButton, _extensibleToolbarMoreButton, _extensibleToolbarButtonStyles, _ironIcons, _editorIcons, _imageIcons, _mdExtraIcons) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExtensibleToolbar = void 0;

  function _templateObject_83a73650e53211e9a0cfefb808989d41() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host([hidden]) {\n          display: none;\n        }\n        :host #toolbar {\n          width: 100%;\n          display: flex;\n          opacity: 1;\n          z-index: 1;\n          margin: 0;\n          align-items: stretch;\n          flex-wrap: wrap;\n          justify-content: flex-start;\n          background-color: var(--extensible-toolbar-bg);\n          border: var(--extensible-toolbar-border);\n          font-size: 12px;\n          transition: all 0.5s;\n          @apply --extensible-toolbar;\n        }\n        :host #toolbar[aria-hidden] {\n          visibility: hidden;\n          opacity: 0;\n          height: 0;\n        }\n        :host #toolbar .toolbar-group {\n          display: flex;\n          flex: 1 1 auto;\n          flex-wrap: nowrap;\n          justify-content: flex-start;\n          align-items: stretch;\n          padding: 0 3px;\n          @apply --extensible-toolbar-group;\n        }\n        :host #toolbar .toolbar-group:not(:last-of-type) {\n          margin-right: 3px;\n          border-right: var(--extensible-toolbar-border);\n          @apply --extensible-toolbar-divider;\n        }\n        :host #toolbar .button {\n          display: flex;\n          flex: 0 0 auto;\n          align-items: stretch;\n        }\n        :host #toolbar #morebutton {\n          flex: 1 0 auto;\n          justify-content: flex-end;\n        }\n\n        :host([responsive-size=\"xs\"]) #morebutton[collapse-max=\"xs\"],\n        :host([responsive-size=\"sm\"]) #morebutton[collapse-max*=\"s\"],\n        :host([responsive-size=\"md\"]) #morebutton:not([collapse-max*=\"l\"]),\n        :host([responsive-size=\"lg\"]) #morebutton:not([collapse-max=\"xl\"]),\n        :host([responsive-size=\"xl\"]) #morebutton,\n        :host([responsive-size=\"xs\"])\n          #toolbar:not([aria-expanded])\n          *[collapsed-until*=\"m\"],\n        :host([responsive-size=\"xs\"])\n          #toolbar:not([aria-expanded])\n          *[collapsed-until*=\"l\"],\n        :host([responsive-size=\"sm\"])\n          #toolbar:not([aria-expanded])\n          *[collapsed-until=\"md\"],\n        :host([responsive-size=\"sm\"])\n          #toolbar:not([aria-expanded])\n          *[collapsed-until*=\"l\"],\n        :host([responsive-size=\"md\"])\n          #toolbar:not([aria-expanded])\n          *[collapsed-until*=\"l\"],\n        :host([responsive-size=\"lg\"])\n          #toolbar:not([aria-expanded])\n          *[collapsed-until=\"xl\"] {\n          display: none;\n        }\n      </style>\n      <style\n        include=\"extensible-toolbar-styles extensible-toolbar-button-styles\"\n      ></style>\n      <div\n        id=\"toolbar\"\n        aria-live=\"polite\"\n        aria-hidden$=\"[[!controls]]\"\n        aria-expanded$=\"[[!collapsed]]\"\n      >\n        <extensible-toolbar-more-button\n          id=\"morebutton\"\n          auto$=\"[[floating]]\"\n          class=\"button\"\n          collapse-max=\"[[__collapseMax]]\"\n          controls=\"toolbar\"\n          fit-to-visible-bounds\n          for$=\"[[controls]]\"\n          icon$=\"[[moreIcon]]\"\n          label$=\"[[moreLabel]]\"\n          show-text-label$=\"[[moreShowTextLabel]]\"\n          label-toggled$=\"[[moreLabelToggled]]\"\n          position=\"[[_getPosition(positionBelow)]]\"\n          toggled$=\"[[!collapsed]]\"\n          on-click=\"_toggleMore\"\n        >\n        </extensible-toolbar-more-button>\n      </div>\n    "]);

    _templateObject_83a73650e53211e9a0cfefb808989d41 = function _templateObject_83a73650e53211e9a0cfefb808989d41() {
      return data;
    };

    return data;
  }

  /**
   * `extensible-toolbar`
   * `a toolbar UI that can be customized and extended`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var ExtensibleToolbar =
  /*#__PURE__*/
  function (_AbsolutePositionBeha) {
    babelHelpers.inherits(ExtensibleToolbar, _AbsolutePositionBeha);

    function ExtensibleToolbar() {
      babelHelpers.classCallCheck(this, ExtensibleToolbar);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ExtensibleToolbar).apply(this, arguments));
    }

    babelHelpers.createClass(ExtensibleToolbar, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(ExtensibleToolbar.prototype), "connectedCallback", this).call(this);
        /** turn on responsive options */

        var root = this;
        window.ResponsiveUtility.requestAvailability();
        this.addEventListener("button-action", function (e) {
          _this.dispatchEvent(new CustomEvent("toolbar-action", {
            detail: {
              toolbar: _this,
              button: e.detail
            }
          }));
        });
        window.dispatchEvent(new CustomEvent("responsive-element", {
          detail: {
            element: root,
            attribute: "responsive-size",
            relativeToParent: true
          }
        }));
      }
      /**
       * Adds a button to the toolbar
       *
       * @param {object} child the child object in the config object
       * @param {object} parent the parent object in the config object
       * @returns {object} the button
       */

    }, {
      key: "_addButton",
      value: function _addButton(child, parent) {
        console.log("_addButton", child, parent);
        var button = document.createElement(child.type),
            keys = button.shortcutKeys;
        this.set("__shortcutKeys.".concat(keys), button);

        for (var key in child) {
          button[key] = child[key];
        }

        button.setAttribute("class", "button");
        parent.appendChild(button);
        return button;
      }
      /**
       * Adds a button to the toolbar
       *
       * @param {object} child the child object in the config object
       * @param {object} parent the parent object in the config object
       * @returns {object} the button
       */

    }, {
      key: "_addGroup",
      value: function _addGroup(child, parent) {
        console.log("_addGroup", child, parent);
        var group = document.createElement(child.type);
        group.setAttribute("class", "toolbar-group");

        for (var key in child) {
          if (key !== "buttons") group[key] = child[key];
        }

        parent.appendChild(group);
        return group;
      }
      /**
       * Gets the groups array for the dom-repeat.
       *
       * @param {object} config the toolbar buttons config object
       * @returns {array} the buttons array
       */

    }, {
      key: "_getButtons",
      value: function _getButtons(config) {
        var _this2 = this;

        var root = this,
            toolbar = this.$.toolbar,
            max = 0,
            sizes = ["xs", "sm", "md", "lg", "xl"],
            temp = [];
        toolbar.innerHTML = "";
        this.set("__shortcutKeys", []);
        config.forEach(function (item) {
          if (item.type === "extensible-toolbar-group") {
            var group = _this2._addGroup(item, toolbar);

            max = Math.max(max, sizes.indexOf(item.collapsedUntil));
            item.buttons.forEach(function (button) {
              max = Math.max(max, sizes.indexOf(button.collapsedUntil));
              temp.push(root._addButton(button, group));
            });
            toolbar.appendChild(group);
          } else {
            max = Math.max(max, sizes.indexOf(item.collapsedUntil));
            temp.push(root._addButton(item, toolbar));
          }

          _this2.__collapseMax = sizes[max];
          toolbar.appendChild(_this2.$.morebutton);
        });
        return temp;
      }
      /**
       * gets the absolute positioning
       */

    }, {
      key: "_getPosition",
      value: function _getPosition(positionBelow) {
        return positionBelow ? "bottom" : "top";
      }
      /**
       * when a shortcut key is pressed, fire the keypressed event on the button associated with it
       * @param {event} e the key event
       */

    }, {
      key: "_handleShortcutKeys",
      value: function _handleShortcutKeys(e) {
        var key = e.key;
        if (e.shiftKey) key = "shift+" + key;
        if (e.altKey) key = "alt+" + key;

        if (window.navigator.platform === "MacIntel" && e.metaKey || e.ctrlKey) {
          key = "ctrl+" + key;
        }

        if (this.__shortcutKeys[key]) this.__shortcutKeys[key]._keysPressed(e);
      }
      /**
       * handles toggling the more button
       */

    }, {
      key: "_toggleMore",
      value: function _toggleMore() {
        this.collapsed = !this.collapsed;
      }
    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_83a73650e53211e9a0cfefb808989d41());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * The editor buttons, as determined by `config`.
           */
          buttons: {
            name: "buttons",
            type: "Array",
            computed: "_getButtons(config)"
          },

          /**
           * Is the toolbar collapsed?
           */
          collapsed: {
            name: "collapsed",
            type: "Boolean",
            value: true
          },

          /**
           * Custom configuration of toolbar groups and buttons.
           * (See default value for example using default configuration.)
           */
          config: {
            name: "config",
            type: "Object",
            value: []
          },

          /**
           * The `id` of the object the extensible toolbar controls.
           */
          controls: {
            name: "controls",
            type: "String",
            value: null
          },

          /**
           * The `extensible-toolbar` element that uis currently in `contenteditable` mode
           */
          editor: {
            name: "editor",
            type: "Object",
            value: null
          },

          /**
           * float the toolbar above the object it controls?
           */
          floating: {
            name: "floating",
            type: "Boolean",
            value: false,
            reflectToAttribute: true
          },

          /**
           * whether or not the toolbar is hidden
           */
          hidden: {
            name: "hidden",
            type: "Boolean",
            value: false,
            reflectToAttribute: true
          },

          /**
           * The icon for the more button.
           */
          moreIcon: {
            name: "moreIcon",
            type: "String",
            value: "more-vert"
          },

          /**
           * The label for the more button.
           */
          moreLabel: {
            name: "moreLabel",
            type: "String",
            value: "More Buttons"
          },

          /**
           * The label for the more button when toggled.
           */
          moreLabelToggled: {
            name: "moreLabelToggled",
            type: "String",
            value: "Fewer Buttons"
          },

          /**
           * The show text label for more button.
           */
          moreShowTextLabel: {
            name: "moreShowTextLabel",
            type: "Boolean",
            value: false
          },

          /**
           * position the toolbar below the object it contrls
           */
          positionBelow: {
            name: "positionBelow",
            type: "Boolean",
            value: false,
            reflectToAttribute: true
          },

          /**
           * The the size of the toolbar.
           */
          responsiveSize: {
            name: "responsiveSize",
            type: "String",
            value: "xs",
            reflectToAttribute: true
          },

          /**
           * Should the toolbar stick to the top so that it is always visible?
           */
          sticky: {
            name: "sticky",
            type: "Boolean",
            value: false,
            reflectToAttribute: true
          },

          /**
           * The maximum size where all of the buttons display
           */
          __collapseMax: {
            name: "__collapseMax",
            type: "String",
            value: "xs"
          },

          /**
           * Optional space-sperated list of keyboard shortcuts for the editor
           * to fire this button, see iron-a11y-keys for more info.
           */
          __shortcutKeys: {
            name: "__shortcutKeys",
            type: "Array",
            value: []
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "extensible-toolbar";
      }
    }]);
    return ExtensibleToolbar;
  }(_absolutePositionBehavior.AbsolutePositionBehavior);

  _exports.ExtensibleToolbar = ExtensibleToolbar;
  window.customElements.define(ExtensibleToolbar.tag, ExtensibleToolbar);
});