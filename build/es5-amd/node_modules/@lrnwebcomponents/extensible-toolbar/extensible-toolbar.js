define(["exports", "../../@polymer/polymer/polymer-element.js"], function (_exports, _polymerElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ExtensibleToolbar = void 0;

  function _templateObject_dcf1e6d0e3b411e9b0d5a5c01151ac03() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      </style>\n      <slot></slot>\n      <div>[[hidden]]</div>\n      <div>[[buttons]]</div>\n    "]);

    _templateObject_dcf1e6d0e3b411e9b0d5a5c01151ac03 = function _templateObject_dcf1e6d0e3b411e9b0d5a5c01151ac03() {
      return data;
    };

    return data;
  }

  /**
   * `extensible-toolbar`
   * `a toolbar UI that can be customized and extended`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var ExtensibleToolbar =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(ExtensibleToolbar, _PolymerElement);

    function ExtensibleToolbar() {
      babelHelpers.classCallCheck(this, ExtensibleToolbar);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ExtensibleToolbar).apply(this, arguments));
    }

    babelHelpers.createClass(ExtensibleToolbar, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(ExtensibleToolbar.prototype), "connectedCallback", this).call(this);
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}
      // Observer buttons for changes

    }, {
      key: "_buttonsChanged",
      value: function _buttonsChanged(newValue, oldValue) {
        if (babelHelpers.typeof(newValue) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          console.log(newValue);
        }
      }
    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_dcf1e6d0e3b411e9b0d5a5c01151ac03());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return {
          hidden: {
            name: "hidden",
            type: Boolean,
            value: "false",
            reflectToAttribute: true,
            observer: false
          },
          buttons: {
            name: "buttons",
            type: Array,
            value: "[]",
            reflectToAttribute: false,
            observer: "_buttonsChanged"
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "extensible-toolbar";
      }
    }]);
    return ExtensibleToolbar;
  }(_polymerElement.PolymerElement);

  _exports.ExtensibleToolbar = ExtensibleToolbar;
  window.customElements.define(ExtensibleToolbar.tag, ExtensibleToolbar);
});