define(["exports", "meta", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/resolve-url.js", "../es-global-bridge/es-global-bridge.js", "../../@polymer/iron-ajax/iron-ajax.js"], function (_exports, meta, _polymerElement, _resolveUrl, _esGlobalBridge, _ironAjax) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LunrSearch = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);

  function _templateObject_4d495890b49511e9bfd4f79a8a57e0f7() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      </style>\n      <iron-ajax\n        auto\n        url=\"[[dataSource]]\"\n        method=\"[[method]]\"\n        handle-as=\"json\"\n        on-response=\"_dataResponse\"\n      ></iron-ajax>\n    "]);

    _templateObject_4d495890b49511e9bfd4f79a8a57e0f7 = function _templateObject_4d495890b49511e9bfd4f79a8a57e0f7() {
      return data;
    };

    return data;
  }

  /**
   * `lunr-search`
   * `LunrJS search element`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var LunrSearch =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LunrSearch, _PolymerElement);
    babelHelpers.createClass(LunrSearch, null, [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_4d495890b49511e9bfd4f79a8a57e0f7());
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        var props = {
          dataSource: {
            name: "dataSource",
            type: String
          },
          data: {
            name: "data",
            type: Array,
            notify: true
          },
          method: {
            name: "method",
            type: String,
            value: "GET"
          },
          search: {
            type: String,
            notify: true
          },
          results: {
            type: Array,
            computed: "searched(data, search, index, minScore, limit)",
            notify: true
          },
          noStopWords: {
            type: Boolean,
            value: false,
            notify: true
          },
          fields: {
            type: Array,
            value: []
          },
          indexNoStopWords: {
            type: Object
          },
          index: {
            type: Object,
            computed: "_createIndex(data, fields, noStopWords, __lunrLoaded)"
          },
          __lunrLoaded: {
            type: Boolean
          },
          limit: {
            type: Number,
            value: 500
          },
          minScore: {
            type: Number,
            value: 0
          },
          log: {
            type: Boolean,
            value: false
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(LunrSearch), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(LunrSearch), "properties", this));
        }

        return props;
      }
    }]);

    function LunrSearch() {
      var _this;

      babelHelpers.classCallCheck(this, LunrSearch);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LunrSearch).call(this));
      var basePath = (0, _resolveUrl.pathFromUrl)(meta.url);
      var location = "".concat(basePath, "../../lunr/lunr.js");
      window.addEventListener("es-bridge-lunr-loaded", _this._lunrLoaded.bind(babelHelpers.assertThisInitialized(_this)));
      window.ESGlobalBridge.requestAvailability();
      window.ESGlobalBridge.instance.load("lunr", location);

      if (window.ESGlobalBridge.imports && window.ESGlobalBridge.imports["lunr"]) {
        _this.__lunrLoaded = true;
      }

      return _this;
    }

    babelHelpers.createClass(LunrSearch, [{
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        window.removeEventListener("es-bridge-lunr-loaded", this._lunrLoaded.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(LunrSearch.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_lunrLoaded",
      value: function _lunrLoaded(e) {
        // callback when loaded
        this.__lunrLoaded = true;
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "_dataResponse",
      value: function _dataResponse(e) {
        this.set("data", e.detail.response);
        this.notifyPath("data.*");
      }
      /**
        Filters your input data
        
        @param {Array} data Array of Objects with common properties.
        @param {String} search The search term that filters results.
        @param {Object} index The lunr Index..
        @param {Number} minScore The minimum score of your results.
        @param {Number} limit The maximum number of results you'd like your results.
        
        @return {Array} The filtered data.
       */

    }, {
      key: "searched",
      value: function searched(data, search, index, minScore, limit) {
        if (data && index && search) {
          var results = [];

          if ("" + search !== "") {
            var searched = index.search(search);

            for (var i = 0; i < searched.length; i++) {
              if (i === limit || searched[i].score < minScore) {
                break;
              } // match on the id within the array of options


              var tmpItem = data.find(function (j) {
                return j.id == searched[i].ref;
              });
              results.push(tmpItem);
            }
          }

          if (results.length === 0 && !this.noStopWords && "" + search !== "") {
            if (!this.indexNoStopWords) {
              this.indexNoStopWords = this._createIndex(data, this.fields, true, index);
            }

            searched = this.indexNoStopWords.search(search);
            var results = [];

            for (var i = 0; i < searched.length; i++) {
              if (i === limit || searched[i].score < minScore) {
                break;
              }

              var _tmpItem = data.find(function (j) {
                return j.id == searched[i].ref;
              });

              results.push(_tmpItem);
            }
          }

          return results;
        }
      }
    }, {
      key: "_createIndex",
      value: function _createIndex(data, fields, noStopWords, ready) {
        if (ready) {
          var root = this;

          if (Array.isArray(data) && data.length > 0) {
            if (Array.isArray(fields) && fields.length > 0) {
              return lunr(function () {
                for (var i = 0; i < fields.length; i++) {
                  if (fields[i].charAt(0) === fields[i].charAt(0).toUpperCase()) {
                    this.field(fields[i], {
                      boost: 10
                    });
                  } else {
                    this.field(fields[i]);
                  }
                }

                for (var i = 0; i < data.length; i++) {
                  var toIndex = {
                    id: i
                  };

                  for (var f = 0; f < fields.length; f++) {
                    if (data[i].hasOwnProperty(fields[f]) && data[i][fields[f]] !== null && typeof data[i][fields[f]].toString == "function" && (data[i][fields[f]].toString().split(" ").length > 2 || data[i][fields[f]].toString().length < 30)) {
                      //indicate that they might be words in it
                      toIndex[fields[f]] = data[i][fields[f]].toString();
                    } else {
                      toIndex[fields[f]] = "";
                    }
                  }

                  this.add(toIndex);
                }

                if (noStopWords) {
                  this.pipeline.remove(lunr.stopWordFilter);
                }
              });
            } else {
              // find fields
              // TODO only word best fields.
              var fields = [];
              var ddup = {};
              return lunr(function () {
                for (var indexOfData = 0; indexOfData < data.length; indexOfData++) {
                  for (var prop in data[indexOfData]) {
                    if (prop.charAt(0) !== "_" && !ddup.hasOwnProperty(prop) && (prop.toString().split(" ").length > 2 || prop.toString().length < 30)) {
                      fields.push(prop);

                      if (prop.charAt(0) === prop.charAt(0).toUpperCase()) {
                        this.field(prop, {
                          boost: 10
                        });
                      } else {
                        this.field(prop);
                      }

                      ddup[prop] = 1;
                    }
                  }
                }

                if (fields.length > 0) {
                  root.fields = fields;
                }

                for (var i = 0; i < data.length; i++) {
                  var toIndex = {
                    id: i
                  };

                  for (var f = 0; f < fields.length; f++) {
                    if (data[i].hasOwnProperty(fields[f]) && data[i][fields[f]] !== null && typeof data[i][fields[f]].toString == "function" && (data[i][fields[f]].toString().split(" ").length > 2 || data[i][fields[f]].toString().length < 30)) {
                      //indicate that they might be words in it
                      toIndex[fields[f]] = data[i][fields[f]].toString();
                    } else {
                      toIndex[fields[f]] = "";
                    }
                  }

                  this.add(toIndex);
                }

                if (noStopWords) {
                  this.pipeline.remove(lunr.stopWordFilter);
                }
              });
            }
          }
        }
      }
    }], [{
      key: "tag",
      get: function get() {
        return "lunr-search";
      }
    }]);
    return LunrSearch;
  }(_polymerElement.PolymerElement);

  _exports.LunrSearch = LunrSearch;
  window.customElements.define(LunrSearch.tag, LunrSearch);
});