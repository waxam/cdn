define(["exports", "../../lit/index.js", "../simple-popover/simple-popover.js", "../simple-modal/lib/simple-modal-template.js"], function (_exports, _index, _simplePopover, _simpleModalTemplate) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.VocabTerm = void 0;

  var _templateObject_ea19e180ce4611ecb13bcf602138080f, _templateObject2_ea19e180ce4611ecb13bcf602138080f, _templateObject3_ea19e180ce4611ecb13bcf602138080f, _templateObject4_ea19e180ce4611ecb13bcf602138080f, _templateObject5_ea19e180ce4611ecb13bcf602138080f, _templateObject6_ea19e180ce4611ecb13bcf602138080f, _templateObject7_ea19e180ce4611ecb13bcf602138080f, _templateObject8_ea19e180ce4611ecb13bcf602138080f;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `vocab-term`
   * `a vocabulary term visualized in the page`
   * @demo demo/index.html
   * @element vocab-term
   * #### Styling
  Custom property | Description | Default
  ----------------|-------------|----------
  `--vocab-term-bottom-border` | Underline of the vocab term. | 1px dashed gray
  `--vocab-term-color` | Color of the vocab term. | black
   */
  var VocabTerm = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(VocabTerm, _LitElement);

    var _super = _createSuper(VocabTerm);

    /**
     * HTMLElement
     */
    function VocabTerm() {
      var _this;

      babelHelpers.classCallCheck(this, VocabTerm);
      _this = _super.call(this);
      _this.popoverMode = false;
      _this.term = "";
      _this.information = "";
      _this.links = [];
      _this.detailsOpen = false;

      if (_this.querySelector("summary")) {
        _this.term = _this.querySelector("summary").textContent;
      }

      if (_this.querySelector("[slot=\"information\"]")) {
        _this.information = _this.querySelector("[slot=\"information\"]").textContent;
      }

      if (_this.querySelector(".links a")) {
        _this.querySelectorAll(".links a").forEach(function (el) {
          _this.links.push({
            title: el.textContent,
            href: el.getAttribute("href")
          });
        });
      }

      return _this;
    }
    /**
     * LitElement style callback
     */


    babelHelpers.createClass(VocabTerm, [{
      key: "render",
      value:
      /**
       * LitElement render callback
       */
      function render() {
        return (0, _index.html)(_templateObject_ea19e180ce4611ecb13bcf602138080f || (_templateObject_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral([" ", ""])), !this.popoverMode ? (0, _index.html)(_templateObject2_ea19e180ce4611ecb13bcf602138080f || (_templateObject2_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n          <div>\n            <div part=\"term\">\n              <summary id=\"summary\">", "</summary>\n            </div>\n            <simple-modal-template title=\"", "\">\n              <p slot=\"content\">", "</p>\n              ", "\n            </simple-modal-template>\n          </div>\n        "])), this.term, this.term, this.information, this.links.length > 0 ? (0, _index.html)(_templateObject3_ea19e180ce4611ecb13bcf602138080f || (_templateObject3_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral([" <ul slot=\"content\">\n                    ", "\n                  </ul>"])), this.links.map(function (el) {
          return (0, _index.html)(_templateObject4_ea19e180ce4611ecb13bcf602138080f || (_templateObject4_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n                        <li><a href=\"", "\">", "</a></li>\n                      "])), el.href, el.title);
        })) : "") : (0, _index.html)(_templateObject5_ea19e180ce4611ecb13bcf602138080f || (_templateObject5_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n          <details>\n            <summary id=\"summary\">", "</summary>\n            <div part=\"information\">\n              <simple-popover for=\"summary\" position=\"top\" auto>\n                <p>", "</p>\n                <div part=\"links\">\n                  ", "\n                </div>\n              </simple-popover>\n            </div>\n          </details>\n        "])), this.term, this.information, this.links.length > 0 ? (0, _index.html)(_templateObject6_ea19e180ce4611ecb13bcf602138080f || (_templateObject6_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n                        <ul>\n                          ", "\n                        </ul>\n                      "])), this.links.map(function (el) {
          return (0, _index.html)(_templateObject7_ea19e180ce4611ecb13bcf602138080f || (_templateObject7_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n                              <li><a href=\"", "\">", "</a></li>\n                            "])), el.href, el.title);
        })) : ""));
      }
      /**
       * Convention we use
       */

    }, {
      key: "_handleClick",
      value:
      /*
       * provides click for keyboard if open property is not supported by browser
       */
      function _handleClick(e) {
        if (this.details && typeof this.detailsOpen === "undefined") {
          this.toggleOpen();
        }
      }
      /**
       * provides support for keyboard if open property is not supported by browser
       */

    }, {
      key: "_handleKeyup",
      value: function _handleKeyup(e) {
        if (this.details && typeof this.detailsOpen === "undefined" && e.keyCode == 13 || e.keyCode == 32) {
          this.toggleOpen();
        }
      }
      /**
       * toggles the element
       */

    }, {
      key: "toggleOpen",
      value: function toggleOpen() {
        if (this.details.hasAttribute("open")) {
          this.details.removeAttribute("open");
          if (this.detailsOpen) this.detailsOpen = false;
        } else {
          this.details.setAttribute("open", "open");
          if (this.detailsOpen) this.detailsOpen = true;
        }
      }
      /**
       * LitElement ready
       */

    }, {
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        if (babelHelpers.get(babelHelpers.getPrototypeOf(VocabTerm.prototype), "firstUpdated", this)) {
          babelHelpers.get(babelHelpers.getPrototypeOf(VocabTerm.prototype), "firstUpdated", this).call(this, changedProperties);
        }

        if (this.popoverMode === false) {
          this.shadowRoot.querySelector("simple-modal-template").associateEvents(this.shadowRoot.querySelector("summary"));
          this.shadowRoot.querySelector("summary").addEventListener("focus", this.detailsFocusOut.bind(this));
        } else {
          this.details = this.shadowRoot.querySelector("details");
        }
      }
      /**
       *
       */

    }, {
      key: "detailsFocusOut",
      value: function detailsFocusOut() {
        this.shadowRoot.querySelector("details").removeAttribute("open");
        this.shadowRoot.querySelector("summary").removeEventListener("focus", this.detailsFocusOut.bind(this));
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "popoverMode") {
            if (_this2[propName]) {
              _this2.detailsOpen = false;

              if (_this2.shadowRoot) {
                _this2.details = _this2.shadowRoot.querySelector("details");
              }

              _this2.addEventListener("click", _this2._handleClick.bind(_this2));
            } else {
              _this2.removeEventListener("click", _this2._handleClick.bind(_this2));
            }
          }
        });
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          popoverMode: {
            type: Boolean,
            reflect: true,
            attribute: "popover-mode"
          },
          detailsOpen: {
            type: Boolean
          },
          links: {
            type: Array
          },
          information: {
            type: String
          },
          term: {
            type: String
          }
        };
      }
    }, {
      key: "styles",
      get: function get() {
        // support for using in other classes
        var styles = [];

        if (babelHelpers.get(babelHelpers.getPrototypeOf(VocabTerm), "styles", this)) {
          styles = babelHelpers.get(babelHelpers.getPrototypeOf(VocabTerm), "styles", this);
        }

        return [].concat(babelHelpers.toConsumableArray(styles), [(0, _index.css)(_templateObject8_ea19e180ce4611ecb13bcf602138080f || (_templateObject8_ea19e180ce4611ecb13bcf602138080f = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n        }\n        simple-modal-template {\n          --simple-modal-resize: both;\n          --simple-modal-width: 300px;\n          --simple-modal-height: 300px;\n          --simple-modal-min-width: 300px;\n          --simple-modal-min-height: 300px;\n        }\n        summary {\n          list-style: none;\n          border-bottom: var(--vocab-term-border-bottom, 1px dashed gray);\n          color: var(--vocab-term-color, black);\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "vocab-term";
      }
    }]);
    return VocabTerm;
  }(_index.LitElement);

  _exports.VocabTerm = VocabTerm;
  customElements.define(VocabTerm.tag, VocabTerm);
});