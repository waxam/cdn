define(["exports", "meta", "require", "../../simple-fields/simple-fields.js", "./HAXFields.js"], function (_exports, meta, _require, _simpleFields, _HAXFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXWiring = _exports.HAXElement = void 0;
  meta = _interopRequireWildcard(meta);
  _require = _interopRequireWildcard(_require);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && babelHelpers.instanceof(outerFn.prototype, Generator) ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return generator._invoke = function (innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; }(innerFn, self, context), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == babelHelpers.typeof(value) && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; this._invoke = function (method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); }; } function maybeInvokeDelegate(delegate, context) { var method = delegate.iterator[context.method]; if (undefined === method) { if (context.delegate = null, "throw" === context.method) { if (delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method)) return ContinueSentinel; context.method = "throw", context.arg = new TypeError("The iterator does not provide a 'throw' method"); } return ContinueSentinel; } var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) { if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; } return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, define(Gp, "constructor", GeneratorFunctionPrototype), define(GeneratorFunctionPrototype, "constructor", GeneratorFunction), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (object) { var keys = []; for (var key in object) { keys.push(key); } return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) { "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); } }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, catch: function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  /**
   * Object to validate HAX schema. Can be used in and out of element contexts
   */
  var HAXWiring = /*#__PURE__*/babelHelpers.createClass(function HAXWiring() {
    var _this = this;

    babelHelpers.classCallCheck(this, HAXWiring);

    /**
     * haxProperties
     */
    this.haxProperties = {
      type: "element",
      editingElement: "core",
      canScale: false,
      canPosition: false,
      canEditSource: true,
      settings: {
        configure: [],
        advanced: []
      },
      wipeSlot: {}
    };
    /**
     * Setter to bridge private haxProperties setter.
     * This is to then be implemented by the ready state of whatever is supplying the
     * properties in order to be able to bubble up the properties for a tag.
     */

    this.setup = function (props) {
      var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this;

      if (babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        tag = _this.tagName.toLowerCase();
      }

      window.addEventListener("hax-store-ready", _this._haxStoreReady.bind(_this));

      if (babelHelpers.typeof(window.HaxStore) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && window.HaxStore.instance != null && window.HaxStore.instance.ready) {
        return _this.setHaxProperties(props, tag, context, true);
      } else {
        return _this.setHaxProperties(props, tag, context, false);
      }
    };
    /**
     * HAX store is ready so now we can fire events
     */


    this._haxStoreReady = function (e) {
      if (e.detail && babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(_this.haxProperties) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var tag = _this.tagName;
        var props = _this.haxProperties;
        var context = _this;

        if (tag != "" && babelHelpers.typeof(window.HaxStore) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var evt = new CustomEvent("hax-register-properties", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: {
              tag: tag.toLowerCase(),
              properties: props
            }
          });
          context.dispatchEvent(evt);
        } else if (tag != "" && babelHelpers.typeof(window.HaxStore.instance.elementList[tag.toLowerCase()]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var _evt = new CustomEvent("hax-register-properties", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: {
              tag: tag.toLowerCase(),
              properties: props
            }
          });

          context.dispatchEvent(_evt);
        } else if (babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(window.HaxStore.instance.elementList[_this.tagName.toLowerCase()]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var _evt2 = new CustomEvent("hax-register-properties", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: {
              tag: _this.tagName.toLowerCase(),
              properties: props
            }
          });

          context.dispatchEvent(_evt2);
        }
      }
    };
    /**
     * Setter to bridge private haxProperties setter.
     * This is to then be implemented by the ready state of whatever is supplying the
     * properties in order to be able to bubble up the properties for a tag.
     */


    this.setHaxProperties = /*#__PURE__*/babelHelpers.asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var props,
          tag,
          context,
          isReady,
          basePath,
          i,
          _i,
          _args = arguments;

      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              props = _args.length > 0 && _args[0] !== undefined ? _args[0] : {};
              tag = _args.length > 1 && _args[1] !== undefined ? _args[1] : "";
              context = _args.length > 2 && _args[2] !== undefined ? _args[2] : document;
              isReady = _args.length > 3 && _args[3] !== undefined ? _args[3] : false;

              if (!(typeof props === "string")) {
                _context.next = 8;
                break;
              }

              _context.next = 7;
              return fetch(props).then(function (response) {
                if (response && response.json) return response.json();
                return false;
              });

            case 7:
              props = _context.sent;

            case 8:
              // these are a core piece of hax capabilities
              // set them in the event this got called without anything
              // so we at least won't bomb
              if (babelHelpers.typeof(props.api) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                props.api = "1";
              } // sets us up for future API versioning of property validation
              // and clean up.


              if (props.api == "1") {
                if (babelHelpers.typeof(props.type) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.type = "element";
                }

                if (babelHelpers.typeof(props.editingElement) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.editingElement = "core";
                }

                if (babelHelpers.typeof(props.canPosition) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.canPosition = true;
                }

                if (babelHelpers.typeof(props.canScale) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.canScale = true;
                }

                if (babelHelpers.typeof(props.canEditSource) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.canEditSource = false;
                }

                if (babelHelpers.typeof(props.contentEditable) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.contentEditable = false;
                }

                if (babelHelpers.typeof(props.gizmo) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.gizmo = false;
                } else {
                  // support possible dynamic import of iconset
                  // this would be if the user defined their own icons
                  if (babelHelpers.typeof(props.gizmo.iconLib) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                    if (window.WCGlobalBasePath) {
                      basePath = window.WCGlobalBasePath;
                    } else {
                      basePath = new URL("./../../../", meta.url).href;
                    }

                    new Promise(function (res, rej) {
                      return _require.default(["".concat(basePath).concat(props.gizmo.iconLib)], res, rej);
                    });
                  }
                } // while not required, this is where all the raw power of this
                // approach really lies since this wires properties/slots to HAX's
                // ability to manipulate things via contextual menus


                if (babelHelpers.typeof(props.settings) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  if (babelHelpers.typeof(props.settings.configure) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                    props.settings.configure = [];
                  }

                  for (i = 0; i < props.settings.configure.length; i++) {
                    props.settings.configure[i] = _this.validateSetting(props.settings.configure[i]);

                    if (!props.settings.configure[i]) {
                      props.settings.configure.splice(i, 1);
                    }
                  }

                  if (babelHelpers.typeof(props.settings.advanced) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                    props.settings.advanced = [];
                  }

                  for (_i = 0; _i < props.settings.advanced.length; _i++) {
                    props.settings.advanced[_i] = _this.validateSetting(props.settings.advanced[_i]);

                    if (!props.settings.advanced[_i]) {
                      props.settings.advanced.splice(_i, 1);
                    }
                  }

                  props = _this.standardAdvancedProps(props);
                } // support for advanced save options


                if (babelHelpers.typeof(props.saveOptions) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.saveOptions = {
                    wipeSlot: false
                  };
                } // support for demoSchema


                if (babelHelpers.typeof(props.demoSchema) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
                  props.demoSchema = [];
                } // fire event so we know they have been set for the store to collect
                // only fire if we haven't already so multiple elements don't keep bubbling
                // if there's no global HaxStore then this means it is a custom
                // implementation of the schema


                if (isReady) {
                  _this.readyToFireHAXSchema(tag, props, context);
                } // only set these when tag hasn't been force fed


                if (tag === "") {
                  if (typeof _this._setHaxProperties === "function") {
                    _this._setHaxProperties(props);
                  } else {
                    _this.haxProperties = props;
                  }
                }
              } else {
                // especially useful during development if we implement our own API
                // incorrectly. Don't hard brick cause it'll still more or less work
                // but would probably default to an iframe which is less then ideal
                // but at least wouldn't brick the AX.
                console.warn("This is't a valid usage of hax API. See hax-body-behaviors/lib/HAXWiring.js for more details on how to implement the API. https://haxtheweb.org/hax-schema for details but we will try and guess the wiring");
              }

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    this.readyToFireHAXSchema = function (tag, props, context) {
      if (tag != "" && babelHelpers.typeof(window.HaxStore) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var evt = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: tag.toLowerCase(),
            properties: props
          }
        });
        context.dispatchEvent(evt);
      } else if (tag != "") {
        var _evt3 = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: tag.toLowerCase(),
            properties: props
          }
        });

        context.dispatchEvent(_evt3);
      } else if (babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var _evt4 = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: _this.tagName.toLowerCase(),
            properties: props
          }
        });

        context.dispatchEvent(_evt4);
      } else if (babelHelpers.typeof(context.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var _evt5 = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: context.tagName.toLowerCase(),
            properties: props
          }
        });

        context.dispatchEvent(_evt5);
      } else {
        console.warn(context);
        console.warn("".concat(tag, " missed our checks and has an issue in implementation with HAX"));
      }
    };
    /**
     * Standard advanced properties we support for all forms
     */


    this.standardAdvancedProps = function (props) {
      // specialized attribute to allow locking in hax of anything
      props.settings.advanced.push({
        attribute: "data-hax-lock",
        title: "Lock editing",
        description: "Prevent changes to this element and all its content",
        inputMethod: "boolean"
      }); // allow classes to be modified this way

      props.settings.advanced.push({
        attribute: "class",
        title: "Classes",
        description: "CSS classes applied manually to the element",
        inputMethod: "textfield"
      }); // allow styles to be modified this way

      props.settings.advanced.push({
        attribute: "style",
        title: "Styles",
        description: "Custom CSS styles as applied to the element",
        inputMethod: "textfield"
      }); // allow schema definitions

      props.settings.advanced.push({
        attribute: "prefix",
        title: "Schema: prefix",
        description: "Schema prefixes",
        inputMethod: "textfield"
      });
      props.settings.advanced.push({
        attribute: "typeof",
        title: "Schema: TypeOf",
        description: "typeof definition for Schema usage",
        inputMethod: "textfield"
      });
      props.settings.advanced.push({
        attribute: "property",
        title: "Schema: Property",
        description: "typeof definition for Schema usage",
        inputMethod: "textfield"
      });
      props.settings.advanced.push({
        attribute: "resource",
        title: "Schema: Resource ID",
        description: "Schema resource identifier",
        inputMethod: "textfield"
      }); // allow the id to be modified

      props.settings.advanced.push({
        attribute: "id",
        title: "ID",
        description: "element ID, only set this if you know why",
        inputMethod: "textfield"
      }); // we need to support slot in the UI but actually shift it around under the hood
      // this is so that shadow roots don't get mad when previewing

      props.settings.advanced.push({
        attribute: "slot",
        title: "slot",
        description: "DOM slot area",
        inputMethod: "textfield"
      });
      return props;
    };
    /**
     * Validate settings object.
     */


    this.validateSetting = function (setting) {
      // we don't have a property or slot so it's not valid.
      if (babelHelpers.typeof(setting.property) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(setting.slot) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(setting.attribute) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        return false;
      } // ensure there's a title


      if (babelHelpers.typeof(setting.title) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        if (babelHelpers.typeof(setting.attribute) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          setting.title = setting.property;
        } else {
          setting.title = setting.attribute;
        }
      } // ensure there's at least an empty description


      if (babelHelpers.typeof(setting.description) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.description = "";
      } // ensure there's at least an input method


      if (babelHelpers.typeof(setting.inputMethod) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.inputMethod = "textfield";
      } // ensure there's at least a type


      if (babelHelpers.typeof(setting.type) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.type = "settings";
      } // ensure there's at least an icon


      if (babelHelpers.typeof(setting.icon) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.icon = "android";
      } // ensure there's at least an empty options area


      if (babelHelpers.typeof(setting.options) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.options = {};
      } // ensure there's required set


      if (babelHelpers.typeof(setting.required) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.required = false;
      } // ensure there's required set


      if (babelHelpers.typeof(setting.disabled) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.disabled = false;
      } // ensure there's validation or make it anything if none set


      if (babelHelpers.typeof(setting.validation) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.validation = ".*";
      } // ensure there's validation or make it anything if none set


      if (babelHelpers.typeof(setting.validationType) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.validationType = "";
      } // slot can have a slot wrapper property


      if (babelHelpers.typeof(setting.slot) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        if (babelHelpers.typeof(setting.slotWrapper) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          setting.slotWrapper = "span";
        }

        if (babelHelpers.typeof(setting.slotAttributes) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          setting.slotAttributes = {};
        }
      }

      return setting;
    };
    /**
     * Match convention for set.
     */


    this.getHaxProperties = function () {
      return _this.haxProperties;
    };
    /**
     * Convert haxProperties structure to a simple json-schema.
     * This allows for complex form building systems based on this data.
     * type is configure or advanced
     */


    this.getHaxJSONSchema = function (type, haxProperties) {
      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this;

      if (babelHelpers.typeof(type) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        type = "configure";
      }

      if (babelHelpers.typeof(haxProperties) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        haxProperties = target.haxProperties;
      }

      var settings = haxProperties.settings[type];
      var schema = {
        $schema: "http://json-schema.org/schema#",
        title: "HAX " + type + " form schema",
        type: "object",
        properties: {}
      };
      schema.properties = new _simpleFields.SimpleFields().fieldsToSchema(settings); // support post processing of schema in order to allow for really
      // custom implementations that are highly dynamic in nature
      // post process hook needs to see if there's a class overriding this
      // if we have a definition for this component then we should run its postProcess
      // just to be safe

      if (haxProperties.gizmo && haxProperties.gizmo.tag && window.customElements.get(haxProperties.gizmo.tag)) {
        var tmp = document.createElement(haxProperties.gizmo.tag);

        if (typeof tmp.postProcessgetHaxJSONSchema === "function") {
          schema = tmp.postProcessgetHaxJSONSchema(schema);
        } else {
          schema = target.postProcessgetHaxJSONSchema(schema);
        }
      } else {
        schema = target.postProcessgetHaxJSONSchema(schema);
      }

      return schema;
    };
    /**
     * Default postProcessgetHaxJSONSchema to be overridden.
     */


    this.postProcessgetHaxJSONSchema = function (schema) {
      return schema;
    };
    /**
     * Internal helper for getHaxJSONSchema to buiild the properties object
     * correctly with support for recursive nesting thx to objects / arrays.
     */


    this._getHaxJSONSchemaProperty = function (settings) {
      return new _simpleFields.SimpleFields().fieldsToSchema(settings);
    };
    /**
     * Convert input method to schema type
     */


    this.getHaxJSONSchemaType = function (inputMethod) {
      var method = new _simpleFields.SimpleFields().fieldsConversion.inputMethod[inputMethod] || new _simpleFields.SimpleFields().fieldsConversion;
      return method && method.defaultSettings && method.defaultSettings.type ? method.defaultSettings.type : "string";
    };
    /**
     * List valid input methods.
     */


    this.validHAXPropertyInputMethod = function () {
      var methods = Object.keys(new _simpleFields.SimpleFields().fieldsConversion.inputMethod);
      return methods;
    };
    /**
     * Return a haxProperties prototype / example structure
     */


    this.prototypeHaxProperties = function () {
      // example properties valid for HAX context menu.
      var props = {
        api: "1",
        canScale: true,
        canPosition: true,
        canEditSource: true,
        contentEditable: false,
        gizmo: {
          title: "Tag name",
          description: "",
          icon: "icons:android",
          color: "purple",
          groups: ["Content"],
          handles: [{
            type: "data",
            type_exclusive: false,
            url: "src"
          }],
          meta: {
            author: "auto"
          },
          requiresChildren: false,
          requiresParent: false
        },
        settings: {
          configure: [{
            slot: "",
            title: "Inner content",
            description: "The slotted content that lives inside the tag",
            inputMethod: "textfield",
            icon: "android",
            required: true,
            validationType: "text"
          }, {
            slot: "button",
            title: "Button content",
            description: "The content that can override the button",
            inputMethod: "textfield",
            icon: "android",
            required: true,
            validationType: "text"
          }, {
            property: "title",
            title: "Title",
            description: "",
            inputMethod: "textfield",
            icon: "android",
            required: true,
            validationType: "text"
          }, {
            property: "primaryColor",
            title: "Title",
            description: "",
            inputMethod: "textfield",
            icon: "android",
            required: false,
            validation: ".*",
            validationType: "text"
          }],
          advanced: [{
            property: "secondaryColor",
            title: "Secondary color",
            description: "An optional secondary color used in certain edge cases.",
            inputMethod: "colorpicker",
            icon: "color"
          }, {
            property: "endPoint",
            title: "API endpoint",
            description: "An optional endpoint to hit and load in more data dymaically.",
            inputMethod: "textfield",
            icon: "android",
            validation: "[a-z0-9]",
            validationType: "url"
          }]
        },
        saveOptions: {
          wipeSlot: false,
          unsetAttributes: ["end-point", "secondary-color"]
        },
        demoSchema: [{
          tag: "my-tag",
          content: "<p>inner html</p>",
          properties: {
            endPoint: "https://cdn2.thecatapi.com/images/9j5.jpg",
            primaryColor: "yellow",
            title: "A cat"
          }
        }]
      };
      return props;
    };
  });
  /**
   * Super class element partial. This mixes the HAXWiring capabilities into the element itself.
   * Use this in instances where you want direct access to all the functions in the element itself
   */

  _exports.HAXWiring = HAXWiring;

  var HAXElement = function HAXElement(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        var _this2;

        babelHelpers.classCallCheck(this, _class);
        _this2 = _super.call(this);
        _this2.HAXWiring = new HAXWiring();
        return _this2;
      }

      babelHelpers.createClass(_class, [{
        key: "setHaxProperties",
        value:
        /**
         * Setter to bridge private haxProperties setter.
         * This is to then be implemented by the ready state of whatever is supplying the
         * properties in order to be able to bubble up the properties for a tag.
         */
        function setHaxProperties(props) {
          var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

          if (tag == "" && babelHelpers.typeof(this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            tag = this.tagName.toLowerCase();
          }

          if (window.HaxStore && window.HaxStore.instance != null && window.HaxStore.instance.ready) {
            return this.HAXWiring.setHaxProperties(props, tag, context, true);
          } else {
            // slow load environment, set listener and hold off of processing
            window.addEventListener("hax-store-ready", this._haxStoreReady.bind(this));
            return this.HAXWiring.setHaxProperties(props, tag, context, false);
          }
        }
        /**
         * Clean up
         */

      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          window.removeEventListener("hax-store-ready", this._haxStoreReady.bind(this));

          if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
          }
        }
        /**
         * Setter to bridge private haxProperties setter.
         * This is to then be implemented by the ready state of whatever is supplying the
         * properties in order to be able to bubble up the properties for a tag.
         */

      }, {
        key: "setup",
        value: function setup(props) {
          var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
          var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
          return this.HAXWiring.setup(props, tag = "", context = this);
        }
        /**
         * Private function to fire off props when ready
         */

      }, {
        key: "_haxStoreReady",
        value: function _haxStoreReady(e) {
          return this.HAXWiring._haxStoreReady(e);
        }
        /**
         * Validate settings object.
         */

      }, {
        key: "validateSetting",
        value: function validateSetting(setting) {
          return this.HAXWiring.validateSetting(setting);
        }
        /**
         * Match convention for set.
         */

      }, {
        key: "getHaxProperties",
        value: function getHaxProperties() {
          return this.haxProperties;
        }
        /**
         * Convert haxProperties structure to a simple json-schema.
         * This allows for complex form building systems based on this data.
         * type is configure or advanced
         */

      }, {
        key: "getHaxJSONSchema",
        value: function getHaxJSONSchema(type, haxProperties) {
          var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
          return this.HAXWiring.getHaxJSONSchema(type, haxProperties, target);
        }
        /**
         * Default postProcessgetHaxJSONSchema to be overridden.
         */

      }, {
        key: "postProcessgetHaxJSONSchema",
        value: function postProcessgetHaxJSONSchema(schema) {
          return this.HAXWiring.postProcessgetHaxJSONSchema(schema);
        }
        /**
         * Internal helper for getHaxJSONSchema to buiild the properties object
         * correctly with support for recursive nesting thx to objects / arrays.
         */

      }, {
        key: "_getHaxJSONSchemaProperty",
        value: function _getHaxJSONSchemaProperty(settings) {
          return new _simpleFields.SimpleFields().fieldsToSchema(settings);
        }
        /**
         * Convert input method to schedma type
         */

      }, {
        key: "getHaxJSONSchemaType",
        value: function getHaxJSONSchemaType(inputMethod) {
          return this.HAXWiring.getHaxJSONSchemaType(inputMethod);
        }
        /**
         * List valid input methods.
         */

      }, {
        key: "validHAXPropertyInputMethod",
        value: function validHAXPropertyInputMethod() {
          return this.HAXWiring.validHAXPropertyInputMethod();
        }
        /**
         * Return a haxProperties prototype / example structure
         */

      }, {
        key: "prototypeHaxProperties",
        value: function prototypeHaxProperties() {
          return this.HAXWiring.prototypeHaxProperties();
        }
      }], [{
        key: "properties",
        get: function get() {
          return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)), {}, {
            /**
             * haxProperties
             */
            haxProperties: window.HAXWiring.haxProperties
          });
        }
      }]);
      return _class;
    }(SuperClass);
  }; // LEGACY. This is a Polymer 1.x syntax element "behavior"
  // This has been replaced with HAXElement, a super class which can be used to wrap classes
  // invoke an instance so we can support behaviors as well


  _exports.HAXElement = HAXElement;
  window.HAXWiring = new HAXWiring(); // ensure HAXPropertiesBehaviors exists

  window.HAXBehaviors = window.HAXBehaviors || {};
  window.HAXBehaviors.PropertiesBehaviors = {
    properties: {
      /**
       * haxProperties
       */
      haxProperties: window.HAXWiring.haxProperties
    },

    /**
     * Setter to bridge private haxProperties setter.
     * This is to then be implemented by the ready state of whatever is supplying the
     * properties in order to be able to bubble up the properties for a tag.
     */
    setHaxProperties: function setHaxProperties(props) {
      var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

      if (tag == "" && babelHelpers.typeof(this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        tag = this.tagName.toLowerCase();
      }

      window.addEventListener("hax-store-ready", this._haxStoreReady.bind(this));

      if (babelHelpers.typeof(window.HaxStore) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && window.HaxStore.instance != null && window.HaxStore.instance.ready) {
        return window.HAXWiring.setHaxProperties(props, tag, context, true);
      } else {
        return window.HAXWiring.setHaxProperties(props, tag, context, false);
      }
    },

    /**
     * Private function to fire off props when ready
     */
    _haxStoreReady: function _haxStoreReady(e) {
      return window.HAXWiring._haxStoreReady(e);
    },

    /**
     * Validate settings object.
     */
    validateSetting: function validateSetting(setting) {
      return window.HAXWiring.validateSetting(setting);
    },

    /**
     * Match convention for set.
     */
    getHaxProperties: function getHaxProperties() {
      return this.haxProperties;
    },

    /**
     * Convert haxProperties structure to a simple json-schema.
     * This allows for complex form building systems based on this data.
     * type is configure or advanced
     */
    getHaxJSONSchema: function getHaxJSONSchema(type, haxProperties) {
      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
      return window.HAXWiring.getHaxJSONSchema(type, haxProperties, target);
    },

    /**
     * Default postProcessgetHaxJSONSchema to be overridden.
     */
    postProcessgetHaxJSONSchema: function postProcessgetHaxJSONSchema(schema) {
      return window.HAXWiring.postProcessgetHaxJSONSchema(schema);
    },

    /**
     * Internal helper for getHaxJSONSchema to buiild the properties object
     * correctly with support for recursive nesting thx to objects / arrays.
     */
    _getHaxJSONSchemaProperty: function _getHaxJSONSchemaProperty(settings) {
      return new _simpleFields.SimpleFields().fieldsToSchema(settings);
    },

    /**
     * Convert input method to schedma type
     */
    getHaxJSONSchemaType: function getHaxJSONSchemaType(inputMethod) {
      return window.HAXWiring.getHaxJSONSchemaType(inputMethod);
    },

    /**
     * List valid input methods.
     */
    validHAXPropertyInputMethod: function validHAXPropertyInputMethod() {
      return window.HAXWiring.validHAXPropertyInputMethod();
    },

    /**
     * Return a haxProperties prototype / example structure
     */
    prototypeHaxProperties: function prototypeHaxProperties() {
      return window.HAXWiring.prototypeHaxProperties();
    }
  };
});