define(["exports", "meta", "require", "../../simple-fields/simple-fields.js", "./HAXFields.js"], function (_exports, meta, _require, _simpleFields, _HAXFields) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.HAXElement = _exports.HAXWiring = void 0;
  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  /**
   * Object to validate HAX schema. Can be used in and out of element contexts
   */
  var HAXWiring = function HAXWiring() {
    var _this = this;

    babelHelpers.classCallCheck(this, HAXWiring);

    /**
     * haxProperties
     */
    this.haxProperties = {
      canScale: false,
      canPosition: false,
      canEditSource: false,
      settings: {
        quick: [],
        configure: [],
        advanced: []
      },
      wipeSlot: {}
    };

    this.pathFromUrl = function (url) {
      return url.substring(0, url.lastIndexOf("/") + 1);
    };
    /**
     * Setter to bridge private haxProperties setter.
     * This is to then be implemented by the ready state of whatever is supplying the
     * properties in order to be able to bubble up the properties for a tag.
     */


    this.setup = function (props) {
      var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this;

      if (babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        tag = _this.tagName.toLowerCase();
      }

      window.addEventListener("hax-store-ready", _this._haxStoreReady.bind(_this));

      if (babelHelpers.typeof(window.HaxStore) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && window.HaxStore.instance != null && window.HaxStore.ready) {
        return _this.setHaxProperties(props, tag, context, true);
      } else {
        return _this.setHaxProperties(props, tag, context, false);
      }
    };
    /**
     * HAX store is ready so now we can fire events
     */


    this._haxStoreReady = function (e) {
      if (e.detail && babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(_this.haxProperties) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var tag = _this.tagName;
        var props = _this.haxProperties;
        var context = _this;

        if (tag != "" && babelHelpers.typeof(window.HaxStore) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var evt = new CustomEvent("hax-register-properties", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: {
              tag: tag.toLowerCase(),
              properties: props,
              polymer: false
            }
          });
          context.dispatchEvent(evt);
        } else if (tag != "" && babelHelpers.typeof(window.HaxStore.instance.elementList[tag.toLowerCase()]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var _evt = new CustomEvent("hax-register-properties", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: {
              tag: tag.toLowerCase(),
              properties: props
            }
          });

          context.dispatchEvent(_evt);
        } else if (babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(window.HaxStore.instance.elementList[_this.tagName.toLowerCase()]) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          var _evt2 = new CustomEvent("hax-register-properties", {
            bubbles: true,
            composed: true,
            cancelable: true,
            detail: {
              tag: _this.tagName.toLowerCase(),
              properties: props
            }
          });

          context.dispatchEvent(_evt2);
        }
      }
    };
    /**
     * Setter to bridge private haxProperties setter.
     * This is to then be implemented by the ready state of whatever is supplying the
     * properties in order to be able to bubble up the properties for a tag.
     */


    this.setHaxProperties = function () {
      var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
      var isReady = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

      // these are a core piece of hax capabilities
      // set them in the event this got called without anything
      // so we at least won't bomb
      if (babelHelpers.typeof(props.api) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        props.api = "1";
      } // sets us up for future API versioning of property validation
      // and clean up.


      if (props.api == "1") {
        if (babelHelpers.typeof(props.canPosition) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          props.canPosition = true;
        }

        if (babelHelpers.typeof(props.canScale) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          props.canScale = true;
        }

        if (babelHelpers.typeof(props.canEditSource) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          props.canEditSource = false;
        }

        if (babelHelpers.typeof(props.gizmo) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          props.gizmo = false;
        } else {
          // support possible dynamic import of iconset
          // this would be if the user defined their own icons
          if (babelHelpers.typeof(props.gizmo.iconLib) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            var basePath = _this.pathFromUrl(decodeURIComponent(meta.url));

            new Promise(function (res, rej) {
              return _require.default(["".concat(basePath, "../../../").concat(props.gizmo.iconLib)], res, rej);
            });
          }
        } // while not required, this is where all the raw power of this
        // approach really lies since this wires properties/slots to HAX's
        // ability to manipulate things via contextual menus


        if (babelHelpers.typeof(props.settings) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          // loop through any potential settings in each of the three
          // groupings of possible settings and validate that each setting is accurate
          if (babelHelpers.typeof(props.settings.quick) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            props.settings.quick = [];
          }

          for (var i = 0; i < props.settings.quick.length; i++) {
            props.settings.quick[i] = _this.validateSetting(props.settings.quick[i]); // account for a bad property and remove it

            if (!props.settings.quick[i]) {
              props.settings.quick.splice(i, 1);
            }
          }

          if (babelHelpers.typeof(props.settings.configure) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            props.settings.configure = [];
          }

          for (var _i = 0; _i < props.settings.configure.length; _i++) {
            props.settings.configure[_i] = _this.validateSetting(props.settings.configure[_i]);

            if (!props.settings.configure[_i]) {
              props.settings.configure.splice(_i, 1);
            }
          }

          if (babelHelpers.typeof(props.settings.advanced) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
            props.settings.advanced = [];
          }

          for (var _i2 = 0; _i2 < props.settings.advanced.length; _i2++) {
            props.settings.advanced[_i2] = _this.validateSetting(props.settings.advanced[_i2]);

            if (!props.settings.advanced[_i2]) {
              props.settings.advanced.splice(_i2, 1);
            }
          }

          props = _this.standardAdvancedProps(props);
        } // support for advanced save options


        if (babelHelpers.typeof(props.saveOptions) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          props.saveOptions = {
            wipeSlot: false
          };
        } // support for demoSchema


        if (babelHelpers.typeof(props.demoSchema) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          props.demoSchema = [];
        } // fire event so we know they have been set for the store to collect
        // only fire if we haven't already so multiple elements don't keep bubbling
        // if there's no global HaxStore then this means it is a custom
        // implementation of the schema


        if (isReady) {
          _this.readyToFireHAXSchema(tag, props, context);
        } // only set these when tag hasn't been force fed


        if (tag === "") {
          if (typeof _this._setHaxProperties === "function") {
            _this._setHaxProperties(props);
          } else {
            _this.haxProperties = props;
          }
        }
      } else {
        // especially useful during development if we implement our own API
        // incorrectly. Don't hard brick cause it'll still more or less work
        // but would probably default to an iframe which is less then ideal
        // but at least wouldn't brick the AX.
        console.warn("This is't a valid usage of hax API. See hax-body-behaviors/lib/HAXWiring.js for more details on how to implement the API. https://haxtheweb.org/hax-schema for details but we will try and guess the wiring");
      }
    };

    this.readyToFireHAXSchema = function (tag, props, context) {
      if (tag != "" && babelHelpers.typeof(window.HaxStore) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var evt = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: tag.toLowerCase(),
            properties: props,
            polymer: false
          }
        });
        context.dispatchEvent(evt);
      } else if (tag != "") {
        var _evt3 = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: tag.toLowerCase(),
            properties: props
          }
        });

        context.dispatchEvent(_evt3);
      } else if (babelHelpers.typeof(_this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var _evt4 = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: _this.tagName.toLowerCase(),
            properties: props
          }
        });

        context.dispatchEvent(_evt4);
      } else if (babelHelpers.typeof(context.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        var _evt5 = new CustomEvent("hax-register-properties", {
          bubbles: true,
          composed: true,
          cancelable: true,
          detail: {
            tag: context.tagName.toLowerCase(),
            properties: props
          }
        });

        context.dispatchEvent(_evt5);
      } else {
        console.warn(context);
        console.warn("".concat(tag, " missed our checks and has an issue in implementation with HAX"));
      }
    };
    /**
     * Standard advanced properties we support for all forms
     */


    this.standardAdvancedProps = function (props) {
      // allow classes to be modified this way
      props.settings.advanced.push({
        attribute: "class",
        title: "Classes",
        description: "CSS classes applied manually to the element",
        inputMethod: "textfield"
      }); // allow styles to be modified this way

      props.settings.advanced.push({
        attribute: "style",
        title: "Styles",
        description: "Custom CSS styles as applied to the element",
        inputMethod: "textfield"
      }); // allow schema definitions

      props.settings.advanced.push({
        attribute: "prefix",
        title: "Schema: prefix",
        description: "Schema prefixes",
        inputMethod: "textfield"
      });
      props.settings.advanced.push({
        attribute: "typeof",
        title: "Schema: TypeOf",
        description: "typeof definition for Schema usage",
        inputMethod: "textfield"
      });
      props.settings.advanced.push({
        attribute: "property",
        title: "Schema: Property",
        description: "typeof definition for Schema usage",
        inputMethod: "textfield"
      });
      props.settings.advanced.push({
        attribute: "resource",
        title: "Schema: Resource ID",
        description: "Schema resource identifier",
        inputMethod: "textfield"
      }); // allow the id to be modified

      props.settings.advanced.push({
        attribute: "id",
        title: "ID",
        description: "element ID, only set this if you know why",
        inputMethod: "textfield"
      }); // we need to support slot in the UI but actually shift it around under the hood
      // this is so that shadow roots don't get mad when previewing

      props.settings.advanced.push({
        attribute: "slot",
        title: "slot",
        description: "DOM slot area",
        inputMethod: "textfield"
      });
      return props;
    };
    /**
     * Validate settings object.
     */


    this.validateSetting = function (setting) {
      // we don't have a property or slot so it's not valid.
      if (babelHelpers.typeof(setting.property) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(setting.slot) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && babelHelpers.typeof(setting.attribute) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        return false;
      } // ensure there's a title


      if (babelHelpers.typeof(setting.title) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        if (babelHelpers.typeof(setting.attribute) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          setting.title = setting.property;
        } else {
          setting.title = setting.attribute;
        }
      } // ensure there's at least an empty description


      if (babelHelpers.typeof(setting.description) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.description = "";
      } // ensure there's at least an input method


      if (babelHelpers.typeof(setting.inputMethod) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.inputMethod = "textfield";
      } // ensure there's at least a type


      if (babelHelpers.typeof(setting.type) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.type = "settings";
      } // ensure there's at least an icon


      if (babelHelpers.typeof(setting.icon) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.icon = "android";
      } // ensure there's at least an empty options area


      if (babelHelpers.typeof(setting.options) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.options = {};
      } // ensure there's required set


      if (babelHelpers.typeof(setting.required) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.required = false;
      } // ensure there's required set


      if (babelHelpers.typeof(setting.disabled) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.disabled = false;
      } // ensure there's validation or make it anything if none set


      if (babelHelpers.typeof(setting.validation) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.validation = ".*";
      } // ensure there's validation or make it anything if none set


      if (babelHelpers.typeof(setting.validationType) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        setting.validationType = "";
      } // slot can have a slot wrapper property


      if (babelHelpers.typeof(setting.slot) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        if (babelHelpers.typeof(setting.slotWrapper) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          setting.slotWrapper = "span";
        }

        if (babelHelpers.typeof(setting.slotAttributes) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
          setting.slotAttributes = {};
        }
      }

      return setting;
    };
    /**
     * Match convention for set.
     */


    this.getHaxProperties = function () {
      return _this.haxProperties;
    };
    /**
     * Convert haxProperties structure to a simple json-schema.
     * This allows for complex form building systems based on this data.
     * type is configure or advanced
     */


    this.getHaxJSONSchema = function (type, haxProperties) {
      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this;

      if (babelHelpers.typeof(type) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        type = "configure";
      }

      if (babelHelpers.typeof(haxProperties) === (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        haxProperties = target.haxProperties;
      }

      var settings = haxProperties.settings[type];
      var schema = {
        $schema: "http://json-schema.org/schema#",
        title: "HAX " + type + " form schema",
        type: "object",
        properties: {}
      };
      schema.properties = new _simpleFields.SimpleFields().fieldsToSchema(settings); // support post processing of schema in order to allow for really
      // custom implementations that are highly dynamic in nature
      // post process hook needs to see if there's a class overriding this
      // if we have a definition for this component then we should run its postProcess
      // just to be safe

      if (haxProperties.gizmo && haxProperties.gizmo.tag && window.customElements.get(haxProperties.gizmo.tag)) {
        var tmp = document.createElement(haxProperties.gizmo.tag);

        if (typeof tmp.postProcessgetHaxJSONSchema === "function") {
          schema = tmp.postProcessgetHaxJSONSchema(schema);
        } else {
          schema = target.postProcessgetHaxJSONSchema(schema);
        }
      } else {
        schema = target.postProcessgetHaxJSONSchema(schema);
      }

      return schema;
    };
    /**
     * Default postProcessgetHaxJSONSchema to be overridden.
     */


    this.postProcessgetHaxJSONSchema = function (schema) {
      return schema;
    };
    /**
     * Internal helper for getHaxJSONSchema to buiild the properties object
     * correctly with support for recursive nesting thx to objects / arrays.
     */


    this._getHaxJSONSchemaProperty = function (settings) {
      return new _simpleFields.SimpleFields().fieldsToSchema(settings);
    };
    /**
     * Convert input method to schema type
     */


    this.getHaxJSONSchemaType = function (inputMethod) {
      var method = new _simpleFields.SimpleFields().fieldsConversion.inputMethod[inputMethod] || new _simpleFields.SimpleFields().fieldsConversion;
      return method && method.defaultSettings && method.defaultSettings.type ? method.defaultSettings.type : "string";
    };
    /**
     * List valid input methods.
     */


    this.validHAXPropertyInputMethod = function () {
      var methods = Object.keys(new _simpleFields.SimpleFields().fieldsConversion.inputMethod);
      return methods;
    };
    /**
     * Return a haxProperties prototype / example structure
     */


    this.prototypeHaxProperties = function () {
      // example properties valid for HAX context menu.
      var props = {
        api: "1",
        canScale: true,
        canPosition: true,
        canEditSource: false,
        gizmo: {
          title: "Tag name",
          description: "",
          icon: "icons:android",
          color: "purple",
          groups: ["Content"],
          handles: [{
            type: "data",
            type_exclusive: false,
            url: "src"
          }],
          meta: {
            author: "auto"
          }
        },
        settings: {
          quick: [{
            property: "title",
            title: "Title",
            inputMethod: "textfield",
            icon: "android"
          }, {
            property: "primaryColor",
            title: "Primary color",
            inputMethod: "colorpicker",
            icon: "color"
          }],
          configure: [{
            slot: "",
            title: "Inner content",
            description: "The slotted content that lives inside the tag",
            inputMethod: "textfield",
            icon: "android",
            required: true,
            validationType: "text"
          }, {
            slot: "button",
            title: "Button content",
            description: "The content that can override the button",
            inputMethod: "textfield",
            icon: "android",
            required: true,
            validationType: "text"
          }, {
            property: "title",
            title: "Title",
            description: "",
            inputMethod: "textfield",
            icon: "android",
            required: true,
            validationType: "text"
          }, {
            property: "primaryColor",
            title: "Title",
            description: "",
            inputMethod: "textfield",
            icon: "android",
            required: false,
            validation: ".*",
            validationType: "text"
          }],
          advanced: [{
            property: "secondaryColor",
            title: "Secondary color",
            description: "An optional secondary color used in certain edge cases.",
            inputMethod: "colorpicker",
            icon: "color"
          }, {
            property: "endPoint",
            title: "API endpoint",
            description: "An optional endpoint to hit and load in more data dymaically.",
            inputMethod: "textfield",
            icon: "android",
            validation: "[a-z0-9]",
            validationType: "url"
          }]
        },
        saveOptions: {
          wipeSlot: false,
          unsetAttributes: ["end-point", "secondary-color"]
        },
        demoSchema: [{
          tag: "my-tag",
          content: "<p>inner html</p>",
          properties: {
            endPoint: "https://cdn2.thecatapi.com/images/9j5.jpg",
            primaryColor: "yellow",
            title: "A cat"
          }
        }]
      };
      return props;
    };
  };
  /**
   * Super class element partial. This mixes the HAXWiring capabilities into the element itself.
   * Use this in instances where you want direct access to all the functions in the element itself
   */


  _exports.HAXWiring = HAXWiring;

  var HAXElement = function HAXElement(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass) {
        babelHelpers.inherits(_class, _SuperClass);

        function _class() {
          var _this2;

          babelHelpers.classCallCheck(this, _class);
          _this2 = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class).call(this));
          _this2.HAXWiring = new HAXWiring();
          return _this2;
        }

        babelHelpers.createClass(_class, [{
          key: "setHaxProperties",

          /**
           * Setter to bridge private haxProperties setter.
           * This is to then be implemented by the ready state of whatever is supplying the
           * properties in order to be able to bubble up the properties for a tag.
           */
          value: function setHaxProperties(props) {
            var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

            if (tag == "" && babelHelpers.typeof(this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
              tag = this.tagName.toLowerCase();
            }

            window.addEventListener("hax-store-ready", this._haxStoreReady.bind(this));

            if (babelHelpers.typeof(window.HaxStore) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && window.HaxStore.instance != null && window.HaxStore.ready) {
              return this.HAXWiring.setHaxProperties(props, tag, context, true);
            } else {
              return this.HAXWiring.setHaxProperties(props, tag, context, false);
            }
          }
          /**
           * Clean up
           */

        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            window.removeEventListener("hax-store-ready", this._haxStoreReady.bind(this));

            if (babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this)) {
              babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
            }
          }
          /**
           * Setter to bridge private haxProperties setter.
           * This is to then be implemented by the ready state of whatever is supplying the
           * properties in order to be able to bubble up the properties for a tag.
           */

        }, {
          key: "setup",
          value: function setup(props) {
            var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
            var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
            return this.HAXWiring.setup(props, tag = "", context = this);
          }
          /**
           * Private function to fire off props when ready
           */

        }, {
          key: "_haxStoreReady",
          value: function _haxStoreReady(e) {
            return this.HAXWiring._haxStoreReady(e);
          }
          /**
           * Validate settings object.
           */

        }, {
          key: "validateSetting",
          value: function validateSetting(setting) {
            return this.HAXWiring.validateSetting(setting);
          }
          /**
           * Match convention for set.
           */

        }, {
          key: "getHaxProperties",
          value: function getHaxProperties() {
            return this.haxProperties;
          }
          /**
           * Convert haxProperties structure to a simple json-schema.
           * This allows for complex form building systems based on this data.
           * type is configure or advanced
           */

        }, {
          key: "getHaxJSONSchema",
          value: function getHaxJSONSchema(type, haxProperties) {
            var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
            return this.HAXWiring.getHaxJSONSchema(type, haxProperties, target);
          }
          /**
           * Default postProcessgetHaxJSONSchema to be overridden.
           */

        }, {
          key: "postProcessgetHaxJSONSchema",
          value: function postProcessgetHaxJSONSchema(schema) {
            return this.HAXWiring.postProcessgetHaxJSONSchema(schema);
          }
          /**
           * Internal helper for getHaxJSONSchema to buiild the properties object
           * correctly with support for recursive nesting thx to objects / arrays.
           */

        }, {
          key: "_getHaxJSONSchemaProperty",
          value: function _getHaxJSONSchemaProperty(settings) {
            return new _simpleFields.SimpleFields().fieldsToSchema(settings);
          }
          /**
           * Convert input method to schedma type
           */

        }, {
          key: "getHaxJSONSchemaType",
          value: function getHaxJSONSchemaType(inputMethod) {
            return this.HAXWiring.getHaxJSONSchemaType(inputMethod);
          }
          /**
           * List valid input methods.
           */

        }, {
          key: "validHAXPropertyInputMethod",
          value: function validHAXPropertyInputMethod() {
            return this.HAXWiring.validHAXPropertyInputMethod();
          }
          /**
           * Return a haxProperties prototype / example structure
           */

        }, {
          key: "prototypeHaxProperties",
          value: function prototypeHaxProperties() {
            return this.HAXWiring.prototypeHaxProperties();
          }
        }], [{
          key: "properties",
          get: function get() {
            return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this), {
              /**
               * haxProperties
               */
              haxProperties: window.HAXWiring.haxProperties
            });
          }
        }]);
        return _class;
      }(SuperClass)
    );
  }; // LEGACY. This is a Polymer 1.x syntax element "behavior"
  // This has been replaced with HAXElement, a super class which can be used to wrap classes
  // invoke an instance so we can support behaviors as well


  _exports.HAXElement = HAXElement;
  window.HAXWiring = new HAXWiring(); // ensure HAXPropertiesBehaviors exists

  window.HAXBehaviors = window.HAXBehaviors || {};
  window.HAXBehaviors.PropertiesBehaviors = {
    properties: {
      /**
       * haxProperties
       */
      haxProperties: window.HAXWiring.haxProperties
    },

    /**
     * Setter to bridge private haxProperties setter.
     * This is to then be implemented by the ready state of whatever is supplying the
     * properties in order to be able to bubble up the properties for a tag.
     */
    setHaxProperties: function setHaxProperties(props) {
      var tag = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
      var context = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;

      if (tag == "" && babelHelpers.typeof(this.tagName) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined))) {
        tag = this.tagName.toLowerCase();
      }

      window.addEventListener("hax-store-ready", this._haxStoreReady.bind(this));

      if (babelHelpers.typeof(window.HaxStore) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && window.HaxStore.instance != null && window.HaxStore.ready) {
        return window.HAXWiring.setHaxProperties(props, tag, context, true);
      } else {
        return window.HAXWiring.setHaxProperties(props, tag, context, false);
      }
    },

    /**
     * Private function to fire off props when ready
     */
    _haxStoreReady: function _haxStoreReady(e) {
      return window.HAXWiring._haxStoreReady(e);
    },

    /**
     * Validate settings object.
     */
    validateSetting: function validateSetting(setting) {
      return window.HAXWiring.validateSetting(setting);
    },

    /**
     * Match convention for set.
     */
    getHaxProperties: function getHaxProperties() {
      return this.haxProperties;
    },

    /**
     * Convert haxProperties structure to a simple json-schema.
     * This allows for complex form building systems based on this data.
     * type is configure or advanced
     */
    getHaxJSONSchema: function getHaxJSONSchema(type, haxProperties) {
      var target = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this;
      return window.HAXWiring.getHaxJSONSchema(type, haxProperties, target);
    },

    /**
     * Default postProcessgetHaxJSONSchema to be overridden.
     */
    postProcessgetHaxJSONSchema: function postProcessgetHaxJSONSchema(schema) {
      return window.HAXWiring.postProcessgetHaxJSONSchema(schema);
    },

    /**
     * Internal helper for getHaxJSONSchema to buiild the properties object
     * correctly with support for recursive nesting thx to objects / arrays.
     */
    _getHaxJSONSchemaProperty: function _getHaxJSONSchemaProperty(settings) {
      return new _simpleFields.SimpleFields().fieldsToSchema(settings);
    },

    /**
     * Convert input method to schedma type
     */
    getHaxJSONSchemaType: function getHaxJSONSchemaType(inputMethod) {
      return window.HAXWiring.getHaxJSONSchemaType(inputMethod);
    },

    /**
     * List valid input methods.
     */
    validHAXPropertyInputMethod: function validHAXPropertyInputMethod() {
      return window.HAXWiring.validHAXPropertyInputMethod();
    },

    /**
     * Return a haxProperties prototype / example structure
     */
    prototypeHaxProperties: function prototypeHaxProperties() {
      return window.HAXWiring.prototypeHaxProperties();
    }
  };
});