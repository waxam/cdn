define(["exports","meta","require","../../lit-element/lit-element.js","../schema-behaviors/schema-behaviors.js"],function(_exports,meta,_require,_litElement,_schemaBehaviors){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.CodeEditor=void 0;meta=babelHelpers.interopRequireWildcard(meta);_require=babelHelpers.interopRequireWildcard(_require);function ownKeys(object,enumerableOnly){var keys=Object.keys(object);if(Object.getOwnPropertySymbols){var symbols=Object.getOwnPropertySymbols(object);if(enumerableOnly)symbols=symbols.filter(function(sym){return Object.getOwnPropertyDescriptor(object,sym).enumerable});keys.push.apply(keys,symbols)}return keys}function _objectSpread(target){for(var i=1,source;i<arguments.length;i++){source=null!=arguments[i]?arguments[i]:{};if(i%2){ownKeys(Object(source),!0).forEach(function(key){babelHelpers.defineProperty(target,key,source[key])})}else if(Object.getOwnPropertyDescriptors){Object.defineProperties(target,Object.getOwnPropertyDescriptors(source))}else{ownKeys(Object(source)).forEach(function(key){Object.defineProperty(target,key,Object.getOwnPropertyDescriptor(source,key))})}}return target}function _templateObject2_8da358b07aa011eaae968b3bc65fe8dd(){var data=babelHelpers.taggedTemplateLiteral(["\n      <label for=\"codeeditor\" ?hidden=\"","\">","</label>\n      <monaco-element\n        id=\"codeeditor\"\n        ?autofocus=\"","\"\n        ?hide-line-numbers=\"","\"\n        lib-path=\"","\"\n        language=\"","\"\n        tab-size=\"","\"\n        theme=\"","\"\n        @value-changed=\"","\"\n        font-size=\"","\"\n        ?read-only=\"","\"\n        @code-editor-focus=\"","\"\n        @code-editor-blur=\"","\"\n      >\n      </monaco-element>\n      <slot hidden></slot>\n      <div class=\"code-pen-container\" ?hidden=\"","\">\n        <span>Check it out on code pen: </span\n        ><code-pen-button .data=\"","\"></code-pen-button>\n      </div>\n    "]);_templateObject2_8da358b07aa011eaae968b3bc65fe8dd=function _templateObject2_8da358b07aa011eaae968b3bc65fe8dd(){return data};return data}function _templateObject_8da358b07aa011eaae968b3bc65fe8dd(){var data=babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          font-family: unset;\n          margin: var(--code-pen-margin, 16px 0);\n        }\n        :host([hidden]) {\n          display: none !important;\n        }\n        .code-pen-container:not([hidden]) {\n          width: 100%;\n          display: flex;\n          background-color: var(--code-pen-button-color, #222222);\n          color: white;\n          height: 40px;\n          justify-content: flex-end;\n          align-items: center;\n        }\n        .code-pen-container span {\n          display: inline-flex;\n          line-height: 16px;\n          font-size: 16px;\n          padding: 12px;\n        }\n        code-pen-button {\n          float: right;\n          height: 40px;\n        }\n        label {\n          color: var(--code-editor-label-color, #888);\n          transition: all 0.5s;\n        }\n\n        :host([focused]) label {\n          color: var(\n            --code-editor-float-label-active-color,\n            var(--code-editor-label-color, #000)\n          );\n        }\n\n        #codeeditor {\n          height: 100%;\n          display: flex;\n          border: var(--code-editor-code-border);\n          border-radius: var(--code-editor-code-border-radius);\n        }\n\n        :host([focused]) #codeeditor {\n          border: var(--code-editor-focus-code-border);\n        }\n      "]);_templateObject_8da358b07aa011eaae968b3bc65fe8dd=function _templateObject_8da358b07aa011eaae968b3bc65fe8dd(){return data};return data}/**
 * `code-editor`
 * `Wrapper on top of a code editor`
 *
 * @demo demo/index.html
 * @microcopy - the mental model for this element
 * - monaco is the VS code editor
 * @element code-editor
 */var CodeEditor=/*#__PURE__*/function(_SchemaBehaviors){babelHelpers.inherits(CodeEditor,_SchemaBehaviors);babelHelpers.createClass(CodeEditor,null,[{key:"styles",/**
   * LitElement constructable styles enhancement
   */get:function get(){return[(0,_litElement.css)(_templateObject_8da358b07aa011eaae968b3bc65fe8dd())]}/**
   * HTMLElement
   */}]);function CodeEditor(){var _this;babelHelpers.classCallCheck(this,CodeEditor);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(CodeEditor).call(this));_this.showCodePen=!1;_this.readOnly=!1;_this.theme="vs-dark";_this.language="javascript";_this.fontSize=16;_this.tabSize=2;_this.autofocus=!1;_this.hideLineNumbers=!1;_this.focused=!1;_this.__libPath=decodeURIComponent(meta.url)+"/../../../monaco-editor/min/vs";new Promise(function(res,rej){return _require.default(["./lib/monaco-element/monaco-element.js"],res,rej)});new Promise(function(res,rej){return _require.default(["./lib/code-pen-button.js"],res,rej)});setTimeout(function(){_this.addEventListener("monaco-element-ready",_this.editorReady.bind(babelHelpers.assertThisInitialized(_this)))},0);return _this}/**
   * LitElement render
   */babelHelpers.createClass(CodeEditor,[{key:"render",value:function render(){return(0,_litElement.html)(_templateObject2_8da358b07aa011eaae968b3bc65fe8dd(),!this.title,this.title,this.autofocus,this.hideLineNumbers,this.__libPath,this.language,this.tabSize,this.theme,this._editorDataChanged,this.fontSize,this.readOnly,this._handleFocus,this._handleBlur,!this.showCodePen,this.codePenData)}},{key:"updated",value:function updated(changedProperties){var _this2=this;changedProperties.forEach(function(oldValue,propName){if("editorValue"==propName){_this2._editorValueChanged(_this2[propName],oldValue)}if("mode"==propName){_this2._modeChanged(_this2[propName],oldValue)}if("showCodePen"===propName){// notify
_this2.dispatchEvent(new CustomEvent("show-code-pen-changed",{detail:{value:_this2[propName]}}))}if("value"===propName){// notify
_this2.dispatchEvent(new CustomEvent("value-changed",{detail:{value:_this2[propName]}}))}if(["title","value"].includes(propName)){_this2.codePenData=_this2._computeCodePenData(_this2.title,_this2.value)}})}/**
   * Update the post data whenever the editor has been updated
   */},{key:"_computeCodePenData",value:function _computeCodePenData(title,editorValue){return{title:title,html:editorValue}}/**
   * sets focused attribute when monaco-elements's focus event fires
   * @param {event} e the monaco-elements's focus event
   */},{key:"_handleFocus",value:function _handleFocus(e){this.focused=!0}/**
   * unsets focused attribute when monaco-elements's blur event fires
   * @param {event} e the monaco-elements's blur event
   */},{key:"_handleBlur",value:function _handleBlur(e){this.focused=!1}/**
   * LEGACY: pass down mode to language if that api is used
   */},{key:"_modeChanged",value:function _modeChanged(newValue){this.language=this.mode}/**
   * Notice code editor changes and reflect them into this element
   */},{key:"_editorDataChanged",value:function _editorDataChanged(e){// value coming up off of thiss
this.value=e.detail}/**
   * Calculate what's in slot currently and then inject it into the editor.
   */},{key:"updateEditorValue",value:function updateEditorValue(node){if(node){var content="",children=node;if("TEMPLATE"!==node.tagName){console.warn("code-editor works best with a template tag provided in light dom");children=this.childNodes;if(0<children.length){// loop through everything found in the slotted area and put it back in
for(var j=0,len2=children.length;j<len2;j++){if(babelHelpers.typeof(children[j].tagName)!==("undefined"===typeof void 0?"undefined":babelHelpers.typeof(void 0))){content+=children[j].outerHTML}else{content+=children[j].textContent}}}}else{content=children.innerHTML}if(content){this.shadowRoot.querySelector("#codeeditor").value=content.trim()}}}},{key:"_editorValueChanged",value:function _editorValueChanged(newValue){if(newValue){this.shadowRoot.querySelector("#codeeditor").value=newValue}}/**
   * Ensure fields don't pass through to HAX if in that context
   */},{key:"preProcessHaxNodeToContent",value:function preProcessHaxNodeToContent(node){node.editorValue=null;node.codePenData=null;node.value=null;node.removeAttribute("value");node.removeAttribute("code-pen-data");return node}/**
   * attached life cycle
   */},{key:"connectedCallback",value:function connectedCallback(){var _this3=this;babelHelpers.get(babelHelpers.getPrototypeOf(CodeEditor.prototype),"connectedCallback",this).call(this);// mutation observer that ensures state of hax applied correctly
this._observer=new MutationObserver(function(mutations){mutations.forEach(function(mutation){if(0<mutation.addedNodes.length){mutation.addedNodes.forEach(function(node){if(node.tagName){_this3.updateEditorValue(node)}})}// if we dropped nodes via the UI (delete event basically)
if(0<mutation.removedNodes.length){// handle removing items... not sure we need to do anything here
mutation.removedNodes.forEach(function(node){if(node.tagName){_this3.updateEditorValue(node)}})}})})}},{key:"disconnectedCallback",value:function disconnectedCallback(){if(this._observer){this._observer.disconnect();this._observer=null}babelHelpers.get(babelHelpers.getPrototypeOf(CodeEditor.prototype),"disconnectedCallback",this).call(this)}},{key:"editorReady",value:function editorReady(e){var _this4=this;if(this.editorValue){this.shadowRoot.querySelector("#codeeditor").value=this.editorValue}else{this.childNodes.forEach(function(node){return _this4.updateEditorValue(node)})}this._observer.observe(this,{childList:!0})}}],[{key:"tag",get:function get(){return"code-editor"}},{key:"properties",get:function get(){return _objectSpread({},babelHelpers.get(babelHelpers.getPrototypeOf(CodeEditor),"properties",this),{/**
       * Title
       */title:{type:String},/**
       * Show codePen button to fork it to there to run
       */showCodePen:{type:Boolean,reflect:!0,attribute:"show-code-pen"},/**
       * Readonly setting for the editor
       */readOnly:{type:Boolean,reflect:!0,attribute:"read-only"},/**
       * Code pen data, computed based on the HTML editor
       */codePenData:{type:Object,attribute:"code-pen-data"},/**
       * contents of the editor
       */editorValue:{type:String,attribute:"editor-value"},/**
       * value of the editor after the fact
       */value:{type:String},/**
       * Theme for the Ace editor.
       */theme:{type:String},/**
       * Mode / language for editor
       */mode:{type:String},/**
       * Language to present color coding for
       */language:{type:String},/**
       * font size for the editor
       */fontSize:{type:Number,attribute:"font-size"},/**
       * automatically set focus on the editor
       */autofocus:{type:Boolean,reflect:!0},/**
       * hide the line numbers
       */hideLineNumbers:{type:Boolean,attribute:"hide-line-numbers"},/**
       * does the monaco-editor have focus
       */focused:{type:Boolean,reflect:!0},/**
       * number of characters for tabs
       */tabSize:{type:Number,attribute:"tab-size"}})}}]);return CodeEditor}((0,_schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));_exports.CodeEditor=CodeEditor;window.customElements.define(CodeEditor.tag,CodeEditor)});