define(["exports","../../../../@polymer/polymer/polymer-element.js"],function(_exports,_polymerElement){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.MonacoElement=void 0;function _templateObject_c17e5c907c0711e98a2471d74bf08c91(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        iframe {\n          border: none;\n          width: 100%;\n          height: 100%;\n          padding: 0;\n          margin: 0;\n        }\n      </style>\n      <iframe id=\"iframe\" frameborder=\"0\"></iframe>\n    "]);_templateObject_c17e5c907c0711e98a2471d74bf08c91=function _templateObject_c17e5c907c0711e98a2471d74bf08c91(){return data};return data}/**
 * `monaco-element`
 * Webcomponent wrapper for the monaco editor.
 *
 * Sets value, language and theme.
 * Offers a value-changed event.
 *
 * Partly influenced by https://github.com/PolymerVis/monaco-editor
 *
 * @customElement
 * @polymer
 *
 * @author Lars Gr√∂ber <larsgroeber7@gmail.com>
 */var MonacoElement=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(MonacoElement,_PolymerElement);function MonacoElement(){var _this;babelHelpers.classCallCheck(this,MonacoElement);_this=babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(MonacoElement).call(this));_this.iframe=null;return _this}babelHelpers.createClass(MonacoElement,[{key:"generateUUID",/**
   * Generate a UUID
   */value:function generateUUID(){return"ss-s-s-s-sss".replace(/s/g,this._uuidPart)}},{key:"_uuidPart",value:function _uuidPart(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}},{key:"connectedCallback",value:function connectedCallback(){var _this2=this;babelHelpers.get(babelHelpers.getPrototypeOf(MonacoElement.prototype),"connectedCallback",this).call(this);window.addEventListener("message",function(message){_this2.handleMessage(message)});setTimeout(function(){if(!_this2.__init){_this2.initIFrame()}},500)}},{key:"disconnectedCallback",value:function disconnectedCallback(){var _this3=this;window.removeEventListener("message",function(message){_this3.handleMessage(message)});this.__init=!1;babelHelpers.get(babelHelpers.getPrototypeOf(MonacoElement.prototype),"disconnectedCallback",this).call(this)}},{key:"initIFrame",value:function initIFrame(){var _this4=this;this.iframe=this.shadowRoot.querySelector("#iframe");if(this.document&&!this.__init){this.__init=!0;var div=document.createElement("div");div.id="container";this.document.body.appendChild(div);var iframeScript="\n  var eventTypes = {\n    ready: 'ready',\n    valueChanged: 'valueChanged',\n    languageChanged: 'languageChanged',\n    themeChanged: 'themeChanged',\n  };\n\n  class MonacoEditor {\n    constructor(editorReference) {\n      this._editorReference_ = editorReference;\n      this.language = 'javascript';\n      this.value = '';\n      this.editor = null;\n      this.setupEventListener('message', this.handleMessage.bind(this));\n      this.setupEditor();\n    }\n\n    setupEditor() {\n      require.config({ paths: { vs: '".concat(this.libPath,"' } });\n      require(['vs/editor/editor.main'], () => {\n        this.editor = monaco.editor.create(document.getElementById('container'), {\n          value: this.value,\n          language: '").concat(this.language,"',\n          scrollBeyondLastLine: false,\n          automaticLayout: true,\n          fontSize: ").concat(this.fontSize,",\n          readOnly: ").concat(this.readOnly,",\n          minimap: {\n            enabled: true\n          },\n          autoIndent: true,\n        });\n\n        const model = this.editor.getModel();\n        model.onDidChangeContent(() => {\n          const value = model.getValue();\n          this.onValueChanged(value);\n        });\n\n        this.ready();\n      });\n    }\n\n    ready() {\n      setTimeout(() => {\n        this.postMessage(eventTypes.ready, null);\n        this.setupEventListener(\n          eventTypes.valueChanged,\n          this.onValueChanged.bind(this)\n        );\n      }, 100);\n    }\n\n    _handleMessage(data) {\n      switch (data.event) {\n        case eventTypes.valueChanged:\n          this.onInputValueChanged(data.payload);\n          break;\n        case eventTypes.languageChanged:\n          this.onLanguageChanged(data.payload);\n          break;\n        case eventTypes.themeChanged:\n          this.onThemeChanged(data.payload);\n          break;\n        default:\n          break;\n      }\n    }\n\n    handleMessage(message) {\n      try {\n        const data = JSON.parse(message.data);\n        this._handleMessage(data);\n      } catch (error) {\n        console.warn(error);\n        return;\n      }\n    }\n\n    postMessage(event, payload) {\n      var msg = {\n        event: event,\n        payload: payload,\n        editorReference: this._editorReference_\n      }\n      window.parent.postMessage(msg, window.parent.location.href);\n    }\n\n    setupEventListener(type, callback) {\n      window.addEventListener(type, data => {\n        callback(data);\n      });\n    }\n\n    onInputValueChanged(newValue) {\n      if (newValue !== this.value) {\n        this.value = newValue;\n        this.editor.getModel().setValue(newValue);\n        this.postMessage(eventTypes.valueChanged, newValue);\n      }\n    } \n\n    onValueChanged(newValue) {\n      if (newValue !== this.value) {\n        this.value = newValue;\n        this.postMessage(eventTypes.valueChanged, newValue);\n      }\n    }\n\n    onLanguageChanged(newLang) {\n      monaco.editor.setModelLanguage(this.editor.getModel(), newLang);\n    }\n\n    onThemeChanged(newValue) {\n      monaco.editor.setTheme(newValue);\n    }\n  }\n\n  new MonacoEditor(\"").concat(this.editorReference,"\");");this.insertScriptElement({src:"".concat(this.libPath,"/loader.js"),onload:function onload(){_this4.insertScriptElement({text:iframeScript});_this4.insertStyle()}})}}},{key:"handleMessage",value:function handleMessage(message){try{var data=message.data;if("string"===typeof message.data){data=JSON.parse(message.data)}this._handleMessage(data)}catch(error){console.warn("[monaco-element] Error while parsing message:",error);return}}},{key:"_handleMessage",value:function _handleMessage(data){// bail if we don't have a valid editor reference
if(data.editorReference!==this.editorReference)return;if(data.event===this.eventTypes.valueChanged){var evt=new CustomEvent("value-changed",{bubbles:!0,cancelable:!0,detail:data.payload});this.dispatchEvent(evt)}else if(data.event===this.eventTypes.ready){this.onIFrameReady()}}},{key:"onIFrameReady",value:function onIFrameReady(){this.monacoValueChanged(this.value);this.monacoLanguageChanged(this.language);this.monacoThemeChanged(this.theme)}},{key:"monacoValueChanged",value:function monacoValueChanged(value){this.postMessage(this.eventTypes.valueChanged,value)}},{key:"monacoLanguageChanged",value:function monacoLanguageChanged(value){this.postMessage(this.eventTypes.languageChanged,value)}},{key:"monacoThemeChanged",value:function monacoThemeChanged(value){this.postMessage(this.eventTypes.themeChanged,value)}},{key:"postMessage",value:function postMessage(event,payload){if(!this.iframe){return}if(null!=this.iframe.contentWindow){this.iframe.contentWindow.postMessage(JSON.stringify({event:event,payload:payload}),window.location.href)}}},{key:"insertScriptElement",value:function insertScriptElement(_ref){var src=_ref.src,text=_ref.text,onload=_ref.onload,ele=this.document.createElement("script");if(src)ele.src=src;if(text)ele.text=text;if(onload)ele.onload=onload;this.document.head.appendChild(ele)}},{key:"insertStyle",value:function insertStyle(){var css="\n    body {\n      height: 100vh;\n      overflow: hidden;\n      margin: 0;\n    }    \n    #container {\n      width: 100%;\n      height: 100%;\n    }\n    .debug-red {\n      background : red;\n    }\n    .debug-green {\n      background : green;\n    }\n    html,body {\n      margin : 0px;\n    }",head=this.document.head,style=this.document.createElement("style");style.type="text/css";if(style.styleSheet){style.styleSheet.cssText=css}else{style.appendChild(this.document.createTextNode(css))}head.appendChild(style)}},{key:"document",get:function get(){if(this.iframe.contentWindow){return this.iframe.contentWindow.document}}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_c17e5c907c0711e98a2471d74bf08c91())}},{key:"properties",get:function get(){return{value:{type:String,value:"",observer:"monacoValueChanged"},fontSize:{type:Number,value:16},readOnly:{type:Boolean,value:!1},/**
       * THIS MAKES MULTIPLES EDITORS WORK BECAUSE OF EVENTS
       * DO NOT MESS WITH THIS AND IT HAS TO BE SET
       */uniqueKey:{type:String},eventTypes:{type:Object,value:{ready:"ready",valueChanged:"valueChanged",languageChanged:"languageChanged",themeChanged:"themeChanged"}},language:{type:String,value:"javascript",observer:"monacoLanguageChanged"},theme:{type:String,value:"vs-dark",observer:"monacoThemeChanged"},libPath:{type:String,value:"node_modules/monaco-editor/min/vs"},editorReference:{type:String,reflectToAttribute:!0,computed:"generateUUID()"}}}}]);return MonacoElement}(_polymerElement.PolymerElement);_exports.MonacoElement=MonacoElement;window.customElements.define("monaco-element",MonacoElement);window.MonacoData=window.MonacoData||{}});