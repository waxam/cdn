define(["exports", "../../lit-element/lit-element.js", "../materializecss-styles/lib/colors.js", "../../@polymer/paper-button/paper-button.js", "../elmsln-apps/lib/elmsln-base-deps.js", "../simple-tooltip/simple-tooltip.js"], function (_exports, _litElement, _colors, _paperButton, _elmslnBaseDeps, _simpleTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnsysButton = void 0;

  function _templateObject2_629b2a20d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <a tabindex=\"-1\" id=\"lrnsys-button-link\" ?disabled=\"", "\">\n        <paper-button\n          id=\"button\"\n          title=\"", "\"\n          ?raised=\"", "\"\n          class=\"", " ", " ", "\"\n          ?disabled=\"", "\"\n          @focus-changed=\"", "\"\n        >\n          <div class=\"inner ", "\">\n            <slot name=\"prefix\"></slot>\n            <iron-icon\n              icon=\"", "\"\n              id=\"icon\"\n              class=\"", "\"\n              ?hidden=\"", "\"\n            ></iron-icon>\n            <span class=\"label\" ?hidden=\"", "\"> ", " </span>\n            <slot></slot>\n          </div>\n        </paper-button>\n      </a>\n      <simple-tooltip\n        for=\"lrnsys-button-link\"\n        animation-delay=\"0\"\n        ?hidden=\"", "\"\n        >", "</simple-tooltip\n      >\n    "]);

    _templateObject2_629b2a20d34d11ea880ba1e93364c49c = function _templateObject2_629b2a20d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_629b2a20d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          --lrnsys-button-height: 48px;\n        }\n        :host([disabled]) {\n          pointer-events: none;\n        }\n        a {\n          text-decoration: none;\n          display: block;\n          color: var(--lrnsys-button-link-color, #000000);\n          display: flex;\n        }\n        paper-button {\n          padding: 0;\n          margin: 0;\n          min-width: 0.16px;\n          height: inherit;\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n          align-items: center;\n          width: 100%;\n          text-transform: unset;\n          border-radius: unset;\n          display: flex;\n        }\n        .no-padding {\n          padding: 0;\n        }\n        paper-button iron-icon {\n          height: var(--lrnsys-button-height);\n          margin: 0 4px;\n        }\n        paper-button iron-icon:first-child {\n          margin: 0 4px 0 0;\n        }\n        paper-button iron-icon:last-child {\n          margin: 0 0 0 4px;\n        }\n        paper-button div.inner {\n          height: var(--lrnsys-button-height);\n          line-height: var(--lrnsys-button-height);\n          display: flex;\n          padding: 0 16px;\n        }\n        paper-button span.label {\n          height: var(--lrnsys-button-height);\n          line-height: var(--lrnsys-button-height);\n        }\n        .no-margin {\n          margin: 0 !important;\n        }\n        .no-right-padding {\n          padding-right: 0 !important;\n        }\n        .no-left-padding {\n          padding-left: 0 !important;\n        }\n      "]);

    _templateObject_629b2a20d34d11ea880ba1e93364c49c = function _templateObject_629b2a20d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `lrnsys-button`
   * `A simple button for use in systems`
   * @demo demo/index.html
   * @element lrnsys-button
   */
  var LrnsysButton =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(LrnsysButton, _LitElement);
    babelHelpers.createClass(LrnsysButton, null, [{
      key: "styles",
      get: function get() {
        return [_colors.materialCssStyles, (0, _litElement.css)(_templateObject_629b2a20d34d11ea880ba1e93364c49c())];
      }
    }]);

    function LrnsysButton() {
      var _this;

      babelHelpers.classCallCheck(this, LrnsysButton);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnsysButton).call(this));
      _this.href = null;
      _this.target = null;
      _this.label = "";
      _this.icon = "";
      _this.alt = "";
      _this.focusState = false;
      _this.disabled = false;
      setTimeout(function () {
        _this.addEventListener("mousedown", _this.tapEventOn.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseover", _this.tapEventOn.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("focusin", _this.tapEventOn.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("focusout", _this.tapEventOff.bind(babelHelpers.assertThisInitialized(_this)));

        _this.addEventListener("mouseout", _this.tapEventOff.bind(babelHelpers.assertThisInitialized(_this)));
      }, 0);
      return _this;
    }

    babelHelpers.createClass(LrnsysButton, [{
      key: "firstUpdated",
      value: function firstUpdated(changedProperties) {
        this.updated(changedProperties);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldvalue, propName) {
          if (_this2.shadowRoot && ["href", "target"].includes(propName)) {
            if (_this2[propName]) {
              _this2.shadowRoot.querySelector("#lrnsys-button-link")[propName] = _this2[propName];
            } else {
              _this2.shadowRoot.querySelector("#lrnsys-button-link").removeAttribute(propName);
            }
          }
        });
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject2_629b2a20d34d11ea880ba1e93364c49c(), this.disabled, this.alt, this.raised, this.buttonClass, this.color, this.textColor, this.disabled, this.focusToggle, this.innerClass, this.icon, this.iconClass, !this.icon, !this.label, this.label, !this.alt, this.alt);
      }
    }, {
      key: "tapEventOn",

      /**
       * Class processing on un-tap / hover
       */
      value: function tapEventOn(e) {
        var _this3 = this;

        if (babelHelpers.typeof(this.hoverClass) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this.disabled) {
          // break class into array
          var classes = this.hoverClass.split(" "); // run through each and add or remove classes

          classes.forEach(function (item, index) {
            if (item != "") {
              _this3.shadowRoot.querySelector("#button").classList.add(item);

              if (item.indexOf("-") != -1) {
                _this3.shadowRoot.querySelector("#icon").classList.add(item);
              }
            }
          });
        }
      }
      /**
       * Undo class processing on un-tap / hover
       */

    }, {
      key: "tapEventOff",
      value: function tapEventOff(e) {
        var _this4 = this;

        if (babelHelpers.typeof(this.hoverClass) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this.disabled) {
          // break class into array
          var classes = this.hoverClass.split(" "); // run through each and add or remove classes

          classes.forEach(function (item, index) {
            if (item != "") {
              _this4.shadowRoot.querySelector("#button").classList.remove(item);

              if (item.indexOf("-") != -1) {
                _this4.shadowRoot.querySelector("#icon").classList.remove(item);
              }
            }
          });
        }
      }
      /**
       * Handle toggle for mouse class and manage classList array for paper-button.
       */

    }, {
      key: "focusToggle",
      value: function focusToggle(e) {
        var _this5 = this;

        // weird but reality... focus event is the button inside of here
        if (babelHelpers.typeof(this.hoverClass) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && !this.disabled) {
          // break class into array
          var classes = this.hoverClass.split(" "); // run through each and add or remove classes

          classes.forEach(function (item, index) {
            if (item != "") {
              if (!_this5.focusState) {
                _this5.shadowRoot.querySelector("#button").classList.add(item);

                if (item.indexOf("-") != -1) {
                  _this5.shadowRoot.querySelector("#icon").classList.add(item);
                }
              } else {
                _this5.shadowRoot.querySelector("#button").classList.remove(item);

                if (item.indexOf("-") != -1) {
                  _this5.shadowRoot.querySelector("#icon").classList.remove(item);
                }
              }
            }
          });
        }

        this.focusState = !this.focusState;
      }
    }], [{
      key: "tag",
      get: function get() {
        return "lrnsys-button";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Standard href pass down
           */
          href: {
            type: String,
            reflect: true
          },

          /**
           * If the button should be visually lifted off the UI.
           */
          raised: {
            type: Boolean,
            reflect: true
          },

          /**
           * Label to place in the text area
           */
          label: {
            type: String
          },

          /**
           * Support for target to open in new windows.
           */
          target: {
            type: String
          },

          /**
           * iron-icon to use (with iconset if needed)
           */
          icon: {
            type: String
          },

          /**
           * Classes to add / subtract based on the item being hovered.
           */
          hoverClass: {
            type: String,
            attribute: "hover-class"
          },

          /**
           * Button class.
           */
          buttonClass: {
            type: String,
            attribute: "button-class"
          },

          /**
           * Icon class in the event you want it to look different from the text.
           */
          iconClass: {
            type: String,
            attribute: "icon-class"
          },

          /**
           * Inner container classes.
           */
          innerClass: {
            type: String,
            attribute: "inner-class"
          },

          /**
           * Color class work to apply
           */
          color: {
            type: String,
            reflect: true
          },

          /**
           * materializeCSS color class for text
           */
          textColor: {
            type: String,
            attribute: "text-color"
          },

          /**
           * Alt via tooltip.
           */
          alt: {
            type: String
          },

          /**
           * Disabled state.
           */
          disabled: {
            type: Boolean
          },

          /**
           * Tracks if focus state is applied
           */
          focusState: {
            type: Boolean,
            attribute: "focus-state"
          }
        };
      }
    }]);
    return LrnsysButton;
  }(_litElement.LitElement);

  _exports.LrnsysButton = LrnsysButton;
  window.customElements.define(LrnsysButton.tag, LrnsysButton);
});