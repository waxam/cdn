define(["exports", "../../@polymer/polymer/polymer-element.js", "../simple-tooltip/simple-tooltip.js", "../../@polymer/paper-input/paper-input.js", "../../@polymer/iron-ajax/iron-ajax.js", "./lib/editable-table-behaviors.js", "./lib/editable-table-editor-rowcol.js", "./lib/editable-table-editor-toggle.js", "./lib/editable-table-editor-cell.js", "./lib/editable-table-styles.js", "./lib/editable-table-display.js"], function (_exports, _polymerElement, _simpleTooltip, _paperInput, _ironAjax, _editableTableBehaviors, _editableTableEditorRowcol, _editableTableEditorToggle, _editableTableEditorCell, _editableTableStyles, _editableTableDisplay) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTable = void 0;

  function _templateObject_52740860d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"editable-table-styles\">\n        :host {\n          --paper-listbox-background-color: var(\n            --editable-table-rowcol-bg-color\n          );\n        }\n        :host .filter-icon,\n        :host .sortable-icon {\n          display: none;\n          opacity: 0.4;\n          width: 24px;\n          height: 24px;\n        }\n        :host([sort]) tbody .tr:first-child .sortable-icon,\n        :host([filter]) tbody .tr:not(:first-of-type) .filter-icon {\n          display: inline-block;\n          opacity: 0.25;\n        }\n        :host table {\n          min-width: calc(100% - 2.3px);\n          width: unset;\n        }\n        :host caption {\n          width: 100%;\n          padding: 0;\n          margin: 0;\n          color: var(--editable-table-caption-color);\n        }\n        :host caption,\n        :host .th-or-td {\n          border: 1px solid #ddd;\n        }\n        :host label,\n        :host .label {\n          font-size: var(--editable-table-secondary-font-size);\n          font-family: var(--editable-table-secondary-font-family);\n        }\n        :host .field-group {\n          width: 100%;\n          padding: 0;\n          margin: 0;\n          transition: all 2s;\n          color: var(--editable-table-caption-color);\n        }\n        :host .field-group:not([hidden]) {\n          display: flex;\n          flex-wrap: wrap;\n          justify-content: space-between;\n          align-items: center;\n        }\n        :host caption > *,\n        :host .field-group > * {\n          margin: 0 2.5px;\n        }\n        :host .field-group .field-group {\n          width: unset;\n        }\n        :host .th,\n        :host th {\n          padding: 0;\n          vertical-align: center;\n          color: var(--editable-table-rowcol-color);\n          background-color: var(--editable-table-rowcol-bg-color);\n          outline: var(--editable-table-border);\n        }\n        :host td {\n          margin: 0;\n          padding: var(--editable-table-cell-padding);\n        }\n        :host th:hover,\n        :host th:focus-within {\n          background-color: var(--editable-table-rowcol-hover-bg-color);\n        }\n        :host .th:first-child {\n          width: 96px;\n        }\n        :host([responsive]) thead .th:nth-of-type(3),\n        :host([responsive]) .td:nth-of-type(2) {\n          border-right-width: calc(var(--editable-table-border-width) + 5px);\n          border-right-style: double;\n        }\n        :host([bordered]) thead .th:not(:first-child) {\n          border-bottom: var(--editable-table-border);\n        }\n        :host([striped][column-header])\n          tbody\n          .tr:nth-child(2n + 1):not(:first-of-type)\n          .td,\n        :host([striped]:not([column-header])) tbody .tr:nth-child(2n) .td {\n          @apply --editable-table-style-stripe;\n        }\n        :host([column-header]) tbody .tr:first-child .td {\n          @apply --editable-table-style-column-header;\n        }\n        :host([row-header]) tbody .tr .td:first-of-type {\n          @apply --editable-table-style-row-header;\n        }\n        :host([footer]) tbody .tr:last-of-type .td {\n          @apply --editable-table-style-footer;\n        }\n      </style>\n      <iron-ajax\n        auto\n        hidden$=\"[[!dataCsv]]\"\n        url=\"[[dataCsv]]\"\n        handle-as=\"text\"\n        debounce-duration=\"500\"\n        last-response=\"{{csvData}}\"\n        on-response=\"_loadExternalData\"\n      ></iron-ajax>\n      <editable-table-display\n        aria-hidden$=\"[[editMode]]\"\n        bordered$=\"[[bordered]]\"\n        caption$=\"[[caption]]\"\n        column-header$=\"[[columnHeader]]\"\n        data=\"{{data}}\"\n        condensed$=\"[[condensed]]\"\n        filter$=\"[[filter]]\"\n        footer$=\"[[footer]]\"\n        hidden$=\"[[editMode]]\"\n        responsive$=\"[[responsive]]\"\n        row-header$=\"[[rowHeader]]\"\n        sort$=\"[[sort]]\"\n        striped$=\"[[striped]]\"\n      >\n      </editable-table-display>\n      <div id=\"outer\" hidden$=\"[[!editMode]]\" aria-hidden$=\"[[!editMode]]\">\n        <div id=\"inner\">\n          <p class=\"sr-only\">Table Editor</p>\n          <table\n            id=\"table-editmode\"\n            bordered$=\"[[bordered]]\"\n            condensed$=\"[[condensed]]\"\n            striped$=\"[[striped]]\"\n          >\n            <caption>\n              <p class=\"sr-only\">Edit Mode for</p>\n              <paper-input\n                id=\"caption\"\n                label=\"Caption\"\n                placeholder=\"A title for the table.\"\n                on-change=\"_captionChanged\"\n                value$=\"{{caption}}\"\n              >\n              </paper-input>\n            </caption>\n            <thead>\n              <tr class=\"tr\">\n                <th class=\"th th-or-td\" scope=\"col\">\n                  <span class=\"sr-only\">Row Operations</span>\n                </th>\n                <template\n                  id=\"headers\"\n                  is=\"dom-repeat\"\n                  items=\"[[data]]\"\n                  as=\"row\"\n                  index-as=\"tr\"\n                  mutable-data\n                  restamp\n                >\n                  <template is=\"dom-if\" if=\"[[_isFirstRow(tr)]]\" restamp>\n                    <template\n                      id=\"headercols\"\n                      is=\"dom-repeat\"\n                      items=\"[[row]]\"\n                      as=\"cell\"\n                      index-as=\"th\"\n                      mutable-data\n                      restamp\n                    >\n                      <th class=\"th th-or-td col-[[th]]\" scope=\"col\">\n                        <editable-table-editor-rowcol\n                          index$=\"[[th]]\"\n                          condensed$=\"[[condensed]]\"\n                          on-rowcol-action=\"_handleRowColumnMenu\"\n                        >\n                        </editable-table-editor-rowcol>\n                      </th>\n                    </template>\n                  </template>\n                </template>\n              </tr>\n            </thead>\n            <tbody id=\"tbody\">\n              <template\n                id=\"rows\"\n                is=\"dom-repeat\"\n                items=\"[[data]]\"\n                as=\"row\"\n                index-as=\"tr\"\n                mutable-data\n                restamp\n              >\n                <tr class=\"tr tbody-tr\">\n                  <th class=\"th th-or-td\" scope=\"row\">\n                    <editable-table-editor-rowcol\n                      index$=\"[[tr]]\"\n                      condensed$=\"[[condensed]]\"\n                      on-rowcol-action=\"_handleRowColumnMenu\"\n                      row\n                    >\n                    </editable-table-editor-rowcol>\n                  </th>\n                  <template\n                    id=\"columns\"\n                    index-as=\"td\"\n                    is=\"dom-repeat\"\n                    items=\"[[row]]\"\n                    as=\"cell\"\n                    mutable-data\n                    restamp\n                  >\n                    <td class=\"td th-or-td\" on-click=\"_onCellClick\">\n                      <editable-table-editor-cell\n                        id=\"cell-[[td]]-[[tr]]\"\n                        class=\"cell\"\n                        column=\"[[td]]\"\n                        row=\"[[tr]]\"\n                        on-change=\"_onCellValueChange\"\n                        value=\"{{cell}}\"\n                      >\n                        <iron-icon\n                          class=\"sortable-icon\"\n                          icon=\"editable-table:sortable\"\n                          aria-hidden=\"true\"\n                        ></iron-icon>\n                        <iron-icon\n                          class=\"filter-icon\"\n                          icon=\"editable-table:filter-off\"\n                        ></iron-icon>\n                      </editable-table-editor-cell>\n                    </td>\n                  </template>\n                </tr>\n              </template>\n            </tbody>\n          </table>\n        </div>\n        <div class=\"field-group\">\n          <div class=\"field-group\">\n            <div class=\"label\">Headers and footers</div>\n            <editable-table-editor-toggle\n              id=\"columnHeader\"\n              icon=\"editable-table:column-headers\"\n              label=\"First row has column headers.\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[columnHeader]]\"\n            >\n            </editable-table-editor-toggle>\n            <editable-table-editor-toggle\n              id=\"rowHeader\"\n              icon=\"editable-table:row-headers\"\n              on-change=\"_onTableSettingChange\"\n              label=\"First column has row headers.\"\n              toggled$=\"[[rowHeader]]\"\n            >\n            </editable-table-editor-toggle>\n            <editable-table-editor-toggle\n              id=\"footer\"\n              icon=\"editable-table:footer\"\n              label=\"Last row is a footer.\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[footer]]\"\n            >\n            </editable-table-editor-toggle>\n          </div>\n          <div class=\"field-group\" hidden$=\"[[hideDisplay]]\">\n            <div class=\"label\">Display</div>\n            <editable-table-editor-toggle\n              id=\"bordered\"\n              disabled$=\"[[hideBordered]]\"\n              hidden$=\"[[hideBordered]]\"\n              icon=\"image:grid-on\"\n              label=\"Borders.\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[bordered]]\"\n            >\n            </editable-table-editor-toggle>\n            <editable-table-editor-toggle\n              id=\"striped\"\n              disabled$=\"[[hideStriped]]\"\n              hidden$=\"[[hideStriped]]\"\n              icon=\"editable-table:row-striped\"\n              label=\"Alternating rows.\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[striped]]\"\n            >\n            </editable-table-editor-toggle>\n            <editable-table-editor-toggle\n              id=\"condensed\"\n              disabled$=\"[[hideCondensed]]\"\n              hidden$=\"[[hideCondensed]]\"\n              icon=\"editable-table:row-condensed\"\n              label=\"Condensed rows.\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[condensed]]\"\n            >\n            </editable-table-editor-toggle>\n            <editable-table-editor-toggle\n              id=\"responsive\"\n              disabled$=\"[[hideResponsive]]\"\n              hidden$=\"[[hideResponsive]]\"\n              icon=\"device:devices\"\n              label=\"Adjust width to screen size.\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[responsive]]\"\n            >\n            </editable-table-editor-toggle>\n          </div>\n          <div class=\"field-group\" hidden$=\"[[hideSortFilter]]\">\n            <div class=\"label\">Data</div>\n            <editable-table-editor-toggle\n              id=\"sort\"\n              disabled$=\"[[_isSortDisabled(hideSort,columnHeader)]]\"\n              hidden$=\"[[_isSortDisabled(hideSort,columnHeader)]]\"\n              label=\"Column sorting (for tables with column headers).\"\n              icon=\"editable-table:sortable\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[sort]]\"\n            >\n            </editable-table-editor-toggle>\n            <editable-table-editor-toggle\n              id=\"filter\"\n              disabled$=\"[[hideFilter]]\"\n              hidden$=\"[[hideFilter]]\"\n              icon=\"editable-table:filter\"\n              label=\"Column filtering.\"\n              on-change=\"_onTableSettingChange\"\n              toggled$=\"[[filter]]\"\n            >\n            </editable-table-editor-toggle>\n          </div>\n        </div>\n      </div>\n      <div id=\"htmlImport\" hidden><slot></slot></div>\n    "]);

    _templateObject_52740860d34d11ea880ba1e93364c49c = function _templateObject_52740860d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `editable-table`
   * An editor interface for tables that toggles between view mode.
   *
  ### Styling
  
  `<editable-table>` provides the following custom properties and mixins
  for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--editable-table-font-size` | Main size for the  table. | unset;
  `--editable-table-secondary-font-size` | Smaller font size for the table for minor UI elements. | 12px;
  `--editable-table-caption-font-size` | Font size for the table caption. | var(--editable-table-font-size);
  `--editable-table-font-family` | Main font-family for the table. | inherit;
  `--editable-table-secondary-font-family` | Secondary font-familt for the table's minor UI elements | "Roboto", "Noto", sans-serif;
  `--editable-table-light-weight` | The lightest table font-weight, for minor UI elements. | 200;
  `--editable-table-medium-weight` | The default table font-weight. | 300;
  `--editable-table-heavy-weight` | The heaviest table font-weight, for emphasis and table  caption. | 600;
  `--editable-table-color` | The table text color. | #222;
  `--editable-table-bg-color` | The table background color. | #fff;
  `--editable-table-caption-color` | The caption text color. | var(--editable-table-color);
  `--editable-table-caption-bg-color` | The caption background color. | #fff;
  `--editable-table-heading-color` | The row/column heading text color. | #000;
  `--editable-table-heading-bg-color` | The row/column heading background color. | #ddd;
  `--editable-table-stripe-bg-color` | The background color for alternating row striping. | #eee;
  `--editable-table-border-width` | The border width for table. | 1px;
  `--editable-table-border-style` | The border style for table. | solid;
  `--editable-table-border-color` | The border color for table. | #999;
  `--editable-table-border` | The table border. | var(--editable-table-border-width) var(--editable-table-border-style) var(--editable-table-border-color);
  `--editable-table-button-color` | The default text color of the toggle buttons. | var(--editable-table-border-color);
  `--editable-table-button-bg-color` | The default background color of the toggle buttons. | var(--editable-table-bg-color);
  `--editable-table-button-toggled-color` | The text color of the toggle buttons when toggled. | var(--editable-table-color);
  `--editable-table-button-toggled-bg-color` | The background color of the toggle buttons when toggled. | var(--editable-table-bg-color);
  `--editable-table-button-hover-color` | The text color of the toggle buttons when hovered or focused. | var(--editable-table-button-color);
  `--editable-table-button-hover-bg-color` | The background color of the toggle buttons when hovered or focused. | var(--editable-table-heading-bg-color);
  `--editable-table-button-toggled-hover-color` | The text color of the toggle buttons when toggled and hovered/focused. | var(--editable-table-heading-color);
  `--editable-table-button-toggled-hover-bg-color` | The background color of the toggle buttons when toggled and hovered/focused. | var(--editable-table-heading-bg-color);
  `--editable-table-button-disabled-color` | The text color of the toggle buttons when disabled. | var(--editable-table-border-color);
  `--editable-table-button-disabled-bg-color` | The background color of the toggle buttons when disabled. | var(--editable-table-heading-bg-color);
  `--editable-table-row-horizontal-padding` | Horizontal appding for cells. | 4px;
  `--editable-table-row-vertical-padding` | Default vertical padding for cells (determines row hight and whitespace). | 5px;
  `--editable-table-row-vertical-padding-condensed` | Smaller vertical padding for cells (determines condensed row hight and whitespace). | 2px;
  `--editable-table-row-padding` | Overall default padding for cells. | var(--editable-table-row-vertical-padding) var(--editable-table-row-horizontal-padding);
  `--editable-table-row-padding-condensed` | Overall condensed padding for cells. | var(--editable-table-row-vertical-padding-condensed)var(--editable-table-row-horizontal-padding);
  `--editable-table-style-stripe` | Styles applied to striped rows. | { background-color: var(--editable-table-stripe-bg-color); }
  `--editable-table-style-column-header` | Styles applied to column headers. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); background-color: var(--editable-table-heading-bg-color); }
  `--editable-table-style-row-header` | Styles applied to row headers. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); }
  `--editable-table-style-footer` | Styles applied to table footer. | { font-weight: var(--editable-table-heavy-weight); color: var(--editable-table-heading-color); border-top: 3px solid var(--editable-table-color); }
   *
   * @demo ./demo/index.html
   * @demo ./demo/editmode.html Edit Mode
   * @demo ./demo/display.html Display Only
   * @demo ./demo/importing.html Importing Data
   * @demo ./demo/exporting.html Exporting Data
   * @demo ./demo/advanced.html Advanced Features
   * 
   * @polymer
   * @element editable-table
   * @appliesMixin displayBehaviors
   * @appliesMixin EditBehaviors
   */
  var EditableTable =
  /*#__PURE__*/
  function (_displayBehaviors) {
    babelHelpers.inherits(EditableTable, _displayBehaviors);

    function EditableTable() {
      babelHelpers.classCallCheck(this, EditableTable);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EditableTable).apply(this, arguments));
    }

    babelHelpers.createClass(EditableTable, [{
      key: "deleteColumn",

      /**
       * Delete a column at the given index
       * @param {number} index the index of the column
       */
      value: function deleteColumn(index) {
        for (var i = 0; i < this.data.length; i++) {
          this.splice("data." + i, index, 1);
        }

        var temp = this.data.slice();
        this.set("data", temp);
      }
      /**
       * Delete a row at the given index
       * @param {number} index the index of the row
       */

    }, {
      key: "deleteRow",
      value: function deleteRow(index) {
        this.splice("data", index, 1);
        var temp = this.data.slice();
        this.set("data", temp);
      }
      /**
       * Insert a column at the given index
       * @param {number} index the index of the column
       */

    }, {
      key: "insertColumn",
      value: function insertColumn(index) {
        var temp = this.data.slice();

        for (var i = 0; i < temp.length; i++) {
          temp[i].splice(index, 0, "");
        }

        this.set("data", temp);
      }
      /**
       * Insert a row at the given index
       * @param {number} index the index of the row
       */

    }, {
      key: "insertRow",
      value: function insertRow(index) {
        var temp = this.data.slice(),
            temp2 = new Array();

        for (var i = 0; i < temp[0].length; i++) {
          temp2.push("");
        }

        temp.splice(index + 1, 0, temp2);
        this.set("data", temp);
      }
      /**
       * Toggles between edit-mode and display mode.
       * @event toggle-edit-mode
       * @param {boolean} edit Toggle edit mode on? Default is toggle from current mode.
       */

    }, {
      key: "toggleEditMode",
      value: function toggleEditMode(edit) {
        edit = edit !== undefined ? edit : !this.editMode;
        this.dispatchEvent(new CustomEvent("toggle-edit-mode", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));

        if (edit) {
          this.shadowRoot.querySelector("editable-table-display").toggleFilter();
          this.shadowRoot.querySelector("editable-table-display").sortData("none", -1);
          this.shadowRoot.querySelector("#inner").focus();
        }

        this.editMode = edit;
      }
      /**
       * Handles when the caption paper-input changed
       */

    }, {
      key: "_captionChanged",
      value: function _captionChanged() {
        this.caption = this.shadowRoot.querySelector("#caption").value;
      }
      /**
       * Fires when data changed
       * @event change
       * @param {event} the event
       */

    }, {
      key: "_dataChanged",
      value: function _dataChanged(newValue, oldValue) {
        if (!newValue || newValue.length < 1 || newValue[0].length < 1) {
          var table = this.children.item(0);

          if (babelHelpers.typeof(table) !== (typeof undefined === "undefined" ? "undefined" : babelHelpers.typeof(undefined)) && table !== null && table.tagName === "TABLE") {
            this.importHTML(table);
          } else {
            this.set("data", [["", "", ""], ["", "", ""], ["", "", ""]]);
          }
        }
      }
      /**
       * Gets the row data for a given row index
       * @param {number} index the index of the row
       * @param {array} data the table data
       * @returns {array} row data
       */

    }, {
      key: "_getCurrentRow",
      value: function _getCurrentRow(index, data) {
        var row = null;

        if (data !== undefined && data !== null && data[index] !== undefined && data[index] !== null) {
          row = data[index];
        }

        return row;
      }
      /**
       * Handles row/column menu actions
       * @param {event} e the event
       */

    }, {
      key: "_handleRowColumnMenu",
      value: function _handleRowColumnMenu(e) {
        if (e.detail.insert && e.detail.row) {
          this.insertRow(e.detail.index);
        } else if (e.detail.insert && !e.detail.row) {
          this.insertColumn(e.detail.index);
        } else if (!e.detail.insert && e.detail.row) {
          this.deleteRow(e.detail.index);
        } else {
          this.deleteColumn(e.detail.index);
        }
      }
      /**
       * Tests for first row of data. Workaround to restamp column headers.
       * @param {number} index the index of the row
       */

    }, {
      key: "_isFirstRow",
      value: function _isFirstRow(index) {
        return index === 0;
      }
      /**
       * Tests for whether or not to disable the sort feature.
       * @param {boolean} hideSort if sort feature be hidden
       * @param {boolean} columnHeader if table has column headers
       */

    }, {
      key: "_isSortDisabled",
      value: function _isSortDisabled(hideSort, columnHeader) {
        return hideSort || !columnHeader;
      }
      /**
       * Sets focus on the cell's textarea if the cell is clicked
       * @param {event} e the event
       */

    }, {
      key: "_onCellClick",
      value: function _onCellClick(e) {
        if (e.model && e.model.root && e.model.root.nodeList[0]) {
          e.model.root.nodeList[0].focus();
        }
      }
      /**
       * Updates data when cell value changes
       * @param {event} e the event
       */

    }, {
      key: "_onCellValueChange",
      value: function _onCellValueChange(e) {
        var temp = this.data.slice();
        temp[e.detail.row][e.detail.column] = e.detail.value;
        this.set("data", []);
        this.set("data", temp);
      }
      /**
       * Updates table properties when setting changes
       * @param {event} e the event
       */

    }, {
      key: "_onTableSettingChange",
      value: function _onTableSettingChange(e) {
        this[e.detail.id] = e.detail.toggled;
      }
      /**
       * Makes sure there is always on cell to work from
       */

    }, {
      key: "_setMinimumData",
      value: function _setMinimumData(data) {
        if (data.length < 1 || data[0].length < 1) {
          this.set("data", [["", "", ""], ["", "", ""], ["", "", ""]]);
        }
      }
      /**
       * Determines if all of the table style choices hidden?
       * @param {boolean} hideBordered is the border toggle hidden
       * @param {boolean} hideCondensed is the condensed toggle hidden
       * @param {boolean} hideStriped is the striped toggle hidden
       * @param {boolean} hideResponsive is the responsive toggle hidden
       * @returns {boolean} whether all of the  display options are hidden
       */

    }, {
      key: "_tableDisplayHidden",
      value: function _tableDisplayHidden(hideBordered, hideCondensed, hideStriped, hideResponsive) {
        return hideBordered && hideCondensed && hideStriped && hideResponsive;
      }
      /**
       * Determines if all of the sorting and filtering choices hidden?
       * @param {boolean} hideSort is the sort toggle hidden
       * @param {boolean} hideFilter is the filter toggle hidden
       * @returns {boolean} whether all of the sorting & filtering options are hidden
       */

    }, {
      key: "_tableSortHidden",
      value: function _tableSortHidden(hideSort, hideFilter) {
        return hideSort && hideFilter;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_52740860d34d11ea880ba1e93364c49c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Is the table in edit-mode? Default is false (display mode).
           */
          editMode: {
            type: Boolean,
            value: false
          },

          /**
           * Hide the borders table styles menu option
           */
          hideBordered: {
            type: Boolean,
            value: false
          },

          /**
           * Hide the condensed table styles menu option
           */
          hideCondensed: {
            type: Boolean,
            value: false
          },

          /**
           * Hide the table display menu group
           */
          hideDisplay: {
            type: Boolean,
            computed: "_tableDisplayHidden(hideBordered,hideCondensed,hideStriped,hideResponsive)"
          },

          /**
           * Hide the filtering option.
           */
          hideFilter: {
            type: Boolean,
            value: false
          },

          /**
           * Hide the table sorting & filtering menu group
           */
          hideSortFilter: {
            type: Boolean,
            computed: "_tableSortHidden(hideSort,hideFilter)"
          },

          /**
           * Hide the sorting option.
           */
          hideSort: {
            type: Boolean,
            value: false
          },

          /**
           * Hide the responsive table styles menu option
           */
          hideResponsive: {
            type: Boolean,
            value: false
          },

          /**
           * Hide the striped table styles menu option
           */
          hideStriped: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return EditableTable;
  }((0, _editableTableBehaviors.displayBehaviors)(_polymerElement.PolymerElement));

  _exports.EditableTable = EditableTable;
  window.customElements.define(EditableTable.tag, EditableTable);
});