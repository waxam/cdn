define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/paper-menu-button/paper-menu-button.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/paper-listbox/paper-listbox.js", "../../../@polymer/paper-item/paper-item.js", "../../../@polymer/paper-tooltip/paper-tooltip.js", "../../../@polymer/iron-icons/iron-icons.js", "./editable-table-behaviors.js"], function (_exports, _polymerElement, _paperMenuButton, _paperButton, _paperListbox, _paperItem, _paperTooltip, _ironIcons, _editableTableBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableEditorRowcol = void 0;

  function _templateObject_da750b60e53211e9a0cfefb808989d41() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          --paper-item-min-height: 24px;\n        }\n        :host #label {\n          margin: 0;\n          padding: 0;\n        }\n        :host paper-menu-button {\n          margin: 0;\n          padding: 0;\n          width: 100%;\n        }\n        :host paper-listbox {\n          padding: 0;\n        }\n        :host paper-button,\n        :host paper-item {\n          margin: 0;\n          text-transform: none;\n          background-color: transparent;\n          text-align: left;\n          font-family: var(--editable-table-secondary-font-family);\n        }\n        :host paper-button {\n          display: block;\n          padding-top: var(--editable-table-row-vertical-padding);\n          padding-bottom: var(--editable-table-row-vertical-padding);\n        }\n        :host([condensed]) paper-button {\n          padding-top: var(--editable-table-row-vertical-padding-condensed);\n          padding-bottom: var(--editable-table-row-vertical-padding-condensed);\n        }\n      </style>\n      <paper-menu-button id=\"menu\">\n        <paper-button slot=\"dropdown-trigger\">\n          <span id=\"label\">[[label]]</span>\n          <iron-icon icon=\"arrow-drop-down\"></iron-icon>\n        </paper-button>\n        <paper-listbox\n          slot=\"dropdown-content\"\n          label=\"[_getType(row)]] [[label]]\"\n        >\n          <paper-item role=\"button\" on-click=\"_onInsertBefore\"\n            >Insert [[_getType(row)]] Before</paper-item\n          >\n          <paper-item role=\"button\" on-click=\"_onInsertAfter\"\n            >Insert [[_getType(row)]] After</paper-item\n          >\n          <paper-item role=\"button\" on-click=\"_onDelete\"\n            >Delete [[_getType(row)]]</paper-item\n          >\n        </paper-listbox>\n      </paper-menu-button>\n      <paper-tooltip for=\"menu\">[[_getType(row)]] [[label]] Menu</paper-tooltip>\n    "]);

    _templateObject_da750b60e53211e9a0cfefb808989d41 = function _templateObject_da750b60e53211e9a0cfefb808989d41() {
      return data;
    };

    return data;
  }

  /**
   * `editable-table-editor-rowcol`
   * `A header label and menu for inserting and deleting a row or a column of the editable-table interface (editable-table.html).`
   *
   * @demo demo/editor.html
   *
   * @polymer
   * @customElement
   * @appliesMixin cellBehaviors
   */
  var EditableTableEditorRowcol =
  /*#__PURE__*/
  function (_cellBehaviors) {
    babelHelpers.inherits(EditableTableEditorRowcol, _cellBehaviors);

    function EditableTableEditorRowcol() {
      babelHelpers.classCallCheck(this, EditableTableEditorRowcol);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EditableTableEditorRowcol).apply(this, arguments));
    }

    babelHelpers.createClass(EditableTableEditorRowcol, [{
      key: "_getType",

      /**
       * Fires Delete Row/Column is clicked
       * @param {boolean} row whether it's row
       * @returns {string} "Row of "Column""
       */
      value: function _getType(row) {
        return row ? "Row" : "Column";
      }
      /**
       * Fires when  selection is made from menu button
       * @event delete-rowcol
       * @param {number} index the index to perform the action
       * @param {boolean} whether the action is to insert
       */

    }, {
      key: "rowColAction",
      value: function rowColAction() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
        var insert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.dispatchEvent(new CustomEvent("rowcol-action", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            insert: insert,
            row: this.row,
            index: index
          }
        }));
      }
      /**
       * Handles when Delete Row/Column is clicked
       * @param {event} e the button event
       */

    }, {
      key: "_onDelete",
      value: function _onDelete(e) {
        this.rowColAction(this.index, false);
      }
      /**
       * Handles when Insert Row/Column is clicked
       * @param {event} e the button event
       */

    }, {
      key: "_onInsertBefore",
      value: function _onInsertBefore(e) {
        this.rowColAction(this.row ? this.index - 1 : this.index);
      }
      /**
       * Handles when Insert Row/Column After is clicked
       * @param {event} e the button event
       */

    }, {
      key: "_onInsertAfter",
      value: function _onInsertAfter(e) {
        this.rowColAction(this.row ? this.index : this.index + 1);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_da750b60e53211e9a0cfefb808989d41());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-editor-rowcol";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Index of the row or column
           */
          index: {
            type: Number,
            value: null
          },

          /**
           * Label of the row or column
           */
          label: {
            type: String,
            computed: "_getLabel(index,row)"
          },

          /**
           * Whether the menu button controls a row
           */
          row: {
            type: Boolean,
            value: false
          }
        };
      }
    }]);
    return EditableTableEditorRowcol;
  }((0, _editableTableBehaviors.cellBehaviors)(_polymerElement.PolymerElement));

  _exports.EditableTableEditorRowcol = EditableTableEditorRowcol;
  window.customElements.define(EditableTableEditorRowcol.tag, EditableTableEditorRowcol);
});