define(["exports", "../../../lit/index.js", "./editable-table-behaviors.js", "../../a11y-menu-button/a11y-menu-button.js", "../../a11y-menu-button/lib/a11y-menu-button-item.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _index, _editableTableBehaviors, _a11yMenuButton, _a11yMenuButtonItem, _simpleIconLite, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableEditorRowcol = void 0;

  var _templateObject_edfba930feb911eb8439e3eec9305af7, _templateObject2_edfba930feb911eb8439e3eec9305af7, _templateObject3_edfba930feb911eb8439e3eec9305af7, _templateObject4_edfba930feb911eb8439e3eec9305af7;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table-editor-rowcol`
   * A header label and menu for inserting and deleting a row or a column of editable-table interface (editable-table.html).
   *
   * @demo ./demo/editor.html
   * @customElement
   * @extends cellBehaviors
   * @extends A11yMenuButton
   */
  var EditableTableEditorRowcol = /*#__PURE__*/function (_cellBehaviors) {
    babelHelpers.inherits(EditableTableEditorRowcol, _cellBehaviors);

    var _super = _createSuper(EditableTableEditorRowcol);

    function EditableTableEditorRowcol() {
      babelHelpers.classCallCheck(this, EditableTableEditorRowcol);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(EditableTableEditorRowcol, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_edfba930feb911eb8439e3eec9305af7 || (_templateObject_edfba930feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n      <a11y-menu-button\n        id=\"menubutton\" \n        position=\"", "\">\n        <span class=\"sr-only\" slot=\"button\">", "</span>\n        <span id=\"label\" slot=\"button\">", " </span>\n        <span class=\"sr-only\" slot=\"button\">Menu</span>\n        <simple-icon-lite icon=\"arrow-drop-down\" slot=\"button\"></simple-icon-lite>\n          ", " \n          ", "\n          ", "\n        </ul>\n      </a11y-menu-button>\n    "])), this.row ? "right" : "bottom", this.type, this.label || "", this._getItem(), this._getItem(false, true), this._getItem(true));
      }
    }, {
      key: "controls",
      get:
      /**
       *
       * Gets first cell that menu controls
       * @readonly
       * @memberof EditableTableEditorRowcol
       */
      function get() {
        return this.row ? "cell-0-".concat(this.index) : "cell-".concat(this.index, "-0");
      }
      /**
       *
       * Gets row or column label based on type
       * @readonly
       * @memberof EditableTableEditorRowcol
       */

    }, {
      key: "label",
      get: function get() {
        return this.row ? this._getLabel(this.index, true) : this._getLabel(this.index, false);
      }
      /**
       *
       * get cell label
       * @readonly
       * @memberof EditableTableEditorRowcol
       */

    }, {
      key: "labelInfo",
      get: function get() {
        return (0, _index.html)(_templateObject2_edfba930feb911eb8439e3eec9305af7 || (_templateObject2_edfba930feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["<span class=\"sr-only\">", "</span>"])), this.label);
      }
      /**
       *
       * Gets row or column type
       * @readonly
       * @memberof EditableTableEditorRowcol
       */

    }, {
      key: "type",
      get: function get() {
        return this.row ? "Row" : "Column";
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this = this;

        if (babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol.prototype), "updated", this)) babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol.prototype), "updated", this).call(this, changedProperties);
        changedProperties.forEach(function (oldValue, propName) {
          if (propName === "expanded") _this.menuToggle();
        });
      }
      /**
       * Fires when  selection is made from menu button
       * @event delete-rowcol
       * @param {number} index index to perform action
       * @param {boolean} whether action is to insert
       */

    }, {
      key: "rowColAction",
      value: function rowColAction() {
        var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.index;
        var insert = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        this.dispatchEvent(new CustomEvent("rowcol-action", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            insert: insert,
            row: this.row,
            index: index
          }
        }));
      }
    }, {
      key: "_getItem",
      value: function _getItem() {
        var deleteItem = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var after = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
        return (0, _index.html)(_templateObject3_edfba930feb911eb8439e3eec9305af7 || (_templateObject3_edfba930feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["<a11y-menu-button-item\n      @click=\"", "\"\n    >\n      ", "\n      ", "", "\n      ", "\n    </a11y-menu-button-item>"])), deleteItem ? this._onDelete : after ? this._onInsertAfter : this._onInsertBefore, deleteItem ? "Delete" : "Insert", this.type, deleteItem ? " " : after ? " After " : " Before ", this.labelInfo);
      }
    }, {
      key: "menuToggle",
      value: function menuToggle(e) {
        this.dispatchEvent(new CustomEvent("rowcol-menu-toggle", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Handles when Delete Row/Column is clicked
       * @param {event} e button event
       */

    }, {
      key: "_onDelete",
      value: function _onDelete(e) {
        this.rowColAction(this.index, false);
      }
      /**
       * Handles when Insert Row/Column is clicked
       * @param {event} e button event
       */

    }, {
      key: "_onInsertBefore",
      value: function _onInsertBefore(e) {
        this.rowColAction(this.row ? this.index - 1 : this.index);
      }
      /**
       * Handles when Insert Row/Column After is clicked
       * @param {event} e button event
       */

    }, {
      key: "_onInsertAfter",
      value: function _onInsertAfter(e) {
        this.rowColAction(this.row ? this.index : this.index + 1);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol), "styles", this) || []), babelHelpers.toConsumableArray(_editableTableBehaviors.editableTableCellStyles), [(0, _index.css)(_templateObject4_edfba930feb911eb8439e3eec9305af7 || (_templateObject4_edfba930feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: block;\n          height: 100%;\n          width: 100%;\n          --paper-item-min-height: 24px;\n          --a11y-menu-button-border: none;\n          --a11y-menu-button-list-border: 1px solid\n            var(--editable-table-border-color, #999);\n          --a11y-menu-button-vertical-padding: var(\n            --editable-table-cell-vertical-padding,\n            10px\n          );\n          --a11y-menu-button-horizontal-padding: var(\n            --editable-table-cell-horizontal-padding,\n            6px\n          );\n          --a11y-menu-button-item-focus-bg-color: var(\n            --editable-table-heading-bg-color,\n            #e8e8e8\n          );\n          --a11y-menu-button-list-bg-color: var(\n            --editable-table-bg-color,\n            #fff\n          );\n        }\n        a11y-menu-button {\n          display: block;\n          height: 100%;\n          width: 100%;\n        }\n        a11y-menu-button::part(button) {\n          font-family: var(\n            --editable-table-secondary-font-family,\n            \"Roboto\",\n            \"Noto\",\n            sans-serif\n          );\n          height: 100%;\n          width: 100%;\n        }\n        a11y-menu-button::part(menu-outer) {\n          min-width: 150px;\n        }\n        a11y-menu-button-item::part(button) {\n          font-family: var(\n            --editable-table-secondary-font-family,\n            \"Roboto\",\n            \"Noto\",\n            sans-serif\n          );\n          color: var(--editable-table-color, #222);\n          font-size: var(--editable-table-secondary-font-size, 12px);\n          line-height: 150%;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-editor-rowcol";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread(_objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorRowcol), "properties", this)), {}, {
          /**
           * Index of row or column
           */
          index: {
            type: Number
          },

          /**
           * Whether menu button controls a row
           */
          row: {
            type: Boolean
          }
        });
      }
    }]);
    return EditableTableEditorRowcol;
  }((0, _editableTableBehaviors.cellBehaviors)(_a11yMenuButton.A11yMenuButton));

  _exports.EditableTableEditorRowcol = EditableTableEditorRowcol;
  window.customElements.define(EditableTableEditorRowcol.tag, EditableTableEditorRowcol);
});