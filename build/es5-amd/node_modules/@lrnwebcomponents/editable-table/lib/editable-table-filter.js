define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/paper-tooltip/paper-tooltip.js", "../../../@polymer/iron-icons/iron-icons.js", "./editable-table-iconset.js"], function (_exports, _polymerElement, _paperButton, _paperTooltip, _ironIcons, _editableTableIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableFilter = void 0;

  function _templateObject_ea308310dedc11e9bf5a076df0f16721() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\">\n        :host paper-button {\n          padding: 0;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n          font-family: var(--editable-table-font-family);\n        }\n        :host paper-button > div {\n          flex-grow: 1;\n        }\n        :host iron-icon {\n          min-width: 24px;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        :host #filter-off {\n          opacity: 0.25;\n        }\n        :host(:not([filtered])) .filtered,\n        :host(:not([filtered]):not(:focus):not(:hover)) #filter,\n        :host(:not([filtered]):focus) #filter-off,\n        :host(:not([filtered]):hover) #filter-off,\n        :host([filtered]:not(:focus):not(:hover)) #filter-off,\n        :host([filtered]:focus) #filter,\n        :host([filtered]:hover) #filter {\n          display: none;\n        }\n      </style>\n      <paper-button id=\"button\" class=\"container\" on-click=\"_onFilterClicked\">\n        <span>[[text]]</span>\n        <span class=\"sr-only\" hidden$=\"[[!filtered]]\"> (filtered)</span>\n        <span class=\"sr-only\"> Toggle filter.</span>\n        <iron-icon id=\"filter\" icon=\"editable-table:filter\"></iron-icon>\n        <iron-icon id=\"filter-off\" icon=\"editable-table:filter-off\"></iron-icon>\n      </paper-button>\n      <paper-tooltip for=\"button\">Toggle filter for \"[[text]]\"</paper-tooltip>\n    "], ["\n      <style is=\"custom-style\">\n        :host paper-button {\n          padding: 0;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n          font-family: var(--editable-table-font-family);\n        }\n        :host paper-button > div {\n          flex-grow: 1;\n        }\n        :host iron-icon {\n          min-width: 24px;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        :host #filter-off {\n          opacity: 0.25;\n        }\n        :host(:not([filtered])) .filtered,\n        :host(:not([filtered]):not(:focus):not(:hover)) #filter,\n        :host(:not([filtered]):focus) #filter-off,\n        :host(:not([filtered]):hover) #filter-off,\n        :host([filtered]:not(:focus):not(:hover)) #filter-off,\n        :host([filtered]:focus) #filter,\n        :host([filtered]:hover) #filter {\n          display: none;\n        }\n      </style>\n      <paper-button id=\"button\" class=\"container\" on-click=\"_onFilterClicked\">\n        <span>[[text]]</span>\n        <span class=\"sr-only\" hidden\\$=\"[[!filtered]]\"> (filtered)</span>\n        <span class=\"sr-only\"> Toggle filter.</span>\n        <iron-icon id=\"filter\" icon=\"editable-table:filter\"></iron-icon>\n        <iron-icon id=\"filter-off\" icon=\"editable-table:filter-off\"></iron-icon>\n      </paper-button>\n      <paper-tooltip for=\"button\">Toggle filter for \"[[text]]\"</paper-tooltip>\n    "]);

    _templateObject_ea308310dedc11e9bf5a076df0f16721 = function _templateObject_ea308310dedc11e9bf5a076df0f16721() {
      return data;
    };

    return data;
  }

  /**
   * `editable-table-editor-filter`
   * `Displays a cell in the editable-table-display mode (editable-table-display.html) as a filter button.`
   *
   * @demo demo/display.html
   *
   * @polymer
   * @customElement
   */
  var EditableTableFilter =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(EditableTableFilter, _PolymerElement);

    function EditableTableFilter() {
      babelHelpers.classCallCheck(this, EditableTableFilter);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EditableTableFilter).apply(this, arguments));
    }

    babelHelpers.createClass(EditableTableFilter, [{
      key: "_getPressed",

      /**
       * Listens for button click
       */
      value: function _getPressed(filtered) {
        return filtered ? "true" : "false";
      }
      /**
       * Fires when filter button is clicked
       * @event toggle-filter
       */

    }, {
      key: "_onFilterClicked",
      value: function _onFilterClicked() {
        this.dispatchEvent(new CustomEvent("toggle-filter", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_ea308310dedc11e9bf5a076df0f16721());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-filter";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Index of the column
           */
          columnIndex: {
            type: Number,
            value: null
          },

          /**
           * Whether the column is filtered
           */
          filtered: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Column header text
           */
          text: {
            type: String,
            value: ""
          }
        };
      }
    }]);
    return EditableTableFilter;
  }(_polymerElement.PolymerElement);

  _exports.EditableTableFilter = EditableTableFilter;
  window.customElements.define(EditableTableFilter.tag, EditableTableFilter);
});