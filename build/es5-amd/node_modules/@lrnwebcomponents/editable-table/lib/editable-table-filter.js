define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","../../../@polymer/paper-button/paper-button.js","../../../@polymer/paper-tooltip/paper-tooltip.js","../../../@polymer/iron-icons/iron-icons.js","./editable-table-iconset.js"],function(_exports,_polymerElement,_renderStatus,_paperButton,_paperTooltip,_ironIcons,_editableTableIconset){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.EditableTableFilter=void 0;function _templateObject_af88b13083ae11e9bca9910ed3db32b8(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\">\n        :host paper-button {\n          padding: 0;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n        }\n        :host paper-button > div {\n          flex-grow: 1;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        :host #filter-off {\n          opacity: 0.25;\n        }\n        :host(:not([filtered])) .filtered,\n        :host(:not([filtered]):not(:focus):not(:hover)) #filter,\n        :host(:not([filtered]):focus) #filter-off,\n        :host(:not([filtered]):hover) #filter-off,\n        :host([filtered]:not(:focus):not(:hover)) #filter-off,\n        :host([filtered]:focus) #filter,\n        :host([filtered]:hover) #filter {\n          display: none;\n        }\n      </style>\n      <paper-button id=\"button\" class=\"container\">\n        <span>[[text]]</span>\n        <span class=\"sr-only\" hidden$=\"[[!filtered]]\"> (filtered)</span>\n        <span class=\"sr-only\"> Toggle filter.</span>\n        <iron-icon id=\"filter\" icon=\"editable-table:filter\"></iron-icon>\n        <iron-icon id=\"filter-off\" icon=\"editable-table:filter-off\"></iron-icon>\n      </paper-button>\n      <paper-tooltip for=\"button\">Toggle filter for \"[[text]]\"</paper-tooltip>\n    "],["\n      <style is=\"custom-style\">\n        :host paper-button {\n          padding: 0;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n        }\n        :host paper-button > div {\n          flex-grow: 1;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        :host #filter-off {\n          opacity: 0.25;\n        }\n        :host(:not([filtered])) .filtered,\n        :host(:not([filtered]):not(:focus):not(:hover)) #filter,\n        :host(:not([filtered]):focus) #filter-off,\n        :host(:not([filtered]):hover) #filter-off,\n        :host([filtered]:not(:focus):not(:hover)) #filter-off,\n        :host([filtered]:focus) #filter,\n        :host([filtered]:hover) #filter {\n          display: none;\n        }\n      </style>\n      <paper-button id=\"button\" class=\"container\">\n        <span>[[text]]</span>\n        <span class=\"sr-only\" hidden\\$=\"[[!filtered]]\"> (filtered)</span>\n        <span class=\"sr-only\"> Toggle filter.</span>\n        <iron-icon id=\"filter\" icon=\"editable-table:filter\"></iron-icon>\n        <iron-icon id=\"filter-off\" icon=\"editable-table:filter-off\"></iron-icon>\n      </paper-button>\n      <paper-tooltip for=\"button\">Toggle filter for \"[[text]]\"</paper-tooltip>\n    "]);_templateObject_af88b13083ae11e9bca9910ed3db32b8=function _templateObject_af88b13083ae11e9bca9910ed3db32b8(){return data};return data}/**
`editable-table-filter`
Displays a cell in the editable-table-display mode 
(editable-table-display.html) as a filter button.

* @demo demo/index.html

@microcopy - the mental model for this element

<editable-table-filter 
  column-number="1"       //The index of the cell's column
  text="">                //The text of the cell, which will become the filter value when button is toggled.
</editable-table-filter>

*/var EditableTableFilter=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(EditableTableFilter,_PolymerElement);function EditableTableFilter(){babelHelpers.classCallCheck(this,EditableTableFilter);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(EditableTableFilter).apply(this,arguments))}babelHelpers.createClass(EditableTableFilter,[{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableFilter.prototype),"connectedCallback",this).call(this);(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("click",this._onFilterTapped.bind(this))})}},{key:"disconnectedCallback",value:function disconnectedCallback(){this.removeEventListener("click",this._onFilterTapped.bind(this));babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableFilter.prototype),"disconnectedCallback",this).call(this)}},{key:"_getPressed",/**
   * listen for button tap
   */value:function _getPressed(filtered){return filtered?"true":"false"}/**
   * listen for button tap
   */},{key:"_onFilterTapped",value:function _onFilterTapped(){this.dispatchEvent(new CustomEvent("toggle-filter",{bubbles:!0,cancelable:!0,composed:!0,detail:this}))}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_af88b13083ae11e9bca9910ed3db32b8())}},{key:"tag",get:function get(){return"editable-table-filter"}},{key:"properties",get:function get(){return{/**
       * the column for the filter
       */columnNumber:{type:Number,value:null},/**
       * is the data filtered
       */filtered:{type:Boolean,value:!1,reflectToAttribute:!0},/**
       * the column header text
       */text:{type:String,value:""}}}}]);return EditableTableFilter}(_polymerElement.PolymerElement);_exports.EditableTableFilter=EditableTableFilter;window.customElements.define(EditableTableFilter.tag,EditableTableFilter)});