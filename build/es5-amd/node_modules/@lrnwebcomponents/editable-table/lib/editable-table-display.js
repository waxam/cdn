define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/polymer/lib/elements/dom-repeat.js", "../../../@polymer/polymer/lib/elements/dom-if.js", "../../simple-picker/simple-picker.js", "../../responsive-utility/lib/responsive-utility-behaviors.js", "./editable-table-behaviors.js", "./editable-table-sort.js", "./editable-table-filter.js", "./editable-table-styles.js"], function (_exports, _polymerElement, _renderStatus, _domRepeat, _domIf, _simplePicker, _responsiveUtilityBehaviors, _editableTableBehaviors, _editableTableSort, _editableTableFilter, _editableTableStyles) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableDisplay = void 0;

  function _templateObject_3da788d0e14a11e9bce923988a998e3c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style include=\"editable-table-styles\">\n        :host {\n          width: 100%;\n          max-width: 100%;\n        }\n        :host([bordered]) .th,\n        :host([bordered]) .td {\n          border: 1px solid var(--editable-table-border-color);\n        }\n        :host([striped]) .tbody-tr:nth-child(2n) .th,\n        :host([striped]) .tbody-tr:nth-child(2n) .td {\n          @apply --editable-table-style-stripe;\n        }\n        :host([column-header]) .thead-tr .th {\n          @apply --editable-table-style-column-header;\n        }\n        :host([row-header]) .tbody-tr .th {\n          @apply --editable-table-style-row-header;\n        }\n        :host([footer]) .tfoot-tr .th,\n        :host([footer]) .tfoot-tr .td {\n          @apply --editable-table-style-footer;\n        }\n        :host #column {\n          width: calc(var(--simple-picker-option-size) + 6px);\n          overflow: visible;\n          display: none;\n          margin: 0 0 1px 10px;\n          --simple-picker-border-color: var(--editable-table-border-color);\n          --simple-picker-sample-option: {\n            position: absolute;\n            left: -9999px;\n            overflow: hidden;\n            width: 0;\n            height: 0;\n          }\n          --simple-picker-sample: {\n            width: var(--simple-picker-option-size);\n            overflow: visible;\n            border-width: 1px;\n          }\n          --simple-picker-collapse: {\n            right: calc(100% - var(--simple-picker-option-size) - 4px);\n          }\n          --simple-picker-sample-focus: {\n            border-width: 1px;\n          }\n        }\n        @media screen {\n          :host {\n            overflow-x: scroll;\n          }\n          :host([responsive][responsive-size=\"xs\"]) caption > div {\n            display: flex;\n            align-items: flex-end;\n            justify-content: space-between;\n          }\n          :host([responsive][responsive-size=\"xs\"]) #column {\n            display: inline-flex;\n          }\n          :host([responsive][responsive-size=\"xs\"]) .th[xs-hidden],\n          :host([responsive][responsive-size=\"xs\"]) .td[xs-hidden] {\n            display: none;\n          }\n        }\n      </style>\n      <table id=\"table\" class=\"table\">\n        <caption>\n          <div>\n            [[caption]]\n            <slot></slot>\n            <simple-picker\n              id=\"column\"\n              aria-labelledby$=\"[[tables.0.label]]\"\n              value$=\"{{selected}}\"\n              on-change=\"_selectedChanged\"\n              options=\"[[__theadData]]\"\n            >\n            </simple-picker>\n          </div>\n        </caption>\n        <thead hidden=\"[[!columnHeader]]\">\n          <tr class=\"tr thead-tr\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[thead.0]]\"\n              as=\"th\"\n              index-as=\"index\"\n              restamp\n            >\n              <th\n                class=\"th th-or-td\"\n                cell-index$=\"[[index]]\"\n                numeric$=\"[[_isNumericColumn(index)]]\"\n                scope=\"col\"\n                xs-hidden$=\"[[_isColHidden(index,1)]]\"\n              >\n                <template is=\"dom-if\" if=\"[[sort]]\" restamp=\"\">\n                  <editable-table-sort\n                    sort-column$=\"[[sortColumn]]\"\n                    column-index=\"[[index]]\"\n                    text$=\"[[th]]\"\n                  ></editable-table-sort>\n                </template>\n                <template is=\"dom-if\" if=\"[[!sort]]\" restamp=\"\"\n                  >[[th]]</template\n                >\n              </th>\n            </template>\n          </tr>\n        </thead>\n        <tbody id=\"tbody\" class=\"tbody\">\n          <template\n            is=\"dom-repeat\"\n            items=\"[[tbody]]\"\n            as=\"tr\"\n            filter=\"{{filterRows(filterColumn,filterText)}}\"\n            restamp=\"\"\n          >\n            <tr class=\"tr tbody-tr\">\n              <template\n                is=\"dom-repeat\"\n                items=\"[[tr]]\"\n                as=\"cell\"\n                index-as=\"index\"\n                restamp=\"\"\n              >\n                <template\n                  is=\"dom-if\"\n                  if=\"[[_isRowHeader(rowHeader,index)]]\"\n                  restamp=\"\"\n                >\n                  <th\n                    class=\"th th-or-td\"\n                    cell-index$=\"[[index]]\"\n                    numeric$=\"[[_isNumericColumn(index)]]\"\n                    xs-hidden$=\"[[_isColHidden(index,1)]]\"\n                    scope=\"row\"\n                  >\n                    [[cell]]\n                  </th>\n                </template>\n                <template\n                  is=\"dom-if\"\n                  if=\"[[!_isRowHeader(rowHeader,index)]]\"\n                  restamp=\"\"\n                >\n                  <td\n                    class=\"td cell th-or-td\"\n                    cell-index$=\"[[index]]\"\n                    numeric$=\"[[_isNumericColumn(index)]]\"\n                    negative$=\"[[_isNegative(cell)]]\"\n                    xs-hidden$=\"[[_isColHidden(index,1)]]\"\n                  >\n                    <template is=\"dom-if\" if=\"[[filter]]\" restamp=\"\">\n                      <editable-table-filter\n                        column-index=\"[[index]]\"\n                        text$=\"[[cell]]\"\n                        filtered$=\"[[_isFiltered(index,filterColumn,filtered)]]\"\n                      ></editable-table-filter>\n                    </template>\n                    <template is=\"dom-if\" if=\"[[!filter]]\" restamp=\"\"\n                      ><span class=\"cell\">[[cell]]</span></template\n                    >\n                  </td>\n                </template>\n              </template>\n            </tr>\n          </template>\n        </tbody>\n        <template is=\"dom-if\" if=\"[[footer]]\">\n          <tfoot class=\"tfoot\">\n            <tr class=\"tr tfoot-tr\">\n              <template\n                is=\"dom-repeat\"\n                items=\"[[__tfoot.0]]\"\n                as=\"cell\"\n                index-as=\"index\"\n              >\n                <template is=\"dom-if\" if=\"[[_isRowHeader(rowHeader,index)]]\">\n                  <th\n                    class=\"th th-or-td\"\n                    cell-index$=\"[[index]]\"\n                    numeric$=\"[[_isNumericColumn(index)]]\"\n                    xs-hidden$=\"[[_isColHidden(index,1)]]\"\n                    scope=\"row\"\n                  >\n                    [[cell]]\n                  </th>\n                </template>\n                <template is=\"dom-if\" if=\"[[!_isRowHeader(rowHeader,index)]]\">\n                  <td\n                    class=\"td cell th-or-td\"\n                    cell-index$=\"[[index]]\"\n                    numeric$=\"[[_isNumericColumn(index)]]\"\n                    negative$=\"[[_isNegative(cell)]]\"\n                    xs-hidden$=\"[[_isColHidden(index,1)]]\"\n                  >\n                    [[cell]]\n                  </td>\n                </template>\n              </template>\n            </tr>\n          </tfoot>\n        </template>\n      </table>\n    "]);

    _templateObject_3da788d0e14a11e9bce923988a998e3c = function _templateObject_3da788d0e14a11e9bce923988a998e3c() {
      return data;
    };

    return data;
  }

  /**
   * `editable-table-display`
   * ` An editor interface for editable-table`
   * @demo demo/editor.html
   *
   * @polymer
   * @customElement
   * @appliesMixin displayBehaviors
   * @appliesMixin ResponsiveUtilityBehaviors
   */
  var EditableTableDisplay =
  /*#__PURE__*/
  function (_displayBehaviors) {
    babelHelpers.inherits(EditableTableDisplay, _displayBehaviors);

    function EditableTableDisplay() {
      babelHelpers.classCallCheck(this, EditableTableDisplay);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EditableTableDisplay).apply(this, arguments));
    }

    babelHelpers.createClass(EditableTableDisplay, [{
      key: "_getTbody",

      /**
       * Gets the rows in `<tbody>`
       * @param {array} data the table data as an array
       * @param {boolean} columnHeader does the table have a column header
       * @param {boolean} footer does the table have a footer
       * @returns {array} the `<tbody>` data
       */
      value: function _getTbody(data, columnHeader, footer) {
        if (data !== undefined && data !== null && data.length > 0) {
          var ch = columnHeader ? 1 : 0,
              tbody;

          if (footer) {
            tbody = data.slice(ch, data.length - 1);
            this.__tfoot = data.slice(data.length - 1);
          } else {
            tbody = data.slice(ch, data.length);
            this.__tfoot = [];
          }

          return tbody;
        }

        return [];
      }
      /**
       * Gets the columns in `<thead>`
       * @param {array} data the table data as an array
       * @param {boolean} columnHeader does the table have a column header
       * @returns {array} the `<thead>`data
       */

    }, {
      key: "_getThead",
      value: function _getThead(data, columnHeader) {
        this.set("__theadData", []);

        if (data !== undefined && data !== null && data.length > 0) {
          for (var i = 1; i < data[0].length; i++) {
            this.push("__theadData", [{
              alt: data[0][i],
              value: i
            }]);
          }

          if (columnHeader) return data.slice(0, 1);
        }

        return [];
      }
      /**
       * Determines whether or not a cell is hidden in responsive mode
       * @param {number} index the current column number
       * @param {number} selected the selected column number
       * @returns {boolean} whether the column is hidden (i.e. not the selected column)
       */

    }, {
      key: "_isColHidden",
      value: function _isColHidden(index, selected) {
        return parseInt(index) !== 0 && parseInt(index) !== parseInt(selected);
      }
      /**
       * Sets a column's cells to filtered when in filtered mode so that filter can toggle
       * @param {number} index the current column number
       * @param {number} selected the filtered column number
       * @param {boolean} filtered is the table in filtered mode
       * @returns {boolean} whether the column is filtered
       */

    }, {
      key: "_isFiltered",
      value: function _isFiltered(column, filterColumn, filtered) {
        return filterColumn !== null && filterColumn === column && filtered;
      }
      /**
       * Sets a cell's negative number style
       * @param {string} cell the cell contents
       * @returns {boolean} whether cell contents are numeric and negative
       */

    }, {
      key: "_isNegative",
      value: function _isNegative(cell) {
        return this._isNumeric(cell) && cell.trim().indexOf("-") === 0;
      }
      /**
       * Sets a cell's numeric style
       * @param {string} cell the cell contents
       * @returns {boolean} whether cell contents are numeric
       */

    }, {
      key: "_isNumeric",
      value: function _isNumeric(cell) {
        return cell !== null && !isNaN(cell.trim().replace(/\$/g, ""));
      }
      /**
       * Determines if an entire body column dontains numeric data
       * @param {number} index the column index
       * @returns {boolean} if columns contents are numeric
       */

    }, {
      key: "_isNumericColumn",
      value: function _isNumericColumn(index) {
        var numeric = true;

        for (var i = 0; i < this.tbody.length; i++) {
          if (!this._isNumeric(this.tbody[i][index])) numeric = false;
        }

        return numeric;
      }
      /**
       * Calculates whether the cell is a `<th>` or `<td>`
       * @param {boolean} rowHeader if the cell is a rowheader
       * @param {number} index the current column number
       * @returns {boolean} whether the cell is a `<th>` or `<td>`
       */

    }, {
      key: "_isRowHeader",
      value: function _isRowHeader(rowHeader, index) {
        return index === 0 && rowHeader;
      }
      /**
       * Handles table change
       */

    }, {
      key: "_tableChanged",
      value: function _tableChanged() {
        this._updateCols();
      }
      /**
       * Handles column  selector change
       */

    }, {
      key: "_selectedChanged",
      value: function _selectedChanged() {
        this._updateCols();
      }
      /**
       * Handles sort button click
       * @param {event} e the event
       */

    }, {
      key: "_changeSortMode",
      value: function _changeSortMode(e) {
        if (this.sortColumn === e.detail.columnIndex && this.sortMode === "asc") {
          this.sortMode = "desc";
        } else if (this.sortColumn === e.detail.columnIndex && this.sortMode === "desc") {
          this.sortMode = "none";
        } else {
          this.sortMode = "asc";
          this.sortColumn = e.detail.columnIndex;
        }

        e.detail.setSortMode(this.sortMode);
        this.sortData(this.sortMode, e.detail.columnIndex);
      }
      /**
       * update the responsive columns menu
       */

    }, {
      key: "_updateCols",
      value: function _updateCols() {
        var selected = this.$.column.value,
            cols = this.$.table.querySelectorAll("th,td");

        if (cols.length > 0) {
          for (var i = 0; i < cols.length; i++) {
            var col = cols[i];

            if (this._isColHidden(col.cellIndex, selected)) {
              col.setAttribute("xs-hidden", true);
            } else {
              col.removeAttribute("xs-hidden");
            }
          }
        }
      }
      /**
       * Handle filter based on collumn and text of cell that is clicked
       * @param {number} filterColumn the number of the column to be filtered
       * @param {string} filterText the text that will be filtered
       * @returns
       */

    }, {
      key: "filterRows",
      value: function filterRows(filterColumn, filterText) {
        if (filterText !== undefined && filterText !== null) {
          return function (tr) {
            return tr[filterColumn].toLowerCase().trim() === filterText.toLowerCase().trim();
          };
        } else {
          return null;
        }
      }
      /**
       * initialize the responsive columns menu
       */

    }, {
      key: "sortData",
      value: function sortData(type, column) {
        if (type !== "none" && type !== false) {
          var temp = this.tbody.slice();

          for (var i = 0; i < temp.length; i++) {
            temp[i].unshift(temp[i][column]);
          }

          if (type === "asc") {
            temp.sort();
          } else {
            temp.reverse();
          }

          for (var _i = 0; _i < temp.length; _i++) {
            this.set("tbody." + _i, []);
            this.set("tbody." + _i, temp[_i].slice(1));
          }
        } else {
          var _temp = this.tbody.slice();

          for (var _i2 = 0; _i2 < _temp.length; _i2++) {
            this.set("data." + (_i2 + 1), []);
            this.set("data." + (_i2 + 1), _temp[_i2].slice());
          }
        }
      }
      /**
       * Handle filter button click
       */

    }, {
      key: "toggleFilter",
      value: function toggleFilter(e) {
        if (e === undefined || this.filterColumn == e.detail.columnIndex && this.filtered) {
          this.filtered = false;
          this.filterText = null;
          this.filterColumn = null;
        } else {
          this.filterText = e.detail.text;
          this.filterColumn = e.detail.columnIndex;
          this.filtered = true;
        }
      }
    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableDisplay.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("change-sort-mode", this._changeSortMode.bind(this));
          this.addEventListener("toggle-filter", this.toggleFilter.bind(this));
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("change-sort-mode", this._changeSortMode.bind(this));
        this.removeEventListener("toggle-filter", this.toggleFilter.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableDisplay.prototype), "disconnectedCallback", this).call(this);
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_3da788d0e14a11e9bce923988a998e3c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-display";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Index of the current filter column
           */
          filterColumn: {
            type: Number,
            value: null
          },

          /**
           * Whether table is filtered
           */
          filtered: {
            type: Boolean,
            value: false
          },

          /**
           * Text for Filtering
           */
          filterText: {
            type: String,
            value: null
          },

          /**
           * Selected column to display when in responsive mode
           */
          selected: {
            type: Number,
            value: 1
          },

          /**
           * Sort mode: ascending, descending or none
           */
          sortMode: {
            type: String,
            value: "none"
          },

          /**
           * Index of the current sort column
           */
          sortColumn: {
            type: Number,
            value: -1
          },

          /**
           * Columns in <thead>
           */
          thead: {
            type: Array,
            computed: "_getThead(data,columnHeader)"
          },

          /**
           * Rows in <tbody>
           */
          tbody: {
            type: Array,
            computed: "_getTbody(data,columnHeader,footer)"
          }
        };
      }
    }]);
    return EditableTableDisplay;
  }((0, _editableTableBehaviors.displayBehaviors)((0, _responsiveUtilityBehaviors.ResponsiveUtilityBehaviors)(_polymerElement.PolymerElement)));

  _exports.EditableTableDisplay = EditableTableDisplay;
  window.customElements.define(EditableTableDisplay.tag, EditableTableDisplay);
});