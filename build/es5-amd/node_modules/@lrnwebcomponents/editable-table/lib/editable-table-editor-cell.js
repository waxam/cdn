define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/iron-autogrow-textarea/iron-autogrow-textarea.js", "../../../@polymer/iron-a11y-keys/iron-a11y-keys.js", "./editable-table-behaviors.js"], function (_exports, _polymerElement, _renderStatus, _ironAutogrowTextarea, _ironA11yKeys, _editableTableBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableEditorCell = void 0;

  function _templateObject_73d3f680b54611e9b6ba27231b6f684a() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\">\n        :host {\n          padding: 0;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n        }\n        :host iron-autogrow-textarea {\n          width: 100%;\n          padding: 0;\n          border: none;\n          font-weight: unset;\n          resize: none;\n          -webkit-appearance: none;\n          -mozilla-appearance: none;\n          flex-grow: 1;\n          --iron-autogrow-textarea: {\n            padding: 0;\n            font-weight: unset;\n            border: none;\n            resize: none;\n            flex-direction: column;\n            -webkit-flex-direction: column;\n            -webkit-appearance: none;\n            -mozilla-appearance: none;\n          }\n        }\n        :host iron-autogrow-textarea > * {\n          padding: 0;\n          font-weight: unset;\n          border: none;\n          resize: none;\n          flex-direction: column;\n          -webkit-flex-direction: column;\n          -webkit-appearance: none;\n          -mozilla-appearance: none;\n        }\n      </style>\n      <iron-autogrow-textarea\n        autofocus=\"\"\n        id=\"cell\"\n        label$=\"[[label]]\"\n        value$=\"{{value}}\"\n      >\n      </iron-autogrow-textarea>\n      <div id=\"icons\"><slot></slot></div>\n      <iron-a11y-keys\n        id=\"down\"\n        keys=\"down\"\n        target$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellBelow\"\n      >\n      </iron-a11y-keys>\n      <iron-a11y-keys\n        id=\"up\"\n        keys=\"up\"\n        target$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellAbove\"\n      >\n      </iron-a11y-keys>\n      <iron-a11y-keys\n        id=\"left\"\n        keys=\"left\"\n        target$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellLeft\"\n      >\n      </iron-a11y-keys>\n      <iron-a11y-keys\n        id=\"right\"\n        keys=\"right\"\n        target$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellRight\"\n      >\n      </iron-a11y-keys>\n    "], ["\n      <style is=\"custom-style\">\n        :host {\n          padding: 0;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n        }\n        :host iron-autogrow-textarea {\n          width: 100%;\n          padding: 0;\n          border: none;\n          font-weight: unset;\n          resize: none;\n          -webkit-appearance: none;\n          -mozilla-appearance: none;\n          flex-grow: 1;\n          --iron-autogrow-textarea: {\n            padding: 0;\n            font-weight: unset;\n            border: none;\n            resize: none;\n            flex-direction: column;\n            -webkit-flex-direction: column;\n            -webkit-appearance: none;\n            -mozilla-appearance: none;\n          }\n        }\n        :host iron-autogrow-textarea > * {\n          padding: 0;\n          font-weight: unset;\n          border: none;\n          resize: none;\n          flex-direction: column;\n          -webkit-flex-direction: column;\n          -webkit-appearance: none;\n          -mozilla-appearance: none;\n        }\n      </style>\n      <iron-autogrow-textarea\n        autofocus=\"\"\n        id=\"cell\"\n        label\\$=\"[[label]]\"\n        value\\$=\"{{value}}\"\n      >\n      </iron-autogrow-textarea>\n      <div id=\"icons\"><slot></slot></div>\n      <iron-a11y-keys\n        id=\"down\"\n        keys=\"down\"\n        target\\$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellBelow\"\n      >\n      </iron-a11y-keys>\n      <iron-a11y-keys\n        id=\"up\"\n        keys=\"up\"\n        target\\$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellAbove\"\n      >\n      </iron-a11y-keys>\n      <iron-a11y-keys\n        id=\"left\"\n        keys=\"left\"\n        target\\$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellLeft\"\n      >\n      </iron-a11y-keys>\n      <iron-a11y-keys\n        id=\"right\"\n        keys=\"right\"\n        target\\$=\"[[cell]]\"\n        on-keys-pressed=\"_onCellRight\"\n      >\n      </iron-a11y-keys>\n    "]);

    _templateObject_73d3f680b54611e9b6ba27231b6f684a = function _templateObject_73d3f680b54611e9b6ba27231b6f684a() {
      return data;
    };

    return data;
  }

  /**
  `editable-table-editor-cell`
  
  An editable cell in the editable-table-editor 
  (editable-table-editor.html) interface.
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
  
  <editable-table-editor-cell 
    row="3"                     //The index of the cell's row
    column="2"                  //The index of the cell's column
    value="">                   //The editable contents of the cell
    <iron-icon class="sortable-icon"icon="editable-table:sortable" aria-hidden="true"></iron-icon>
    <iron-icon class="filter-icon"icon="editable-table:filter-off"></iron-icon>
  </editable-table-editor-cell>
  
  */
  var EditableTableEditorCell =
  /*#__PURE__*/
  function (_cellBehaviors) {
    babelHelpers.inherits(EditableTableEditorCell, _cellBehaviors);

    function EditableTableEditorCell() {
      babelHelpers.classCallCheck(this, EditableTableEditorCell);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EditableTableEditorCell).apply(this, arguments));
    }

    babelHelpers.createClass(EditableTableEditorCell, [{
      key: "ready",

      /**
       * set iron-a11y-keys target to this
       */
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorCell.prototype), "ready", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("bind-value-changed", this._onValueChanged.bind(this));
        });
        this.cell = this.$.cell;
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("bind-value-changed", this._onValueChanged.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorCell.prototype), "disconnectedCallback", this).call(this);
      }
      /**
       * focus the on text area
       */

    }, {
      key: "focus",
      value: function focus() {
        this.cell.textarea.focus();
      }
      /**
       * if clicking in td but outside textarea, focus the text area
       */

    }, {
      key: "_getCellLabel",
      value: function _getCellLabel(column, row) {
        return "Cell " + this._getLabel(column, "Column") + this._getLabel(row, "Row");
      }
      /**
       * if clicking in td but outside textarea, focus the text area
       */

    }, {
      key: "_onValueChanged",
      value: function _onValueChanged(e) {
        this.dispatchEvent(new CustomEvent("cell-value-changed", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            row: this.row,
            column: this.column,
            value: e.detail.value
          }
        }));
      }
      /**
       * FROM: https://stackoverflow.com/questions/2897155/get-cursor-position-in-characters-within-a-text-input-field
       * Returns the caret (cursor) position of the specified text field.
       * Return value range is 0-oField.value.length.
       */

    }, {
      key: "getCaretPosition",
      value: function getCaretPosition() {
        var caret = 0; // IE Support

        if (document.selection) {
          // Set focus on the element
          this.$.cell.focus(); // To get cursor position, get empty selection range

          var sel = document.selection.createRange(); // Move selection start to 0 position

          sel.moveStart("character", -this.$.cell.value.length); // The caret position is selection length

          caret = sel.text.length;
        } else if (this.$.cell.shadowRoot.querySelector("textarea").selectionStart || this.$.cell.shadowRoot.querySelector("textarea").selectionStart == "0") {
          caret = this.$.cell.shadowRoot.querySelector("textarea").selectionStart;
        }

        return caret;
      }
      /**
       * make sure caret is in the correct position
       */

    }, {
      key: "setCaretPosition",
      value: function setCaretPosition(start, end) {
        var textarea = this.$.cell.shadowRoot.querySelector("textarea");
        textarea.focus();

        if (textarea.createTextRange) {
          var range = textarea.createTextRange();
          range.collapse(true);
          range.moveEnd("character", end);
          range.moveStart("character", start);
          range.select();
        } else if (textarea.setSelectionRange) {
          textarea.setSelectionRange(start, end);
          textarea.selectionStart = start;
          textarea.selectionEnd = end;
        }
      }
      /**
       * set focus to textarea
       */

    }, {
      key: "setFocus",
      value: function setFocus(start, end) {
        this.$.cell.shadowRoot.querySelector("textarea").focus();

        if (start !== undefined && end !== undefined) {
          this.setCaretPosition(start, end);
        } else if (start !== undefined) {
          this.setCaretPosition(start, start);
        } else {
          this.setCaretPosition(0, 0);
        }
      }
      /**
       * handle left
       */

    }, {
      key: "_onCellLeft",
      value: function _onCellLeft(e) {
        this.dispatchEvent(new CustomEvent("cell-move", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            cell: this.parentNode,
            direction: "left"
          }
        }));
      }
      /**
       * handle right
       */

    }, {
      key: "_onCellRight",
      value: function _onCellRight(e) {
        this.dispatchEvent(new CustomEvent("cell-move", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            cell: this.parentNode,
            direction: "right"
          }
        }));
      }
      /**
       * handle up
       */

    }, {
      key: "_onCellAbove",
      value: function _onCellAbove(e) {
        this.dispatchEvent(new CustomEvent("cell-move", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            cell: this.parentNode,
            direction: "up"
          }
        }));
      }
      /**
       * handle down
       */

    }, {
      key: "_onCellBelow",
      value: function _onCellBelow(e) {
        this.dispatchEvent(new CustomEvent("cell-move", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: {
            cell: this.parentNode,
            direction: "down"
          }
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_73d3f680b54611e9b6ba27231b6f684a());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-editor-cell";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * cell row
           */
          row: {
            type: Number,
            value: null
          },

          /**
           * cell column
           */
          column: {
            type: Number,
            value: null
          },

          /**
           * cell label
           */
          label: {
            type: String,
            computed: "_getCellLabel(column,row)"
          },

          /**
           * cell contents
           */
          value: {
            type: String,
            value: false,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return EditableTableEditorCell;
  }((0, _editableTableBehaviors.cellBehaviors)(_polymerElement.PolymerElement));

  _exports.EditableTableEditorCell = EditableTableEditorCell;
  window.customElements.define(EditableTableEditorCell.tag, EditableTableEditorCell);
});