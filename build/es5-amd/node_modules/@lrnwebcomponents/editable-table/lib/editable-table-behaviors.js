define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.editBehaviors = _exports.cellBehaviors = _exports.displayBehaviors = void 0;

  /**
   * `editable-table-behaviors`
   * `A set of common behaviors for editable-table web components.`
   */
  var displayBehaviors = function displayBehaviors(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass) {
        babelHelpers.inherits(_class, _SuperClass);

        function _class() {
          babelHelpers.classCallCheck(this, _class);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class).apply(this, arguments));
        }

        babelHelpers.createClass(_class, [{
          key: "getData",

          /**
           * Return table data
           */
          value: function getData() {
            var data = {
              accentColor: this.accentColor,
              bordered: !this.hideBordered ? this.bordered : null,
              caption: this.caption,
              columnHeader: this.columnHeader,
              condensed: !this.hideCondensed ? this.condensed : null,
              dark: !this.hideDark ? this.dark : null,
              data: this.data,
              filter: !this.hideFilter ? this.filter : null,
              footer: this.footer,
              rowHeader: this.rowHeader,
              scroll: !this.hideScroll ? this.scroll : null,
              sort: !this.hideSort ? this.sort : null,
              striped: !this.hideStriped ? this.striped : null,
              summary: this.summary
            };
            return data;
          }
        }], [{
          key: "properties",
          get: function get() {
            var props = {
              /**
               * Add borders to table and table cells.
               */
              bordered: {
                type: Boolean,
                value: false
              },

              /**
               * a table caption
               */
              caption: {
                type: String,
                value: null
              },

              /**
               * Display the first row as a column header.
               */
              columnHeader: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * Condense height of table cells.
               */
              condensed: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * raw data
               */
              data: {
                type: Array,
                value: []
              },

              /**
               * Enable filtering by cell value.
               */
              filter: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * Display the last row as a column footer.
               */
              footer: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * Display the first column as a row header.
               */
              rowHeader: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * Enable sorting by column header.
               */
              sort: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * When table is wider than screens, users will scroll across the table instead of seclecting a column to display.
               */
              scroll: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * Add alternating row striping.
               */
              striped: {
                type: Boolean,
                value: false,
                reflectToAttribute: true
              },

              /**
               * a table summary
               */
              summary: {
                type: String,
                value: null
              }
            };

            if (babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this)) {
              props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(_class), "properties", this));
            }

            return props;
          }
        }]);
        return _class;
      }(SuperClass)
    );
  };

  _exports.displayBehaviors = displayBehaviors;

  var cellBehaviors = function cellBehaviors(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass2) {
        babelHelpers.inherits(_class2, _SuperClass2);

        function _class2() {
          babelHelpers.classCallCheck(this, _class2);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class2).apply(this, arguments));
        }

        babelHelpers.createClass(_class2, [{
          key: "_getLabel",

          /**
           * Get the row or column label
           */
          value: function _getLabel(index, type) {
            if (type === "Column") {
              var numerals = "ABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),
                  results = this._getLetter(index).split("-").reverse(),
                  label = "";

              for (var i = 0; i < results.length; i++) {
                if (results[i] !== "") label += numerals[results[i]];
              }

              return label;
            } else {
              return index + 1;
            }
          }
          /**
           * Get the row or column label
           */

        }, {
          key: "_getLetter",
          value: function _getLetter(index) {
            var place = Math.floor(index / 26),
                multiplier = 26 * place,
                remainder = index - multiplier,
                letters = "";
            letters += remainder + "-";

            if (place > 0 && place < 26) {
              letters += place - 1 + "-";
            } else if (place >= 26) {
              letters += this._getLetter(place - 1);
            }

            return letters;
          }
        }]);
        return _class2;
      }(SuperClass)
    );
  };

  _exports.cellBehaviors = cellBehaviors;

  var editBehaviors = function editBehaviors(SuperClass) {
    return (
      /*#__PURE__*/
      function (_SuperClass3) {
        babelHelpers.inherits(_class3, _SuperClass3);

        function _class3() {
          babelHelpers.classCallCheck(this, _class3);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class3).apply(this, arguments));
        }

        babelHelpers.createClass(_class3, null, [{
          key: "properties",
          get: function get() {
            var props = {
              /**
               * Hide the borders table styles menu option
               */
              hideBordered: {
                type: Boolean,
                value: false
              },

              /**
               * Hide the condensed table styles menu option
               */
              hideCondensed: {
                type: Boolean,
                value: false
              },

              /**
               * Hide the accent color styles menu option.
               */
              hideAccentColor: {
                type: Boolean,
                value: false
              },

              /**
               * Hide the dark theme styles menu option.
               */
              hideDarkTheme: {
                type: Boolean,
                value: false
              },

              /**
               * Hide the filtering option.
               */
              hideFilter: {
                type: Boolean,
                value: false
              },

              /**
               * Hide the sorting option.
               */
              hideSort: {
                type: Boolean,
                value: false
              },

              /**
               * Hide the scroll table styles menu option
               */
              hideScroll: {
                type: Boolean,
                value: false
              },

              /**
               * Hide the striped table styles menu option
               */
              hideStriped: {
                type: Boolean,
                value: false
              }
            };

            if (babelHelpers.get(babelHelpers.getPrototypeOf(_class3), "properties", this)) {
              props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(_class3), "properties", this));
            }

            return props;
          }
        }]);
        return _class3;
      }(SuperClass)
    );
  };

  _exports.editBehaviors = editBehaviors;
});