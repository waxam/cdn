define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/iron-icons/image-icons.js", "../../../@polymer/iron-icons/device-icons.js", "../../simple-tooltip/simple-tooltip.js", "./editable-table-iconset.js"], function (_exports, _polymerElement, _paperButton, _imageIcons, _deviceIcons, _simpleTooltip, _editableTableIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableEditorToggle = void 0;

  function _templateObject_8e406880c96f11ea8be5e1d5fe7ec787() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host([hidden]) {\n          display: none;\n        }\n        :host paper-button {\n          padding: 2px;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n          font-family: var(--editable-table-secondary-font-family);\n          background-color: var(--editable-table-button-bg-color);\n          color: var(--editable-table-button-color);\n        }\n        :host([toggled]) paper-button {\n          background-color: var(--editable-table-button-toggled-bg-color);\n          color: var(--editable-table-button-toggled-color);\n        }\n        :host(:not([disabled])) paper-button:focus,\n        :host(:not([disabled])) paper-button:hover {\n          background-color: var(--editable-table-button-hover-bg-color);\n          color: var(--editable-table-button-hover-color);\n          cursor: pointer;\n        }\n        :host([toggled]:not([disabled])) paper-button:focus,\n        :host([toggled]:not([disabled])) paper-button:hover {\n          background-color: var(--editable-table-button-toggled-hover-bg-color);\n          color: var(--editable-table-button-toggled-hover-color);\n          cursor: pointer;\n        }\n        :host([disabled]) paper-button {\n          background-color: var(--editable-table-button-disabled-bg-color);\n          color: var(--editable-table-button-disabled-color);\n          cursor: not-allowed;\n        }\n        :host paper-button > div {\n          flex-grow: 1;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        :host #filter-off {\n          opacity: 0.25;\n        }\n      </style>\n      <paper-button\n        id=\"button\"\n        active$=\"[[toggled]]\"\n        disabled$=\"[[disabled]]\"\n        label=\"[[label]]\"\n        toggles\n        on-click=\"_onClick\"\n      >\n        <span class=\"sr-only\">[[label]]</span>\n        <iron-icon icon$=\"[[icon]]\" aria-hidden=\"true\"></iron-icon>\n      </paper-button>\n      <simple-tooltip id=\"tooltip\" for=\"button\" aria-hidden\n        >[[label]]</simple-tooltip\n      >\n    "]);

    _templateObject_8e406880c96f11ea8be5e1d5fe7ec787 = function _templateObject_8e406880c96f11ea8be5e1d5fe7ec787() {
      return data;
    };

    return data;
  }

  /**
   * `editable-table-editor-toggle`
   * A toggle button for an property in the editable-table interface (editable-table.html).
   *
   ```<editable-table-editor-toggle
    hidden                           //Hide and disable this toggle? Default is false.
    label="Condensed"                //The label for the toggle button
    prop="condensed"                 //The property controlled by this toggle
    tooltip="Condense cell height."  //A tooltip for this toggle.
    value="true">                    //The value of this toggle.
  </editable-table-editor-toggle>```
   *  
   * @demo ./demo/editor.html
   * 
   * @polymer
   * @element editable-table-editor-toggle
   */
  var EditableTableEditorToggle =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(EditableTableEditorToggle, _PolymerElement);

    function EditableTableEditorToggle() {
      babelHelpers.classCallCheck(this, EditableTableEditorToggle);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EditableTableEditorToggle).apply(this, arguments));
    }

    babelHelpers.createClass(EditableTableEditorToggle, [{
      key: "_onClick",

      /**
       * Fires when button is clicked
       * @event change
       */
      value: function _onClick() {
        this.toggled = !this.toggled;
        this.dispatchEvent(new CustomEvent("change", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_8e406880c96f11ea8be5e1d5fe7ec787());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-editor-toggle";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Whether toggle is disabled
           */
          disabled: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          },

          /**
           * Table id for accessibility
           */
          controls: {
            type: String,
            value: "table",
            readOnly: true,
            reflectToAttribute: true
          },

          /**
           * Button id that matches the table property to toggle
           */
          id: {
            type: String,
            value: null
          },

          /**
           * Button icon
           */
          icon: {
            type: String,
            value: null
          },

          /**
           * Button label
           */
          label: {
            type: String,
            value: null
          },

          /**
           * Whether the button is toggled
           */
          toggled: {
            type: Boolean,
            value: false,
            reflectToAttribute: true
          }
        };
      }
    }]);
    return EditableTableEditorToggle;
  }(_polymerElement.PolymerElement);

  _exports.EditableTableEditorToggle = EditableTableEditorToggle;
  window.customElements.define(EditableTableEditorToggle.tag, EditableTableEditorToggle);
});