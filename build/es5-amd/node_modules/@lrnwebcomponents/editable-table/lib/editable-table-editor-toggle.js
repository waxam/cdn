define(["exports","../../../@polymer/polymer/polymer-element.js","../../../@polymer/polymer/lib/utils/render-status.js","../../../@polymer/paper-button/paper-button.js","../../../@polymer/paper-toggle-button/paper-toggle-button.js","../../../@polymer/paper-item/paper-item.js","../../../@polymer/paper-tooltip/paper-tooltip.js"],function(_exports,_polymerElement,_renderStatus,_paperButton,_paperToggleButton,_paperItem,_paperTooltip){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.EditableTableEditorToggle=void 0;function _templateObject_fca70e10984611e9810e6d9eee9273ff(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n        :host .setting {\n          font-size: 95%;\n          padding: var(--editable-table-toggle-padding, 8px 0px);\n          justify-content: space-between;\n          width: 100%;\n        }\n        :host([disabled]) .setting-text {\n          opacity: 0.5;\n        }\n      </style>\n      <div class=\"setting\">\n        <div class=\"setting-control\">\n          <paper-toggle-button\n            id=\"button\"\n            checked$=\"[[value]]\"\n            disabled$=\"[[disabled]]\"\n            >[[label]]</paper-toggle-button\n          >\n          <paper-tooltip id=\"tooltip\" for=\"button\">[[tooltip]]</paper-tooltip>\n        </div>\n      </div>\n    "],["\n      <style>\n        :host {\n          display: block;\n        }\n        :host .setting {\n          font-size: 95%;\n          padding: var(--editable-table-toggle-padding, 8px 0px);\n          justify-content: space-between;\n          width: 100%;\n        }\n        :host([disabled]) .setting-text {\n          opacity: 0.5;\n        }\n      </style>\n      <div class=\"setting\">\n        <div class=\"setting-control\">\n          <paper-toggle-button\n            id=\"button\"\n            checked\\$=\"[[value]]\"\n            disabled\\$=\"[[disabled]]\"\n            >[[label]]</paper-toggle-button\n          >\n          <paper-tooltip id=\"tooltip\" for=\"button\">[[tooltip]]</paper-tooltip>\n        </div>\n      </div>\n    "]);_templateObject_fca70e10984611e9810e6d9eee9273ff=function _templateObject_fca70e10984611e9810e6d9eee9273ff(){return data};return data}/**
`editable-table-editor-toggle`

A toggle button for an property in the editable-table 
interface (editable-table.html).

* @demo demo/index.html

@microcopy - the mental model for this element

<editable-table-editor-toggle
  hidden                          //Hide and disable this toggle? Default is false.
  label="Condensed"               //The label for the toggle button
  prop="condensed"                //The property controlled by this toggle
  tooltip="Condense cell height." //A tooltip for this toggle.
  value="true">                   //The value of this toggle.
</editable-table-editor-toggle>

*/var EditableTableEditorToggle=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(EditableTableEditorToggle,_PolymerElement);function EditableTableEditorToggle(){babelHelpers.classCallCheck(this,EditableTableEditorToggle);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(EditableTableEditorToggle).apply(this,arguments))}babelHelpers.createClass(EditableTableEditorToggle,[{key:"connectedCallback",value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorToggle.prototype),"connectedCallback",this).call(this);(0,_renderStatus.afterNextRender)(this,function(){this.addEventListener("change",this._onChange.bind(this))})}},{key:"disconnectedCallback",value:function disconnectedCallback(){this.removeEventListener("change",this._onChange.bind(this));babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorToggle.prototype),"disconnectedCallback",this).call(this)}},{key:"_onChange",/**
   * Set up event listener to fire when toggled
   */value:function _onChange(e){if(e.srcElement===this.$.button)this.dispatchEvent(new CustomEvent("editable-table-setting-changed",{bubbles:!0,cancelable:!0,composed:!0,detail:{prop:this.prop,value:e.srcElement.checked}}))}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_fca70e10984611e9810e6d9eee9273ff())}},{key:"tag",get:function get(){return"editable-table-editor-toggle"}},{key:"properties",get:function get(){return{/**
       * is the toggle disabled
       */disabled:{type:Boolean,value:!1,reflectToAttribute:!0},/**
       * label for menu setting
       */label:{type:String,value:null},/**
       * the property to update
       */prop:{type:String,value:null},/**
       * tool tip for menu setting
       */tooltip:{type:String,value:null},/**
       * boolean value of menu setting
       */value:{type:Boolean,value:!1}}}}]);return EditableTableEditorToggle}(_polymerElement.PolymerElement);_exports.EditableTableEditorToggle=EditableTableEditorToggle;window.customElements.define(EditableTableEditorToggle.tag,EditableTableEditorToggle)});