define(["exports", "../../../lit/index.js", "../../simple-tooltip/simple-tooltip.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _index, _simpleTooltip, _simpleIconLite, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableEditorToggle = void 0;

  var _templateObject_ee010060feb911eb8439e3eec9305af7, _templateObject2_ee010060feb911eb8439e3eec9305af7;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table-editor-toggle`
   * A toggle button for an property in editable-table interface (editable-table.html).
   *
   * @demo ./demo/editor.html
   * @customElement
   * @extends LitElement
   */
  var EditableTableEditorToggle = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(EditableTableEditorToggle, _LitElement);

    var _super = _createSuper(EditableTableEditorToggle);

    function EditableTableEditorToggle() {
      babelHelpers.classCallCheck(this, EditableTableEditorToggle);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(EditableTableEditorToggle, [{
      key: "render",
      value: function render() {
        return (0, _index.html)(_templateObject_ee010060feb911eb8439e3eec9305af7 || (_templateObject_ee010060feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n      <button\n        id=\"button\"\n        ?active=\"", "\"\n        ?disabled=\"", "\"\n        label=\"", "\"\n        toggles\n        @click=\"", "\"\n      >\n        <span class=\"sr-only\">", "</span>\n        <simple-icon-lite\n          icon=\"", "\"\n          aria-hidden=\"true\"\n        ></simple-icon-lite>\n      </button>\n      <simple-tooltip id=\"tooltip\" for=\"button\" aria-hidden=\"true\"\n        >", "</simple-tooltip\n      >\n    "])), this.toggled, this.disabled, this.label, this._onClick, this.label, this.icon, this.label);
      }
    }, {
      key: "_onClick",
      value:
      /**
       * Fires when button is clicked
       * @event change
       */
      function _onClick() {
        this.toggled = !this.toggled;
        this.dispatchEvent(new CustomEvent("change", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
    }], [{
      key: "styles",
      get: function get() {
        return [].concat(babelHelpers.toConsumableArray(babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableEditorToggle), "styles", this) || []), [(0, _index.css)(_templateObject2_ee010060feb911eb8439e3eec9305af7 || (_templateObject2_ee010060feb911eb8439e3eec9305af7 = babelHelpers.taggedTemplateLiteral(["\n        :host([hidden]) {\n          display: none;\n        }\n        button {\n          padding: 2px;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n          font-family: var(\n            --editable-table-secondary-font-family,\n            \"Roboto\",\n            \"Noto\",\n            sans-serif\n          );\n          background-color: var(\n            --editable-table-button-bg-color,\n            var(--editable-table-bg-color, #fff)\n          );\n          color: var(--editable-table-border-color, #999);\n          border: none;\n          border-radius: 0;\n        }\n        :host([toggled]) button {\n          background-color: var(--editable-table-button-toggled-bg-color);\n          color: var(\n            --editable-table-button-toggled-color,\n            var(--editable-table-color, #222)\n          );\n        }\n        :host(:not([disabled])) button:focus,\n        :host(:not([disabled])) button:hover {\n          background-color: var(\n            --editable-table-button-hover-bg-color,\n            var(--editable-table-heading-bg-color, #e8e8e8)\n          );\n          color: var(\n            --editable-table-button-hover-color,\n            var(--editable-table-border-color, #999)\n          );\n          cursor: pointer;\n        }\n        :host([toggled]:not([disabled])) button:focus,\n        :host([toggled]:not([disabled])) button:hover {\n          background-color: var(\n            --editable-table-button-toggled-hover-bg-color,\n            var(--editable-table-heading-bg-color, #e8e8e8)\n          );\n          color: var(\n            --editable-table-button-toggled-hover-color,\n            var(--editable-table-heading-color)\n          );\n          cursor: pointer;\n        }\n        :host([disabled]) button {\n          background-color: var(\n            --editable-table-button-disabled-bg-color,\n            var(--editable-table-bg-color, #fff)\n          );\n          color: var(--editable-table-button-disabled-color);\n          cursor: not-allowed;\n        }\n        button > div {\n          flex-grow: 1;\n        }\n        .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        #filter-off {\n          opacity: 0.25;\n        }\n      "])))]);
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-editor-toggle";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Whether toggle is disabled
           */
          disabled: {
            attribute: "disabled",
            type: Boolean,
            value: false,
            reflect: true
          },

          /**
           * Table id for accessibility
           */
          controls: {
            attribute: "controls",
            type: String,
            value: "table",
            readOnly: true,
            reflect: true
          },

          /**
           * Button id that matches table property to toggle
           */
          id: {
            attribute: "id",
            type: String,
            value: null
          },

          /**
           * Button icon
           */
          icon: {
            type: String,
            value: null
          },

          /**
           * Button label
           */
          label: {
            type: String,
            value: null
          },

          /**
           * Whether button is toggled
           */
          toggled: {
            attribute: "toggled",
            type: Boolean,
            value: false,
            reflect: true
          }
        };
      }
    }]);
    return EditableTableEditorToggle;
  }(_index.LitElement);

  _exports.EditableTableEditorToggle = EditableTableEditorToggle;
  window.customElements.define(EditableTableEditorToggle.tag, EditableTableEditorToggle);
});