define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../simple-icon/lib/simple-icon-lite.js", "../../simple-icon/lib/simple-icons.js", "../../hax-iconset/lib/simple-hax-iconset.js"], function (_exports, _polymerElement, _simpleIconLite, _simpleIcons, _simpleHaxIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableSort = void 0;

  function _templateObject_5dd678c051d611eba9e8f7a417db1b23() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\">\n        :host button {\n          padding: var(--editable-table-cell-padding, 0);\n          margin: 0;\n          width: auto;\n          min-width: unset;\n          display: flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n          font-family: var(--editable-table-font-family);\n          background-color: transparent;\n          border: none;\n          border-radius: 0;\n        }\n        :host button > div {\n          flex-grow: 1;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        :host(:not([sort-mode=\"asc\"])) .asc,\n        :host(:not([sort-mode=\"desc\"])) .desc,\n        :host(:not([sort-mode=\"none\"])) .none,\n        :host #asc,\n        :host #desc,\n        :host([sorting]:not([sort-mode=\"none\"])) #none {\n          display: none;\n        }\n        :host([sorting][sort-mode=\"asc\"]) #asc,\n        :host([sorting][sort-mode=\"desc\"]) #desc {\n          display: flex;\n        }\n      </style>\n      <button id=\"button\" class=\"container\" on-click=\"_onSortClicked\">\n        [[text]] <span class=\"sr-only asc\">(ascending)</span>\n        <span class=\"sr-only desc\">(descending)</span>\n        <span class=\"sr-only\"> Toggle sort mode.</span>\n        <simple-icon-lite id=\"asc\" icon=\"arrow-drop-up\"></simple-icon-lite>\n        <simple-icon-lite id=\"desc\" icon=\"arrow-drop-down\"></simple-icon-lite>\n        <simple-icon-lite\n          id=\"none\"\n          icon=\"editable-table:sortable\"\n        ></simple-icon-lite>\n      </button>\n    "]);

    _templateObject_5dd678c051d611eba9e8f7a417db1b23 = function _templateObject_5dd678c051d611eba9e8f7a417db1b23() {
      return data;
    };

    return data;
  }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `editable-table-editor-sort`
   * A column header that functions as a three-state sort button (no sort, sort ascending, sort descending) for the table-editor-display mode (table-editor-display.html).
   *
   * @demo ./demo/display.html
   *
   * @polymer
   * @element editable-table-editor-sort
   */
  var EditableTableSort = /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(EditableTableSort, _PolymerElement);

    var _super = _createSuper(EditableTableSort);

    function EditableTableSort() {
      babelHelpers.classCallCheck(this, EditableTableSort);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(EditableTableSort, [{
      key: "_onSortClicked",

      /**
       * Fires when sort button is clicked
       * @event change-sort-mode
       */
      value: function _onSortClicked() {
        this.dispatchEvent(new CustomEvent("change-sort-mode", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * Changes the sort mode
       * @param {string} mode the sort mode: `asc` for ascending or `desc` for descending;
       */

    }, {
      key: "setSortMode",
      value: function setSortMode(mode) {
        this.sortMode = mode;
        this.__checked = mode === "asc" ? true : mode === "desc" ? mode : false;
      }
      /**
       * Determines if column number is the same as the current sort column
       * @param {number} columnIndex the index of the column
       * @param {number} sortColumn the index of the column being sorted
       * @returns {boolean} whether this column is being sorted
       */

    }, {
      key: "_isSorting",
      value: function _isSorting(columnIndex, sortColumn) {
        return columnIndex === sortColumn;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_5dd678c051d611eba9e8f7a417db1b23());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-sort";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * Sort ascending, descending or none
           */
          columnIndex: {
            type: Number,
            value: null,
            reflectToAttribute: true
          },

          /**
           * Sort mode: ascending, descending or none
           */
          sortMode: {
            type: String,
            value: "none",
            reflectToAttribute: true
          },

          /**
           * Index of the current sort column
           */
          sortColumn: {
            type: Number,
            value: -1,
            reflectToAttribute: true
          },

          /**
           * Whether the column is being sorted
           */
          sorting: {
            type: Boolean,
            computed: "_isSorting(columnIndex,sortColumn)",
            reflectToAttribute: true
          },

          /**
           * Column header text
           */
          text: {
            type: String,
            value: ""
          }
        };
      }
    }]);
    return EditableTableSort;
  }(_polymerElement.PolymerElement);

  _exports.EditableTableSort = EditableTableSort;
  window.customElements.define(EditableTableSort.tag, EditableTableSort);
});