define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/render-status.js", "../../../@polymer/paper-button/paper-button.js", "../../../@polymer/iron-icons/iron-icons.js", "./editable-table-iconset.js"], function (_exports, _polymerElement, _renderStatus, _paperButton, _ironIcons, _editableTableIconset) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EditableTableSort = void 0;

  function _templateObject_cc3120d0aa5311e9b999174ecd579fc6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style is=\"custom-style\">\n        :host paper-button {\n          padding: 0;\n          margin: 0;\n          width: 100%;\n          min-width: unset;\n          display: inline-flex;\n          justify-content: space-between;\n          align-items: center;\n          align-content: stretch;\n          text-transform: unset;\n        }\n        :host paper-button > div {\n          flex-grow: 1;\n        }\n        :host .sr-only {\n          position: absolute;\n          left: -9999px;\n          font-size: 0;\n          height: 0;\n          width: 0;\n          overflow: hidden;\n        }\n        :host(:not([sort-mode=\"asc\"])) .asc,\n        :host(:not([sort-mode=\"desc\"])) .desc,\n        :host(:not([sort-mode=\"none\"])) .none,\n        :host #asc,\n        :host #desc,\n        :host([sorting]:not([sort-mode=\"none\"])) #none {\n          display: none;\n        }\n        :host([sorting][sort-mode=\"asc\"]) #asc,\n        :host([sorting][sort-mode=\"desc\"]) #desc {\n          display: flex;\n        }\n      </style>\n      <paper-button id=\"button\" class=\"container\">\n        [[text]] <span class=\"sr-only asc\">(ascending)</span>\n        <span class=\"sr-only desc\">(descending)</span>\n        <span class=\"sr-only\"> Toggle sort mode.</span>\n        <iron-icon id=\"asc\" icon=\"arrow-drop-up\"></iron-icon>\n        <iron-icon id=\"desc\" icon=\"arrow-drop-down\"></iron-icon>\n        <iron-icon id=\"none\" icon=\"editable-table:sortable\"></iron-icon>\n      </paper-button>\n    "]);

    _templateObject_cc3120d0aa5311e9b999174ecd579fc6 = function _templateObject_cc3120d0aa5311e9b999174ecd579fc6() {
      return data;
    };

    return data;
  }

  /**
  `editable-table-sort`
  
  A column header that functions as a three-state sort button 
  (no sort, sort ascending, sort descending) for the 
  table-editor-display mode (table-editor-display.html).
  
  * @demo demo/index.html
  
  @microcopy - the mental model for this element
  
  <editable-table-sort 
    sort-mode="asc"               //The column's sort mode, can be "asc", "desc", or "none". Default is "none".
    sort-column="3"               //The column number of current sort column.
    column-number="2"             //The column number of this button. If this matches the sort-column number, sorting will be turned on.
    text="">                      //The text of the column header
  </editable-table-sort>
  
  */
  var EditableTableSort =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(EditableTableSort, _PolymerElement);

    function EditableTableSort() {
      babelHelpers.classCallCheck(this, EditableTableSort);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(EditableTableSort).apply(this, arguments));
    }

    babelHelpers.createClass(EditableTableSort, [{
      key: "connectedCallback",
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort.prototype), "connectedCallback", this).call(this);
        (0, _renderStatus.afterNextRender)(this, function () {
          this.addEventListener("click", this._onSortTapped.bind(this));
        });
      }
    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.removeEventListener("click", this._onSortTapped.bind(this));
        babelHelpers.get(babelHelpers.getPrototypeOf(EditableTableSort.prototype), "disconnectedCallback", this).call(this);
      }
    }, {
      key: "_onSortTapped",

      /**
       * listen for button tap
       */
      value: function _onSortTapped() {
        this.dispatchEvent(new CustomEvent("change-sort-mode", {
          bubbles: true,
          cancelable: true,
          composed: true,
          detail: this
        }));
      }
      /**
       * changes the sort mode
       */

    }, {
      key: "setSortMode",
      value: function setSortMode(mode) {
        this.sortMode = mode;
        this.__checked = mode === "asc" ? true : mode === "desc" ? mode : false;
      }
      /**
       * Is the column number is the same as the current sort column?
       */

    }, {
      key: "_isSorting",
      value: function _isSorting(columnNumber, sortColumn) {
        return columnNumber === sortColumn;
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_cc3120d0aa5311e9b999174ecd579fc6());
      }
    }, {
      key: "tag",
      get: function get() {
        return "editable-table-sort";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          /**
           * sort ascending, descending or none
           */
          columnNumber: {
            type: Number,
            value: null,
            reflectToAttribute: true
          },

          /**
           * Sort mode: ascending, descending or none
           */
          sortMode: {
            type: String,
            value: "none",
            reflectToAttribute: true
          },

          /**
           * The index of the current sort column
           */
          sortColumn: {
            type: Number,
            value: -1,
            reflectToAttribute: true
          },

          /**
           * If this is the sort column, sorting is on
           */
          sorting: {
            type: Boolean,
            computed: "_isSorting(columnNumber,sortColumn)",
            reflectToAttribute: true
          },

          /**
           * the column header text
           */
          text: {
            type: String,
            value: ""
          }
        };
      }
    }]);
    return EditableTableSort;
  }(_polymerElement.PolymerElement);

  _exports.EditableTableSort = EditableTableSort;
  window.customElements.define(EditableTableSort.tag, EditableTableSort);
});