define(["exports", "../../../@polymer/polymer/polymer-element.js", "./a11y-media-behaviors.js", "../../../@polymer/paper-tooltip/paper-tooltip.js"], function (_exports, _polymerElement, _a11yMediaBehaviors, _paperTooltip) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yMediaPlayButton = void 0;

  function _templateObject_e33a93e0b46e11e9978b67ee5ebb8bc8() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n          opacity: 1;\n          transition: opacity 0.5s;\n        }\n        :host([disabled]),\n        :host([elapsed]) {\n          opacity: 0;\n        }\n        :host,\n        :host #thumbnail,\n        :host #background,\n        :host #button {\n          width: 100%;\n          top: 0;\n          left: 0;\n          opacity: 1;\n          transition: opacity 0.5s;\n        }\n        :host #thumbnail,\n        :host #background,\n        :host #button {\n          position: absolute;\n          height: 100%;\n          padding: 0;\n          margin: 0;\n          border: none;\n        }\n        :host #thumbnail {\n          height: auto;\n          overflow: hidden;\n        }\n        :host #button {\n          overflow: hidden;\n          background: transparent;\n        }\n        :host #button:hover {\n          cursor: pointer;\n        }\n        :host #background {\n          opacity: 0.3;\n          background: var(--a11y-play-button-bg-color);\n        }\n        :host #button:focus #background,\n        :host #button:hover #background {\n          background: var(--a11y-play-button-focus-bg-color);\n          opacity: 0.1;\n        }\n        :host #arrow {\n          stroke: #ffffff;\n          fill: #000000;\n        }\n        :host #text {\n          fill: #ffffff;\n        }\n        :host .sr-only {\n          font-size: 0;\n        }\n        @media print {\n          :host(:not([thumbnail-src])),\n          :host #background,\n          :host #svg {\n            display: none;\n          }\n        }\n      </style>\n      <button\n        id=\"button\"\n        aria-pressed$=\"[[playing]]\"\n        aria-hidden$=\"[[disabled]]\"\n        controls=\"video\"\n        disabled$=\"[[disabled]]\"\n        label=\"[[playPause.label]]\"\n        on-click=\"_buttonTap\"\n        tabindex=\"0\"\n        title$=\"[[label]]\"\n      >\n        <svg\n          id=\"svg\"\n          aria-hidden\n          xmlns=\"http://www.w3.org/2000/svg\"\n          viewBox=\"0 0 200 200\"\n          width=\"30%\"\n          height=\"30%\"\n          opacity=\"0.7\"\n        >\n          <g>\n            <polygon\n              id=\"arrow\"\n              points=\"30,20 30,180 170,100\"\n              fill=\"#000000\"\n              stroke=\"#ffffff\"\n              stroke-width=\"15px\"\n            ></polygon>\n            <text\n              id=\"text\"\n              class=\"sr-only\"\n              x=\"50\"\n              y=\"115\"\n              fill=\"#ffffff\"\n              font-size=\"30px\"\n            >\n              [[playPause.label]]\n            </text>\n          </g>\n        </svg>\n      </button>\n      <iron-a11y-keys\n        id=\"a11y\"\n        keys=\"enter space\"\n        target$=\"[[__target]]\"\n        on-keys-pressed=\"_buttonTap\"\n      ></iron-a11y-keys>\n    "]);

    _templateObject_e33a93e0b46e11e9978b67ee5ebb8bc8 = function _templateObject_e33a93e0b46e11e9978b67ee5ebb8bc8() {
      return data;
    };

    return data;
  }

  /**
   * `a11y-media-play-button`
   * `A giant play button that overlays the media in a11y-media-player.`
   *
   * @microcopy - language worth noting:
  ```
  Custom styles:
  --a11y-play-button-bg-color: overlay background color, default is #000000
  --a11y-play-button-focus-bg-color: overlay background color, default is --a11y-play-button-bg-color```
   *
   * @extends A11yMediaBehaviors
   * @customElement
   * @polymer
   */
  var A11yMediaPlayButton =
  /*#__PURE__*/
  function (_A11yMediaBehaviors) {
    babelHelpers.inherits(A11yMediaPlayButton, _A11yMediaBehaviors);
    babelHelpers.createClass(A11yMediaPlayButton, null, [{
      key: "properties",
      // properties available to the custom element for data binding
      get: function get() {
        return {
          /**
           * is button action to send as an event
           */
          action: {
            type: String,
            value: null
          },

          /**
           * is button disabled
           */
          disabled: {
            type: Boolean,
            value: false
          },

          /**
           * is media playing
           */
          playing: {
            type: Boolean,
            value: false
          }
        };
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "a11y-media-play-button";
      } //inherit styles from a11y-media-player or a11y-media-transcript

    }]);

    function A11yMediaPlayButton() {
      var _this;

      babelHelpers.classCallCheck(this, A11yMediaPlayButton);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yMediaPlayButton).call(this));
      _this.inheritStyles = true;
      return _this;
    } //render function


    babelHelpers.createClass(A11yMediaPlayButton, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayButton.prototype), "connectedCallback", this).call(this);
        this.$.text.innerText = this.playLabel;
      }
      /**
       * sets target for a11y keys
       */

    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(A11yMediaPlayButton.prototype), "ready", this).call(this);
        this.target = this.$.button;
      }
      /**
       * handle button tap
       */

    }, {
      key: "_buttonTap",
      value: function _buttonTap() {
        var root = this;
        root.dispatchEvent(new CustomEvent("controls-change", {
          detail: this
        }));
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_e33a93e0b46e11e9978b67ee5ebb8bc8());
      }
    }]);
    return A11yMediaPlayButton;
  }(_a11yMediaBehaviors.A11yMediaBehaviors);

  _exports.A11yMediaPlayButton = A11yMediaPlayButton;
  window.customElements.define(A11yMediaPlayButton.tag, A11yMediaPlayButton);
});