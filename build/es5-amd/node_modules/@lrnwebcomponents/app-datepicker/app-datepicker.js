define(["exports", "../../@polymer/polymer/polymer-legacy.js", "../../@polymer/polymer/lib/legacy/polymer.dom.js", "../../@polymer/polymer/lib/utils/flattened-nodes-observer.js", "../../@polymer/polymer/lib/utils/async.js", "../../@polymer/iron-selector/iron-selector.js", "../../@polymer/iron-list/iron-list.js", "../../@polymer/paper-icon-button/paper-icon-button.js", "../../@polymer/neon-animation/neon-animation-runner-behavior.js", "../../@polymer/neon-animation/neon-animated-pages.js", "./lib/app-datepicker-icons.js", "./lib/app-datepicker-animations.js"], function (_exports, _polymerLegacy, _polymerDom, _flattenedNodesObserver, async, _ironSelector, _ironList, _paperIconButton, _neonAnimationRunnerBehavior, _neonAnimatedPages, _appDatepickerIcons, _appDatepickerAnimations) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.AppDatepicker = void 0;
  async = babelHelpers.interopRequireWildcard(async);

  function _templateObject_7f6e9b20e48111e9b5c6f7b0a264592f() {
    var data = babelHelpers.taggedTemplateLiteral(["\n    <style>\n      :host {\n        display: block;\n        position: relative;\n        box-sizing: border-box;\n\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        background: var(--app-datepicker-bg, #fafafa);\n\n        @apply --app-datepicker;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .datepicker {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n\n        position: relative;\n        width: 300px;\n        height: 384px;\n        max-height: 384px;\n      }\n      .datepicker.with-buttons {\n        height: 431px;\n        max-height: 431px;\n      }\n\n      iron-selector.selected-fulldate {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n\n        min-height: 84px;\n        padding: 8px 16px;\n        color: var(--app-datepicker-selection-color, #b2dfdb);\n        background-color: var(--app-datepicker-selection-bg, #009688);\n      }\n      .selected-year.iron-selected,\n      .selected-date.iron-selected {\n        color: var(--app-datepicker-iron-selected, #fefefe);\n      }\n      .selected-year {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n\n        font-size: 14px;\n        font-weight: 800;\n        height: 34px;\n\n        @apply --app-datepicker-selected-year;\n      }\n      .selected-date {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex: 1 1 auto;\n        -webkit-flex: 1 1 auto;\n        flex: 1 1 auto;\n\n        font-size: 32px;\n        font-weight: 800;\n\n        @apply --app-datepicker-selected-date;\n      }\n      .selected-year:hover,\n      .selected-date > div:hover {\n        cursor: pointer;\n      }\n\n      neon-animated-pages.fullcalendar {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        color: var(--app-datepicker-calendar-color, #000);\n        background-color: var(--app-datepicker-calendar-bg, #fafafa);\n      }\n      .navigator {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        max-height: 46px;\n        padding: 3px 10px;\n        position: relative;\n        margin-top: 8px;\n      }\n      .nav-month-year {\n        -ms-flex: 1 1 auto;\n        -webkit-flex: 1 1 auto;\n        flex: 1 1 auto;\n\n        font-size: 14px;\n        font-weight: 500;\n        text-align: center;\n\n        @apply --app-datepicker-nav-month-year;\n      }\n      .days-of-week {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        color: var(--app-datepicker-weekdays-color, #848484);\n        font-size: 12px;\n\n        @apply --app-datepicker-days-of-week;\n      }\n      .each-days-of-week {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        padding: 13px;\n        max-height: 32px;\n        width: 41px;\n      }\n      .days-of-month {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-wrap: wrap;\n        -webkit-flex-wrap: wrap;\n        flex-wrap: wrap;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        font-size: 13px;\n\n        @apply --app-datepicker-days-of-month;\n      }\n      .each-days-of-month {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        position: relative;\n        height: 35px;\n        width: 35px;\n        margin-left: 3px;\n        margin-right: 3px;\n      }\n      div > .days-of-month > .each-days-of-month.chosen-days-of-month {\n        border-radius: 50%;\n        background-color: var(--app-datepicker-selected-day-bg, #009688);\n        color: var(--app-datepicker-selected-day-color, #fff);\n      }\n      .days-of-month > .each-days-of-month.is-today {\n        color: var(--app-datepicker-today-color, #009688);\n      }\n      .days-of-month > .each-days-of-month.is-disabled-day {\n        color: var(--app-datepicker-disabled-color, #9e9e9e);\n      }\n\n      /* outline: none for non-selectable and disabled days */\n      .days-of-month > .each-days-of-month.is-disabled-day,\n      .days-of-month > .each-days-of-month.is-non-selectable {\n        outline: none;\n      }\n      /* Date hover styling */\n      .days-of-month\n        > .each-days-of-month:hover:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month),\n      .days-of-month\n        > .each-days-of-month:focus:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month) {\n        color: var(--app-datepicker-date-hover-color, #f5f5f5);\n        background-color: var(\n          --app-datepicker-date-hover-background-color,\n          #80cbc4\n        );\n        border-radius: 50%;\n        cursor: pointer;\n      }\n      :host(.dark-theme)\n        .days-of-month\n        > .each-days-of-month:hover:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month),\n      :host(.dark-theme)\n        .days-of-month\n        > .each-days-of-month:focus:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month) {\n        color: var(--app-datepicker-date-hover-color, #777);\n        background-color: var(\n          --app-datepicker-date-hover-background-color,\n          #b2dfdb\n        );\n      }\n      :host(.goog-theme)\n        .days-of-month\n        > .each-days-of-month:hover:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month),\n      :host(.goog-theme)\n        .days-of-month\n        > .each-days-of-month:focus:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month) {\n        color: var(--app-datepicker-date-hover-color, #f5f5f5);\n        background-color: var(\n          --app-datepicker-date-hover-background-color,\n          #e57373\n        );\n      }\n\n      /* Focus ring styling - replace outline with background-color */\n      .each-list-of-years:focus,\n      .each-days-of-month:focus {\n        outline: 0;\n      }\n      .each-list-of-years:focus,\n      .each-list-of-years:hover,\n      .each-list-of-years.is-selected:focus,\n      .each-list-of-years.is-selected:hover {\n        font-weight: 700;\n        background-color: var(\n          --app-datepicker-year-hover-background-color,\n          #e0e0e0\n        );\n\n        @apply --app-datepicker-year-hover;\n      }\n      :host(.dark-theme) .each-list-of-years:focus,\n      :host(.dark-theme) .each-list-of-years:hover,\n      :host(.dark-theme) .each-list-of-years.is-selected:focus,\n      :host(.dark-theme) .each-list-of-years.is-selected:hover {\n        font-weight: 700;\n        background-color: var(\n          --app-datepicker-year-hover-background-color,\n          #616161\n        );\n\n        @apply --app-datepicker-year-hover;\n      }\n      :host(.goog-theme) .each-list-of-years:focus,\n      :host(.goog-theme) .each-list-of-years:hover,\n      :host(.goog-theme) .each-list-of-years.is-selected:focus,\n      :host(.goog-theme) .each-list-of-years.is-selected:hover {\n        font-weight: 700;\n        background-color: var(\n          --app-datepicker-year-hover-background-color,\n          #424242\n        );\n\n        @apply --app-datepicker-year-hover;\n      }\n\n      .each-list-of-years {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        height: 64px;\n        font-size: 16px;\n\n        @apply --app-datepicker-each-list-of-years;\n      }\n      .each-list-of-years:hover {\n        cursor: pointer;\n      }\n      .each-list-of-years.is-selected {\n        font-size: 24px;\n        font-weight: 700;\n        color: var(--app-datepicker-selected-year-color, #009688);\n        background-color: var(--app-datepicker-selected-year-bg);\n\n        @apply --app-datepicker-selected-each-list-of-years;\n      }\n\n      /* paper-icon-button */\n      paper-icon-button {\n        color: var(--app-datepicker-icon-button-color, #737373);\n        --paper-icon-button-ink-color: var(\n          --app-datepicker-icon-button-ink-color,\n          #737373\n        );\n      }\n\n      /* content tag selector */\n      .buttons {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-pack: end;\n        -webkit-justify-content: flex-end;\n        justify-content: flex-end;\n\n        color: var(--app-datepicker-button-color, #009688);\n        position: relative;\n        padding: 8px 8px 8px 24px;\n        margin: 0;\n        font-size: 12px;\n        font-weight: 500;\n\n        --paper-button-ink-color: var(\n          --app-datepicker-button-ink-color,\n          #737373\n        );\n\n        @apply --app-datepicker-buttons;\n      }\n\n      /* will-change: transform, however lag on the first time */\n      .nav-month-year,\n      .days-of-week,\n      .days-of-month {\n        will-change: transform;\n        -webkit-transform: translate3d(0px, 0px, 0px);\n        transform: translate3d(0px, 0px, 0px);\n        -webkit-backface-visibility: hidden;\n        backface-visibility: hidden;\n      }\n\n      iron-list {\n        --iron-list-items-container: {\n          -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n          -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n        }\n      }\n\n      /* landscape */\n      @media all and (orientation: landscape) {\n        :host(.horizontal-view) #dp.datepicker,\n        :host(:not(.vertical-view)) #dp.datepicker {\n          display: -ms-flexbox;\n          display: -webkit-flex;\n          display: flex;\n          -ms-flex-direction: row;\n          -webkit-flex-direction: row;\n          flex-direction: row;\n\n          width: 512px;\n          height: 241px;\n        }\n        :host(.horizontal-view) #dp.datepicker.with-buttons,\n        :host(:not(.vertical-view)) #dp.datepicker.with-buttons {\n          height: 288px;\n        }\n        :host(.horizontal-view) iron-selector.selected-fulldate,\n        :host(:not(.vertical-view)) iron-selector.selected-fulldate {\n          /* Fixed for IE11, Edge */\n          min-width: 164px;\n          width: calc(100% / 3 + 48px);\n          max-width: 164px;\n          height: 100%;\n        }\n        :host(:not(.vertical-view)) .selected-date {\n          display: -ms-flexbox;\n          display: -webkit-flex;\n          display: flex;\n          -ms-flex-direction: column;\n          -webkit-flex-direction: column;\n          flex-direction: column;\n          -ms-flex-align: start;\n          -webkit-align-items: flex-start;\n          align-items: flex-start;\n          -ms-flex-pack: start;\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n        }\n        /* Fix for IE11 */\n        :host(:not(.vertical-view)) .selected-date > div {\n          width: 100%;\n          word-wrap: break-word;\n        }\n        /* Hack for Edge 12+ */\n        @supports (-ms-accelerator: true) {\n          :host(:not(.vertical-view)) .selected-date > div {\n            white-space: pre-wrap;\n          }\n        }\n\n        :host(.horizontal-view) neon-animated-pages.fullcalendar,\n        :host(:not(.vertical-view)) neon-animated-pages.fullcalendar {\n          height: 100%;\n        }\n        :host(.horizontal-view) .calendar-view,\n        :host(:not(.vertical-view)) .calendar-view {\n          padding-bottom: 0;\n        }\n        :host(.horizontal-view) .navigator,\n        :host(:not(.vertical-view)) .navigator {\n          padding: 2px 10px;\n          margin-top: 0;\n        }\n        :host(.horizontal-view) .each-days-of-week,\n        :host(:not(.vertical-view)) .each-days-of-week {\n          width: calc(100% / 7 - 20px);\n          padding: 0;\n          margin-left: 10px;\n          margin-right: 10px;\n        }\n        :host(:not(.vertical-view)) .days-of-month {\n          margin-top: 8px;\n        }\n        :host(.horizontal-view) .each-days-of-month,\n        :host(:not(.vertical-view)) .each-days-of-month {\n          height: 29px;\n          margin-left: 10px;\n          margin-right: 10px;\n          width: calc(100% / 7 - 20px);\n        }\n      }\n      /* End of landscape @media */\n\n      /* dark-theme */\n      :host(.dark-theme) {\n        background-color: var(--app-datepicker-bg, #424242);\n      }\n      :host(.dark-theme) iron-selector.selected-fulldate {\n        color: var(--app-datepicker-selection-color, #9e9e9e);\n        background-color: var(--app-datepicker-selection-bg, #555);\n      }\n      :host(.dark-theme) .selected-year.iron-selected,\n      :host(.dark-theme) .selected-date.iron-selected {\n        color: var(--app-datepicker-iron-selected, #f5f5f5);\n      }\n      :host(.dark-theme) neon-animated-pages.fullcalendar {\n        color: var(--app-datepicker-calendar-color, #f5f5f5);\n        background-color: var(--app-datepicker-calendar-bg, #424242);\n      }\n      :host(.dark-theme) .days-of-week {\n        color: var(--app-datepicker-weekdays-color, #7c7c7c);\n      }\n      :host(.dark-theme)\n        div\n        > .days-of-month\n        > .each-days-of-month.chosen-days-of-month {\n        color: var(--app-datepicker-selected-day-color, #555);\n        background-color: var(--app-datepicker-selected-day-bg, #80cbc4);\n      }\n      :host(.dark-theme) .days-of-month > .each-days-of-month.is-today {\n        color: var(--app-datepicker-today-color, #80cbc4);\n      }\n      :host(.dark-theme) .days-of-month > .each-days-of-month.is-disabled-day {\n        color: var(--app-datepicker-disabled-color, #ffff00);\n      }\n      :host(.dark-theme) .each-list-of-years.is-selected {\n        background-color: var(\n          --app-datepicker-selected-year-bg,\n          rgba(0, 0, 0, 0)\n        );\n        color: var(--app-datepicker-selected-year-color, #80cbc4);\n        font-size: 26px;\n        font-weight: 500;\n      }\n      :host(.dark-theme) paper-icon-button {\n        color: var(--app-datepicker-icon-button-color, #ffff00);\n        --paper-icon-button-ink-color: var(\n          --app-datepicker-icon-button-ink-color,\n          #212121\n        );\n      }\n      :host(.dark-theme) ::slotted(paper-button) {\n        color: var(--app-datepicker-button-color, #80cbc4);\n        --paper-button-ink-color: var(\n          --app-datepicker-button-ink-color,\n          #bcbcbc\n        );\n      }\n\n      /* goog theme */\n      :host(.goog-theme) {\n        background-color: var(--app-datepicker-bg, #212121);\n      }\n\n      :host(.goog-theme) iron-selector.selected-fulldate {\n        color: var(--app-datepicker-selection-color, #fff);\n        background-color: var(--app-datepicker-selection-bg, #212121);\n      }\n      :host(.goog-theme) .selected-year.iron-selected,\n      :host(.goog-theme) .selected-date.iron-selected {\n        color: var(--app-datepicker-iron-selected, #da4336);\n      }\n      :host(.goog-theme) neon-animated-pages.fullcalendar {\n        color: var(--app-datepicker-calendar-color, #fff);\n        background-color: var(--app-datepicker-calendar-bg, #212121);\n      }\n      :host(.goog-theme) .days-of-week {\n        color: var(--app-datepicker-weekdays-color, #9e9e9e);\n      }\n      :host(.goog-theme)\n        div\n        > .days-of-month\n        > .each-days-of-month.chosen-days-of-month {\n        color: var(--app-datepicker-selected-day-color, #fff);\n        background-color: var(--app-datepicker-selected-day-bg, #da4336);\n      }\n      :host(.goog-theme) .days-of-month > .each-days-of-month.is-today {\n        color: var(--app-datepicker-today-color, #da4336);\n      }\n      :host(.goog-theme) .days-of-month > .each-days-of-month.is-disabled-day {\n        color: var(--app-datepicker-disabled-color, #646464);\n      }\n      :host(.goog-theme) .each-list-of-years.is-selected {\n        background-color: var(\n          --app-datepicker-selected-year-bg,\n          rgba(0, 0, 0, 0)\n        );\n        color: var(--app-datepicker-selected-year-color, #da4336);\n        font-size: 26px;\n        font-weight: 500;\n      }\n      :host(.goog-theme) paper-icon-button {\n        color: var(--app-datepicker-icon-button-color, #da4336);\n        --paper-icon-button-ink-color: var(\n          --app-datepicker-icon-button-ink-color,\n          #616161\n        );\n      }\n      :host(.goog-theme) ::slotted(paper-button) {\n        color: var(--app-datepicker-button-color, #da4336);\n        --paper-button-ink-color: var(\n          --app-datepicker-button-ink-color,\n          #616161\n        );\n      }\n    </style>\n\n    <div id=\"dp\" class=\"datepicker\">\n      <iron-selector\n        class=\"selected-fulldate\"\n        selected=\"{{_activeView}}\"\n        attr-for-selected=\"view\"\n        on-selected-changed=\"_onIronSelectorSelectedChanged\"\n        fallback-selection=\"calendar\"\n      >\n        <div\n          id=\"showSelectedYear\"\n          class=\"selected-year\"\n          tabindex=\"0\"\n          view=\"year\"\n          aria-label=\"year view\"\n        >\n          [[_showSelectedYear]]\n        </div>\n        <div class=\"selected-date\" view=\"calendar\" tabindex=\"0\">\n          <div aria-label=\"calendar view\">[[_shortSelectedDate]]</div>\n        </div>\n      </iron-selector>\n\n      <neon-animated-pages\n        class=\"fullcalendar\"\n        selected=\"[[_activeView]]\"\n        attr-for-selected=\"view\"\n        entry-animation=\"[[pageEntryAnimation]]\"\n        exit-animation=\"[[pageExitAnimation]]\"\n        on-neon-animation-finish=\"_onAnimationFinish\"\n      >\n        <div class=\"calendar-view\" view=\"calendar\">\n          <div class=\"navigator\">\n            <paper-icon-button\n              icon=\"datepicker:chevron-left\"\n              on-tap=\"_decrementMonth\"\n              noink=\"[[noAnimation]]\"\n            ></paper-icon-button>\n            <div id=\"navMonthYear\" class=\"nav-month-year\">\n              [[_activeMonthYear]]\n            </div>\n            <paper-icon-button\n              icon=\"datepicker:chevron-right\"\n              on-tap=\"_incrementMonth\"\n              noink=\"[[noAnimation]]\"\n            ></paper-icon-button>\n          </div>\n\n          <div id=\"daysOfWeek\" class=\"days-of-week\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_daysOfWeek]]\"\n              index-as=\"index\"\n              strip-whitespace=\"\"\n            >\n              <div class=\"each-days-of-week\">[[item]]</div>\n            </template>\n          </div>\n\n          <div\n            id=\"daysOfMonth\"\n            class=\"days-of-month\"\n            on-tap=\"_chooseDaysOfMonth\"\n          >\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_daysOfMonth]]\"\n              index-as=\"index\"\n              strip-whitespace=\"\"\n            >\n              <div\n                class$=\"each-days-of-month[[_isToday(item.index, _activeYear, _activeMonth)]][[_isEmptyDate(item.index)]][[_isChosenDaysOfMonth(item.index, _selectedYear, _selectedMonth, _selectedDate)]][[_isDisableDays(index, firstDayOfWeek, minDate, maxDate, item.index, _shiftedDisableDays.*, disableDates.*)]]\"\n                index=\"[[index]]\"\n                date=\"[[item.index]]\"\n                tabindex$=\"[[_shouldTabIndex(index, firstDayOfWeek, minDate, maxDate, item.index, _shiftedDisableDays.*, disableDates.*)]]\"\n                aria-disabled$=\"[[_shouldAriaDisabled(index, firstDayOfWeek, minDate, maxDate, item.index, _shiftedDisableDays.*, disableDates.*)]]\"\n                aria-label$=\"[[item.index]]\"\n              >\n                [[item.date]]\n              </div>\n            </template>\n          </div>\n\n          <div class=\"buttons\">\n            <slot name=\"dismiss-button\"></slot>\n            <slot name=\"confirm-button\"></slot>\n          </div>\n        </div>\n\n        <template\n          is=\"dom-if\"\n          if=\"[[_isListRendered]]\"\n          restamp=\"true\"\n          on-dom-change=\"_onListRendered\"\n          strip-whitespace=\"\"\n        >\n          <iron-list\n            id=\"listOfYears\"\n            items=\"[[_listOfYears]]\"\n            view=\"year\"\n            on-neon-animation-finish=\"_onAnimationFinish\"\n            selection-enabled=\"\"\n          >\n            <template strip-whitespace=\"\">\n              <div\n                class$=\"each-list-of-years[[_isListOfYearsSelected(_selectedYear, item.year)]]\"\n                tabindex$=\"[[tabIndex]]\"\n                aria-label$=\"[[item.year]]\"\n                label$=\"[[item.year]]\"\n                on-tap=\"_goCalendar\"\n                on-keydown=\"_goCalendar\"\n              >\n                [[item.year]]\n              </div>\n            </template>\n          </iron-list>\n        </template>\n      </neon-animated-pages>\n    </div>\n  "], ["\n    <style>\n      :host {\n        display: block;\n        position: relative;\n        box-sizing: border-box;\n\n        -webkit-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n        background: var(--app-datepicker-bg, #fafafa);\n\n        @apply --app-datepicker;\n      }\n\n      * {\n        box-sizing: border-box;\n      }\n\n      .datepicker {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n\n        position: relative;\n        width: 300px;\n        height: 384px;\n        max-height: 384px;\n      }\n      .datepicker.with-buttons {\n        height: 431px;\n        max-height: 431px;\n      }\n\n      iron-selector.selected-fulldate {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n\n        min-height: 84px;\n        padding: 8px 16px;\n        color: var(--app-datepicker-selection-color, #b2dfdb);\n        background-color: var(--app-datepicker-selection-bg, #009688);\n      }\n      .selected-year.iron-selected,\n      .selected-date.iron-selected {\n        color: var(--app-datepicker-iron-selected, #fefefe);\n      }\n      .selected-year {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n\n        font-size: 14px;\n        font-weight: 800;\n        height: 34px;\n\n        @apply --app-datepicker-selected-year;\n      }\n      .selected-date {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex: 1 1 auto;\n        -webkit-flex: 1 1 auto;\n        flex: 1 1 auto;\n\n        font-size: 32px;\n        font-weight: 800;\n\n        @apply --app-datepicker-selected-date;\n      }\n      .selected-year:hover,\n      .selected-date > div:hover {\n        cursor: pointer;\n      }\n\n      neon-animated-pages.fullcalendar {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: column;\n        -webkit-flex-direction: column;\n        flex-direction: column;\n\n        width: 100%;\n        height: 100%;\n        overflow: hidden;\n        color: var(--app-datepicker-calendar-color, #000);\n        background-color: var(--app-datepicker-calendar-bg, #fafafa);\n      }\n      .navigator {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        max-height: 46px;\n        padding: 3px 10px;\n        position: relative;\n        margin-top: 8px;\n      }\n      .nav-month-year {\n        -ms-flex: 1 1 auto;\n        -webkit-flex: 1 1 auto;\n        flex: 1 1 auto;\n\n        font-size: 14px;\n        font-weight: 500;\n        text-align: center;\n\n        @apply --app-datepicker-nav-month-year;\n      }\n      .days-of-week {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        color: var(--app-datepicker-weekdays-color, #848484);\n        font-size: 12px;\n\n        @apply --app-datepicker-days-of-week;\n      }\n      .each-days-of-week {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        padding: 13px;\n        max-height: 32px;\n        width: 41px;\n      }\n      .days-of-month {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-wrap: wrap;\n        -webkit-flex-wrap: wrap;\n        flex-wrap: wrap;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        font-size: 13px;\n\n        @apply --app-datepicker-days-of-month;\n      }\n      .each-days-of-month {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        position: relative;\n        height: 35px;\n        width: 35px;\n        margin-left: 3px;\n        margin-right: 3px;\n      }\n      div > .days-of-month > .each-days-of-month.chosen-days-of-month {\n        border-radius: 50%;\n        background-color: var(--app-datepicker-selected-day-bg, #009688);\n        color: var(--app-datepicker-selected-day-color, #fff);\n      }\n      .days-of-month > .each-days-of-month.is-today {\n        color: var(--app-datepicker-today-color, #009688);\n      }\n      .days-of-month > .each-days-of-month.is-disabled-day {\n        color: var(--app-datepicker-disabled-color, #9e9e9e);\n      }\n\n      /* outline: none for non-selectable and disabled days */\n      .days-of-month > .each-days-of-month.is-disabled-day,\n      .days-of-month > .each-days-of-month.is-non-selectable {\n        outline: none;\n      }\n      /* Date hover styling */\n      .days-of-month\n        > .each-days-of-month:hover:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month),\n      .days-of-month\n        > .each-days-of-month:focus:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month) {\n        color: var(--app-datepicker-date-hover-color, #f5f5f5);\n        background-color: var(\n          --app-datepicker-date-hover-background-color,\n          #80cbc4\n        );\n        border-radius: 50%;\n        cursor: pointer;\n      }\n      :host(.dark-theme)\n        .days-of-month\n        > .each-days-of-month:hover:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month),\n      :host(.dark-theme)\n        .days-of-month\n        > .each-days-of-month:focus:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month) {\n        color: var(--app-datepicker-date-hover-color, #777);\n        background-color: var(\n          --app-datepicker-date-hover-background-color,\n          #b2dfdb\n        );\n      }\n      :host(.goog-theme)\n        .days-of-month\n        > .each-days-of-month:hover:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month),\n      :host(.goog-theme)\n        .days-of-month\n        > .each-days-of-month:focus:not(.is-disabled-day):not(.is-non-selectable):not(.chosen-days-of-month) {\n        color: var(--app-datepicker-date-hover-color, #f5f5f5);\n        background-color: var(\n          --app-datepicker-date-hover-background-color,\n          #e57373\n        );\n      }\n\n      /* Focus ring styling - replace outline with background-color */\n      .each-list-of-years:focus,\n      .each-days-of-month:focus {\n        outline: 0;\n      }\n      .each-list-of-years:focus,\n      .each-list-of-years:hover,\n      .each-list-of-years.is-selected:focus,\n      .each-list-of-years.is-selected:hover {\n        font-weight: 700;\n        background-color: var(\n          --app-datepicker-year-hover-background-color,\n          #e0e0e0\n        );\n\n        @apply --app-datepicker-year-hover;\n      }\n      :host(.dark-theme) .each-list-of-years:focus,\n      :host(.dark-theme) .each-list-of-years:hover,\n      :host(.dark-theme) .each-list-of-years.is-selected:focus,\n      :host(.dark-theme) .each-list-of-years.is-selected:hover {\n        font-weight: 700;\n        background-color: var(\n          --app-datepicker-year-hover-background-color,\n          #616161\n        );\n\n        @apply --app-datepicker-year-hover;\n      }\n      :host(.goog-theme) .each-list-of-years:focus,\n      :host(.goog-theme) .each-list-of-years:hover,\n      :host(.goog-theme) .each-list-of-years.is-selected:focus,\n      :host(.goog-theme) .each-list-of-years.is-selected:hover {\n        font-weight: 700;\n        background-color: var(\n          --app-datepicker-year-hover-background-color,\n          #424242\n        );\n\n        @apply --app-datepicker-year-hover;\n      }\n\n      .each-list-of-years {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-align: center;\n        -webkit-align-items: center;\n        align-items: center;\n        -ms-flex-pack: center;\n        -webkit-justify-content: center;\n        justify-content: center;\n\n        height: 64px;\n        font-size: 16px;\n\n        @apply --app-datepicker-each-list-of-years;\n      }\n      .each-list-of-years:hover {\n        cursor: pointer;\n      }\n      .each-list-of-years.is-selected {\n        font-size: 24px;\n        font-weight: 700;\n        color: var(--app-datepicker-selected-year-color, #009688);\n        background-color: var(--app-datepicker-selected-year-bg);\n\n        @apply --app-datepicker-selected-each-list-of-years;\n      }\n\n      /* paper-icon-button */\n      paper-icon-button {\n        color: var(--app-datepicker-icon-button-color, #737373);\n        --paper-icon-button-ink-color: var(\n          --app-datepicker-icon-button-ink-color,\n          #737373\n        );\n      }\n\n      /* content tag selector */\n      .buttons {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n        -ms-flex-pack: end;\n        -webkit-justify-content: flex-end;\n        justify-content: flex-end;\n\n        color: var(--app-datepicker-button-color, #009688);\n        position: relative;\n        padding: 8px 8px 8px 24px;\n        margin: 0;\n        font-size: 12px;\n        font-weight: 500;\n\n        --paper-button-ink-color: var(\n          --app-datepicker-button-ink-color,\n          #737373\n        );\n\n        @apply --app-datepicker-buttons;\n      }\n\n      /* will-change: transform, however lag on the first time */\n      .nav-month-year,\n      .days-of-week,\n      .days-of-month {\n        will-change: transform;\n        -webkit-transform: translate3d(0px, 0px, 0px);\n        transform: translate3d(0px, 0px, 0px);\n        -webkit-backface-visibility: hidden;\n        backface-visibility: hidden;\n      }\n\n      iron-list {\n        --iron-list-items-container: {\n          -webkit-transform: translate3d(0px, 0px, 0px);\n          transform: translate3d(0px, 0px, 0px);\n          -webkit-backface-visibility: hidden;\n          backface-visibility: hidden;\n        }\n      }\n\n      /* landscape */\n      @media all and (orientation: landscape) {\n        :host(.horizontal-view) #dp.datepicker,\n        :host(:not(.vertical-view)) #dp.datepicker {\n          display: -ms-flexbox;\n          display: -webkit-flex;\n          display: flex;\n          -ms-flex-direction: row;\n          -webkit-flex-direction: row;\n          flex-direction: row;\n\n          width: 512px;\n          height: 241px;\n        }\n        :host(.horizontal-view) #dp.datepicker.with-buttons,\n        :host(:not(.vertical-view)) #dp.datepicker.with-buttons {\n          height: 288px;\n        }\n        :host(.horizontal-view) iron-selector.selected-fulldate,\n        :host(:not(.vertical-view)) iron-selector.selected-fulldate {\n          /* Fixed for IE11, Edge */\n          min-width: 164px;\n          width: calc(100% / 3 + 48px);\n          max-width: 164px;\n          height: 100%;\n        }\n        :host(:not(.vertical-view)) .selected-date {\n          display: -ms-flexbox;\n          display: -webkit-flex;\n          display: flex;\n          -ms-flex-direction: column;\n          -webkit-flex-direction: column;\n          flex-direction: column;\n          -ms-flex-align: start;\n          -webkit-align-items: flex-start;\n          align-items: flex-start;\n          -ms-flex-pack: start;\n          -webkit-justify-content: flex-start;\n          justify-content: flex-start;\n        }\n        /* Fix for IE11 */\n        :host(:not(.vertical-view)) .selected-date > div {\n          width: 100%;\n          word-wrap: break-word;\n        }\n        /* Hack for Edge 12+ */\n        @supports (-ms-accelerator: true) {\n          :host(:not(.vertical-view)) .selected-date > div {\n            white-space: pre-wrap;\n          }\n        }\n\n        :host(.horizontal-view) neon-animated-pages.fullcalendar,\n        :host(:not(.vertical-view)) neon-animated-pages.fullcalendar {\n          height: 100%;\n        }\n        :host(.horizontal-view) .calendar-view,\n        :host(:not(.vertical-view)) .calendar-view {\n          padding-bottom: 0;\n        }\n        :host(.horizontal-view) .navigator,\n        :host(:not(.vertical-view)) .navigator {\n          padding: 2px 10px;\n          margin-top: 0;\n        }\n        :host(.horizontal-view) .each-days-of-week,\n        :host(:not(.vertical-view)) .each-days-of-week {\n          width: calc(100% / 7 - 20px);\n          padding: 0;\n          margin-left: 10px;\n          margin-right: 10px;\n        }\n        :host(:not(.vertical-view)) .days-of-month {\n          margin-top: 8px;\n        }\n        :host(.horizontal-view) .each-days-of-month,\n        :host(:not(.vertical-view)) .each-days-of-month {\n          height: 29px;\n          margin-left: 10px;\n          margin-right: 10px;\n          width: calc(100% / 7 - 20px);\n        }\n      }\n      /* End of landscape @media */\n\n      /* dark-theme */\n      :host(.dark-theme) {\n        background-color: var(--app-datepicker-bg, #424242);\n      }\n      :host(.dark-theme) iron-selector.selected-fulldate {\n        color: var(--app-datepicker-selection-color, #9e9e9e);\n        background-color: var(--app-datepicker-selection-bg, #555);\n      }\n      :host(.dark-theme) .selected-year.iron-selected,\n      :host(.dark-theme) .selected-date.iron-selected {\n        color: var(--app-datepicker-iron-selected, #f5f5f5);\n      }\n      :host(.dark-theme) neon-animated-pages.fullcalendar {\n        color: var(--app-datepicker-calendar-color, #f5f5f5);\n        background-color: var(--app-datepicker-calendar-bg, #424242);\n      }\n      :host(.dark-theme) .days-of-week {\n        color: var(--app-datepicker-weekdays-color, #7c7c7c);\n      }\n      :host(.dark-theme)\n        div\n        > .days-of-month\n        > .each-days-of-month.chosen-days-of-month {\n        color: var(--app-datepicker-selected-day-color, #555);\n        background-color: var(--app-datepicker-selected-day-bg, #80cbc4);\n      }\n      :host(.dark-theme) .days-of-month > .each-days-of-month.is-today {\n        color: var(--app-datepicker-today-color, #80cbc4);\n      }\n      :host(.dark-theme) .days-of-month > .each-days-of-month.is-disabled-day {\n        color: var(--app-datepicker-disabled-color, #ffff00);\n      }\n      :host(.dark-theme) .each-list-of-years.is-selected {\n        background-color: var(\n          --app-datepicker-selected-year-bg,\n          rgba(0, 0, 0, 0)\n        );\n        color: var(--app-datepicker-selected-year-color, #80cbc4);\n        font-size: 26px;\n        font-weight: 500;\n      }\n      :host(.dark-theme) paper-icon-button {\n        color: var(--app-datepicker-icon-button-color, #ffff00);\n        --paper-icon-button-ink-color: var(\n          --app-datepicker-icon-button-ink-color,\n          #212121\n        );\n      }\n      :host(.dark-theme) ::slotted(paper-button) {\n        color: var(--app-datepicker-button-color, #80cbc4);\n        --paper-button-ink-color: var(\n          --app-datepicker-button-ink-color,\n          #bcbcbc\n        );\n      }\n\n      /* goog theme */\n      :host(.goog-theme) {\n        background-color: var(--app-datepicker-bg, #212121);\n      }\n\n      :host(.goog-theme) iron-selector.selected-fulldate {\n        color: var(--app-datepicker-selection-color, #fff);\n        background-color: var(--app-datepicker-selection-bg, #212121);\n      }\n      :host(.goog-theme) .selected-year.iron-selected,\n      :host(.goog-theme) .selected-date.iron-selected {\n        color: var(--app-datepicker-iron-selected, #da4336);\n      }\n      :host(.goog-theme) neon-animated-pages.fullcalendar {\n        color: var(--app-datepicker-calendar-color, #fff);\n        background-color: var(--app-datepicker-calendar-bg, #212121);\n      }\n      :host(.goog-theme) .days-of-week {\n        color: var(--app-datepicker-weekdays-color, #9e9e9e);\n      }\n      :host(.goog-theme)\n        div\n        > .days-of-month\n        > .each-days-of-month.chosen-days-of-month {\n        color: var(--app-datepicker-selected-day-color, #fff);\n        background-color: var(--app-datepicker-selected-day-bg, #da4336);\n      }\n      :host(.goog-theme) .days-of-month > .each-days-of-month.is-today {\n        color: var(--app-datepicker-today-color, #da4336);\n      }\n      :host(.goog-theme) .days-of-month > .each-days-of-month.is-disabled-day {\n        color: var(--app-datepicker-disabled-color, #646464);\n      }\n      :host(.goog-theme) .each-list-of-years.is-selected {\n        background-color: var(\n          --app-datepicker-selected-year-bg,\n          rgba(0, 0, 0, 0)\n        );\n        color: var(--app-datepicker-selected-year-color, #da4336);\n        font-size: 26px;\n        font-weight: 500;\n      }\n      :host(.goog-theme) paper-icon-button {\n        color: var(--app-datepicker-icon-button-color, #da4336);\n        --paper-icon-button-ink-color: var(\n          --app-datepicker-icon-button-ink-color,\n          #616161\n        );\n      }\n      :host(.goog-theme) ::slotted(paper-button) {\n        color: var(--app-datepicker-button-color, #da4336);\n        --paper-button-ink-color: var(\n          --app-datepicker-button-ink-color,\n          #616161\n        );\n      }\n    </style>\n\n    <div id=\"dp\" class=\"datepicker\">\n      <iron-selector\n        class=\"selected-fulldate\"\n        selected=\"{{_activeView}}\"\n        attr-for-selected=\"view\"\n        on-selected-changed=\"_onIronSelectorSelectedChanged\"\n        fallback-selection=\"calendar\"\n      >\n        <div\n          id=\"showSelectedYear\"\n          class=\"selected-year\"\n          tabindex=\"0\"\n          view=\"year\"\n          aria-label=\"year view\"\n        >\n          [[_showSelectedYear]]\n        </div>\n        <div class=\"selected-date\" view=\"calendar\" tabindex=\"0\">\n          <div aria-label=\"calendar view\">[[_shortSelectedDate]]</div>\n        </div>\n      </iron-selector>\n\n      <neon-animated-pages\n        class=\"fullcalendar\"\n        selected=\"[[_activeView]]\"\n        attr-for-selected=\"view\"\n        entry-animation=\"[[pageEntryAnimation]]\"\n        exit-animation=\"[[pageExitAnimation]]\"\n        on-neon-animation-finish=\"_onAnimationFinish\"\n      >\n        <div class=\"calendar-view\" view=\"calendar\">\n          <div class=\"navigator\">\n            <paper-icon-button\n              icon=\"datepicker:chevron-left\"\n              on-tap=\"_decrementMonth\"\n              noink=\"[[noAnimation]]\"\n            ></paper-icon-button>\n            <div id=\"navMonthYear\" class=\"nav-month-year\">\n              [[_activeMonthYear]]\n            </div>\n            <paper-icon-button\n              icon=\"datepicker:chevron-right\"\n              on-tap=\"_incrementMonth\"\n              noink=\"[[noAnimation]]\"\n            ></paper-icon-button>\n          </div>\n\n          <div id=\"daysOfWeek\" class=\"days-of-week\">\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_daysOfWeek]]\"\n              index-as=\"index\"\n              strip-whitespace=\"\"\n            >\n              <div class=\"each-days-of-week\">[[item]]</div>\n            </template>\n          </div>\n\n          <div\n            id=\"daysOfMonth\"\n            class=\"days-of-month\"\n            on-tap=\"_chooseDaysOfMonth\"\n          >\n            <template\n              is=\"dom-repeat\"\n              items=\"[[_daysOfMonth]]\"\n              index-as=\"index\"\n              strip-whitespace=\"\"\n            >\n              <div\n                class\\$=\"each-days-of-month[[_isToday(item.index, _activeYear, _activeMonth)]][[_isEmptyDate(item.index)]][[_isChosenDaysOfMonth(item.index, _selectedYear, _selectedMonth, _selectedDate)]][[_isDisableDays(index, firstDayOfWeek, minDate, maxDate, item.index, _shiftedDisableDays.*, disableDates.*)]]\"\n                index=\"[[index]]\"\n                date=\"[[item.index]]\"\n                tabindex\\$=\"[[_shouldTabIndex(index, firstDayOfWeek, minDate, maxDate, item.index, _shiftedDisableDays.*, disableDates.*)]]\"\n                aria-disabled\\$=\"[[_shouldAriaDisabled(index, firstDayOfWeek, minDate, maxDate, item.index, _shiftedDisableDays.*, disableDates.*)]]\"\n                aria-label\\$=\"[[item.index]]\"\n              >\n                [[item.date]]\n              </div>\n            </template>\n          </div>\n\n          <div class=\"buttons\">\n            <slot name=\"dismiss-button\"></slot>\n            <slot name=\"confirm-button\"></slot>\n          </div>\n        </div>\n\n        <template\n          is=\"dom-if\"\n          if=\"[[_isListRendered]]\"\n          restamp=\"true\"\n          on-dom-change=\"_onListRendered\"\n          strip-whitespace=\"\"\n        >\n          <iron-list\n            id=\"listOfYears\"\n            items=\"[[_listOfYears]]\"\n            view=\"year\"\n            on-neon-animation-finish=\"_onAnimationFinish\"\n            selection-enabled=\"\"\n          >\n            <template strip-whitespace=\"\">\n              <div\n                class\\$=\"each-list-of-years[[_isListOfYearsSelected(_selectedYear, item.year)]]\"\n                tabindex\\$=\"[[tabIndex]]\"\n                aria-label\\$=\"[[item.year]]\"\n                label\\$=\"[[item.year]]\"\n                on-tap=\"_goCalendar\"\n                on-keydown=\"_goCalendar\"\n              >\n                [[item.year]]\n              </div>\n            </template>\n          </iron-list>\n        </template>\n      </neon-animated-pages>\n    </div>\n  "]);

    _templateObject_7f6e9b20e48111e9b5c6f7b0a264592f = function _templateObject_7f6e9b20e48111e9b5c6f7b0a264592f() {
      return data;
    };

    return data;
  }

  /**
  Material Design: [Pickers](https://www.google.com/design/spec/components/pickers.html#pickers-date-pickers)
  
  An custom Polymer element created to provide a datepicker element that is more compelling and rich with features.
  
  Example:
  
      <app-datepicker></app-datepicker>
      <app-datepicker-dialog></app-datepicker-dialog>
      <app-datepicker-dialog modal></app-datepicker-dialog>
      <app-datepicker-dialog with-backdrop></app-datepicker-dialog>
      <app-datepicker view="horizontal"></app-datepicker>
      <app-datepicker theme="dark-theme"></app-datepicker>
      <app-datepicker confirm-label="confirm date" dismiss-label="cancel"></app-datepicker>
  
  `app-datepicker` provides a regular datepicker element.
  While `app-datepicker-dialog` has a `app-datepicker` being wrapped inside a dialog.
  
  ~~### ( Coming soon!) Generating your own boilerplate code of the element `app-datepicker` or `app-datepicker-dialog`~~
  
  ~~At the end of the demo, there is a section where user can play around with to generate your own boilerplate code with the attributes provided. Let's go and check out the demo!~~
  
  ### Styling
  
  By default, the datepicker is in `light-theme` and now you are able to style almost all possible sections of the datepicker with your own choices of color.
  
  **__ ** Note: As of release v2.4.0 the datepicker includes some basic themes that can be set via `theme` property: `dark-theme`, `light-theme`, or `goog-theme`.__*
  
  Style the datepicker with CSS as you would a normal DOM element.
  
      app-datepicker-dialog#darkThemedDialog {
        background: #424242;
        --app-datepicker-bg: #424242;
        --app-datepicker-selection-bg: #555555;
        --app-datepicker-selection-color: #cccccc;
        --app-datepicker-iron-selected: #FFFFFF;
        --app-datepicker-calendar-bg: #424242;
        --app-datepicker-calendar-color: #ffffff;
        --app-datepicker-weekdays-color: #c6c6c6;
        --app-datepicker-selected-day-bg: #80CBC4;
        --app-datepicker-selected-day-color: #555555;
        --app-datepicker-selected-year-bg: #f5f5f5;
        --app-datepicker-selected-year-color: #80CBC4;
        --app-datepicker-today-color: #80CBC4;
        --app-datepicker-disabled-color: #ffff00;
        --app-datepicker-icon-button-color: #ffff00;
        --app-datepicker-icon-button-ink-color: #ffff00;
        --app-datepicker-button-color: #80CBC4;
        --app-datepicker-button-ink-color: #bcbcbc;
      }
  
  The following custom properties and mixin are also available for styling:
  
  Custom property | Description | Default
  ----------------|-------------|----------
  `--app-datepicker-bg` | Background color of the datepicker | #fafafa
  `--app-datepicker-selection-bg` | Background color of the display section (selectionView) | #009688
  `--app-datepicker-selection-color` | Text color of the display section (selectionView) | #b2dfdb
  `--app-datepicker-iron-selected` | Text color of the view selector | #fefefe
  `--app-datepicker-calendar-bg` | Background color of calendar section | #fafafa
  `--app-datepicker-calendar-color` | Text color of calendar section | #000
  `--app-datepicker-weekdays-color` | Text color of weekdays | #9b9b9b
  `--app-datepicker-selected-day-bg` | Background color of selected day | #009688
  `--app-datepicker-selected-day-color` | Text color of selected day | #fff
  `--app-datepicker-selected-year-bg` | Background color of selected year in year list | #f5f5f5
  `--app-datepicker-selected-year-color` | Text color of selected year in year list | #009688
  `--app-datepicker-today-color` | Text color of today's day | #009688
  `--app-datepicker-disabled-color` | Text color of disabled days | #9e9e9e
  `--app-datepicker-icon-buttons-color` | Text color of `paper-icon-button` | #737373
  `--app-datepicker-icon-button-ink-color` | Ink color of `paper-icon-button` | #737373
  `--app-datepicker-button-color` | Color of `paper-button` | #009688
  `--app-datepicker-button-ink-color` | Ink color of `paper-button` | #737373
  `--app-datepicker-date-hover-color` | Color of hovered date | #737373
  `--app-datepicker-date-hover-background-color` | Background color of hovered date | #737373
  `--app-datepicker-year-hover-background-color` | Background color of hovered year at year list view | {}
  `--app-datepicker` | Mixin applied to the datepicker | {}
  `--app-datepicker-buttons` | Mixin applied to the datepicker's buttons | {}
  `--app-datepicker-selected-year` | Mixin applied to the datepicker's selected year at calendar view | {}
  `--app-datepicker-selected-date` | Mixin applied to the datepicker's selected date at calendar view | {}
  `--app-datepicker-nav-month-year` | Mixin applied to the datepicker's nav-month-year | {}
  `--app-datepicker-days-of-week` | Mixin applied to the datepicker's days-of-week | {}
  `--app-datepicker-days-of-month` | Mixin applied to the datepicker's days-of-month | {}
  `--app-datepicker-each-list-of-years` | Mixin applied to the datepicker's each-list-of-years | {}
  `--app-datepicker-selected-each-list-of-years` | Mixin applied to the datepicker's selected year at year list view | {}
  `--app-datepicker-year-hover` | Mixin applied to the datepicker's hovered year at year list view | {}
  
  
  @author motss
  @element app-datepicker, app-datepicker-dialog
  * @demo demo/index.html
  */
  var AppDatepicker = (0, _polymerLegacy.Polymer)({
    _template: (0, _polymerLegacy.html)(_templateObject_7f6e9b20e48111e9b5c6f7b0a264592f()),
    is: "app-datepicker",
    behaviors: [_neonAnimationRunnerBehavior.NeonAnimationRunnerBehavior],
    properties: {
      /**
       * Set locale for the datepicker.
       */
      locale: {
        type: String,
        value: function value() {
          if (window.Intl) {
            return window.Intl && window.Intl.DateTimeFormat && window.Intl.DateTimeFormat().resolvedOptions && window.Intl.DateTimeFormat().resolvedOptions().locale || "en-US";
          }

          return "en-US";
        }
      },

      /**
       * This forcefully sets the view of the datepicker without respecting the orientation of the device.
       * Available options: `vertical`, `horizontal`.
       */
      view: String,

      /**
       * This is used to set a theme for the datepicker. By default, the `light-theme` is applied.
       * Other options are `dark-theme`, `goog-theme`.
       */
      theme: String,

      /**
       * First Day of the week. Numbered days: `0 (Sun)` to `6 (Sat)`.
       */
      firstDayOfWeek: {
        type: Number,
        value: 0
      },

      /**
       * Arrays of days need to be disabled for selection, numbered from
       * `0 (Sun)` to `6 (Sat)`. Eg. weekends, `disable-days="[0, 6]"`.
       */
      disableDays: {
        type: Array,
        value: function value() {
          return [6, 0];
        }
      },

      /**
       * Array of dates need to be disabled for selection.
       */
      disableDates: {
        type: Array,
        value: function value() {
          return [];
        }
      },

      /**
       * Minimum date for selection. Dates that are smaller than the minimum
       * date will be disabled for selection.
       */
      minDate: {
        type: String,
        value: "1000/00/01"
      },

      /**
       * Maximum date for selection. Dates that are larger than the maximum
       * date will be disabled for selection.
       */
      maxDate: {
        type: String,
        value: "9999/99/99"
      },

      /**
       * Format for the selected date. Default to `yyyy/mm/dd`. Eg. `2017/05/17`.
       */
      format: {
        type: String,
        value: "yyyy/mm/dd"
      },

      /**
       * Selected date in the default format of `yyyy/mm/dd`. Eg. `2017/05/17`.
       */
      date: {
        type: String,
        notify: true,
        readOnly: true
      },

      /**
       * inputDate accepts a standard date string. It will reflect the change to update the internal.
       */
      inputDate: String,

      /**
       * If true, no animation and transition on all elements.
       */
      noAnimation: Boolean,

      /**
       * Custom animation effect property when the page enters.
       */
      pageEntryAnimation: String,

      /**
       * Custom animation effect when the page exits.
       */
      pageExitAnimation: String,

      /**
       * Selected date will be formatted into long date. Eg. `Fri, May 12 2017`.
       */
      showLongDate: {
        type: Boolean,
        value: !1
      },

      /**
       * To indicate the input date is in an invalid format hence no date change is applied. Only use this with inputDate property.
       */
      invalidDate: {
        type: Boolean,
        notify: true,
        readOnly: true
      },

      /**
       * Auto update the `date` property when changed.
       */
      autoUpdateDate: {
        type: Boolean,
        value: !1
      },
      // Always reset selected date on dialog close. See https://github.com/motss/app-datepicker/issues/74.
      alwaysResetSelectedDateOnDialogClose: Boolean,
      // month names, literally.
      _monthNames: {
        type: Array,
        value: function value() {
          return ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
        }
      },
      _shiftedDisableDays: {
        type: Array,
        value: [6, 0]
      },
      _activeMonthYear: String,
      _shortSelectedDate: String,
      _showSelectedYear: String,
      _daysOfWeek: Array,
      _daysOfMonth: Array,
      _listOfYears: Array,
      _activeView: {
        type: String,
        value: "calendar"
      },
      _activeYear: {
        type: Number,
        value: function value() {
          return new Date().getFullYear();
        }
      },
      _activeMonth: {
        type: Number,
        value: function value() {
          return new Date().getMonth();
        }
      },
      _isIncrementMonth: Boolean,
      _isDecrementMonth: Boolean,
      _selectedYear: {
        type: Number,
        value: function value() {
          return new Date().getFullYear();
        }
      },
      _selectedMonth: {
        type: Number,
        value: function value() {
          return new Date().getMonth();
        }
      },
      _selectedDate: {
        type: Number,
        value: function value() {
          return new Date().getDate();
        }
      },
      _chosenDaysOfMonth: {
        type: Number,
        value: function value() {
          return new Date().getDate();
        }
      },
      _isListRendered: {
        type: Boolean,
        value: !1
      },
      _isSelectedDateConfirmed: Boolean,
      _format: {
        type: Object,
        value: function value() {
          return {
            y: "yyyy",
            m: "mm",
            d: "dd",
            s1: "/",
            s2: "/"
          };
        }
      }
    },
    observers: ["_computeDaysOfMonth(_activeYear, _activeMonth, firstDayOfWeek, locale)", "_computeSeparateFormat(format)", "_computeShowLongDate(showLongDate, locale)", "_updateToReflectExternalChange(inputDate)", "_updateThemeColor(theme)", "_updateDatepickerView(view)", "_computeDaysOfWeek(firstDayOfWeek, locale)", "_computeActiveMonthYear(_activeYear, _activeMonth, locale)", "_computeShortSelectedDate(_selectedYear, _selectedMonth, _selectedDate, locale)", "_computeShowSelectedYear(_selectedYear, locale)", "_computeShiftedDisableDays(firstDayOfWeek, disableDays.*)"],
    attached: function attached() {
      if (!this.noAnimation) {
        this.set("animationConfig", {
          incrementEntry: [{
            name: "slide-from-right-animation",
            node: this.$.daysOfWeek
          }, {
            name: "slide-from-right-animation",
            node: this.$.daysOfMonth
          }, {
            name: "datepicker-slide-from-right-animation",
            node: this.$.navMonthYear
          }],
          decrementEntry: [{
            name: "slide-from-left-animation",
            node: this.$.daysOfWeek
          }, {
            name: "slide-from-left-animation",
            node: this.$.daysOfMonth
          }, {
            name: "datepicker-slide-from-left-animation",
            node: this.$.navMonthYear
          }]
        });
        this.set("pageEntryAnimation", "fade-in-animation");
        this.set("pageExitAnimation", "fade-out-animation");
      } // NOTE: workaround to check for effectiveChildren[0] as paper-button outside of
      // this element will be queried as well even though outside of content tag.
      // Setup distributed children.


      var effectiveChildren = _flattenedNodesObserver.FlattenedNodesObserver.getFlattenedNodes(this).filter(function (n) {
        return n.nodeType === Node.ELEMENT_NODE;
      });

      if (effectiveChildren && effectiveChildren.length > 0) {
        for (var i = 0; i < effectiveChildren.length; i++) {
          // addEventListener to paper-button with dialog-confirm.
          if (effectiveChildren[i].hasAttribute("dialog-confirm")) {
            // attach event handler which first binded to this scope.
            effectiveChildren[i].addEventListener("tap", this._updateBindDate.bind(this));
            effectiveChildren[i].addEventListener("transitionend", this._updateBindDate.bind(this));
          } // Polymer's polyfill for custom properties does not apply to distributed children.
          // https://www.polymer-project.org/1.0/docs/devguide/styling.html


          this._updateDistributedButtonInkColorCustomProp(effectiveChildren[i], "#737373");
        } // update to a new height for datepicker if paper-buttons present.


        this.$.dp.classList.add("with-buttons");
      } else {
        this.$.dp.classList.remove("with-buttons");
      }

      this.fire("app-datepicker-attached");
    },
    //  Month Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
    //  Days   31  28  31  30  31  30  31  31  30  31  30  31
    //   31?    0       2       4       6   7       9      11
    //   30?                3       5           8      10
    //  Feb?        1
    //  Su Mo Tu We Th Fr Sa    startDay - _firstDayOfWeek
    //                  1  2        5 - 0 < 0 ? 6 : 5 - 0;
    //  Mo Tu We Th Fr Sa Su
    //               1  2  3        5 - 1 < 0 ? 6 : 5 - 1;
    //  Tu We Th Fr Sa Su Mo
    //            1  2  3  4        5 - 2 < 0 ? 6 : 5 - 2;
    //  We Th Fr Sa Su Mo Tu
    //         1  2  3  4  5        5 - 3 < 0 ? 6 : 5 - 3;
    //  Th Fr Sa Su Mo Tu We
    //      1  2  3  4  5  6        5 - 4 < 0 ? 6 : 5 - 4;
    //  Fr Sa Su Mo Tu We Th
    //   1  2  3  4  5  6  7        5 - 5 < 0 ? 6 : 5 - 5;
    //  Sa Su Mo Tu We Th Fr
    //                     1        5 - 6 < 0 ? 6 : 5 - 6;
    // Compute the days for a month.
    _computeDaysOfMonth: function _computeDaysOfMonth(_activeYear, _activeMonth, _firstDayOfWeek, _locale) {
      // No op for Intl is undefined (for Safari below v10.x.x).
      if (!window.Intl) {
        return;
      } // Compute total number of days for a month.


      function _computeTotalDaysOfMonth(_year, _month) {
        var _totalDaysOfMonth = new Date(_year, _month + 1, 0).getDate();

        return _totalDaysOfMonth;
      }

      var _start = new Date(_activeYear, _activeMonth, 1).getDay();

      var _daysOfMonth = [];

      var _totalDays = _computeTotalDaysOfMonth(_activeYear, _activeMonth); //  if _firstDayOfWeek is greater than 0 but less than 7.


      if (_firstDayOfWeek > 0 && _firstDayOfWeek < 7) {
        _start = _start - _firstDayOfWeek;
        _start = _start < 0 ? 7 + _start : _start;
      } // Set up Intl.


      _locale = _locale || window.Intl && window.Intl.DateTimeFormat && window.Intl.DateTimeFormat().resolvedOptions && window.Intl.DateTimeFormat().resolvedOptions().locale || "en-US";

      var _formatter = window.Intl && window.Intl.DateTimeFormat ? new window.Intl.DateTimeFormat(_locale, {
        timeZone: "UTC",
        day: "numeric"
      }).format : function dateTimeFormatShim(date) {
        return date.getDate();
      };

      for (var i = 0, j = 1 - _start; i < 42; i++, j++) {
        var _formatted = _formatter(Date.UTC(_activeYear, _activeMonth, j));

        var _dateObj = {
          date: "",
          index: ""
        };

        if (i >= _start & i < _start + _totalDays) {
          /**
           * NOTE: Coercing '_formatted' to a number will cause
           * dates in other languages that contain other character
           * to become a NaN.
           */
          _dateObj.date = _formatted;
          _dateObj.index = j;
        }

        _daysOfMonth.push(_dateObj);
      } // Update _chosenDaysOfMonth for every new calendar being rendered.


      this.set("_chosenDaysOfMonth", this._computeChosenDaysOfMonth(_daysOfMonth, this._selectedDate)); // Update the old _daysOfMonth.

      this.set("_daysOfMonth", _daysOfMonth);
    },
    /// Re-compute disable days with firstDayOfWeek.
    _computeShiftedDisableDays: function _computeShiftedDisableDays(_firstDayOfWeek, _isDisableDays) {
      _firstDayOfWeek = _firstDayOfWeek > 0 && _firstDayOfWeek < 7 ? _firstDayOfWeek : 0;

      var _sdd = this.disableDays.map(function (_day) {
        _day = _day - _firstDayOfWeek;
        return _day < 0 ? 7 + _day : _day;
      });

      this.set("_shiftedDisableDays", _sdd);
    },
    // Increment the month via user interaction.
    _incrementMonth: function _incrementMonth(ev) {
      this.debounce("_incrementMonth", function () {
        this.set("_isIncrementMonth", !0);
        window.requestAnimationFrame(function () {
          var _month = this._activeMonth;

          if (++_month % 12 === 0) {
            this._activeYear++;
          }

          this.set("_activeMonth", _month % 12);

          if (!this.noAnimation) {
            this.cancelAnimation();
            this.playAnimation("incrementEntry");
          }

          this.set("_isIncrementMonth", !1);
        }.bind(this));
      }, 100);
    },
    // Decrement the month via user interaction.
    _decrementMonth: function _decrementMonth(ev) {
      this.debounce("_decrementMonth", function () {
        this.set("_isDecrementMonth", !0);
        window.requestAnimationFrame(function () {
          var _month = this._activeMonth;

          if (--_month < 0) {
            this._activeYear--;
            _month = 11;
          }

          this.set("_activeMonth", _month);

          if (!this.noAnimation) {
            this.cancelAnimation();
            this.playAnimation("decrementEntry");
          }

          this.set("_isDecrementMonth", !1);
        }.bind(this));
      }, 100);
    },
    // Re-compute active month year if new date is selected.
    _computeActiveMonthYear: function _computeActiveMonthYear(_activeYear, _activeMonth, _locale) {
      if (window.Intl) {
        _locale = _locale || window.Intl && window.Intl.DateTimeFormat && window.Intl.DateTimeFormat().resolvedOptions && window.Intl.DateTimeFormat().resolvedOptions().locale || "en-US";

        var _amy = new window.Intl.DateTimeFormat(_locale, {
          timeZone: "UTC",
          month: "short",
          year: "numeric"
        }).format(Date.UTC(_activeYear, _activeMonth, 1));

        this.set("_activeMonthYear", _amy);
      }
    },
    // Re-compute short version of full date to show on the picker.
    _computeShortSelectedDate: function _computeShortSelectedDate(_selectedYear, _selectedMonth, _selectedDate, _locale) {
      if (window.Intl) {
        _locale = _locale || window.Intl && window.Intl.DateTimeFormat && window.Intl.DateTimeFormat().resolvedOptions && window.Intl.DateTimeFormat().resolvedOptions().locale || "en-US";

        var _ssd = new window.Intl.DateTimeFormat(_locale, {
          timeZone: "UTC",
          weekday: "short",
          month: "short",
          day: "numeric"
        }).format(Date.UTC(_selectedYear, _selectedMonth, _selectedDate));

        this.set("_shortSelectedDate", _ssd); // When datepicker has no button for date confirmation,
        // by asserting `autoUpdateDate` will trigger auto update on
        // date change.

        if (this.autoUpdateDate) {
          this.enforceDateChange();
        }
      }
    },
    _computeShowSelectedYear: function _computeShowSelectedYear(_selectedYear, _locale) {
      if (window.Intl) {
        _locale = _locale || window.Intl && window.Intl.DateTimeFormat && window.Intl.DateTimeFormat().resolvedOptions && window.Intl.DateTimeFormat().resolvedOptions().locale || "en-US";

        var _ssy = new window.Intl.DateTimeFormat(_locale, {
          timeZone: "UTC",
          year: "numeric"
        }).format(Date.UTC(_selectedYear, 0, 1));

        this.set("_showSelectedYear", _ssy);
      }
    },
    // When a day of month is selected, a lot of tasks need to be carried out.
    _chooseDaysOfMonth: function _chooseDaysOfMonth(ev) {
      var _target = ev.target; // daysOfMonth is chooseable when:
      // a) _target.date is of type Number,
      // b) _target.classList.contains('is-disabled-day').

      if (_target && this._isNumber(_target.date) && !_target.classList.contains("is-disabled-day")) {
        // This will trigger _isChosenDaysOfMonth to recompute style.
        this.set("_chosenDaysOfMonth", _target.index);
        this.set("_selectedYear", this._activeYear);
        this.set("_selectedDate", _target.date);
        this.set("_selectedMonth", this._activeMonth);
      }
    },
    // Re-compute class when the item (day of month) is today's date.
    _isToday: function _isToday(_item, _activeYear, _activeMonth) {
      var _now = new Date();

      var _isToday = _item === _now.getDate() && _activeYear === _now.getFullYear() && _activeMonth === _now.getMonth();

      return _isToday ? " is-today" : "";
    },
    // Re-compute class when the item (day of month) is empty date & non-selectable.
    _isEmptyDate: function _isEmptyDate(_item) {
      return this._isNumber(_item) ? "" : " is-non-selectable";
    },
    // Re-compute class if the item (day of month) is the selected date.
    _isChosenDaysOfMonth: function _isChosenDaysOfMonth(_item, _selectedYear, _selectedMonth, _selectedDate) {
      // able to retain selected daysOfMonth even after navigating to other months.
      var _isChosenDaysOfMonth = this._chosenDaysOfMonth >= 0 && this._activeYear === _selectedYear && this._activeMonth === _selectedMonth && _item === _selectedDate;

      return _isChosenDaysOfMonth ? " chosen-days-of-month" : "";
    },
    // Re-compute class if the item (day of month) is a disable day.
    _isDisableDays: function _isDisableDays(_index, _firstDayOfWeek, _minDate, _maxDate, _item) {
      var _isLessThanMinDate = !1;

      var _isMoreThanMaxDate = !1;

      var _isDisableDay = !1;

      var _isDisableDates = false; // _index % 7 gives values from 0 to 6.
      // and if _index matches some of these disableDays values return true.

      var _isDisableDays = this._shiftedDisableDays.some(function (_n) {
        return _n === _index % 7;
      }); // ------ < _minDate ---------------- _maxDate > ------
      // if _item is of type Number.
      // if converted _item into new Date() < minDate or > maxDate.


      if (this._isNumber(_item)) {
        var _minDateObj = this._convertDateStringToDateObject(_minDate);

        var _maxDateObj = this._convertDateStringToDateObject(_maxDate);

        var _currentDate = new Date(this._activeYear, this._activeMonth, _item); // run two different obj differently just in case only one of them
        // is defined and still be able to update disabled days.


        if (_minDateObj) {
          _isLessThanMinDate = _currentDate.getTime() < _minDateObj.getTime();
        }

        if (_maxDateObj) {
          _isMoreThanMaxDate = _currentDate.getTime() > _maxDateObj.getTime();
        }

        _isDisableDates = this.disableDates && this.disableDates.length && this.disableDates.some(function (date) {
          var _dateObj = this._convertDateStringToDateObject(date);

          return _dateObj && _currentDate.getTime() === _dateObj.getTime();
        }.bind(this));
      } // To disable a date, it must be either one of the followings:
      // a) _isDisabledDays (set by property disableDays),
      // b) _isDisableDates (set by property disableDates),
      // c) _isLessThanMinDate (set by property minDate), and
      // d) _isMoreThanMaxDate (set by propery moreDate).


      _isDisableDay = _isDisableDays || _isDisableDates || _isLessThanMinDate || _isMoreThanMaxDate;
      return _isDisableDay ? " is-disabled-day is-non-selectable" : "";
    },
    // Re-compute class when a year is selected at year page.
    _isListOfYearsSelected: function _isListOfYearsSelected(selectedYear, year) {
      return +selectedYear === +year ? " is-selected" : "";
    },
    _computeDaysOfWeek: function _computeDaysOfWeek(_firstDayOfWeek, _locale) {
      // _daysOfWeek needs to be changed as well with firstDayOfWeek and locale.
      var _dow = ["S", "M", "T", "W", "T", "F", "S"];

      var _firstDayOfWeek = _firstDayOfWeek > 0 && _firstDayOfWeek < 7 ? _firstDayOfWeek : 0; // if locale is set and window.Intl is supported...


      if (_locale && window.Intl) {
        _dow = [];

        var _today = new Date();

        var _offsetDate = _today.getDate() - _today.getDay();

        var _formatter = new window.Intl.DateTimeFormat(_locale, {
          timeZone: "UTC",
          weekday: "narrow"
        }).format;
        var newDate = null;

        for (var i = 0; i < 7; i++) {
          newDate = Date.UTC(_today.getFullYear(), _today.getMonth(), _offsetDate + i);

          _dow.push(_formatter(newDate));
        }
      }

      var _sliced = _dow.slice(_firstDayOfWeek);

      var _rest = _dow.slice(0, _firstDayOfWeek);

      var _concatted = Array.prototype.concat(_sliced, _rest);

      this.set("_daysOfWeek", _concatted);
    },
    // Re-compute the index of the selected date when a new date is selected
    // via user interaction.
    _computeChosenDaysOfMonth: function _computeChosenDaysOfMonth(_daysOfMonth, _selectedDate) {
      // depends on _daysOfMonth and recalculate the index of _chosenDaysOfMonth.
      var _len = _daysOfMonth.length;

      for (var i = 0; i < _len; i++) {
        if (i >= 0 && _daysOfMonth[i].index === _selectedDate) {
          return i;
        }
      }
    },
    // Convert date string into date object.
    _convertDateStringToDateObject: function _convertDateStringToDateObject(_date) {
      var _checkDate = babelHelpers.instanceof(_date, Date) || typeof _date !== "string" ? _date : new Date(_date);

      var _isValidDate = _checkDate.toDateString() !== "Invalid Date";

      return _isValidDate ? _checkDate : null;
    },
    // Dynamically load items into the iron-list when switching page to year view.
    _updateList: function _updateList(_activeView) {
      for (var _newList = [], y = 1900, i = y; i <= 2100; i++) {
        _newList.push({
          year: i
        });
      }

      this.set("_listOfYears", _newList);
    },
    // On neon-animaition-finish, udpate scroller position of the iron-list.
    // It is to fix the iron-list so that the selected year will always be centered by
    // hardcoded with fixed length of #items.
    _onAnimationFinish: function _onAnimationFinish(ev) {
      var _this = this;

      var _target = ev.detail; // TO fix the scrolling of iron-list, hard coded with fixed length of #items.

      if (_target && _target.toPage.tagName === "IRON-LIST") {
        var _focusableItem = this._updateListScroller(_target.toPage); // Automatically focus selected list of year at year view.


        async.microTask.run(function () {
          _target.toPage._focusPhysicalItem(_focusableItem);
        });
      } else {
        // When user navigate to calendar view from list view,
        // re-focus showSelectedYear.
        async.microTask.run(function () {
          _this.$.showSelectedYear.focus();
        });
      }
    },
    _updateListScroller: function _updateListScroller(_list) {
      var _this2 = this;

      var _sl = (0, _polymerDom.dom)(_list.root).querySelector("#items");

      var _slh = _sl.getBoundingClientRect().height || 12863.994140625;

      var _sli = Math.floor(_slh / (2100 - 1900 + 1) * (this._activeYear - 1900 - 2)) + 1; // Adjust center position when datepickers has no buttons and in landscape mode.


      if (!this.$.dp.classList.contains("with-buttons") && window.matchMedia("(orientation: landscape)").matches) {
        _sli = Math.floor(_slh / (2100 - 1900 + 1) * (this._activeYear - 1900 - 1)) + 1;
      } // Scroll to selected year.


      async.microTask.run(function () {
        _list.scroll(0, _sli); // Select initial item for the list.


        _list.selectItem(_this2._activeYear - 1900);
      }); // wait for at least 17ms to update the scroller position.
      // Return index of item that should be focused on the list.

      return this._activeYear - 1900;
    },
    // When first time switching page to year view, dynamically render iron-list.
    _onIronSelectorSelectedChanged: function _onIronSelectorSelectedChanged(ev) {
      if (ev.detail.value === "year") {
        if (!this._isListRendered) {
          this._updateList();

          this.set("_isListRendered", !0);
        } else {
          // When noAnimation is truthy, this will update the list scroller.
          if (this.noAnimation) {
            this._updateListScroller(this.shadowRoot.querySelector("#listOfYears"));
          }
        }
      }
    },
    _onListRendered: function _onListRendered(ev) {
      var _this3 = this;

      // When noAnimation is truthy, this will update the list scroller.
      if (ev.target.if && this.noAnimation) {
        async.microTask.run(function () {
          _this3._updateListScroller(_this3.shadowRoot.querySelector("#listOfYears"));
        });
      }
    },
    _goCalendar: function _goCalendar(ev) {
      // Listen for enter key from keyboard.
      if (ev.type === "keydown" && ev.keyCode !== 13) {
        return;
      }

      var _selectedYear = ev.model.item.year; // Set _activeYear and _selectedYear to the selected year.

      this.set("_activeYear", _selectedYear);
      this.set("_selectedYear", _selectedYear); // Update selected item in iron-list.

      this.shadowRoot.querySelector("#listOfYears").selectItem(_selectedYear - 1900); // Go back to calendar page.

      this.set("_activeView", "calendar");
    },
    // split capturing group of format into year, month and date.
    _computeSeparateFormat: function _computeSeparateFormat(_format) {
      var re = /^(yyyy|yy|m{1,4}|d{1,2}|do)\W+(yyyy|yy|m{1,4}|d{1,2}|do)\W+(yyyy|yy|m{1,4}|d{1,2}|do)$/g;
      var m = re.exec(_format);
      var _temp = {};
      var _tempArr = [];

      if (m !== null) {
        _tempArr.push(m[1]);

        _tempArr.push(m[2]);

        _tempArr.push(m[3]);

        for (var i = 0, matched; i < 3; i++) {
          matched = _tempArr[i];

          if (matched.indexOf("y") >= 0) {
            _temp.y = matched;
          } else if (matched.indexOf("m") >= 0) {
            _temp.m = matched;
          } else if (matched.indexOf("d") >= 0) {
            _temp.d = matched;
          }
        }
      } // Only set _format if the new format is valid.


      if ("d" in _temp && "m" in _temp && "y" in _temp) {
        this.set("_format", _temp);
      }

      _temp = null;
    },
    // bind the selected date so that it's ready to be read from the outside world.
    _bindSelectedFulldate: function _bindSelectedFulldate(_selectedYear, _selectedMonth, _selectedDate, _format) {
      // show long date (eg. Fri, May 12 2017 instead.
      if (this.showLongDate) {
        return this._computeShowLongDate(this.showLongDate, this.locale, !0);
      }

      var _formattedYear = _selectedYear;
      var _formattedMonth = this._monthNames[_selectedMonth];
      var _formattedDate = _selectedDate;
      var _finalFormatted = this.format; // compute new formatted year.

      if (_format.y === "yy") {
        _formattedYear = _selectedYear % 100;
      } // compute new formatted month.


      if (_format.m === "mmm") {
        _formattedMonth = _formattedMonth.slice(0, 3);
      } else if (_format.m === "mm") {
        _formattedMonth = this._padStart(_selectedMonth + 1, 2, "0");
      } else if (_format.m === "m") {
        _formattedMonth = _selectedMonth + 1;
      } // compute new formatted date.


      if (_format.d === "do") {
        var _cardinalNumber = _formattedDate % 10;

        var _suffixOrdinal = _cardinalNumber > 3 ? "th" : ["th", "st", "nd", "rd"][_cardinalNumber];

        if (_formattedDate === 11 || _formattedDate == 12 || _formattedDate === 13) {
          _suffixOrdinal = "th";
        }

        _formattedDate = _formattedDate + _suffixOrdinal;
      } else if (_format.d === "dd") {
        _formattedDate = this._padStart(_formattedDate, 2, "0");
      } // set formatted value with user defined symbols.


      _finalFormatted = _finalFormatted.replace(_format.y, _formattedYear);
      _finalFormatted = _finalFormatted.replace(_format.m, _formattedMonth);
      _finalFormatted = _finalFormatted.replace(_format.d, _formattedDate);
      return _finalFormatted;
    },
    // method for content tag (eg. buttons).
    _updateBindDate: function _updateBindDate(ev) {
      this.debounce("_updateBindDate", function () {
        var _type = ev.type;

        if (_type === "tap") {
          this.set("_isSelectedDateConfirmed", !0);
        }

        if (_type === "transitionend" || this.noAnimation) {
          if (this._isSelectedDateConfirmed) {
            var _sy = this._selectedYear;
            var _sm = this._selectedMonth;
            var _sd = this._selectedDate;
            var _f = this._format;

            var _confirmDate = this._bindSelectedFulldate(_sy, _sm, _sd, _f);

            this._setDate(_confirmDate);

            this.set("_isSelectedDateConfirmed", !1);

            if (this.alwaysResetSelectedDateOnDialogClose) {
              this.resetDate();
            }
          }
        }
      }, 1);
    },
    // Update date to show long date or short date.
    _computeShowLongDate: function _computeShowLongDate(_showLongDate, _locale, _returnResult) {
      if (!window.Intl || !this._selectedDate || typeof this._selectedDate === "undefined") {
        return;
      }

      var _selectedDate = this._selectedDate;

      var _longDate = Date.UTC(this._selectedYear, this._selectedMonth, _selectedDate);

      if (_showLongDate) {
        _locale = _locale || window.Intl && window.Intl.DateTimeFormat && window.Intl.DateTimeFormat().resolvedOptions && window.Intl.DateTimeFormat().resolvedOptions().locale || "en-US";
        var _options = {
          timeZone: "UTC",
          weekday: this.showLongDate ? "short" : undefined,
          year: "numeric",
          month: this.showLongDate ? "short" : "2-digit",
          day: "2-digit"
        };
        _longDate = new window.Intl.DateTimeFormat(_locale, _options).format(_longDate);

        if (_returnResult) {
          return _longDate;
        } // Fix for notorious IE - add unknown spaces (%E2%80%8E) when formatting date with Intl.
        // http://utf8-chartable.de/unicode-utf8-table.pl?start=8192&number=128


        if (window.navigator.msManipulationViewsEnabled) {
          if (_locale || _locale === "") {
            _longDate = decodeURIComponent(encodeURIComponent(_longDate).replace(/\%E2\%80\%8[0-9A-F]/gi, ""));
          }
        }

        this._setDate(_longDate);
      } else {
        _longDate = this._bindSelectedFulldate(this._selectedYear, this._selectedMonth, _selectedDate, this._format);

        if (_returnResult) {
          return _longDate;
        }

        this._setDate(_longDate);
      }
    },
    // TO make things simple and works across different browsers, the input date string
    // has to be standardized - YYYY/MM/DD.
    // http://dygraphs.com/date-formats.html
    _updateToReflectExternalChange: function _updateToReflectExternalChange(_inputDate) {
      // Due to limitation of input date received by platform's Date,
      // inputDate was designed to only be able to accept inputs for the followings:
      // short date for all locales in the format of yyyy/mm/dd or yyyy/d/m eg. 2016/06/06.
      // long formatted date for en and en-* locale **ONLY** eg. Tue, Jul 5, 2016.
      if (this.showLongDate && this.locale.indexOf("en") < 0) {
        this._setInvalidDate(!0);

        return;
      } // accepted input date string:
      // 1. 2016 January 31
      // 2. 2016 January 3
      // 3. 2016 Jan 31
      // 4. 2016 Jan 3
      // 5. 2016/13/13


      function validateDate(_id, _showLongDate) {
        var _res = {
          valid: !1,
          result: ""
        }; // Check if long input date is a valid date.

        if (_showLongDate) {
          var _ds = _id.split(", ");

          if (_ds.length > 2) {
            _ds = _ds[1].split(" ").join("/") + ", " + _ds[2];

            var _newDate = new Date(_ds);

            if (_newDate.toString() === "Invalid Date") {
              return _res;
            } else {
              return {
                valid: !0,
                result: _newDate
              };
            }
          }

          return _res;
        } // From here onwards, to check for short input date.


        var _re1 = /^(\d{4})\W+(\d{1,2})\W+(\d{1,2})$/i;
        var _re2 = /^(\d{4})[ ](\w+)[ ](\d{1,2})$/i;

        var _validWithRe1 = _re1.exec(_id);

        var _validWithRe2 = _re2.exec(_id);

        if (_validWithRe1 === null && _validWithRe2 === null) {
          return _res;
        } else {
          var _resultToDate = null;

          if (_validWithRe1 === null) {
            _resultToDate = new Date(_validWithRe2[1] + " " + _validWithRe2[2] + " " + _validWithRe2[3]);
          } else if (_validWithRe2 === null) {
            _resultToDate = new Date(+_validWithRe1[1], +_validWithRe1[2] - 1, +_validWithRe1[3]);
          }

          return {
            valid: !0,
            result: _resultToDate
          };
        }
      }

      var _showLongDate = this.showLongDate;
      var _yy = 0;
      var _mm = 0;
      var _dd = 0;

      var _isValidDate = validateDate(_inputDate, _showLongDate);

      if (_isValidDate.valid) {
        if (this.alwaysResetSelectedDateOnDialogClose) {
          return;
        }

        var _vd = new Date(_isValidDate.result);

        var _yy = _vd.getFullYear();

        var _mm = _vd.getMonth();

        this._setInvalidDate(!1);

        this.set("_activeYear", _yy);
        this.set("_activeMonth", _mm);
        this.set("_selectedYear", _yy);
        this.set("_selectedMonth", _mm);
        this.set("_selectedDate", _vd.getDate());
      } else {
        this.set("_selectedDate", this._selectedDate || new Date().getDate());

        this._computeShowLongDate(_showLongDate, this.locale);

        this._setInvalidDate(!0);
      }
    },

    /**
     * By default, buttons are required so that they are to confirm the date change.
     * This method allows force update the datepicker when there are no buttons inside the datepicker to confirm date change.
     */
    enforceDateChange: function enforceDateChange() {
      this._setInvalidDate(!1);

      this._computeShowLongDate(this.showLongDate, this.locale);
    },
    // reset date to today's date if alwaysResetSelectedDateOnDialogClose is set.
    resetDate: function resetDate() {
      if (this._isSelectedDateConfirmed) {
        return;
      }

      var now = new Date();
      var nowFy = now.getFullYear();
      var nowM = now.getMonth();
      var nowD = now.getDate();
      this.set("_activeYear", nowFy);
      this.set("_activeMonth", nowM);
      this.set("_selectedYear", nowFy);
      this.set("_selectedMonth", nowM);
      this.set("_selectedDate", nowD);

      this._setInvalidDate(false);
    },
    // Accessibility enhancment.
    _shouldTabIndex: function _shouldTabIndex(_index, _firstDayOfWeek, _minDate, _maxDate, _item) {
      var _isDisableDays = this._isDisableDays(_index, _firstDayOfWeek, _minDate, _maxDate, _item);

      return _item && _item >= 0 && !_isDisableDays ? 0 : -1;
    },
    _shouldAriaDisabled: function _shouldAriaDisabled(_index, _firstDayOfWeek, _minDate, _maxDate, _item) {
      var _isDisableDays = this._isDisableDays(_index, _firstDayOfWeek, _minDate, _maxDate, _item);

      return !(_item && _item >= 0 && !_isDisableDays);
    },
    // Lodash's replacements.
    _padStart: function _padStart(_string, _length, _chars) {
      var _len = -_length;

      var _str = (_chars + _string).slice(_len);

      return _str;
    },
    _isNumber: function _isNumber(_value) {
      // return typeof _value == 'number' || (!Number.isNaN(parseFloat(_value)) && Number.isFinite(_value));
      // Fallback: caused by IE11 as those methods are not supported in IE11.
      return typeof _value == "number" || !isNaN(parseFloat(_value)) && isFinite(_value);
    },
    // Update theme color.
    _updateThemeColor: function _updateThemeColor(_theme) {
      var _themes = ["dark-theme", "light-theme", "goog-theme"];

      var _themeIdx = _themes.indexOf(_theme);

      var _distributedButtons = (0, _polymerDom.dom)(this).querySelectorAll("paper-button");

      var _distributedButtonsLen = _distributedButtons.length;
      var _colorCode = ["#bcbcbc", "#737373", "#616161"][_themeIdx];

      if (_themeIdx >= 0) {
        _themes.splice(_themeIdx, 1);

        this.toggleClass(_themes[0], !1, this);
        this.toggleClass(_themes[1], !1, this);
        this.toggleClass(_theme, !0, this);
      } else {
        this.toggleClass("dark-theme", !1, this);
        this.toggleClass("light-theme", !1, this);
        this.toggleClass("goog-theme", !1, this);
      } // workaround to update custom property of distributed buttons.


      for (var i = 0; i < _distributedButtonsLen; i++) {
        this._updateDistributedButtonInkColorCustomProp(_distributedButtons[i], _colorCode || "#737373");
      } // Update styles of the whole datepicker.


      this.updateStyles();
    },
    // Forcefully update the view of the datepicker.
    _updateDatepickerView: function _updateDatepickerView(_view) {
      this.toggleClass("horizontal-view", _view === "horizontal", this);
      this.toggleClass("vertical-view", _view === "vertical", this);
    },
    // workaround to update custom property of distributed children until Polymer supports Native custom properties.
    _updateDistributedButtonInkColorCustomProp: function _updateDistributedButtonInkColorCustomProp(_node, _colorCode) {
      this.updateStyles({
        "--paper-button-ink-color": _colorCode
      });
    } // TODO: To add GIF to README.md.
    // TODO: To migrate 2nd datepicker to the same month when minDate is set on the 1st datepicker.

  });
  _exports.AppDatepicker = AppDatepicker;
});