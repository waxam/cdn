define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/iron-icons/iron-icons.js", "../../@polymer/iron-icon/iron-icon.js", "../relative-heading/relative-heading.js"], function (_exports, _polymerElement, _ironIcons, _ironIcon, _relativeHeading) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TopicHeading = void 0;

  function _templateObject_372ff4b0e14a11e9bce923988a998e3c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        relative-heading {\n          color: var(--topic-heading-heading-color);\n          display: inline-flex;\n          --relative-heading-heading: {\n            padding: 0;\n            margin: 0 0 16px 0;\n            @apply --topic-heading-heading;\n          }\n        }\n        iron-icon {\n          color: var(--topic-heading-icon-color);\n          display: inline-flex;\n          font-size: 16px;\n          height: 32px;\n          width: 32px;\n          padding: 16px;\n          line-height: 16px;\n          vertical-align: bottom;\n          @apply --topic-heading-icon;\n        }\n      </style>\n      <iron-icon icon=\"[[icon]]\"></iron-icon\n      ><relative-heading text=\"[[title]]\"></relative-heading>\n    "]);

    _templateObject_372ff4b0e14a11e9bce923988a998e3c = function _templateObject_372ff4b0e14a11e9bce923988a998e3c() {
      return data;
    };

    return data;
  }

  /**
   * `topic-heading`
   * `Semantic and visual meaning behind a heading break`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @polymer
   * @demo demo/index.html
   */
  var TopicHeading =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(TopicHeading, _PolymerElement);

    function TopicHeading() {
      babelHelpers.classCallCheck(this, TopicHeading);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TopicHeading).apply(this, arguments));
    }

    babelHelpers.createClass(TopicHeading, null, [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_372ff4b0e14a11e9bce923988a998e3c());
      } // haxProperty definition

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Topic heading",
            description: "Semantic and visual meaning behind a heading break",
            icon: "icons:android",
            color: "green",
            groups: ["Heading"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "icon",
              description: "",
              inputMethod: "iconpicker",
              required: false,
              icon: "icons:code"
            }, {
              property: "title",
              description: "",
              inputMethod: "textfield",
              required: false,
              icon: "icons:heading"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        var props = {
          icon: {
            name: "icon",
            type: String,
            value: ""
          },
          title: {
            name: "title",
            type: String,
            value: "Heading"
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(TopicHeading), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(TopicHeading), "properties", this));
        }

        return props;
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "topic-heading";
      }
      /**
       * life cycle, element is removed from the DOM
       */
      //disconnectedCallback() {}

    }]);
    return TopicHeading;
  }(_polymerElement.PolymerElement);

  _exports.TopicHeading = TopicHeading;
  window.customElements.define(TopicHeading.tag, TopicHeading);
});