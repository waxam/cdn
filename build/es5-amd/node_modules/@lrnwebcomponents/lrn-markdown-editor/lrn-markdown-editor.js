define(["exports", "../../@polymer/polymer/polymer-element.js", "../../@polymer/paper-tabs/paper-tabs.js", "../../@polymer/marked-element/marked-element.js", "../../@polymer/iron-pages/iron-pages.js", "./lib/lrn-markdown-editor-editor.js"], function (_exports, _polymerElement, _paperTabs, _markedElement, _ironPages, _lrnMarkdownEditorEditor) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrnMarkdownEditor = void 0;

  function _templateObject_57621c40b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        #split-pane {\n          display: flex;\n        }\n\n        .split-pane > * {\n          flex: 1 1 auto;\n          min-height: 160px;\n        }\n\n        .preview-pane {\n          background: lightblue;\n        }\n\n        paper-card {\n          padding: 16px;\n          width: calc(100% - 32px);\n        }\n\n        paper-tabs {\n          background: #f5f5f5;\n          border-style: solid;\n          border-color: #dcdcdc;\n          border-width: 1px;\n          min-width: 500px;\n        }\n\n        marked-element.lrn-markdown-editor {\n          width: 100%;\n          word-wrap: break-word;\n        }\n\n        .container-flex {\n          display: flex;\n          flex-wrap: nowrap;\n        }\n\n        .split-pane .container-flex > * {\n          width: 50%;\n        }\n\n        .split-pane marked-element {\n          width: calc(100% - 32px);\n          min-width: 150px;\n          margin: 0 16px;\n          padding: 0 16px;\n          background: #fff;\n          border-left: solid #dcdcdc 1px;\n        }\n      </style>\n\n      <div class=\"mtz-toolbar\">\n        <paper-tabs selected=\"{{selected}}\">\n          <paper-tab>Write</paper-tab>\n          <paper-tab>Preview</paper-tab>\n          <paper-tab>Split View</paper-tab>\n        </paper-tabs>\n      </div>\n\n      <iron-pages selected=\"{{selected}}\">\n        <section>\n          <paper-card>\n            <lrn-markdown-editor-editor\n              content=\"{{content}}\"\n            ></lrn-markdown-editor-editor>\n          </paper-card>\n        </section>\n\n        <section>\n          <paper-card>\n            <marked-element markdown=\"{{content}}\"></marked-element>\n          </paper-card>\n        </section>\n\n        <section class=\"split-pane\">\n          <paper-card>\n            <div class=\"container-flex\">\n              <lrn-markdown-editor-editor\n                content=\"{{content}}\"\n              ></lrn-markdown-editor-editor>\n              <marked-element\n                class=\"preview-pane\"\n                markdown=\"{{content}}\"\n              ></marked-element>\n            </div>\n          </paper-card>\n        </section>\n      </iron-pages>\n    "]);

    _templateObject_57621c40b3b911e9b58d79562a23326c = function _templateObject_57621c40b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  /**
   * `lrn-markdown-editor`
   * `Side by side markdown to HTML editor + preview pane`
   *
   * @microcopy - language worth noting:
   *  - often used for quick field editing interfaces w/ minimal input allowed
   * @polymer
   * @customElement
   * @demo demo/index.html
   */
  var LrnMarkdownEditor =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(LrnMarkdownEditor, _PolymerElement);

    function LrnMarkdownEditor() {
      babelHelpers.classCallCheck(this, LrnMarkdownEditor);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrnMarkdownEditor).apply(this, arguments));
    }

    babelHelpers.createClass(LrnMarkdownEditor, [{
      key: "_selectedChanged",
      value: function _selectedChanged(selected) {
        var root = this;

        var cookieName = root._getCookieName(); // get current cookies
        // if the 'split-view' pane is selected


        if (selected === 2) {
          // add a cookie for lrn-markdown-editor-splitview
          root._createCookie(cookieName, "true", "30");
        } else if (selected !== 2 && root.elReady === true) {
          /**
           * @todo: this is erasing the cookie erroneously
           */
          root._eraseCookie(cookieName);
        }
      }
    }, {
      key: "_createCookie",
      value: function _createCookie(name, value, days) {
        var expires = "";

        if (days) {
          var date = new Date();
          date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000);
          expires = "; expires=" + date.toUTCString();
        }

        document.cookie = name + "=" + value + expires + "; path=/";
      }
    }, {
      key: "_readCookie",
      value: function _readCookie(name) {
        var nameEQ = name + "=";
        var ca = document.cookie.split(";");

        for (var i = 0; i < ca.length; i++) {
          var c = ca[i];

          while (c.charAt(0) == " ") {
            c = c.substring(1, c.length);
          }

          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length, c.length);
        }

        return null;
      }
    }, {
      key: "_eraseCookie",
      value: function _eraseCookie(name) {
        this._createCookie(name, "", -1);
      }
    }, {
      key: "_getCookieName",
      value: function _getCookieName() {
        return "lrnmarkdowneditorsplitview";
      }
    }, {
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(LrnMarkdownEditor.prototype), "ready", this).call(this);
        var root = this; // tell others we are ready

        root.elReady = true; // get the cookie for splitview

        var cookieName = root._getCookieName();

        var cookie = root._readCookie(cookieName); // if there is a cookie set for splitview


        if (cookie && cookie === "true") {
          // show splitview pane
          root.selected = 2;
        }
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_57621c40b3b911e9b58d79562a23326c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrn-markdown-editor";
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          content: {
            type: String,
            notify: true
          },
          selected: {
            type: String,
            value: "0",
            reflectToAttribute: true
          },
          layout: {
            type: String,
            value: 0
          },
          cookies: {
            type: Boolean,
            value: true
          },
          elReady: {
            type: Boolean,
            value: false
          }
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ["_selectedChanged(selected)"];
      }
    }]);
    return LrnMarkdownEditor;
  }(_polymerElement.PolymerElement);

  _exports.LrnMarkdownEditor = LrnMarkdownEditor;
  window.customElements.define(LrnMarkdownEditor.tag, LrnMarkdownEditor);
});