define(["exports", "../../lit-element/lit-element.js", "../intersection-element/lib/IntersectionObserverMixin.js", "./lib/countup.js"], function (_exports, _litElement, _IntersectionObserverMixin, _countup) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "CountUp", {
    enumerable: true,
    get: function get() {
      return _countup.CountUp;
    }
  });
  _exports.CountUpElement = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_50503e00d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-flex;\n          --count-up-color: #000000;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        .wrapper {\n          display: block;\n          text-align: center;\n          width: 100%;\n          height: 100%;\n        }\n\n        #counter {\n          color: var(--count-up-color);\n          font-weight: var(--count-up-number-font-weight);\n          font-size: var(--count-up-number-font-size);\n        }\n      "]);

    _templateObject2_50503e00d34d11ea880ba1e93364c49c = function _templateObject2_50503e00d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_50503e00d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <div class=\"wrapper\">\n        <slot name=\"prefix\"></slot>\n        <div id=\"counter\"></div>\n        <slot name=\"suffix\"></slot>\n      </div>\n    "]);

    _templateObject_50503e00d34d11ea880ba1e93364c49c = function _templateObject_50503e00d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `count-up`
   * `count up js wrapper with minimal styling`
   * @litElement
   * @demo demo/index.html
   * @element count-up
   */
  var CountUpElement =
  /*#__PURE__*/
  function (_IntersectionObserver) {
    babelHelpers.inherits(CountUpElement, _IntersectionObserver);
    babelHelpers.createClass(CountUpElement, [{
      key: "render",
      // render function
      value: function render() {
        return (0, _litElement.html)(_templateObject_50503e00d34d11ea880ba1e93364c49c());
      } // haxProperty definition

    }], [{
      key: "styles",
      //styles function
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_50503e00d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Count up",
            description: "count up js wrapper with minimal styling",
            icon: "icons:android",
            color: "green",
            groups: ["Up"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "start",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "end",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "duration",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "noeasing",
              description: "",
              inputMethod: "boolean"
            }, {
              property: "decimalplaces",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "separator",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "decimal",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "prefix",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "suffix",
              description: "",
              inputMethod: "textfield"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(CountUpElement), "properties", this), {
          /**
           * Starting point for counting
           */
          start: {
            type: Number
          },

          /**
           * End point for counting stopping
           */
          end: {
            type: Number
          },

          /**
           * Duration to count
           */
          duration: {
            type: Number
          },

          /**
           * Disable easing animation
           */
          noeasing: {
            type: Boolean
          },

          /**
           * decimal places to show
           */
          decimalplaces: {
            type: Number
          },

          /**
           * separator for 100s groupings
           */
          separator: {
            type: String
          },

          /**
           * decimal point character
           */
          decimal: {
            type: String
          },

          /**
           * prefix string before the number counting
           */
          prefixtext: {
            type: String
          },

          /**
           * suffix string after the number counting
           */
          suffixtext: {
            type: String
          },
          thresholds: {
            type: Array
          },
          rootMargin: {
            type: String,
            attribute: "root-margin"
          },
          ratio: {
            type: Number,
            reflect: true
          },
          visibleLimit: {
            type: Number,
            reflect: true,
            attribute: "visible-limit"
          },
          elementVisible: {
            type: Boolean
          }
        });
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "count-up";
      }
    }]);

    function CountUpElement() {
      var _this;

      babelHelpers.classCallCheck(this, CountUpElement);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(CountUpElement).call(this));
      _this.start = 0;
      _this.end = 100;
      _this.duration = 2.5;
      _this.noeasing = false;
      _this.decimalplaces = 0;
      _this.separator = ",";
      _this.decimal = ".";
      _this.prefixtext = " ";
      _this.suffixtext = " ";
      return _this;
    }
    /**
     * LitElement ready
     */


    babelHelpers.createClass(CountUpElement, [{
      key: "firstUpdated",
      value: function firstUpdated() {
        var options = {
          startVal: this.start,
          decimalPlaces: this.decimalplaces,
          duration: this.duration,
          useEasing: !this.noeasing,
          separator: this.separator,
          decimal: this.decimal,
          prefix: this.prefixtext,
          suffix: this.suffixtext
        };
        this._countUp = new _countup.CountUp(this.shadowRoot.querySelector("#counter"), this.end, options);
      }
      /**
       * When our interection element claims we are visible then
       * we can start counting
       */

    }, {
      key: "updated",
      value: function updated(propertiesChanged) {
        var _this2 = this;

        propertiesChanged.forEach(function (oldValue, propName) {
          if (propName == "elementVisible" && _this2[propName]) {
            _this2._countUp.start();
          }
        });
      }
    }]);
    return CountUpElement;
  }((0, _IntersectionObserverMixin.IntersectionObserverMixin)(_litElement.LitElement));

  _exports.CountUpElement = CountUpElement;
  customElements.define(CountUpElement.tag, CountUpElement);
});