define(["exports", "../../@polymer/polymer/polymer-element.js", "../../countup.js/dist/countUp.min.js"], function (_exports, _polymerElement, _countUpMin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "CountUp", {
    enumerable: true,
    get: function get() {
      return _countUpMin.CountUp;
    }
  });
  _exports.CountUpElement = void 0;

  function _templateObject_d2b07050dbdb11e9bcafdb98156fc1d6() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-flex;\n          --count-up-color: #000000;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n\n        .wrapper {\n          display: block;\n          text-align: center;\n          width: 100%;\n          height: 100%;\n        }\n\n        #counter {\n          color: var(--count-up-color);\n          @apply --count-up-number;\n        }\n      </style>\n      <div class=\"wrapper\">\n        <slot name=\"prefix\"></slot>\n        <div id=\"counter\"></div>\n        <slot name=\"suffix\"></slot>\n      </div>\n    "]);

    _templateObject_d2b07050dbdb11e9bcafdb98156fc1d6 = function _templateObject_d2b07050dbdb11e9bcafdb98156fc1d6() {
      return data;
    };

    return data;
  }

  /**
   * `count-up`
   * `count up js wrapper with minimal styling`
   *
   * @microcopy - language worth noting:
   *  -
   *
   * @customElement
   * @lit-element
   * @demo demo/index.html
   */
  var CountUpElement =
  /*#__PURE__*/
  function (_PolymerElement) {
    babelHelpers.inherits(CountUpElement, _PolymerElement);

    function CountUpElement() {
      babelHelpers.classCallCheck(this, CountUpElement);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(CountUpElement).apply(this, arguments));
    }

    babelHelpers.createClass(CountUpElement, [{
      key: "connectedCallback",

      /**
       * life cycle, element is afixed to the DOM
       */
      value: function connectedCallback() {
        babelHelpers.get(babelHelpers.getPrototypeOf(CountUpElement.prototype), "connectedCallback", this).call(this); // setup the intersection observer

        this.observer = new IntersectionObserver(this.handleIntersectionCallback.bind(this), {
          root: document.rootElement,
          rootMargin: this.rootMargin,
          threshold: this.thresholds
        });
        this.observer.observe(this);
        var options = {
          startVal: this.start,
          decimalPlaces: this.decimalplaces,
          duration: this.duration,
          useEasing: !this.noeasing,
          separator: this.separator,
          decimal: this.decimal,
          prefix: this.prefixtext,
          suffix: this.suffixtext
        };
        this._countUp = new _countUpMin.CountUp(this.$.counter, this.end, options);
      }
    }, {
      key: "handleIntersectionCallback",
      value: function handleIntersectionCallback(entries) {
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = entries[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var entry = _step.value;

            this._setRatio(Number(entry.intersectionRatio).toFixed(2));

            if (this.ratio >= this.visibleLimit) {
              // now we care
              this._countUp.start();
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }], [{
      key: "template",
      // render function
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_d2b07050dbdb11e9bcafdb98156fc1d6());
      } // haxProperty definition

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: true,
          canPosition: true,
          canEditSource: false,
          gizmo: {
            title: "Count up",
            description: "count up js wrapper with minimal styling",
            icon: "icons:android",
            color: "green",
            groups: ["Up"],
            handles: [{
              type: "todo:read-the-docs-for-usage"
            }],
            meta: {
              author: "btopro",
              owner: "The Pennsylvania State University"
            }
          },
          settings: {
            quick: [],
            configure: [{
              property: "start",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "end",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "duration",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "noeasing",
              description: "",
              inputMethod: "boolean"
            }, {
              property: "decimalplaces",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "separator",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "decimal",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "prefix",
              description: "",
              inputMethod: "textfield"
            }, {
              property: "suffix",
              description: "",
              inputMethod: "textfield"
            }],
            advanced: []
          }
        };
      } // properties available to the custom element for data binding

    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Starting point for counting
           */
          start: {
            name: "start",
            type: Number,
            value: 0
          },

          /**
           * End point for counting stopping
           */
          end: {
            name: "end",
            type: Number,
            value: 100
          },

          /**
           * Duration to count
           */
          duration: {
            name: "duration",
            type: Number,
            value: 2.5
          },

          /**
           * Disable easing animation
           */
          noeasing: {
            name: "noeasing",
            type: Boolean,
            value: false
          },

          /**
           * decimal places to show
           */
          decimalplaces: {
            name: "decimalPlaces",
            type: Number,
            value: 0
          },

          /**
           * separator for 100s groupings
           */
          separator: {
            name: "separator",
            type: String,
            value: ","
          },

          /**
           * decimal point character
           */
          decimal: {
            name: "decimal",
            type: String,
            value: "."
          },

          /**
           * prefix string before the number counting
           */
          prefixtext: {
            name: "prefixtext",
            type: String,
            value: " "
          },

          /**
           * suffix string after the number counting
           */
          suffixtext: {
            name: "suffixtext",
            type: String,
            value: " "
          },
          thresholds: {
            type: Array,
            value: [0.0, 0.25, 0.5, 0.75, 1.0]
          },
          rootMargin: {
            type: String,
            value: "0px"
          },
          ratio: {
            type: Number,
            reflectToAttribute: true,
            readOnly: true
          },
          visibleLimit: {
            type: Number,
            value: 0.5,
            reflectToAttribute: true
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(CountUpElement), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(CountUpElement), "properties", this));
        }

        return props;
      }
      /**
       * Store the tag name to make it easier to obtain directly.
       * @notice function name must be here for tooling to operate correctly
       */

    }, {
      key: "tag",
      get: function get() {
        return "count-up";
      }
    }]);
    return CountUpElement;
  }(_polymerElement.PolymerElement);

  _exports.CountUpElement = CountUpElement;
  customElements.define(CountUpElement.tag, CountUpElement);
});