define(["meta", "require", "../../../lit-element/lit-element.js", "../../../@polymer/iron-icons/av-icons.js", "../../../@polymer/iron-icons/communication-icons.js", "../../../@polymer/iron-icons/device-icons.js", "../../../@polymer/iron-icons/editor-icons.js", "../../../@polymer/iron-icons/hardware-icons.js", "../../../@polymer/iron-icons/image-icons.js", "../../../@polymer/iron-icons/iron-icons.js", "../../../@polymer/iron-icons/maps-icons.js", "../../../@polymer/iron-icons/notification-icons.js", "../../../@polymer/iron-icons/places-icons.js", "../../../@polymer/iron-icons/social-icons.js", "../../lrn-icons/lrn-icons.js", "../../mdi-iconset-svg/mdi-iconset-svg.js", "../../hax-iconset/hax-iconset.js", "../../simple-fields/lib/simple-fields-form.js", "./product-card-list.js"], function (meta, _require, _litElement, _avIcons, _communicationIcons, _deviceIcons, _editorIcons, _hardwareIcons, _imageIcons, _ironIcons, _mapsIcons, _notificationIcons, _placesIcons, _socialIcons, _lrnIcons, _mdiIconsetSvg, _haxIconset, _simpleFieldsForm, _productCardList) {
  "use strict";

  meta = babelHelpers.interopRequireWildcard(meta);
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_87daa2007f5d11eab499dbfe9b6b5987() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <simple-fields-form\n        id=\"form\"\n        autoload\n        load-endpoint=\"", "\"\n        method=\"", "\"\n        @response=\"", "\"\n        @value-changed=\"", "\"\n      >\n      </simple-fields-form>\n      <product-card-list\n        id=\"productlist\"\n        cols=\"", "\"\n        .list=\"", "\"\n      ></product-card-list>\n    "]);

    _templateObject_87daa2007f5d11eab499dbfe9b6b5987 = function _templateObject_87daa2007f5d11eab499dbfe9b6b5987() {
      return data;
    };

    return data;
  }

  var HaxElementListSelector =
  /*#__PURE__*/
  function (_LitElement) {
    babelHelpers.inherits(HaxElementListSelector, _LitElement);
    babelHelpers.createClass(HaxElementListSelector, null, [{
      key: "tag",
      get: function get() {
        return "hax-element-list-selector";
      }
    }]);

    function HaxElementListSelector() {
      var _this;

      babelHelpers.classCallCheck(this, HaxElementListSelector);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(HaxElementListSelector).call(this));
      _this.cols = 3;
      _this.__loaded = false;
      _this.imports = [];
      _this.haxData = [];
      _this.method = "GET";
      _this.basePath = _this.pathFromUrl(decodeURIComponent(meta.url)) + "../../../";
      return _this;
    }

    babelHelpers.createClass(HaxElementListSelector, [{
      key: "pathFromUrl",
      // simple path from a url modifier
      value: function pathFromUrl(url) {
        return url.substring(0, url.lastIndexOf("/") + 1);
      }
    }, {
      key: "render",
      value: function render() {
        return (0, _litElement.html)(_templateObject_87daa2007f5d11eab499dbfe9b6b5987(), this.loadEndpoint, this.method, this._response, this._valueChanged, this.cols, this.filteredHaxData);
      }
    }, {
      key: "updated",
      value: function updated(changedProperties) {
        var _this2 = this;

        changedProperties.forEach(function (oldValue, propName) {
          // when imports changes make sure we import everything found
          if (propName == "imports") {
            _this2[propName].forEach(
            /*#__PURE__*/
            function () {
              var _ref = babelHelpers.asyncToGenerator(
              /*#__PURE__*/
              regeneratorRuntime.mark(function _callee(el) {
                return regeneratorRuntime.wrap(function _callee$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        _context.prev = 0;
                        _context.next = 3;
                        return new Promise(function (res, rej) {
                          return _require.default(["".concat(_this2.basePath).concat(el)], res, rej);
                        }).then(function (module) {
                          if (module && Object.keys(module)[0] && module[Object.keys(module)[0]].tag && module[Object.keys(module)[0]].haxProperties) {
                            var detail = {
                              tag: module[Object.keys(module)[0]].tag,
                              file: el,
                              status: true,
                              schema: module[Object.keys(module)[0]].haxProperties
                            };
                            var list = _this2.haxData;
                            list.push(detail);
                            _this2.haxData = babelHelpers.toConsumableArray(list);
                          }
                        });

                      case 3:
                        _context.next = 8;
                        break;

                      case 5:
                        _context.prev = 5;
                        _context.t0 = _context["catch"](0);
                        console.warn(_context.t0);

                      case 8:
                      case "end":
                        return _context.stop();
                    }
                  }
                }, _callee, null, [[0, 5]]);
              }));

              return function (_x) {
                return _ref.apply(this, arguments);
              };
            }());
          } // this is the local data we don't let change


          if (propName == "haxData") {
            _this2.filteredHaxData = babelHelpers.toConsumableArray(_this2[propName]);
          }
        });
      }
    }, {
      key: "applyFilters",
      value: function applyFilters(filters) {
        var data = babelHelpers.toConsumableArray(this.haxData);
        Object.keys(filters).forEach(function (key) {
          if (filters[key] != "") {
            switch (key) {
              case "haxelements-search-search":
                data = data.filter(function (item) {
                  if (item.schema.gizmo.title.toLowerCase().includes(filters[key].toLowerCase())) {
                    return true;
                  }

                  return false;
                });
                break;

              case "haxelements-search-tags":
                data = data.filter(function (item) {
                  if (item.schema.gizmo.groups.includes(filters[key])) {
                    return true;
                  }

                  return false;
                });
                break;

              case "haxelements-search-hasdemo":
                // only filter if box checked otherwise show all
                if (filters[key]) {
                  data = data.filter(function (item) {
                    if (item.schema.demoSchema) {
                      return true;
                    }

                    return false;
                  });
                }

                break;
            }
          }
        });
        return data;
      }
      /**
       * Listen for response and then apply initial settings
       */

    }, {
      key: "_response",
      value: function _response(e) {
        // tee up defaults
        var value = this.shadowRoot.querySelector("#form").submit();
        value.haxelements.settings["haxelements-settings-columns"] = this.cols;
        this.shadowRoot.querySelector("#form").setValue(value);
      }
      /**
       * notice any value changing and then getting the form fresh
       */

    }, {
      key: "_valueChanged",
      value: function _valueChanged(e) {
        var _this3 = this;

        clearTimeout(this.__valueDebounce);
        this.__valueDebounce = setTimeout(function () {
          var value = _this3.shadowRoot.querySelector("#form").submit();

          if (value && value.haxelements) {
            _this3.cols = parseInt(value.haxelements.settings["haxelements-settings-columns"]);
            _this3.filteredHaxData = babelHelpers.toConsumableArray(_this3.applyFilters(value.haxelements.search));

            _this3.shadowRoot.querySelector("#productlist").requestUpdate();
          }
        }, 50);
      }
    }], [{
      key: "properties",
      get: function get() {
        return {
          /**
           * JS imports
           */
          imports: {
            type: Array
          },

          /**
           * HAXSchema array
           */
          haxData: {
            type: Array
          },

          /**
           * Data filtered by form changes
           */
          filteredHaxData: {
            type: Array
          },

          /**
           * Columns to render
           */
          cols: {
            type: Number
          },

          /**
           * End point to load this data
           */
          loadEndpoint: {
            type: String,
            attribute: "load-endpoint"
          },

          /**
           * Request method
           */
          method: {
            type: String
          }
        };
      }
    }]);
    return HaxElementListSelector;
  }(_litElement.LitElement);

  window.customElements.define(HaxElementListSelector.tag, HaxElementListSelector);
});