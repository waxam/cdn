define(["exports","../../@polymer/polymer/polymer-element.js","./lib/pouchdb.min.js"],function(_exports,_polymerElement,_pouchdbMin){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.PouchDb=void 0;function _templateObject_047526d083d511e9a39cbd3cd8776fa6(){var data=babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: block;\n        }\n\n        :host([hidden]) {\n          display: none;\n        }\n      </style>\n      <slot></slot>\n      <div>[[title]]</div>\n    "]);_templateObject_047526d083d511e9a39cbd3cd8776fa6=function _templateObject_047526d083d511e9a39cbd3cd8776fa6(){return data};return data}//import "//cdn.jsdelivr.net/npm/pouchdb@7.0.0/dist/pouchdb.min.js";
// register globally so we can make sure there is only one
window.PouchDb=window.PouchDb||{};// request if this exists. This helps invoke the element existing in the dom
// as well as that there is only one of them. That way we can ensure everything
// is rendered through the same pouch-db element, making it a singleton.
window.PouchDb.requestAvailability=function(){// if there is no single instance, generate one and append it to end of the document
if(!window.PouchDb.instance){window.PouchDb.instance=document.createElement("pouch-db");document.body.appendChild(window.PouchDb.instance)}return window.PouchDb.instance};/**
 * `pouch-db`
 * `read and write localized data elements`
 *
 * @microcopy - language worth noting:
 *  -
 *
 * @customElement
 * @polymer
 * @demo demo/index.html
 */var PouchDb=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(PouchDb,_PolymerElement);function PouchDb(){babelHelpers.classCallCheck(this,PouchDb);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(PouchDb).apply(this,arguments))}babelHelpers.createClass(PouchDb,[{key:"connectedCallback",/**
   * life cycle, element is afixed to the DOM
   */value:function connectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(PouchDb.prototype),"connectedCallback",this).call(this);window.addEventListener("user-engagement",this.userEngagmentFunction.bind(this));window.addEventListener("show-data",this.showDataFunction.bind(this))}},{key:"userEngagmentFunction",value:function userEngagmentFunction(e){var eventData=e.detail,db=new PouchDB(eventData.dbType),remoteCouch=!1,objectStatement={actor:{mbox:"mailto:dave@gmail.com",name:"Dave Fusco",objectType:"Agent"},verb:{id:eventData.activityId,display:{"en-US":eventData.activityDisplay}},object:{id:eventData.objectId,definition:{name:{"en-US":eventData.objectName},description:{"en-US":eventData.objectDescription}},objectType:"Activity"},result:{score:{scaled:eventData.resultScoreScaled,min:eventData.resultScoreMin,max:eventData.resultScoreMax,raw:eventData.resultScoreRaw},success:eventData.resultSuccess,completion:eventData.resultCompletion,response:eventData.resultResponse,duration:eventData.resultDuration}},xapistatement={_id:new Date().toISOString(),title:JSON.stringify(objectStatement),completed:!1};db.put(xapistatement,function callback(err,result){if(!err){console.log("Successfully posted a statement!")}});if(remoteCouch){var opts={live:!0};db.replicate.to(remoteCouch,opts,syncError);db.replicate.from(remoteCouch,opts,syncError)}//display for testing only - move to own elements
db.allDocs({include_docs:!0,descending:!0},function(err,doc){console.log(doc.rows)});//display for testing only - move to own elements
}},{key:"showDataFunction",value:function showDataFunction(e){var eventData=e.detail,db=new PouchDB(eventData.dbType),remoteCouch=!1;///var remoteCouch = 'http://35.164.8.64:3000/todos';
function processxAPI(statements,callback){var arrayxAPI=[];statements.forEach(function(statement){var out=JSON.parse(statement.doc.title),jsonStatement=out.object.definition.name["en-US"];//var jsonStatement = out.verb.display['en-US'];  //verb
//quizName
arrayxAPI.push(jsonStatement)});callback(arrayxAPI)}function processItems(statements,callback){var map={};statements.forEach(function(statement){map[statement]=(map[statement]||0)+1});callback(map)}db.allDocs({include_docs:!0,descending:!0},function(err,doc){processxAPI(doc.rows,function displayxAPI(mapxAPI){processItems(mapxAPI,function display(backMap){for(var labelsArray=[],resultsArray=[],_i=0,_Object$keys=Object.keys(backMap),key;_i<_Object$keys.length;_i++){key=_Object$keys[_i];labelsArray.push(key)}for(var _i2=0,_Object$values=Object.values(backMap),value;_i2<_Object$values.length;_i2++){value=_Object$values[_i2];resultsArray.push(value)}var bardata={labels:labelsArray,series:[resultsArray]};document.getElementById("bar-chart").data=bardata}// end of display function
);//end of processItems
}// end of displayxAPI function
);//end of processxAPI
});//end of db.allDocs
}// end of showDataFunction
/**
   * life cycle, element is removed from the DOM
   */},{key:"disconnectedCallback",value:function disconnectedCallback(){window.removeEventListener("user-engagement",this.userEngagmentFunction.bind(this));window.removeEventListener("show-data",this.showDataFunction.bind(this));babelHelpers.get(babelHelpers.getPrototypeOf(PouchDb.prototype),"disconnectedCallback",this).call(this)}}],[{key:"template",// render function
get:function get(){return(0,_polymerElement.html)(_templateObject_047526d083d511e9a39cbd3cd8776fa6())}// properties available to the custom element for data binding
},{key:"properties",get:function get(){return{title:{name:"title",type:"String",value:"pouch-db-default-value",reflectToAttribute:!1,observer:!1}}}/**
   * Store the tag name to make it easier to obtain directly.
   * @notice function name must be here for tooling to operate correctly
   */},{key:"tag",get:function get(){return"pouch-db"}}]);return PouchDb}(_polymerElement.PolymerElement);_exports.PouchDb=PouchDb;window.customElements.define(PouchDb.tag,PouchDb)});