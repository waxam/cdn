define(["exports", "meta", "../../es-global-bridge/es-global-bridge.js", "../file-system-broker.js"], function (_exports, meta, _esGlobalBridge, _fileSystemBroker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "FileSystemBroker", {
    enumerable: true,
    get: function get() {
      return _fileSystemBroker.FileSystemBroker;
    }
  });
  Object.defineProperty(_exports, "FileSystemBrokerSingleton", {
    enumerable: true,
    get: function get() {
      return _fileSystemBroker.FileSystemBrokerSingleton;
    }
  });
  _exports.XLSXFileSystemBrokerSingleton = _exports.XLSXFileSystemBroker = void 0;
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Web component that bridges local file system via File API and
   * combines the functionality of the XSLX parser so that you can easily
   * load a file / directory from the user's file system and then access
   * that data from XLSX / ODS / CSV repos
   */
  var XLSXFileSystemBroker = /*#__PURE__*/function (_FileSystemBroker) {
    babelHelpers.inherits(XLSXFileSystemBroker, _FileSystemBroker);

    var _super = _createSuper(XLSXFileSystemBroker);

    function XLSXFileSystemBroker() {
      var _this;

      babelHelpers.classCallCheck(this, XLSXFileSystemBroker);
      _this = _super.call(this);
      _this.XLSX = null; // support global path value we use for resolving these on CDNs

      _this.libPath = new URL("./", meta.url).href;
      _this.libPath += "xlsx/";

      _esGlobalBridge.ESGlobalBridgeStore.load("xlsx", _this.libPath + "dist/xlsx.full.min.js").then(function () {
        if (window.XLSX) {
          _this.XLSX = window.XLSX; // fire event in case anyone wants to react on loaded event

          _this.dispatchEvent(new CustomEvent("xlsx-ready", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: babelHelpers.assertThisInitialized(_this)
          }));
        }
      });

      _this.XW = {
        msg: "xlsx",
        worker: _this.libPath + "xlsxworker.js"
      };
      return _this;
    }

    babelHelpers.createClass(XLSXFileSystemBroker, [{
      key: "workbookFromJSON",
      value: function workbookFromJSON(data) {
        var wb = this.XLSX.utils.book_new();

        for (var i in data) {
          var ws = this.XLSX.utils.json_to_sheet(data[i], {
            skipHeader: true
          });
          this.XLSX.utils.book_append_sheet(wb, ws, i);
        } //this.XLSX.writeFile(wb, 'stuff.xlsx');


        return this.XLSX.write(wb, {
          bookType: "xlsx",
          bookSST: false,
          type: "array"
        });
      }
    }, {
      key: "__toJSON",
      value: function __toJSON(workbook, stringify) {
        var _this2 = this;

        var result = {};
        workbook.SheetNames.forEach(function (sheetName) {
          var roa = _this2.XLSX.utils.sheet_to_json(workbook.Sheets[sheetName], {
            header: 1,
            blankrows: false,
            raw: false,
            dateNF: "yyyy-mm-dd"
          });

          if (roa.length) result[sheetName] = roa;
        });

        if (stringify) {
          return JSON.stringify(result, null, 2);
        } else {
          return result;
        }
      }
    }, {
      key: "__toCSV",
      value: function __toCSV(workbook) {
        var _this3 = this;

        var result = [];
        workbook.SheetNames.forEach(function (sheetName) {
          var csv = _this3.XLSX.utils.sheet_to_csv(workbook.Sheets[sheetName]);

          if (csv.length) {
            result.push("SHEET: " + sheetName);
            result.push("");
            result.push(csv);
          }
        });
        return result.join("\n");
      }
    }, {
      key: "__toFMLA",
      value: function __toFMLA(workbook) {
        var _this4 = this;

        var result = [];
        workbook.SheetNames.forEach(function (sheetName) {
          var formulae = _this4.XLSX.utils.get_formulae(workbook.Sheets[sheetName]);

          if (formulae.length) {
            result.push("SHEET: " + sheetName);
            result.push("");
            result.push(formulae.join("\n"));
          }
        });
        return result.join("\n");
      }
    }, {
      key: "__toHTML",
      value: function __toHTML(workbook) {
        var _this5 = this;

        var content = "";
        workbook.SheetNames.forEach(function (sheetName) {
          var htmlstr = _this5.XLSX.write(workbook, {
            sheet: sheetName,
            type: "string",
            bookType: "html"
          });

          content += htmlstr;
        });
        return content;
      }
    }, {
      key: "__toXLSX",
      value: function __toXLSX(workbook, filename) {
        //this.XLSX.writeFile(workbook, filename);
        return this.XLSX.write(workbook);
      }
    }, {
      key: "processWorker",
      value: function processWorker(wb, format, filename) {
        var output = "";

        switch (format) {
          case "form":
            output = this.__toFMLA(wb);
            break;

          case "html":
            output = this.__toHTML(wb);
            break;

          case "jsonstringify":
            output = this.__toJSON(wb, true);
            break;

          case "json":
            output = this.__toJSON(wb, false);
            break;

          case "xlsx":
            output = this.__toXLSX(wb, filename);
            break;

          default:
            output = this.__toCSV(wb);
        }

        return output;
      }
    }, {
      key: "processFile",
      value: function processFile(input, format, filename) {
        var _this6 = this;

        var reader = new FileReader();

        reader.onload = function (e) {
          _this6.__executeWorker(e.target.result, format, "read", filename);
        };

        reader.readAsBinaryString(input);
      }
    }, {
      key: "__executeWorker",
      value: function __executeWorker(data, format) {
        var _this7 = this;

        var op = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "read";
        var filename = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
        var worker = new Worker(this.XW.worker);

        worker.onmessage = function (e) {
          switch (e.data.t) {
            case "ready":
              break;

            case "e":
              console.error(e.data.d);
              break;

            case _this7.XW.msg:
              window.dispatchEvent(new CustomEvent("xlsx-file-system-data", {
                composed: false,
                bubbles: false,
                cancelable: true,
                detail: {
                  filename: filename,
                  format: format,
                  operation: op,
                  data: _this7.processWorker(JSON.parse(e.data.d), format, filename)
                }
              }));
              break;
          }
        };

        worker.postMessage({
          d: data,
          b: "binary"
        });
      }
    }], [{
      key: "tag",
      get: function get() {
        return "xlsx-file-system-broker";
      }
    }]);
    return XLSXFileSystemBroker;
  }(_fileSystemBroker.FileSystemBroker);

  _exports.XLSXFileSystemBroker = XLSXFileSystemBroker;
  customElements.define(XLSXFileSystemBroker.tag, XLSXFileSystemBroker); // register globally so we can make sure there is only one

  window.XLSXFileSystemBroker = window.XLSXFileSystemBroker || {};

  window.XLSXFileSystemBroker.requestAvailability = function () {
    // if there is no single instance, generate one and append it to end of the document
    if (!window.XLSXFileSystemBroker.instance) {
      window.XLSXFileSystemBroker.instance = document.createElement("xlsx-file-system-broker");
      document.body.appendChild(window.XLSXFileSystemBroker.instance);
    }

    return window.XLSXFileSystemBroker.instance;
  }; // forces appending


  var XLSXFileSystemBrokerSingleton = window.XLSXFileSystemBroker.requestAvailability();
  _exports.XLSXFileSystemBrokerSingleton = XLSXFileSystemBrokerSingleton;
});