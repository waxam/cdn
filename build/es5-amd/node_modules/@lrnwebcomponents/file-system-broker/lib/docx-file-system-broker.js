define(["exports", "meta", "../../es-global-bridge/es-global-bridge.js", "../file-system-broker.js"], function (_exports, meta, _esGlobalBridge, _fileSystemBroker) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DOCXFileSystemBrokerSingleton = _exports.DOCXFileSystemBroker = void 0;
  Object.defineProperty(_exports, "FileSystemBroker", {
    enumerable: true,
    get: function get() {
      return _fileSystemBroker.FileSystemBroker;
    }
  });
  Object.defineProperty(_exports, "FileSystemBrokerSingleton", {
    enumerable: true,
    get: function get() {
      return _fileSystemBroker.FileSystemBrokerSingleton;
    }
  });
  meta = _interopRequireWildcard(meta);

  function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

  function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || babelHelpers.typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Web component that bridges local file system via File API and
   * combines the functionality of the DOCX parser so that you can easily
   * load a file / directory from the user's file system and then access
   * that data from DOCX
   */
  var DOCXFileSystemBroker = /*#__PURE__*/function (_FileSystemBroker) {
    babelHelpers.inherits(DOCXFileSystemBroker, _FileSystemBroker);

    var _super = _createSuper(DOCXFileSystemBroker);

    function DOCXFileSystemBroker() {
      var _this;

      babelHelpers.classCallCheck(this, DOCXFileSystemBroker);
      _this = _super.call(this);
      _this.libPath = new URL("./", meta.url).href;
      _this.libPath += "mammoth/";

      _esGlobalBridge.ESGlobalBridgeStore.load("mammoth", _this.libPath + "mammoth.browser.min.js").then(function () {
        if (window.mammoth) {
          _this.docx = window.mammoth; // fire event in case anyone wants to react on loaded event

          _this.dispatchEvent(new CustomEvent("docx-reader-ready", {
            bubbles: true,
            composed: true,
            cancelable: false,
            detail: babelHelpers.assertThisInitialized(_this)
          }));
        }
      });

      return _this;
    }

    babelHelpers.createClass(DOCXFileSystemBroker, [{
      key: "__toHTML",
      value: function __toHTML(buffer, name) {
        // need an event to imply loaded here
        window.dispatchEvent(new CustomEvent("docx-file-system-data", {
          composed: false,
          bubbles: false,
          cancelable: true,
          detail: {
            name: name,
            value: buffer.value
          }
        }));
      }
      /**
       * Take contents and return a docx file downloaded to the user's browser
       */

    }, {
      key: "HTMLToDOCX",
      value: function HTMLToDOCX(content, filename) {
        var dl = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
        var fileContents = "<html xmlns:o='urn:schemas-microsoft-com:office:office' xmlns:w='urn:schemas-microsoft-com:office:word' xmlns='http://www.w3.org/TR/REC-html40'>\n      <head>\n        <meta charset='utf-8'>\n        <title>".concat(filename, "</title>\n      </head>\n      <body>\n      ").concat(content, "\n      </body>\n    </html>");

        if (dl) {
          var _dl = document.createElement("a");

          document.body.appendChild(_dl);
          _dl.href = "data:application/vnd.ms-word;charset=utf-8," + encodeURIComponent(fileContents);
          _dl.download = "".concat(filename, ".docx");

          _dl.click();

          document.body.removeChild(_dl);
        }

        return fileContents;
      }
    }, {
      key: "fileToHTML",
      value: function fileToHTML(input) {
        var _this2 = this;

        var name = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "filepicked";
        var reader = new FileReader();

        reader.onload = /*#__PURE__*/function () {
          var _ref = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(arrayBuffer) {
            return regeneratorRuntime.wrap(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    _context.next = 2;
                    return _this2.docx.convertToHtml({
                      arrayBuffer: arrayBuffer.target.result
                    }).then(function (data) {
                      return _this2.__toHTML(data, name);
                    }).done();

                  case 2:
                  case "end":
                    return _context.stop();
                }
              }
            }, _callee);
          }));

          return function (_x) {
            return _ref.apply(this, arguments);
          };
        }();

        reader.readAsBinaryString(input);
      }
    }], [{
      key: "tag",
      get: function get() {
        return "docx-file-system-broker";
      }
    }]);
    return DOCXFileSystemBroker;
  }(_fileSystemBroker.FileSystemBroker);

  _exports.DOCXFileSystemBroker = DOCXFileSystemBroker;
  customElements.define(DOCXFileSystemBroker.tag, DOCXFileSystemBroker); // register globally so we can make sure there is only one

  window.DOCXFileSystemBroker = window.DOCXFileSystemBroker || {};

  window.DOCXFileSystemBroker.requestAvailability = function () {
    // if there is no single instance, generate one and append it to end of the document
    if (!window.DOCXFileSystemBroker.instance) {
      window.DOCXFileSystemBroker.instance = document.createElement("docx-file-system-broker");
      document.body.appendChild(window.DOCXFileSystemBroker.instance);
    }

    return window.DOCXFileSystemBroker.instance;
  }; // forces appending


  var DOCXFileSystemBrokerSingleton = window.DOCXFileSystemBroker.requestAvailability();
  _exports.DOCXFileSystemBrokerSingleton = DOCXFileSystemBrokerSingleton;
});