function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

var path = require("path");

var _require = require("@oclif/command"),
    Command = _require.Command,
    flags = _require.flags;

var _require2 = require("child_process"),
    spawn = _require2.spawn;

var startServicePath = require.resolve("../../gateway");

var StopCommand = /*#__PURE__*/function (_Command) {
  "use strict";

  babelHelpers.inherits(StopCommand, _Command);

  var _super = _createSuper(StopCommand);

  function StopCommand() {
    babelHelpers.classCallCheck(this, StopCommand);
    return _super.apply(this, arguments);
  }

  babelHelpers.createClass(StopCommand, [{
    key: "run",
    value: function () {
      var _run = babelHelpers.asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        var _this$parse, flags;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _this$parse = this.parse(StopCommand), flags = _this$parse.flags;

                if (flags.prisma) {
                  spawn("docker-compose down", [startServicePath], {
                    cwd: path.join(__dirname, "../../prisma"),
                    stdio: "inherit",
                    shell: true
                  });
                }

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function run() {
        return _run.apply(this, arguments);
      }

      return run;
    }()
  }]);
  return StopCommand;
}(Command);

StopCommand.description = "Start Prisma Server";
StopCommand.flags = {
  prisma: flags.boolean({
    char: "p",
    description: "stop prisma docker containers"
  })
};
module.exports = StopCommand;