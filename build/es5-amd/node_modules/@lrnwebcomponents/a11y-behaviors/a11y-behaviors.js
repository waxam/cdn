define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yBehaviors = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  var A11yBehaviors = function A11yBehaviors(SuperClass) {
    return /*#__PURE__*/function (_SuperClass) {
      babelHelpers.inherits(_class, _SuperClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(_class, [{
        key: "getTextContrastColor",
        value:
        /**
         * Get a a11y safe text color based on background color
         * @prop {string} bgColor hexadecimal value for the color
         * @return {string} hexadecimal value for the color
         */
        function getTextContrastColor(bgColor) {
          // verify the value is hex value
          var color = ""; // strip hash from string

          var colorBuffer = bgColor.replace("#", ""); // convert rrggbb to decimal

          var rgb = parseInt(colorBuffer, 16); // extract RGB

          var r = rgb >> 16 & 0xff;
          var g = rgb >> 8 & 0xff;
          var b = rgb >> 0 & 0xff; // calculate luma

          var luma = 0.2126 * r + 0.7152 * g + 0.0722 * b; // per ITU-R BT.709
          // if the luma is to low switch to white text

          if (luma < 141) {
            color = "#ffffff";
          } else {
            color = "#000000";
          } // Set color and background color vars


          return color;
        }
        /**
         * Validate and modify the text contrast to ensure the correct contrast
         */

      }, {
        key: "computeTextPropContrast",
        value: function computeTextPropContrast(textprop, bgprop) {
          // verify the value is hex value
          if (this[bgprop].includes("#")) {
            var color = this.getTextContrastColor(this[bgprop]); // Set color and background color vars

            this.set(textprop, color);
          }
        }
      }]);
      return _class;
    }(SuperClass);
  };

  _exports.A11yBehaviors = A11yBehaviors;
});