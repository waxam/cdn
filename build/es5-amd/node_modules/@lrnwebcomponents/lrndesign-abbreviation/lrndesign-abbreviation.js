define(["exports", "require", "../../lit-element/lit-element.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _require, _litElement, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignAbbreviation = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

  function _templateObject2_60287c70d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n        :host {\n          display: inline-block;\n        }\n        abbr {\n          transition: 0.6s all ease;\n          padding: 2px 4px;\n          font-style: italic;\n          background-color: var(--abbreviation-bg, #f9f9f9);\n          text-underline-position: under;\n          text-decoration: underline double;\n          cursor: help;\n          outline: var(--abbreviation-selection, #ffff33);\n        }\n        abbr:focus,\n        abbr:active,\n        abbr:hover {\n          text-decoration: none;\n          background-color: var(--abbreviation-selection, #ffff33);\n        }\n        abbr::-moz-selection,\n        abbr::selection {\n          text-decoration: none;\n          background-color: var(--abbreviation-selection, #ffff33);\n        }\n        simple-tooltip {\n          --simple-tooltip-background: #000000;\n          --simple-tooltip-opacity: 1;\n          --simple-tooltip-text-color: #ffffff;\n          --simple-tooltip-delay-in: 0;\n        }\n      "]);

    _templateObject2_60287c70d34d11ea880ba1e93364c49c = function _templateObject2_60287c70d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  function _templateObject_60287c70d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <abbr tabindex=\"0\" title=\"", "\" id=\"abbr\">", "</abbr>\n      <simple-tooltip for=\"abbr\" position=\"top\" offset=\"2\" animation-delay=\"300\"\n        >", "</simple-tooltip\n      >\n    "]);

    _templateObject_60287c70d34d11ea880ba1e93364c49c = function _templateObject_60287c70d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `lrndesign-abbreviation`
   * `A wrapper to make a cleaner abbreviation deign element`
   *
   * @demo demo/index.html
   * @element lrndesign-abbreviation
   */
  var LrndesignAbbreviation =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(LrndesignAbbreviation, _SchemaBehaviors);

    function LrndesignAbbreviation() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignAbbreviation);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrndesignAbbreviation).call(this));
      setTimeout(function () {
        new Promise(function (res, rej) {
          return _require.default(["../simple-tooltip/simple-tooltip.js"], res, rej);
        });
      }, 0);
      return _this;
    }

    babelHelpers.createClass(LrndesignAbbreviation, [{
      key: "render",

      /**
       * Render callback
       */
      value: function render() {
        return (0, _litElement.html)(_templateObject_60287c70d34d11ea880ba1e93364c49c(), this.phrase, this.abbr, this.phrase);
      }
    }], [{
      key: "styles",
      get: function get() {
        return [(0, _litElement.css)(_templateObject2_60287c70d34d11ea880ba1e93364c49c())];
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-abbreviation";
      }
    }, {
      key: "properties",
      get: function get() {
        return _objectSpread({}, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAbbreviation), "properties", this), {
          /**
           * Abbreviation text.
           */
          abbr: {
            type: String
          },

          /**
           * The thing the abbreviation represents.
           */
          phrase: {
            type: String
          }
        });
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: false,
          gizmo: {
            title: "Abbreviation",
            description: "Simple abbreviation with tooltip of full word",
            icon: "editor:title",
            color: "grey",
            groups: ["Instructional", "Term"],
            handles: [{
              type: "inline",
              text: "text"
            }],
            meta: {
              author: "ELMS:LN"
            }
          },
          settings: {
            quick: [{
              property: "abbr",
              title: "Abbreviation",
              description: "Abbreviation word",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "phrase",
              title: "Phrase",
              description: "The phrase / original words",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            configure: [{
              property: "abbr",
              title: "Abbreviation",
              description: "Abbreviation word",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "phrase",
              title: "Phrase",
              description: "The phrase / original words",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: []
          }
        };
      }
    }]);
    return LrndesignAbbreviation;
  }((0, _schemaBehaviors.SchemaBehaviors)(_litElement.LitElement));

  _exports.LrndesignAbbreviation = LrndesignAbbreviation;
  window.customElements.define(LrndesignAbbreviation.tag, LrndesignAbbreviation);
});