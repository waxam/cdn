define(["exports", "require", "../../@polymer/polymer/polymer-element.js", "../../@polymer/polymer/lib/utils/render-status.js", "../hax-body-behaviors/lib/HAXWiring.js", "../schema-behaviors/schema-behaviors.js"], function (_exports, _require, _polymerElement, _renderStatus, _HAXWiring, _schemaBehaviors) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.LrndesignAbbreviation = void 0;
  _require = babelHelpers.interopRequireWildcard(_require);

  function _templateObject_11f08d90b3b911e9b58d79562a23326c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n      <style>\n        :host {\n          display: inline-block;\n        }\n        abbr {\n          transition: 0.6s all ease;\n          padding: 2px 4px;\n          font-style: italic;\n          background-color: var(--abbreviation-bg, #f9f9f9);\n          text-underline-position: under;\n          text-decoration: underline double;\n          cursor: help;\n          outline: var(--abbreviation-selection, #ffff33);\n          @apply --abbreviation-main;\n        }\n        abbr:focus,\n        abbr:active,\n        abbr:hover {\n          text-decoration: none;\n          background-color: var(--abbreviation-selection, #ffff33);\n          @apply --abbreviation-hover;\n        }\n        abbr::-moz-selection,\n        abbr::selection {\n          text-decoration: none;\n          background-color: var(--abbreviation-selection, #ffff33);\n          @apply --abbreviation-selection;\n        }\n      </style>\n      <abbr tabindex=\"0\" title$=\"[[phrase]]\" id=\"abbr\">[[abbr]]</abbr>\n      <paper-tooltip for=\"abbr\" position=\"top\" offset=\"2\" animation-delay=\"300\"\n        >[[phrase]]</paper-tooltip\n      >\n    "]);

    _templateObject_11f08d90b3b911e9b58d79562a23326c = function _templateObject_11f08d90b3b911e9b58d79562a23326c() {
      return data;
    };

    return data;
  }

  /**
   * `lrndesign-abbreviation`
   * `A wrapper to make a cleaner abbreviation deign element`
   *
   * @demo demo/index.html
   */
  var LrndesignAbbreviation =
  /*#__PURE__*/
  function (_SchemaBehaviors) {
    babelHelpers.inherits(LrndesignAbbreviation, _SchemaBehaviors);

    function LrndesignAbbreviation() {
      var _this;

      babelHelpers.classCallCheck(this, LrndesignAbbreviation);
      _this = babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(LrndesignAbbreviation).call(this));
      new Promise(function (res, rej) {
        return _require.default(["../../@polymer/paper-tooltip/paper-tooltip.js"], res, rej);
      });
      (0, _renderStatus.afterNextRender)(babelHelpers.assertThisInitialized(_this), function () {
        this.HAXWiring = new _HAXWiring.HAXWiring();
        this.HAXWiring.setup(LrndesignAbbreviation.haxProperties, LrndesignAbbreviation.tag, this);
      });
      return _this;
    }

    babelHelpers.createClass(LrndesignAbbreviation, null, [{
      key: "template",
      get: function get() {
        return (0, _polymerElement.html)(_templateObject_11f08d90b3b911e9b58d79562a23326c());
      }
    }, {
      key: "tag",
      get: function get() {
        return "lrndesign-abbreviation";
      }
    }, {
      key: "properties",
      get: function get() {
        var props = {
          /**
           * Abbreviation text.
           */
          abbr: {
            type: String,
            reflectToAttribute: true,
            notify: true
          },

          /**
           * The thing the abbreviation represents.
           */
          phrase: {
            type: String,
            reflectToAttribute: true,
            notify: true
          }
        };

        if (babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAbbreviation), "properties", this)) {
          props = Object.assign(props, babelHelpers.get(babelHelpers.getPrototypeOf(LrndesignAbbreviation), "properties", this));
        }

        return props;
      }
      /**
       * Attached to the DOM, now fire.
       */

    }, {
      key: "haxProperties",
      get: function get() {
        return {
          canScale: false,
          canPosition: false,
          canEditSource: false,
          gizmo: {
            title: "Abbreviation",
            description: "Simple abbreviation with tooltip of full word",
            icon: "editor:title",
            color: "grey",
            groups: ["Instructional", "Term"],
            handles: [{
              type: "inline",
              text: "text"
            }],
            meta: {
              author: "LRNWebComponents"
            }
          },
          settings: {
            quick: [{
              property: "abbr",
              title: "Abbreviation",
              description: "Abbreviation word",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "phrase",
              title: "Phrase",
              description: "The phrase / original words",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            configure: [{
              property: "abbr",
              title: "Abbreviation",
              description: "Abbreviation word",
              inputMethod: "textfield",
              icon: "editor:title"
            }, {
              property: "phrase",
              title: "Phrase",
              description: "The phrase / original words",
              inputMethod: "textfield",
              icon: "editor:title"
            }],
            advanced: []
          }
        };
      }
    }]);
    return LrndesignAbbreviation;
  }((0, _schemaBehaviors.SchemaBehaviors)(_polymerElement.PolymerElement));

  _exports.LrndesignAbbreviation = LrndesignAbbreviation;
  window.customElements.define(LrndesignAbbreviation.tag, LrndesignAbbreviation);
});