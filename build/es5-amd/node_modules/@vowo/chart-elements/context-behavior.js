define(["exports", "../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ChartContextBehavior = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /** @polymerMixin */
  var ChartContextBehavior = (0, _mixin.dedupingMixin)(function (superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(_class, _superClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(_class, [{
        key: "_measure",
        value: function _measure(cb) {
          function measure() {
            if (this.offsetHeight) {
              cb(true);
            } else {
              cb(false);
            }
          }

          requestAnimationFrame(measure.bind(this));
        }
      }, {
        key: "_queue",
        value: function _queue() {
          var _this = this;

          if (this.hasData) {
            this._measure(function (hasHeight) {
              if (hasHeight) {
                _this.updateChart();
              }
            });
          }
        }
      }, {
        key: "updateChart",
        value: function updateChart() {
          this.async(function () {
            if (this.chart) {
              this.chart.stop();
              this.mixin(this.chart.data, this.data);
              this.chart.update();
            } else {
              this.async(function () {
                if (this.hasData) {
                  this.chart = new Chart(this.ctx, {
                    type: this.type,
                    data: this.data,
                    options: this.options
                  });
                }
              }, null, 0);
            }
          }, null, 0);
        }
      }, {
        key: "connectedCallback",
        value: function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          this.ctx = this.$.canvas.getContext('2d');

          this._queue();
        }
      }]);
      return _class;
    }(superClass);
  });
  _exports.ChartContextBehavior = ChartContextBehavior;
});