define(["exports", "../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ChartResizeBehavior = void 0;

  /** @polymerMixin */
  var ChartResizeBehavior = (0, _mixin.dedupingMixin)(function (superClass) {
    return (
      /*#__PURE__*/
      function (_superClass) {
        babelHelpers.inherits(_class, _superClass);

        function _class() {
          babelHelpers.classCallCheck(this, _class);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(_class).apply(this, arguments));
        }

        babelHelpers.createClass(_class, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
            this._boundOnIronResize = this._onIronResize.bind(this);
            this.addEventListener('iron-resize', this._boundOnIronResize);
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
            this.removeEventListener('iron-resize', this._boundOnIronResize);
          } // If an iron-resizer changes our size and notifies us
          // check to see if we have a height and if so, recreate
          // the chart

        }, {
          key: "_onIronResize",
          value: function _onIronResize() {
            this._queue();
          } // This is a public method the user can call if they've
          // changed our dimensions with CSS.

        }, {
          key: "resize",
          value: function resize() {
            if (this.chart) {
              this.chart.resize();
              this.chart.render(true);
            }
          }
        }]);
        return _class;
      }(superClass)
    );
  });
  _exports.ChartResizeBehavior = ChartResizeBehavior;
});