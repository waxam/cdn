define(["exports", "../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ChartResizeBehavior = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /** @polymerMixin */
  var ChartResizeBehavior = (0, _mixin.dedupingMixin)(function (superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(_class, _superClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(_class, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this).call(this);
          this._boundOnIronResize = this._onIronResize.bind(this);
          this.addEventListener('iron-resize', this._boundOnIronResize);
        }
      }, {
        key: "disconnectedCallback",
        value: function disconnectedCallback() {
          babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "disconnectedCallback", this).call(this);
          this.removeEventListener('iron-resize', this._boundOnIronResize);
        } // If an iron-resizer changes our size and notifies us
        // check to see if we have a height and if so, recreate
        // the chart

      }, {
        key: "_onIronResize",
        value: function _onIronResize() {
          this._queue();
        } // This is a public method the user can call if they've
        // changed our dimensions with CSS.

      }, {
        key: "resize",
        value: function resize() {
          if (this.chart) {
            this.chart.resize();
            this.chart.render(true);
          }
        }
      }]);
      return _class;
    }(superClass);
  });
  _exports.ChartResizeBehavior = ChartResizeBehavior;
});