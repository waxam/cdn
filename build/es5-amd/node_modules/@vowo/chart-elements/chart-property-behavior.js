define(["exports", "../../@polymer/polymer/lib/utils/mixin.js"], function (_exports, _mixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ChartPropertyBehavior = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /** @polymerMixin */
  var ChartPropertyBehavior = (0, _mixin.dedupingMixin)(function (superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(_class, _superClass);

      var _super = _createSuper(_class);

      function _class() {
        babelHelpers.classCallCheck(this, _class);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(_class, [{
        key: "_configurationChanged",
        value: function _configurationChanged(dataRecord, optionsRecord) {
          if (dataRecord.base.labels && dataRecord.base.datasets) {
            this.hasData = true;
          } else {
            this.hasData = false;
          }

          if (this.hasData && this.isAttached) {
            this._queue();
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            type: {
              type: String,
              readOnly: true,
              value: 'bar'
            },
            chart: {
              notify: true
            },
            data: {
              type: Object,
              value: function value() {
                return {};
              }
            },
            options: {
              type: Object,
              value: function value() {
                return {};
              }
            }
          };
        }
      }, {
        key: "observers",
        get: function get() {
          return ['_configurationChanged(data.*, options.*)'];
        }
      }]);
      return _class;
    }(superClass);
  });
  _exports.ChartPropertyBehavior = ChartPropertyBehavior;
});