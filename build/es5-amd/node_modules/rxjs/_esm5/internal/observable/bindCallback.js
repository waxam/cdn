define(["exports","../Observable.js","../AsyncSubject.js","../operators/map.js","../util/canReportError.js","../util/isArray.js","../util/isScheduler.js"],function(_exports,_Observable,_AsyncSubject,_map,_canReportError,_isArray,_isScheduler){"use strict";Object.defineProperty(_exports,"__esModule",{value:!0});_exports.bindCallback=bindCallback;function bindCallback(callbackFunc,resultSelector,scheduler){if(resultSelector){if((0,_isScheduler.isScheduler)(resultSelector)){scheduler=resultSelector}else{return function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}return bindCallback(callbackFunc,scheduler).apply(void 0,args).pipe((0,_map.map)(function(args){return(0,_isArray.isArray)(args)?resultSelector.apply(void 0,args):resultSelector(args)}))}}}return function(){for(var args=[],_i=0;_i<arguments.length;_i++){args[_i]=arguments[_i]}var context=this,subject,params={context:context,subject:subject,callbackFunc:callbackFunc,scheduler:scheduler};return new _Observable.Observable(function(subscriber){if(!scheduler){if(!subject){subject=new _AsyncSubject.AsyncSubject;var handler=function(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++){innerArgs[_i]=arguments[_i]}subject.next(1>=innerArgs.length?innerArgs[0]:innerArgs);subject.complete()};try{callbackFunc.apply(context,args.concat([handler]))}catch(err){if((0,_canReportError.canReportError)(subject)){subject.error(err)}else{console.warn(err)}}}return subject.subscribe(subscriber)}else{return scheduler.schedule(dispatch,0,{args:args,subscriber:subscriber,params:params})}})}}function dispatch(state){var _this=this,self=this,args=state.args,subscriber=state.subscriber,params=state.params,callbackFunc=params.callbackFunc,context=params.context,scheduler=params.scheduler,subject=params.subject;if(!subject){subject=params.subject=new _AsyncSubject.AsyncSubject;var handler=function(){for(var innerArgs=[],_i=0;_i<arguments.length;_i++){innerArgs[_i]=arguments[_i]}var value=1>=innerArgs.length?innerArgs[0]:innerArgs;_this.add(scheduler.schedule(dispatchNext,0,{value:value,subject:subject}))};try{callbackFunc.apply(context,args.concat([handler]))}catch(err){subject.error(err)}}this.add(subject.subscribe(subscriber))}function dispatchNext(state){var value=state.value,subject=state.subject;subject.next(value);subject.complete()}});