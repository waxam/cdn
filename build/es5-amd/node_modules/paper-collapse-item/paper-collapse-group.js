define(["../@polymer/polymer/polymer-element.js","../@polymer/polymer/lib/utils/flattened-nodes-observer.js"],function(_polymerElement,_flattenedNodesObserver){"use strict";function _templateObject_f76bed60984d11e98da46dc60ea6a0fa(){var data=babelHelpers.taggedTemplateLiteral(["<slot id=\"content\"></slot>"]);_templateObject_f76bed60984d11e98da46dc60ea6a0fa=function _templateObject_f76bed60984d11e98da46dc60ea6a0fa(){return data};return data}/**
 * `PaperCollapseGroup`
 *
 * An element which is able to group a set of paper-collapse-items , where only one
 * item can be opened.
 *
 * ### Example
 *
 * ```html
 * <paper-collapse-group>
 * <paper-collapse-item icon="icons:favorite" header="Item 1" opened>
 * 	Only on item will be opened inside groups
 * </paper-collapse-item>
 * <paper-collapse-item icon="icons:info" header="Item 2">
 *		Only on item will be opened inside groups
 * </paper-collapse-item>
 * <paper-collapse-item icon="icons:help" header="<b>Header <u>with</u> HTML</b>">
 *	Only on item will be opened inside groups
 * </paper-collapse-item>
 * </paper-collapse-group>
 * ```
 *
 * @customElement
 * @polymer
 * @demo demo/index.html
 */var PaperCollapseGroup=/*#__PURE__*/function(_PolymerElement){babelHelpers.inherits(PaperCollapseGroup,_PolymerElement);function PaperCollapseGroup(){babelHelpers.classCallCheck(this,PaperCollapseGroup);return babelHelpers.possibleConstructorReturn(this,babelHelpers.getPrototypeOf(PaperCollapseGroup).apply(this,arguments))}babelHelpers.createClass(PaperCollapseGroup,[{key:"ready",/**
	 * Use for one-time configuration of your component after local DOM is
	 * initialized.
	 */value:function ready(){var _this=this;babelHelpers.get(babelHelpers.getPrototypeOf(PaperCollapseGroup.prototype),"ready",this).call(this);this.addEventListener("toggle",function(e){return _this._onToggle(e)})}},{key:"connectedCallback",value:function connectedCallback(){var _this2=this;babelHelpers.get(babelHelpers.getPrototypeOf(PaperCollapseGroup.prototype),"connectedCallback",this).call(this);this._observer=new _flattenedNodesObserver.FlattenedNodesObserver(this.$.content,function(info){var addedItems=info.addedNodes.filter(function(node){return"paper-collapse-item"===node.nodeName.toLowerCase()});if(0<addedItems.length){_this2._items=_this2._items.concat(addedItems);var updateEvent=new CustomEvent("update",{detail:null,bubbles:!0,composed:!0});_this2.dispatchEvent(updateEvent)}})}},{key:"disconnectedCallback",value:function disconnectedCallback(){babelHelpers.get(babelHelpers.getPrototypeOf(PaperCollapseGroup.prototype),"disconnectedCallback",this).call(this);this._observer.disconnect()}/**
	 * On Toggle
	 *
	 * Listen to fired toggle events from items and update the groups
	 *
	 * @param  {Event} e
	 */},{key:"_onToggle",value:function _onToggle(e){this._items.forEach(function(item){// Force all other items (aside the one triggering the event) to
// get closed
if(item!==e.target){item.opened=!1}})}}],[{key:"template",get:function get(){return(0,_polymerElement.html)(_templateObject_f76bed60984d11e98da46dc60ea6a0fa())}},{key:"properties",get:function get(){return{/**
			 * Array of observed paper-collapse-items
			 *
			 * @type {Array}
			 */_items:{type:Array,notify:!0,value:[]}}}}]);return PaperCollapseGroup}(_polymerElement.PolymerElement);window.customElements.define("paper-collapse-group",PaperCollapseGroup)});