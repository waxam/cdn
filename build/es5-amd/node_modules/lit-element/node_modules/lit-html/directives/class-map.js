define(["exports", "../lit-html.js"], function (_exports, _litHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.classMap = void 0;

  /**
   * @license
   * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
   * This code may only be used under the BSD style license found at
   * http://polymer.github.io/LICENSE.txt
   * The complete set of authors may be found at
   * http://polymer.github.io/AUTHORS.txt
   * The complete set of contributors may be found at
   * http://polymer.github.io/CONTRIBUTORS.txt
   * Code distributed by Google as part of the polymer project is also
   * subject to an additional IP rights grant found at
   * http://polymer.github.io/PATENTS.txt
   */
  // IE11 doesn't support classList on SVG elements, so we emulate it with a Set
  var ClassList =
  /*#__PURE__*/
  function () {
    function ClassList(element) {
      babelHelpers.classCallCheck(this, ClassList);
      this.classes = new Set();
      this.changed = false;
      this.element = element;
      var classList = (element.getAttribute('class') || '').split(/\s+/);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = classList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var cls = _step.value;
          this.classes.add(cls);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }

    babelHelpers.createClass(ClassList, [{
      key: "add",
      value: function add(cls) {
        this.classes.add(cls);
        this.changed = true;
      }
    }, {
      key: "remove",
      value: function remove(cls) {
        this.classes.delete(cls);
        this.changed = true;
      }
    }, {
      key: "commit",
      value: function commit() {
        if (this.changed) {
          var classString = '';
          this.classes.forEach(function (cls) {
            return classString += cls + ' ';
          });
          this.element.setAttribute('class', classString);
        }
      }
    }]);
    return ClassList;
  }();
  /**
   * Stores the ClassInfo object applied to a given AttributePart.
   * Used to unset existing values when a new ClassInfo object is applied.
   */


  var previousClassesCache = new WeakMap();
  /**
   * A directive that applies CSS classes. This must be used in the `class`
   * attribute and must be the only part used in the attribute. It takes each
   * property in the `classInfo` argument and adds the property name to the
   * element's `class` if the property value is truthy; if the property value is
   * falsey, the property name is removed from the element's `class`. For example
   * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.
   * @param classInfo {ClassInfo}
   */

  var classMap = (0, _litHtml.directive)(function (classInfo) {
    return function (part) {
      if (!babelHelpers.instanceof(part, _litHtml.AttributePart) || babelHelpers.instanceof(part, _litHtml.PropertyPart) || part.committer.name !== 'class' || part.committer.parts.length > 1) {
        throw new Error('The `classMap` directive must be used in the `class` attribute ' + 'and must be the only part in the attribute.');
      }

      var committer = part.committer;
      var element = committer.element;
      var previousClasses = previousClassesCache.get(part);

      if (previousClasses === undefined) {
        // Write static classes once
        // Use setAttribute() because className isn't a string on SVG elements
        element.setAttribute('class', committer.strings.join(' '));
        previousClassesCache.set(part, previousClasses = new Set());
      }

      var classList = element.classList || new ClassList(element); // Remove old classes that no longer apply
      // We use forEach() instead of for-of so that re don't require down-level
      // iteration.

      previousClasses.forEach(function (name) {
        if (!(name in classInfo)) {
          classList.remove(name);
          previousClasses.delete(name);
        }
      }); // Add or remove classes based on their classMap value

      for (var name in classInfo) {
        var value = classInfo[name];

        if (value != previousClasses.has(name)) {
          // We explicitly want a loose truthy check of `value` because it seems
          // more convenient that '' and 0 are skipped.
          if (value) {
            classList.add(name);
            previousClasses.add(name);
          } else {
            classList.remove(name);
            previousClasses.delete(name);
          }
        }
      }

      if (typeof classList.commit === 'function') {
        classList.commit();
      }
    };
  });
  _exports.classMap = classMap;
});