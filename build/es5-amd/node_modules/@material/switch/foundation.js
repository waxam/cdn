define(["exports", "../../tslib/tslib.es6.js", "../base/foundation.js", "./constants.js"], function (_exports, tslib_1, _foundation, _constants) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.default = _exports.MDCSwitchFoundation = void 0;
  tslib_1 = babelHelpers.interopRequireWildcard(tslib_1);

  /**
   * @license
   * Copyright 2018 Google Inc.
   *
   * Permission is hereby granted, free of charge, to any person obtaining a copy
   * of this software and associated documentation files (the "Software"), to deal
   * in the Software without restriction, including without limitation the rights
   * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   * copies of the Software, and to permit persons to whom the Software is
   * furnished to do so, subject to the following conditions:
   *
   * The above copyright notice and this permission notice shall be included in
   * all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   * THE SOFTWARE.
   */
  var MDCSwitchFoundation =
  /** @class */
  function (_super) {
    tslib_1.__extends(MDCSwitchFoundation, _super);

    function MDCSwitchFoundation(adapter) {
      return _super.call(this, tslib_1.__assign({}, MDCSwitchFoundation.defaultAdapter, adapter)) || this;
    }

    Object.defineProperty(MDCSwitchFoundation, "strings", {
      /** The string constants used by the switch. */
      get: function get() {
        return _constants.strings;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation, "cssClasses", {
      /** The CSS classes used by the switch. */
      get: function get() {
        return _constants.cssClasses;
      },
      enumerable: true,
      configurable: true
    });
    Object.defineProperty(MDCSwitchFoundation, "defaultAdapter", {
      /** The default Adapter for the switch. */
      get: function get() {
        return {
          addClass: function addClass() {
            return undefined;
          },
          removeClass: function removeClass() {
            return undefined;
          },
          setNativeControlChecked: function setNativeControlChecked() {
            return undefined;
          },
          setNativeControlDisabled: function setNativeControlDisabled() {
            return undefined;
          },
          setNativeControlAttr: function setNativeControlAttr() {
            return undefined;
          }
        };
      },
      enumerable: true,
      configurable: true
    });
    /** Sets the checked state of the switch. */

    MDCSwitchFoundation.prototype.setChecked = function (checked) {
      this.adapter_.setNativeControlChecked(checked);
      this.updateAriaChecked_(checked);
      this.updateCheckedStyling_(checked);
    };
    /** Sets the disabled state of the switch. */


    MDCSwitchFoundation.prototype.setDisabled = function (disabled) {
      this.adapter_.setNativeControlDisabled(disabled);

      if (disabled) {
        this.adapter_.addClass(_constants.cssClasses.DISABLED);
      } else {
        this.adapter_.removeClass(_constants.cssClasses.DISABLED);
      }
    };
    /** Handles the change event for the switch native control. */


    MDCSwitchFoundation.prototype.handleChange = function (evt) {
      var nativeControl = evt.target;
      this.updateAriaChecked_(nativeControl.checked);
      this.updateCheckedStyling_(nativeControl.checked);
    };
    /** Updates the styling of the switch based on its checked state. */


    MDCSwitchFoundation.prototype.updateCheckedStyling_ = function (checked) {
      if (checked) {
        this.adapter_.addClass(_constants.cssClasses.CHECKED);
      } else {
        this.adapter_.removeClass(_constants.cssClasses.CHECKED);
      }
    };

    MDCSwitchFoundation.prototype.updateAriaChecked_ = function (checked) {
      this.adapter_.setNativeControlAttr(_constants.strings.ARIA_CHECKED_ATTR, "" + !!checked);
    };

    return MDCSwitchFoundation;
  }(_foundation.MDCFoundation);

  _exports.MDCSwitchFoundation = MDCSwitchFoundation;
  // tslint:disable-next-line:no-default-export Needed for backward compatibility with MDC Web v0.44.0 and earlier.
  var _default = MDCSwitchFoundation;
  _exports.default = _default;
});