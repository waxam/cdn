define(["exports", "./base-element.js"], function (_exports, _baseElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addHasRemoveClass", {
    enumerable: true,
    get: function get() {
      return _baseElement.addHasRemoveClass;
    }
  });
  Object.defineProperty(_exports, "BaseElement", {
    enumerable: true,
    get: function get() {
      return _baseElement.BaseElement;
    }
  });
  _exports.FormElement = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /** @soyCompatible */
  var FormElement = /*#__PURE__*/function (_BaseElement) {
    babelHelpers.inherits(FormElement, _BaseElement);

    var _super = _createSuper(FormElement);

    function FormElement() {
      babelHelpers.classCallCheck(this, FormElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(FormElement, [{
      key: "createRenderRoot",
      value: function createRenderRoot() {
        return this.attachShadow({
          mode: 'open',
          delegatesFocus: true
        });
      }
    }, {
      key: "click",
      value: function click() {
        if (this.formElement) {
          this.formElement.focus();
          this.formElement.click();
        }
      }
    }, {
      key: "setAriaLabel",
      value: function setAriaLabel(label) {
        if (this.formElement) {
          this.formElement.setAttribute('aria-label', label);
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(FormElement.prototype), "firstUpdated", this).call(this);
        this.mdcRoot.addEventListener('change', function (e) {
          _this.dispatchEvent(new Event('change', e));
        });
      }
    }]);
    return FormElement;
  }(_baseElement.BaseElement);

  _exports.FormElement = FormElement;
});