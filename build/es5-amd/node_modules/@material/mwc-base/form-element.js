define(["exports", "./base-element.js"], function (_exports, _baseElement) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addHasRemoveClass", {
    enumerable: true,
    get: function get() {
      return _baseElement.addHasRemoveClass;
    }
  });
  Object.defineProperty(_exports, "BaseElement", {
    enumerable: true,
    get: function get() {
      return _baseElement.BaseElement;
    }
  });
  _exports.FormElement = void 0;

  /**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  var FormElement =
  /*#__PURE__*/
  function (_BaseElement) {
    babelHelpers.inherits(FormElement, _BaseElement);

    function FormElement() {
      babelHelpers.classCallCheck(this, FormElement);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(FormElement).apply(this, arguments));
    }

    babelHelpers.createClass(FormElement, [{
      key: "createRenderRoot",
      value: function createRenderRoot() {
        return this.attachShadow({
          mode: 'open',
          delegatesFocus: true
        });
      }
    }, {
      key: "click",
      value: function click() {
        if (this.formElement) {
          this.formElement.focus();
          this.formElement.click();
        }
      }
    }, {
      key: "setAriaLabel",
      value: function setAriaLabel(label) {
        if (this.formElement) {
          this.formElement.setAttribute('aria-label', label);
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        var _this = this;

        babelHelpers.get(babelHelpers.getPrototypeOf(FormElement.prototype), "firstUpdated", this).call(this);
        this.mdcRoot.addEventListener('change', function (e) {
          _this.dispatchEvent(new Event('change', e));
        });
      }
    }]);
    return FormElement;
  }(_baseElement.BaseElement);

  _exports.FormElement = FormElement;
});