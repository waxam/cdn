define(["exports", "../dom/ponyfill.js"], function (_exports, _ponyfill) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.findAssignedElement = findAssignedElement;
  _exports.addHasRemoveClass = addHasRemoveClass;
  _exports.doesElementContainFocus = _exports.deepActiveElementPath = _exports.supportsPassiveEventListener = _exports.isNodeElement = void 0;

  function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  /**
   * Determines whether a node is an element.
   *
   * @param node Node to check
   */
  var isNodeElement = function isNodeElement(node) {
    return node.nodeType === Node.ELEMENT_NODE;
  };

  _exports.isNodeElement = isNodeElement;

  function findAssignedElement(slot, selector) {
    var _iterator = _createForOfIteratorHelper(slot.assignedNodes({
      flatten: true
    })),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var node = _step.value;

        if (isNodeElement(node)) {
          var el = node;

          if ((0, _ponyfill.matches)(el, selector)) {
            return el;
          }
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return null;
  }

  function addHasRemoveClass(element) {
    return {
      addClass: function addClass(className) {
        element.classList.add(className);
      },
      removeClass: function removeClass(className) {
        element.classList.remove(className);
      },
      hasClass: function hasClass(className) {
        return element.classList.contains(className);
      }
    };
  }

  var supportsPassive = false;

  var fn = function fn() {};

  var optionsBlock = {
    get passive() {
      supportsPassive = true;
      return false;
    }

  };
  document.addEventListener('x', fn, optionsBlock);
  document.removeEventListener('x', fn);
  /**
   * Do event listeners suport the `passive` option?
   */

  var supportsPassiveEventListener = supportsPassive;
  _exports.supportsPassiveEventListener = supportsPassiveEventListener;

  var deepActiveElementPath = function deepActiveElementPath() {
    var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.document;
    var activeElement = doc.activeElement;
    var path = [];

    if (!activeElement) {
      return path;
    }

    while (activeElement) {
      path.push(activeElement);

      if (activeElement.shadowRoot) {
        activeElement = activeElement.shadowRoot.activeElement;
      } else {
        break;
      }
    }

    return path;
  };

  _exports.deepActiveElementPath = deepActiveElementPath;

  var doesElementContainFocus = function doesElementContainFocus(element) {
    var activePath = deepActiveElementPath();

    if (!activePath.length) {
      return false;
    }

    var deepActiveElement = activePath[activePath.length - 1];
    var focusEv = new Event('check-if-focused', {
      bubbles: true,
      composed: true
    });
    var composedPath = [];

    var listener = function listener(ev) {
      composedPath = ev.composedPath();
    };

    document.body.addEventListener('check-if-focused', listener);
    deepActiveElement.dispatchEvent(focusEv);
    document.body.removeEventListener('check-if-focused', listener);
    return composedPath.indexOf(element) !== -1;
  };

  _exports.doesElementContainFocus = doesElementContainFocus;
});