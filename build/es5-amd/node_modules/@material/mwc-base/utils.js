define(["exports", "../dom/ponyfill.js"], function (_exports, _ponyfill) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.findAssignedElement = findAssignedElement;
  _exports.addHasRemoveClass = addHasRemoveClass;
  _exports.doesElementContainFocus = _exports.deepActiveElementPath = _exports.supportsPassiveEventListener = _exports.isNodeElement = void 0;

  /**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */

  /**
   * Return an element assigned to a given slot that matches the given selector
   */

  /**
   * Determines whether a node is an element.
   *
   * @param node Node to check
   */
  var isNodeElement = function isNodeElement(node) {
    return node.nodeType === Node.ELEMENT_NODE;
  };

  _exports.isNodeElement = isNodeElement;

  function findAssignedElement(slot, selector) {
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = slot.assignedNodes({
        flatten: true
      })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        var node = _step.value;

        if (isNodeElement(node)) {
          var el = node;

          if ((0, _ponyfill.matches)(el, selector)) {
            return el;
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    return null;
  }

  function addHasRemoveClass(element) {
    return {
      addClass: function addClass(className) {
        element.classList.add(className);
      },
      removeClass: function removeClass(className) {
        element.classList.remove(className);
      },
      hasClass: function hasClass(className) {
        return element.classList.contains(className);
      }
    };
  }

  var supportsPassive = false;

  var fn = function fn() {};

  var optionsBlock = {
    get passive() {
      supportsPassive = true;
      return false;
    }

  };
  document.addEventListener('x', fn, optionsBlock);
  document.removeEventListener('x', fn);
  /**
   * Do event listeners suport the `passive` option?
   */

  var supportsPassiveEventListener = supportsPassive;
  _exports.supportsPassiveEventListener = supportsPassiveEventListener;

  var deepActiveElementPath = function deepActiveElementPath() {
    var doc = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : window.document;
    var activeElement = doc.activeElement;
    var path = [];

    if (!activeElement) {
      return path;
    }

    while (activeElement) {
      path.push(activeElement);

      if (activeElement.shadowRoot) {
        activeElement = activeElement.shadowRoot.activeElement;
      } else {
        break;
      }
    }

    return path;
  };

  _exports.deepActiveElementPath = deepActiveElementPath;

  var doesElementContainFocus = function doesElementContainFocus(element) {
    var activePath = deepActiveElementPath();

    if (!activePath.length) {
      return false;
    }

    var deepActiveElement = activePath[activePath.length - 1];
    var focusEv = new Event('check-if-focused', {
      bubbles: true,
      composed: true
    });
    var composedPath = [];

    var listener = function listener(ev) {
      composedPath = ev.composedPath();
    };

    document.body.addEventListener('check-if-focused', listener);
    deepActiveElement.dispatchEvent(focusEv);
    document.body.removeEventListener('check-if-focused', listener);
    return composedPath.indexOf(element) !== -1;
  };

  _exports.doesElementContainFocus = doesElementContainFocus;
});