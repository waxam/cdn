define(["exports", "../../lit-element/lit-element.js", "./utils.js"], function (_exports, _litElement, _utils) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  Object.defineProperty(_exports, "addHasRemoveClass", {
    enumerable: true,
    get: function get() {
      return _utils.addHasRemoveClass;
    }
  });
  _exports.BaseElement = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

  /** @soyCompatible */
  var BaseElement = /*#__PURE__*/function (_LitElement) {
    babelHelpers.inherits(BaseElement, _LitElement);

    var _super = _createSuper(BaseElement);

    function BaseElement() {
      babelHelpers.classCallCheck(this, BaseElement);
      return _super.apply(this, arguments);
    }

    babelHelpers.createClass(BaseElement, [{
      key: "createFoundation",

      /**
       * Create and attach the MDC Foundation to the instance
       */
      value: function createFoundation() {
        if (this.mdcFoundation !== undefined) {
          this.mdcFoundation.destroy();
        }

        if (this.mdcFoundationClass) {
          this.mdcFoundation = new this.mdcFoundationClass(this.createAdapter());
          this.mdcFoundation.init();
        }
      }
    }, {
      key: "firstUpdated",
      value: function firstUpdated() {
        this.createFoundation();
      }
    }]);
    return BaseElement;
  }(_litElement.LitElement);

  _exports.BaseElement = BaseElement;
});