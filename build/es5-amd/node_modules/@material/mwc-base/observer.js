define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.observer = void 0;

  /**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  // tslint:disable:no-any

  /**
   * Specifies an observer callback that is run when the decorated property
   * changes. The observer receives the current and old value as arguments.
   */
  var observer = function observer(_observer) {
    return (// eslint-disable-next-line @typescript-eslint/no-explicit-any
      function (proto, propName) {
        // if we haven't wrapped `updated` in this class, do so
        if (!proto.constructor._observers) {
          proto.constructor._observers = new Map();
          var userUpdated = proto.updated;

          proto.updated = function (changedProperties) {
            var _this = this;

            userUpdated.call(this, changedProperties);
            changedProperties.forEach(function (v, k) {
              var observers = _this.constructor._observers;
              var observer = observers.get(k);

              if (observer !== undefined) {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                observer.call(_this, _this[k], v);
              }
            });
          }; // clone any existing observers (superclasses)

        } else if (!proto.constructor.hasOwnProperty('_observers')) {
          var observers = proto.constructor._observers;
          proto.constructor._observers = new Map();
          observers.forEach( // eslint-disable-next-line @typescript-eslint/no-explicit-any
          function (v, k) {
            return proto.constructor._observers.set(k, v);
          });
        } // set this method


        proto.constructor._observers.set(propName, _observer);
      }
    );
  };

  _exports.observer = observer;
});