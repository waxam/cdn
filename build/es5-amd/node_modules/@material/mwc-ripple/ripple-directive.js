define(["exports", "../dom/events.js", "../dom/ponyfill.js", "../ripple/foundation.js", "../ripple/util.js", "../../lit-html/lit-html.js", "./mwc-ripple-global-css.js"], function (_exports, _events, _ponyfill, _foundation, _util, _litHtml, _mwcRippleGlobalCss) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ripple = _exports.rippleNode = void 0;
  _foundation = babelHelpers.interopRequireDefault(_foundation);

  /**
  @license
  Copyright 2018 Google Inc. All Rights Reserved.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  */
  var supportsCssVariablesWin = (0, _util.supportsCssVariables)(window); // NOTE: This is a workaround for
  // https://bugs.webkit.org/show_bug.cgi?id=173027. Since keyframes on
  // pseudo-elements (:after) are not supported in Shadow DOM, we put the keyframe
  // style into the <head> element.

  var isSafari = navigator.userAgent.match(/Safari/);
  var didApplyRippleStyle = false;

  var applyRippleStyle = function applyRippleStyle() {
    didApplyRippleStyle = true;
    var styleElement = document.createElement('style');
    var part = new _litHtml.NodePart({
      templateFactory: _litHtml.templateFactory
    });
    part.appendInto(styleElement);
    part.setValue(_mwcRippleGlobalCss.style);
    part.commit(); // eslint-disable-next-line @typescript-eslint/no-non-null-assertion

    document.head.appendChild(styleElement);
  };
  /**
   * Applied a ripple to the node specified by {surfaceNode}.
   * @param options {RippleNodeOptions}
   */


  var rippleNode = function rippleNode(options) {
    if (isSafari && !didApplyRippleStyle) {
      applyRippleStyle();
    } // TODO(sorvell): This directive requires bringing css yourself. We probably
    // need to do this because of ShadyCSS, but on Safari, the keyframes styling
    // must be global. Perhaps this directive could fix that.


    var surfaceNode = options.surfaceNode;
    var interactionNode = options.interactionNode || surfaceNode; // only style interaction node if not in the same root

    if (interactionNode.getRootNode() !== surfaceNode.getRootNode()) {
      if (interactionNode.style.position === '') {
        interactionNode.style.position = 'relative';
      }
    }

    var adapter = {
      browserSupportsCssVars: function browserSupportsCssVars() {
        return supportsCssVariablesWin;
      },
      isUnbounded: function isUnbounded() {
        return options.unbounded === undefined ? true : options.unbounded;
      },
      isSurfaceActive: function isSurfaceActive() {
        return (0, _ponyfill.matches)(interactionNode, ':active');
      },
      isSurfaceDisabled: function isSurfaceDisabled() {
        return Boolean(interactionNode.hasAttribute('disabled'));
      },
      addClass: function addClass(className) {
        return surfaceNode.classList.add(className);
      },
      removeClass: function removeClass(className) {
        return surfaceNode.classList.remove(className);
      },
      containsEventTarget: function containsEventTarget(target) {
        return interactionNode.contains(target);
      },
      registerInteractionHandler: function registerInteractionHandler(type, handler) {
        return interactionNode.addEventListener(type, handler, (0, _events.applyPassive)());
      },
      deregisterInteractionHandler: function deregisterInteractionHandler(type, handler) {
        return interactionNode.removeEventListener(type, handler, (0, _events.applyPassive)());
      },
      registerDocumentInteractionHandler: function registerDocumentInteractionHandler(evtType, handler) {
        return (// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          document.documentElement.addEventListener(evtType, handler, (0, _events.applyPassive)())
        );
      },
      deregisterDocumentInteractionHandler: function deregisterDocumentInteractionHandler(evtType, handler) {
        return (// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          document.documentElement.removeEventListener(evtType, handler, (0, _events.applyPassive)())
        );
      },
      registerResizeHandler: function registerResizeHandler(handler) {
        return window.addEventListener('resize', handler);
      },
      deregisterResizeHandler: function deregisterResizeHandler(handler) {
        return window.removeEventListener('resize', handler);
      },
      updateCssVariable: function updateCssVariable(varName, value) {
        return surfaceNode.style.setProperty(varName, value);
      },
      computeBoundingRect: function computeBoundingRect() {
        return surfaceNode.getBoundingClientRect();
      },
      getWindowPageOffset: function getWindowPageOffset() {
        return {
          x: window.pageXOffset,
          y: window.pageYOffset
        };
      }
    };
    var rippleFoundation = new _foundation.default(adapter);
    rippleFoundation.init();
    return rippleFoundation;
  };

  _exports.rippleNode = rippleNode;
  var rippleInteractionNodes = new WeakMap();
  /**
   * A directive that applies a Material ripple to a part node. The directive
   * should be applied to a PropertyPart.
   * @param options {RippleOptions}
   */

  var ripple = (0, _litHtml.directive)(function () {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    return function (part) {
      var surfaceNode = part.committer.element;
      var interactionNode = options.interactionNode || surfaceNode;
      var rippleFoundation = part.value; // if the interaction node changes, destroy and invalidate the foundation.

      var existingInteractionNode = rippleInteractionNodes.get(rippleFoundation);

      if (existingInteractionNode !== undefined && existingInteractionNode !== interactionNode) {
        rippleFoundation.destroy();
        rippleFoundation = _litHtml.noChange;
      } // make the ripple, if needed


      if (rippleFoundation === _litHtml.noChange) {
        rippleFoundation = rippleNode(Object.assign({}, options, {
          surfaceNode: surfaceNode
        }));
        rippleInteractionNodes.set(rippleFoundation, interactionNode);
        part.setValue(rippleFoundation); // otherwise update settings as needed.
      } else {
        if (options.unbounded !== undefined) {
          rippleFoundation.setUnbounded(options.unbounded);
        }

        if (options.disabled !== undefined) {
          rippleFoundation.setUnbounded(options.disabled);
        }
      }

      if (options.active === true) {
        rippleFoundation.activate();
      } else if (options.active === false) {
        rippleFoundation.deactivate();
      }
    };
  });
  _exports.ripple = ripple;
});