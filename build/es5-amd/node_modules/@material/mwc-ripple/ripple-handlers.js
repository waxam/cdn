define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.RippleHandlers = void 0;

  /**
   * Class that encapsulates the events handlers for `mwc-ripple`
   *
   *
   * Example:
   * ```
   * class XFoo extends LitElement {
   *   async getRipple() {
   *     this.renderRipple = true;
   *     await this.updateComplete;
   *     return this.renderRoot.querySelector('mwc-ripple');
   *   }
   *   rippleHandlers = new RippleHandlers(() => this.getRipple());
   *
   *   render() {
   *     return html`
   *       <div @mousedown=${this.rippleHandlers.activate}></div>
   *       ${this.renderRipple ? html`<mwc-ripple></mwc-ripple>` : ''}
   *     `;
   *   }
   * }
   * ```
   */
  var RippleHandlers = function RippleHandlers(
  /** Function that returns a `mwc-ripple` */
  rippleFn) {
    babelHelpers.classCallCheck(this, RippleHandlers);

    this.activate = function (ev) {
      rippleFn().then(function (r) {
        r && r.activate(ev);
      });
    };

    this.deactivate = function () {
      rippleFn().then(function (r) {
        r && r.deactivate();
      });
    };

    this.handleFocus = function () {
      rippleFn().then(function (r) {
        r && r.handleFocus();
      });
    };

    this.handleBlur = function () {
      rippleFn().then(function (r) {
        r && r.handleBlur();
      });
    };

    this.handleMouseEnter = function () {
      rippleFn().then(function (r) {
        r && r.handleMouseEnter();
      });
    };

    this.handleMouseLeave = function () {
      rippleFn().then(function (r) {
        r && r.handleMouseLeave();
      });
    };
  };

  _exports.RippleHandlers = RippleHandlers;
});