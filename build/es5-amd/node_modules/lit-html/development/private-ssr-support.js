define(["exports", "./lit-html.js"], function (_exports, _litHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._$LH = void 0;

  function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

  function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * END USERS SHOULD NOT RELY ON THIS OBJECT.
   *
   * We currently do not make a mangled rollup build of the lit-ssr code. In order
   * to keep a number of (otherwise private) top-level exports mangled in the
   * client side code, we export a _$LH object containing those members (or
   * helper methods for accessing private fields of those members), and then
   * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
   * client-side code is being used in `dev` mode or `prod` mode.
   * @private
   */
  var _$LH = {
    boundAttributeSuffix: _litHtml._$LH._boundAttributeSuffix,
    marker: _litHtml._$LH._marker,
    markerMatch: _litHtml._$LH._markerMatch,
    HTML_RESULT: _litHtml._$LH._HTML_RESULT,
    getTemplateHtml: _litHtml._$LH._getTemplateHtml,
    overrideDirectiveResolve: function overrideDirectiveResolve(directiveClass, resolveOverrideFn) {
      return /*#__PURE__*/function (_directiveClass) {
        babelHelpers.inherits(_class, _directiveClass);

        var _super = _createSuper(_class);

        function _class() {
          babelHelpers.classCallCheck(this, _class);
          return _super.apply(this, arguments);
        }

        babelHelpers.createClass(_class, [{
          key: "_$resolve",
          value: function _$resolve(_part, values) {
            return resolveOverrideFn(this, values);
          }
        }]);
        return _class;
      }(directiveClass);
    },
    setDirectiveClass: function setDirectiveClass(value, directiveClass) {
      // This property needs to remain unminified.
      value['_$litDirective$'] = directiveClass;
    },
    getAttributePartCommittedValue: function getAttributePartCommittedValue(part, value, index) {
      // Use the part setter to resolve directives/concatenate multiple parts
      // into a final value (captured by passing in a commitValue override)
      var committedValue = _litHtml.noChange; // Note that _commitValue need not be in `stableProperties` because this
      // method is only run on `AttributePart`s created by lit-ssr using the same
      // version of the library as this file

      part._commitValue = function (value) {
        return committedValue = value;
      };

      part._$setValue(value, part, index);

      return committedValue;
    },
    connectedDisconnectable: function connectedDisconnectable(props) {
      return _objectSpread(_objectSpread({}, props), {}, {
        _$isConnected: true
      });
    },
    resolveDirective: _litHtml._$LH._resolveDirective,
    AttributePart: _litHtml._$LH._AttributePart,
    PropertyPart: _litHtml._$LH._PropertyPart,
    BooleanAttributePart: _litHtml._$LH._BooleanAttributePart,
    EventPart: _litHtml._$LH._EventPart,
    ElementPart: _litHtml._$LH._ElementPart
  };
  _exports._$LH = _$LH;
});