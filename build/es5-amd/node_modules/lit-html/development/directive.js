define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.directive = _exports.PartType = _exports.Directive = void 0;

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  var PartType = {
    ATTRIBUTE: 1,
    CHILD: 2,
    PROPERTY: 3,
    BOOLEAN_ATTRIBUTE: 4,
    EVENT: 5,
    ELEMENT: 6
  };
  /**
   * Creates a user-facing directive function from a Directive class. This
   * function has the same parameters as the directive's render() method.
   */

  _exports.PartType = PartType;

  var directive = function directive(c) {
    return function () {
      var _ref;

      for (var _len = arguments.length, values = new Array(_len), _key = 0; _key < _len; _key++) {
        values[_key] = arguments[_key];
      }

      return _ref = {}, babelHelpers.defineProperty(_ref, '_$litDirective$', c), babelHelpers.defineProperty(_ref, "values", values), _ref;
    };
  };
  /**
   * Base class for creating custom directives. Users should extend this class,
   * implement `render` and/or `update`, and then pass their subclass to
   * `directive`.
   */


  _exports.directive = directive;

  var Directive = /*#__PURE__*/function () {
    function Directive(_partInfo) {
      babelHelpers.classCallCheck(this, Directive);
    } // See comment in Disconnectable interface for why this is a getter


    babelHelpers.createClass(Directive, [{
      key: "_$isConnected",
      get: function get() {
        return this._$parent._$isConnected;
      }
      /** @internal */

    }, {
      key: "_$initialize",
      value: function _$initialize(part, parent, attributeIndex) {
        this.__part = part;
        this._$parent = parent;
        this.__attributeIndex = attributeIndex;
      }
      /** @internal */

    }, {
      key: "_$resolve",
      value: function _$resolve(part, props) {
        return this.update(part, props);
      }
    }, {
      key: "update",
      value: function update(_part, props) {
        return this.render.apply(this, babelHelpers.toConsumableArray(props));
      }
    }]);
    return Directive;
  }();

  _exports.Directive = Directive;
});