define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports._Î£ = _exports.render = _exports.nothing = _exports.noChange = _exports.svg = _exports.html = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  var _a, _b, _c, _d, _e;

  var _f;

  var DEV_MODE = true;
  var ENABLE_EXTRA_SECURITY_HOOKS = true;
  var ENABLE_SHADYDOM_NOPATCH = true;

  if (DEV_MODE) {
    console.warn('lit-html is in dev mode. Not recommended for production!');
  }

  var wrap = ENABLE_SHADYDOM_NOPATCH && ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true ? window.ShadyDOM.wrap : function (node) {
    return node;
  };
  var trustedTypes = globalThis.trustedTypes;
  /**
   * Our TrustedTypePolicy for HTML which is declared using the html template
   * tag function.
   *
   * That HTML is a developer-authored constant, and is parsed with innerHTML
   * before any untrusted expressions have been mixed in. Therefor it is
   * considered safe by construction.
   */

  var policy = trustedTypes ? trustedTypes.createPolicy('lit-html', {
    createHTML: function createHTML(s) {
      return s;
    }
  }) : undefined;

  var identityFunction = function identityFunction(value) {
    return value;
  };

  var noopSanitizer = function noopSanitizer(_node, _name, _type) {
    return identityFunction;
  };
  /** Sets the global sanitizer factory. */


  var setSanitizer = function setSanitizer(newSanitizer) {
    if (!ENABLE_EXTRA_SECURITY_HOOKS) {
      return;
    }

    if (sanitizerFactoryInternal !== noopSanitizer) {
      throw new Error("Attempted to overwrite existing lit-html security policy." + " setSanitizeDOMValueFactory should be called at most once.");
    }

    sanitizerFactoryInternal = newSanitizer;
  };
  /**
   * Only used in internal tests, not a part of the public API.
   */


  var _testOnlyClearSanitizerFactoryDoNotCallOrElse = function _testOnlyClearSanitizerFactoryDoNotCallOrElse() {
    sanitizerFactoryInternal = noopSanitizer;
  };

  var createSanitizer = function createSanitizer(node, name, type) {
    return sanitizerFactoryInternal(node, name, type);
  }; // Added to an attribute name to mark the attribute as bound so we can find
  // it easily.


  var boundAttributeSuffix = '$lit$'; // This marker is used in many syntactic positions in HTML, so it must be
  // a valid element name and attribute name. We don't support dynamic names (yet)
  // but this at least ensures that the parse tree is closer to the template
  // intention.

  var marker = "lit$".concat(String(Math.random()).slice(9), "$"); // String used to tell if a comment is a marker comment

  var markerMatch = '?' + marker; // Text used to insert a comment marker node. We use processing instruction
  // syntax because it's slightly smaller, but parses as a comment node.

  var nodeMarker = "<".concat(markerMatch, ">");
  var d = document; // Creates a dynamic marker. We never have to search for these in the DOM.

  var createMarker = function createMarker() {
    var v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    return d.createComment(v);
  };

  var isPrimitive = function isPrimitive(value) {
    return value === null || babelHelpers.typeof(value) != 'object' && typeof value != 'function';
  };

  var isArray = Array.isArray;

  var isIterable = function isIterable(value) {
    var _a;

    return isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any
    typeof ((_a = value) === null || _a === void 0 ? void 0 : _a[Symbol.iterator]) === 'function';
  };

  var SPACE_CHAR = "[ \t\n\f\r]";
  var ATTR_VALUE_CHAR = "[^ \t\n\f\r\"'`<>=]";
  var NAME_CHAR = "[^\\s\"'>=/]"; // These regexes represent the five parsing states that we care about in the
  // Template's HTML scanner. They match the *end* of the state they're named
  // after.
  // Depending on the match, we transition to a new state. If there's no match,
  // we stay in the same state.
  // Note that the regexes are stateful. We utilize lastIndex and sync it
  // across the multiple regexes used. In addition to the five regexes below
  // we also dynamically create a regex to find the matching end tags for raw
  // text elements.

  /**
   * End of text is: `<` followed by:
   *   (comment start) or (tag) or (dynamic tag binding)
   */

  var textEndRegex = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g;
  var COMMENT_START = 1;
  var TAG_NAME = 2;
  var DYNAMIC_TAG_NAME = 3;
  var commentEndRegex = /-->/g;
  /**
   * Comments not started with <!--, like </{, can be ended by a single `>`
   */

  var comment2EndRegex = />/g;
  /**
   * The tagEnd regex matches the end of the "inside an opening" tag syntax
   * position. It either matches a `>`, an attribute-like sequence, or the end
   * of the string after a space (attribute-name position ending).
   *
   * See attributes in the HTML spec:
   * https://www.w3.org/TR/html5/syntax.html#elements-attributes
   *
   * " \t\n\f\r" are HTML space characters:
   * https://infra.spec.whatwg.org/#ascii-whitespace
   *
   * So an attribute is:
   *  * The name: any character except a whitespace character, ("), ('), ">",
   *    "=", or "/". Note: this is different from the HTML spec which also excludes control characters.
   *  * Followed by zero or more space characters
   *  * Followed by "="
   *  * Followed by zero or more space characters
   *  * Followed by:
   *    * Any character except space, ('), ("), "<", ">", "=", (`), or
   *    * (") then any non-("), or
   *    * (') then any non-(')
   */

  var tagEndRegex = new RegExp(">|".concat(SPACE_CHAR, "(?:(").concat(NAME_CHAR, "+)(").concat(SPACE_CHAR, "*=").concat(SPACE_CHAR, "*(?:").concat(ATTR_VALUE_CHAR, "|(\"|')|))|$)"), 'g');
  var ENTIRE_MATCH = 0;
  var ATTRIBUTE_NAME = 1;
  var SPACES_AND_EQUALS = 2;
  var QUOTE_CHAR = 3;
  var singleQuoteAttrEndRegex = /'/g;
  var doubleQuoteAttrEndRegex = /"/g;
  /**
   * Matches the raw text elements.
   *
   * Comments are not parsed within raw text elements, so we need to search their
   * text content for marker strings.
   */

  var rawTextElement = /^(?:script|style|textarea)$/i;
  /** TemplateResult types */

  var HTML_RESULT = 1;
  var SVG_RESULT = 2; // TemplatePart types
  // IMPORTANT: these must match the values in PartType

  var ATTRIBUTE_PART = 1;
  var CHILD_PART = 2;
  var PROPERTY_PART = 3;
  var BOOLEAN_ATTRIBUTE_PART = 4;
  var EVENT_PART = 5;
  var ELEMENT_PART = 6;
  var COMMENT_PART = 7;
  /**
   * Generates a template literal tag function that returns a TemplateResult with
   * the given result type.
   */

  var tag = function tag(_$litType$) {
    return function (strings) {
      for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
        values[_key - 1] = arguments[_key];
      }

      return {
        _$litType$: _$litType$,
        strings: strings,
        values: values
      };
    };
  };
  /**
   * Interprets a template literal as an HTML template that can efficiently
   * render to and update a container.
   */


  var html = tag(HTML_RESULT);
  /**
   * Interprets a template literal as an SVG template that can efficiently
   * render to and update a container.
   */

  _exports.html = html;
  var svg = tag(SVG_RESULT);
  /**
   * A sentinel value that signals that a value was handled by a directive and
   * should not be written to the DOM.
   */

  _exports.svg = svg;
  var noChange = Symbol.for('lit-noChange');
  /**
   * A sentinel value that signals a ChildPart to fully clear its content.
   */

  _exports.noChange = noChange;
  var nothing = Symbol.for('lit-nothing');
  /**
   * The cache of prepared templates, keyed by the tagged TemplateStringsArray
   * and _not_ accounting for the specific template tag used. This means that
   * template tags cannot be dynamic - the must statically be one of html, svg,
   * or attr. This restriction simplifies the cache lookup, which is on the hot
   * path for rendering.
   */

  _exports.nothing = nothing;
  var templateCache = new WeakMap();
  /**
   * Renders a value, usually a lit-html TemplateResult, to the container.
   * @param value
   * @param container
   * @param options
   */

  var render = function render(value, container, options) {
    var _a, _b;

    var partOwnerNode = (_a = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a !== void 0 ? _a : container; // eslint-disable-next-line @typescript-eslint/no-explicit-any

    var part = partOwnerNode._$litPart$;

    if (part === undefined) {
      var endNode = (_b = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b !== void 0 ? _b : null; // eslint-disable-next-line @typescript-eslint/no-explicit-any

      partOwnerNode._$litPart$ = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options);
    }

    part._$setValue(value);

    return part;
  };

  _exports.render = render;

  if (ENABLE_EXTRA_SECURITY_HOOKS) {
    render.setSanitizer = setSanitizer;
    render.createSanitizer = createSanitizer;

    if (DEV_MODE) {
      render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;
    }
  }

  var walker = d.createTreeWalker(d, 129
  /* NodeFilter.SHOW_{ELEMENT|COMMENT} */
  , null, false);
  var sanitizerFactoryInternal = noopSanitizer;
  /**
   * Returns an HTML string for the given TemplateStringsArray and result type
   * (HTML or SVG), along with the case-sensitive bound attribute names in
   * template order. The HTML contains comment comment markers denoting the
   * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.
   *
   * @param strings template strings array
   * @param type HTML or SVG
   * @return Array containing `[html, attrNames]` (array returned for terseness,
   *     to avoid object fields since this code is shared with non-minified SSR
   *     code)
   */

  var getTemplateHtml = function getTemplateHtml(strings, type) {
    // Insert makers into the template HTML to represent the position of
    // bindings. The following code scans the template strings to determine the
    // syntactic position of the bindings. They can be in text position, where
    // we insert an HTML comment, attribute value position, where we insert a
    // sentinel string and re-write the attribute name, or inside a tag where
    // we insert the sentinel string.
    var l = strings.length - 1; // Stores the case-sensitive bound attribute names in the order of their
    // parts. ElementParts are also reflected in this array as undefined
    // rather than a string, to disambiguate from attribute bindings.

    var attrNames = [];
    var html = type === SVG_RESULT ? '<svg>' : ''; // When we're inside a raw text tag (not it's text content), the regex
    // will still be tagRegex so we can find attributes, but will switch to
    // this regex when the tag ends.

    var rawTextEndRegex; // The current parsing state, represented as a reference to one of the
    // regexes

    var regex = textEndRegex;

    for (var i = 0; i < l; i++) {
      var s = strings[i]; // The index of the end of the last attribute name. When this is
      // positive at end of a string, it means we're in an attribute value
      // position and need to rewrite the attribute name.
      // We also use a special value of -2 to indicate that we encountered
      // the end of a string in attribute name position.

      var attrNameEndIndex = -1;
      var attrName = void 0;
      var lastIndex = 0;
      var match = void 0; // The conditions in this loop handle the current parse state, and the
      // assignments to the `regex` variable are the state transitions.

      while (lastIndex < s.length) {
        // Make sure we start searching from where we previously left off
        regex.lastIndex = lastIndex;
        match = regex.exec(s);

        if (match === null) {
          break;
        }

        lastIndex = regex.lastIndex;

        if (regex === textEndRegex) {
          if (match[COMMENT_START] === '!--') {
            regex = commentEndRegex;
          } else if (match[COMMENT_START] !== undefined) {
            // We started a weird comment, like </{
            regex = comment2EndRegex;
          } else if (match[TAG_NAME] !== undefined) {
            if (rawTextElement.test(match[TAG_NAME])) {
              // Record if we encounter a raw-text element. We'll switch to
              // this regex at the end of the tag.
              rawTextEndRegex = new RegExp("</".concat(match[TAG_NAME]), 'g');
            }

            regex = tagEndRegex;
          } else if (match[DYNAMIC_TAG_NAME] !== undefined) {
            // dynamic tag name
            regex = tagEndRegex;
          }
        } else if (regex === tagEndRegex) {
          if (match[ENTIRE_MATCH] === '>') {
            // End of a tag. If we had started a raw-text element, use that
            // regex
            regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex; // We may be ending an unquoted attribute value, so make sure we
            // clear any pending attrNameEndIndex

            attrNameEndIndex = -1;
          } else if (match[ATTRIBUTE_NAME] === undefined) {
            // Attribute name position
            attrNameEndIndex = -2;
          } else {
            attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;
            attrName = match[ATTRIBUTE_NAME];
            regex = match[QUOTE_CHAR] === undefined ? tagEndRegex : match[QUOTE_CHAR] === '"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;
          }
        } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {
          regex = tagEndRegex;
        } else if (regex === commentEndRegex || regex === comment2EndRegex) {
          regex = textEndRegex;
        } else {
          // Not one of the five state regexes, so it must be the dynamically
          // created raw text regex and we're at the close of that element.
          regex = tagEndRegex;
          rawTextEndRegex = undefined;
        }
      }

      if (DEV_MODE) {
        // If we have a attrNameEndIndex, which indicates that we should
        // rewrite the attribute name, assert that we're in a valid attribute
        // position - either in a tag, or a quoted attribute value.
        console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');
      } // We have four cases:
      //  1. We're in text position, and not in a raw text element
      //     (regex === textEndRegex): insert a comment marker.
      //  2. We have a non-negative attrNameEndIndex which means we need to
      //     rewrite the attribute name to add a bound attribute suffix.
      //  3. We're at the non-first binding in a multi-binding attribute, use a
      //     plain marker.
      //  4. We're somewhere else inside the tag. If we're in attribute name
      //     position (attrNameEndIndex === -2), add a sequential suffix to
      //     generate a unique attribute name.
      // Detect a binding next to self-closing tag end and insert a space to
      // separate the marker from the tag end:


      var end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';
      html += regex === textEndRegex ? s + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s.slice(0, attrNameEndIndex) + boundAttributeSuffix + s.slice(attrNameEndIndex)) + marker + end : s + marker + (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);
    }

    var htmlResult = html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : ''); // Returned as an array for terseness

    return [policy !== undefined ? policy.createHTML(htmlResult) : htmlResult, attrNames];
  };

  var Template = /*#__PURE__*/function () {
    function Template(_ref, options) {
      var strings = _ref.strings,
          type = _ref._$litType$;
      babelHelpers.classCallCheck(this, Template);

      /** @internal */
      this.parts = [];
      var node;
      var nodeIndex = 0;
      var attrNameIndex = 0;
      var partCount = strings.length - 1;
      var parts = this.parts; // Create template element

      var _getTemplateHtml = getTemplateHtml(strings, type),
          _getTemplateHtml2 = babelHelpers.slicedToArray(_getTemplateHtml, 2),
          html = _getTemplateHtml2[0],
          attrNames = _getTemplateHtml2[1];

      this.el = Template.createElement(html, options);
      walker.currentNode = this.el.content; // Reparent SVG nodes into template root

      if (type === SVG_RESULT) {
        var content = this.el.content;
        var svgElement = content.firstChild;
        svgElement.remove();
        content.append.apply(content, babelHelpers.toConsumableArray(svgElement.childNodes));
      } // Walk the template to find binding markers and create TemplateParts


      while ((node = walker.nextNode()) !== null && parts.length < partCount) {
        if (node.nodeType === 1) {
          // TODO (justinfagnani): for attempted dynamic tag names, we don't
          // increment the bindingIndex, and it'll be off by 1 in the element
          // and off by two after it.
          if (node.hasAttributes()) {
            // We defer removing bound attributes because on IE we might not be
            // iterating attributes in their template order, and would sometimes
            // remove an attribute that we still need to create a part for.
            var attrsToRemove = [];

            var _iterator = _createForOfIteratorHelper(node.getAttributeNames()),
                _step;

            try {
              for (_iterator.s(); !(_step = _iterator.n()).done;) {
                var _name2 = _step.value;

                // `name` is the name of the attribute we're iterating over, but not
                // _neccessarily_ the name of the attribute we will create a part
                // for. They can be different in browsers that don't iterate on
                // attributes in source order. In that case the attrNames array
                // contains the attribute name we'll process next. We only need the
                // attribute name here to know if we should process a bound attribute
                // on this element.
                if (_name2.endsWith(boundAttributeSuffix) || _name2.startsWith(marker)) {
                  var realName = attrNames[attrNameIndex++];
                  attrsToRemove.push(_name2);

                  if (realName !== undefined) {
                    // Lowercase for case-sensitive SVG attributes like viewBox
                    var value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);
                    var statics = value.split(marker);
                    var m = /([.?@])?(.*)/.exec(realName);
                    parts.push({
                      type: ATTRIBUTE_PART,
                      index: nodeIndex,
                      name: m[2],
                      strings: statics,
                      ctor: m[1] === '.' ? PropertyPart : m[1] === '?' ? BooleanAttributePart : m[1] === '@' ? EventPart : AttributePart
                    });
                  } else {
                    parts.push({
                      type: ELEMENT_PART,
                      index: nodeIndex
                    });
                  }
                }
              }
            } catch (err) {
              _iterator.e(err);
            } finally {
              _iterator.f();
            }

            for (var _i = 0, _attrsToRemove = attrsToRemove; _i < _attrsToRemove.length; _i++) {
              var name = _attrsToRemove[_i];
              node.removeAttribute(name);
            }
          } // TODO (justinfagnani): benchmark the regex against testing for each
          // of the 3 raw text element names.


          if (rawTextElement.test(node.tagName)) {
            // For raw text elements we need to split the text content on
            // markers, create a Text node for each segment, and create
            // a TemplatePart for each marker.
            var _strings = node.textContent.split(marker);

            var lastIndex = _strings.length - 1;

            if (lastIndex > 0) {
              node.textContent = trustedTypes ? trustedTypes.emptyScript : ''; // Generate a new text node for each literal section
              // These nodes are also used as the markers for node parts
              // We can't use empty text nodes as markers because they're
              // normalized in some browsers (TODO: check)

              for (var i = 0; i < lastIndex; i++) {
                node.append(_strings[i], createMarker()); // Walk past the marker node we just added

                walker.nextNode();
                parts.push({
                  type: CHILD_PART,
                  index: ++nodeIndex
                });
              } // Note because this marker is added after the walker's current
              // node, it will be walked to in the outer loop (and ignored), so
              // we don't need to adjust nodeIndex here


              node.append(_strings[lastIndex], createMarker());
            }
          }
        } else if (node.nodeType === 8) {
          var data = node.data;

          if (data === markerMatch) {
            parts.push({
              type: CHILD_PART,
              index: nodeIndex
            });
          } else {
            var _i2 = -1;

            while ((_i2 = node.data.indexOf(marker, _i2 + 1)) !== -1) {
              // Comment node has a binding marker inside, make an inactive part
              // The binding won't work, but subsequent bindings will
              // TODO (justinfagnani): consider whether it's even worth it to
              // make bindings in comments work
              parts.push({
                type: COMMENT_PART,
                index: nodeIndex
              }); // Move to the end of the match

              _i2 += marker.length - 1;
            }
          }
        }

        nodeIndex++;
      }
    } // Overridden via `litHtmlPlatformSupport` to provide platform support.


    babelHelpers.createClass(Template, null, [{
      key: "createElement",
      value: function createElement(html, _options) {
        var el = d.createElement('template');
        el.innerHTML = html;
        return el;
      }
    }]);
    return Template;
  }();

  function resolveDirective(part, value) {
    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : part;
    var attributeIndex = arguments.length > 3 ? arguments[3] : undefined;

    var _a, _b, _c;

    var _d; // Bail early if the value is explicitly noChange. Note, this means any
    // nested directive is still attached and is not run.


    if (value === noChange) {
      return value;
    }

    var currentDirective = attributeIndex !== undefined ? (_a = parent.__directives) === null || _a === void 0 ? void 0 : _a[attributeIndex] : parent.__directive;
    var nextDirectiveConstructor = isPrimitive(value) ? undefined : value._$litDirective$;

    if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {
      (_b = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective._$setDirectiveConnected) === null || _b === void 0 ? void 0 : _b.call(currentDirective, false);

      if (nextDirectiveConstructor === undefined) {
        currentDirective = undefined;
      } else {
        currentDirective = new nextDirectiveConstructor(part);

        currentDirective._$initialize(part, parent, attributeIndex);
      }

      if (attributeIndex !== undefined) {
        ((_c = (_d = parent).__directives) !== null && _c !== void 0 ? _c : _d.__directives = [])[attributeIndex] = currentDirective;
      } else {
        parent.__directive = currentDirective;
      }
    }

    if (currentDirective !== undefined) {
      value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);
    }

    return value;
  }
  /**
   * An updateable instance of a Template. Holds references to the Parts used to
   * update the template instance.
   */


  var TemplateInstance = /*#__PURE__*/function () {
    function TemplateInstance(template, parent) {
      babelHelpers.classCallCheck(this, TemplateInstance);

      /** @internal */
      this._parts = [];
      /** @internal */

      this._$disconnectableChildren = undefined;
      this._$template = template;
      this._$parent = parent;
    } // This method is separate from the constructor because we need to return a
    // DocumentFragment and we don't want to hold onto it with an instance field.


    babelHelpers.createClass(TemplateInstance, [{
      key: "_clone",
      value: function _clone(options) {
        var _a;

        var _this$_$template = this._$template,
            content = _this$_$template.el.content,
            parts = _this$_$template.parts;
        var fragment = ((_a = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a !== void 0 ? _a : d).importNode(content, true);
        walker.currentNode = fragment;
        var node = walker.nextNode();
        var nodeIndex = 0;
        var partIndex = 0;
        var templatePart = parts[0];

        while (templatePart !== undefined) {
          if (nodeIndex === templatePart.index) {
            var part = void 0;

            if (templatePart.type === CHILD_PART) {
              part = new ChildPart(node, node.nextSibling, this, options);
            } else if (templatePart.type === ATTRIBUTE_PART) {
              part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);
            } else if (templatePart.type === ELEMENT_PART) {
              part = new ElementPart(node, this, options);
            }

            this._parts.push(part);

            templatePart = parts[++partIndex];
          }

          if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {
            node = walker.nextNode();
            nodeIndex++;
          }
        }

        return fragment;
      }
    }, {
      key: "_update",
      value: function _update(values) {
        var i = 0;

        var _iterator2 = _createForOfIteratorHelper(this._parts),
            _step2;

        try {
          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
            var part = _step2.value;

            if (part !== undefined) {
              if (part.strings !== undefined) {
                part._$setValue(values, part, i); // The number of values the part consumes is part.strings.length - 1
                // since values are in between template spans. We increment i by 1
                // later in the loop, so increment it by part.strings.length - 2 here


                i += part.strings.length - 2;
              } else {
                part._$setValue(values[i]);
              }
            }

            i++;
          }
        } catch (err) {
          _iterator2.e(err);
        } finally {
          _iterator2.f();
        }
      }
    }]);
    return TemplateInstance;
  }();

  var ChildPart = /*#__PURE__*/function () {
    function ChildPart(startNode, endNode, parent, options) {
      babelHelpers.classCallCheck(this, ChildPart);
      this.type = CHILD_PART; // The following fields will be patched onto ChildParts when required by
      // AsyncDirective

      /** @internal */

      this._$disconnectableChildren = undefined;
      this._$startNode = startNode;
      this._$endNode = endNode;
      this._$parent = parent;
      this.options = options;

      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        // Explicitly initialize for consistent class shape.
        this._textSanitizer = undefined;
      }
    }
    /**
     * Sets the connection state for any `AsyncDirectives` contained
     * within this part and runs their `disconnected` or `reconnected`, according
     * to the `isConnected` argument.
     */


    babelHelpers.createClass(ChildPart, [{
      key: "setConnected",
      value: function setConnected(isConnected) {
        var _a;

        (_a = this._$setChildPartConnected) === null || _a === void 0 ? void 0 : _a.call(this, isConnected);
      }
      /**
       * The parent node into which the part renders its content.
       *
       * A ChildPart's content consists of a range of adjacent child nodes of
       * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and
       * `.endNode`).
       *
       * - If both `.startNode` and `.endNode` are non-null, then the part's content
       * consists of all siblings between `.startNode` and `.endNode`, exclusively.
       *
       * - If `.startNode` is non-null but `.endNode` is null, then the part's
       * content consists of all siblings following `.startNode`, up to and
       * including the last child of `.parentNode`. If `.endNode` is non-null, then
       * `.startNode` will always be non-null.
       *
       * - If both `.endNode` and `.startNode` are null, then the part's content
       * consists of all child nodes of `.parentNode`.
       */

    }, {
      key: "parentNode",
      get: function get() {
        return wrap(this._$startNode).parentNode;
      }
      /**
       * The part's leading marker node, if any. See `.parentNode` for more
       * information.
       */

    }, {
      key: "startNode",
      get: function get() {
        return this._$startNode;
      }
      /**
       * The part's trailing marker node, if any. See `.parentNode` for more
       * information.
       */

    }, {
      key: "endNode",
      get: function get() {
        return this._$endNode;
      }
    }, {
      key: "_$setValue",
      value: function _$setValue(value) {
        var directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        value = resolveDirective(this, value, directiveParent);

        if (isPrimitive(value)) {
          // Non-rendering child values. It's important that these do not render
          // empty text nodes to avoid issues with preventing default <slot>
          // fallback content.
          if (value === nothing || value == null || value === '') {
            if (this._$committedValue !== nothing) {
              this._$clear();
            }

            this._$committedValue = nothing;
          } else if (value !== this._$committedValue && value !== noChange) {
            this._commitText(value);
          }
        } else if (value._$litType$ !== undefined) {
          this._commitTemplateResult(value);
        } else if (value.nodeType !== undefined) {
          this._commitNode(value);
        } else if (isIterable(value)) {
          this._commitIterable(value);
        } else {
          // Fallback, will render the string representation
          this._commitText(value);
        }
      }
    }, {
      key: "_insert",
      value: function _insert(node) {
        var ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._$endNode;
        return wrap(wrap(this._$startNode).parentNode).insertBefore(node, ref);
      }
    }, {
      key: "_commitNode",
      value: function _commitNode(value) {
        var _a;

        if (this._$committedValue !== value) {
          this._$clear();

          if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {
            var parentNodeName = (_a = this._$startNode.parentNode) === null || _a === void 0 ? void 0 : _a.nodeName;

            if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {
              this._insert(new Text('/* lit-html will not write ' + 'TemplateResults to scripts and styles */'));

              return;
            }
          }

          this._$committedValue = this._insert(value);
        }
      }
    }, {
      key: "_commitText",
      value: function _commitText(value) {
        var node = wrap(this._$startNode).nextSibling; // TODO(justinfagnani): Can we just check if this._$committedValue is primitive?

        if (node !== null && node.nodeType === 3
        /* Node.TEXT_NODE */
        && (this._$endNode === null ? wrap(node).nextSibling === null : node === wrap(this._$endNode).previousSibling)) {
          if (ENABLE_EXTRA_SECURITY_HOOKS) {
            if (this._textSanitizer === undefined) {
              this._textSanitizer = createSanitizer(node, 'data', 'property');
            }

            value = this._textSanitizer(value);
          } // If we only have a single text node between the markers, we can just
          // set its value, rather than replacing it.


          node.data = value;
        } else {
          if (ENABLE_EXTRA_SECURITY_HOOKS) {
            var textNode = document.createTextNode('');

            this._commitNode(textNode); // When setting text content, for security purposes it matters a lot
            // what the parent is. For example, <style> and <script> need to be
            // handled with care, while <span> does not. So first we need to put a
            // text node into the document, then we can sanitize its contentx.


            if (this._textSanitizer === undefined) {
              this._textSanitizer = createSanitizer(textNode, 'data', 'property');
            }

            value = this._textSanitizer(value);
            textNode.data = value;
          } else {
            this._commitNode(d.createTextNode(value));
          }
        }

        this._$committedValue = value;
      }
    }, {
      key: "_commitTemplateResult",
      value: function _commitTemplateResult(result) {
        var _a;

        var values = result.values,
            _$litType$ = result._$litType$; // If $litType$ is a number, result is a plain TemplateResult and we get
        // the template from the template cache. If not, result is a
        // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need
        // to create the <template> element the first time we see it.

        var template = typeof _$litType$ === 'number' ? this._$getTemplate(result) : (_$litType$.el === undefined && (_$litType$.el = Template.createElement(_$litType$.h, this.options)), _$litType$);

        if (((_a = this._$committedValue) === null || _a === void 0 ? void 0 : _a._$template) === template) {
          this._$committedValue._update(values);
        } else {
          var instance = new TemplateInstance(template, this);

          var fragment = instance._clone(this.options);

          instance._update(values);

          this._commitNode(fragment);

          this._$committedValue = instance;
        }
      } // Overridden via `litHtmlPlatformSupport` to provide platform support.

      /** @internal */

    }, {
      key: "_$getTemplate",
      value: function _$getTemplate(result) {
        var template = templateCache.get(result.strings);

        if (template === undefined) {
          templateCache.set(result.strings, template = new Template(result));
        }

        return template;
      }
    }, {
      key: "_commitIterable",
      value: function _commitIterable(value) {
        // For an Iterable, we create a new InstancePart per item, then set its
        // value to the item. This is a little bit of overhead for every item in
        // an Iterable, but it lets us recurse easily and efficiently update Arrays
        // of TemplateResults that will be commonly returned from expressions like:
        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
        // If value is an array, then the previous render was of an
        // iterable and value will contain the ChildParts from the previous
        // render. If value is not an array, clear this part and make a new
        // array for ChildParts.
        if (!isArray(this._$committedValue)) {
          this._$committedValue = [];

          this._$clear();
        } // Lets us keep track of how many items we stamped so we can clear leftover
        // items from a previous render


        var itemParts = this._$committedValue;
        var partIndex = 0;
        var itemPart;

        var _iterator3 = _createForOfIteratorHelper(value),
            _step3;

        try {
          for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {
            var item = _step3.value;

            if (partIndex === itemParts.length) {
              // If no existing part, create a new one
              // TODO (justinfagnani): test perf impact of always creating two parts
              // instead of sharing parts between nodes
              // https://github.com/lit/lit/issues/1266
              itemParts.push(itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));
            } else {
              // Reuse an existing part
              itemPart = itemParts[partIndex];
            }

            itemPart._$setValue(item);

            partIndex++;
          }
        } catch (err) {
          _iterator3.e(err);
        } finally {
          _iterator3.f();
        }

        if (partIndex < itemParts.length) {
          // itemParts always have end nodes
          this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex); // Truncate the parts array so _value reflects the current state


          itemParts.length = partIndex;
        }
      }
      /**
       * Removes the nodes contained within this Part from the DOM.
       *
       * @param start Start node to clear from, for clearing a subset of the part's
       *     DOM (used when truncating iterables)
       * @param from  When `start` is specified, the index within the iterable from
       *     which ChildParts are being removed, used for disconnecting directives in
       *     those Parts.
       *
       * @internal
       */

    }, {
      key: "_$clear",
      value: function _$clear() {
        var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : wrap(this._$startNode).nextSibling;
        var from = arguments.length > 1 ? arguments[1] : undefined;

        var _a;

        (_a = this._$setChildPartConnected) === null || _a === void 0 ? void 0 : _a.call(this, false, true, from);

        while (start && start !== this._$endNode) {
          var n = wrap(start).nextSibling;
          wrap(start).remove();
          start = n;
        }
      }
    }]);
    return ChildPart;
  }();

  var AttributePart = /*#__PURE__*/function () {
    function AttributePart(element, name, strings, parent, options) {
      babelHelpers.classCallCheck(this, AttributePart);
      this.type = ATTRIBUTE_PART;
      /** @internal */

      this._$committedValue = nothing;
      /** @internal */

      this._$disconnectableChildren = undefined;
      /** @internal */

      this._setDirectiveConnected = undefined;
      this.element = element;
      this.name = name;
      this._$parent = parent;
      this.options = options;

      if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {
        this._$committedValue = new Array(strings.length - 1).fill(nothing);
        this.strings = strings;
      } else {
        this._$committedValue = nothing;
      }

      if (ENABLE_EXTRA_SECURITY_HOOKS) {
        this._sanitizer = undefined;
      }
    }

    babelHelpers.createClass(AttributePart, [{
      key: "tagName",
      get: function get() {
        return this.element.tagName;
      }
      /**
       * Sets the value of this part by resolving the value from possibly multiple
       * values and static strings and committing it to the DOM.
       * If this part is single-valued, `this._strings` will be undefined, and the
       * method will be called with a single value argument. If this part is
       * multi-value, `this._strings` will be defined, and the method is called
       * with the value array of the part's owning TemplateInstance, and an offset
       * into the value array from which the values should be read.
       * This method is overloaded this way to eliminate short-lived array slices
       * of the template instance values, and allow a fast-path for single-valued
       * parts.
       *
       * @param value The part value, or an array of values for multi-valued parts
       * @param valueIndex the index to start reading values from. `undefined` for
       *   single-valued parts
       * @param noCommit causes the part to not commit its value to the DOM. Used
       *   in hydration to prime attribute parts with their first-rendered value,
       *   but not set the attribute, and in SSR to no-op the DOM operation and
       *   capture the value for serialization.
       *
       * @internal
       */

    }, {
      key: "_$setValue",
      value: function _$setValue(value) {
        var directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;
        var valueIndex = arguments.length > 2 ? arguments[2] : undefined;
        var noCommit = arguments.length > 3 ? arguments[3] : undefined;
        var strings = this.strings; // Whether any of the values has changed, for dirty-checking

        var change = false;

        if (strings === undefined) {
          // Single-value binding case
          value = resolveDirective(this, value, directiveParent, 0);
          change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;

          if (change) {
            this._$committedValue = value;
          }
        } else {
          // Interpolation case
          var values = value;
          value = strings[0];
          var i, v;

          for (i = 0; i < strings.length - 1; i++) {
            v = resolveDirective(this, values[valueIndex + i], directiveParent, i);

            if (v === noChange) {
              // If the user-provided value is `noChange`, use the previous value
              v = this._$committedValue[i];
            }

            change || (change = !isPrimitive(v) || v !== this._$committedValue[i]);

            if (v === nothing) {
              value = nothing;
            } else if (value !== nothing) {
              value += (v !== null && v !== void 0 ? v : '') + strings[i + 1];
            } // We always record each value, even if one is `nothing`, for future
            // change detection.


            this._$committedValue[i] = v;
          }
        }

        if (change && !noCommit) {
          this._commitValue(value);
        }
      }
      /** @internal */

    }, {
      key: "_commitValue",
      value: function _commitValue(value) {
        if (value === nothing) {
          wrap(this.element).removeAttribute(this.name);
        } else {
          if (ENABLE_EXTRA_SECURITY_HOOKS) {
            if (this._sanitizer === undefined) {
              this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');
            }

            value = this._sanitizer(value !== null && value !== void 0 ? value : '');
          }

          wrap(this.element).setAttribute(this.name, value !== null && value !== void 0 ? value : '');
        }
      }
    }]);
    return AttributePart;
  }();

  var PropertyPart = /*#__PURE__*/function (_AttributePart) {
    babelHelpers.inherits(PropertyPart, _AttributePart);

    var _super = _createSuper(PropertyPart);

    function PropertyPart() {
      var _this;

      babelHelpers.classCallCheck(this, PropertyPart);
      _this = _super.apply(this, arguments);
      _this.type = PROPERTY_PART;
      return _this;
    }
    /** @internal */


    babelHelpers.createClass(PropertyPart, [{
      key: "_commitValue",
      value: function _commitValue(value) {
        if (ENABLE_EXTRA_SECURITY_HOOKS) {
          if (this._sanitizer === undefined) {
            this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');
          }

          value = this._sanitizer(value);
        } // eslint-disable-next-line @typescript-eslint/no-explicit-any


        this.element[this.name] = value === nothing ? undefined : value;
      }
    }]);
    return PropertyPart;
  }(AttributePart);

  var BooleanAttributePart = /*#__PURE__*/function (_AttributePart2) {
    babelHelpers.inherits(BooleanAttributePart, _AttributePart2);

    var _super2 = _createSuper(BooleanAttributePart);

    function BooleanAttributePart() {
      var _this2;

      babelHelpers.classCallCheck(this, BooleanAttributePart);
      _this2 = _super2.apply(this, arguments);
      _this2.type = BOOLEAN_ATTRIBUTE_PART;
      return _this2;
    }
    /** @internal */


    babelHelpers.createClass(BooleanAttributePart, [{
      key: "_commitValue",
      value: function _commitValue(value) {
        if (value && value !== nothing) {
          wrap(this.element).setAttribute(this.name, '');
        } else {
          wrap(this.element).removeAttribute(this.name);
        }
      }
    }]);
    return BooleanAttributePart;
  }(AttributePart);

  var EventPart = /*#__PURE__*/function (_AttributePart3) {
    babelHelpers.inherits(EventPart, _AttributePart3);

    var _super3 = _createSuper(EventPart);

    function EventPart() {
      var _this3;

      babelHelpers.classCallCheck(this, EventPart);
      _this3 = _super3.apply(this, arguments);
      _this3.type = EVENT_PART;
      return _this3;
    } // EventPart does not use the base _$setValue/_resolveValue implementation
    // since the dirty checking is more complex

    /** @internal */


    babelHelpers.createClass(EventPart, [{
      key: "_$setValue",
      value: function _$setValue(newListener) {
        var directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;

        var _a;

        newListener = (_a = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a !== void 0 ? _a : nothing;

        if (newListener === noChange) {
          return;
        }

        var oldListener = this._$committedValue; // If the new value is nothing or any options change we have to remove the
        // part as a listener.

        var shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive; // If the new value is not nothing and we removed the listener, we have
        // to add the part as a listener.

        var shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);

        if (shouldRemoveListener) {
          this.element.removeEventListener(this.name, this, oldListener);
        }

        if (shouldAddListener) {
          // Beware: IE11 and Chrome 41 don't like using the listener as the
          // options object. Figure out how to deal w/ this in IE11 - maybe
          // patch addEventListener?
          this.element.addEventListener(this.name, this, newListener);
        }

        this._$committedValue = newListener;
      }
    }, {
      key: "handleEvent",
      value: function handleEvent(event) {
        var _a, _b;

        if (typeof this._$committedValue === 'function') {
          // TODO (justinfagnani): do we need to default to this.element?
          // It'll always be the same as `e.currentTarget`.
          this._$committedValue.call((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : this.element, event);
        } else {
          this._$committedValue.handleEvent(event);
        }
      }
    }]);
    return EventPart;
  }(AttributePart);

  var ElementPart = /*#__PURE__*/function () {
    function ElementPart(element, parent, options) {
      babelHelpers.classCallCheck(this, ElementPart);
      this.element = element;
      this.type = ELEMENT_PART;
      /** @internal */

      this._$disconnectableChildren = undefined;
      /** @internal */

      this._setDirectiveConnected = undefined;
      this._$parent = parent;
      this.options = options;
    }

    babelHelpers.createClass(ElementPart, [{
      key: "_$setValue",
      value: function _$setValue(value) {
        resolveDirective(this, value);
      }
    }]);
    return ElementPart;
  }();
  /**
   * END USERS SHOULD NOT RELY ON THIS OBJECT.
   *
   * Private exports for use by other Lit packages, not intended for use by
   * external users.
   *
   * We currently do not make a mangled rollup build of the lit-ssr code. In order
   * to keep a number of (otherwise private) top-level exports  mangled in the
   * client side code, we export a _Î£ object containing those members (or
   * helper methods for accessing private fields of those members), and then
   * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the
   * client-side code is being used in `dev` mode or `prod` mode.
   *
   * This has a unique name, to disambiguate it from private exports in
   * lit-element, which re-exports all of lit-html.
   *
   * @private
   */


  var _Î£ = {
    // Used in lit-ssr
    _boundAttributeSuffix: boundAttributeSuffix,
    _marker: marker,
    _markerMatch: markerMatch,
    _HTML_RESULT: HTML_RESULT,
    _getTemplateHtml: getTemplateHtml,
    // Used in hydrate
    _TemplateInstance: TemplateInstance,
    _isIterable: isIterable,
    _resolveDirective: resolveDirective,
    // Used in tests and private-ssr-support
    _ChildPart: ChildPart,
    _AttributePart: AttributePart,
    _BooleanAttributePart: BooleanAttributePart,
    _EventPart: EventPart,
    _PropertyPart: PropertyPart,
    _ElementPart: ElementPart
  }; // Apply polyfills if available
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  _exports._Î£ = _Î£;
  (_d = (_c = globalThis)['litHtmlPlatformSupport']) === null || _d === void 0 ? void 0 : _d.call(_c, Template, ChildPart); // IMPORTANT: do not change the property name or the assignment expression.
  // This line will be used in regexes to search for lit-html usage.
  // TODO(justinfagnani): inject version number at build time
  // eslint-disable-next-line @typescript-eslint/no-explicit-any

  ((_e = (_f = globalThis)['litHtmlVersions']) !== null && _e !== void 0 ? _e : _f['litHtmlVersions'] = []).push('2.0.0-rc.3');
});