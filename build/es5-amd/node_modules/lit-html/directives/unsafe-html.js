define(["exports", "../lit-html.js", "../directive.js"], function (_exports, _litHtml, _directive) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.unsafeHTML = _exports.UnsafeHTMLDirective = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @license
   * Copyright 2017 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  var n = /*#__PURE__*/function (_r) {
    babelHelpers.inherits(n, _r);

    var _super = _createSuper(n);

    function n(i) {
      var _this;

      babelHelpers.classCallCheck(this, n);
      if (_this = _super.call(this, i), _this.vt = _litHtml.nothing, i.type !== _directive.PartType.CHILD) throw Error(_this.constructor.directiveName + "() can only be used in child bindings");
      return babelHelpers.possibleConstructorReturn(_this);
    }

    babelHelpers.createClass(n, [{
      key: "render",
      value: function render(r) {
        if (r === _litHtml.nothing) return this.Vt = void 0, this.vt = r;
        if (r === _litHtml.noChange) return r;
        if ("string" != typeof r) throw Error(this.constructor.directiveName + "() called with a non-string value");
        if (r === this.vt) return this.Vt;
        this.vt = r;
        var s = [r];
        return s.raw = s, this.Vt = {
          _$litType$: this.constructor.resultType,
          strings: s,
          values: []
        };
      }
    }]);
    return n;
  }(_directive.Directive);

  _exports.UnsafeHTMLDirective = n;
  n.directiveName = "unsafeHTML", n.resultType = 1;
  var o = (0, _directive.directive)(n);
  _exports.unsafeHTML = o;
});