define(["exports", "../lit-html.js", "../directive.js", "../directive-helpers.js"], function (_exports, _litHtml, _directive, _directiveHelpers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.live = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @license
   * Copyright 2020 Google LLC
   * SPDX-License-Identifier: BSD-3-Clause
   */
  var l = (0, _directive.directive)( /*#__PURE__*/function (_t) {
    babelHelpers.inherits(_class, _t);

    var _super = _createSuper(_class);

    function _class(r) {
      var _this;

      babelHelpers.classCallCheck(this, _class);
      if (_this = _super.call(this, r), r.type !== _directive.PartType.PROPERTY && r.type !== _directive.PartType.ATTRIBUTE && r.type !== _directive.PartType.BOOLEAN_ATTRIBUTE) throw Error("The `live` directive is not allowed on child or event bindings");
      if (!(0, _directiveHelpers.isSingleExpression)(r)) throw Error("`live` bindings can only contain a single expression");
      return babelHelpers.possibleConstructorReturn(_this);
    }

    babelHelpers.createClass(_class, [{
      key: "render",
      value: function render(r) {
        return r;
      }
    }, {
      key: "update",
      value: function update(i, _ref) {
        var _ref2 = babelHelpers.slicedToArray(_ref, 1),
            t = _ref2[0];

        if (t === _litHtml.noChange || t === _litHtml.nothing) return t;
        var o = i.element,
            l = i.name;

        if (i.type === _directive.PartType.PROPERTY) {
          if (t === o[l]) return _litHtml.noChange;
        } else if (i.type === _directive.PartType.BOOLEAN_ATTRIBUTE) {
          if (!!t === o.hasAttribute(l)) return _litHtml.noChange;
        } else if (i.type === _directive.PartType.ATTRIBUTE && o.getAttribute(l) === t + "") return _litHtml.noChange;

        return (0, _directiveHelpers.setCommittedValue)(i), t;
      }
    }]);
    return _class;
  }(_directive.Directive));
  _exports.live = l;
});