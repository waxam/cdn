define(["exports", "../polymer/polymer-legacy.js"], function (_exports, _polymerLegacy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IronSelection = void 0;

  /**
  @license
  Copyright (c) 2015 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at
  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
  part of the polymer project is also subject to an additional IP rights grant
  found at http://polymer.github.io/PATENTS.txt
  */
  var IronSelection = /*#__PURE__*/function () {
    /**
     * @param {!Function} selectCallback
     * @suppress {missingProvide}
     */
    function IronSelection(selectCallback) {
      babelHelpers.classCallCheck(this, IronSelection);
      this.selection = [];
      this.selectCallback = selectCallback;
    }
    /**
     * Retrieves the selected item(s).
     *
     * @returns Returns the selected item(s). If the multi property is true,
     * `get` will return an array, otherwise it will return
     * the selected item or undefined if there is no selection.
     */


    babelHelpers.createClass(IronSelection, [{
      key: "get",
      value: function get() {
        return this.multi ? this.selection.slice() : this.selection[0];
      }
      /**
       * Clears all the selection except the ones indicated.
       *
       * @param {Array} excludes items to be excluded.
       */

    }, {
      key: "clear",
      value: function clear(excludes) {
        this.selection.slice().forEach(function (item) {
          if (!excludes || excludes.indexOf(item) < 0) {
            this.setItemSelected(item, false);
          }
        }, this);
      }
      /**
       * Indicates if a given item is selected.
       *
       * @param {*} item The item whose selection state should be checked.
       * @return {boolean} Returns true if `item` is selected.
       */

    }, {
      key: "isSelected",
      value: function isSelected(item) {
        return this.selection.indexOf(item) >= 0;
      }
      /**
       * Sets the selection state for a given item to either selected or deselected.
       *
       * @param {*} item The item to select.
       * @param {boolean} isSelected True for selected, false for deselected.
       */

    }, {
      key: "setItemSelected",
      value: function setItemSelected(item, isSelected) {
        if (item != null) {
          if (isSelected !== this.isSelected(item)) {
            // proceed to update selection only if requested state differs from
            // current
            if (isSelected) {
              this.selection.push(item);
            } else {
              var i = this.selection.indexOf(item);

              if (i >= 0) {
                this.selection.splice(i, 1);
              }
            }

            if (this.selectCallback) {
              this.selectCallback(item, isSelected);
            }
          }
        }
      }
      /**
       * Sets the selection state for a given item. If the `multi` property
       * is true, then the selected state of `item` will be toggled; otherwise
       * the `item` will be selected.
       *
       * @param {*} item The item to select.
       */

    }, {
      key: "select",
      value: function select(item) {
        if (this.multi) {
          this.toggle(item);
        } else if (this.get() !== item) {
          this.setItemSelected(this.get(), false);
          this.setItemSelected(item, true);
        }
      }
      /**
       * Toggles the selection state for `item`.
       *
       * @param {*} item The item to toggle.
       */

    }, {
      key: "toggle",
      value: function toggle(item) {
        this.setItemSelected(item, !this.isSelected(item));
      }
    }]);
    return IronSelection;
  }();

  _exports.IronSelection = IronSelection;
  ;
});