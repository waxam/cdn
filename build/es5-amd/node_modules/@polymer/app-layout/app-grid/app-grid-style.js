define(["../../polymer/polymer-legacy.js"], function (_polymerLegacy) {
  "use strict";

  /**
  @license
  Copyright (c) 2016 The Polymer Project Authors. All rights reserved.
  This code may only be used under the BSD style license found at
  http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
  http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
  found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
  part of the polymer project is also subject to an additional IP rights grant
  found at http://polymer.github.io/PATENTS.txt
  */

  /**
  app-grid is a helper class useful for creating responsive, fluid grid layouts
  using custom properties. Because custom properties can be defined inside a
  `@media` rule, you can customize the grid layout for different responsive
  breakpoints.
  
  Example:
  
  Import `app-grid-style.html` and include `app-grid-style` in the style of an
  element's definition. Then, add the class `app-grid` to a container such as `ul`
  or `div`:
  
  ```html
  <template>
    <style include="app-grid-style">
      :host {
        --app-grid-columns: 3;
        --app-grid-item-height: 100px;
      }
  
      ul {
        padding: 0;
        list-style: none;
      }
  
      .item {
        background-color: white;
      }
    </style>
    <ul class="app-grid">
      <li class="item">1</li>
      <li class="item">2</li>
      <li class="item">3</li>
    </ul>
  </template>
  ```
  In the example above, the grid  will take 3 columns per row.
  
  ### Expandible items
  
  In many cases, it's useful to expand an item more than 1 column. To achieve this
  type of layout, you can specify the number of columns the item should expand to
  by setting the custom property
  `--app-grid-expandible-item-columns`. To indicate which item should expand,
  apply the mixin
  `--app-grid-expandible-item` to a rule with a selector to the item. For example:
  
  <pre><code>
  &lt;template>
    &lt;style include="app-grid-style">
      :host {
        --app-grid-columns: 3;
        --app-grid-item-height: 100px;
        --app-grid-expandible-item-columns: 3;
      }
  
      /* Only the first item should expand *\/
      .item:first-child {
        &#64;apply --app-grid-expandible-item;
      }
    &lt;/style>
  &lt;/template>
  </code></pre>
  
  ### Preserving the aspect ratio
  
  When the size of a grid item should preserve the aspect ratio, you can add the
  `has-aspect-ratio` attribute to the element with the class `.app-grid`. Now,
  every item element becomes a wrapper around the item content. For example:
  
  ```html
  <template>
    <style include="app-grid-style">
      :host {
        --app-grid-columns: 3;
        /* 50% the width of the item is equivalent to 2:1 aspect ratio*\/
        --app-grid-item-height: 50%;
      }
  
      .item {
        background-color: white;
      }
    </style>
    <ul class="app-grid" has-aspect-ratio>
      <li class="item">
        <div>item 1</div>
      </li>
      <li class="item">
        <div>item 2</div>
      </li>
      <li class="item">
        <div>item 3</div>
      </li>
    </ul>
  </template>
  ```
  
  ### Styling
  
  Custom property                               | Description                                                | Default
  ----------------------------------------------|------------------------------------------------------------|------------------
  `--app-grid-columns`                          | The number of columns per row.                             | 1
  `--app-grid-gutter`                           | The space between two items.                               | 0px
  `--app-grid-item-height`                      | The height of the items.                                   | auto
  `--app-grid-expandible-item-columns`          | The number of columns an expandible item should expand to. | 1
  
  @pseudoElement app-grid
  @demo app-grid/demo/index.html
  */
  var $_documentContainer = document.createElement('template');
  $_documentContainer.setAttribute('style', 'display: none;');
  $_documentContainer.innerHTML = "<dom-module id=\"app-grid-style\">\n  <template>\n    <style>\n      :host {\n        /**\n         * The width for the expandible item is:\n         * ((100% - subPixelAdjustment) / columns * itemColumns - gutter\n         *\n         * - subPixelAdjustment: 0.1px (Required for IE 11)\n         * - gutter: var(--app-grid-gutter)\n         * - columns: var(--app-grid-columns)\n         * - itemColumn: var(--app-grid-expandible-item-columns)\n         */\n        --app-grid-expandible-item: {\n          -webkit-flex-basis: calc((100% - 0.1px) / var(--app-grid-columns, 1) * var(--app-grid-expandible-item-columns, 1) - var(--app-grid-gutter, 0px)) !important;\n          flex-basis: calc((100% - 0.1px) / var(--app-grid-columns, 1) * var(--app-grid-expandible-item-columns, 1) - var(--app-grid-gutter, 0px)) !important;\n          max-width: calc((100% - 0.1px) / var(--app-grid-columns, 1) * var(--app-grid-expandible-item-columns, 1) - var(--app-grid-gutter, 0px)) !important;\n        };\n      }\n\n      .app-grid {\n        display: -ms-flexbox;\n        display: -webkit-flex;\n        display: flex;\n\n        -ms-flex-direction: row;\n        -webkit-flex-direction: row;\n        flex-direction: row;\n\n        -ms-flex-wrap: wrap;\n        -webkit-flex-wrap: wrap;\n        flex-wrap: wrap;\n\n        padding-top: var(--app-grid-gutter, 0px);\n        padding-left: var(--app-grid-gutter, 0px);\n        box-sizing: border-box;\n      }\n\n      .app-grid > * {\n        /* Required for IE 10 */\n        -ms-flex: 1 1 100%;\n        -webkit-flex: 1;\n        flex: 1;\n\n        /* The width for an item is: (100% - subPixelAdjustment - gutter * columns) / columns */\n        -webkit-flex-basis: calc((100% - 0.1px - (var(--app-grid-gutter, 0px) * var(--app-grid-columns, 1))) / var(--app-grid-columns, 1));\n        flex-basis: calc((100% - 0.1px - (var(--app-grid-gutter, 0px) * var(--app-grid-columns, 1))) / var(--app-grid-columns, 1));\n\n        max-width: calc((100% - 0.1px - (var(--app-grid-gutter, 0px) * var(--app-grid-columns, 1))) / var(--app-grid-columns, 1));\n        margin-bottom: var(--app-grid-gutter, 0px);\n        margin-right: var(--app-grid-gutter, 0px);\n        height: var(--app-grid-item-height);\n        box-sizing: border-box;\n      }\n\n      .app-grid[has-aspect-ratio] > * {\n        position: relative;\n      }\n\n      .app-grid[has-aspect-ratio] > *::before {\n        display: block;\n        content: \"\";\n        padding-top: var(--app-grid-item-height, 100%);\n      }\n\n      .app-grid[has-aspect-ratio] > * > * {\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n      }\n    </style>\n  </template>\n</dom-module>";
  document.head.appendChild($_documentContainer.content);
});