define(["../src/apply-shim.js","../src/template-map.js","../src/style-util.js","../src/apply-shim-utils.js","../src/common-utils.js","../src/custom-style-interface.js","../src/style-settings.js"],function(_applyShim,_templateMap,_styleUtil,ApplyShimUtils,_commonUtils,_customStyleInterface,_styleSettings){/**
@license
Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
Code distributed by Google as part of the polymer project is also
subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
*/'use strict';_applyShim=babelHelpers.interopRequireDefault(_applyShim);_templateMap=babelHelpers.interopRequireDefault(_templateMap);ApplyShimUtils=babelHelpers.interopRequireWildcard(ApplyShimUtils);// eslint-disable-line no-unused-vars
/** @const {ApplyShim} */var applyShim=new _applyShim.default,ApplyShimInterface=/*#__PURE__*/function(){function ApplyShimInterface(){babelHelpers.classCallCheck(this,ApplyShimInterface);/** @type {?CustomStyleInterfaceInterface} */this.customStyleInterface=null;applyShim.invalidCallback=ApplyShimUtils.invalidate}babelHelpers.createClass(ApplyShimInterface,[{key:"ensure",value:function ensure(){var _this=this;if(this.customStyleInterface){return}if(window.ShadyCSS.CustomStyleInterface){this.customStyleInterface=/** @type {!CustomStyleInterfaceInterface} */window.ShadyCSS.CustomStyleInterface;this.customStyleInterface.transformCallback=function(style){applyShim.transformCustomStyle(style)};this.customStyleInterface.validateCallback=function(){requestAnimationFrame(function(){if(_this.customStyleInterface.enqueued){_this.flushCustomStyles()}})}}}/**
   * @param {!HTMLTemplateElement} template
   * @param {string} elementName
   */},{key:"prepareTemplate",value:function prepareTemplate(template,elementName){this.ensure();if((0,_styleUtil.elementHasBuiltCss)(template)){return}_templateMap.default[elementName]=template;var ast=applyShim.transformTemplate(template,elementName);// save original style ast to use for revalidating instances
template._styleAst=ast}},{key:"flushCustomStyles",value:function flushCustomStyles(){this.ensure();if(!this.customStyleInterface){return}var styles=this.customStyleInterface.processStyles();if(!this.customStyleInterface.enqueued){return}for(var i=0;i<styles.length;i++){var cs=styles[i],style=this.customStyleInterface.getStyleForCustomStyle(cs);if(style){applyShim.transformCustomStyle(style)}}this.customStyleInterface.enqueued=!1}/**
   * @param {HTMLElement} element
   * @param {Object=} properties
   */},{key:"styleSubtree",value:function styleSubtree(element,properties){this.ensure();if(properties){(0,_commonUtils.updateNativeProperties)(element,properties)}if(element.shadowRoot){this.styleElement(element);for(var shadowChildren=/** @type {!ParentNode} */element.shadowRoot.children||element.shadowRoot.childNodes,i=0;i<shadowChildren.length;i++){this.styleSubtree(/** @type {HTMLElement} */shadowChildren[i])}}else{for(var children=element.children||element.childNodes,_i=0;_i<children.length;_i++){this.styleSubtree(/** @type {HTMLElement} */children[_i])}}}/**
   * @param {HTMLElement} element
   */},{key:"styleElement",value:function styleElement(element){this.ensure();var _getIsExtends=(0,_styleUtil.getIsExtends)(element),is=_getIsExtends.is,template=_templateMap.default[is];if(template&&(0,_styleUtil.elementHasBuiltCss)(template)){return}if(template&&!ApplyShimUtils.templateIsValid(template)){// only revalidate template once
if(!ApplyShimUtils.templateIsValidating(template)){this.prepareTemplate(template,is);ApplyShimUtils.startValidatingTemplate(template)}// update this element instance
var root=element.shadowRoot;if(root){var style=/** @type {HTMLStyleElement} */root.querySelector("style");if(style){// reuse the template's style ast, it has all the original css text
style.__cssRules=template._styleAst;style.textContent=(0,_styleUtil.toCssText)(template._styleAst)}}}}/**
   * @param {Object=} properties
   */},{key:"styleDocument",value:function styleDocument(properties){this.ensure();this.styleSubtree(document.body,properties)}}]);return ApplyShimInterface}();if(!window.ShadyCSS||!window.ShadyCSS.ScopingShim){var applyShimInterface=new ApplyShimInterface,CustomStyleInterface=window.ShadyCSS&&window.ShadyCSS.CustomStyleInterface;/** @suppress {duplicate} */window.ShadyCSS={/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplate:function prepareTemplate(template,elementName,elementExtends){// eslint-disable-line no-unused-vars
applyShimInterface.flushCustomStyles();applyShimInterface.prepareTemplate(template,elementName)},/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     * @param {string=} elementExtends
     */prepareTemplateStyles:function prepareTemplateStyles(template,elementName,elementExtends){window.ShadyCSS.prepareTemplate(template,elementName,elementExtends)},/**
     * @param {!HTMLTemplateElement} template
     * @param {string} elementName
     */prepareTemplateDom:function prepareTemplateDom(template,elementName){},// eslint-disable-line no-unused-vars
/**
     * @param {!HTMLElement} element
     * @param {Object=} properties
     */styleSubtree:function styleSubtree(element,properties){applyShimInterface.flushCustomStyles();applyShimInterface.styleSubtree(element,properties)},/**
     * @param {!HTMLElement} element
     */styleElement:function styleElement(element){applyShimInterface.flushCustomStyles();applyShimInterface.styleElement(element)},/**
     * @param {Object=} properties
     */styleDocument:function styleDocument(properties){applyShimInterface.flushCustomStyles();applyShimInterface.styleDocument(properties)},/**
     * @param {Element} element
     * @param {string} property
     * @return {string}
     */getComputedStyleValue:function getComputedStyleValue(element,property){return(0,_commonUtils.getComputedStyleValue)(element,property)},flushCustomStyles:function flushCustomStyles(){applyShimInterface.flushCustomStyles()},nativeCss:_styleSettings.nativeCssVariables,nativeShadow:_styleSettings.nativeShadow,cssBuild:_styleSettings.cssBuild,disableRuntime:_styleSettings.disableRuntime};if(CustomStyleInterface){window.ShadyCSS.CustomStyleInterface=CustomStyleInterface}}window.ShadyCSS.ApplyShim=applyShim});