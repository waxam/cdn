define(["exports", "./utils/scheduler.js", "./ResizeObservation.js", "./ResizeObserverDetail.js", "./utils/resizeObservers.js"], function (_exports, _scheduler, _ResizeObservation, _ResizeObserverDetail, _resizeObservers) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ResizeObserverController = void 0;
  var observerMap = new WeakMap();

  var getObservationIndex = function getObservationIndex(observationTargets, target) {
    for (var i = 0; i < observationTargets.length; i += 1) {
      if (observationTargets[i].target === target) {
        return i;
      }
    }

    return -1;
  };

  var ResizeObserverController = function () {
    function ResizeObserverController() {}

    ResizeObserverController.connect = function (resizeObserver, callback) {
      var detail = new _ResizeObserverDetail.ResizeObserverDetail(resizeObserver, callback);
      observerMap.set(resizeObserver, detail);
    };

    ResizeObserverController.observe = function (resizeObserver, target, options) {
      var detail = observerMap.get(resizeObserver);
      var firstObservation = detail.observationTargets.length === 0;

      if (getObservationIndex(detail.observationTargets, target) < 0) {
        firstObservation && _resizeObservers.resizeObservers.push(detail);
        detail.observationTargets.push(new _ResizeObservation.ResizeObservation(target, options && options.box));
        (0, _scheduler.updateCount)(1);

        _scheduler.scheduler.schedule();
      }
    };

    ResizeObserverController.unobserve = function (resizeObserver, target) {
      var detail = observerMap.get(resizeObserver);
      var index = getObservationIndex(detail.observationTargets, target);
      var lastObservation = detail.observationTargets.length === 1;

      if (index >= 0) {
        lastObservation && _resizeObservers.resizeObservers.splice(_resizeObservers.resizeObservers.indexOf(detail), 1);
        detail.observationTargets.splice(index, 1);
        (0, _scheduler.updateCount)(-1);
      }
    };

    ResizeObserverController.disconnect = function (resizeObserver) {
      var _this = this;

      var detail = observerMap.get(resizeObserver);
      detail.observationTargets.slice().forEach(function (ot) {
        return _this.unobserve(resizeObserver, ot.target);
      });
      detail.activeTargets.splice(0, detail.activeTargets.length);
    };

    return ResizeObserverController;
  }();

  _exports.ResizeObserverController = ResizeObserverController;
});