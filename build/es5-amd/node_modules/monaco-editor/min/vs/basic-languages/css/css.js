function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/css/css", ["require", "require"], function (require) {
  var moduleExports = function () {
    var r = Object.defineProperty;
    var a = Object.getOwnPropertyDescriptor;
    var s = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var m = function m(t) {
      return r(t, "__esModule", {
        value: !0
      });
    };

    var c = function c(t, e) {
      for (var n in e) {
        r(t, n, {
          get: e[n],
          enumerable: !0
        });
      }
    },
        d = function d(t, e, n, i) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(s(e)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !l.call(t, o) && (n || o !== "default") && r(t, o, {
              get: function get() {
                return e[o];
              },
              enumerable: !(i = a(e, o)) || i.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var u = function (t) {
      return function (e, n) {
        return t && t.get(e) || (n = d(m({}), e, 1), t && t.set(e, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var g = {};
    c(g, {
      conf: function conf() {
        return p;
      },
      language: function language() {
        return k;
      }
    });
    var p = {
      wordPattern: /(#?-?\d*\.\d\w*%?)|((::|[@#.!:])?[\w-?]+%?)|::|[@#.!:]/g,
      comments: {
        blockComment: ["/*", "*/"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}",
        notIn: ["string", "comment"]
      }, {
        open: "[",
        close: "]",
        notIn: ["string", "comment"]
      }, {
        open: "(",
        close: ")",
        notIn: ["string", "comment"]
      }, {
        open: '"',
        close: '"',
        notIn: ["string", "comment"]
      }, {
        open: "'",
        close: "'",
        notIn: ["string", "comment"]
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*\\/\\*\\s*#region\\b\\s*(.*?)\\s*\\*\\/"),
          end: new RegExp("^\\s*\\/\\*\\s*#endregion\\b.*\\*\\/")
        }
      }
    },
        k = {
      defaultToken: "",
      tokenPostfix: ".css",
      ws: "[ \t\n\r\f]*",
      identifier: "-?-?([a-zA-Z]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))([\\w\\-]|(\\\\(([0-9a-fA-F]{1,6}\\s?)|[^[0-9a-fA-F])))*",
      brackets: [{
        open: "{",
        close: "}",
        token: "delimiter.bracket"
      }, {
        open: "[",
        close: "]",
        token: "delimiter.bracket"
      }, {
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }, {
        open: "<",
        close: ">",
        token: "delimiter.angle"
      }],
      tokenizer: {
        root: [{
          include: "@selector"
        }],
        selector: [{
          include: "@comments"
        }, {
          include: "@import"
        }, {
          include: "@strings"
        }, ["[@](keyframes|-webkit-keyframes|-moz-keyframes|-o-keyframes)", {
          token: "keyword",
          next: "@keyframedeclaration"
        }], ["[@](page|content|font-face|-moz-document)", {
          token: "keyword"
        }], ["[@](charset|namespace)", {
          token: "keyword",
          next: "@declarationbody"
        }], ["(url-prefix)(\\()", ["attribute.value", {
          token: "delimiter.parenthesis",
          next: "@urldeclaration"
        }]], ["(url)(\\()", ["attribute.value", {
          token: "delimiter.parenthesis",
          next: "@urldeclaration"
        }]], {
          include: "@selectorname"
        }, ["[\\*]", "tag"], ["[>\\+,]", "delimiter"], ["\\[", {
          token: "delimiter.bracket",
          next: "@selectorattribute"
        }], ["{", {
          token: "delimiter.bracket",
          next: "@selectorbody"
        }]],
        selectorbody: [{
          include: "@comments"
        }, ["[*_]?@identifier@ws:(?=(\\s|\\d|[^{;}]*[;}]))", "attribute.name", "@rulevalue"], ["}", {
          token: "delimiter.bracket",
          next: "@pop"
        }]],
        selectorname: [["(\\.|#(?=[^{])|%|(@identifier)|:)+", "tag"]],
        selectorattribute: [{
          include: "@term"
        }, ["]", {
          token: "delimiter.bracket",
          next: "@pop"
        }]],
        term: [{
          include: "@comments"
        }, ["(url-prefix)(\\()", ["attribute.value", {
          token: "delimiter.parenthesis",
          next: "@urldeclaration"
        }]], ["(url)(\\()", ["attribute.value", {
          token: "delimiter.parenthesis",
          next: "@urldeclaration"
        }]], {
          include: "@functioninvocation"
        }, {
          include: "@numbers"
        }, {
          include: "@name"
        }, {
          include: "@strings"
        }, ["([<>=\\+\\-\\*\\/\\^\\|\\~,])", "delimiter"], [",", "delimiter"]],
        rulevalue: [{
          include: "@comments"
        }, {
          include: "@strings"
        }, {
          include: "@term"
        }, ["!important", "keyword"], [";", "delimiter", "@pop"], ["(?=})", {
          token: "",
          next: "@pop"
        }]],
        warndebug: [["[@](warn|debug)", {
          token: "keyword",
          next: "@declarationbody"
        }]],
        import: [["[@](import)", {
          token: "keyword",
          next: "@declarationbody"
        }]],
        urldeclaration: [{
          include: "@strings"
        }, ["[^)\r\n]+", "string"], ["\\)", {
          token: "delimiter.parenthesis",
          next: "@pop"
        }]],
        parenthizedterm: [{
          include: "@term"
        }, ["\\)", {
          token: "delimiter.parenthesis",
          next: "@pop"
        }]],
        declarationbody: [{
          include: "@term"
        }, [";", "delimiter", "@pop"], ["(?=})", {
          token: "",
          next: "@pop"
        }]],
        comments: [["\\/\\*", "comment", "@comment"], ["\\/\\/+.*", "comment"]],
        comment: [["\\*\\/", "comment", "@pop"], [/[^*/]+/, "comment"], [/./, "comment"]],
        name: [["@identifier", "attribute.value"]],
        numbers: [["-?(\\d*\\.)?\\d+([eE][\\-+]?\\d+)?", {
          token: "attribute.value.number",
          next: "@units"
        }], ["#[0-9a-fA-F_]+(?!\\w)", "attribute.value.hex"]],
        units: [["(em|ex|ch|rem|vmin|vmax|vw|vh|vm|cm|mm|in|px|pt|pc|deg|grad|rad|turn|s|ms|Hz|kHz|%)?", "attribute.value.unit", "@pop"]],
        keyframedeclaration: [["@identifier", "attribute.value"], ["{", {
          token: "delimiter.bracket",
          switchTo: "@keyframebody"
        }]],
        keyframebody: [{
          include: "@term"
        }, ["{", {
          token: "delimiter.bracket",
          next: "@selectorbody"
        }], ["}", {
          token: "delimiter.bracket",
          next: "@pop"
        }]],
        functioninvocation: [["@identifier\\(", {
          token: "attribute.value",
          next: "@functionarguments"
        }]],
        functionarguments: [["\\$@identifier@ws:", "attribute.name"], ["[,]", "delimiter"], {
          include: "@term"
        }, ["\\)", {
          token: "attribute.value",
          next: "@pop"
        }]],
        strings: [['~?"', {
          token: "string",
          next: "@stringenddoublequote"
        }], ["~?'", {
          token: "string",
          next: "@stringendquote"
        }]],
        stringenddoublequote: [["\\\\.", "string"], ['"', {
          token: "string",
          next: "@pop"
        }], [/[^\\"]+/, "string"], [".", "string"]],
        stringendquote: [["\\\\.", "string"], ["'", {
          token: "string",
          next: "@pop"
        }], [/[^\\']+/, "string"], [".", "string"]]
      }
    };
    return u(g);
  }();

  return moduleExports;
});