function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/twig/twig", ["require", "require"], function (require) {
  var moduleExports = function () {
    var m = Object.defineProperty;
    var l = Object.getOwnPropertyDescriptor;
    var n = Object.getOwnPropertyNames;
    var a = Object.prototype.hasOwnProperty;

    var s = function s(e) {
      return m(e, "__esModule", {
        value: !0
      });
    };

    var d = function d(e, t) {
      for (var i in t) {
        m(e, i, {
          get: t[i],
          enumerable: !0
        });
      }
    },
        p = function p(e, t, i, o) {
      if (t && babelHelpers.typeof(t) == "object" || typeof t == "function") {
        var _iterator = _createForOfIteratorHelper(n(t)),
            _step;

        try {
          var _loop = function _loop() {
            var r = _step.value;
            !a.call(e, r) && (i || r !== "default") && m(e, r, {
              get: function get() {
                return t[r];
              },
              enumerable: !(o = l(t, r)) || o.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    };

    var h = function (e) {
      return function (t, i) {
        return e && e.get(t) || (i = p(s({}), t, 1), e && e.set(t, i), i);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var u = {};
    d(u, {
      conf: function conf() {
        return c;
      },
      language: function language() {
        return g;
      }
    });
    var c = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
      comments: {
        blockComment: ["{#", "#}"]
      },
      brackets: [["{#", "#}"], ["{%", "%}"], ["{{", "}}"], ["(", ")"], ["[", "]"], ["<!--", "-->"], ["<", ">"]],
      autoClosingPairs: [{
        open: "{# ",
        close: " #}"
      }, {
        open: "{% ",
        close: " %}"
      }, {
        open: "{{ ",
        close: " }}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }, {
        open: "<",
        close: ">"
      }]
    },
        g = {
      defaultToken: "",
      tokenPostfix: "",
      ignoreCase: !0,
      keywords: ["apply", "autoescape", "block", "deprecated", "do", "embed", "extends", "flush", "for", "from", "if", "import", "include", "macro", "sandbox", "set", "use", "verbatim", "with", "endapply", "endautoescape", "endblock", "endembed", "endfor", "endif", "endmacro", "endsandbox", "endset", "endwith", "true", "false"],
      tokenizer: {
        root: [[/\s+/], [/{#/, "comment.twig", "@commentState"], [/{%[-~]?/, "delimiter.twig", "@blockState"], [/{{[-~]?/, "delimiter.twig", "@variableState"], [/<!DOCTYPE/, "metatag.html", "@doctype"], [/<!--/, "comment.html", "@comment"], [/(<)((?:[\w\-]+:)?[\w\-]+)(\s*)(\/>)/, ["delimiter.html", "tag.html", "", "delimiter.html"]], [/(<)(script)/, ["delimiter.html", {
          token: "tag.html",
          next: "@script"
        }]], [/(<)(style)/, ["delimiter.html", {
          token: "tag.html",
          next: "@style"
        }]], [/(<)((?:[\w\-]+:)?[\w\-]+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/(<\/)((?:[\w\-]+:)?[\w\-]+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/</, "delimiter.html"], [/[^<]+/]],
        commentState: [[/#}/, "comment.twig", "@pop"], [/./, "comment.twig"]],
        blockState: [[/[-~]?%}/, "delimiter.twig", "@pop"], [/\s+/], [/(verbatim)(\s*)([-~]?%})/, ["keyword.twig", "", {
          token: "delimiter.twig",
          next: "@rawDataState"
        }]], {
          include: "expression"
        }],
        rawDataState: [[/({%[-~]?)(\s*)(endverbatim)(\s*)([-~]?%})/, ["delimiter.twig", "", "keyword.twig", "", {
          token: "delimiter.twig",
          next: "@popall"
        }]], [/./, "string.twig"]],
        variableState: [[/[-~]?}}/, "delimiter.twig", "@pop"], {
          include: "expression"
        }],
        stringState: [[/"/, "string.twig", "@pop"], [/#{\s*/, "string.twig", "@interpolationState"], [/[^#"\\]*(?:(?:\\.|#(?!\{))[^#"\\]*)*/, "string.twig"]],
        interpolationState: [[/}/, "string.twig", "@pop"], {
          include: "expression"
        }],
        expression: [[/\s+/], [/\+|-|\/{1,2}|%|\*{1,2}/, "operators.twig"], [/(and|or|not|b-and|b-xor|b-or)(\s+)/, ["operators.twig", ""]], [/==|!=|<|>|>=|<=/, "operators.twig"], [/(starts with|ends with|matches)(\s+)/, ["operators.twig", ""]], [/(in)(\s+)/, ["operators.twig", ""]], [/(is)(\s+)/, ["operators.twig", ""]], [/\||~|:|\.{1,2}|\?{1,2}/, "operators.twig"], [/[^\W\d][\w]*/, {
          cases: {
            "@keywords": "keyword.twig",
            "@default": "variable.twig"
          }
        }], [/\d+(\.\d+)?/, "number.twig"], [/\(|\)|\[|\]|{|}|,/, "delimiter.twig"], [/"([^#"\\]*(?:\\.[^#"\\]*)*)"|\'([^\'\\]*(?:\\.[^\'\\]*)*)\'/, "string.twig"], [/"/, "string.twig", "@stringState"], [/=>/, "operators.twig"], [/=/, "operators.twig"]],
        doctype: [[/[^>]+/, "metatag.content.html"], [/>/, "metatag.html", "@pop"]],
        comment: [[/-->/, "comment.html", "@pop"], [/[^-]+/, "comment.content.html"], [/./, "comment.content.html"]],
        otherTag: [[/\/?>/, "delimiter.html", "@pop"], [/"([^"]*)"/, "attribute.value.html"], [/'([^']*)'/, "attribute.value.html"], [/[\w\-]+/, "attribute.name.html"], [/=/, "delimiter.html"], [/[ \t\r\n]+/]],
        script: [[/type/, "attribute.name.html", "@scriptAfterType"], [/"([^"]*)"/, "attribute.value.html"], [/'([^']*)'/, "attribute.value.html"], [/[\w\-]+/, "attribute.name.html"], [/=/, "delimiter.html"], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/(<\/)(script\s*)(>)/, ["delimiter.html", "tag.html", {
          token: "delimiter.html",
          next: "@pop"
        }]]],
        scriptAfterType: [[/=/, "delimiter.html", "@scriptAfterTypeEquals"], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptAfterTypeEquals: [[/"([^"]*)"/, {
          token: "attribute.value.html",
          switchTo: "@scriptWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value.html",
          switchTo: "@scriptWithCustomType.$1"
        }], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptWithCustomType: [[/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value.html"], [/'([^']*)'/, "attribute.value.html"], [/[\w\-]+/, "attribute.name.html"], [/=/, "delimiter.html"], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptEmbedded: [[/<\/script/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }], [/[^<]+/, ""]],
        style: [[/type/, "attribute.name.html", "@styleAfterType"], [/"([^"]*)"/, "attribute.value.html"], [/'([^']*)'/, "attribute.value.html"], [/[\w\-]+/, "attribute.name.html"], [/=/, "delimiter.html"], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/(<\/)(style\s*)(>)/, ["delimiter.html", "tag.html", {
          token: "delimiter.html",
          next: "@pop"
        }]]],
        styleAfterType: [[/=/, "delimiter.html", "@styleAfterTypeEquals"], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleAfterTypeEquals: [[/"([^"]*)"/, {
          token: "attribute.value.html",
          switchTo: "@styleWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value.html",
          switchTo: "@styleWithCustomType.$1"
        }], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleWithCustomType: [[/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value.html"], [/'([^']*)'/, "attribute.value.html"], [/[\w\-]+/, "attribute.name.html"], [/=/, "delimiter.html"], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleEmbedded: [[/<\/style/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }], [/[^<]+/, ""]]
      }
    };
    return h(u);
  }();

  return moduleExports;
});