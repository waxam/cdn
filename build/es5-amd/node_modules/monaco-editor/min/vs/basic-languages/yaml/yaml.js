function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/yaml/yaml", ["require", "require"], function (require) {
  var moduleExports = function () {
    var o = Object.defineProperty;
    var a = Object.getOwnPropertyDescriptor;
    var i = Object.getOwnPropertyNames;
    var c = Object.prototype.hasOwnProperty;

    var u = function u(n) {
      return o(n, "__esModule", {
        value: !0
      });
    };

    var s = function s(n, e) {
      for (var t in e) {
        o(n, t, {
          get: e[t],
          enumerable: !0
        });
      }
    },
        d = function d(n, e, t, l) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(i(e)),
            _step;

        try {
          var _loop = function _loop() {
            var r = _step.value;
            !c.call(n, r) && (t || r !== "default") && o(n, r, {
              get: function get() {
                return e[r];
              },
              enumerable: !(l = a(e, r)) || l.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return n;
    };

    var m = function (n) {
      return function (e, t) {
        return n && n.get(e) || (t = d(u({}), e, 1), n && n.set(e, t), t);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var p = {};
    s(p, {
      conf: function conf() {
        return b;
      },
      language: function language() {
        return g;
      }
    });
    var b = {
      comments: {
        lineComment: "#"
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      folding: {
        offSide: !0
      }
    },
        g = {
      tokenPostfix: ".yaml",
      brackets: [{
        token: "delimiter.bracket",
        open: "{",
        close: "}"
      }, {
        token: "delimiter.square",
        open: "[",
        close: "]"
      }],
      keywords: ["true", "True", "TRUE", "false", "False", "FALSE", "null", "Null", "Null", "~"],
      numberInteger: /(?:0|[+-]?[0-9]+)/,
      numberFloat: /(?:0|[+-]?[0-9]+)(?:\.[0-9]+)?(?:e[-+][1-9][0-9]*)?/,
      numberOctal: /0o[0-7]+/,
      numberHex: /0x[0-9a-fA-F]+/,
      numberInfinity: /[+-]?\.(?:inf|Inf|INF)/,
      numberNaN: /\.(?:nan|Nan|NAN)/,
      numberDate: /\d{4}-\d\d-\d\d([Tt ]\d\d:\d\d:\d\d(\.\d+)?(( ?[+-]\d\d?(:\d\d)?)|Z)?)?/,
      escapes: /\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,
      tokenizer: {
        root: [{
          include: "@whitespace"
        }, {
          include: "@comment"
        }, [/%[^ ]+.*$/, "meta.directive"], [/---/, "operators.directivesEnd"], [/\.{3}/, "operators.documentEnd"], [/[-?:](?= )/, "operators"], {
          include: "@anchor"
        }, {
          include: "@tagHandle"
        }, {
          include: "@flowCollections"
        }, {
          include: "@blockStyle"
        }, [/@numberInteger(?![ \t]*\S+)/, "number"], [/@numberFloat(?![ \t]*\S+)/, "number.float"], [/@numberOctal(?![ \t]*\S+)/, "number.octal"], [/@numberHex(?![ \t]*\S+)/, "number.hex"], [/@numberInfinity(?![ \t]*\S+)/, "number.infinity"], [/@numberNaN(?![ \t]*\S+)/, "number.nan"], [/@numberDate(?![ \t]*\S+)/, "number.date"], [/(".*?"|'.*?'|.*?)([ \t]*)(:)( |$)/, ["type", "white", "operators", "white"]], {
          include: "@flowScalars"
        }, [/[^#]+/, {
          cases: {
            "@keywords": "keyword",
            "@default": "string"
          }
        }]],
        object: [{
          include: "@whitespace"
        }, {
          include: "@comment"
        }, [/\}/, "@brackets", "@pop"], [/,/, "delimiter.comma"], [/:(?= )/, "operators"], [/(?:".*?"|'.*?'|[^,\{\[]+?)(?=: )/, "type"], {
          include: "@flowCollections"
        }, {
          include: "@flowScalars"
        }, {
          include: "@tagHandle"
        }, {
          include: "@anchor"
        }, {
          include: "@flowNumber"
        }, [/[^\},]+/, {
          cases: {
            "@keywords": "keyword",
            "@default": "string"
          }
        }]],
        array: [{
          include: "@whitespace"
        }, {
          include: "@comment"
        }, [/\]/, "@brackets", "@pop"], [/,/, "delimiter.comma"], {
          include: "@flowCollections"
        }, {
          include: "@flowScalars"
        }, {
          include: "@tagHandle"
        }, {
          include: "@anchor"
        }, {
          include: "@flowNumber"
        }, [/[^\],]+/, {
          cases: {
            "@keywords": "keyword",
            "@default": "string"
          }
        }]],
        multiString: [[/^( +).+$/, "string", "@multiStringContinued.$1"]],
        multiStringContinued: [[/^( *).+$/, {
          cases: {
            "$1==$S2": "string",
            "@default": {
              token: "@rematch",
              next: "@popall"
            }
          }
        }]],
        whitespace: [[/[ \t\r\n]+/, "white"]],
        comment: [[/#.*$/, "comment"]],
        flowCollections: [[/\[/, "@brackets", "@array"], [/\{/, "@brackets", "@object"]],
        flowScalars: [[/"([^"\\]|\\.)*$/, "string.invalid"], [/'([^'\\]|\\.)*$/, "string.invalid"], [/'[^']*'/, "string"], [/"/, "string", "@doubleQuotedString"]],
        doubleQuotedString: [[/[^\\"]+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/"/, "string", "@pop"]],
        blockStyle: [[/[>|][0-9]*[+-]?$/, "operators", "@multiString"]],
        flowNumber: [[/@numberInteger(?=[ \t]*[,\]\}])/, "number"], [/@numberFloat(?=[ \t]*[,\]\}])/, "number.float"], [/@numberOctal(?=[ \t]*[,\]\}])/, "number.octal"], [/@numberHex(?=[ \t]*[,\]\}])/, "number.hex"], [/@numberInfinity(?=[ \t]*[,\]\}])/, "number.infinity"], [/@numberNaN(?=[ \t]*[,\]\}])/, "number.nan"], [/@numberDate(?=[ \t]*[,\]\}])/, "number.date"]],
        tagHandle: [[/\![^ ]*/, "tag"]],
        anchor: [[/[&*][^ ]+/, "namespace"]]
      }
    };
    return m(p);
  }();

  return moduleExports;
});