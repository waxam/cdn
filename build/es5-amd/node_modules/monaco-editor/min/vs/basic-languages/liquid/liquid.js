function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/liquid/liquid", ["require", "require"], function (require) {
  var moduleExports = function () {
    var p = Object.create;
    var r = Object.defineProperty;
    var g = Object.getOwnPropertyDescriptor;
    var w = Object.getOwnPropertyNames;
    var h = Object.getPrototypeOf,
        q = Object.prototype.hasOwnProperty;

    var d = function d(e) {
      return r(e, "__esModule", {
        value: !0
      });
    };

    var f = function (e) {
      return typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(e, {
        get: function get(t, i) {
          return (typeof require != "undefined" ? require : t)[i];
        }
      }) : e;
    }(function (e) {
      if (typeof require != "undefined") return require.apply(this, arguments);
      throw new Error('Dynamic require of "' + e + '" is not supported');
    });

    var b = function b(e, t) {
      return function () {
        return t || e((t = {
          exports: {}
        }).exports, t), t.exports;
      };
    },
        T = function T(e, t) {
      for (var i in t) {
        r(e, i, {
          get: t[i],
          enumerable: !0
        });
      }
    },
        a = function a(e, t, i, l) {
      if (t && babelHelpers.typeof(t) == "object" || typeof t == "function") {
        var _iterator = _createForOfIteratorHelper(w(t)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !q.call(e, o) && (i || o !== "default") && r(e, o, {
              get: function get() {
                return t[o];
              },
              enumerable: !(l = g(t, o)) || l.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    },
        s = function s(e, t) {
      return a(d(r(e != null ? p(h(e)) : {}, "default", !t && e && e.__esModule ? {
        get: function get() {
          return e.default;
        },
        enumerable: !0
      } : {
        value: e,
        enumerable: !0
      })), e);
    },
        k = function (e) {
      return function (t, i) {
        return e && e.get(t) || (i = a(d({}), t, 1), e && e.set(t, i), i);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var c = b(function (y, u) {
      var _ = s(f("vs/editor/editor.api"));

      u.exports = _;
    });
    var $ = {};
    T($, {
      conf: function conf() {
        return x;
      },
      language: function language() {
        return S;
      }
    });
    var n = {};
    a(n, s(c()));
    var m = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"],
        x = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
      brackets: [["<!--", "-->"], ["<", ">"], ["{{", "}}"], ["{%", "%}"], ["{", "}"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "%",
        close: "%"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: "<",
        close: ">"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      onEnterRules: [{
        beforeText: new RegExp("<(?!(?:".concat(m.join("|"), "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$"), "i"),
        afterText: /^<\/(\w[\w\d]*)\s*>$/i,
        action: {
          indentAction: n.languages.IndentAction.IndentOutdent
        }
      }, {
        beforeText: new RegExp("<(?!(?:".concat(m.join("|"), "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$"), "i"),
        action: {
          indentAction: n.languages.IndentAction.Indent
        }
      }]
    },
        S = {
      defaultToken: "",
      tokenPostfix: "",
      builtinTags: ["if", "else", "elseif", "endif", "render", "assign", "capture", "endcapture", "case", "endcase", "comment", "endcomment", "cycle", "decrement", "for", "endfor", "include", "increment", "layout", "raw", "endraw", "render", "tablerow", "endtablerow", "unless", "endunless"],
      builtinFilters: ["abs", "append", "at_least", "at_most", "capitalize", "ceil", "compact", "date", "default", "divided_by", "downcase", "escape", "escape_once", "first", "floor", "join", "json", "last", "lstrip", "map", "minus", "modulo", "newline_to_br", "plus", "prepend", "remove", "remove_first", "replace", "replace_first", "reverse", "round", "rstrip", "size", "slice", "sort", "sort_natural", "split", "strip", "strip_html", "strip_newlines", "times", "truncate", "truncatewords", "uniq", "upcase", "url_decode", "url_encode", "where"],
      constants: ["true", "false"],
      operators: ["==", "!=", ">", "<", ">=", "<="],
      symbol: /[=><!]+/,
      identifier: /[a-zA-Z_][\w]*/,
      tokenizer: {
        root: [[/\{\%\s*comment\s*\%\}/, "comment.start.liquid", "@comment"], [/\{\{/, {
          token: "@rematch",
          switchTo: "@liquidState.root"
        }], [/\{\%/, {
          token: "@rematch",
          switchTo: "@liquidState.root"
        }], [/(<)([\w\-]+)(\/>)/, ["delimiter.html", "tag.html", "delimiter.html"]], [/(<)([:\w]+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/(<\/)([\w\-]+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/</, "delimiter.html"], [/\{/, "delimiter.html"], [/[^<{]+/]],
        comment: [[/\{\%\s*endcomment\s*\%\}/, "comment.end.liquid", "@pop"], [/./, "comment.content.liquid"]],
        otherTag: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@liquidState.otherTag"
        }], [/\{\%/, {
          token: "@rematch",
          switchTo: "@liquidState.otherTag"
        }], [/\/?>/, "delimiter.html", "@pop"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/]],
        liquidState: [[/\{\{/, "delimiter.output.liquid"], [/\}\}/, {
          token: "delimiter.output.liquid",
          switchTo: "@$S2.$S3"
        }], [/\{\%/, "delimiter.tag.liquid"], [/raw\s*\%\}/, "delimiter.tag.liquid", "@liquidRaw"], [/\%\}/, {
          token: "delimiter.tag.liquid",
          switchTo: "@$S2.$S3"
        }], {
          include: "liquidRoot"
        }],
        liquidRaw: [[/^(?!\{\%\s*endraw\s*\%\}).+/], [/\{\%/, "delimiter.tag.liquid"], [/@identifier/], [/\%\}/, {
          token: "delimiter.tag.liquid",
          next: "@root"
        }]],
        liquidRoot: [[/\d+(\.\d+)?/, "number.liquid"], [/"[^"]*"/, "string.liquid"], [/'[^']*'/, "string.liquid"], [/\s+/], [/@symbol/, {
          cases: {
            "@operators": "operator.liquid",
            "@default": ""
          }
        }], [/\./], [/@identifier/, {
          cases: {
            "@constants": "keyword.liquid",
            "@builtinFilters": "predefined.liquid",
            "@builtinTags": "predefined.liquid",
            "@default": "variable.liquid"
          }
        }], [/[^}|%]/, "variable.liquid"]]
      }
    };
    return k($);
  }();

  return moduleExports;
});