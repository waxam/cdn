function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/pascal/pascal", ["require", "require"], function (require) {
  var moduleExports = function () {
    var n = Object.defineProperty;
    var s = Object.getOwnPropertyDescriptor;
    var a = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(t) {
      return n(t, "__esModule", {
        value: !0
      });
    };

    var d = function d(t, e) {
      for (var o in e) {
        n(t, o, {
          get: e[o],
          enumerable: !0
        });
      }
    },
        p = function p(t, e, o, i) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(a(e)),
            _step;

        try {
          var _loop = function _loop() {
            var r = _step.value;
            !l.call(t, r) && (o || r !== "default") && n(t, r, {
              get: function get() {
                return e[r];
              },
              enumerable: !(i = s(e, r)) || i.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var m = function (t) {
      return function (e, o) {
        return t && t.get(e) || (o = p(c({}), e, 1), t && t.set(e, o), o);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var b = {};
    d(b, {
      conf: function conf() {
        return u;
      },
      language: function language() {
        return g;
      }
    });
    var u = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
      comments: {
        lineComment: "//",
        blockComment: ["{", "}"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"], ["<", ">"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "<",
        close: ">"
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "<",
        close: ">"
      }, {
        open: "'",
        close: "'"
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*\\{\\$REGION(\\s\\'.*\\')?\\}"),
          end: new RegExp("^\\s*\\{\\$ENDREGION\\}")
        }
      }
    },
        g = {
      defaultToken: "",
      tokenPostfix: ".pascal",
      ignoreCase: !0,
      brackets: [{
        open: "{",
        close: "}",
        token: "delimiter.curly"
      }, {
        open: "[",
        close: "]",
        token: "delimiter.square"
      }, {
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }, {
        open: "<",
        close: ">",
        token: "delimiter.angle"
      }],
      keywords: ["absolute", "abstract", "all", "and_then", "array", "as", "asm", "attribute", "begin", "bindable", "case", "class", "const", "contains", "default", "div", "else", "end", "except", "exports", "external", "far", "file", "finalization", "finally", "forward", "generic", "goto", "if", "implements", "import", "in", "index", "inherited", "initialization", "interrupt", "is", "label", "library", "mod", "module", "name", "near", "not", "object", "of", "on", "only", "operator", "or_else", "otherwise", "override", "package", "packed", "pow", "private", "program", "protected", "public", "published", "interface", "implementation", "qualified", "read", "record", "resident", "requires", "resourcestring", "restricted", "segment", "set", "shl", "shr", "specialize", "stored", "strict", "then", "threadvar", "to", "try", "type", "unit", "uses", "var", "view", "virtual", "dynamic", "overload", "reintroduce", "with", "write", "xor", "true", "false", "procedure", "function", "constructor", "destructor", "property", "break", "continue", "exit", "abort", "while", "do", "for", "raise", "repeat", "until"],
      typeKeywords: ["boolean", "double", "byte", "integer", "shortint", "char", "longint", "float", "string"],
      operators: ["=", ">", "<", "<=", ">=", "<>", ":", ":=", "and", "or", "+", "-", "*", "/", "@", "&", "^", "%"],
      symbols: /[=><:@\^&|+\-*\/\^%]+/,
      tokenizer: {
        root: [[/[a-zA-Z_][\w]*/, {
          cases: {
            "@keywords": {
              token: "keyword.$0"
            },
            "@default": "identifier"
          }
        }], {
          include: "@whitespace"
        }, [/[{}()\[\]]/, "@brackets"], [/[<>](?!@symbols)/, "@brackets"], [/@symbols/, {
          cases: {
            "@operators": "delimiter",
            "@default": ""
          }
        }], [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"], [/\$[0-9a-fA-F]{1,16}/, "number.hex"], [/\d+/, "number"], [/[;,.]/, "delimiter"], [/'([^'\\]|\\.)*$/, "string.invalid"], [/'/, "string", "@string"], [/'[^\\']'/, "string"], [/'/, "string.invalid"], [/\#\d+/, "string"]],
        comment: [[/[^\*\}]+/, "comment"], [/\}/, "comment", "@pop"], [/[\{]/, "comment"]],
        string: [[/[^\\']+/, "string"], [/\\./, "string.escape.invalid"], [/'/, {
          token: "string.quote",
          bracket: "@close",
          next: "@pop"
        }]],
        whitespace: [[/[ \t\r\n]+/, "white"], [/\{/, "comment", "@comment"], [/\/\/.*$/, "comment"]]
      }
    };
    return m(b);
  }();

  return moduleExports;
});