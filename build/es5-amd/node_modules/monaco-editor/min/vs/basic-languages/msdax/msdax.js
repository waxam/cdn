function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/msdax/msdax", ["require", "require"], function (require) {
  var moduleExports = function () {
    var e = Object.defineProperty;
    var I = Object.getOwnPropertyDescriptor;
    var O = Object.getOwnPropertyNames;
    var S = Object.prototype.hasOwnProperty;

    var n = function n(T) {
      return e(T, "__esModule", {
        value: !0
      });
    };

    var t = function t(T, E) {
      for (var A in E) {
        e(T, A, {
          get: E[A],
          enumerable: !0
        });
      }
    },
        L = function L(T, E, A, R) {
      if (E && babelHelpers.typeof(E) == "object" || typeof E == "function") {
        var _iterator = _createForOfIteratorHelper(O(E)),
            _step;

        try {
          var _loop = function _loop() {
            var N = _step.value;
            !S.call(T, N) && (A || N !== "default") && e(T, N, {
              get: function get() {
                return E[N];
              },
              enumerable: !(R = I(E, N)) || R.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return T;
    };

    var C = function (T) {
      return function (E, A) {
        return T && T.get(E) || (A = L(n({}), E, 1), T && T.set(E, A), A);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var i = {};
    t(i, {
      conf: function conf() {
        return o;
      },
      language: function language() {
        return D;
      }
    });
    var o = {
      comments: {
        lineComment: "//",
        blockComment: ["/*", "*/"]
      },
      brackets: [["[", "]"], ["(", ")"], ["{", "}"]],
      autoClosingPairs: [{
        open: '"',
        close: '"',
        notIn: ["string", "comment"]
      }, {
        open: "'",
        close: "'",
        notIn: ["string", "comment"]
      }, {
        open: "[",
        close: "]",
        notIn: ["string", "comment"]
      }, {
        open: "(",
        close: ")",
        notIn: ["string", "comment"]
      }, {
        open: "{",
        close: "}",
        notIn: ["string", "comment"]
      }]
    },
        D = {
      defaultToken: "",
      tokenPostfix: ".msdax",
      ignoreCase: !0,
      brackets: [{
        open: "[",
        close: "]",
        token: "delimiter.square"
      }, {
        open: "{",
        close: "}",
        token: "delimiter.brackets"
      }, {
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }],
      keywords: ["VAR", "RETURN", "NOT", "EVALUATE", "DATATABLE", "ORDER", "BY", "START", "AT", "DEFINE", "MEASURE", "ASC", "DESC", "IN", "BOOLEAN", "DOUBLE", "INTEGER", "DATETIME", "CURRENCY", "STRING"],
      functions: ["CLOSINGBALANCEMONTH", "CLOSINGBALANCEQUARTER", "CLOSINGBALANCEYEAR", "DATEADD", "DATESBETWEEN", "DATESINPERIOD", "DATESMTD", "DATESQTD", "DATESYTD", "ENDOFMONTH", "ENDOFQUARTER", "ENDOFYEAR", "FIRSTDATE", "FIRSTNONBLANK", "LASTDATE", "LASTNONBLANK", "NEXTDAY", "NEXTMONTH", "NEXTQUARTER", "NEXTYEAR", "OPENINGBALANCEMONTH", "OPENINGBALANCEQUARTER", "OPENINGBALANCEYEAR", "PARALLELPERIOD", "PREVIOUSDAY", "PREVIOUSMONTH", "PREVIOUSQUARTER", "PREVIOUSYEAR", "SAMEPERIODLASTYEAR", "STARTOFMONTH", "STARTOFQUARTER", "STARTOFYEAR", "TOTALMTD", "TOTALQTD", "TOTALYTD", "ADDCOLUMNS", "ADDMISSINGITEMS", "ALL", "ALLEXCEPT", "ALLNOBLANKROW", "ALLSELECTED", "CALCULATE", "CALCULATETABLE", "CALENDAR", "CALENDARAUTO", "CROSSFILTER", "CROSSJOIN", "CURRENTGROUP", "DATATABLE", "DETAILROWS", "DISTINCT", "EARLIER", "EARLIEST", "EXCEPT", "FILTER", "FILTERS", "GENERATE", "GENERATEALL", "GROUPBY", "IGNORE", "INTERSECT", "ISONORAFTER", "KEEPFILTERS", "LOOKUPVALUE", "NATURALINNERJOIN", "NATURALLEFTOUTERJOIN", "RELATED", "RELATEDTABLE", "ROLLUP", "ROLLUPADDISSUBTOTAL", "ROLLUPGROUP", "ROLLUPISSUBTOTAL", "ROW", "SAMPLE", "SELECTCOLUMNS", "SUBSTITUTEWITHINDEX", "SUMMARIZE", "SUMMARIZECOLUMNS", "TOPN", "TREATAS", "UNION", "USERELATIONSHIP", "VALUES", "SUM", "SUMX", "PATH", "PATHCONTAINS", "PATHITEM", "PATHITEMREVERSE", "PATHLENGTH", "AVERAGE", "AVERAGEA", "AVERAGEX", "COUNT", "COUNTA", "COUNTAX", "COUNTBLANK", "COUNTROWS", "COUNTX", "DISTINCTCOUNT", "DIVIDE", "GEOMEAN", "GEOMEANX", "MAX", "MAXA", "MAXX", "MEDIAN", "MEDIANX", "MIN", "MINA", "MINX", "PERCENTILE.EXC", "PERCENTILE.INC", "PERCENTILEX.EXC", "PERCENTILEX.INC", "PRODUCT", "PRODUCTX", "RANK.EQ", "RANKX", "STDEV.P", "STDEV.S", "STDEVX.P", "STDEVX.S", "VAR.P", "VAR.S", "VARX.P", "VARX.S", "XIRR", "XNPV", "DATE", "DATEDIFF", "DATEVALUE", "DAY", "EDATE", "EOMONTH", "HOUR", "MINUTE", "MONTH", "NOW", "SECOND", "TIME", "TIMEVALUE", "TODAY", "WEEKDAY", "WEEKNUM", "YEAR", "YEARFRAC", "CONTAINS", "CONTAINSROW", "CUSTOMDATA", "ERROR", "HASONEFILTER", "HASONEVALUE", "ISBLANK", "ISCROSSFILTERED", "ISEMPTY", "ISERROR", "ISEVEN", "ISFILTERED", "ISLOGICAL", "ISNONTEXT", "ISNUMBER", "ISODD", "ISSUBTOTAL", "ISTEXT", "USERNAME", "USERPRINCIPALNAME", "AND", "FALSE", "IF", "IFERROR", "NOT", "OR", "SWITCH", "TRUE", "ABS", "ACOS", "ACOSH", "ACOT", "ACOTH", "ASIN", "ASINH", "ATAN", "ATANH", "BETA.DIST", "BETA.INV", "CEILING", "CHISQ.DIST", "CHISQ.DIST.RT", "CHISQ.INV", "CHISQ.INV.RT", "COMBIN", "COMBINA", "CONFIDENCE.NORM", "CONFIDENCE.T", "COS", "COSH", "COT", "COTH", "CURRENCY", "DEGREES", "EVEN", "EXP", "EXPON.DIST", "FACT", "FLOOR", "GCD", "INT", "ISO.CEILING", "LCM", "LN", "LOG", "LOG10", "MOD", "MROUND", "ODD", "PERMUT", "PI", "POISSON.DIST", "POWER", "QUOTIENT", "RADIANS", "RAND", "RANDBETWEEN", "ROUND", "ROUNDDOWN", "ROUNDUP", "SIGN", "SIN", "SINH", "SQRT", "SQRTPI", "TAN", "TANH", "TRUNC", "BLANK", "CONCATENATE", "CONCATENATEX", "EXACT", "FIND", "FIXED", "FORMAT", "LEFT", "LEN", "LOWER", "MID", "REPLACE", "REPT", "RIGHT", "SEARCH", "SUBSTITUTE", "TRIM", "UNICHAR", "UNICODE", "UPPER", "VALUE"],
      tokenizer: {
        root: [{
          include: "@comments"
        }, {
          include: "@whitespace"
        }, {
          include: "@numbers"
        }, {
          include: "@strings"
        }, {
          include: "@complexIdentifiers"
        }, [/[;,.]/, "delimiter"], [/[({})]/, "@brackets"], [/[a-z_][a-zA-Z0-9_]*/, {
          cases: {
            "@keywords": "keyword",
            "@functions": "keyword",
            "@default": "identifier"
          }
        }], [/[<>=!%&+\-*/|~^]/, "operator"]],
        whitespace: [[/\s+/, "white"]],
        comments: [[/\/\/+.*/, "comment"], [/\/\*/, {
          token: "comment.quote",
          next: "@comment"
        }]],
        comment: [[/[^*/]+/, "comment"], [/\*\//, {
          token: "comment.quote",
          next: "@pop"
        }], [/./, "comment"]],
        numbers: [[/0[xX][0-9a-fA-F]*/, "number"], [/[$][+-]*\d*(\.\d*)?/, "number"], [/((\d+(\.\d*)?)|(\.\d+))([eE][\-+]?\d+)?/, "number"]],
        strings: [[/N"/, {
          token: "string",
          next: "@string"
        }], [/"/, {
          token: "string",
          next: "@string"
        }]],
        string: [[/[^"]+/, "string"], [/""/, "string"], [/"/, {
          token: "string",
          next: "@pop"
        }]],
        complexIdentifiers: [[/\[/, {
          token: "identifier.quote",
          next: "@bracketedIdentifier"
        }], [/'/, {
          token: "identifier.quote",
          next: "@quotedIdentifier"
        }]],
        bracketedIdentifier: [[/[^\]]+/, "identifier"], [/]]/, "identifier"], [/]/, {
          token: "identifier.quote",
          next: "@pop"
        }]],
        quotedIdentifier: [[/[^']+/, "identifier"], [/''/, "identifier"], [/'/, {
          token: "identifier.quote",
          next: "@pop"
        }]]
      }
    };
    return C(i);
  }();

  return moduleExports;
});