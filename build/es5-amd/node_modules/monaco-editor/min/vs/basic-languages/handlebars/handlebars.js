function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/handlebars/handlebars", ["require", "require"], function (require) {
  var moduleExports = function () {
    var h = Object.create;
    var m = Object.defineProperty;
    var b = Object.getOwnPropertyDescriptor;
    var u = Object.getOwnPropertyNames;
    var x = Object.getPrototypeOf,
        k = Object.prototype.hasOwnProperty;

    var l = function l(e) {
      return m(e, "__esModule", {
        value: !0
      });
    };

    var y = function (e) {
      return typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(e, {
        get: function get(t, n) {
          return (typeof require != "undefined" ? require : t)[n];
        }
      }) : e;
    }(function (e) {
      if (typeof require != "undefined") return require.apply(this, arguments);
      throw new Error('Dynamic require of "' + e + '" is not supported');
    });

    var T = function T(e, t) {
      return function () {
        return t || e((t = {
          exports: {}
        }).exports, t), t.exports;
      };
    },
        S = function S(e, t) {
      for (var n in t) {
        m(e, n, {
          get: t[n],
          enumerable: !0
        });
      }
    },
        i = function i(e, t, n, o) {
      if (t && babelHelpers.typeof(t) == "object" || typeof t == "function") {
        var _iterator = _createForOfIteratorHelper(u(t)),
            _step;

        try {
          var _loop = function _loop() {
            var r = _step.value;
            !k.call(e, r) && (n || r !== "default") && m(e, r, {
              get: function get() {
                return t[r];
              },
              enumerable: !(o = b(t, r)) || o.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    },
        s = function s(e, t) {
      return i(l(m(e != null ? h(x(e)) : {}, "default", !t && e && e.__esModule ? {
        get: function get() {
          return e.default;
        },
        enumerable: !0
      } : {
        value: e,
        enumerable: !0
      })), e);
    },
        E = function (e) {
      return function (t, n) {
        return e && e.get(t) || (n = i(l({}), t, 1), e && e.set(t, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var c = T(function (I, d) {
      var w = s(y("vs/editor/editor.api"));
      d.exports = w;
    });
    var f = {};
    S(f, {
      conf: function conf() {
        return g;
      },
      language: function language() {
        return $;
      }
    });
    var a = {};
    i(a, s(c()));
    var p = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"],
        g = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
      comments: {
        blockComment: ["{{!--", "--}}"]
      },
      brackets: [["<!--", "-->"], ["<", ">"], ["{{", "}}"], ["{", "}"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: "<",
        close: ">"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      onEnterRules: [{
        beforeText: new RegExp("<(?!(?:".concat(p.join("|"), "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$"), "i"),
        afterText: /^<\/(\w[\w\d]*)\s*>$/i,
        action: {
          indentAction: a.languages.IndentAction.IndentOutdent
        }
      }, {
        beforeText: new RegExp("<(?!(?:".concat(p.join("|"), "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$"), "i"),
        action: {
          indentAction: a.languages.IndentAction.Indent
        }
      }]
    },
        $ = {
      defaultToken: "",
      tokenPostfix: "",
      tokenizer: {
        root: [[/\{\{!--/, "comment.block.start.handlebars", "@commentBlock"], [/\{\{!/, "comment.start.handlebars", "@comment"], [/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.root"
        }], [/<!DOCTYPE/, "metatag.html", "@doctype"], [/<!--/, "comment.html", "@commentHtml"], [/(<)(\w+)(\/>)/, ["delimiter.html", "tag.html", "delimiter.html"]], [/(<)(script)/, ["delimiter.html", {
          token: "tag.html",
          next: "@script"
        }]], [/(<)(style)/, ["delimiter.html", {
          token: "tag.html",
          next: "@style"
        }]], [/(<)([:\w]+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/(<\/)(\w+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/</, "delimiter.html"], [/\{/, "delimiter.html"], [/[^<{]+/]],
        doctype: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.comment"
        }], [/[^>]+/, "metatag.content.html"], [/>/, "metatag.html", "@pop"]],
        comment: [[/\}\}/, "comment.end.handlebars", "@pop"], [/./, "comment.content.handlebars"]],
        commentBlock: [[/--\}\}/, "comment.block.end.handlebars", "@pop"], [/./, "comment.content.handlebars"]],
        commentHtml: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.comment"
        }], [/-->/, "comment.html", "@pop"], [/[^-]+/, "comment.content.html"], [/./, "comment.content.html"]],
        otherTag: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.otherTag"
        }], [/\/?>/, "delimiter.html", "@pop"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/]],
        script: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.script"
        }], [/type/, "attribute.name", "@scriptAfterType"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.text/javascript",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/(<\/)(script\s*)(>)/, ["delimiter.html", "tag.html", {
          token: "delimiter.html",
          next: "@pop"
        }]]],
        scriptAfterType: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.scriptAfterType"
        }], [/=/, "delimiter", "@scriptAfterTypeEquals"], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.text/javascript",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptAfterTypeEquals: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.scriptAfterTypeEquals"
        }], [/"([^"]*)"/, {
          token: "attribute.value",
          switchTo: "@scriptWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value",
          switchTo: "@scriptWithCustomType.$1"
        }], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.text/javascript",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptWithCustomType: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.scriptWithCustomType.$S2"
        }], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptEmbedded: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInEmbeddedState.scriptEmbedded.$S2",
          nextEmbedded: "@pop"
        }], [/<\/script/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }]],
        style: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.style"
        }], [/type/, "attribute.name", "@styleAfterType"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.text/css",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/(<\/)(style\s*)(>)/, ["delimiter.html", "tag.html", {
          token: "delimiter.html",
          next: "@pop"
        }]]],
        styleAfterType: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.styleAfterType"
        }], [/=/, "delimiter", "@styleAfterTypeEquals"], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.text/css",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleAfterTypeEquals: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.styleAfterTypeEquals"
        }], [/"([^"]*)"/, {
          token: "attribute.value",
          switchTo: "@styleWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value",
          switchTo: "@styleWithCustomType.$1"
        }], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.text/css",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleWithCustomType: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInSimpleState.styleWithCustomType.$S2"
        }], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleEmbedded: [[/\{\{/, {
          token: "@rematch",
          switchTo: "@handlebarsInEmbeddedState.styleEmbedded.$S2",
          nextEmbedded: "@pop"
        }], [/<\/style/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }]],
        handlebarsInSimpleState: [[/\{\{\{?/, "delimiter.handlebars"], [/\}\}\}?/, {
          token: "delimiter.handlebars",
          switchTo: "@$S2.$S3"
        }], {
          include: "handlebarsRoot"
        }],
        handlebarsInEmbeddedState: [[/\{\{\{?/, "delimiter.handlebars"], [/\}\}\}?/, {
          token: "delimiter.handlebars",
          switchTo: "@$S2.$S3",
          nextEmbedded: "$S3"
        }], {
          include: "handlebarsRoot"
        }],
        handlebarsRoot: [[/"[^"]*"/, "string.handlebars"], [/[#/][^\s}]+/, "keyword.helper.handlebars"], [/else\b/, "keyword.helper.handlebars"], [/[\s]+/], [/[^}]/, "variable.parameter.handlebars"]]
      }
    };
    return E(f);
  }();

  return moduleExports;
});