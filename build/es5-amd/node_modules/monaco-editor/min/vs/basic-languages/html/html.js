function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/html/html", ["require", "require"], function (require) {
  var moduleExports = function () {
    var u = Object.create;
    var o = Object.defineProperty;
    var b = Object.getOwnPropertyDescriptor;
    var x = Object.getOwnPropertyNames;
    var g = Object.getPrototypeOf,
        y = Object.prototype.hasOwnProperty;

    var d = function d(e) {
      return o(e, "__esModule", {
        value: !0
      });
    };

    var k = function (e) {
      return typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(e, {
        get: function get(t, n) {
          return (typeof require != "undefined" ? require : t)[n];
        }
      }) : e;
    }(function (e) {
      if (typeof require != "undefined") return require.apply(this, arguments);
      throw new Error('Dynamic require of "' + e + '" is not supported');
    });

    var E = function E(e, t) {
      return function () {
        return t || e((t = {
          exports: {}
        }).exports, t), t.exports;
      };
    },
        w = function w(e, t) {
      for (var n in t) {
        o(e, n, {
          get: t[n],
          enumerable: !0
        });
      }
    },
        a = function a(e, t, n, s) {
      if (t && babelHelpers.typeof(t) == "object" || typeof t == "function") {
        var _iterator = _createForOfIteratorHelper(x(t)),
            _step;

        try {
          var _loop = function _loop() {
            var r = _step.value;
            !y.call(e, r) && (n || r !== "default") && o(e, r, {
              get: function get() {
                return t[r];
              },
              enumerable: !(s = b(t, r)) || s.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    },
        m = function m(e, t) {
      return a(d(o(e != null ? u(g(e)) : {}, "default", !t && e && e.__esModule ? {
        get: function get() {
          return e.default;
        },
        enumerable: !0
      } : {
        value: e,
        enumerable: !0
      })), e);
    },
        T = function (e) {
      return function (t, n) {
        return e && e.get(t) || (n = a(d({}), t, 1), e && e.set(t, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var l = E(function (C, p) {
      var h = m(k("vs/editor/editor.api"));
      p.exports = h;
    });
    var $ = {};
    w($, {
      conf: function conf() {
        return f;
      },
      language: function language() {
        return v;
      }
    });
    var i = {};
    a(i, m(l()));
    var c = ["area", "base", "br", "col", "embed", "hr", "img", "input", "keygen", "link", "menuitem", "meta", "param", "source", "track", "wbr"],
        f = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\$\^\&\*\(\)\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\s]+)/g,
      comments: {
        blockComment: ["<!--", "-->"]
      },
      brackets: [["<!--", "-->"], ["<", ">"], ["{", "}"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }, {
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "<",
        close: ">"
      }],
      onEnterRules: [{
        beforeText: new RegExp("<(?!(?:".concat(c.join("|"), "))([_:\\w][_:\\w-.\\d]*)([^/>]*(?!/)>)[^<]*$"), "i"),
        afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>$/i,
        action: {
          indentAction: i.languages.IndentAction.IndentOutdent
        }
      }, {
        beforeText: new RegExp("<(?!(?:".concat(c.join("|"), "))(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$"), "i"),
        action: {
          indentAction: i.languages.IndentAction.Indent
        }
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*<!--\\s*#region\\b.*-->"),
          end: new RegExp("^\\s*<!--\\s*#endregion\\b.*-->")
        }
      }
    },
        v = {
      defaultToken: "",
      tokenPostfix: ".html",
      ignoreCase: !0,
      tokenizer: {
        root: [[/<!DOCTYPE/, "metatag", "@doctype"], [/<!--/, "comment", "@comment"], [/(<)((?:[\w\-]+:)?[\w\-]+)(\s*)(\/>)/, ["delimiter", "tag", "", "delimiter"]], [/(<)(script)/, ["delimiter", {
          token: "tag",
          next: "@script"
        }]], [/(<)(style)/, ["delimiter", {
          token: "tag",
          next: "@style"
        }]], [/(<)((?:[\w\-]+:)?[\w\-]+)/, ["delimiter", {
          token: "tag",
          next: "@otherTag"
        }]], [/(<\/)((?:[\w\-]+:)?[\w\-]+)/, ["delimiter", {
          token: "tag",
          next: "@otherTag"
        }]], [/</, "delimiter"], [/[^<]+/]],
        doctype: [[/[^>]+/, "metatag.content"], [/>/, "metatag", "@pop"]],
        comment: [[/-->/, "comment", "@pop"], [/[^-]+/, "comment.content"], [/./, "comment.content"]],
        otherTag: [[/\/?>/, "delimiter", "@pop"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/]],
        script: [[/type/, "attribute.name", "@scriptAfterType"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/>/, {
          token: "delimiter",
          next: "@scriptEmbedded",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/(<\/)(script\s*)(>)/, ["delimiter", "tag", {
          token: "delimiter",
          next: "@pop"
        }]]],
        scriptAfterType: [[/=/, "delimiter", "@scriptAfterTypeEquals"], [/>/, {
          token: "delimiter",
          next: "@scriptEmbedded",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptAfterTypeEquals: [[/"([^"]*)"/, {
          token: "attribute.value",
          switchTo: "@scriptWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value",
          switchTo: "@scriptWithCustomType.$1"
        }], [/>/, {
          token: "delimiter",
          next: "@scriptEmbedded",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptWithCustomType: [[/>/, {
          token: "delimiter",
          next: "@scriptEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptEmbedded: [[/<\/script/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }], [/[^<]+/, ""]],
        style: [[/type/, "attribute.name", "@styleAfterType"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/>/, {
          token: "delimiter",
          next: "@styleEmbedded",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/(<\/)(style\s*)(>)/, ["delimiter", "tag", {
          token: "delimiter",
          next: "@pop"
        }]]],
        styleAfterType: [[/=/, "delimiter", "@styleAfterTypeEquals"], [/>/, {
          token: "delimiter",
          next: "@styleEmbedded",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleAfterTypeEquals: [[/"([^"]*)"/, {
          token: "attribute.value",
          switchTo: "@styleWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value",
          switchTo: "@styleWithCustomType.$1"
        }], [/>/, {
          token: "delimiter",
          next: "@styleEmbedded",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleWithCustomType: [[/>/, {
          token: "delimiter",
          next: "@styleEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleEmbedded: [[/<\/style/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }], [/[^<]+/, ""]]
      }
    };
    return T($);
  }();

  return moduleExports;
});