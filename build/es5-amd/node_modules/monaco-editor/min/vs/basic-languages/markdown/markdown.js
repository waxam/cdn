function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/markdown/markdown", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var r = Object.getOwnPropertyDescriptor;
    var c = Object.getOwnPropertyNames;
    var i = Object.prototype.hasOwnProperty;

    var l = function l(t) {
      return s(t, "__esModule", {
        value: !0
      });
    };

    var m = function m(t, e) {
      for (var n in e) {
        s(t, n, {
          get: e[n],
          enumerable: !0
        });
      }
    },
        d = function d(t, e, n, a) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(c(e)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !i.call(t, o) && (n || o !== "default") && s(t, o, {
              get: function get() {
                return e[o];
              },
              enumerable: !(a = r(e, o)) || a.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var p = function (t) {
      return function (e, n) {
        return t && t.get(e) || (n = d(l({}), e, 1), t && t.set(e, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var k = {};
    m(k, {
      conf: function conf() {
        return g;
      },
      language: function language() {
        return b;
      }
    });
    var g = {
      comments: {
        blockComment: ["<!--", "-->"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "<",
        close: ">",
        notIn: ["string"]
      }],
      surroundingPairs: [{
        open: "(",
        close: ")"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "`",
        close: "`"
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*<!--\\s*#?region\\b.*-->"),
          end: new RegExp("^\\s*<!--\\s*#?endregion\\b.*-->")
        }
      }
    },
        b = {
      defaultToken: "",
      tokenPostfix: ".md",
      control: /[\\`*_\[\]{}()#+\-\.!]/,
      noncontrol: /[^\\`*_\[\]{}()#+\-\.!]/,
      escapes: /\\(?:@control)/,
      jsescapes: /\\(?:[btnfr\\"']|[0-7][0-7]?|[0-3][0-7]{2})/,
      empty: ["area", "base", "basefont", "br", "col", "frame", "hr", "img", "input", "isindex", "link", "meta", "param"],
      tokenizer: {
        root: [[/^\s*\|/, "@rematch", "@table_header"], [/^(\s{0,3})(#+)((?:[^\\#]|@escapes)+)((?:#+)?)/, ["white", "keyword", "keyword", "keyword"]], [/^\s*(=+|\-+)\s*$/, "keyword"], [/^\s*((\*[ ]?)+)\s*$/, "meta.separator"], [/^\s*>+/, "comment"], [/^\s*([\*\-+:]|\d+\.)\s/, "keyword"], [/^(\t|[ ]{4})[^ ].*$/, "string"], [/^\s*~~~\s*((?:\w|[\/\-#])+)?\s*$/, {
          token: "string",
          next: "@codeblock"
        }], [/^\s*```\s*((?:\w|[\/\-#])+).*$/, {
          token: "string",
          next: "@codeblockgh",
          nextEmbedded: "$1"
        }], [/^\s*```\s*$/, {
          token: "string",
          next: "@codeblock"
        }], {
          include: "@linecontent"
        }],
        table_header: [{
          include: "@table_common"
        }, [/[^\|]+/, "keyword.table.header"]],
        table_body: [{
          include: "@table_common"
        }, {
          include: "@linecontent"
        }],
        table_common: [[/\s*[\-:]+\s*/, {
          token: "keyword",
          switchTo: "table_body"
        }], [/^\s*\|/, "keyword.table.left"], [/^\s*[^\|]/, "@rematch", "@pop"], [/^\s*$/, "@rematch", "@pop"], [/\|/, {
          cases: {
            "@eos": "keyword.table.right",
            "@default": "keyword.table.middle"
          }
        }]],
        codeblock: [[/^\s*~~~\s*$/, {
          token: "string",
          next: "@pop"
        }], [/^\s*```\s*$/, {
          token: "string",
          next: "@pop"
        }], [/.*$/, "variable.source"]],
        codeblockgh: [[/```\s*$/, {
          token: "string",
          next: "@pop",
          nextEmbedded: "@pop"
        }], [/[^`]+/, "variable.source"]],
        linecontent: [[/&\w+;/, "string.escape"], [/@escapes/, "escape"], [/\b__([^\\_]|@escapes|_(?!_))+__\b/, "strong"], [/\*\*([^\\*]|@escapes|\*(?!\*))+\*\*/, "strong"], [/\b_[^_]+_\b/, "emphasis"], [/\*([^\\*]|@escapes)+\*/, "emphasis"], [/`([^\\`]|@escapes)+`/, "variable"], [/\{+[^}]+\}+/, "string.target"], [/(!?\[)((?:[^\]\\]|@escapes)*)(\]\([^\)]+\))/, ["string.link", "", "string.link"]], [/(!?\[)((?:[^\]\\]|@escapes)*)(\])/, "string.link"], {
          include: "html"
        }],
        html: [[/<(\w+)\/>/, "tag"], [/<(\w+)(\-|\w)*/, {
          cases: {
            "@empty": {
              token: "tag",
              next: "@tag.$1"
            },
            "@default": {
              token: "tag",
              next: "@tag.$1"
            }
          }
        }], [/<\/(\w+)(\-|\w)*\s*>/, {
          token: "tag"
        }], [/<!--/, "comment", "@comment"]],
        comment: [[/[^<\-]+/, "comment.content"], [/-->/, "comment", "@pop"], [/<!--/, "comment.content.invalid"], [/[<\-]/, "comment.content"]],
        tag: [[/[ \t\r\n]+/, "white"], [/(type)(\s*=\s*)(")([^"]+)(")/, ["attribute.name.html", "delimiter.html", "string.html", {
          token: "string.html",
          switchTo: "@tag.$S2.$4"
        }, "string.html"]], [/(type)(\s*=\s*)(')([^']+)(')/, ["attribute.name.html", "delimiter.html", "string.html", {
          token: "string.html",
          switchTo: "@tag.$S2.$4"
        }, "string.html"]], [/(\w+)(\s*=\s*)("[^"]*"|'[^']*')/, ["attribute.name.html", "delimiter.html", "string.html"]], [/\w+/, "attribute.name.html"], [/\/>/, "tag", "@pop"], [/>/, {
          cases: {
            "$S2==style": {
              token: "tag",
              switchTo: "embeddedStyle",
              nextEmbedded: "text/css"
            },
            "$S2==script": {
              cases: {
                $S3: {
                  token: "tag",
                  switchTo: "embeddedScript",
                  nextEmbedded: "$S3"
                },
                "@default": {
                  token: "tag",
                  switchTo: "embeddedScript",
                  nextEmbedded: "text/javascript"
                }
              }
            },
            "@default": {
              token: "tag",
              next: "@pop"
            }
          }
        }]],
        embeddedStyle: [[/[^<]+/, ""], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }], [/</, ""]],
        embeddedScript: [[/[^<]+/, ""], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }], [/</, ""]]
      }
    };
    return p(k);
  }();

  return moduleExports;
});