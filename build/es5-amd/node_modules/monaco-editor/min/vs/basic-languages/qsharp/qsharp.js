function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/qsharp/qsharp", ["require", "require"], function (require) {
  var moduleExports = function () {
    var a = Object.defineProperty;
    var i = Object.getOwnPropertyDescriptor;
    var r = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(t) {
      return a(t, "__esModule", {
        value: !0
      });
    };

    var u = function u(t, e) {
      for (var o in e) {
        a(t, o, {
          get: e[o],
          enumerable: !0
        });
      }
    },
        p = function p(t, e, o, s) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(r(e)),
            _step;

        try {
          var _loop = function _loop() {
            var n = _step.value;
            !l.call(t, n) && (o || n !== "default") && a(t, n, {
              get: function get() {
                return e[n];
              },
              enumerable: !(s = i(e, n)) || s.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var d = function (t) {
      return function (e, o) {
        return t && t.get(e) || (o = p(c({}), e, 1), t && t.set(e, o), o);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var w = {};
    u(w, {
      conf: function conf() {
        return g;
      },
      language: function language() {
        return m;
      }
    });
    var g = {
      comments: {
        lineComment: "//"
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"',
        notIn: ["string", "comment"]
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }]
    },
        m = {
      keywords: ["namespace", "open", "as", "operation", "function", "body", "adjoint", "newtype", "controlled", "if", "elif", "else", "repeat", "until", "fixup", "for", "in", "while", "return", "fail", "within", "apply", "Adjoint", "Controlled", "Adj", "Ctl", "is", "self", "auto", "distribute", "invert", "intrinsic", "let", "set", "w/", "new", "not", "and", "or", "use", "borrow", "using", "borrowing", "mutable"],
      typeKeywords: ["Unit", "Int", "BigInt", "Double", "Bool", "String", "Qubit", "Result", "Pauli", "Range"],
      invalidKeywords: ["abstract", "base", "bool", "break", "byte", "case", "catch", "char", "checked", "class", "const", "continue", "decimal", "default", "delegate", "do", "double", "enum", "event", "explicit", "extern", "finally", "fixed", "float", "foreach", "goto", "implicit", "int", "interface", "lock", "long", "null", "object", "operator", "out", "override", "params", "private", "protected", "public", "readonly", "ref", "sbyte", "sealed", "short", "sizeof", "stackalloc", "static", "string", "struct", "switch", "this", "throw", "try", "typeof", "unit", "ulong", "unchecked", "unsafe", "ushort", "virtual", "void", "volatile"],
      constants: ["true", "false", "PauliI", "PauliX", "PauliY", "PauliZ", "One", "Zero"],
      builtin: ["X", "Y", "Z", "H", "HY", "S", "T", "SWAP", "CNOT", "CCNOT", "MultiX", "R", "RFrac", "Rx", "Ry", "Rz", "R1", "R1Frac", "Exp", "ExpFrac", "Measure", "M", "MultiM", "Message", "Length", "Assert", "AssertProb", "AssertEqual"],
      operators: ["and=", "<-", "->", "*", "*=", "@", "!", "^", "^=", ":", "::", "..", "==", "...", "=", "=>", ">", ">=", "<", "<=", "-", "-=", "!=", "or=", "%", "%=", "|", "+", "+=", "?", "/", "/=", "&&&", "&&&=", "^^^", "^^^=", ">>>", ">>>=", "<<<", "<<<=", "|||", "|||=", "~~~", "_", "w/", "w/="],
      namespaceFollows: ["namespace", "open"],
      symbols: /[=><!~?:&|+\-*\/\^%@._]+/,
      escapes: /\\[\s\S]/,
      tokenizer: {
        root: [[/[a-zA-Z_$][\w$]*/, {
          cases: {
            "@namespaceFollows": {
              token: "keyword.$0",
              next: "@namespace"
            },
            "@typeKeywords": "type",
            "@keywords": "keyword",
            "@constants": "constant",
            "@builtin": "keyword",
            "@invalidKeywords": "invalid",
            "@default": "identifier"
          }
        }], {
          include: "@whitespace"
        }, [/[{}()\[\]]/, "@brackets"], [/@symbols/, {
          cases: {
            "@operators": "operator",
            "@default": ""
          }
        }], [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"], [/\d+/, "number"], [/[;,.]/, "delimiter"], [/"/, {
          token: "string.quote",
          bracket: "@open",
          next: "@string"
        }]],
        string: [[/[^\\"]+/, "string"], [/@escapes/, "string.escape"], [/"/, {
          token: "string.quote",
          bracket: "@close",
          next: "@pop"
        }]],
        namespace: [{
          include: "@whitespace"
        }, [/[A-Za-z]\w*/, "namespace"], [/[\.=]/, "delimiter"], ["", "", "@pop"]],
        whitespace: [[/[ \t\r\n]+/, "white"], [/(\/\/).*/, "comment"]]
      }
    };
    return d(w);
  }();

  return moduleExports;
});