function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/vb/vb", ["require", "require"], function (require) {
  var moduleExports = function () {
    var r = Object.defineProperty;
    var a = Object.getOwnPropertyDescriptor;
    var d = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var i = function i(n) {
      return r(n, "__esModule", {
        value: !0
      });
    };

    var c = function c(n, e) {
      for (var o in e) {
        r(n, o, {
          get: e[o],
          enumerable: !0
        });
      }
    },
        u = function u(n, e, o, s) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(d(e)),
            _step;

        try {
          var _loop = function _loop() {
            var t = _step.value;
            !l.call(n, t) && (o || t !== "default") && r(n, t, {
              get: function get() {
                return e[t];
              },
              enumerable: !(s = a(e, t)) || s.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return n;
    };

    var g = function (n) {
      return function (e, o) {
        return n && n.get(e) || (o = u(i({}), e, 1), n && n.set(e, o), o);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var y = {};
    c(y, {
      conf: function conf() {
        return p;
      },
      language: function language() {
        return k;
      }
    });
    var p = {
      comments: {
        lineComment: "'",
        blockComment: ["/*", "*/"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"], ["<", ">"], ["addhandler", "end addhandler"], ["class", "end class"], ["enum", "end enum"], ["event", "end event"], ["function", "end function"], ["get", "end get"], ["if", "end if"], ["interface", "end interface"], ["module", "end module"], ["namespace", "end namespace"], ["operator", "end operator"], ["property", "end property"], ["raiseevent", "end raiseevent"], ["removehandler", "end removehandler"], ["select", "end select"], ["set", "end set"], ["structure", "end structure"], ["sub", "end sub"], ["synclock", "end synclock"], ["try", "end try"], ["while", "end while"], ["with", "end with"], ["using", "end using"], ["do", "loop"], ["for", "next"]],
      autoClosingPairs: [{
        open: "{",
        close: "}",
        notIn: ["string", "comment"]
      }, {
        open: "[",
        close: "]",
        notIn: ["string", "comment"]
      }, {
        open: "(",
        close: ")",
        notIn: ["string", "comment"]
      }, {
        open: '"',
        close: '"',
        notIn: ["string", "comment"]
      }, {
        open: "<",
        close: ">",
        notIn: ["string", "comment"]
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*#Region\\b"),
          end: new RegExp("^\\s*#End Region\\b")
        }
      }
    },
        k = {
      defaultToken: "",
      tokenPostfix: ".vb",
      ignoreCase: !0,
      brackets: [{
        token: "delimiter.bracket",
        open: "{",
        close: "}"
      }, {
        token: "delimiter.array",
        open: "[",
        close: "]"
      }, {
        token: "delimiter.parenthesis",
        open: "(",
        close: ")"
      }, {
        token: "delimiter.angle",
        open: "<",
        close: ">"
      }, {
        token: "keyword.tag-addhandler",
        open: "addhandler",
        close: "end addhandler"
      }, {
        token: "keyword.tag-class",
        open: "class",
        close: "end class"
      }, {
        token: "keyword.tag-enum",
        open: "enum",
        close: "end enum"
      }, {
        token: "keyword.tag-event",
        open: "event",
        close: "end event"
      }, {
        token: "keyword.tag-function",
        open: "function",
        close: "end function"
      }, {
        token: "keyword.tag-get",
        open: "get",
        close: "end get"
      }, {
        token: "keyword.tag-if",
        open: "if",
        close: "end if"
      }, {
        token: "keyword.tag-interface",
        open: "interface",
        close: "end interface"
      }, {
        token: "keyword.tag-module",
        open: "module",
        close: "end module"
      }, {
        token: "keyword.tag-namespace",
        open: "namespace",
        close: "end namespace"
      }, {
        token: "keyword.tag-operator",
        open: "operator",
        close: "end operator"
      }, {
        token: "keyword.tag-property",
        open: "property",
        close: "end property"
      }, {
        token: "keyword.tag-raiseevent",
        open: "raiseevent",
        close: "end raiseevent"
      }, {
        token: "keyword.tag-removehandler",
        open: "removehandler",
        close: "end removehandler"
      }, {
        token: "keyword.tag-select",
        open: "select",
        close: "end select"
      }, {
        token: "keyword.tag-set",
        open: "set",
        close: "end set"
      }, {
        token: "keyword.tag-structure",
        open: "structure",
        close: "end structure"
      }, {
        token: "keyword.tag-sub",
        open: "sub",
        close: "end sub"
      }, {
        token: "keyword.tag-synclock",
        open: "synclock",
        close: "end synclock"
      }, {
        token: "keyword.tag-try",
        open: "try",
        close: "end try"
      }, {
        token: "keyword.tag-while",
        open: "while",
        close: "end while"
      }, {
        token: "keyword.tag-with",
        open: "with",
        close: "end with"
      }, {
        token: "keyword.tag-using",
        open: "using",
        close: "end using"
      }, {
        token: "keyword.tag-do",
        open: "do",
        close: "loop"
      }, {
        token: "keyword.tag-for",
        open: "for",
        close: "next"
      }],
      keywords: ["AddHandler", "AddressOf", "Alias", "And", "AndAlso", "As", "Async", "Boolean", "ByRef", "Byte", "ByVal", "Call", "Case", "Catch", "CBool", "CByte", "CChar", "CDate", "CDbl", "CDec", "Char", "CInt", "Class", "CLng", "CObj", "Const", "Continue", "CSByte", "CShort", "CSng", "CStr", "CType", "CUInt", "CULng", "CUShort", "Date", "Decimal", "Declare", "Default", "Delegate", "Dim", "DirectCast", "Do", "Double", "Each", "Else", "ElseIf", "End", "EndIf", "Enum", "Erase", "Error", "Event", "Exit", "False", "Finally", "For", "Friend", "Function", "Get", "GetType", "GetXMLNamespace", "Global", "GoSub", "GoTo", "Handles", "If", "Implements", "Imports", "In", "Inherits", "Integer", "Interface", "Is", "IsNot", "Let", "Lib", "Like", "Long", "Loop", "Me", "Mod", "Module", "MustInherit", "MustOverride", "MyBase", "MyClass", "NameOf", "Namespace", "Narrowing", "New", "Next", "Not", "Nothing", "NotInheritable", "NotOverridable", "Object", "Of", "On", "Operator", "Option", "Optional", "Or", "OrElse", "Out", "Overloads", "Overridable", "Overrides", "ParamArray", "Partial", "Private", "Property", "Protected", "Public", "RaiseEvent", "ReadOnly", "ReDim", "RemoveHandler", "Resume", "Return", "SByte", "Select", "Set", "Shadows", "Shared", "Short", "Single", "Static", "Step", "Stop", "String", "Structure", "Sub", "SyncLock", "Then", "Throw", "To", "True", "Try", "TryCast", "TypeOf", "UInteger", "ULong", "UShort", "Using", "Variant", "Wend", "When", "While", "Widening", "With", "WithEvents", "WriteOnly", "Xor"],
      tagwords: ["If", "Sub", "Select", "Try", "Class", "Enum", "Function", "Get", "Interface", "Module", "Namespace", "Operator", "Set", "Structure", "Using", "While", "With", "Do", "Loop", "For", "Next", "Property", "Continue", "AddHandler", "RemoveHandler", "Event", "RaiseEvent", "SyncLock"],
      symbols: /[=><!~?;\.,:&|+\-*\/\^%]+/,
      integersuffix: /U?[DI%L&S@]?/,
      floatsuffix: /[R#F!]?/,
      tokenizer: {
        root: [{
          include: "@whitespace"
        }, [/next(?!\w)/, {
          token: "keyword.tag-for"
        }], [/loop(?!\w)/, {
          token: "keyword.tag-do"
        }], [/end\s+(?!for|do)(addhandler|class|enum|event|function|get|if|interface|module|namespace|operator|property|raiseevent|removehandler|select|set|structure|sub|synclock|try|while|with|using)/, {
          token: "keyword.tag-$1"
        }], [/[a-zA-Z_]\w*/, {
          cases: {
            "@tagwords": {
              token: "keyword.tag-$0"
            },
            "@keywords": {
              token: "keyword.$0"
            },
            "@default": "identifier"
          }
        }], [/^\s*#\w+/, "keyword"], [/\d*\d+e([\-+]?\d+)?(@floatsuffix)/, "number.float"], [/\d*\.\d+(e[\-+]?\d+)?(@floatsuffix)/, "number.float"], [/&H[0-9a-f]+(@integersuffix)/, "number.hex"], [/&0[0-7]+(@integersuffix)/, "number.octal"], [/\d+(@integersuffix)/, "number"], [/#.*#/, "number"], [/[{}()\[\]]/, "@brackets"], [/@symbols/, "delimiter"], [/["\u201c\u201d]/, {
          token: "string.quote",
          next: "@string"
        }]],
        whitespace: [[/[ \t\r\n]+/, ""], [/(\'|REM(?!\w)).*$/, "comment"]],
        string: [[/[^"\u201c\u201d]+/, "string"], [/["\u201c\u201d]{2}/, "string.escape"], [/["\u201c\u201d]C?/, {
          token: "string.quote",
          next: "@pop"
        }]]
      }
    };
    return g(y);
  }();

  return moduleExports;
});