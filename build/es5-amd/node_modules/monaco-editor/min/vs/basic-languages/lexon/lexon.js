function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/lexon/lexon", ["require", "require"], function (require) {
  var moduleExports = function () {
    var n = Object.defineProperty;
    var s = Object.getOwnPropertyDescriptor;
    var d = Object.getOwnPropertyNames;
    var a = Object.prototype.hasOwnProperty;

    var l = function l(t) {
      return n(t, "__esModule", {
        value: !0
      });
    };

    var p = function p(t, e) {
      for (var o in e) {
        n(t, o, {
          get: e[o],
          enumerable: !0
        });
      }
    },
        c = function c(t, e, o, r) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(d(e)),
            _step;

        try {
          var _loop = function _loop() {
            var i = _step.value;
            !a.call(t, i) && (o || i !== "default") && n(t, i, {
              get: function get() {
                return e[i];
              },
              enumerable: !(r = s(e, i)) || r.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var m = function (t) {
      return function (e, o) {
        return t && t.get(e) || (o = c(l({}), e, 1), t && t.set(e, o), o);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var f = {};
    p(f, {
      conf: function conf() {
        return u;
      },
      language: function language() {
        return k;
      }
    });
    var u = {
      comments: {
        lineComment: "COMMENT"
      },
      brackets: [["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: ":",
        close: "."
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "`",
        close: "`"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }, {
        open: ":",
        close: "."
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*(::\\s*|COMMENT\\s+)#region"),
          end: new RegExp("^\\s*(::\\s*|COMMENT\\s+)#endregion")
        }
      }
    },
        k = {
      tokenPostfix: ".lexon",
      ignoreCase: !0,
      keywords: ["lexon", "lex", "clause", "terms", "contracts", "may", "pay", "pays", "appoints", "into", "to"],
      typeKeywords: ["amount", "person", "key", "time", "date", "asset", "text"],
      operators: ["less", "greater", "equal", "le", "gt", "or", "and", "add", "added", "subtract", "subtracted", "multiply", "multiplied", "times", "divide", "divided", "is", "be", "certified"],
      symbols: /[=><!~?:&|+\-*\/\^%]+/,
      tokenizer: {
        root: [[/^(\s*)(comment:?(?:\s.*|))$/, ["", "comment"]], [/"/, {
          token: "identifier.quote",
          bracket: "@open",
          next: "@quoted_identifier"
        }], ["LEX$", {
          token: "keyword",
          bracket: "@open",
          next: "@identifier_until_period"
        }], ["LEXON", {
          token: "keyword",
          bracket: "@open",
          next: "@semver"
        }], [":", {
          token: "delimiter",
          bracket: "@open",
          next: "@identifier_until_period"
        }], [/[a-z_$][\w$]*/, {
          cases: {
            "@operators": "operator",
            "@typeKeywords": "keyword.type",
            "@keywords": "keyword",
            "@default": "identifier"
          }
        }], {
          include: "@whitespace"
        }, [/[{}()\[\]]/, "@brackets"], [/[<>](?!@symbols)/, "@brackets"], [/@symbols/, "delimiter"], [/\d*\.\d*\.\d*/, "number.semver"], [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"], [/0[xX][0-9a-fA-F]+/, "number.hex"], [/\d+/, "number"], [/[;,.]/, "delimiter"]],
        quoted_identifier: [[/[^\\"]+/, "identifier"], [/"/, {
          token: "identifier.quote",
          bracket: "@close",
          next: "@pop"
        }]],
        space_identifier_until_period: [[":", "delimiter"], [" ", {
          token: "white",
          next: "@identifier_rest"
        }]],
        identifier_until_period: [{
          include: "@whitespace"
        }, [":", {
          token: "delimiter",
          next: "@identifier_rest"
        }], [/[^\\.]+/, "identifier"], [/\./, {
          token: "delimiter",
          bracket: "@close",
          next: "@pop"
        }]],
        identifier_rest: [[/[^\\.]+/, "identifier"], [/\./, {
          token: "delimiter",
          bracket: "@close",
          next: "@pop"
        }]],
        semver: [{
          include: "@whitespace"
        }, [":", "delimiter"], [/\d*\.\d*\.\d*/, {
          token: "number.semver",
          bracket: "@close",
          next: "@pop"
        }]],
        whitespace: [[/[ \t\r\n]+/, "white"]]
      }
    };
    return m(f);
  }();

  return moduleExports;
});