function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/azcli/azcli", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var i = Object.getOwnPropertyDescriptor;
    var r = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(t) {
      return s(t, "__esModule", {
        value: !0
      });
    };

    var k = function k(t, e) {
      for (var n in e) {
        s(t, n, {
          get: e[n],
          enumerable: !0
        });
      }
    },
        p = function p(t, e, n, a) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(r(e)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !l.call(t, o) && (n || o !== "default") && s(t, o, {
              get: function get() {
                return e[o];
              },
              enumerable: !(a = i(e, o)) || a.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var f = function (t) {
      return function (e, n) {
        return t && t.get(e) || (n = p(c({}), e, 1), t && t.set(e, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var m = {};
    k(m, {
      conf: function conf() {
        return g;
      },
      language: function language() {
        return d;
      }
    });
    var g = {
      comments: {
        lineComment: "#"
      }
    },
        d = {
      defaultToken: "keyword",
      ignoreCase: !0,
      tokenPostfix: ".azcli",
      str: /[^#\s]/,
      tokenizer: {
        root: [{
          include: "@comment"
        }, [/\s-+@str*\s*/, {
          cases: {
            "@eos": {
              token: "key.identifier",
              next: "@popall"
            },
            "@default": {
              token: "key.identifier",
              next: "@type"
            }
          }
        }], [/^-+@str*\s*/, {
          cases: {
            "@eos": {
              token: "key.identifier",
              next: "@popall"
            },
            "@default": {
              token: "key.identifier",
              next: "@type"
            }
          }
        }]],
        type: [{
          include: "@comment"
        }, [/-+@str*\s*/, {
          cases: {
            "@eos": {
              token: "key.identifier",
              next: "@popall"
            },
            "@default": "key.identifier"
          }
        }], [/@str+\s*/, {
          cases: {
            "@eos": {
              token: "string",
              next: "@popall"
            },
            "@default": "string"
          }
        }]],
        comment: [[/#.*$/, {
          cases: {
            "@eos": {
              token: "comment",
              next: "@popall"
            }
          }
        }]]
      }
    };
    return f(m);
  }();

  return moduleExports;
});