function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/bicep/bicep", ["require", "require"], function (require) {
  var moduleExports = function () {
    var r = Object.defineProperty;
    var s = Object.getOwnPropertyDescriptor;
    var c = Object.getOwnPropertyNames;
    var a = Object.prototype.hasOwnProperty;

    var g = function g(e) {
      return r(e, "__esModule", {
        value: !0
      });
    };

    var l = function l(e, n) {
      for (var t in n) {
        r(e, t, {
          get: n[t],
          enumerable: !0
        });
      }
    },
        m = function m(e, n, t, i) {
      if (n && babelHelpers.typeof(n) == "object" || typeof n == "function") {
        var _iterator = _createForOfIteratorHelper(c(n)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !a.call(e, o) && (t || o !== "default") && r(e, o, {
              get: function get() {
                return n[o];
              },
              enumerable: !(i = s(n, o)) || i.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    };

    var p = function (e) {
      return function (n, t) {
        return e && e.get(n) || (t = m(g({}), n, 1), e && e.set(n, t), t);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var L = {};
    l(L, {
      conf: function conf() {
        return w;
      },
      language: function language() {
        return y;
      }
    });

    var k = function k(e) {
      return "\\b".concat(e, "\\b");
    },
        x = "[_a-zA-Z]",
        u = "[_a-zA-Z0-9]",
        d = k("".concat(x).concat(u, "*")),
        b = ["targetScope", "resource", "module", "param", "var", "output", "for", "in", "if", "existing"],
        f = ["true", "false", "null"],
        C = "[ \\t\\r\\n]",
        $ = "[0-9]+",
        w = {
      comments: {
        lineComment: "//",
        blockComment: ["/*", "*/"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "'",
        close: "'"
      }, {
        open: "'''",
        close: "'''"
      }],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "'",
        close: "'",
        notIn: ["string", "comment"]
      }, {
        open: "'''",
        close: "'''",
        notIn: ["string", "comment"]
      }],
      autoCloseBefore: ":.,=}])' \n\t",
      indentationRules: {
        increaseIndentPattern: new RegExp("^((?!\\/\\/).)*(\\{[^}\"'`]*|\\([^)\"'`]*|\\[[^\\]\"'`]*)$"),
        decreaseIndentPattern: new RegExp("^((?!.*?\\/\\*).*\\*/)?\\s*[\\}\\]].*$")
      }
    },
        y = {
      defaultToken: "",
      tokenPostfix: ".bicep",
      brackets: [{
        open: "{",
        close: "}",
        token: "delimiter.curly"
      }, {
        open: "[",
        close: "]",
        token: "delimiter.square"
      }, {
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }],
      symbols: /[=><!~?:&|+\-*/^%]+/,
      keywords: b,
      namedLiterals: f,
      escapes: "\\\\(u{[0-9A-Fa-f]+}|n|r|t|\\\\|'|\\${)",
      tokenizer: {
        root: [{
          include: "@expression"
        }, {
          include: "@whitespace"
        }],
        stringVerbatim: [{
          regex: "(|'|'')[^']",
          action: {
            token: "string"
          }
        }, {
          regex: "'''",
          action: {
            token: "string.quote",
            next: "@pop"
          }
        }],
        stringLiteral: [{
          regex: "\\${",
          action: {
            token: "delimiter.bracket",
            next: "@bracketCounting"
          }
        }, {
          regex: "[^\\\\'$]+",
          action: {
            token: "string"
          }
        }, {
          regex: "@escapes",
          action: {
            token: "string.escape"
          }
        }, {
          regex: "\\\\.",
          action: {
            token: "string.escape.invalid"
          }
        }, {
          regex: "'",
          action: {
            token: "string",
            next: "@pop"
          }
        }],
        bracketCounting: [{
          regex: "{",
          action: {
            token: "delimiter.bracket",
            next: "@bracketCounting"
          }
        }, {
          regex: "}",
          action: {
            token: "delimiter.bracket",
            next: "@pop"
          }
        }, {
          include: "expression"
        }],
        comment: [{
          regex: "[^\\*]+",
          action: {
            token: "comment"
          }
        }, {
          regex: "\\*\\/",
          action: {
            token: "comment",
            next: "@pop"
          }
        }, {
          regex: "[\\/*]",
          action: {
            token: "comment"
          }
        }],
        whitespace: [{
          regex: C
        }, {
          regex: "\\/\\*",
          action: {
            token: "comment",
            next: "@comment"
          }
        }, {
          regex: "\\/\\/.*$",
          action: {
            token: "comment"
          }
        }],
        expression: [{
          regex: "'''",
          action: {
            token: "string.quote",
            next: "@stringVerbatim"
          }
        }, {
          regex: "'",
          action: {
            token: "string.quote",
            next: "@stringLiteral"
          }
        }, {
          regex: $,
          action: {
            token: "number"
          }
        }, {
          regex: d,
          action: {
            cases: {
              "@keywords": {
                token: "keyword"
              },
              "@namedLiterals": {
                token: "keyword"
              },
              "@default": {
                token: "identifier"
              }
            }
          }
        }]
      }
    };

    return p(L);
  }();

  return moduleExports;
});