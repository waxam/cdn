function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/r/r", ["require", "require"], function (require) {
  var moduleExports = function () {
    var a = Object.defineProperty;
    var s = Object.getOwnPropertyDescriptor;
    var i = Object.getOwnPropertyNames;
    var c = Object.prototype.hasOwnProperty;

    var l = function l(o) {
      return a(o, "__esModule", {
        value: !0
      });
    };

    var p = function p(o, e) {
      for (var r in e) {
        a(o, r, {
          get: e[r],
          enumerable: !0
        });
      }
    },
        m = function m(o, e, r, n) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(i(e)),
            _step;

        try {
          var _loop = function _loop() {
            var t = _step.value;
            !c.call(o, t) && (r || t !== "default") && a(o, t, {
              get: function get() {
                return e[t];
              },
              enumerable: !(n = s(e, t)) || n.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return o;
    };

    var d = function (o) {
      return function (e, r) {
        return o && o.get(e) || (r = m(l({}), e, 1), o && o.set(e, r), r);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var f = {};
    p(f, {
      conf: function conf() {
        return g;
      },
      language: function language() {
        return u;
      }
    });
    var g = {
      comments: {
        lineComment: "#"
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }]
    },
        u = {
      defaultToken: "",
      tokenPostfix: ".r",
      roxygen: ["@alias", "@aliases", "@assignee", "@author", "@backref", "@callGraph", "@callGraphDepth", "@callGraphPrimitives", "@concept", "@describeIn", "@description", "@details", "@docType", "@encoding", "@evalNamespace", "@evalRd", "@example", "@examples", "@export", "@exportClass", "@exportMethod", "@exportPattern", "@family", "@field", "@formals", "@format", "@import", "@importClassesFrom", "@importFrom", "@importMethodsFrom", "@include", "@inherit", "@inheritDotParams", "@inheritParams", "@inheritSection", "@keywords", "@md", "@method", "@name", "@noMd", "@noRd", "@note", "@param", "@rawNamespace", "@rawRd", "@rdname", "@references", "@return", "@S3method", "@section", "@seealso", "@setClass", "@slot", "@source", "@template", "@templateVar", "@title", "@TODO", "@usage", "@useDynLib"],
      constants: ["NULL", "FALSE", "TRUE", "NA", "Inf", "NaN", "NA_integer_", "NA_real_", "NA_complex_", "NA_character_", "T", "F", "LETTERS", "letters", "month.abb", "month.name", "pi", "R.version.string"],
      keywords: ["break", "next", "return", "if", "else", "for", "in", "repeat", "while", "array", "category", "character", "complex", "double", "function", "integer", "list", "logical", "matrix", "numeric", "vector", "data.frame", "factor", "library", "require", "attach", "detach", "source"],
      special: ["\\n", "\\r", "\\t", "\\b", "\\a", "\\f", "\\v", "\\'", '\\"', "\\\\"],
      brackets: [{
        open: "{",
        close: "}",
        token: "delimiter.curly"
      }, {
        open: "[",
        close: "]",
        token: "delimiter.bracket"
      }, {
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }],
      tokenizer: {
        root: [{
          include: "@numbers"
        }, {
          include: "@strings"
        }, [/[{}\[\]()]/, "@brackets"], {
          include: "@operators"
        }, [/#'$/, "comment.doc"], [/#'/, "comment.doc", "@roxygen"], [/(^#.*$)/, "comment"], [/\s+/, "white"], [/[,:;]/, "delimiter"], [/@[a-zA-Z]\w*/, "tag"], [/[a-zA-Z]\w*/, {
          cases: {
            "@keywords": "keyword",
            "@constants": "constant",
            "@default": "identifier"
          }
        }]],
        roxygen: [[/@\w+/, {
          cases: {
            "@roxygen": "tag",
            "@eos": {
              token: "comment.doc",
              next: "@pop"
            },
            "@default": "comment.doc"
          }
        }], [/\s+/, {
          cases: {
            "@eos": {
              token: "comment.doc",
              next: "@pop"
            },
            "@default": "comment.doc"
          }
        }], [/.*/, {
          token: "comment.doc",
          next: "@pop"
        }]],
        numbers: [[/0[xX][0-9a-fA-F]+/, "number.hex"], [/-?(\d*\.)?\d+([eE][+\-]?\d+)?/, "number"]],
        operators: [[/<{1,2}-/, "operator"], [/->{1,2}/, "operator"], [/%[^%\s]+%/, "operator"], [/\*\*/, "operator"], [/%%/, "operator"], [/&&/, "operator"], [/\|\|/, "operator"], [/<</, "operator"], [/>>/, "operator"], [/[-+=&|!<>^~*/:$]/, "operator"]],
        strings: [[/'/, "string.escape", "@stringBody"], [/"/, "string.escape", "@dblStringBody"]],
        stringBody: [[/\\./, {
          cases: {
            "@special": "string",
            "@default": "error-token"
          }
        }], [/'/, "string.escape", "@popall"], [/./, "string"]],
        dblStringBody: [[/\\./, {
          cases: {
            "@special": "string",
            "@default": "error-token"
          }
        }], [/"/, "string.escape", "@popall"], [/./, "string"]]
      }
    };
    return d(f);
  }();

  return moduleExports;
});