function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/python/python", ["require", "require"], function (require) {
  var moduleExports = function () {
    var d = Object.create;
    var o = Object.defineProperty;
    var m = Object.getOwnPropertyDescriptor;
    var _ = Object.getOwnPropertyNames;
    var u = Object.getPrototypeOf,
        f = Object.prototype.hasOwnProperty;

    var l = function l(e) {
      return o(e, "__esModule", {
        value: !0
      });
    };

    var b = function (e) {
      return typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(e, {
        get: function get(n, t) {
          return (typeof require != "undefined" ? require : n)[t];
        }
      }) : e;
    }(function (e) {
      if (typeof require != "undefined") return require.apply(this, arguments);
      throw new Error('Dynamic require of "' + e + '" is not supported');
    });

    var y = function y(e, n) {
      return function () {
        return n || e((n = {
          exports: {}
        }).exports, n), n.exports;
      };
    },
        h = function h(e, n) {
      for (var t in n) {
        o(e, t, {
          get: n[t],
          enumerable: !0
        });
      }
    },
        i = function i(e, n, t, a) {
      if (n && babelHelpers.typeof(n) == "object" || typeof n == "function") {
        var _iterator = _createForOfIteratorHelper(_(n)),
            _step;

        try {
          var _loop = function _loop() {
            var r = _step.value;
            !f.call(e, r) && (t || r !== "default") && o(e, r, {
              get: function get() {
                return n[r];
              },
              enumerable: !(a = m(n, r)) || a.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    },
        c = function c(e, n) {
      return i(l(o(e != null ? d(u(e)) : {}, "default", !n && e && e.__esModule ? {
        get: function get() {
          return e.default;
        },
        enumerable: !0
      } : {
        value: e,
        enumerable: !0
      })), e);
    },
        x = function (e) {
      return function (n, t) {
        return e && e.get(n) || (t = i(l({}), n, 1), e && e.set(n, t), t);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var g = y(function (v, p) {
      var w = c(b("vs/editor/editor.api"));
      p.exports = w;
    });
    var D = {};
    h(D, {
      conf: function conf() {
        return k;
      },
      language: function language() {
        return $;
      }
    });
    var s = {};
    i(s, c(g()));
    var k = {
      comments: {
        lineComment: "#",
        blockComment: ["'''", "'''"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"',
        notIn: ["string"]
      }, {
        open: "'",
        close: "'",
        notIn: ["string", "comment"]
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      onEnterRules: [{
        beforeText: new RegExp("^\\s*(?:def|class|for|if|elif|else|while|try|with|finally|except|async).*?:\\s*$"),
        action: {
          indentAction: s.languages.IndentAction.Indent
        }
      }],
      folding: {
        offSide: !0,
        markers: {
          start: new RegExp("^\\s*#region\\b"),
          end: new RegExp("^\\s*#endregion\\b")
        }
      }
    },
        $ = {
      defaultToken: "",
      tokenPostfix: ".python",
      keywords: ["False", "None", "True", "and", "as", "assert", "async", "await", "break", "class", "continue", "def", "del", "elif", "else", "except", "exec", "finally", "for", "from", "global", "if", "import", "in", "is", "lambda", "nonlocal", "not", "or", "pass", "print", "raise", "return", "try", "while", "with", "yield", "int", "float", "long", "complex", "hex", "abs", "all", "any", "apply", "basestring", "bin", "bool", "buffer", "bytearray", "callable", "chr", "classmethod", "cmp", "coerce", "compile", "complex", "delattr", "dict", "dir", "divmod", "enumerate", "eval", "execfile", "file", "filter", "format", "frozenset", "getattr", "globals", "hasattr", "hash", "help", "id", "input", "intern", "isinstance", "issubclass", "iter", "len", "locals", "list", "map", "max", "memoryview", "min", "next", "object", "oct", "open", "ord", "pow", "print", "property", "reversed", "range", "raw_input", "reduce", "reload", "repr", "reversed", "round", "self", "set", "setattr", "slice", "sorted", "staticmethod", "str", "sum", "super", "tuple", "type", "unichr", "unicode", "vars", "xrange", "zip", "__dict__", "__methods__", "__members__", "__class__", "__bases__", "__name__", "__mro__", "__subclasses__", "__init__", "__import__"],
      brackets: [{
        open: "{",
        close: "}",
        token: "delimiter.curly"
      }, {
        open: "[",
        close: "]",
        token: "delimiter.bracket"
      }, {
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }],
      tokenizer: {
        root: [{
          include: "@whitespace"
        }, {
          include: "@numbers"
        }, {
          include: "@strings"
        }, [/[,:;]/, "delimiter"], [/[{}\[\]()]/, "@brackets"], [/@[a-zA-Z_]\w*/, "tag"], [/[a-zA-Z_]\w*/, {
          cases: {
            "@keywords": "keyword",
            "@default": "identifier"
          }
        }]],
        whitespace: [[/\s+/, "white"], [/(^#.*$)/, "comment"], [/'''/, "string", "@endDocString"], [/"""/, "string", "@endDblDocString"]],
        endDocString: [[/[^']+/, "string"], [/\\'/, "string"], [/'''/, "string", "@popall"], [/'/, "string"]],
        endDblDocString: [[/[^"]+/, "string"], [/\\"/, "string"], [/"""/, "string", "@popall"], [/"/, "string"]],
        numbers: [[/-?0x([abcdef]|[ABCDEF]|\d)+[lL]?/, "number.hex"], [/-?(\d*\.)?\d+([eE][+\-]?\d+)?[jJ]?[lL]?/, "number"]],
        strings: [[/'$/, "string.escape", "@popall"], [/'/, "string.escape", "@stringBody"], [/"$/, "string.escape", "@popall"], [/"/, "string.escape", "@dblStringBody"]],
        stringBody: [[/[^\\']+$/, "string", "@popall"], [/[^\\']+/, "string"], [/\\./, "string"], [/'/, "string.escape", "@popall"], [/\\$/, "string"]],
        dblStringBody: [[/[^\\"]+$/, "string", "@popall"], [/[^\\"]+/, "string"], [/\\./, "string"], [/"/, "string.escape", "@popall"], [/\\$/, "string"]]
      }
    };
    return x(D);
  }();

  return moduleExports;
});