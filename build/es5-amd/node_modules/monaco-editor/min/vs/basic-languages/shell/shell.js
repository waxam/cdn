function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/shell/shell", ["require", "require"], function (require) {
  var moduleExports = function () {
    var a = Object.defineProperty;
    var s = Object.getOwnPropertyDescriptor;
    var n = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(r) {
      return a(r, "__esModule", {
        value: !0
      });
    };

    var d = function d(r, e) {
      for (var t in e) {
        a(r, t, {
          get: e[t],
          enumerable: !0
        });
      }
    },
        p = function p(r, e, t, o) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(n(e)),
            _step;

        try {
          var _loop = function _loop() {
            var i = _step.value;
            !l.call(r, i) && (t || i !== "default") && a(r, i, {
              get: function get() {
                return e[i];
              },
              enumerable: !(o = s(e, i)) || o.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return r;
    };

    var m = function (r) {
      return function (e, t) {
        return r && r.get(e) || (t = p(c({}), e, 1), r && r.set(e, t), t);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var h = {};
    d(h, {
      conf: function conf() {
        return u;
      },
      language: function language() {
        return g;
      }
    });
    var u = {
      comments: {
        lineComment: "#"
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }, {
        open: "`",
        close: "`"
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }, {
        open: "`",
        close: "`"
      }]
    },
        g = {
      defaultToken: "",
      ignoreCase: !0,
      tokenPostfix: ".shell",
      brackets: [{
        token: "delimiter.bracket",
        open: "{",
        close: "}"
      }, {
        token: "delimiter.parenthesis",
        open: "(",
        close: ")"
      }, {
        token: "delimiter.square",
        open: "[",
        close: "]"
      }],
      keywords: ["if", "then", "do", "else", "elif", "while", "until", "for", "in", "esac", "fi", "fin", "fil", "done", "exit", "set", "unset", "export", "function"],
      builtins: ["ab", "awk", "bash", "beep", "cat", "cc", "cd", "chown", "chmod", "chroot", "clear", "cp", "curl", "cut", "diff", "echo", "find", "gawk", "gcc", "get", "git", "grep", "hg", "kill", "killall", "ln", "ls", "make", "mkdir", "openssl", "mv", "nc", "node", "npm", "ping", "ps", "restart", "rm", "rmdir", "sed", "service", "sh", "shopt", "shred", "source", "sort", "sleep", "ssh", "start", "stop", "su", "sudo", "svn", "tee", "telnet", "top", "touch", "vi", "vim", "wall", "wc", "wget", "who", "write", "yes", "zsh"],
      startingWithDash: /\-+\w+/,
      identifiersWithDashes: /[a-zA-Z]\w+(?:@startingWithDash)+/,
      symbols: /[=><!~?&|+\-*\/\^;\.,]+/,
      tokenizer: {
        root: [[/@identifiersWithDashes/, ""], [/(\s)((?:@startingWithDash)+)/, ["white", "attribute.name"]], [/[a-zA-Z]\w*/, {
          cases: {
            "@keywords": "keyword",
            "@builtins": "type.identifier",
            "@default": ""
          }
        }], {
          include: "@whitespace"
        }, {
          include: "@strings"
        }, {
          include: "@parameters"
        }, {
          include: "@heredoc"
        }, [/[{}\[\]()]/, "@brackets"], [/@symbols/, "delimiter"], {
          include: "@numbers"
        }, [/[,;]/, "delimiter"]],
        whitespace: [[/\s+/, "white"], [/(^#!.*$)/, "metatag"], [/(^#.*$)/, "comment"]],
        numbers: [[/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"], [/0[xX][0-9a-fA-F_]*[0-9a-fA-F]/, "number.hex"], [/\d+/, "number"]],
        strings: [[/'/, "string", "@stringBody"], [/"/, "string", "@dblStringBody"]],
        stringBody: [[/'/, "string", "@popall"], [/./, "string"]],
        dblStringBody: [[/"/, "string", "@popall"], [/./, "string"]],
        heredoc: [[/(<<[-<]?)(\s*)(['"`]?)([\w\-]+)(['"`]?)/, ["constants", "white", "string.heredoc.delimiter", "string.heredoc", "string.heredoc.delimiter"]]],
        parameters: [[/\$\d+/, "variable.predefined"], [/\$\w+/, "variable"], [/\$[*@#?\-$!0_]/, "variable"], [/\$'/, "variable", "@parameterBodyQuote"], [/\$"/, "variable", "@parameterBodyDoubleQuote"], [/\$\(/, "variable", "@parameterBodyParen"], [/\$\{/, "variable", "@parameterBodyCurlyBrace"]],
        parameterBodyQuote: [[/[^#:%*@\-!_']+/, "variable"], [/[#:%*@\-!_]/, "delimiter"], [/[']/, "variable", "@pop"]],
        parameterBodyDoubleQuote: [[/[^#:%*@\-!_"]+/, "variable"], [/[#:%*@\-!_]/, "delimiter"], [/["]/, "variable", "@pop"]],
        parameterBodyParen: [[/[^#:%*@\-!_)]+/, "variable"], [/[#:%*@\-!_]/, "delimiter"], [/[)]/, "variable", "@pop"]],
        parameterBodyCurlyBrace: [[/[^#:%*@\-!_}]+/, "variable"], [/[#:%*@\-!_]/, "delimiter"], [/[}]/, "variable", "@pop"]]
      }
    };
    return m(h);
  }();

  return moduleExports;
});