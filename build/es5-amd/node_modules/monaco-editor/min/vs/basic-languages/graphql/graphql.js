function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/graphql/graphql", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var a = Object.getOwnPropertyDescriptor;
    var i = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(n) {
      return s(n, "__esModule", {
        value: !0
      });
    };

    var d = function d(n, e) {
      for (var o in e) {
        s(n, o, {
          get: e[o],
          enumerable: !0
        });
      }
    },
        p = function p(n, e, o, r) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(i(e)),
            _step;

        try {
          var _loop = function _loop() {
            var t = _step.value;
            !l.call(n, t) && (o || t !== "default") && s(n, t, {
              get: function get() {
                return e[t];
              },
              enumerable: !(r = a(e, t)) || r.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return n;
    };

    var g = function (n) {
      return function (e, o) {
        return n && n.get(e) || (o = p(c({}), e, 1), n && n.set(e, o), o);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var m = {};
    d(m, {
      conf: function conf() {
        return I;
      },
      language: function language() {
        return u;
      }
    });
    var I = {
      comments: {
        lineComment: "#"
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"""',
        close: '"""',
        notIn: ["string", "comment"]
      }, {
        open: '"',
        close: '"',
        notIn: ["string", "comment"]
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"""',
        close: '"""'
      }, {
        open: '"',
        close: '"'
      }],
      folding: {
        offSide: !0
      }
    },
        u = {
      defaultToken: "invalid",
      tokenPostfix: ".gql",
      keywords: ["null", "true", "false", "query", "mutation", "subscription", "extend", "schema", "directive", "scalar", "type", "interface", "union", "enum", "input", "implements", "fragment", "on"],
      typeKeywords: ["Int", "Float", "String", "Boolean", "ID"],
      directiveLocations: ["SCHEMA", "SCALAR", "OBJECT", "FIELD_DEFINITION", "ARGUMENT_DEFINITION", "INTERFACE", "UNION", "ENUM", "ENUM_VALUE", "INPUT_OBJECT", "INPUT_FIELD_DEFINITION", "QUERY", "MUTATION", "SUBSCRIPTION", "FIELD", "FRAGMENT_DEFINITION", "FRAGMENT_SPREAD", "INLINE_FRAGMENT", "VARIABLE_DEFINITION"],
      operators: ["=", "!", "?", ":", "&", "|"],
      symbols: /[=!?:&|]+/,
      escapes: /\\(?:["\\\/bfnrt]|u[0-9A-Fa-f]{4})/,
      tokenizer: {
        root: [[/[a-z_][\w$]*/, {
          cases: {
            "@keywords": "keyword",
            "@default": "key.identifier"
          }
        }], [/[$][\w$]*/, {
          cases: {
            "@keywords": "keyword",
            "@default": "argument.identifier"
          }
        }], [/[A-Z][\w\$]*/, {
          cases: {
            "@typeKeywords": "keyword",
            "@default": "type.identifier"
          }
        }], {
          include: "@whitespace"
        }, [/[{}()\[\]]/, "@brackets"], [/@symbols/, {
          cases: {
            "@operators": "operator",
            "@default": ""
          }
        }], [/@\s*[a-zA-Z_\$][\w\$]*/, {
          token: "annotation",
          log: "annotation token: $0"
        }], [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"], [/0[xX][0-9a-fA-F]+/, "number.hex"], [/\d+/, "number"], [/[;,.]/, "delimiter"], [/"""/, {
          token: "string",
          next: "@mlstring",
          nextEmbedded: "markdown"
        }], [/"([^"\\]|\\.)*$/, "string.invalid"], [/"/, {
          token: "string.quote",
          bracket: "@open",
          next: "@string"
        }]],
        mlstring: [[/[^"]+/, "string"], ['"""', {
          token: "string",
          next: "@pop",
          nextEmbedded: "@pop"
        }]],
        string: [[/[^\\"]+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/"/, {
          token: "string.quote",
          bracket: "@close",
          next: "@pop"
        }]],
        whitespace: [[/[ \t\r\n]+/, ""], [/#.*$/, "comment"]]
      }
    };
    return g(m);
  }();

  return moduleExports;
});