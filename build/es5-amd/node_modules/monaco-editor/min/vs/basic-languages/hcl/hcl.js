function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/hcl/hcl", ["require", "require"], function (require) {
  var moduleExports = function () {
    var r = Object.defineProperty;
    var a = Object.getOwnPropertyDescriptor;
    var i = Object.getOwnPropertyNames;
    var c = Object.prototype.hasOwnProperty;

    var l = function l(t) {
      return r(t, "__esModule", {
        value: !0
      });
    };

    var d = function d(t, e) {
      for (var s in e) {
        r(t, s, {
          get: e[s],
          enumerable: !0
        });
      }
    },
        m = function m(t, e, s, n) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(i(e)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !c.call(t, o) && (s || o !== "default") && r(t, o, {
              get: function get() {
                return e[o];
              },
              enumerable: !(n = a(e, o)) || n.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var p = function (t) {
      return function (e, s) {
        return t && t.get(e) || (s = m(l({}), e, 1), t && t.set(e, s), s);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var u = {};
    d(u, {
      conf: function conf() {
        return g;
      },
      language: function language() {
        return f;
      }
    });
    var g = {
      comments: {
        lineComment: "#",
        blockComment: ["/*", "*/"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"',
        notIn: ["string"]
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }]
    },
        f = {
      defaultToken: "",
      tokenPostfix: ".hcl",
      keywords: ["var", "local", "path", "for_each", "any", "string", "number", "bool", "true", "false", "null", "if ", "else ", "endif ", "for ", "in", "endfor"],
      operators: ["=", ">=", "<=", "==", "!=", "+", "-", "*", "/", "%", "&&", "||", "!", "<", ">", "?", "...", ":"],
      symbols: /[=><!~?:&|+\-*\/\^%]+/,
      escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      terraformFunctions: /(abs|ceil|floor|log|max|min|pow|signum|chomp|format|formatlist|indent|join|lower|regex|regexall|replace|split|strrev|substr|title|trimspace|upper|chunklist|coalesce|coalescelist|compact|concat|contains|distinct|element|flatten|index|keys|length|list|lookup|map|matchkeys|merge|range|reverse|setintersection|setproduct|setunion|slice|sort|transpose|values|zipmap|base64decode|base64encode|base64gzip|csvdecode|jsondecode|jsonencode|urlencode|yamldecode|yamlencode|abspath|dirname|pathexpand|basename|file|fileexists|fileset|filebase64|templatefile|formatdate|timeadd|timestamp|base64sha256|base64sha512|bcrypt|filebase64sha256|filebase64sha512|filemd5|filemd1|filesha256|filesha512|md5|rsadecrypt|sha1|sha256|sha512|uuid|uuidv5|cidrhost|cidrnetmask|cidrsubnet|tobool|tolist|tomap|tonumber|toset|tostring)/,
      terraformMainBlocks: /(module|data|terraform|resource|provider|variable|output|locals)/,
      tokenizer: {
        root: [[/^@terraformMainBlocks([ \t]*)([\w-]+|"[\w-]+"|)([ \t]*)([\w-]+|"[\w-]+"|)([ \t]*)(\{)/, ["type", "", "string", "", "string", "", "@brackets"]], [/(\w+[ \t]+)([ \t]*)([\w-]+|"[\w-]+"|)([ \t]*)([\w-]+|"[\w-]+"|)([ \t]*)(\{)/, ["identifier", "", "string", "", "string", "", "@brackets"]], [/(\w+[ \t]+)([ \t]*)([\w-]+|"[\w-]+"|)([ \t]*)([\w-]+|"[\w-]+"|)(=)(\{)/, ["identifier", "", "string", "", "operator", "", "@brackets"]], {
          include: "@terraform"
        }],
        terraform: [[/@terraformFunctions(\()/, ["type", "@brackets"]], [/[a-zA-Z_]\w*-*/, {
          cases: {
            "@keywords": {
              token: "keyword.$0"
            },
            "@default": "variable"
          }
        }], {
          include: "@whitespace"
        }, {
          include: "@heredoc"
        }, [/[{}()\[\]]/, "@brackets"], [/[<>](?!@symbols)/, "@brackets"], [/@symbols/, {
          cases: {
            "@operators": "operator",
            "@default": ""
          }
        }], [/\d*\d+[eE]([\-+]?\d+)?/, "number.float"], [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"], [/\d[\d']*/, "number"], [/\d/, "number"], [/[;,.]/, "delimiter"], [/"/, "string", "@string"], [/'/, "invalid"]],
        heredoc: [[/<<[-]*\s*["]?([\w\-]+)["]?/, {
          token: "string.heredoc.delimiter",
          next: "@heredocBody.$1"
        }]],
        heredocBody: [[/([\w\-]+)$/, {
          cases: {
            "$1==$S2": [{
              token: "string.heredoc.delimiter",
              next: "@popall"
            }],
            "@default": "string.heredoc"
          }
        }], [/./, "string.heredoc"]],
        whitespace: [[/[ \t\r\n]+/, ""], [/\/\*/, "comment", "@comment"], [/\/\/.*$/, "comment"], [/#.*$/, "comment"]],
        comment: [[/[^\/*]+/, "comment"], [/\*\//, "comment", "@pop"], [/[\/*]/, "comment"]],
        string: [[/\$\{/, {
          token: "delimiter",
          next: "@stringExpression"
        }], [/[^\\"\$]+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/"/, "string", "@popall"]],
        stringInsideExpression: [[/[^\\"]+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/"/, "string", "@pop"]],
        stringExpression: [[/\}/, {
          token: "delimiter",
          next: "@pop"
        }], [/"/, "string", "@stringInsideExpression"], {
          include: "@terraform"
        }]
      }
    };
    return p(u);
  }();

  return moduleExports;
});