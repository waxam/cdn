function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/tcl/tcl", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var r = Object.getOwnPropertyDescriptor;
    var a = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(t) {
      return s(t, "__esModule", {
        value: !0
      });
    };

    var p = function p(t, e) {
      for (var n in e) {
        s(t, n, {
          get: e[n],
          enumerable: !0
        });
      }
    },
        u = function u(t, e, n, i) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(a(e)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !l.call(t, o) && (n || o !== "default") && s(t, o, {
              get: function get() {
                return e[o];
              },
              enumerable: !(i = r(e, o)) || i.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var k = function (t) {
      return function (e, n) {
        return t && t.get(e) || (n = u(c({}), e, 1), t && t.set(e, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var b = {};
    p(b, {
      conf: function conf() {
        return d;
      },
      language: function language() {
        return g;
      }
    });
    var d = {
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }]
    },
        g = {
      tokenPostfix: ".tcl",
      specialFunctions: ["set", "unset", "rename", "variable", "proc", "coroutine", "foreach", "incr", "append", "lappend", "linsert", "lreplace"],
      mainFunctions: ["if", "then", "elseif", "else", "case", "switch", "while", "for", "break", "continue", "return", "package", "namespace", "catch", "exit", "eval", "expr", "uplevel", "upvar"],
      builtinFunctions: ["file", "info", "concat", "join", "lindex", "list", "llength", "lrange", "lsearch", "lsort", "split", "array", "parray", "binary", "format", "regexp", "regsub", "scan", "string", "subst", "dict", "cd", "clock", "exec", "glob", "pid", "pwd", "close", "eof", "fblocked", "fconfigure", "fcopy", "fileevent", "flush", "gets", "open", "puts", "read", "seek", "socket", "tell", "interp", "after", "auto_execok", "auto_load", "auto_mkindex", "auto_reset", "bgerror", "error", "global", "history", "load", "source", "time", "trace", "unknown", "unset", "update", "vwait", "winfo", "wm", "bind", "event", "pack", "place", "grid", "font", "bell", "clipboard", "destroy", "focus", "grab", "lower", "option", "raise", "selection", "send", "tk", "tkwait", "tk_bisque", "tk_focusNext", "tk_focusPrev", "tk_focusFollowsMouse", "tk_popup", "tk_setPalette"],
      symbols: /[=><!~?:&|+\-*\/\^%]+/,
      brackets: [{
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }, {
        open: "{",
        close: "}",
        token: "delimiter.curly"
      }, {
        open: "[",
        close: "]",
        token: "delimiter.square"
      }],
      escapes: /\\(?:[abfnrtv\\"'\[\]\{\};\$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      variables: /(?:\$+(?:(?:\:\:?)?[a-zA-Z_]\w*)+)/,
      tokenizer: {
        root: [[/[a-zA-Z_]\w*/, {
          cases: {
            "@specialFunctions": {
              token: "keyword.flow",
              next: "@specialFunc"
            },
            "@mainFunctions": "keyword",
            "@builtinFunctions": "variable",
            "@default": "operator.scss"
          }
        }], [/\s+\-+(?!\d|\.)\w*|{\*}/, "metatag"], {
          include: "@whitespace"
        }, [/[{}()\[\]]/, "@brackets"], [/@symbols/, "operator"], [/\$+(?:\:\:)?\{/, {
          token: "identifier",
          next: "@nestedVariable"
        }], [/@variables/, "type.identifier"], [/\.(?!\d|\.)[\w\-]*/, "operator.sql"], [/\d+(\.\d+)?/, "number"], [/\d+/, "number"], [/;/, "delimiter"], [/"/, {
          token: "string.quote",
          bracket: "@open",
          next: "@dstring"
        }], [/'/, {
          token: "string.quote",
          bracket: "@open",
          next: "@sstring"
        }]],
        dstring: [[/\[/, {
          token: "@brackets",
          next: "@nestedCall"
        }], [/\$+(?:\:\:)?\{/, {
          token: "identifier",
          next: "@nestedVariable"
        }], [/@variables/, "type.identifier"], [/[^\\$\[\]"]+/, "string"], [/@escapes/, "string.escape"], [/"/, {
          token: "string.quote",
          bracket: "@close",
          next: "@pop"
        }]],
        sstring: [[/\[/, {
          token: "@brackets",
          next: "@nestedCall"
        }], [/\$+(?:\:\:)?\{/, {
          token: "identifier",
          next: "@nestedVariable"
        }], [/@variables/, "type.identifier"], [/[^\\$\[\]']+/, "string"], [/@escapes/, "string.escape"], [/'/, {
          token: "string.quote",
          bracket: "@close",
          next: "@pop"
        }]],
        whitespace: [[/[ \t\r\n]+/, "white"], [/#.*\\$/, {
          token: "comment",
          next: "@newlineComment"
        }], [/#.*(?!\\)$/, "comment"]],
        newlineComment: [[/.*\\$/, "comment"], [/.*(?!\\)$/, {
          token: "comment",
          next: "@pop"
        }]],
        nestedVariable: [[/[^\{\}\$]+/, "type.identifier"], [/\}/, {
          token: "identifier",
          next: "@pop"
        }]],
        nestedCall: [[/\[/, {
          token: "@brackets",
          next: "@nestedCall"
        }], [/\]/, {
          token: "@brackets",
          next: "@pop"
        }], {
          include: "root"
        }],
        specialFunc: [[/"/, {
          token: "string",
          next: "@dstring"
        }], [/'/, {
          token: "string",
          next: "@sstring"
        }], [/\S+/, {
          token: "type",
          next: "@pop"
        }]]
      }
    };
    return k(b);
  }();

  return moduleExports;
});