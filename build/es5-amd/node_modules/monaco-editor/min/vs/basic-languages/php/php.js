function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/php/php", ["require", "require"], function (require) {
  var moduleExports = function () {
    var i = Object.defineProperty;
    var o = Object.getOwnPropertyDescriptor;
    var m = Object.getOwnPropertyNames;
    var a = Object.prototype.hasOwnProperty;

    var s = function s(t) {
      return i(t, "__esModule", {
        value: !0
      });
    };

    var h = function h(t, e) {
      for (var p in e) {
        i(t, p, {
          get: e[p],
          enumerable: !0
        });
      }
    },
        l = function l(t, e, p, r) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(m(e)),
            _step;

        try {
          var _loop = function _loop() {
            var n = _step.value;
            !a.call(t, n) && (p || n !== "default") && i(t, n, {
              get: function get() {
                return e[n];
              },
              enumerable: !(r = o(e, n)) || r.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var d = function (t) {
      return function (e, p) {
        return t && t.get(e) || (p = l(s({}), e, 1), t && t.set(e, p), p);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var b = {};
    h(b, {
      conf: function conf() {
        return c;
      },
      language: function language() {
        return u;
      }
    });
    var c = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
      comments: {
        lineComment: "//",
        blockComment: ["/*", "*/"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}",
        notIn: ["string"]
      }, {
        open: "[",
        close: "]",
        notIn: ["string"]
      }, {
        open: "(",
        close: ")",
        notIn: ["string"]
      }, {
        open: '"',
        close: '"',
        notIn: ["string"]
      }, {
        open: "'",
        close: "'",
        notIn: ["string", "comment"]
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*(#|//)region\\b"),
          end: new RegExp("^\\s*(#|//)endregion\\b")
        }
      }
    },
        u = {
      defaultToken: "",
      tokenPostfix: "",
      tokenizer: {
        root: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.root"
        }], [/<!DOCTYPE/, "metatag.html", "@doctype"], [/<!--/, "comment.html", "@comment"], [/(<)(\w+)(\/>)/, ["delimiter.html", "tag.html", "delimiter.html"]], [/(<)(script)/, ["delimiter.html", {
          token: "tag.html",
          next: "@script"
        }]], [/(<)(style)/, ["delimiter.html", {
          token: "tag.html",
          next: "@style"
        }]], [/(<)([:\w]+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/(<\/)(\w+)/, ["delimiter.html", {
          token: "tag.html",
          next: "@otherTag"
        }]], [/</, "delimiter.html"], [/[^<]+/]],
        doctype: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.comment"
        }], [/[^>]+/, "metatag.content.html"], [/>/, "metatag.html", "@pop"]],
        comment: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.comment"
        }], [/-->/, "comment.html", "@pop"], [/[^-]+/, "comment.content.html"], [/./, "comment.content.html"]],
        otherTag: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.otherTag"
        }], [/\/?>/, "delimiter.html", "@pop"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/]],
        script: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.script"
        }], [/type/, "attribute.name", "@scriptAfterType"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.text/javascript",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/(<\/)(script\s*)(>)/, ["delimiter.html", "tag.html", {
          token: "delimiter.html",
          next: "@pop"
        }]]],
        scriptAfterType: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.scriptAfterType"
        }], [/=/, "delimiter", "@scriptAfterTypeEquals"], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.text/javascript",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptAfterTypeEquals: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.scriptAfterTypeEquals"
        }], [/"([^"]*)"/, {
          token: "attribute.value",
          switchTo: "@scriptWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value",
          switchTo: "@scriptWithCustomType.$1"
        }], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.text/javascript",
          nextEmbedded: "text/javascript"
        }], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptWithCustomType: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.scriptWithCustomType.$S2"
        }], [/>/, {
          token: "delimiter.html",
          next: "@scriptEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/], [/<\/script\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        scriptEmbedded: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInEmbeddedState.scriptEmbedded.$S2",
          nextEmbedded: "@pop"
        }], [/<\/script/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }]],
        style: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.style"
        }], [/type/, "attribute.name", "@styleAfterType"], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.text/css",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/(<\/)(style\s*)(>)/, ["delimiter.html", "tag.html", {
          token: "delimiter.html",
          next: "@pop"
        }]]],
        styleAfterType: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.styleAfterType"
        }], [/=/, "delimiter", "@styleAfterTypeEquals"], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.text/css",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleAfterTypeEquals: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.styleAfterTypeEquals"
        }], [/"([^"]*)"/, {
          token: "attribute.value",
          switchTo: "@styleWithCustomType.$1"
        }], [/'([^']*)'/, {
          token: "attribute.value",
          switchTo: "@styleWithCustomType.$1"
        }], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.text/css",
          nextEmbedded: "text/css"
        }], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleWithCustomType: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInSimpleState.styleWithCustomType.$S2"
        }], [/>/, {
          token: "delimiter.html",
          next: "@styleEmbedded.$S2",
          nextEmbedded: "$S2"
        }], [/"([^"]*)"/, "attribute.value"], [/'([^']*)'/, "attribute.value"], [/[\w\-]+/, "attribute.name"], [/=/, "delimiter"], [/[ \t\r\n]+/], [/<\/style\s*>/, {
          token: "@rematch",
          next: "@pop"
        }]],
        styleEmbedded: [[/<\?((php)|=)?/, {
          token: "@rematch",
          switchTo: "@phpInEmbeddedState.styleEmbedded.$S2",
          nextEmbedded: "@pop"
        }], [/<\/style/, {
          token: "@rematch",
          next: "@pop",
          nextEmbedded: "@pop"
        }]],
        phpInSimpleState: [[/<\?((php)|=)?/, "metatag.php"], [/\?>/, {
          token: "metatag.php",
          switchTo: "@$S2.$S3"
        }], {
          include: "phpRoot"
        }],
        phpInEmbeddedState: [[/<\?((php)|=)?/, "metatag.php"], [/\?>/, {
          token: "metatag.php",
          switchTo: "@$S2.$S3",
          nextEmbedded: "$S3"
        }], {
          include: "phpRoot"
        }],
        phpRoot: [[/[a-zA-Z_]\w*/, {
          cases: {
            "@phpKeywords": {
              token: "keyword.php"
            },
            "@phpCompileTimeConstants": {
              token: "constant.php"
            },
            "@default": "identifier.php"
          }
        }], [/[$a-zA-Z_]\w*/, {
          cases: {
            "@phpPreDefinedVariables": {
              token: "variable.predefined.php"
            },
            "@default": "variable.php"
          }
        }], [/[{}]/, "delimiter.bracket.php"], [/[\[\]]/, "delimiter.array.php"], [/[()]/, "delimiter.parenthesis.php"], [/[ \t\r\n]+/], [/(#|\/\/)$/, "comment.php"], [/(#|\/\/)/, "comment.php", "@phpLineComment"], [/\/\*/, "comment.php", "@phpComment"], [/"/, "string.php", "@phpDoubleQuoteString"], [/'/, "string.php", "@phpSingleQuoteString"], [/[\+\-\*\%\&\|\^\~\!\=\<\>\/\?\;\:\.\,\@]/, "delimiter.php"], [/\d*\d+[eE]([\-+]?\d+)?/, "number.float.php"], [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float.php"], [/0[xX][0-9a-fA-F']*[0-9a-fA-F]/, "number.hex.php"], [/0[0-7']*[0-7]/, "number.octal.php"], [/0[bB][0-1']*[0-1]/, "number.binary.php"], [/\d[\d']*/, "number.php"], [/\d/, "number.php"]],
        phpComment: [[/\*\//, "comment.php", "@pop"], [/[^*]+/, "comment.php"], [/./, "comment.php"]],
        phpLineComment: [[/\?>/, {
          token: "@rematch",
          next: "@pop"
        }], [/.$/, "comment.php", "@pop"], [/[^?]+$/, "comment.php", "@pop"], [/[^?]+/, "comment.php"], [/./, "comment.php"]],
        phpDoubleQuoteString: [[/[^\\"]+/, "string.php"], [/@escapes/, "string.escape.php"], [/\\./, "string.escape.invalid.php"], [/"/, "string.php", "@pop"]],
        phpSingleQuoteString: [[/[^\\']+/, "string.php"], [/@escapes/, "string.escape.php"], [/\\./, "string.escape.invalid.php"], [/'/, "string.php", "@pop"]]
      },
      phpKeywords: ["abstract", "and", "array", "as", "break", "callable", "case", "catch", "cfunction", "class", "clone", "const", "continue", "declare", "default", "do", "else", "elseif", "enddeclare", "endfor", "endforeach", "endif", "endswitch", "endwhile", "extends", "false", "final", "for", "foreach", "function", "global", "goto", "if", "implements", "interface", "instanceof", "insteadof", "namespace", "new", "null", "object", "old_function", "or", "private", "protected", "public", "resource", "static", "switch", "throw", "trait", "try", "true", "use", "var", "while", "xor", "die", "echo", "empty", "exit", "eval", "include", "include_once", "isset", "list", "require", "require_once", "return", "print", "unset", "yield", "__construct"],
      phpCompileTimeConstants: ["__CLASS__", "__DIR__", "__FILE__", "__LINE__", "__NAMESPACE__", "__METHOD__", "__FUNCTION__", "__TRAIT__"],
      phpPreDefinedVariables: ["$GLOBALS", "$_SERVER", "$_GET", "$_POST", "$_FILES", "$_REQUEST", "$_SESSION", "$_ENV", "$_COOKIE", "$php_errormsg", "$HTTP_RAW_POST_DATA", "$http_response_header", "$argc", "$argv"],
      escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/
    };
    return d(b);
  }();

  return moduleExports;
});