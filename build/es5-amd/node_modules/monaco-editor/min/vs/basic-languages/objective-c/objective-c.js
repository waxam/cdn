function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/objective-c/objective-c", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var r = Object.getOwnPropertyDescriptor;
    var c = Object.getOwnPropertyNames;
    var a = Object.prototype.hasOwnProperty;

    var l = function l(o) {
      return s(o, "__esModule", {
        value: !0
      });
    };

    var p = function p(o, e) {
      for (var n in e) {
        s(o, n, {
          get: e[n],
          enumerable: !0
        });
      }
    },
        d = function d(o, e, n, i) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(c(e)),
            _step;

        try {
          var _loop = function _loop() {
            var t = _step.value;
            !a.call(o, t) && (n || t !== "default") && s(o, t, {
              get: function get() {
                return e[t];
              },
              enumerable: !(i = r(e, t)) || i.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return o;
    };

    var g = function (o) {
      return function (e, n) {
        return o && o.get(e) || (n = d(l({}), e, 1), o && o.set(e, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var f = {};
    p(f, {
      conf: function conf() {
        return m;
      },
      language: function language() {
        return u;
      }
    });
    var m = {
      comments: {
        lineComment: "//",
        blockComment: ["/*", "*/"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }]
    },
        u = {
      defaultToken: "",
      tokenPostfix: ".objective-c",
      keywords: ["#import", "#include", "#define", "#else", "#endif", "#if", "#ifdef", "#ifndef", "#ident", "#undef", "@class", "@defs", "@dynamic", "@encode", "@end", "@implementation", "@interface", "@package", "@private", "@protected", "@property", "@protocol", "@public", "@selector", "@synthesize", "__declspec", "assign", "auto", "BOOL", "break", "bycopy", "byref", "case", "char", "Class", "const", "copy", "continue", "default", "do", "double", "else", "enum", "extern", "FALSE", "false", "float", "for", "goto", "if", "in", "int", "id", "inout", "IMP", "long", "nil", "nonatomic", "NULL", "oneway", "out", "private", "public", "protected", "readwrite", "readonly", "register", "return", "SEL", "self", "short", "signed", "sizeof", "static", "struct", "super", "switch", "typedef", "TRUE", "true", "union", "unsigned", "volatile", "void", "while"],
      decpart: /\d(_?\d)*/,
      decimal: /0|@decpart/,
      tokenizer: {
        root: [{
          include: "@comments"
        }, {
          include: "@whitespace"
        }, {
          include: "@numbers"
        }, {
          include: "@strings"
        }, [/[,:;]/, "delimiter"], [/[{}\[\]()<>]/, "@brackets"], [/[a-zA-Z@#]\w*/, {
          cases: {
            "@keywords": "keyword",
            "@default": "identifier"
          }
        }], [/[<>=\\+\\-\\*\\/\\^\\|\\~,]|and\\b|or\\b|not\\b]/, "operator"]],
        whitespace: [[/\s+/, "white"]],
        comments: [["\\/\\*", "comment", "@comment"], ["\\/\\/+.*", "comment"]],
        comment: [["\\*\\/", "comment", "@pop"], [".", "comment"]],
        numbers: [[/0[xX][0-9a-fA-F]*(_?[0-9a-fA-F])*/, "number.hex"], [/@decimal((\.@decpart)?([eE][\-+]?@decpart)?)[fF]*/, {
          cases: {
            "(\\d)*": "number",
            $0: "number.float"
          }
        }]],
        strings: [[/'$/, "string.escape", "@popall"], [/'/, "string.escape", "@stringBody"], [/"$/, "string.escape", "@popall"], [/"/, "string.escape", "@dblStringBody"]],
        stringBody: [[/[^\\']+$/, "string", "@popall"], [/[^\\']+/, "string"], [/\\./, "string"], [/'/, "string.escape", "@popall"], [/\\$/, "string"]],
        dblStringBody: [[/[^\\"]+$/, "string", "@popall"], [/[^\\"]+/, "string"], [/\\./, "string"], [/"/, "string.escape", "@popall"], [/\\$/, "string"]]
      }
    };
    return g(f);
  }();

  return moduleExports;
});