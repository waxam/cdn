function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { babelHelpers.defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/freemarker2/freemarker2", ["require", "require"], function (require) {
  var moduleExports = function () {
    var B = Object.create;
    var s = Object.defineProperty;
    var C = Object.getOwnPropertyDescriptor;
    var D = Object.getOwnPropertyNames;
    var T = Object.getPrototypeOf,
        v = Object.prototype.hasOwnProperty;

    var m = function m(t) {
      return s(t, "__esModule", {
        value: !0
      });
    };

    var w = function (t) {
      return typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(t, {
        get: function get(n, i) {
          return (typeof require != "undefined" ? require : n)[i];
        }
      }) : t;
    }(function (t) {
      if (typeof require != "undefined") return require.apply(this, arguments);
      throw new Error('Dynamic require of "' + t + '" is not supported');
    });

    var h = function h(t, n) {
      return function () {
        return n || t((n = {
          exports: {}
        }).exports, n), n.exports;
      };
    },
        S = function S(t, n) {
      for (var i in n) {
        s(t, i, {
          get: n[i],
          enumerable: !0
        });
      }
    },
        d = function d(t, n, i, e) {
      if (n && babelHelpers.typeof(n) == "object" || typeof n == "function") {
        var _iterator = _createForOfIteratorHelper(D(n)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !v.call(t, o) && (i || o !== "default") && s(t, o, {
              get: function get() {
                return n[o];
              },
              enumerable: !(e = C(n, o)) || e.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    },
        x = function x(t, n) {
      return d(m(s(t != null ? B(T(t)) : {}, "default", !n && t && t.__esModule ? {
        get: function get() {
          return t.default;
        },
        enumerable: !0
      } : {
        value: t,
        enumerable: !0
      })), t);
    },
        I = function (t) {
      return function (n, i) {
        return t && t.get(n) || (i = d(m({}), n, 1), t && t.set(n, i), i);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var F = h(function (q, f) {
      var y = x(w("vs/editor/editor.api"));
      f.exports = y;
    });
    var M = {};
    S(M, {
      TagAngleInterpolationBracket: function TagAngleInterpolationBracket() {
        return L;
      },
      TagAngleInterpolationDollar: function TagAngleInterpolationDollar() {
        return R;
      },
      TagAutoInterpolationBracket: function TagAutoInterpolationBracket() {
        return j;
      },
      TagAutoInterpolationDollar: function TagAutoInterpolationDollar() {
        return Z;
      },
      TagBracketInterpolationBracket: function TagBracketInterpolationBracket() {
        return O;
      },
      TagBracketInterpolationDollar: function TagBracketInterpolationDollar() {
        return z;
      }
    });
    var _ = {};
    d(_, x(F()));
    var l = ["assign", "flush", "ftl", "return", "global", "import", "include", "break", "continue", "local", "nested", "nt", "setting", "stop", "t", "lt", "rt", "fallback"],
        k = ["attempt", "autoesc", "autoEsc", "compress", "comment", "escape", "noescape", "function", "if", "list", "items", "sep", "macro", "noparse", "noParse", "noautoesc", "noAutoEsc", "outputformat", "switch", "visit", "recurse"],
        r = {
      close: ">",
      id: "angle",
      open: "<"
    },
        u = {
      close: "\\]",
      id: "bracket",
      open: "\\["
    },
        P = {
      close: "[>\\]]",
      id: "auto",
      open: "[<\\[]"
    },
        g = {
      close: "\\}",
      id: "dollar",
      open1: "\\$",
      open2: "\\{"
    },
        A = {
      close: "\\]",
      id: "bracket",
      open1: "\\[",
      open2: "="
    };

    function p(t) {
      return {
        brackets: [["<", ">"], ["[", "]"], ["(", ")"], ["{", "}"]],
        comments: {
          blockComment: ["".concat(t.open, "--"), "--".concat(t.close)]
        },
        autoCloseBefore: "\n\r\t }]),.:;=",
        autoClosingPairs: [{
          open: "{",
          close: "}"
        }, {
          open: "[",
          close: "]"
        }, {
          open: "(",
          close: ")"
        }, {
          open: '"',
          close: '"',
          notIn: ["string"]
        }, {
          open: "'",
          close: "'",
          notIn: ["string"]
        }],
        surroundingPairs: [{
          open: '"',
          close: '"'
        }, {
          open: "'",
          close: "'"
        }, {
          open: "{",
          close: "}"
        }, {
          open: "[",
          close: "]"
        }, {
          open: "(",
          close: ")"
        }, {
          open: "<",
          close: ">"
        }],
        folding: {
          markers: {
            start: new RegExp("".concat(t.open, "#(?:").concat(k.join("|"), ")([^/").concat(t.close, "]*(?!/)").concat(t.close, ")[^").concat(t.open, "]*$")),
            end: new RegExp("".concat(t.open, "/#(?:").concat(k.join("|"), ")[\\r\\n\\t ]*>"))
          }
        },
        onEnterRules: [{
          beforeText: new RegExp("".concat(t.open, "#(?!(?:").concat(l.join("|"), "))([a-zA-Z_]+)([^/").concat(t.close, "]*(?!/)").concat(t.close, ")[^").concat(t.open, "]*$")),
          afterText: new RegExp("^".concat(t.open, "/#([a-zA-Z_]+)[\\r\\n\\t ]*").concat(t.close, "$")),
          action: {
            indentAction: _.languages.IndentAction.IndentOutdent
          }
        }, {
          beforeText: new RegExp("".concat(t.open, "#(?!(?:").concat(l.join("|"), "))([a-zA-Z_]+)([^/").concat(t.close, "]*(?!/)").concat(t.close, ")[^").concat(t.open, "]*$")),
          action: {
            indentAction: _.languages.IndentAction.Indent
          }
        }]
      };
    }

    function b() {
      return {
        brackets: [["<", ">"], ["[", "]"], ["(", ")"], ["{", "}"]],
        autoCloseBefore: "\n\r\t }]),.:;=",
        autoClosingPairs: [{
          open: "{",
          close: "}"
        }, {
          open: "[",
          close: "]"
        }, {
          open: "(",
          close: ")"
        }, {
          open: '"',
          close: '"',
          notIn: ["string"]
        }, {
          open: "'",
          close: "'",
          notIn: ["string"]
        }],
        surroundingPairs: [{
          open: '"',
          close: '"'
        }, {
          open: "'",
          close: "'"
        }, {
          open: "{",
          close: "}"
        }, {
          open: "[",
          close: "]"
        }, {
          open: "(",
          close: ")"
        }, {
          open: "<",
          close: ">"
        }],
        folding: {
          markers: {
            start: new RegExp("[<\\[]#(?:".concat(k.join("|"), ")([^/>\\]]*(?!/)[>\\]])[^<\\[]*$")),
            end: new RegExp("[<\\[]/#(?:".concat(k.join("|"), ")[\\r\\n\\t ]*>"))
          }
        },
        onEnterRules: [{
          beforeText: new RegExp("[<\\[]#(?!(?:".concat(l.join("|"), "))([a-zA-Z_]+)([^/>\\]]*(?!/)[>\\]])[^[<\\[]]*$")),
          afterText: new RegExp("^[<\\[]/#([a-zA-Z_]+)[\\r\\n\\t ]*[>\\]]$"),
          action: {
            indentAction: _.languages.IndentAction.IndentOutdent
          }
        }, {
          beforeText: new RegExp("[<\\[]#(?!(?:".concat(l.join("|"), "))([a-zA-Z_]+)([^/>\\]]*(?!/)[>\\]])[^[<\\[]]*$")),
          action: {
            indentAction: _.languages.IndentAction.Indent
          }
        }]
      };
    }

    function a(t, n) {
      var _objectSpread2, _cases, _objectSpread3, _tokenizer, _ref;

      var i = "_".concat(t.id, "_").concat(n.id),
          e = function e(c) {
        return c.replace(/__id__/g, i);
      },
          o = function o(c) {
        var E = c.source.replace(/__id__/g, i);
        return new RegExp(E, c.flags);
      };

      return _ref = {
        unicode: !0,
        includeLF: !1,
        start: e("default__id__"),
        ignoreCase: !1,
        defaultToken: "invalid",
        tokenPostfix: ".freemarker2",
        brackets: [{
          open: "{",
          close: "}",
          token: "delimiter.curly"
        }, {
          open: "[",
          close: "]",
          token: "delimiter.square"
        }, {
          open: "(",
          close: ")",
          token: "delimiter.parenthesis"
        }, {
          open: "<",
          close: ">",
          token: "delimiter.angle"
        }]
      }, babelHelpers.defineProperty(_ref, e("open__id__"), new RegExp(t.open)), babelHelpers.defineProperty(_ref, e("close__id__"), new RegExp(t.close)), babelHelpers.defineProperty(_ref, e("iOpen1__id__"), new RegExp(n.open1)), babelHelpers.defineProperty(_ref, e("iOpen2__id__"), new RegExp(n.open2)), babelHelpers.defineProperty(_ref, e("iClose__id__"), new RegExp(n.close)), babelHelpers.defineProperty(_ref, e("startTag__id__"), o(/(@open__id__)(#)/)), babelHelpers.defineProperty(_ref, e("endTag__id__"), o(/(@open__id__)(\/#)/)), babelHelpers.defineProperty(_ref, e("startOrEndTag__id__"), o(/(@open__id__)(\/?#)/)), babelHelpers.defineProperty(_ref, e("closeTag1__id__"), o(/((?:@blank)*)(@close__id__)/)), babelHelpers.defineProperty(_ref, e("closeTag2__id__"), o(/((?:@blank)*\/?)(@close__id__)/)), babelHelpers.defineProperty(_ref, "blank", /[ \t\n\r]/), babelHelpers.defineProperty(_ref, "keywords", ["false", "true", "in", "as", "using"]), babelHelpers.defineProperty(_ref, "directiveStartCloseTag1", /attempt|recover|sep|auto[eE]sc|no(?:autoe|AutoE)sc|compress|default|no[eE]scape|comment|no[pP]arse/), babelHelpers.defineProperty(_ref, "directiveStartCloseTag2", /else|break|continue|return|stop|flush|t|lt|rt|nt|nested|recurse|fallback|ftl/), babelHelpers.defineProperty(_ref, "directiveStartBlank", /if|else[iI]f|list|for[eE]ach|switch|case|assign|global|local|include|import|function|macro|transform|visit|stop|return|call|setting|output[fF]ormat|nested|recurse|escape|ftl|items/), babelHelpers.defineProperty(_ref, "directiveEndCloseTag1", /if|list|items|sep|recover|attempt|for[eE]ach|local|global|assign|function|macro|output[fF]ormat|auto[eE]sc|no(?:autoe|AutoE)sc|compress|transform|switch|escape|no[eE]scape/), babelHelpers.defineProperty(_ref, "escapedChar", /\\(?:[ntrfbgla\\'"\{=]|(?:x[0-9A-Fa-f]{1,4}))/), babelHelpers.defineProperty(_ref, "asciiDigit", /[0-9]/), babelHelpers.defineProperty(_ref, "integer", /[0-9]+/), babelHelpers.defineProperty(_ref, "nonEscapedIdStartChar", /[\$@-Z_a-z\u00AA\u00B5\u00BA\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u1FFF\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183-\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2-\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005-\u3006\u3031-\u3035\u303B-\u303C\u3040-\u318F\u31A0-\u31BA\u31F0-\u31FF\u3300-\u337F\u3400-\u4DB5\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA62B\uA640-\uA66E\uA67F-\uA697\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA78E\uA790-\uA793\uA7A0-\uA7AA\uA7F8-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8D0-\uA8D9\uA8F2-\uA8F7\uA8FB\uA900-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF-\uA9D9\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA50-\uAA59\uAA60-\uAA76\uAA7A\uAA80-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uABF0-\uABF9\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF10-\uFF19\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/), babelHelpers.defineProperty(_ref, "escapedIdChar", /\\[\-\.:#]/), babelHelpers.defineProperty(_ref, "idStartChar", /(?:@nonEscapedIdStartChar)|(?:@escapedIdChar)/), babelHelpers.defineProperty(_ref, "id", /(?:@idStartChar)(?:(?:@idStartChar)|(?:@asciiDigit))*/), babelHelpers.defineProperty(_ref, "specialHashKeys", /\*\*|\*|false|true|in|as|using/), babelHelpers.defineProperty(_ref, "namedSymbols", /&lt;=|&gt;=|\\lte|\\lt|&lt;|\\gte|\\gt|&gt;|&amp;&amp;|\\and|-&gt;|->|==|!=|\+=|-=|\*=|\/=|%=|\+\+|--|<=|&&|\|\||:|\.\.\.|\.\.\*|\.\.<|\.\.!|\?\?|=|<|\+|-|\*|\/|%|\||\.\.|\?|!|&|\.|,|;/), babelHelpers.defineProperty(_ref, "arrows", ["->", "-&gt;"]), babelHelpers.defineProperty(_ref, "delimiters", [";", ":", ",", "."]), babelHelpers.defineProperty(_ref, "stringOperators", ["lte", "lt", "gte", "gt"]), babelHelpers.defineProperty(_ref, "noParseTags", ["noparse", "noParse", "comment"]), babelHelpers.defineProperty(_ref, "tokenizer", (_tokenizer = {}, babelHelpers.defineProperty(_tokenizer, e("default__id__"), [{
        include: e("@directive_token__id__")
      }, {
        include: e("@interpolation_and_text_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("fmExpression__id__.directive"), [{
        include: e("@blank_and_expression_comment_token__id__")
      }, {
        include: e("@directive_end_token__id__")
      }, {
        include: e("@expression_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("fmExpression__id__.interpolation"), [{
        include: e("@blank_and_expression_comment_token__id__")
      }, {
        include: e("@expression_token__id__")
      }, {
        include: e("@greater_operators_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("inParen__id__.plain"), [{
        include: e("@blank_and_expression_comment_token__id__")
      }, {
        include: e("@directive_end_token__id__")
      }, {
        include: e("@expression_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("inParen__id__.gt"), [{
        include: e("@blank_and_expression_comment_token__id__")
      }, {
        include: e("@expression_token__id__")
      }, {
        include: e("@greater_operators_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("noSpaceExpression__id__"), [{
        include: e("@no_space_expression_end_token__id__")
      }, {
        include: e("@directive_end_token__id__")
      }, {
        include: e("@expression_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("unifiedCall__id__"), [{
        include: e("@unified_call_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("singleString__id__"), [{
        include: e("@string_single_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("doubleString__id__"), [{
        include: e("@string_double_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("rawSingleString__id__"), [{
        include: e("@string_single_raw_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("rawDoubleString__id__"), [{
        include: e("@string_double_raw_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("expressionComment__id__"), [{
        include: e("@expression_comment_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("noParse__id__"), [{
        include: e("@no_parse_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("terseComment__id__"), [{
        include: e("@terse_comment_token__id__")
      }]), babelHelpers.defineProperty(_tokenizer, e("directive_token__id__"), [[o(/(?:@startTag__id__)(@directiveStartCloseTag1)(?:@closeTag1__id__)/), t.id === "auto" ? {
        cases: {
          "$1==<": {
            token: "@rematch",
            switchTo: "@default_angle_".concat(n.id)
          },
          "$1==[": {
            token: "@rematch",
            switchTo: "@default_bracket_".concat(n.id)
          }
        }
      } : [{
        token: "@brackets.directive"
      }, {
        token: "delimiter.directive"
      }, {
        cases: {
          "@noParseTags": {
            token: "tag",
            next: e("@noParse__id__.$3")
          },
          "@default": {
            token: "tag"
          }
        }
      }, {
        token: "delimiter.directive"
      }, {
        token: "@brackets.directive"
      }]], [o(/(?:@startTag__id__)(@directiveStartCloseTag2)(?:@closeTag2__id__)/), t.id === "auto" ? {
        cases: {
          "$1==<": {
            token: "@rematch",
            switchTo: "@default_angle_".concat(n.id)
          },
          "$1==[": {
            token: "@rematch",
            switchTo: "@default_bracket_".concat(n.id)
          }
        }
      } : [{
        token: "@brackets.directive"
      }, {
        token: "delimiter.directive"
      }, {
        token: "tag"
      }, {
        token: "delimiter.directive"
      }, {
        token: "@brackets.directive"
      }]], [o(/(?:@startTag__id__)(@directiveStartBlank)(@blank)/), t.id === "auto" ? {
        cases: {
          "$1==<": {
            token: "@rematch",
            switchTo: "@default_angle_".concat(n.id)
          },
          "$1==[": {
            token: "@rematch",
            switchTo: "@default_bracket_".concat(n.id)
          }
        }
      } : [{
        token: "@brackets.directive"
      }, {
        token: "delimiter.directive"
      }, {
        token: "tag"
      }, {
        token: "",
        next: e("@fmExpression__id__.directive")
      }]], [o(/(?:@endTag__id__)(@directiveEndCloseTag1)(?:@closeTag1__id__)/), t.id === "auto" ? {
        cases: {
          "$1==<": {
            token: "@rematch",
            switchTo: "@default_angle_".concat(n.id)
          },
          "$1==[": {
            token: "@rematch",
            switchTo: "@default_bracket_".concat(n.id)
          }
        }
      } : [{
        token: "@brackets.directive"
      }, {
        token: "delimiter.directive"
      }, {
        token: "tag"
      }, {
        token: "delimiter.directive"
      }, {
        token: "@brackets.directive"
      }]], [o(/(@open__id__)(@)/), t.id === "auto" ? {
        cases: {
          "$1==<": {
            token: "@rematch",
            switchTo: "@default_angle_".concat(n.id)
          },
          "$1==[": {
            token: "@rematch",
            switchTo: "@default_bracket_".concat(n.id)
          }
        }
      } : [{
        token: "@brackets.directive"
      }, {
        token: "delimiter.directive",
        next: e("@unifiedCall__id__")
      }]], [o(/(@open__id__)(\/@)((?:(?:@id)(?:\.(?:@id))*)?)(?:@closeTag1__id__)/), [{
        token: "@brackets.directive"
      }, {
        token: "delimiter.directive"
      }, {
        token: "tag"
      }, {
        token: "delimiter.directive"
      }, {
        token: "@brackets.directive"
      }]], [o(/(@open__id__)#--/), t.id === "auto" ? {
        cases: {
          "$1==<": {
            token: "@rematch",
            switchTo: "@default_angle_".concat(n.id)
          },
          "$1==[": {
            token: "@rematch",
            switchTo: "@default_bracket_".concat(n.id)
          }
        }
      } : {
        token: "comment",
        next: e("@terseComment__id__")
      }], [o(/(?:@startOrEndTag__id__)([a-zA-Z_]+)/), t.id === "auto" ? {
        cases: {
          "$1==<": {
            token: "@rematch",
            switchTo: "@default_angle_".concat(n.id)
          },
          "$1==[": {
            token: "@rematch",
            switchTo: "@default_bracket_".concat(n.id)
          }
        }
      } : [{
        token: "@brackets.directive"
      }, {
        token: "delimiter.directive"
      }, {
        token: "tag.invalid",
        next: e("@fmExpression__id__.directive")
      }]]]), babelHelpers.defineProperty(_tokenizer, e("interpolation_and_text_token__id__"), [[o(/(@iOpen1__id__)(@iOpen2__id__)/), [{
        token: n.id === "bracket" ? "@brackets.interpolation" : "delimiter.interpolation"
      }, {
        token: n.id === "bracket" ? "delimiter.interpolation" : "@brackets.interpolation",
        next: e("@fmExpression__id__.interpolation")
      }]], [/[\$#<\[\{]|(?:@blank)+|[^\$<#\[\{\n\r\t ]+/, {
        token: "source"
      }]]), babelHelpers.defineProperty(_tokenizer, e("string_single_token__id__"), [[/[^'\\]/, {
        token: "string"
      }], [/@escapedChar/, {
        token: "string.escape"
      }], [/'/, {
        token: "string",
        next: "@pop"
      }]]), babelHelpers.defineProperty(_tokenizer, e("string_double_token__id__"), [[/[^"\\]/, {
        token: "string"
      }], [/@escapedChar/, {
        token: "string.escape"
      }], [/"/, {
        token: "string",
        next: "@pop"
      }]]), babelHelpers.defineProperty(_tokenizer, e("string_single_raw_token__id__"), [[/[^']+/, {
        token: "string.raw"
      }], [/'/, {
        token: "string.raw",
        next: "@pop"
      }]]), babelHelpers.defineProperty(_tokenizer, e("string_double_raw_token__id__"), [[/[^"]+/, {
        token: "string.raw"
      }], [/"/, {
        token: "string.raw",
        next: "@pop"
      }]]), babelHelpers.defineProperty(_tokenizer, e("expression_token__id__"), [[/(r?)(['"])/, {
        cases: {
          "r'": [{
            token: "keyword"
          }, {
            token: "string.raw",
            next: e("@rawSingleString__id__")
          }],
          'r"': [{
            token: "keyword"
          }, {
            token: "string.raw",
            next: e("@rawDoubleString__id__")
          }],
          "'": [{
            token: "source"
          }, {
            token: "string",
            next: e("@singleString__id__")
          }],
          '"': [{
            token: "source"
          }, {
            token: "string",
            next: e("@doubleString__id__")
          }]
        }
      }], [/(?:@integer)(?:\.(?:@integer))?/, {
        cases: {
          "(?:@integer)": {
            token: "number"
          },
          "@default": {
            token: "number.float"
          }
        }
      }], [/(\.)(@blank*)(@specialHashKeys)/, [{
        token: "delimiter"
      }, {
        token: ""
      }, {
        token: "identifier"
      }]], [/(?:@namedSymbols)/, {
        cases: {
          "@arrows": {
            token: "meta.arrow"
          },
          "@delimiters": {
            token: "delimiter"
          },
          "@default": {
            token: "operators"
          }
        }
      }], [/@id/, {
        cases: {
          "@keywords": {
            token: "keyword.$0"
          },
          "@stringOperators": {
            token: "operators"
          },
          "@default": {
            token: "identifier"
          }
        }
      }], [/[\[\]\(\)\{\}]/, {
        cases: {
          "\\[": {
            cases: {
              "$S2==gt": {
                token: "@brackets",
                next: e("@inParen__id__.gt")
              },
              "@default": {
                token: "@brackets",
                next: e("@inParen__id__.plain")
              }
            }
          },
          "\\]": {
            cases: _objectSpread(_objectSpread(_objectSpread({}, n.id === "bracket" ? {
              "$S2==interpolation": {
                token: "@brackets.interpolation",
                next: "@popall"
              }
            } : {}), t.id === "bracket" ? {
              "$S2==directive": {
                token: "@brackets.directive",
                next: "@popall"
              }
            } : {}), {}, (_objectSpread2 = {}, babelHelpers.defineProperty(_objectSpread2, e("$S1==inParen__id__"), {
              token: "@brackets",
              next: "@pop"
            }), babelHelpers.defineProperty(_objectSpread2, "@default", {
              token: "@brackets"
            }), _objectSpread2))
          },
          "\\(": {
            token: "@brackets",
            next: e("@inParen__id__.gt")
          },
          "\\)": {
            cases: (_cases = {}, babelHelpers.defineProperty(_cases, e("$S1==inParen__id__"), {
              token: "@brackets",
              next: "@pop"
            }), babelHelpers.defineProperty(_cases, "@default", {
              token: "@brackets"
            }), _cases)
          },
          "\\{": {
            cases: {
              "$S2==gt": {
                token: "@brackets",
                next: e("@inParen__id__.gt")
              },
              "@default": {
                token: "@brackets",
                next: e("@inParen__id__.plain")
              }
            }
          },
          "\\}": {
            cases: _objectSpread(_objectSpread({}, n.id === "bracket" ? {} : {
              "$S2==interpolation": {
                token: "@brackets.interpolation",
                next: "@popall"
              }
            }), {}, (_objectSpread3 = {}, babelHelpers.defineProperty(_objectSpread3, e("$S1==inParen__id__"), {
              token: "@brackets",
              next: "@pop"
            }), babelHelpers.defineProperty(_objectSpread3, "@default", {
              token: "@brackets"
            }), _objectSpread3))
          }
        }
      }], [/\$\{/, {
        token: "delimiter.invalid"
      }]]), babelHelpers.defineProperty(_tokenizer, e("blank_and_expression_comment_token__id__"), [[/(?:@blank)+/, {
        token: ""
      }], [/[<\[][#!]--/, {
        token: "comment",
        next: e("@expressionComment__id__")
      }]]), babelHelpers.defineProperty(_tokenizer, e("directive_end_token__id__"), [[/>/, t.id === "bracket" ? {
        token: "operators"
      } : {
        token: "@brackets.directive",
        next: "@popall"
      }], [o(/(\/)(@close__id__)/), [{
        token: "delimiter.directive"
      }, {
        token: "@brackets.directive",
        next: "@popall"
      }]]]), babelHelpers.defineProperty(_tokenizer, e("greater_operators_token__id__"), [[/>/, {
        token: "operators"
      }], [/>=/, {
        token: "operators"
      }]]), babelHelpers.defineProperty(_tokenizer, e("no_space_expression_end_token__id__"), [[/(?:@blank)+/, {
        token: "",
        switchTo: e("@fmExpression__id__.directive")
      }]]), babelHelpers.defineProperty(_tokenizer, e("unified_call_token__id__"), [[/(@id)((?:@blank)+)/, [{
        token: "tag"
      }, {
        token: "",
        next: e("@fmExpression__id__.directive")
      }]], [o(/(@id)(\/?)(@close__id__)/), [{
        token: "tag"
      }, {
        token: "delimiter.directive"
      }, {
        token: "@brackets.directive",
        next: "@popall"
      }]], [/./, {
        token: "@rematch",
        next: e("@noSpaceExpression__id__")
      }]]), babelHelpers.defineProperty(_tokenizer, e("no_parse_token__id__"), [[o(/(@open__id__)(\/#?)([a-zA-Z]+)((?:@blank)*)(@close__id__)/), {
        cases: {
          "$S2==$3": [{
            token: "@brackets.directive"
          }, {
            token: "delimiter.directive"
          }, {
            token: "tag"
          }, {
            token: ""
          }, {
            token: "@brackets.directive",
            next: "@popall"
          }],
          "$S2==comment": [{
            token: "comment"
          }, {
            token: "comment"
          }, {
            token: "comment"
          }, {
            token: "comment"
          }, {
            token: "comment"
          }],
          "@default": [{
            token: "source"
          }, {
            token: "source"
          }, {
            token: "source"
          }, {
            token: "source"
          }, {
            token: "source"
          }]
        }
      }], [/[^<\[\-]+|[<\[\-]/, {
        cases: {
          "$S2==comment": {
            token: "comment"
          },
          "@default": {
            token: "source"
          }
        }
      }]]), babelHelpers.defineProperty(_tokenizer, e("expression_comment_token__id__"), [[/--[>\]]/, {
        token: "comment",
        next: "@pop"
      }], [/[^\->\]]+|[>\]\-]/, {
        token: "comment"
      }]]), babelHelpers.defineProperty(_tokenizer, e("terse_comment_token__id__"), [[o(/--(?:@close__id__)/), {
        token: "comment",
        next: "@popall"
      }], [/[^<\[\-]+|[<\[\-]/, {
        token: "comment"
      }]]), _tokenizer)), _ref;
    }

    function $(t) {
      var n = a(r, t),
          i = a(u, t),
          e = a(P, t);
      return _objectSpread(_objectSpread(_objectSpread(_objectSpread({}, n), i), e), {}, {
        unicode: !0,
        includeLF: !1,
        start: "default_auto_".concat(t.id),
        ignoreCase: !1,
        defaultToken: "invalid",
        tokenPostfix: ".freemarker2",
        brackets: [{
          open: "{",
          close: "}",
          token: "delimiter.curly"
        }, {
          open: "[",
          close: "]",
          token: "delimiter.square"
        }, {
          open: "(",
          close: ")",
          token: "delimiter.parenthesis"
        }, {
          open: "<",
          close: ">",
          token: "delimiter.angle"
        }],
        tokenizer: _objectSpread(_objectSpread(_objectSpread({}, n.tokenizer), i.tokenizer), e.tokenizer)
      });
    }

    var R = {
      conf: p(r),
      language: a(r, g)
    },
        z = {
      conf: p(u),
      language: a(u, g)
    },
        L = {
      conf: p(r),
      language: a(r, A)
    },
        O = {
      conf: p(u),
      language: a(u, A)
    },
        Z = {
      conf: b(),
      language: $(g)
    },
        j = {
      conf: b(),
      language: $(A)
    };
    return I(M);
  }();

  return moduleExports;
});