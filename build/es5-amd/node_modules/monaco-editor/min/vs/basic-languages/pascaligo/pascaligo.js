function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/pascaligo/pascaligo", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var i = Object.getOwnPropertyDescriptor;
    var a = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(o) {
      return s(o, "__esModule", {
        value: !0
      });
    };

    var m = function m(o, e) {
      for (var n in e) {
        s(o, n, {
          get: e[n],
          enumerable: !0
        });
      }
    },
        p = function p(o, e, n, r) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(a(e)),
            _step;

        try {
          var _loop = function _loop() {
            var t = _step.value;
            !l.call(o, t) && (n || t !== "default") && s(o, t, {
              get: function get() {
                return e[t];
              },
              enumerable: !(r = i(e, t)) || r.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return o;
    };

    var d = function (o) {
      return function (e, n) {
        return o && o.get(e) || (n = p(c({}), e, 1), o && o.set(e, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var k = {};
    m(k, {
      conf: function conf() {
        return g;
      },
      language: function language() {
        return u;
      }
    });
    var g = {
      comments: {
        lineComment: "//",
        blockComment: ["(*", "*)"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"], ["<", ">"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "<",
        close: ">"
      }, {
        open: "'",
        close: "'"
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "<",
        close: ">"
      }, {
        open: "'",
        close: "'"
      }]
    },
        u = {
      defaultToken: "",
      tokenPostfix: ".pascaligo",
      ignoreCase: !0,
      brackets: [{
        open: "{",
        close: "}",
        token: "delimiter.curly"
      }, {
        open: "[",
        close: "]",
        token: "delimiter.square"
      }, {
        open: "(",
        close: ")",
        token: "delimiter.parenthesis"
      }, {
        open: "<",
        close: ">",
        token: "delimiter.angle"
      }],
      keywords: ["begin", "block", "case", "const", "else", "end", "fail", "for", "from", "function", "if", "is", "nil", "of", "remove", "return", "skip", "then", "type", "var", "while", "with", "option", "None", "transaction"],
      typeKeywords: ["bool", "int", "list", "map", "nat", "record", "string", "unit", "address", "map", "mtz", "xtz"],
      operators: ["=", ">", "<", "<=", ">=", "<>", ":", ":=", "and", "mod", "or", "+", "-", "*", "/", "@", "&", "^", "%"],
      symbols: /[=><:@\^&|+\-*\/\^%]+/,
      tokenizer: {
        root: [[/[a-zA-Z_][\w]*/, {
          cases: {
            "@keywords": {
              token: "keyword.$0"
            },
            "@default": "identifier"
          }
        }], {
          include: "@whitespace"
        }, [/[{}()\[\]]/, "@brackets"], [/[<>](?!@symbols)/, "@brackets"], [/@symbols/, {
          cases: {
            "@operators": "delimiter",
            "@default": ""
          }
        }], [/\d*\.\d+([eE][\-+]?\d+)?/, "number.float"], [/\$[0-9a-fA-F]{1,16}/, "number.hex"], [/\d+/, "number"], [/[;,.]/, "delimiter"], [/'([^'\\]|\\.)*$/, "string.invalid"], [/'/, "string", "@string"], [/'[^\\']'/, "string"], [/'/, "string.invalid"], [/\#\d+/, "string"]],
        comment: [[/[^\(\*]+/, "comment"], [/\*\)/, "comment", "@pop"], [/\(\*/, "comment"]],
        string: [[/[^\\']+/, "string"], [/\\./, "string.escape.invalid"], [/'/, {
          token: "string.quote",
          bracket: "@close",
          next: "@pop"
        }]],
        whitespace: [[/[ \t\r\n]+/, "white"], [/\(\*/, "comment", "@comment"], [/\/\/.*$/, "comment"]]
      }
    };
    return d(k);
  }();

  return moduleExports;
});