function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/xml/xml", ["require", "require"], function (require) {
  var moduleExports = function () {
    var u = Object.create;
    var i = Object.defineProperty;
    var g = Object.getOwnPropertyDescriptor;
    var p = Object.getOwnPropertyNames;
    var k = Object.getPrototypeOf,
        x = Object.prototype.hasOwnProperty;

    var l = function l(e) {
      return i(e, "__esModule", {
        value: !0
      });
    };

    var f = function (e) {
      return typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(e, {
        get: function get(t, n) {
          return (typeof require != "undefined" ? require : t)[n];
        }
      }) : e;
    }(function (e) {
      if (typeof require != "undefined") return require.apply(this, arguments);
      throw new Error('Dynamic require of "' + e + '" is not supported');
    });

    var w = function w(e, t) {
      return function () {
        return t || e((t = {
          exports: {}
        }).exports, t), t.exports;
      };
    },
        b = function b(e, t) {
      for (var n in t) {
        i(e, n, {
          get: t[n],
          enumerable: !0
        });
      }
    },
        m = function m(e, t, n, r) {
      if (t && babelHelpers.typeof(t) == "object" || typeof t == "function") {
        var _iterator = _createForOfIteratorHelper(p(t)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !x.call(e, o) && (n || o !== "default") && i(e, o, {
              get: function get() {
                return t[o];
              },
              enumerable: !(r = g(t, o)) || r.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    },
        c = function c(e, t) {
      return m(l(i(e != null ? u(k(e)) : {}, "default", !t && e && e.__esModule ? {
        get: function get() {
          return e.default;
        },
        enumerable: !0
      } : {
        value: e,
        enumerable: !0
      })), e);
    },
        q = function (e) {
      return function (t, n) {
        return e && e.get(t) || (n = m(l({}), t, 1), e && e.set(t, n), n);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var s = w(function (v, d) {
      var N = c(f("vs/editor/editor.api"));
      d.exports = N;
    });
    var I = {};
    b(I, {
      conf: function conf() {
        return A;
      },
      language: function language() {
        return C;
      }
    });
    var a = {};
    m(a, c(s()));
    var A = {
      comments: {
        blockComment: ["<!--", "-->"]
      },
      brackets: [["<", ">"]],
      autoClosingPairs: [{
        open: "<",
        close: ">"
      }, {
        open: "'",
        close: "'"
      }, {
        open: '"',
        close: '"'
      }],
      surroundingPairs: [{
        open: "<",
        close: ">"
      }, {
        open: "'",
        close: "'"
      }, {
        open: '"',
        close: '"'
      }],
      onEnterRules: [{
        beforeText: new RegExp("<([_:\\w][_:\\w-.\\d]*)([^/>]*(?!/)>)[^<]*$", "i"),
        afterText: /^<\/([_:\w][_:\w-.\d]*)\s*>$/i,
        action: {
          indentAction: a.languages.IndentAction.IndentOutdent
        }
      }, {
        beforeText: new RegExp("<(\\w[\\w\\d]*)([^/>]*(?!/)>)[^<]*$", "i"),
        action: {
          indentAction: a.languages.IndentAction.Indent
        }
      }]
    },
        C = {
      defaultToken: "",
      tokenPostfix: ".xml",
      ignoreCase: !0,
      qualifiedName: /(?:[\w\.\-]+:)?[\w\.\-]+/,
      tokenizer: {
        root: [[/[^<&]+/, ""], {
          include: "@whitespace"
        }, [/(<)(@qualifiedName)/, [{
          token: "delimiter"
        }, {
          token: "tag",
          next: "@tag"
        }]], [/(<\/)(@qualifiedName)(\s*)(>)/, [{
          token: "delimiter"
        }, {
          token: "tag"
        }, "", {
          token: "delimiter"
        }]], [/(<\?)(@qualifiedName)/, [{
          token: "delimiter"
        }, {
          token: "metatag",
          next: "@tag"
        }]], [/(<\!)(@qualifiedName)/, [{
          token: "delimiter"
        }, {
          token: "metatag",
          next: "@tag"
        }]], [/<\!\[CDATA\[/, {
          token: "delimiter.cdata",
          next: "@cdata"
        }], [/&\w+;/, "string.escape"]],
        cdata: [[/[^\]]+/, ""], [/\]\]>/, {
          token: "delimiter.cdata",
          next: "@pop"
        }], [/\]/, ""]],
        tag: [[/[ \t\r\n]+/, ""], [/(@qualifiedName)(\s*=\s*)("[^"]*"|'[^']*')/, ["attribute.name", "", "attribute.value"]], [/(@qualifiedName)(\s*=\s*)("[^">?\/]*|'[^'>?\/]*)(?=[\?\/]\>)/, ["attribute.name", "", "attribute.value"]], [/(@qualifiedName)(\s*=\s*)("[^">]*|'[^'>]*)/, ["attribute.name", "", "attribute.value"]], [/@qualifiedName/, "attribute.name"], [/\?>/, {
          token: "delimiter",
          next: "@pop"
        }], [/(\/)(>)/, [{
          token: "tag"
        }, {
          token: "delimiter",
          next: "@pop"
        }]], [/>/, {
          token: "delimiter",
          next: "@pop"
        }]],
        whitespace: [[/[ \t\r\n]+/, ""], [/<!--/, {
          token: "comment",
          next: "@comment"
        }]],
        comment: [[/[^<\-]+/, "comment.content"], [/-->/, {
          token: "comment",
          next: "@pop"
        }], [/<!--/, "comment.content.invalid"], [/[<\-]/, "comment.content"]]
      }
    };
    return q(I);
  }();

  return moduleExports;
});