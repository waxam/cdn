function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/sparql/sparql", ["require", "require"], function (require) {
  var moduleExports = function () {
    var o = Object.defineProperty;
    var i = Object.getOwnPropertyDescriptor;
    var a = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var d = function d(s) {
      return o(s, "__esModule", {
        value: !0
      });
    };

    var c = function c(s, e) {
      for (var t in e) {
        o(s, t, {
          get: e[t],
          enumerable: !0
        });
      }
    },
        g = function g(s, e, t, r) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(a(e)),
            _step;

        try {
          var _loop = function _loop() {
            var n = _step.value;
            !l.call(s, n) && (t || n !== "default") && o(s, n, {
              get: function get() {
                return e[n];
              },
              enumerable: !(r = i(e, n)) || r.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return s;
    };

    var u = function (s) {
      return function (e, t) {
        return s && s.get(e) || (t = g(d({}), e, 1), s && s.set(e, t), t);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var f = {};
    c(f, {
      conf: function conf() {
        return p;
      },
      language: function language() {
        return m;
      }
    });
    var p = {
      comments: {
        lineComment: "#"
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "'",
        close: "'",
        notIn: ["string"]
      }, {
        open: '"',
        close: '"',
        notIn: ["string"]
      }, {
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }]
    },
        m = {
      defaultToken: "",
      tokenPostfix: ".rq",
      brackets: [{
        token: "delimiter.curly",
        open: "{",
        close: "}"
      }, {
        token: "delimiter.parenthesis",
        open: "(",
        close: ")"
      }, {
        token: "delimiter.square",
        open: "[",
        close: "]"
      }, {
        token: "delimiter.angle",
        open: "<",
        close: ">"
      }],
      keywords: ["add", "as", "asc", "ask", "base", "by", "clear", "construct", "copy", "create", "data", "delete", "desc", "describe", "distinct", "drop", "false", "filter", "from", "graph", "group", "having", "in", "insert", "limit", "load", "minus", "move", "named", "not", "offset", "optional", "order", "prefix", "reduced", "select", "service", "silent", "to", "true", "undef", "union", "using", "values", "where", "with"],
      builtinFunctions: ["a", "abs", "avg", "bind", "bnode", "bound", "ceil", "coalesce", "concat", "contains", "count", "datatype", "day", "encode_for_uri", "exists", "floor", "group_concat", "hours", "if", "iri", "isblank", "isiri", "isliteral", "isnumeric", "isuri", "lang", "langmatches", "lcase", "max", "md5", "min", "minutes", "month", "now", "rand", "regex", "replace", "round", "sameterm", "sample", "seconds", "sha1", "sha256", "sha384", "sha512", "str", "strafter", "strbefore", "strdt", "strends", "strlang", "strlen", "strstarts", "struuid", "substr", "sum", "timezone", "tz", "ucase", "uri", "uuid", "year"],
      ignoreCase: !0,
      tokenizer: {
        root: [[/<[^\s\u00a0>]*>?/, "tag"], {
          include: "@strings"
        }, [/#.*/, "comment"], [/[{}()\[\]]/, "@brackets"], [/[;,.]/, "delimiter"], [/[_\w\d]+:(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])*/, "tag"], [/:(\.(?=[\w_\-\\%])|[:\w_-]|\\[-\\_~.!$&'()*+,;=/?#@%]|%[a-f\d][a-f\d])+/, "tag"], [/[$?]?[_\w\d]+/, {
          cases: {
            "@keywords": {
              token: "keyword"
            },
            "@builtinFunctions": {
              token: "predefined.sql"
            },
            "@default": "identifier"
          }
        }], [/\^\^/, "operator.sql"], [/\^[*+\-<>=&|^\/!?]*/, "operator.sql"], [/[*+\-<>=&|\/!?]/, "operator.sql"], [/@[a-z\d\-]*/, "metatag.html"], [/\s+/, "white"]],
        strings: [[/'([^'\\]|\\.)*$/, "string.invalid"], [/'$/, "string.sql", "@pop"], [/'/, "string.sql", "@stringBody"], [/"([^"\\]|\\.)*$/, "string.invalid"], [/"$/, "string.sql", "@pop"], [/"/, "string.sql", "@dblStringBody"]],
        stringBody: [[/[^\\']+/, "string.sql"], [/\\./, "string.escape"], [/'/, "string.sql", "@pop"]],
        dblStringBody: [[/[^\\"]+/, "string.sql"], [/\\./, "string.escape"], [/"/, "string.sql", "@pop"]]
      }
    };
    return u(f);
  }();

  return moduleExports;
});