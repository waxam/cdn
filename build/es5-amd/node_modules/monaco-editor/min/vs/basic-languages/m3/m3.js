function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/m3/m3", ["require", "require"], function (require) {
  var moduleExports = function () {
    var r = Object.defineProperty;
    var E = Object.getOwnPropertyDescriptor;
    var a = Object.getOwnPropertyNames;
    var i = Object.prototype.hasOwnProperty;

    var R = function R(o) {
      return r(o, "__esModule", {
        value: !0
      });
    };

    var c = function c(o, e) {
      for (var t in e) {
        r(o, t, {
          get: e[t],
          enumerable: !0
        });
      }
    },
        m = function m(o, e, t, n) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(a(e)),
            _step;

        try {
          var _loop = function _loop() {
            var s = _step.value;
            !i.call(o, s) && (t || s !== "default") && r(o, s, {
              get: function get() {
                return e[s];
              },
              enumerable: !(n = E(e, s)) || n.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return o;
    };

    var A = function (o) {
      return function (e, t) {
        return o && o.get(e) || (t = m(R({}), e, 1), o && o.set(e, t), t);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var T = {};
    c(T, {
      conf: function conf() {
        return p;
      },
      language: function language() {
        return N;
      }
    });
    var p = {
      comments: {
        blockComment: ["(*", "*)"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "[",
        close: "]"
      }, {
        open: "{",
        close: "}"
      }, {
        open: "(",
        close: ")"
      }, {
        open: "(*",
        close: "*)"
      }, {
        open: "<*",
        close: "*>"
      }, {
        open: "'",
        close: "'",
        notIn: ["string", "comment"]
      }, {
        open: '"',
        close: '"',
        notIn: ["string", "comment"]
      }]
    },
        N = {
      defaultToken: "",
      tokenPostfix: ".m3",
      brackets: [{
        token: "delimiter.curly",
        open: "{",
        close: "}"
      }, {
        token: "delimiter.parenthesis",
        open: "(",
        close: ")"
      }, {
        token: "delimiter.square",
        open: "[",
        close: "]"
      }],
      keywords: ["AND", "ANY", "ARRAY", "AS", "BEGIN", "BITS", "BRANDED", "BY", "CASE", "CONST", "DIV", "DO", "ELSE", "ELSIF", "END", "EVAL", "EXCEPT", "EXCEPTION", "EXIT", "EXPORTS", "FINALLY", "FOR", "FROM", "GENERIC", "IF", "IMPORT", "IN", "INTERFACE", "LOCK", "LOOP", "METHODS", "MOD", "MODULE", "NOT", "OBJECT", "OF", "OR", "OVERRIDES", "PROCEDURE", "RAISE", "RAISES", "READONLY", "RECORD", "REF", "REPEAT", "RETURN", "REVEAL", "SET", "THEN", "TO", "TRY", "TYPE", "TYPECASE", "UNSAFE", "UNTIL", "UNTRACED", "VALUE", "VAR", "WHILE", "WITH"],
      reservedConstNames: ["ABS", "ADR", "ADRSIZE", "BITSIZE", "BYTESIZE", "CEILING", "DEC", "DISPOSE", "FALSE", "FIRST", "FLOAT", "FLOOR", "INC", "ISTYPE", "LAST", "LOOPHOLE", "MAX", "MIN", "NARROW", "NEW", "NIL", "NUMBER", "ORD", "ROUND", "SUBARRAY", "TRUE", "TRUNC", "TYPECODE", "VAL"],
      reservedTypeNames: ["ADDRESS", "ANY", "BOOLEAN", "CARDINAL", "CHAR", "EXTENDED", "INTEGER", "LONGCARD", "LONGINT", "LONGREAL", "MUTEX", "NULL", "REAL", "REFANY", "ROOT", "TEXT"],
      operators: ["+", "-", "*", "/", "&", "^", "."],
      relations: ["=", "#", "<", "<=", ">", ">=", "<:", ":"],
      delimiters: ["|", "..", "=>", ",", ";", ":="],
      symbols: /[>=<#.,:;+\-*/&^]+/,
      escapes: /\\(?:[\\fnrt"']|[0-7]{3})/,
      tokenizer: {
        root: [[/_\w*/, "invalid"], [/[a-zA-Z][a-zA-Z0-9_]*/, {
          cases: {
            "@keywords": {
              token: "keyword.$0"
            },
            "@reservedConstNames": {
              token: "constant.reserved.$0"
            },
            "@reservedTypeNames": {
              token: "type.reserved.$0"
            },
            "@default": "identifier"
          }
        }], {
          include: "@whitespace"
        }, [/[{}()\[\]]/, "@brackets"], [/[0-9]+\.[0-9]+(?:[DdEeXx][\+\-]?[0-9]+)?/, "number.float"], [/[0-9]+(?:\_[0-9a-fA-F]+)?L?/, "number"], [/@symbols/, {
          cases: {
            "@operators": "operators",
            "@relations": "operators",
            "@delimiters": "delimiter",
            "@default": "invalid"
          }
        }], [/'[^\\']'/, "string.char"], [/(')(@escapes)(')/, ["string.char", "string.escape", "string.char"]], [/'/, "invalid"], [/"([^"\\]|\\.)*$/, "invalid"], [/"/, "string.text", "@text"]],
        text: [[/[^\\"]+/, "string.text"], [/@escapes/, "string.escape"], [/\\./, "invalid"], [/"/, "string.text", "@pop"]],
        comment: [[/\(\*/, "comment", "@push"], [/\*\)/, "comment", "@pop"], [/./, "comment"]],
        pragma: [[/<\*/, "keyword.pragma", "@push"], [/\*>/, "keyword.pragma", "@pop"], [/./, "keyword.pragma"]],
        whitespace: [[/[ \t\r\n]+/, "white"], [/\(\*/, "comment", "@comment"], [/<\*/, "keyword.pragma", "@pragma"]]
      }
    };
    return A(T);
  }();

  return moduleExports;
});