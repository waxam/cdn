function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/fsharp/fsharp", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var r = Object.getOwnPropertyDescriptor;
    var a = Object.getOwnPropertyNames;
    var l = Object.prototype.hasOwnProperty;

    var c = function c(n) {
      return s(n, "__esModule", {
        value: !0
      });
    };

    var g = function g(n, e) {
      for (var t in e) {
        s(n, t, {
          get: e[t],
          enumerable: !0
        });
      }
    },
        f = function f(n, e, t, i) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(a(e)),
            _step;

        try {
          var _loop = function _loop() {
            var o = _step.value;
            !l.call(n, o) && (t || o !== "default") && s(n, o, {
              get: function get() {
                return e[o];
              },
              enumerable: !(i = r(e, o)) || i.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return n;
    };

    var m = function (n) {
      return function (e, t) {
        return n && n.get(e) || (t = f(c({}), e, 1), n && n.set(e, t), t);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var p = {};
    g(p, {
      conf: function conf() {
        return u;
      },
      language: function language() {
        return d;
      }
    });
    var u = {
      comments: {
        lineComment: "//",
        blockComment: ["(*", "*)"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }],
      surroundingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"'
      }, {
        open: "'",
        close: "'"
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*//\\s*#region\\b|^\\s*\\(\\*\\s*#region(.*)\\*\\)"),
          end: new RegExp("^\\s*//\\s*#endregion\\b|^\\s*\\(\\*\\s*#endregion\\s*\\*\\)")
        }
      }
    },
        d = {
      defaultToken: "",
      tokenPostfix: ".fs",
      keywords: ["abstract", "and", "atomic", "as", "assert", "asr", "base", "begin", "break", "checked", "component", "const", "constraint", "constructor", "continue", "class", "default", "delegate", "do", "done", "downcast", "downto", "elif", "else", "end", "exception", "eager", "event", "external", "extern", "false", "finally", "for", "fun", "function", "fixed", "functor", "global", "if", "in", "include", "inherit", "inline", "interface", "internal", "land", "lor", "lsl", "lsr", "lxor", "lazy", "let", "match", "member", "mod", "module", "mutable", "namespace", "method", "mixin", "new", "not", "null", "of", "open", "or", "object", "override", "private", "parallel", "process", "protected", "pure", "public", "rec", "return", "static", "sealed", "struct", "sig", "then", "to", "true", "tailcall", "trait", "try", "type", "upcast", "use", "val", "void", "virtual", "volatile", "when", "while", "with", "yield"],
      symbols: /[=><!~?:&|+\-*\^%;\.,\/]+/,
      escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      integersuffix: /[uU]?[yslnLI]?/,
      floatsuffix: /[fFmM]?/,
      tokenizer: {
        root: [[/[a-zA-Z_]\w*/, {
          cases: {
            "@keywords": {
              token: "keyword.$0"
            },
            "@default": "identifier"
          }
        }], {
          include: "@whitespace"
        }, [/\[<.*>\]/, "annotation"], [/^#(if|else|endif)/, "keyword"], [/[{}()\[\]]/, "@brackets"], [/[<>](?!@symbols)/, "@brackets"], [/@symbols/, "delimiter"], [/\d*\d+[eE]([\-+]?\d+)?(@floatsuffix)/, "number.float"], [/\d*\.\d+([eE][\-+]?\d+)?(@floatsuffix)/, "number.float"], [/0x[0-9a-fA-F]+LF/, "number.float"], [/0x[0-9a-fA-F]+(@integersuffix)/, "number.hex"], [/0b[0-1]+(@integersuffix)/, "number.bin"], [/\d+(@integersuffix)/, "number"], [/[;,.]/, "delimiter"], [/"([^"\\]|\\.)*$/, "string.invalid"], [/"""/, "string", '@string."""'], [/"/, "string", '@string."'], [/\@"/, {
          token: "string.quote",
          next: "@litstring"
        }], [/'[^\\']'B?/, "string"], [/(')(@escapes)(')/, ["string", "string.escape", "string"]], [/'/, "string.invalid"]],
        whitespace: [[/[ \t\r\n]+/, ""], [/\(\*(?!\))/, "comment", "@comment"], [/\/\/.*$/, "comment"]],
        comment: [[/[^*(]+/, "comment"], [/\*\)/, "comment", "@pop"], [/\*/, "comment"], [/\(\*\)/, "comment"], [/\(/, "comment"]],
        string: [[/[^\\"]+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/("""|"B?)/, {
          cases: {
            "$#==$S2": {
              token: "string",
              next: "@pop"
            },
            "@default": "string"
          }
        }]],
        litstring: [[/[^"]+/, "string"], [/""/, "string.escape"], [/"/, {
          token: "string.quote",
          next: "@pop"
        }]]
      }
    };
    return m(p);
  }();

  return moduleExports;
});