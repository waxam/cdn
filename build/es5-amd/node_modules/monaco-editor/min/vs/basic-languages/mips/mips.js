function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/mips/mips", ["require", "require"], function (require) {
  var moduleExports = function () {
    var s = Object.defineProperty;
    var a = Object.getOwnPropertyDescriptor;
    var o = Object.getOwnPropertyNames;
    var g = Object.prototype.hasOwnProperty;

    var l = function l(t) {
      return s(t, "__esModule", {
        value: !0
      });
    };

    var d = function d(t, e) {
      for (var r in e) {
        s(t, r, {
          get: e[r],
          enumerable: !0
        });
      }
    },
        m = function m(t, e, r, i) {
      if (e && babelHelpers.typeof(e) == "object" || typeof e == "function") {
        var _iterator = _createForOfIteratorHelper(o(e)),
            _step;

        try {
          var _loop = function _loop() {
            var n = _step.value;
            !g.call(t, n) && (r || n !== "default") && s(t, n, {
              get: function get() {
                return e[n];
              },
              enumerable: !(i = a(e, n)) || i.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return t;
    };

    var p = function (t) {
      return function (e, r) {
        return t && t.get(e) || (r = m(l({}), e, 1), t && t.set(e, r), r);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var c = {};
    d(c, {
      conf: function conf() {
        return u;
      },
      language: function language() {
        return x;
      }
    });
    var u = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#%\^\&\*\(\)\=\$\-\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
      comments: {
        blockComment: ["###", "###"],
        lineComment: "#"
      },
      folding: {
        markers: {
          start: new RegExp("^\\s*#region\\b"),
          end: new RegExp("^\\s*#endregion\\b")
        }
      }
    },
        x = {
      defaultToken: "",
      ignoreCase: !1,
      tokenPostfix: ".mips",
      regEx: /\/(?!\/\/)(?:[^\/\\]|\\.)*\/[igm]*/,
      keywords: [".data", ".text", "syscall", "trap", "add", "addu", "addi", "addiu", "and", "andi", "div", "divu", "mult", "multu", "nor", "or", "ori", "sll", "slv", "sra", "srav", "srl", "srlv", "sub", "subu", "xor", "xori", "lhi", "lho", "lhi", "llo", "slt", "slti", "sltu", "sltiu", "beq", "bgtz", "blez", "bne", "j", "jal", "jalr", "jr", "lb", "lbu", "lh", "lhu", "lw", "li", "la", "sb", "sh", "sw", "mfhi", "mflo", "mthi", "mtlo", "move"],
      symbols: /[\.,\:]+/,
      escapes: /\\(?:[abfnrtv\\"'$]|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      tokenizer: {
        root: [[/\$[a-zA-Z_]\w*/, "variable.predefined"], [/[.a-zA-Z_]\w*/, {
          cases: {
            this: "variable.predefined",
            "@keywords": {
              token: "keyword.$0"
            },
            "@default": ""
          }
        }], [/[ \t\r\n]+/, ""], [/#.*$/, "comment"], ["///", {
          token: "regexp",
          next: "@hereregexp"
        }], [/^(\s*)(@regEx)/, ["", "regexp"]], [/(\,)(\s*)(@regEx)/, ["delimiter", "", "regexp"]], [/(\:)(\s*)(@regEx)/, ["delimiter", "", "regexp"]], [/@symbols/, "delimiter"], [/\d+[eE]([\-+]?\d+)?/, "number.float"], [/\d+\.\d+([eE][\-+]?\d+)?/, "number.float"], [/0[xX][0-9a-fA-F]+/, "number.hex"], [/0[0-7]+(?!\d)/, "number.octal"], [/\d+/, "number"], [/[,.]/, "delimiter"], [/"""/, "string", '@herestring."""'], [/'''/, "string", "@herestring.'''"], [/"/, {
          cases: {
            "@eos": "string",
            "@default": {
              token: "string",
              next: '@string."'
            }
          }
        }], [/'/, {
          cases: {
            "@eos": "string",
            "@default": {
              token: "string",
              next: "@string.'"
            }
          }
        }]],
        string: [[/[^"'\#\\]+/, "string"], [/@escapes/, "string.escape"], [/\./, "string.escape.invalid"], [/\./, "string.escape.invalid"], [/#{/, {
          cases: {
            '$S2=="': {
              token: "string",
              next: "root.interpolatedstring"
            },
            "@default": "string"
          }
        }], [/["']/, {
          cases: {
            "$#==$S2": {
              token: "string",
              next: "@pop"
            },
            "@default": "string"
          }
        }], [/#/, "string"]],
        herestring: [[/("""|''')/, {
          cases: {
            "$1==$S2": {
              token: "string",
              next: "@pop"
            },
            "@default": "string"
          }
        }], [/[^#\\'"]+/, "string"], [/['"]+/, "string"], [/@escapes/, "string.escape"], [/\./, "string.escape.invalid"], [/#{/, {
          token: "string.quote",
          next: "root.interpolatedstring"
        }], [/#/, "string"]],
        comment: [[/[^#]+/, "comment"], [/#/, "comment"]],
        hereregexp: [[/[^\\\/#]+/, "regexp"], [/\\./, "regexp"], [/#.*$/, "comment"], ["///[igm]*", {
          token: "regexp",
          next: "@pop"
        }], [/\//, "regexp"]]
      }
    };
    return p(c);
  }();

  return moduleExports;
});