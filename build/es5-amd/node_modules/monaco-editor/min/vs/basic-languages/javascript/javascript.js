function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

/*!-----------------------------------------------------------------------------
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Version: 0.32.1(29a273516805a852aa8edc5e05059f119b13eff0)
 * Released under the MIT license
 * https://github.com/microsoft/monaco-editor/blob/main/LICENSE.txt
 *-----------------------------------------------------------------------------*/
define("vs/basic-languages/javascript/javascript", ["require", "require"], function (require) {
  var moduleExports = function () {
    var x = Object.create;
    var s = Object.defineProperty;
    var u = Object.getOwnPropertyDescriptor;
    var f = Object.getOwnPropertyNames;
    var b = Object.getPrototypeOf,
        k = Object.prototype.hasOwnProperty;

    var g = function g(e) {
      return s(e, "__esModule", {
        value: !0
      });
    };

    var y = function (e) {
      return typeof require != "undefined" ? require : typeof Proxy != "undefined" ? new Proxy(e, {
        get: function get(t, o) {
          return (typeof require != "undefined" ? require : t)[o];
        }
      }) : e;
    }(function (e) {
      if (typeof require != "undefined") return require.apply(this, arguments);
      throw new Error('Dynamic require of "' + e + '" is not supported');
    });

    var w = function w(e, t) {
      return function () {
        return t || e((t = {
          exports: {}
        }).exports, t), t.exports;
      };
    },
        h = function h(e, t) {
      for (var o in t) {
        s(e, o, {
          get: t[o],
          enumerable: !0
        });
      }
    },
        a = function a(e, t, o, c) {
      if (t && babelHelpers.typeof(t) == "object" || typeof t == "function") {
        var _iterator = _createForOfIteratorHelper(f(t)),
            _step;

        try {
          var _loop = function _loop() {
            var i = _step.value;
            !k.call(e, i) && (o || i !== "default") && s(e, i, {
              get: function get() {
                return t[i];
              },
              enumerable: !(c = u(t, i)) || c.enumerable
            });
          };

          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            _loop();
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      return e;
    },
        p = function p(e, t) {
      return a(g(s(e != null ? x(b(e)) : {}, "default", !t && e && e.__esModule ? {
        get: function get() {
          return e.default;
        },
        enumerable: !0
      } : {
        value: e,
        enumerable: !0
      })), e);
    },
        v = function (e) {
      return function (t, o) {
        return e && e.get(t) || (o = a(g({}), t, 1), e && e.set(t, o), o);
      };
    }(typeof WeakMap != "undefined" ? new WeakMap() : 0);

    var d = w(function (C, l) {
      var A = p(y("vs/editor/editor.api"));
      l.exports = A;
    });
    var _ = {};
    h(_, {
      conf: function conf() {
        return $;
      },
      language: function language() {
        return T;
      }
    });
    var r = {};
    a(r, p(d()));
    var m = {
      wordPattern: /(-?\d*\.\d\w*)|([^\`\~\!\@\#\%\^\&\*\(\)\-\=\+\[\{\]\}\\\|\;\:\'\"\,\.\<\>\/\?\s]+)/g,
      comments: {
        lineComment: "//",
        blockComment: ["/*", "*/"]
      },
      brackets: [["{", "}"], ["[", "]"], ["(", ")"]],
      onEnterRules: [{
        beforeText: /^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,
        afterText: /^\s*\*\/$/,
        action: {
          indentAction: r.languages.IndentAction.IndentOutdent,
          appendText: " * "
        }
      }, {
        beforeText: /^\s*\/\*\*(?!\/)([^\*]|\*(?!\/))*$/,
        action: {
          indentAction: r.languages.IndentAction.None,
          appendText: " * "
        }
      }, {
        beforeText: /^(\t|(\ \ ))*\ \*(\ ([^\*]|\*(?!\/))*)?$/,
        action: {
          indentAction: r.languages.IndentAction.None,
          appendText: "* "
        }
      }, {
        beforeText: /^(\t|(\ \ ))*\ \*\/\s*$/,
        action: {
          indentAction: r.languages.IndentAction.None,
          removeText: 1
        }
      }],
      autoClosingPairs: [{
        open: "{",
        close: "}"
      }, {
        open: "[",
        close: "]"
      }, {
        open: "(",
        close: ")"
      }, {
        open: '"',
        close: '"',
        notIn: ["string"]
      }, {
        open: "'",
        close: "'",
        notIn: ["string", "comment"]
      }, {
        open: "`",
        close: "`",
        notIn: ["string", "comment"]
      }, {
        open: "/**",
        close: " */",
        notIn: ["string"]
      }],
      folding: {
        markers: {
          start: new RegExp("^\\s*//\\s*#?region\\b"),
          end: new RegExp("^\\s*//\\s*#?endregion\\b")
        }
      }
    },
        n = {
      defaultToken: "invalid",
      tokenPostfix: ".ts",
      keywords: ["abstract", "any", "as", "asserts", "bigint", "boolean", "break", "case", "catch", "class", "continue", "const", "constructor", "debugger", "declare", "default", "delete", "do", "else", "enum", "export", "extends", "false", "finally", "for", "from", "function", "get", "if", "implements", "import", "in", "infer", "instanceof", "interface", "is", "keyof", "let", "module", "namespace", "never", "new", "null", "number", "object", "package", "private", "protected", "public", "override", "readonly", "require", "global", "return", "set", "static", "string", "super", "switch", "symbol", "this", "throw", "true", "try", "type", "typeof", "undefined", "unique", "unknown", "var", "void", "while", "with", "yield", "async", "await", "of"],
      operators: ["<=", ">=", "==", "!=", "===", "!==", "=>", "+", "-", "**", "*", "/", "%", "++", "--", "<<", "</", ">>", ">>>", "&", "|", "^", "!", "~", "&&", "||", "??", "?", ":", "=", "+=", "-=", "*=", "**=", "/=", "%=", "<<=", ">>=", ">>>=", "&=", "|=", "^=", "@"],
      symbols: /[=><!~?:&|+\-*\/\^%]+/,
      escapes: /\\(?:[abfnrtv\\"']|x[0-9A-Fa-f]{1,4}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})/,
      digits: /\d+(_+\d+)*/,
      octaldigits: /[0-7]+(_+[0-7]+)*/,
      binarydigits: /[0-1]+(_+[0-1]+)*/,
      hexdigits: /[[0-9a-fA-F]+(_+[0-9a-fA-F]+)*/,
      regexpctl: /[(){}\[\]\$\^|\-*+?\.]/,
      regexpesc: /\\(?:[bBdDfnrstvwWn0\\\/]|@regexpctl|c[A-Z]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4})/,
      tokenizer: {
        root: [[/[{}]/, "delimiter.bracket"], {
          include: "common"
        }],
        common: [[/[a-z_$][\w$]*/, {
          cases: {
            "@keywords": "keyword",
            "@default": "identifier"
          }
        }], [/[A-Z][\w\$]*/, "type.identifier"], {
          include: "@whitespace"
        }, [/\/(?=([^\\\/]|\\.)+\/([dgimsuy]*)(\s*)(\.|;|,|\)|\]|\}|$))/, {
          token: "regexp",
          bracket: "@open",
          next: "@regexp"
        }], [/[()\[\]]/, "@brackets"], [/[<>](?!@symbols)/, "@brackets"], [/!(?=([^=]|$))/, "delimiter"], [/@symbols/, {
          cases: {
            "@operators": "delimiter",
            "@default": ""
          }
        }], [/(@digits)[eE]([\-+]?(@digits))?/, "number.float"], [/(@digits)\.(@digits)([eE][\-+]?(@digits))?/, "number.float"], [/0[xX](@hexdigits)n?/, "number.hex"], [/0[oO]?(@octaldigits)n?/, "number.octal"], [/0[bB](@binarydigits)n?/, "number.binary"], [/(@digits)n?/, "number"], [/[;,.]/, "delimiter"], [/"([^"\\]|\\.)*$/, "string.invalid"], [/'([^'\\]|\\.)*$/, "string.invalid"], [/"/, "string", "@string_double"], [/'/, "string", "@string_single"], [/`/, "string", "@string_backtick"]],
        whitespace: [[/[ \t\r\n]+/, ""], [/\/\*\*(?!\/)/, "comment.doc", "@jsdoc"], [/\/\*/, "comment", "@comment"], [/\/\/.*$/, "comment"]],
        comment: [[/[^\/*]+/, "comment"], [/\*\//, "comment", "@pop"], [/[\/*]/, "comment"]],
        jsdoc: [[/[^\/*]+/, "comment.doc"], [/\*\//, "comment.doc", "@pop"], [/[\/*]/, "comment.doc"]],
        regexp: [[/(\{)(\d+(?:,\d*)?)(\})/, ["regexp.escape.control", "regexp.escape.control", "regexp.escape.control"]], [/(\[)(\^?)(?=(?:[^\]\\\/]|\\.)+)/, ["regexp.escape.control", {
          token: "regexp.escape.control",
          next: "@regexrange"
        }]], [/(\()(\?:|\?=|\?!)/, ["regexp.escape.control", "regexp.escape.control"]], [/[()]/, "regexp.escape.control"], [/@regexpctl/, "regexp.escape.control"], [/[^\\\/]/, "regexp"], [/@regexpesc/, "regexp.escape"], [/\\\./, "regexp.invalid"], [/(\/)([dgimsuy]*)/, [{
          token: "regexp",
          bracket: "@close",
          next: "@pop"
        }, "keyword.other"]]],
        regexrange: [[/-/, "regexp.escape.control"], [/\^/, "regexp.invalid"], [/@regexpesc/, "regexp.escape"], [/[^\]]/, "regexp"], [/\]/, {
          token: "regexp.escape.control",
          next: "@pop",
          bracket: "@close"
        }]],
        string_double: [[/[^\\"]+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/"/, "string", "@pop"]],
        string_single: [[/[^\\']+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/'/, "string", "@pop"]],
        string_backtick: [[/\$\{/, {
          token: "delimiter.bracket",
          next: "@bracketCounting"
        }], [/[^\\`$]+/, "string"], [/@escapes/, "string.escape"], [/\\./, "string.escape.invalid"], [/`/, "string", "@pop"]],
        bracketCounting: [[/\{/, "delimiter.bracket", "@bracketCounting"], [/\}/, "delimiter.bracket", "@pop"], {
          include: "common"
        }]
      }
    };
    var $ = m,
        T = {
      defaultToken: "invalid",
      tokenPostfix: ".js",
      keywords: ["break", "case", "catch", "class", "continue", "const", "constructor", "debugger", "default", "delete", "do", "else", "export", "extends", "false", "finally", "for", "from", "function", "get", "if", "import", "in", "instanceof", "let", "new", "null", "return", "set", "super", "switch", "symbol", "this", "throw", "true", "try", "typeof", "undefined", "var", "void", "while", "with", "yield", "async", "await", "of"],
      typeKeywords: [],
      operators: n.operators,
      symbols: n.symbols,
      escapes: n.escapes,
      digits: n.digits,
      octaldigits: n.octaldigits,
      binarydigits: n.binarydigits,
      hexdigits: n.hexdigits,
      regexpctl: n.regexpctl,
      regexpesc: n.regexpesc,
      tokenizer: n.tokenizer
    };
    return v(_);
  }();

  return moduleExports;
});