define(["exports", "./utility/router-utility.js"], function (_exports, _routerUtility) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.navigator = navigator;
  _exports.outlet = outlet;
  _exports.router = router;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  function router(base) {
    return /*#__PURE__*/function (_base) {
      babelHelpers.inherits(_class, _base);

      var _super = _createSuper(_class);

      function _class() {
        var _this;

        babelHelpers.classCallCheck(this, _class);

        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
          args[_key] = arguments[_key];
        }

        _this = _super.call.apply(_super, [this].concat(args));
        _this.basePath = document.baseURI.substring(0, document.baseURI.lastIndexOf('/')) + '/';
        _this.route = '';
        _this.canceled = false;
        return _this;
      }

      babelHelpers.createClass(_class, [{
        key: "connectedCallback",
        value: function connectedCallback() {
          var _babelHelpers$get,
              _this2 = this;

          for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
            args[_key2] = arguments[_key2];
          }

          (_babelHelpers$get = babelHelpers.get(babelHelpers.getPrototypeOf(_class.prototype), "connectedCallback", this)).call.apply(_babelHelpers$get, [this].concat(args)); // @ts-ignore


          this.routing(this.constructor.routes, function () {
            return _this2.router.apply(_this2, arguments);
          });
          window.addEventListener('route', function () {
            // @ts-ignore
            _this2.routing(_this2.constructor.routes, function () {
              return _this2.router.apply(_this2, arguments);
            });
          });

          window.onpopstate = function () {
            window.dispatchEvent(new CustomEvent('route'));
          };
        }
      }, {
        key: "routed",
        value: function routed(name, params, query, data, callback, localCallback) {
          localCallback && localCallback(name, params, query, data);
          callback(name, params, query, data);
        }
      }, {
        key: "routing",
        value: function routing(routes, callback) {
          var _this3 = this;

          this.canceled = true;
          var uri = decodeURI((window.location.origin + window.location.pathname).replace(this.basePath, ''));
          var querystring = decodeURI(window.location.search);
          var notFoundRoute = routes.filter(function (route) {
            return route.pattern === '*';
          })[0];
          var activeRoute = routes.filter(function (route) {
            return route.pattern !== '*' && (0, _routerUtility.testRoute)(uri, route.pattern);
          })[0];
          var query = (0, _routerUtility.parseQuery)(querystring);

          if (activeRoute) {
            activeRoute.params = (0, _routerUtility.parseParams)(activeRoute.pattern, uri);
            activeRoute.data = activeRoute.data || {};

            if (activeRoute.authentication && activeRoute.authentication.authenticate && typeof activeRoute.authentication.authenticate === 'function') {
              this.canceled = false;
              Promise.resolve(activeRoute.authentication.authenticate.bind(this).call()).then(function (authenticated) {
                if (!_this3.canceled) {
                  if (authenticated) {
                    if (activeRoute.authorization && activeRoute.authorization.authorize && typeof activeRoute.authorization.authorize === 'function') {
                      _this3.canceled = false;
                      Promise.resolve(activeRoute.authorization.authorize.bind(_this3).call()).then(function (authorizatied) {
                        if (!_this3.canceled) {
                          if (authorizatied) {
                            _this3.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);
                          } else {
                            _this3.routed(activeRoute.authorization.unauthorized.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);
                          }
                        }
                      });
                    } else {
                      _this3.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);
                    }
                  } else {
                    _this3.routed(activeRoute.authentication.unauthenticated.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);
                  }
                }
              });
            } else if (activeRoute.authorization && activeRoute.authorization.authorize && typeof activeRoute.authorization.authorize === 'function') {
              this.canceled = false;
              Promise.resolve(activeRoute.authorization.authorize.bind(this).call()).then(function (authorizatied) {
                if (!_this3.canceled) {
                  if (authorizatied) {
                    _this3.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);
                  } else {
                    _this3.routed(activeRoute.authorization.unauthorized.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);
                  }
                }
              });
            } else {
              this.routed(activeRoute.name, activeRoute.params, query, activeRoute.data, callback, activeRoute.callback);
            }
          } else if (notFoundRoute) {
            notFoundRoute.data = notFoundRoute.data || {};
            this.routed(notFoundRoute.name, {}, query, notFoundRoute.data, callback, notFoundRoute.callback);
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            route: {
              type: String,
              reflect: true,
              attribute: 'route'
            },
            canceled: {
              type: Boolean
            },
            basePath: {
              type: String,
              attribute: "base-path"
            }
          };
        }
      }]);
      return _class;
    }(base);
  }

  function navigator(base) {
    return /*#__PURE__*/function (_base2) {
      babelHelpers.inherits(_class2, _base2);

      var _super2 = _createSuper(_class2);

      function _class2() {
        babelHelpers.classCallCheck(this, _class2);
        return _super2.apply(this, arguments);
      }

      babelHelpers.createClass(_class2, [{
        key: "navigate",
        value: function navigate(href) {
          window.history.pushState({}, null, href);
          window.dispatchEvent(new CustomEvent('route'));
        }
      }]);
      return _class2;
    }(base);
  }

  function outlet(base) {
    return /*#__PURE__*/function (_base3) {
      babelHelpers.inherits(_class3, _base3);

      var _super3 = _createSuper(_class3);

      function _class3() {
        babelHelpers.classCallCheck(this, _class3);
        return _super3.apply(this, arguments);
      }

      babelHelpers.createClass(_class3, [{
        key: "attributeChangedCallback",
        value: function attributeChangedCallback() {
          var _babelHelpers$get2;

          for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
            args[_key3] = arguments[_key3];
          }

          (_babelHelpers$get2 = babelHelpers.get(babelHelpers.getPrototypeOf(_class3.prototype), "attributeChangedCallback", this)).call.apply(_babelHelpers$get2, [this].concat(args));

          args.some(function (arg) {
            return arg === 'active-route';
          }) && this.outlet();
        }
      }, {
        key: "connectedCallback",
        value: function connectedCallback() {
          var _babelHelpers$get3,
              _this4 = this;

          for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
            args[_key4] = arguments[_key4];
          }

          (_babelHelpers$get3 = babelHelpers.get(babelHelpers.getPrototypeOf(_class3.prototype), "connectedCallback", this)).call.apply(_babelHelpers$get3, [this].concat(args));

          setTimeout(function () {
            _this4.outlet();
          });
        }
      }, {
        key: "outlet",
        value: function outlet() {
          Array.from(this.querySelectorAll("[route]")).map(function (active) {
            active.style.display = "none";
          });
          Array.from(this.shadowRoot.querySelectorAll("[route]")).map(function (active) {
            active.style.display = "none";
          });

          if (this.activeRoute) {
            Array.from(this.querySelectorAll("[route~=".concat(this.activeRoute, "]"))).map(function (active) {
              active.style.display = "";
            });
            Array.from(this.shadowRoot.querySelectorAll("[route~=".concat(this.activeRoute, "]"))).map(function (active) {
              active.style.display = "";
            });
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            activeRoute: {
              type: String,
              reflect: true,
              attribute: 'active-route'
            }
          };
        }
      }]);
      return _class3;
    }(base);
  }
});