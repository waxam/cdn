define(["exports", "./debounce.js", "./focusable.js", "./shadow.js"], function (_exports, _debounce, _focusable, _shadow) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.FocusTrap = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * Template for the focus trap.
   */
  var template = document.createElement("template");
  template.innerHTML = "\n\t<div id=\"start\"></div>\n\t<div id=\"backup\"></div>\n\t<slot></slot>\n\t<div id=\"end\"></div>\n";
  /**
   * Focus trap web component.
   * @customElement focus-trap
   * @slot - Default content.
   */

  var FocusTrap = /*#__PURE__*/function (_HTMLElement) {
    babelHelpers.inherits(FocusTrap, _HTMLElement);

    var _super = _createSuper(FocusTrap);

    /**
     * Attaches the shadow root.
     */
    function FocusTrap() {
      var _this;

      babelHelpers.classCallCheck(this, FocusTrap);
      _this = _super.call(this); // The debounce id is used to distinguish this focus trap from others when debouncing

      _this.debounceId = Math.random().toString();
      _this._focused = false;

      var shadow = _this.attachShadow({
        mode: "open"
      });

      shadow.appendChild(template.content.cloneNode(true));
      _this.$backup = shadow.querySelector("#backup");
      _this.$start = shadow.querySelector("#start");
      _this.$end = shadow.querySelector("#end");
      _this.focusLastElement = _this.focusLastElement.bind(babelHelpers.assertThisInitialized(_this));
      _this.focusFirstElement = _this.focusFirstElement.bind(babelHelpers.assertThisInitialized(_this));
      _this.onFocusIn = _this.onFocusIn.bind(babelHelpers.assertThisInitialized(_this));
      _this.onFocusOut = _this.onFocusOut.bind(babelHelpers.assertThisInitialized(_this));
      return _this;
    } // Whenever one of these attributes changes we need to render the template again.


    babelHelpers.createClass(FocusTrap, [{
      key: "inactive",
      get:
      /**
       * Determines whether the focus trap is active or not.
       * @attr
       */
      function get() {
        return this.hasAttribute("inactive");
      },
      set: function set(value) {
        value ? this.setAttribute("inactive", "") : this.removeAttribute("inactive");
      }
      /**
       * Returns whether the element currently has focus.
       */

    }, {
      key: "focused",
      get: function get() {
        return this._focused;
      }
      /**
       * Hooks up the element.
       */

    }, {
      key: "connectedCallback",
      value: function connectedCallback() {
        this.$start.addEventListener("focus", this.focusLastElement);
        this.$end.addEventListener("focus", this.focusFirstElement); // Focus out is called every time the user tabs around inside the element

        this.addEventListener("focusin", this.onFocusIn);
        this.addEventListener("focusout", this.onFocusOut);
        this.render();
      }
      /**
       * Tears down the element.
       */

    }, {
      key: "disconnectedCallback",
      value: function disconnectedCallback() {
        this.$start.removeEventListener("focus", this.focusLastElement);
        this.$end.removeEventListener("focus", this.focusFirstElement);
        this.removeEventListener("focusin", this.onFocusIn);
        this.removeEventListener("focusout", this.onFocusOut);
      }
      /**
       * When the attributes changes we need to re-render the template.
       */

    }, {
      key: "attributeChangedCallback",
      value: function attributeChangedCallback() {
        this.render();
      }
      /**
       * Focuses the first focusable element in the focus trap.
       */

    }, {
      key: "focusFirstElement",
      value: function focusFirstElement() {
        this.trapFocus();
      }
      /**
       * Focuses the last focusable element in the focus trap.
       */

    }, {
      key: "focusLastElement",
      value: function focusLastElement() {
        this.trapFocus(true);
      }
      /**
       * Returns a list of the focusable children found within the element.
       */

    }, {
      key: "getFocusableElements",
      value: function getFocusableElements() {
        return (0, _shadow.queryShadowRoot)(this, _focusable.isHidden, _focusable.isFocusable);
      }
      /**
       * Focuses on either the last or first focusable element.
       * @param {boolean} trapToEnd
       */

    }, {
      key: "trapFocus",
      value: function trapFocus(trapToEnd) {
        if (this.inactive) return;
        var focusableChildren = this.getFocusableElements();

        if (focusableChildren.length > 0) {
          if (trapToEnd) {
            focusableChildren[focusableChildren.length - 1].focus();
          } else {
            focusableChildren[0].focus();
          }

          this.$backup.setAttribute("tabindex", "-1");
        } else {
          // If there are no focusable children we need to focus on the backup
          // to trap the focus. This is a useful behavior if the focus trap is
          // for example used in a dialog and we don't want the user to tab
          // outside the dialog even though there are no focusable children
          // in the dialog.
          this.$backup.setAttribute("tabindex", "0");
          this.$backup.focus();
        }
      }
      /**
       * When the element gains focus this function is called.
       */

    }, {
      key: "onFocusIn",
      value: function onFocusIn() {
        this.updateFocused(true);
      }
      /**
       * When the element looses its focus this function is called.
       */

    }, {
      key: "onFocusOut",
      value: function onFocusOut() {
        this.updateFocused(false);
      }
      /**
       * Updates the focused property and updates the view.
       * The update is debounced because the focusin and focusout out
       * might fire multiple times in a row. We only want to render
       * the element once, therefore waiting until the focus is "stable".
       * @param value
       */

    }, {
      key: "updateFocused",
      value: function updateFocused(value) {
        var _this2 = this;

        (0, _debounce.debounce)(function () {
          if (_this2.focused !== value) {
            _this2._focused = value;

            _this2.render();
          }
        }, 0, this.debounceId);
      }
      /**
       * Updates the template.
       */

    }, {
      key: "render",
      value: function render() {
        this.$start.setAttribute("tabindex", !this.focused || this.inactive ? "-1" : "0");
        this.$end.setAttribute("tabindex", !this.focused || this.inactive ? "-1" : "0");
        this.focused ? this.setAttribute("focused", "") : this.removeAttribute("focused");
      }
    }], [{
      key: "observedAttributes",
      get: function get() {
        return ["inactive"];
      }
    }]);
    return FocusTrap;
  }( /*#__PURE__*/babelHelpers.wrapNativeSuper(HTMLElement));

  _exports.FocusTrap = FocusTrap;
  window.customElements.define("focus-trap", FocusTrap);
});