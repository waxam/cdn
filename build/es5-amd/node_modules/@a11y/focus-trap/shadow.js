define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.queryShadowRoot = queryShadowRoot;

  /**
   * Traverses the slots of the open shadowroots and returns all children matching the query.
   * @param {ShadowRoot | HTMLElement} root
   * @param skipNode
   * @param isMatch
   * @param {number} maxDepth
   * @param {number} depth
   * @returns {HTMLElement[]}
   */
  function queryShadowRoot(root, skipNode, isMatch) {
    var maxDepth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 20;
    var depth = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
    var matches = []; // If the depth is above the max depth, abort the searching here.

    if (depth >= maxDepth) {
      return matches;
    } // Traverses a slot element


    var traverseSlot = function traverseSlot($slot) {
      // Only check nodes that are of the type Node.ELEMENT_NODE
      // Read more here https://developer.mozilla.org/en-US/docs/Web/API/Node/nodeType
      var assignedNodes = $slot.assignedNodes().filter(function (node) {
        return node.nodeType === 1;
      });

      if (assignedNodes.length > 0) {
        return queryShadowRoot(assignedNodes[0].parentElement, skipNode, isMatch, maxDepth, depth + 1);
      }

      return [];
    }; // Go through each child and continue the traversing if necessary
    // Even though the typing says that children can't be undefined, Edge 15 sometimes gives an undefined value.
    // Therefore we fallback to an empty array if it is undefined.


    var children = Array.from(root.children || []);

    for (var _i = 0, _children = children; _i < _children.length; _i++) {
      var $child = _children[_i];

      // Check if the node and its descendants should be skipped
      if (skipNode($child)) {
        continue;
      } // If the child matches we always add it


      if (isMatch($child)) {
        matches.push($child);
      }

      if ($child.shadowRoot != null) {
        matches.push.apply(matches, babelHelpers.toConsumableArray(queryShadowRoot($child.shadowRoot, skipNode, isMatch, maxDepth, depth + 1)));
      } else if ($child.tagName === "SLOT") {
        matches.push.apply(matches, babelHelpers.toConsumableArray(traverseSlot($child)));
      } else {
        matches.push.apply(matches, babelHelpers.toConsumableArray(queryShadowRoot($child, skipNode, isMatch, maxDepth, depth + 1)));
      }
    }

    return matches;
  }
});