define(["exports", "../geometry.js", "./scan-line-hachure.js"], function (_exports, _geometry, _scanLineHachure) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DashedFiller = void 0;

  var DashedFiller = /*#__PURE__*/function () {
    function DashedFiller(helper) {
      babelHelpers.classCallCheck(this, DashedFiller);
      this.helper = helper;
    }

    babelHelpers.createClass(DashedFiller, [{
      key: "fillPolygon",
      value: function fillPolygon(points, o) {
        var lines = (0, _scanLineHachure.polygonHachureLines)(points, o);
        return {
          type: 'fillSketch',
          ops: this.dashedLine(lines, o)
        };
      }
    }, {
      key: "dashedLine",
      value: function dashedLine(lines, o) {
        var _this = this;

        var offset = o.dashOffset < 0 ? o.hachureGap < 0 ? o.strokeWidth * 4 : o.hachureGap : o.dashOffset;
        var gap = o.dashGap < 0 ? o.hachureGap < 0 ? o.strokeWidth * 4 : o.hachureGap : o.dashGap;
        var ops = [];
        lines.forEach(function (line) {
          var length = (0, _geometry.lineLength)(line);
          var count = Math.floor(length / (offset + gap));
          var startOffset = (length + gap - count * (offset + gap)) / 2;
          var p1 = line[0];
          var p2 = line[1];

          if (p1[0] > p2[0]) {
            p1 = line[1];
            p2 = line[0];
          }

          var alpha = Math.atan((p2[1] - p1[1]) / (p2[0] - p1[0]));

          for (var i = 0; i < count; i++) {
            var lstart = i * (offset + gap);
            var lend = lstart + offset;
            var start = [p1[0] + lstart * Math.cos(alpha) + startOffset * Math.cos(alpha), p1[1] + lstart * Math.sin(alpha) + startOffset * Math.sin(alpha)];
            var end = [p1[0] + lend * Math.cos(alpha) + startOffset * Math.cos(alpha), p1[1] + lend * Math.sin(alpha) + startOffset * Math.sin(alpha)];
            ops.push.apply(ops, babelHelpers.toConsumableArray(_this.helper.doubleLineOps(start[0], start[1], end[0], end[1], o)));
          }
        });
        return ops;
      }
    }]);
    return DashedFiller;
  }();

  _exports.DashedFiller = DashedFiller;
});