define(["exports", "../geometry.js", "./scan-line-hachure.js"], function (_exports, _geometry, _scanLineHachure) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DotFiller = void 0;

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var DotFiller = /*#__PURE__*/function () {
    function DotFiller(helper) {
      babelHelpers.classCallCheck(this, DotFiller);
      this.helper = helper;
    }

    babelHelpers.createClass(DotFiller, [{
      key: "fillPolygon",
      value: function fillPolygon(points, o) {
        o = Object.assign({}, o, {
          hachureAngle: 0
        });
        var lines = (0, _scanLineHachure.polygonHachureLines)(points, o);
        return this.dotsOnLines(lines, o);
      }
    }, {
      key: "dotsOnLines",
      value: function dotsOnLines(lines, o) {
        var ops = [];
        var gap = o.hachureGap;

        if (gap < 0) {
          gap = o.strokeWidth * 4;
        }

        gap = Math.max(gap, 0.1);
        var fweight = o.fillWeight;

        if (fweight < 0) {
          fweight = o.strokeWidth / 2;
        }

        var ro = gap / 4;

        var _iterator = _createForOfIteratorHelper(lines),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var line = _step.value;
            var length = (0, _geometry.lineLength)(line);
            var dl = length / gap;
            var count = Math.ceil(dl) - 1;
            var offset = length - count * gap;
            var x = (line[0][0] + line[1][0]) / 2 - gap / 4;
            var minY = Math.min(line[0][1], line[1][1]);

            for (var i = 0; i < count; i++) {
              var y = minY + offset + i * gap;
              var cx = x - ro + Math.random() * 2 * ro;
              var cy = y - ro + Math.random() * 2 * ro;
              var el = this.helper.ellipse(cx, cy, fweight, fweight, o);
              ops.push.apply(ops, babelHelpers.toConsumableArray(el.ops));
            }
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }

        return {
          type: 'fillSketch',
          ops: ops
        };
      }
    }]);
    return DotFiller;
  }();

  _exports.DotFiller = DotFiller;
});