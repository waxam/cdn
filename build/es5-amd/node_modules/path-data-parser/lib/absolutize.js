define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.absolutize = absolutize;

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  // Translate relative commands to absolute commands
  function absolutize(segments) {
    var cx = 0,
        cy = 0;
    var subx = 0,
        suby = 0;
    var out = [];

    var _iterator = _createForOfIteratorHelper(segments),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _step.value,
            key = _step$value.key,
            data = _step$value.data;

        switch (key) {
          case 'M':
            out.push({
              key: 'M',
              data: babelHelpers.toConsumableArray(data)
            });

            var _data = babelHelpers.slicedToArray(data, 2);

            cx = _data[0];
            cy = _data[1];

            var _data2 = babelHelpers.slicedToArray(data, 2);

            subx = _data2[0];
            suby = _data2[1];
            break;

          case 'm':
            cx += data[0];
            cy += data[1];
            out.push({
              key: 'M',
              data: [cx, cy]
            });
            subx = cx;
            suby = cy;
            break;

          case 'L':
            out.push({
              key: 'L',
              data: babelHelpers.toConsumableArray(data)
            });

            var _data3 = babelHelpers.slicedToArray(data, 2);

            cx = _data3[0];
            cy = _data3[1];
            break;

          case 'l':
            cx += data[0];
            cy += data[1];
            out.push({
              key: 'L',
              data: [cx, cy]
            });
            break;

          case 'C':
            out.push({
              key: 'C',
              data: babelHelpers.toConsumableArray(data)
            });
            cx = data[4];
            cy = data[5];
            break;

          case 'c':
            {
              var newdata = data.map(function (d, i) {
                return i % 2 ? d + cy : d + cx;
              });
              out.push({
                key: 'C',
                data: newdata
              });
              cx = newdata[4];
              cy = newdata[5];
              break;
            }

          case 'Q':
            out.push({
              key: 'Q',
              data: babelHelpers.toConsumableArray(data)
            });
            cx = data[2];
            cy = data[3];
            break;

          case 'q':
            {
              var _newdata = data.map(function (d, i) {
                return i % 2 ? d + cy : d + cx;
              });

              out.push({
                key: 'Q',
                data: _newdata
              });
              cx = _newdata[2];
              cy = _newdata[3];
              break;
            }

          case 'A':
            out.push({
              key: 'A',
              data: babelHelpers.toConsumableArray(data)
            });
            cx = data[5];
            cy = data[6];
            break;

          case 'a':
            cx += data[5];
            cy += data[6];
            out.push({
              key: 'A',
              data: [data[0], data[1], data[2], data[3], data[4], cx, cy]
            });
            break;

          case 'H':
            out.push({
              key: 'H',
              data: babelHelpers.toConsumableArray(data)
            });
            cx = data[0];
            break;

          case 'h':
            cx += data[0];
            out.push({
              key: 'H',
              data: [cx]
            });
            break;

          case 'V':
            out.push({
              key: 'V',
              data: babelHelpers.toConsumableArray(data)
            });
            cy = data[0];
            break;

          case 'v':
            cy += data[0];
            out.push({
              key: 'V',
              data: [cy]
            });
            break;

          case 'S':
            out.push({
              key: 'S',
              data: babelHelpers.toConsumableArray(data)
            });
            cx = data[2];
            cy = data[3];
            break;

          case 's':
            {
              var _newdata2 = data.map(function (d, i) {
                return i % 2 ? d + cy : d + cx;
              });

              out.push({
                key: 'S',
                data: _newdata2
              });
              cx = _newdata2[2];
              cy = _newdata2[3];
              break;
            }

          case 'T':
            out.push({
              key: 'T',
              data: babelHelpers.toConsumableArray(data)
            });
            cx = data[0];
            cy = data[1];
            break;

          case 't':
            cx += data[0];
            cy += data[1];
            out.push({
              key: 'T',
              data: [cx, cy]
            });
            break;

          case 'Z':
          case 'z':
            out.push({
              key: 'Z',
              data: []
            });
            cx = subx;
            cy = suby;
            break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return out;
  }
});