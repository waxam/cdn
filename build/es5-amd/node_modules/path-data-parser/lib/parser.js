define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.parsePath = parsePath;
  _exports.serialize = serialize;

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  var COMMAND = 0;
  var NUMBER = 1;
  var EOD = 2;
  var PARAMS = {
    A: 7,
    a: 7,
    C: 6,
    c: 6,
    H: 1,
    h: 1,
    L: 2,
    l: 2,
    M: 2,
    m: 2,
    Q: 4,
    q: 4,
    S: 4,
    s: 4,
    T: 2,
    t: 2,
    V: 1,
    v: 1,
    Z: 0,
    z: 0
  };

  function tokenize(d) {
    var tokens = new Array();

    while (d !== '') {
      if (d.match(/^([ \t\r\n,]+)/)) {
        d = d.substr(RegExp.$1.length);
      } else if (d.match(/^([aAcChHlLmMqQsStTvVzZ])/)) {
        tokens[tokens.length] = {
          type: COMMAND,
          text: RegExp.$1
        };
        d = d.substr(RegExp.$1.length);
      } else if (d.match(/^(([-+]?[0-9]+(\.[0-9]*)?|[-+]?\.[0-9]+)([eE][-+]?[0-9]+)?)/)) {
        tokens[tokens.length] = {
          type: NUMBER,
          text: "".concat(parseFloat(RegExp.$1))
        };
        d = d.substr(RegExp.$1.length);
      } else {
        return [];
      }
    }

    tokens[tokens.length] = {
      type: EOD,
      text: ''
    };
    return tokens;
  }

  function isType(token, type) {
    return token.type === type;
  }

  function parsePath(d) {
    var segments = [];
    var tokens = tokenize(d);
    var mode = 'BOD';
    var index = 0;
    var token = tokens[index];

    while (!isType(token, EOD)) {
      var paramsCount = 0;
      var params = [];

      if (mode === 'BOD') {
        if (token.text === 'M' || token.text === 'm') {
          index++;
          paramsCount = PARAMS[token.text];
          mode = token.text;
        } else {
          return parsePath('M0,0' + d);
        }
      } else if (isType(token, NUMBER)) {
        paramsCount = PARAMS[mode];
      } else {
        index++;
        paramsCount = PARAMS[token.text];
        mode = token.text;
      }

      if (index + paramsCount < tokens.length) {
        for (var i = index; i < index + paramsCount; i++) {
          var numbeToken = tokens[i];

          if (isType(numbeToken, NUMBER)) {
            params[params.length] = +numbeToken.text;
          } else {
            throw new Error('Param not a number: ' + mode + ',' + numbeToken.text);
          }
        }

        if (typeof PARAMS[mode] === 'number') {
          var segment = {
            key: mode,
            data: params
          };
          segments.push(segment);
          index += paramsCount;
          token = tokens[index];
          if (mode === 'M') mode = 'L';
          if (mode === 'm') mode = 'l';
        } else {
          throw new Error('Bad segment: ' + mode);
        }
      } else {
        throw new Error('Path data ended short');
      }
    }

    return segments;
  }

  function serialize(segments) {
    var tokens = [];

    var _iterator = _createForOfIteratorHelper(segments),
        _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var _step$value = _step.value,
            key = _step$value.key,
            data = _step$value.data;
        tokens.push(key);

        switch (key) {
          case 'C':
          case 'c':
            tokens.push(data[0], "".concat(data[1], ","), data[2], "".concat(data[3], ","), data[4], data[5]);
            break;

          case 'S':
          case 's':
          case 'Q':
          case 'q':
            tokens.push(data[0], "".concat(data[1], ","), data[2], data[3]);
            break;

          default:
            tokens.push.apply(tokens, babelHelpers.toConsumableArray(data));
            break;
        }
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    return tokens.join(' ');
  }
});