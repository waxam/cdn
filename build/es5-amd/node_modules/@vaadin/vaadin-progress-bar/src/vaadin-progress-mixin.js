define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ProgressMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var ProgressMixin = function ProgressMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(VaadinProgressMixin, _superClass);

      var _super = _createSuper(VaadinProgressMixin);

      function VaadinProgressMixin() {
        babelHelpers.classCallCheck(this, VaadinProgressMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(VaadinProgressMixin, [{
        key: "ready",
        value:
        /** @protected */
        function ready() {
          babelHelpers.get(babelHelpers.getPrototypeOf(VaadinProgressMixin.prototype), "ready", this).call(this);
          this.setAttribute('role', 'progressbar');
        }
        /** @private */

      }, {
        key: "_normalizedValueChanged",
        value: function _normalizedValueChanged(value, min, max) {
          var newNormalizedValue = this._normalizeValue(value, min, max);

          this.style.setProperty('--vaadin-progress-value', newNormalizedValue);
          this.updateStyles({
            '--vaadin-progress-value': String(newNormalizedValue)
          });
        }
        /** @private */

      }, {
        key: "_valueChanged",
        value: function _valueChanged(newV, oldV) {
          this.setAttribute('aria-valuenow', newV);
        }
        /** @private */

      }, {
        key: "_minChanged",
        value: function _minChanged(newV, oldV) {
          this.setAttribute('aria-valuemin', newV);
        }
        /** @private */

      }, {
        key: "_maxChanged",
        value: function _maxChanged(newV, oldV) {
          this.setAttribute('aria-valuemax', newV);
        }
        /**
         * Percent of current progress relative to whole progress bar (max - min)
         * @private
         */

      }, {
        key: "_normalizeValue",
        value: function _normalizeValue(value, min, max) {
          var nV;

          if (!value && value != 0) {
            nV = 0;
          } else if (min >= max) {
            nV = 1;
          } else {
            nV = (value - min) / (max - min);
            nV = Math.min(Math.max(nV, 0), 1);
          }

          return nV;
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * Current progress value.
             */
            value: {
              type: Number,
              observer: '_valueChanged'
            },

            /**
             * Minimum bound of the progress bar.
             * @type {number}
             */
            min: {
              type: Number,
              value: 0,
              observer: '_minChanged'
            },

            /**
             * Maximum bound of the progress bar.
             * @type {number}
             */
            max: {
              type: Number,
              value: 1,
              observer: '_maxChanged'
            },

            /**
             * Indeterminate state of the progress bar.
             * This property takes precedence over other state properties (min, max, value).
             * @type {boolean}
             */
            indeterminate: {
              type: Boolean,
              value: false,
              reflectToAttribute: true
            }
          };
        }
      }, {
        key: "observers",
        get: function get() {
          return ['_normalizedValueChanged(value, min, max)'];
        }
      }]);
      return VaadinProgressMixin;
    }(superClass);
  };

  _exports.ProgressMixin = ProgressMixin;
});