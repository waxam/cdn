define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.isFocusable = _exports.ActiveItemMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var ActiveItemMixin = function ActiveItemMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(ActiveItemMixin, _superClass);

      var _super = _createSuper(ActiveItemMixin);

      function ActiveItemMixin() {
        babelHelpers.classCallCheck(this, ActiveItemMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(ActiveItemMixin, [{
        key: "ready",
        value: function ready() {
          babelHelpers.get(babelHelpers.getPrototypeOf(ActiveItemMixin.prototype), "ready", this).call(this);
          this.$.scroller.addEventListener('click', this._onClick.bind(this));
          this.addEventListener('cell-activate', this._activateItem.bind(this));
        }
        /** @private */

      }, {
        key: "_activateItem",
        value: function _activateItem(e) {
          var model = e.detail.model;
          var clickedItem = model ? model.item : null;

          if (clickedItem) {
            this.activeItem = !this._itemsEqual(this.activeItem, clickedItem) ? clickedItem : null;
          }
        }
        /**
         * We need to listen to click instead of tap because on mobile safari, the
         * document.activeElement has not been updated (focus has not been shifted)
         * yet at the point when tap event is being executed.
         * @param {!MouseEvent} e
         * @protected
         */

      }, {
        key: "_onClick",
        value: function _onClick(e) {
          if (e.defaultPrevented) {
            // Something has handled this click already, e. g., <vaadin-grid-sorter>
            return;
          }

          var path = e.composedPath();
          var cell = path[path.indexOf(this.$.table) - 3];

          if (!cell || cell.getAttribute('part').indexOf('details-cell') > -1) {
            return;
          }

          var cellContent = cell._content;
          var activeElement = this.getRootNode().activeElement;

          var cellContentHasFocus = cellContent.contains(activeElement) && ( // MSIE bug: flex children receive focus. Make type & attributes check.
          !this._ie || this._isFocusable(activeElement));

          if (!cellContentHasFocus && !this._isFocusable(e.target)) {
            this.dispatchEvent(new CustomEvent('cell-activate', {
              detail: {
                model: this.__getRowModel(cell.parentElement)
              }
            }));
          }
        }
        /**
         * @param {!Element} target
         * @return {boolean}
         * @protected
         */

      }, {
        key: "_isFocusable",
        value: function _isFocusable(target) {
          return isFocusable(target);
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * The item user has last interacted with. Turns to `null` after user deactivates
             * the item by re-interacting with the currently active item.
             * @type {GridItem}
             */
            activeItem: {
              type: Object,
              notify: true,
              value: null
            }
          };
        }
      }]);
      return ActiveItemMixin;
    }(superClass);
  };
  /**
   * @param {!Element} target
   * @return {boolean}
   * @protected
   */


  _exports.ActiveItemMixin = ActiveItemMixin;

  var isFocusable = function isFocusable(target) {
    if (!target.parentNode) {
      return false;
    }

    var focusables = Array.from(target.parentNode.querySelectorAll('[tabindex], button, input, select, textarea, object, iframe, label, a[href], area[href]')).filter(function (element) {
      return element.getAttribute('part') !== 'cell body-cell';
    });
    var isFocusableElement = focusables.indexOf(target) !== -1;
    return !target.disabled && isFocusableElement;
  };

  _exports.isFocusable = isFocusable;
});