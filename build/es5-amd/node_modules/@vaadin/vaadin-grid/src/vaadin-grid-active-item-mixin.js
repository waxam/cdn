define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ActiveItemMixin = void 0;

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var ActiveItemMixin = function ActiveItemMixin(superClass) {
    return (
      /*#__PURE__*/
      function (_superClass) {
        babelHelpers.inherits(ActiveItemMixin, _superClass);

        function ActiveItemMixin() {
          babelHelpers.classCallCheck(this, ActiveItemMixin);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(ActiveItemMixin).apply(this, arguments));
        }

        babelHelpers.createClass(ActiveItemMixin, [{
          key: "ready",
          value: function ready() {
            babelHelpers.get(babelHelpers.getPrototypeOf(ActiveItemMixin.prototype), "ready", this).call(this);
            this.$.scroller.addEventListener('click', this._onClick.bind(this));
            this.addEventListener('cell-activate', this._activateItem.bind(this));
          }
        }, {
          key: "_activateItem",
          value: function _activateItem(e) {
            var model = e.detail.model;
            var clickedItem = model ? model.item : null;

            if (clickedItem) {
              this.activeItem = !this._itemsEqual(this.activeItem, clickedItem) ? clickedItem : null;
            }
          } // we need to listen to click instead of tap because on mobile safari, the
          // document.activeElement has not been updated (focus has not been shifted)
          // yet at the point when tap event is being executed.

        }, {
          key: "_onClick",
          value: function _onClick(e) {
            if (e.defaultPrevented) {
              // Something has handled this click already, e. g., <vaadin-grid-sorter>
              return;
            }

            var path = e.composedPath();
            var cell = path[path.indexOf(this.$.table) - 3];

            if (!cell || cell.getAttribute('part').indexOf('details-cell') > -1) {
              return;
            }

            var cellContent = cell._content;
            var activeElement = this.getRootNode().activeElement;

            var cellContentHasFocus = cellContent.contains(activeElement) && ( // MSIE bug: flex children receive focus. Make type & attributes check.
            !this._ie || this._isFocusable(activeElement));

            if (!cellContentHasFocus && !this._isFocusable(e.target)) {
              this.dispatchEvent(new CustomEvent('cell-activate', {
                detail: {
                  model: this.__getRowModel(cell.parentElement)
                }
              }));
            }
          }
        }, {
          key: "_isFocusable",
          value: function _isFocusable(target) {
            if (!target.parentNode) {
              return false;
            }

            var focusables = Array.from(target.parentNode.querySelectorAll('[tabindex], button, input, select, textarea, object, iframe, label, a[href], area[href]')).filter(function (element) {
              return element.getAttribute('part') !== 'cell body-cell';
            });
            var isFocusableElement = focusables.indexOf(target) !== -1;
            return !target.disabled && isFocusableElement;
          }
        }], [{
          key: "properties",
          get: function get() {
            return {
              /**
               * The item user has last interacted with. Turns to `null` after user deactivates
               * the item by re-interacting with the currently active item.
               */
              activeItem: {
                type: Object,
                notify: true,
                value: null
              }
            };
          }
        }]);
        return ActiveItemMixin;
      }(superClass)
    );
  };

  _exports.ActiveItemMixin = ActiveItemMixin;
});