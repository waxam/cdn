define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.EventContextMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  @license
  Copyright (c) 2018 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var EventContextMixin = function EventContextMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(EventContextMixin, _superClass);

      var _super = _createSuper(EventContextMixin);

      function EventContextMixin() {
        babelHelpers.classCallCheck(this, EventContextMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(EventContextMixin, [{
        key: "getEventContext",
        value:
        /**
         * Returns an object with context information about the event target:
         * - `item`: the data object corresponding to the targeted row (not specified when targeting header or footer)
         * - `column`: the column element corresponding to the targeted cell (not specified when targeting row details)
         * - `section`: whether the event targeted the body, header, footer or details of the grid
         *
         * These additional properties are included when `item` is specified:
         * - `index`: the index of the item
         * - `selected`: the selected state of the item
         * - `detailsOpened`: whether the row details are open for the item
         * - `expanded`: the expanded state of the tree toggle
         * - `level`: the tree hierarchy level
         *
         * The returned object is populated only when a grid cell, header, footer or row details is found in `event.composedPath()`.
         * This means mostly mouse and keyboard events. If such a grid part is not found in the path, an empty object is returned.
         * This may be the case eg. if the event is fired on the `<vaadin-grid>` element and not any deeper in the DOM, or if
         * the event targets the empty part of the grid body.
         *
         * @param {!Event} event
         * @return {GridEventContext | object}
         */
        function getEventContext(event) {
          var context = {};
          var path = event.composedPath();
          var cell = path[path.indexOf(this.$.table) - 3];

          if (!cell) {
            return context;
          }

          context.section = ['body', 'header', 'footer', 'details'].filter(function (section) {
            return cell.getAttribute('part').indexOf(section) > -1;
          })[0];

          if (cell._column) {
            context.column = cell._column;
          }

          if (context.section === 'body' || context.section === 'details') {
            Object.assign(context, this.__getRowModel(cell.parentElement));
          }

          return context;
        }
      }]);
      return EventContextMixin;
    }(superClass);
  };

  _exports.EventContextMixin = EventContextMixin;
});