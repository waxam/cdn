define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SelectionMixin = void 0;

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var SelectionMixin = function SelectionMixin(superClass) {
    return (
      /*#__PURE__*/
      function (_superClass) {
        babelHelpers.inherits(SelectionMixin, _superClass);

        function SelectionMixin() {
          babelHelpers.classCallCheck(this, SelectionMixin);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(SelectionMixin).apply(this, arguments));
        }

        babelHelpers.createClass(SelectionMixin, [{
          key: "_isSelected",
          value: function _isSelected(item) {
            return this.selectedItems && this._getItemIndexInArray(item, this.selectedItems) > -1;
          }
          /**
           * Selects the given item.
           *
           * @method selectItem
           * @param {Object} item The item object
           */

        }, {
          key: "selectItem",
          value: function selectItem(item) {
            if (!this._isSelected(item)) {
              this.push('selectedItems', item);
            }
          }
          /**
           * Deselects the given item if it is already selected.
           *
           * @method deselect
           * @param {Object} item The item object
           */

        }, {
          key: "deselectItem",
          value: function deselectItem(item) {
            var index = this._getItemIndexInArray(item, this.selectedItems);

            if (index > -1) {
              this.splice('selectedItems', index, 1);
            }
          }
          /**
           * Toggles the selected state of the given item.
           *
           * @method toggle
           * @param {Object} item The item object
           */

        }, {
          key: "_toggleItem",
          value: function _toggleItem(item) {
            var index = this._getItemIndexInArray(item, this.selectedItems);

            if (index === -1) {
              this.selectItem(item);
            } else {
              this.deselectItem(item);
            }
          }
        }, {
          key: "_selectedItemsChanged",
          value: function _selectedItemsChanged(e) {
            var _this = this;

            if (this.$.items.children.length && (e.path === 'selectedItems' || e.path === 'selectedItems.splices')) {
              Array.from(this.$.items.children).forEach(function (row) {
                _this._updateItem(row, row._item);
              });
            }
          }
        }, {
          key: "_selectedInstanceChangedCallback",
          value: function _selectedInstanceChangedCallback(instance, value) {
            if (babelHelpers.get(babelHelpers.getPrototypeOf(SelectionMixin.prototype), "_selectedInstanceChangedCallback", this)) {
              babelHelpers.get(babelHelpers.getPrototypeOf(SelectionMixin.prototype), "_selectedInstanceChangedCallback", this).call(this, instance, value);
            }

            if (value) {
              this.selectItem(instance.item);
            } else {
              this.deselectItem(instance.item);
            }
          }
        }], [{
          key: "properties",
          get: function get() {
            return {
              /**
               * An array that contains the selected items.
               */
              selectedItems: {
                type: Object,
                notify: true,
                value: function value() {
                  return [];
                }
              }
            };
          }
        }, {
          key: "observers",
          get: function get() {
            return ['_selectedItemsChanged(selectedItems.*)'];
          }
        }]);
        return SelectionMixin;
      }(superClass)
    );
  };

  _exports.SelectionMixin = SelectionMixin;
});