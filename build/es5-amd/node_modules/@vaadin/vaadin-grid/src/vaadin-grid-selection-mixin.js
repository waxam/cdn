define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.SelectionMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var SelectionMixin = function SelectionMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(SelectionMixin, _superClass);

      var _super = _createSuper(SelectionMixin);

      function SelectionMixin() {
        babelHelpers.classCallCheck(this, SelectionMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(SelectionMixin, [{
        key: "_isSelected",
        value:
        /**
         * @param {!GridItem} item
         * @return {boolean}
         * @protected
         */
        function _isSelected(item) {
          return this.selectedItems && this._getItemIndexInArray(item, this.selectedItems) > -1;
        }
        /**
         * Selects the given item.
         *
         * @method selectItem
         * @param {!GridItem} item The item object
         */

      }, {
        key: "selectItem",
        value: function selectItem(item) {
          if (!this._isSelected(item)) {
            this.push('selectedItems', item);
          }
        }
        /**
         * Deselects the given item if it is already selected.
         *
         * @method deselect
         * @param {!GridItem} item The item object
         */

      }, {
        key: "deselectItem",
        value: function deselectItem(item) {
          var index = this._getItemIndexInArray(item, this.selectedItems);

          if (index > -1) {
            this.splice('selectedItems', index, 1);
          }
        }
        /**
         * Toggles the selected state of the given item.
         *
         * @method toggle
         * @param {!GridItem} item The item object
         * @protected
         */

      }, {
        key: "_toggleItem",
        value: function _toggleItem(item) {
          var index = this._getItemIndexInArray(item, this.selectedItems);

          if (index === -1) {
            this.selectItem(item);
          } else {
            this.deselectItem(item);
          }
        }
        /** @private */

      }, {
        key: "_selectedItemsChanged",
        value: function _selectedItemsChanged(e) {
          this._assignModels();
        }
        /** @private */

      }, {
        key: "_selectedInstanceChangedCallback",
        value: function _selectedInstanceChangedCallback(instance, value) {
          if (babelHelpers.get(babelHelpers.getPrototypeOf(SelectionMixin.prototype), "_selectedInstanceChangedCallback", this)) {
            babelHelpers.get(babelHelpers.getPrototypeOf(SelectionMixin.prototype), "_selectedInstanceChangedCallback", this).call(this, instance, value);
          }

          if (value) {
            this.selectItem(instance.item);
          } else {
            this.deselectItem(instance.item);
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * An array that contains the selected items.
             * @type {Array<GridItem>}
             */
            selectedItems: {
              type: Object,
              notify: true,
              value: function value() {
                return [];
              }
            }
          };
        }
      }, {
        key: "observers",
        get: function get() {
          return ['_selectedItemsChanged(selectedItems.*)'];
        }
      }]);
      return SelectionMixin;
    }(superClass);
  };

  _exports.SelectionMixin = SelectionMixin;
});