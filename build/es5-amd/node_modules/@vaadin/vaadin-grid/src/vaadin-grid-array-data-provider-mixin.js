define(["exports", "../../../@polymer/polymer/polymer-legacy.js"], function (_exports, _polymerLegacy) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ArrayDataProviderMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @polymerMixin
   */
  var ArrayDataProviderMixin = function ArrayDataProviderMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(ArrayDataProviderMixin, _superClass);

      var _super = _createSuper(ArrayDataProviderMixin);

      function ArrayDataProviderMixin() {
        babelHelpers.classCallCheck(this, ArrayDataProviderMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(ArrayDataProviderMixin, [{
        key: "_itemsChanged",
        value:
        /** @private */
        function _itemsChanged(items, splices, isAttached) {
          if (!isAttached) {
            return;
          }

          if (!Array.isArray(items)) {
            if (items === undefined || items === null) {
              this.size = 0;
            }

            if (this.dataProvider === this._arrayDataProvider) {
              this.dataProvider = undefined;
            }

            return;
          }

          this.size = items.length;
          this.dataProvider = this.dataProvider || this._arrayDataProvider;
          this.clearCache();

          this._ensureFirstPageLoaded();
        }
        /**
         * @param {GridDataProviderParams} opts
         * @param {GridDataProviderCallback} cb
         * @protected
         */

      }, {
        key: "_arrayDataProvider",
        value: function _arrayDataProvider(opts, cb) {
          var items = (Array.isArray(this.items) ? this.items : []).slice(0);

          if (this._filters && this._checkPaths(this._filters, 'filtering', items)) {
            items = this._filter(items);
          }

          this.size = items.length;

          if (opts.sortOrders.length && this._checkPaths(this._sorters, 'sorting', items)) {
            items = items.sort(this._multiSort.bind(this));
          }

          var start = opts.page * opts.pageSize;
          var end = start + opts.pageSize;
          var slice = items.slice(start, end);
          cb(slice, items.length);
        }
        /**
         * Check array of filters/sorters for paths validity, console.warn invalid items
         * @param {!Array<!GridFilter | !GridSorter>} arrayToCheck The array of filters/sorters to check
         * @param {string} action The name of action to include in warning (filtering, sorting)
         * @param {!Array<!GridItem>} items
         * @protected
         */

      }, {
        key: "_checkPaths",
        value: function _checkPaths(arrayToCheck, action, items) {
          if (!items.length) {
            return false;
          }

          var result = true;

          for (var i in arrayToCheck) {
            var path = arrayToCheck[i].path; // skip simple paths

            if (!path || path.indexOf('.') === -1) {
              continue;
            }

            var parentProperty = path.replace(/\.[^\.]*$/, ''); // a.b.c -> a.b

            if (_polymerLegacy.Base.get(parentProperty, items[0]) === undefined) {
              console.warn("Path \"".concat(path, "\" used for ").concat(action, " does not exist in all of the items, ").concat(action, " is disabled."));
              result = false;
            }
          }

          return result;
        }
        /**
         * @param {unknown} a
         * @param {unknown} b
         * @return {number}
         * @protected
         */

      }, {
        key: "_multiSort",
        value: function _multiSort(a, b) {
          var _this = this;

          return this._sorters.map(function (sort) {
            if (sort.direction === 'asc') {
              return _this._compare(_polymerLegacy.Base.get(sort.path, a), _polymerLegacy.Base.get(sort.path, b));
            } else if (sort.direction === 'desc') {
              return _this._compare(_polymerLegacy.Base.get(sort.path, b), _polymerLegacy.Base.get(sort.path, a));
            }

            return 0;
          }).reduce(function (p, n) {
            return p ? p : n;
          }, 0);
        }
        /**
         * @param {unknown} value
         * @return {string}
         * @protected
         */

      }, {
        key: "_normalizeEmptyValue",
        value: function _normalizeEmptyValue(value) {
          if ([undefined, null].indexOf(value) >= 0) {
            return '';
          } else if (isNaN(value)) {
            return value.toString();
          } else {
            return value;
          }
        }
        /**
         * @param {unknown} a
         * @param {unknown} b
         * @return {number}
         * @protected
         */

      }, {
        key: "_compare",
        value: function _compare(a, b) {
          a = this._normalizeEmptyValue(a);
          b = this._normalizeEmptyValue(b);

          if (a < b) {
            return -1;
          }

          if (a > b) {
            return 1;
          }

          return 0;
        }
        /**
         * @param {!Array<!GridItem>} items
         * @return {!Array<!GridItem>}
         * @protected
         */

      }, {
        key: "_filter",
        value: function _filter(items) {
          var _this2 = this;

          return items.filter(function (item, index) {
            return _this2._filters.filter(function (filter) {
              var value = _this2._normalizeEmptyValue(_polymerLegacy.Base.get(filter.path, item));

              var filterValueLowercase = _this2._normalizeEmptyValue(filter.value).toString().toLowerCase();

              return value.toString().toLowerCase().indexOf(filterValueLowercase) === -1;
            }).length === 0;
          });
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * An array containing the items which will be stamped to the column template
             * instances.
             *
             * @type {Array<!GridItem> | undefined}
             */
            items: Array
          };
        }
      }, {
        key: "observers",
        get: function get() {
          return ['_itemsChanged(items, items.*, isAttached)'];
        }
      }]);
      return ArrayDataProviderMixin;
    }(superClass);
  };

  _exports.ArrayDataProviderMixin = ArrayDataProviderMixin;
});