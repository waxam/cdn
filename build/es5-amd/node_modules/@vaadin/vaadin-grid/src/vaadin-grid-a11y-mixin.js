define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.A11yMixin = void 0;

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var A11yMixin = function A11yMixin(superClass) {
    return (
      /*#__PURE__*/
      function (_superClass) {
        babelHelpers.inherits(A11yMixin, _superClass);

        function A11yMixin() {
          babelHelpers.classCallCheck(this, A11yMixin);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(A11yMixin).apply(this, arguments));
        }

        babelHelpers.createClass(A11yMixin, [{
          key: "_a11yGetHeaderRowCount",
          value: function _a11yGetHeaderRowCount(_columnTree) {
            return _columnTree.filter(function (level) {
              return level.some(function (col) {
                return col._headerTemplate || col.headerRenderer || col.path || col.header;
              });
            }).length;
          }
        }, {
          key: "_a11yGetFooterRowCount",
          value: function _a11yGetFooterRowCount(_columnTree) {
            return _columnTree.filter(function (level) {
              return level.some(function (col) {
                return col._headerTemplate || col.headerRenderer;
              });
            }).length;
          }
        }, {
          key: "_a11yUpdateGridSize",
          value: function _a11yUpdateGridSize(size, _columnTree) {
            if (size === undefined || _columnTree === undefined) {
              return;
            }

            var bodyColumns = _columnTree[_columnTree.length - 1];
            this.$.table.setAttribute('aria-rowcount', size + this._a11yGetHeaderRowCount(_columnTree) + this._a11yGetFooterRowCount(_columnTree));
            this.$.table.setAttribute('aria-colcount', bodyColumns && bodyColumns.length || 0);

            this._a11yUpdateHeaderRows();

            this._a11yUpdateFooterRows();
          }
        }, {
          key: "_a11yUpdateHeaderRows",
          value: function _a11yUpdateHeaderRows() {
            Array.from(this.$.header.children).forEach(function (headerRow, index) {
              return headerRow.setAttribute('aria-rowindex', index + 1);
            });
          }
        }, {
          key: "_a11yUpdateFooterRows",
          value: function _a11yUpdateFooterRows() {
            var _this = this;

            Array.from(this.$.footer.children).forEach(function (footerRow, index) {
              return footerRow.setAttribute('aria-rowindex', _this._a11yGetHeaderRowCount(_this._columnTree) + _this.size + index + 1);
            });
          }
        }, {
          key: "_a11yUpdateRowRowindex",
          value: function _a11yUpdateRowRowindex(row, index) {
            row.setAttribute('aria-rowindex', index + this._a11yGetHeaderRowCount(this._columnTree) + 1);
          }
        }, {
          key: "_a11yUpdateRowSelected",
          value: function _a11yUpdateRowSelected(row, selected) {
            // Jaws reads selection only for rows, NVDA only for cells
            row.setAttribute('aria-selected', Boolean(selected));
            Array.from(row.children).forEach(function (cell) {
              return cell.setAttribute('aria-selected', Boolean(selected));
            });
          }
        }, {
          key: "_a11yUpdateRowLevel",
          value: function _a11yUpdateRowLevel(row, level) {
            row.setAttribute('aria-level', level + 1);
          }
        }, {
          key: "_a11yUpdateRowDetailsOpened",
          value: function _a11yUpdateRowDetailsOpened(row, detailsOpened) {
            Array.from(row.children).forEach(function (cell) {
              if (typeof detailsOpened === 'boolean') {
                cell.setAttribute('aria-expanded', detailsOpened);
              } else {
                if (cell.hasAttribute('aria-expanded')) {
                  cell.removeAttribute('aria-expanded');
                }
              }
            });
          }
        }, {
          key: "_a11ySetRowDetailsCell",
          value: function _a11ySetRowDetailsCell(row, detailsCell) {
            Array.from(row.children).forEach(function (cell) {
              if (cell !== detailsCell) {
                cell.setAttribute('aria-controls', detailsCell.id);
              }
            });
          }
        }, {
          key: "_a11yUpdateCellColspan",
          value: function _a11yUpdateCellColspan(cell, colspan) {
            cell.setAttribute('aria-colspan', Number(colspan));
          }
        }, {
          key: "_a11yUpdateSorters",
          value: function _a11yUpdateSorters() {
            Array.from(this.querySelectorAll('vaadin-grid-sorter')).forEach(function (sorter) {
              var cellContent = sorter.parentNode;

              while (cellContent && cellContent.localName !== 'vaadin-grid-cell-content') {
                cellContent = cellContent.parentNode;
              }

              if (cellContent && cellContent.assignedSlot) {
                var cell = cellContent.assignedSlot.parentNode;
                cell.setAttribute('aria-sort', {
                  'asc': 'ascending',
                  'desc': 'descending'
                }[String(sorter.direction)] || 'none');
              }
            });
          }
        }], [{
          key: "observers",
          get: function get() {
            return ['_a11yUpdateGridSize(size, _columnTree, _columnTree.*)'];
          }
        }]);
        return A11yMixin;
      }(superClass)
    );
  };

  _exports.A11yMixin = A11yMixin;
});