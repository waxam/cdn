define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/utils/templatize.js"], function (_exports, _polymerElement, _templatize) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.Templatizer = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * `vaadin-grid-templatizer` is a helper element for the `vaadin-grid` that is preparing and
   * stamping instances of cells and columns templates
   *
   * @extends PolymerElement
   * @private
   */
  var GridTemplatizer = /*#__PURE__*/function (_ref) {
    babelHelpers.inherits(GridTemplatizer, _ref);

    var _super = _createSuper(GridTemplatizer);

    function GridTemplatizer() {
      var _this;

      babelHelpers.classCallCheck(this, GridTemplatizer);
      _this = _super.call(this);
      _this._instanceProps = {
        detailsOpened: true,
        index: true,
        item: true,
        selected: true,
        expanded: true,
        level: true
      };
      return _this;
    }

    babelHelpers.createClass(GridTemplatizer, [{
      key: "createInstance",
      value: function createInstance() {
        this._ensureTemplatized();

        var instance = new this._TemplateClass({});
        this.addInstance(instance);
        return instance;
      }
    }, {
      key: "addInstance",
      value: function addInstance(instance) {
        var _this2 = this;

        if (this._templateInstances.indexOf(instance) === -1) {
          this._templateInstances.push(instance);

          requestAnimationFrame(function () {
            return _this2.notifyPath('_templateInstances.*', _this2._templateInstances);
          });
        }
      }
    }, {
      key: "removeInstance",
      value: function removeInstance(instance) {
        var index = this._templateInstances.indexOf(instance);

        this.splice('_templateInstances', index, 1);
      }
    }, {
      key: "_ensureTemplatized",
      value: function _ensureTemplatized() {
        if (!this._TemplateClass) {
          this._TemplateClass = (0, _templatize.templatize)(this.template, this, {
            instanceProps: this._instanceProps,
            parentModel: true,
            forwardHostProp: function forwardHostProp(prop, value) {
              this._forwardParentProp(prop, value);

              if (this._templateInstances) {
                this._templateInstances.forEach(function (inst) {
                  return inst.notifyPath(prop, value);
                });
              }
            },
            notifyInstanceProp: function notifyInstanceProp(inst, prop, value) {
              var _this3 = this;

              if (prop === 'index' || prop === 'item') {
                // We donâ€™t need a change notification for these.
                return;
              }

              var originalProp = "__".concat(prop, "__"); // Notify for only user-action changes, not for scrolling updates. E. g.,
              // if `detailsOpened` is different from `__detailsOpened__`, which was set during render.

              if (inst[originalProp] === value) {
                return;
              }

              inst[originalProp] = value;
              var row = Array.from(this._grid.$.items.children).filter(function (row) {
                return _this3._grid._itemsEqual(row._item, inst.item);
              })[0];

              if (row) {
                Array.from(row.children).forEach(function (cell) {
                  if (cell._instance) {
                    cell._instance[originalProp] = value;

                    cell._instance.notifyPath(prop, value);
                  }
                });
              }

              var itemPrefix = 'item.';

              if (Array.isArray(this._grid.items) && prop.indexOf(itemPrefix) === 0) {
                var itemsIndex = this._grid.items.indexOf(inst.item);

                var path = prop.slice(itemPrefix.length);

                this._grid.notifyPath("items.".concat(itemsIndex, ".").concat(path), value);
              }

              var gridCallback = "_".concat(prop, "InstanceChangedCallback");

              if (this._grid && this._grid[gridCallback]) {
                this._grid[gridCallback](inst, value);
              }
            }
          });
        }
      }
    }, {
      key: "_forwardParentProp",
      value: function _forwardParentProp(prop, value) {
        this._parentPathValues[prop] = value;

        this._templateInstances.forEach(function (inst) {
          return inst.notifyPath(prop, value);
        });
      }
    }, {
      key: "_templateInstancesChanged",
      value: function _templateInstancesChanged(t, p) {
        var _this4 = this;

        var index, count;

        if (t.path === '_templateInstances') {
          // Iterate all instances
          index = 0;
          count = this._templateInstances.length;
        } else if (t.path === '_templateInstances.splices') {
          // Iterate only new instances
          index = t.value.index;
          count = t.value.addedCount;
        } else {
          return;
        }

        Object.keys(this._parentPathValues || {}).forEach(function (keyName) {
          for (var i = index; i < index + count; i++) {
            _this4._templateInstances[i].set(keyName, _this4._parentPathValues[keyName]);
          }
        });
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-grid-templatizer';
      }
    }, {
      key: "properties",
      get: function get() {
        return {
          dataHost: Object,
          template: Object,
          _templateInstances: {
            type: Array,
            value: function value() {
              return [];
            }
          },
          _parentPathValues: {
            value: function value() {
              return {};
            }
          },
          _grid: Object
        };
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_templateInstancesChanged(_templateInstances.*, _parentPathValues.*)'];
      }
    }]);
    return GridTemplatizer;
  }( /*#__PURE__*/function (_PolymerElement) {
    babelHelpers.inherits(_class, _PolymerElement);

    var _super2 = _createSuper(_class);

    function _class() {
      babelHelpers.classCallCheck(this, _class);
      return _super2.apply(this, arguments);
    }

    return babelHelpers.createClass(_class);
  }(_polymerElement.PolymerElement));

  _exports.Templatizer = GridTemplatizer;
  customElements.define(GridTemplatizer.is, GridTemplatizer);
});