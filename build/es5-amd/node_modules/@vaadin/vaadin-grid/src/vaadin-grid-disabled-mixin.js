define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DisabledMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  @license
  Copyright (c) 2017 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var DisabledMixin = function DisabledMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(DisabledMixin, _superClass);

      var _super = _createSuper(DisabledMixin);

      function DisabledMixin() {
        babelHelpers.classCallCheck(this, DisabledMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(DisabledMixin, [{
        key: "_disabledChanged",
        value:
        /** @protected */
        function _disabledChanged(disabled) {
          if (disabled) {
            this.setAttribute('tabindex', '-1');
            this.setAttribute('aria-disabled', 'true');
          } else {
            this.removeAttribute('tabindex');
            this.removeAttribute('aria-disabled');
          }
        }
        /**
         * Overrides the default element `click` method in order to prevent
         * firing the `click` event when the element is disabled.
         * @protected
         * @override
         */

      }, {
        key: "click",
        value: function click() {
          if (!this.disabled) {
            babelHelpers.get(babelHelpers.getPrototypeOf(DisabledMixin.prototype), "click", this).call(this);
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            disabled: {
              type: Boolean,
              value: false,
              observer: '_disabledChanged',
              reflectToAttribute: true
            }
          };
        }
      }]);
      return DisabledMixin;
    }(superClass);
  };

  _exports.DisabledMixin = DisabledMixin;
});