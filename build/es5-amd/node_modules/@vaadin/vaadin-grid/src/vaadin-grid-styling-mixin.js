define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.StylingMixin = void 0;

  /**
  @license
  Copyright (c) 2018 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var StylingMixin = function StylingMixin(superClass) {
    return (
      /*#__PURE__*/
      function (_superClass) {
        babelHelpers.inherits(StylingMixin, _superClass);

        function StylingMixin() {
          babelHelpers.classCallCheck(this, StylingMixin);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(StylingMixin).apply(this, arguments));
        }

        babelHelpers.createClass(StylingMixin, [{
          key: "__cellClassNameGeneratorChanged",
          value: function __cellClassNameGeneratorChanged(cellClassGenerator) {
            this.generateCellClassNames();
          }
          /**
           * Runs the `cellClassNameGenerator` for the visible cells.
           * If the generator depends on varying conditions, you need to
           * call this function manually in order to update the styles when
           * the conditions change.
           */

        }, {
          key: "generateCellClassNames",
          value: function generateCellClassNames() {
            var _this = this;

            Array.from(this.$.items.children).filter(function (row) {
              return !row.hidden;
            }).forEach(function (row) {
              return _this._generateCellClassNames(row, _this.__getRowModel(row));
            });
          }
        }, {
          key: "_generateCellClassNames",
          value: function _generateCellClassNames(row, rowData) {
            var _this2 = this;

            Array.from(row.children).forEach(function (cell) {
              if (cell.__generatedClasses) {
                cell.__generatedClasses.forEach(function (className) {
                  return cell.classList.remove(className);
                });
              }

              if (_this2.cellClassNameGenerator) {
                var result = _this2.cellClassNameGenerator(cell._column, rowData);

                cell.__generatedClasses = result && result.split(' ').filter(function (className) {
                  return className.length > 0;
                });

                if (cell.__generatedClasses) {
                  cell.__generatedClasses.forEach(function (className) {
                    return cell.classList.add(className);
                  });
                }
              }
            });
          }
        }], [{
          key: "properties",
          get: function get() {
            return {
              /**
               * A function that allows generating CSS class names for grid cells
               * based on their row and column. The return value should be the generated
               * class name as a string, or multiple class names separated by whitespace
               * characters.
               *
               * Receives two arguments:
               * - `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).
               * - `rowData` The object with the properties related with
               *   the rendered item, contains:
               *   - `rowData.index` The index of the item.
               *   - `rowData.item` The item.
               *   - `rowData.expanded` Sublevel toggle state.
               *   - `rowData.level` Level of the tree represented with a horizontal offset of the toggle button.
               *   - `rowData.selected` Selected state.
               */
              cellClassNameGenerator: Function
            };
          }
        }, {
          key: "observers",
          get: function get() {
            return ['__cellClassNameGeneratorChanged(cellClassNameGenerator)'];
          }
        }]);
        return StylingMixin;
      }(superClass)
    );
  };

  _exports.StylingMixin = StylingMixin;
});