define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.StylingMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
  @license
  Copyright (c) 2018 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * @polymerMixin
   */
  var StylingMixin = function StylingMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(StylingMixin, _superClass);

      var _super = _createSuper(StylingMixin);

      function StylingMixin() {
        babelHelpers.classCallCheck(this, StylingMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(StylingMixin, [{
        key: "__cellClassNameGeneratorChanged",
        value: function __cellClassNameGeneratorChanged(cellClassGenerator) {
          this.generateCellClassNames();
        }
        /**
         * Runs the `cellClassNameGenerator` for the visible cells.
         * If the generator depends on varying conditions, you need to
         * call this function manually in order to update the styles when
         * the conditions change.
         */

      }, {
        key: "generateCellClassNames",
        value: function generateCellClassNames() {
          var _this = this;

          Array.from(this.$.items.children).filter(function (row) {
            return !row.hidden;
          }).forEach(function (row) {
            return _this._generateCellClassNames(row, _this.__getRowModel(row));
          });
        }
        /** @private */

      }, {
        key: "_generateCellClassNames",
        value: function _generateCellClassNames(row, model) {
          var _this2 = this;

          Array.from(row.children).forEach(function (cell) {
            if (cell.__generatedClasses) {
              cell.__generatedClasses.forEach(function (className) {
                return cell.classList.remove(className);
              });
            }

            if (_this2.cellClassNameGenerator) {
              var result = _this2.cellClassNameGenerator(cell._column, model);

              cell.__generatedClasses = result && result.split(' ').filter(function (className) {
                return className.length > 0;
              });

              if (cell.__generatedClasses) {
                cell.__generatedClasses.forEach(function (className) {
                  return cell.classList.add(className);
                });
              }
            }
          });
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * A function that allows generating CSS class names for grid cells
             * based on their row and column. The return value should be the generated
             * class name as a string, or multiple class names separated by whitespace
             * characters.
             *
             * Receives two arguments:
             * - `column` The `<vaadin-grid-column>` element (`undefined` for details-cell).
             * - `model` The object with the properties related with
             *   the rendered item, contains:
             *   - `model.index` The index of the item.
             *   - `model.item` The item.
             *   - `model.expanded` Sublevel toggle state.
             *   - `model.level` Level of the tree represented with a horizontal offset of the toggle button.
             *   - `model.selected` Selected state.
             *
             * @type {GridCellClassNameGenerator | null | undefined}
             */
            cellClassNameGenerator: Function
          };
        }
      }, {
        key: "observers",
        get: function get() {
          return ['__cellClassNameGeneratorChanged(cellClassNameGenerator)'];
        }
      }]);
      return StylingMixin;
    }(superClass);
  };

  _exports.StylingMixin = StylingMixin;
});