define(["exports", "../lit-html.js"], function (_exports, _litHtml) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.classMap = void 0;

  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

  // IE11 doesn't support classList on SVG elements, so we emulate it with a Set
  var ClassList = /*#__PURE__*/function () {
    function ClassList(element) {
      babelHelpers.classCallCheck(this, ClassList);
      this.classes = new Set();
      this.changed = false;
      this.element = element;
      var classList = (element.getAttribute('class') || '').split(/\s+/);

      var _iterator = _createForOfIteratorHelper(classList),
          _step;

      try {
        for (_iterator.s(); !(_step = _iterator.n()).done;) {
          var cls = _step.value;
          this.classes.add(cls);
        }
      } catch (err) {
        _iterator.e(err);
      } finally {
        _iterator.f();
      }
    }

    babelHelpers.createClass(ClassList, [{
      key: "add",
      value: function add(cls) {
        this.classes.add(cls);
        this.changed = true;
      }
    }, {
      key: "remove",
      value: function remove(cls) {
        this.classes.delete(cls);
        this.changed = true;
      }
    }, {
      key: "commit",
      value: function commit() {
        if (this.changed) {
          var classString = '';
          this.classes.forEach(function (cls) {
            return classString += cls + ' ';
          });
          this.element.setAttribute('class', classString);
        }
      }
    }]);
    return ClassList;
  }();
  /**
   * Stores the ClassInfo object applied to a given AttributePart.
   * Used to unset existing values when a new ClassInfo object is applied.
   */


  var previousClassesCache = new WeakMap();
  /**
   * A directive that applies CSS classes. This must be used in the `class`
   * attribute and must be the only part used in the attribute. It takes each
   * property in the `classInfo` argument and adds the property name to the
   * element's `class` if the property value is truthy; if the property value is
   * falsey, the property name is removed from the element's `class`. For example
   * `{foo: bar}` applies the class `foo` if the value of `bar` is truthy.
   * @param classInfo {ClassInfo}
   */

  var classMap = (0, _litHtml.directive)(function (classInfo) {
    return function (part) {
      if (!babelHelpers.instanceof(part, _litHtml.AttributePart) || babelHelpers.instanceof(part, _litHtml.PropertyPart) || part.committer.name !== 'class' || part.committer.parts.length > 1) {
        throw new Error('The `classMap` directive must be used in the `class` attribute ' + 'and must be the only part in the attribute.');
      }

      var committer = part.committer;
      var element = committer.element;
      var previousClasses = previousClassesCache.get(part);

      if (previousClasses === undefined) {
        // Write static classes once
        // Use setAttribute() because className isn't a string on SVG elements
        element.setAttribute('class', committer.strings.join(' '));
        previousClassesCache.set(part, previousClasses = new Set());
      }

      var classList = element.classList || new ClassList(element); // Remove old classes that no longer apply
      // We use forEach() instead of for-of so that re don't require down-level
      // iteration.

      previousClasses.forEach(function (name) {
        if (!(name in classInfo)) {
          classList.remove(name);
          previousClasses.delete(name);
        }
      }); // Add or remove classes based on their classMap value

      for (var name in classInfo) {
        var value = classInfo[name];

        if (value != previousClasses.has(name)) {
          // We explicitly want a loose truthy check of `value` because it seems
          // more convenient that '' and 0 are skipped.
          if (value) {
            classList.add(name);
            previousClasses.add(name);
          } else {
            classList.remove(name);
            previousClasses.delete(name);
          }
        }
      }

      if (typeof classList.commit === 'function') {
        classList.commit();
      }
    };
  });
  _exports.classMap = classMap;
});