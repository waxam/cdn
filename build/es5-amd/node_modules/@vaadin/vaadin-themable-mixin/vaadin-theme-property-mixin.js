define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.ThemePropertyMixin = void 0;

  function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = babelHelpers.getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = babelHelpers.getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return babelHelpers.possibleConstructorReturn(this, result); }; }

  function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }

  /**
   * @polymerMixin
   */
  var ThemePropertyMixin = function ThemePropertyMixin(superClass) {
    return /*#__PURE__*/function (_superClass) {
      babelHelpers.inherits(VaadinThemePropertyMixin, _superClass);

      var _super = _createSuper(VaadinThemePropertyMixin);

      function VaadinThemePropertyMixin() {
        babelHelpers.classCallCheck(this, VaadinThemePropertyMixin);
        return _super.apply(this, arguments);
      }

      babelHelpers.createClass(VaadinThemePropertyMixin, [{
        key: "attributeChangedCallback",
        value:
        /** @protected */
        function attributeChangedCallback(name, oldValue, newValue) {
          babelHelpers.get(babelHelpers.getPrototypeOf(VaadinThemePropertyMixin.prototype), "attributeChangedCallback", this).call(this, name, oldValue, newValue);

          if (name === 'theme') {
            this._setTheme(newValue);
          }
        }
      }], [{
        key: "properties",
        get: function get() {
          return {
            /**
             * Helper property with theme attribute value facilitating propagation
             * in shadow DOM.
             *
             * Enables the component implementation to propagate the `theme`
             * attribute value to the subcomponents in Shadow DOM by binding
             * the subcomponentâ€™s "theme" attribute to the `theme` property of
             * the host.
             *
             * **NOTE:** Extending the mixin only provides the property for binding,
             * and does not make the propagation alone.
             *
             * See [Theme Attribute and Subcomponents](https://github.com/vaadin/vaadin-themable-mixin/wiki/5.-Theme-Attribute-and-Subcomponents).
             * page for more information.
             *
             * @protected
             */
            theme: {
              type: String,
              readOnly: true
            }
          };
        }
      }]);
      return VaadinThemePropertyMixin;
    }(superClass);
  };

  _exports.ThemePropertyMixin = ThemePropertyMixin;
});