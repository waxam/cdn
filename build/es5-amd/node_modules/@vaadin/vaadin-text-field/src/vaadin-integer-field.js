define(["exports", "../../../@polymer/polymer/polymer-element.js", "../../../@polymer/polymer/lib/elements/custom-style.js", "./vaadin-number-field.js"], function (_exports, _polymerElement, _customStyle, _vaadinNumberField) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.IntegerFieldElement = void 0;

  /**
  @license
  Copyright (c) 2019 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */
  var $_documentContainer = document.createElement('template');
  $_documentContainer.innerHTML = "<dom-module id=\"vaadin-integer-field-template\">\n\n  \n</dom-module>";
  document.head.appendChild($_documentContainer.content);
  /**
  * `<vaadin-integer-field>` is a Web Component for integer field control in forms.
  *
  * ```html
  * <vaadin-integer-field label="Number">
  * </vaadin-integer-field>
  * ```
  *
  * @memberof Vaadin
  * @demo demo/index.html
  */

  var IntegerFieldElement =
  /*#__PURE__*/
  function (_NumberFieldElement) {
    babelHelpers.inherits(IntegerFieldElement, _NumberFieldElement);

    function IntegerFieldElement() {
      babelHelpers.classCallCheck(this, IntegerFieldElement);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(IntegerFieldElement).apply(this, arguments));
    }

    babelHelpers.createClass(IntegerFieldElement, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(IntegerFieldElement.prototype), "ready", this).call(this);
        this._enabledCharPattern = '[-+\\d]';
      }
    }, {
      key: "_valueChanged",
      value: function _valueChanged(newVal, oldVal) {
        if (newVal !== '' && !this.__isInteger(newVal)) {
          console.warn("Trying to set non-integer value \"".concat(newVal, "\" to <vaadin-integer-field>.") + " Clearing the value.");
          this.value = '';
          return;
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(IntegerFieldElement.prototype), "_valueChanged", this).call(this, newVal, oldVal);
      }
    }, {
      key: "_stepChanged",
      value: function _stepChanged(newVal, oldVal) {
        if (!this.__hasOnlyDigits(newVal)) {
          console.warn("Trying to set invalid step size \"".concat(newVal, "\",") + " which is not a positive integer, to <vaadin-integer-field>." + " Resetting the default value 1.");
          this.step = 1;
          return;
        }

        babelHelpers.get(babelHelpers.getPrototypeOf(IntegerFieldElement.prototype), "_stepChanged", this).call(this, newVal, oldVal);
      }
    }, {
      key: "__isInteger",
      value: function __isInteger(value) {
        return /^(-\d)?\d*$/.test(String(value));
      }
    }, {
      key: "__hasOnlyDigits",
      value: function __hasOnlyDigits(value) {
        return /^\d*$/.test(String(value));
      }
    }], [{
      key: "is",
      get: function get() {
        return 'vaadin-integer-field';
      }
    }, {
      key: "version",
      get: function get() {
        return '2.5.4';
      }
    }, {
      key: "properties",
      get: function get() {
        // Hide inherited props that don't work with <input type="number"> from JSDoc.
        return {
          /**
           * @private
           */
          pattern: String,

          /**
           * @private
           */
          preventInvalidInput: Boolean,

          /**
           * @private
           */
          minlength: Number,

          /**
           * @private
           */
          maxlength: Number
        };
      }
    }]);
    return IntegerFieldElement;
  }(_vaadinNumberField.NumberFieldElement);

  _exports.IntegerFieldElement = IntegerFieldElement;
  window.customElements.define(IntegerFieldElement.is, IntegerFieldElement);
});