define(["exports", "../../../@polymer/polymer/polymer-element.js", "./vaadin-text-field-mixin.js", "../../vaadin-element-mixin/vaadin-element-mixin.js", "../../../@polymer/polymer/lib/utils/html-tag.js", "../../vaadin-themable-mixin/vaadin-themable-mixin.js"], function (_exports, _polymerElement, _vaadinTextFieldMixin, _vaadinElementMixin, _htmlTag, _vaadinThemableMixin) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.TextAreaElement = void 0;

  function _templateObject_7f4544d0d34d11ea880ba1e93364c49c() {
    var data = babelHelpers.taggedTemplateLiteral(["\n    <style include=\"vaadin-text-field-shared-styles\">\n      .vaadin-text-area-container {\n        flex: auto;\n        max-height: inherit; /* MSIE 11 */\n        min-height: inherit; /* MSIE 11 */\n      }\n\n      /* The label and the error message should neither grow nor shrink. */\n      [part=\"label\"],\n      [part=\"error-message\"] {\n        flex: none;\n      }\n\n      [part=\"input-field\"] {\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      [part=\"value\"] {\n        resize: none;\n      }\n\n      [part=\"value\"],\n      [part=\"input-field\"] ::slotted(*) {\n        align-self: flex-start;\n      }\n\n      @keyframes vaadin-text-area-appear {\n        to {\n          opacity: 1;\n        }\n      }\n\n      :host {\n        animation: 1ms vaadin-text-area-appear;\n      }\n    </style>\n\n    <div class=\"vaadin-text-area-container\">\n\n      <label part=\"label\" on-click=\"focus\" id=\"[[_labelId]]\">[[label]]</label>\n\n      <div part=\"input-field\" id=\"[[_inputId]]\">\n\n        <slot name=\"prefix\"></slot>\n\n        <slot name=\"textarea\">\n          <textarea part=\"value\"></textarea>\n        </slot>\n\n        <div part=\"clear-button\" id=\"clearButton\" role=\"button\" aria-label$=\"[[i18n.clear]]\"></div>\n        <slot name=\"suffix\"></slot>\n\n      </div>\n\n      <div part=\"error-message\" id=\"[[_errorId]]\" aria-live=\"assertive\" aria-hidden$=\"[[_getErrorMessageAriaHidden(invalid, errorMessage, _errorId)]]\">[[errorMessage]]</div>\n\n    </div>\n"], ["\n    <style include=\"vaadin-text-field-shared-styles\">\n      .vaadin-text-area-container {\n        flex: auto;\n        max-height: inherit; /* MSIE 11 */\n        min-height: inherit; /* MSIE 11 */\n      }\n\n      /* The label and the error message should neither grow nor shrink. */\n      [part=\"label\"],\n      [part=\"error-message\"] {\n        flex: none;\n      }\n\n      [part=\"input-field\"] {\n        overflow: auto;\n        -webkit-overflow-scrolling: touch;\n      }\n\n      [part=\"value\"] {\n        resize: none;\n      }\n\n      [part=\"value\"],\n      [part=\"input-field\"] ::slotted(*) {\n        align-self: flex-start;\n      }\n\n      @keyframes vaadin-text-area-appear {\n        to {\n          opacity: 1;\n        }\n      }\n\n      :host {\n        animation: 1ms vaadin-text-area-appear;\n      }\n    </style>\n\n    <div class=\"vaadin-text-area-container\">\n\n      <label part=\"label\" on-click=\"focus\" id=\"[[_labelId]]\">[[label]]</label>\n\n      <div part=\"input-field\" id=\"[[_inputId]]\">\n\n        <slot name=\"prefix\"></slot>\n\n        <slot name=\"textarea\">\n          <textarea part=\"value\"></textarea>\n        </slot>\n\n        <div part=\"clear-button\" id=\"clearButton\" role=\"button\" aria-label\\$=\"[[i18n.clear]]\"></div>\n        <slot name=\"suffix\"></slot>\n\n      </div>\n\n      <div part=\"error-message\" id=\"[[_errorId]]\" aria-live=\"assertive\" aria-hidden\\$=\"[[_getErrorMessageAriaHidden(invalid, errorMessage, _errorId)]]\">[[errorMessage]]</div>\n\n    </div>\n"]);

    _templateObject_7f4544d0d34d11ea880ba1e93364c49c = function _templateObject_7f4544d0d34d11ea880ba1e93364c49c() {
      return data;
    };

    return data;
  }

  /**
   * `<vaadin-text-area>` is a Web Component for text area control in forms.
   *
   * ```html
   * <vaadin-text-area label="Add description">
   * </vaadin-text-area>
   * ```
   *
   * ### Prefixes and suffixes
   *
   * These are child elements of a `<vaadin-text-area>` that are displayed
   * inline with the input, before or after.
   * In order for an element to be considered as a prefix, it must have the slot
   * attribute set to `prefix` (and similarly for `suffix`).
   *
   * ```html
   * <vaadin-text-area label="Add description">
   *   <div slot="prefix">Details:</div>
   *   <div slot="suffix">The end!</div>
   * </vaadin-text-area>
   * ```
   *
   * ### Styling
   *
   * The following shadow DOM parts are available for styling:
   *
   * Part name | Description
   * ----------------|----------------
   * `label` | The label element
   * `input-field` | The element that wraps prefix, value and suffix
   * `value` | The text value element inside the `input-field` element
   * `error-message` | The error message element
   *
   * The following state attributes are available for styling:
   *
   * Attribute    | Description | Part name
   * -------------|-------------|------------
   * `disabled` | Set to a disabled text field | :host
   * `has-value` | Set when the element has a value | :host
   * `has-label` | Set when the element has a label | :host
   * `invalid` | Set when the element is invalid | :host
   * `focused` | Set when the element is focused | :host
   * `focus-ring` | Set when the element is keyboard focused | :host
   * `readonly` | Set to a readonly text field | :host
   *
   * See [ThemableMixin â€“ how to apply styles for shadow parts](https://github.com/vaadin/vaadin-themable-mixin/wiki)
   *
   * @memberof Vaadin
   * @mixes Vaadin.TextFieldMixin
   * @mixes Vaadin.ThemableMixin
   * @demo demo/index.html
   */
  var TextAreaElement =
  /*#__PURE__*/
  function (_ElementMixin) {
    babelHelpers.inherits(TextAreaElement, _ElementMixin);

    function TextAreaElement() {
      babelHelpers.classCallCheck(this, TextAreaElement);
      return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(TextAreaElement).apply(this, arguments));
    }

    babelHelpers.createClass(TextAreaElement, [{
      key: "ready",
      value: function ready() {
        babelHelpers.get(babelHelpers.getPrototypeOf(TextAreaElement.prototype), "ready", this).call(this);

        this._updateHeight();

        this.addEventListener('animationend', this._onAnimationEnd);
      }
    }, {
      key: "_onAnimationEnd",
      value: function _onAnimationEnd(e) {
        if (e.animationName.indexOf('vaadin-text-area-appear') === 0) {
          this._updateHeight();
        }
      }
    }, {
      key: "_textAreaValueChanged",
      value: function _textAreaValueChanged(value) {
        this._updateHeight();
      }
    }, {
      key: "_updateHeight",
      value: function _updateHeight() {
        var inputField = this.root.querySelector('[part=input-field]');
        var scrollTop = inputField.scrollTop;
        var input = this.inputElement;
        var inputWidth = getComputedStyle(input).width;
        var valueLength = this.value ? this.value.length : 0; // Only clear the height when the content shortens to minimize scrollbar flickering.

        if (this._oldValueLength >= valueLength) {
          // Fix the input element width so its scroll height isn't affected by host's disappearing scrollbars
          input.style.maxWidth = inputWidth;
          input.style.height = 'auto'; // Avoid a jumpy Safari rendering issue

          inputField.style.display = 'block';
        }

        this._oldValueLength = valueLength;
        var inputHeight = input.scrollHeight;

        if (inputHeight > input.clientHeight) {
          input.style.height = inputHeight + 'px';
        } // Restore


        input.style.removeProperty('max-width');
        inputField.style.removeProperty('display');
        inputField.scrollTop = scrollTop;

        this._dispatchIronResizeEventIfNeeded('InputHeight', inputHeight);
      }
      /**
       * Fired when the text-area height changes.
       *
       * @event iron-resize
       */

    }, {
      key: "_slottedTagName",
      get: function get() {
        return 'textarea';
      }
    }], [{
      key: "template",
      get: function get() {
        return (0, _htmlTag.html)(_templateObject_7f4544d0d34d11ea880ba1e93364c49c());
      }
    }, {
      key: "is",
      get: function get() {
        return 'vaadin-text-area';
      }
    }, {
      key: "version",
      get: function get() {
        return '2.5.4';
      }
    }, {
      key: "observers",
      get: function get() {
        return ['_textAreaValueChanged(value)'];
      }
    }]);
    return TextAreaElement;
  }((0, _vaadinElementMixin.ElementMixin)((0, _vaadinTextFieldMixin.TextFieldMixin)((0, _vaadinThemableMixin.ThemableMixin)(_polymerElement.PolymerElement))));

  _exports.TextAreaElement = TextAreaElement;
  customElements.define(TextAreaElement.is, TextAreaElement);
});