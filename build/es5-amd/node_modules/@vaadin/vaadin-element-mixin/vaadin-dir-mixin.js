define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DirMixin = void 0;

  /**
   * Array of Vaadin custom element classes that have been subscribed to the dir changes.
   */
  var directionSubscribers = [];

  var directionUpdater = function directionUpdater() {
    var documentDir = getDocumentDir();
    directionSubscribers.forEach(function (element) {
      alignDirs(element, documentDir);
    });
  };

  var directionObserver = new MutationObserver(directionUpdater);
  directionObserver.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['dir']
  });

  var alignDirs = function alignDirs(element, documentDir) {
    if (documentDir) {
      element.setAttribute('dir', documentDir);
    } else {
      element.removeAttribute('dir');
    }
  };

  var getDocumentDir = function getDocumentDir() {
    return document.documentElement.getAttribute('dir');
  };
  /**
   * @polymerMixin
   */


  var DirMixin = function DirMixin(superClass) {
    return (
      /*#__PURE__*/
      function (_superClass) {
        babelHelpers.inherits(VaadinDirMixin, _superClass);

        function VaadinDirMixin() {
          babelHelpers.classCallCheck(this, VaadinDirMixin);
          return babelHelpers.possibleConstructorReturn(this, babelHelpers.getPrototypeOf(VaadinDirMixin).apply(this, arguments));
        }

        babelHelpers.createClass(VaadinDirMixin, [{
          key: "connectedCallback",
          value: function connectedCallback() {
            babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "connectedCallback", this).call(this);

            if (!this.hasAttribute('dir')) {
              this.__subscribe();

              alignDirs(this, getDocumentDir());
            }
          }
          /** @protected */

        }, {
          key: "attributeChangedCallback",
          value: function attributeChangedCallback(name, oldValue, newValue) {
            babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "attributeChangedCallback", this).call(this, name, oldValue, newValue);

            if (name !== 'dir') {
              return;
            } // New value equals to the document direction and the element is not subscribed to the changes


            var newValueEqlDocDir = newValue === getDocumentDir() && directionSubscribers.indexOf(this) === -1; // Value was emptied and the element is not subscribed to the changes

            var newValueEmptied = !newValue && oldValue && directionSubscribers.indexOf(this) === -1; // New value is different and the old equals to document direction and the element is not subscribed to the changes

            var newDiffValue = newValue !== getDocumentDir() && oldValue === getDocumentDir();

            if (newValueEqlDocDir || newValueEmptied) {
              this.__subscribe();

              alignDirs(this, getDocumentDir());
            } else if (newDiffValue) {
              this.__subscribe(false);
            }
          }
        }, {
          key: "disconnectedCallback",
          value: function disconnectedCallback() {
            babelHelpers.get(babelHelpers.getPrototypeOf(VaadinDirMixin.prototype), "disconnectedCallback", this).call(this);

            this.__subscribe(false);
          }
        }, {
          key: "__subscribe",
          value: function __subscribe() {
            var push = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

            if (push) {
              directionSubscribers.indexOf(this) === -1 && directionSubscribers.push(this);
            } else {
              directionSubscribers.indexOf(this) > -1 && directionSubscribers.splice(directionSubscribers.indexOf(this), 1);
            }
          }
        }], [{
          key: "properties",
          get: function get() {
            return {
              /**
               * @protected
               */
              dir: {
                type: String,
                readOnly: true
              }
            };
          }
        }]);
        return VaadinDirMixin;
      }(superClass)
    );
  };

  _exports.DirMixin = DirMixin;
});