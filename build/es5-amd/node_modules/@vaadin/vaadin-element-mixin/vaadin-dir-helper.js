define(["exports"], function (_exports) {
  "use strict";

  Object.defineProperty(_exports, "__esModule", {
    value: true
  });
  _exports.DirHelper = void 0;

  /**
  @license
  Copyright (c) 2020 Vaadin Ltd.
  This program is available under Apache License Version 2.0, available at https://vaadin.com/license/
  */

  /**
   * Helper that provides a set of functions for RTL.
   */
  var DirHelper = /*#__PURE__*/function () {
    function DirHelper() {
      babelHelpers.classCallCheck(this, DirHelper);
    }

    babelHelpers.createClass(DirHelper, null, [{
      key: "detectScrollType",
      value:
      /**
       * Get the scroll type in the current browser view.
       *
       * @return {string} the scroll type. Possible values are `default|reverse|negative`
       */
      function detectScrollType() {
        var dummy = document.createElement('div');
        dummy.textContent = 'ABCD';
        dummy.dir = 'rtl';
        dummy.style.fontSize = '14px';
        dummy.style.width = '4px';
        dummy.style.height = '1px';
        dummy.style.position = 'absolute';
        dummy.style.top = '-1000px';
        dummy.style.overflow = 'scroll';
        document.body.appendChild(dummy);
        var cachedType = 'reverse';

        if (dummy.scrollLeft > 0) {
          cachedType = 'default';
        } else {
          dummy.scrollLeft = 2;

          if (dummy.scrollLeft < 2) {
            cachedType = 'negative';
          }
        }

        document.body.removeChild(dummy);
        return cachedType;
      }
      /**
       * Get the scrollLeft value of the element relative to the direction
       *
       * @param {string} scrollType type of the scroll detected with `detectScrollType`
       * @param {string} direction current direction of the element
       * @param {Element} element
       * @return {number} the scrollLeft value.
      */

    }, {
      key: "getNormalizedScrollLeft",
      value: function getNormalizedScrollLeft(scrollType, direction, element) {
        var scrollLeft = element.scrollLeft;

        if (direction !== 'rtl' || !scrollType) {
          return scrollLeft;
        }

        switch (scrollType) {
          case 'negative':
            return element.scrollWidth - element.clientWidth + scrollLeft;

          case 'reverse':
            return element.scrollWidth - element.clientWidth - scrollLeft;
        }

        return scrollLeft;
      }
      /**
       * Set the scrollLeft value of the element relative to the direction
       *
       * @param {string} scrollType type of the scroll detected with `detectScrollType`
       * @param {string} direction current direction of the element
       * @param {Element} element
       * @param {number} scrollLeft the scrollLeft value to be set
       */

    }, {
      key: "setNormalizedScrollLeft",
      value: function setNormalizedScrollLeft(scrollType, direction, element, scrollLeft) {
        if (direction !== 'rtl' || !scrollType) {
          element.scrollLeft = scrollLeft;
          return;
        }

        switch (scrollType) {
          case 'negative':
            element.scrollLeft = element.clientWidth - element.scrollWidth + scrollLeft;
            break;

          case 'reverse':
            element.scrollLeft = element.scrollWidth - element.clientWidth - scrollLeft;
            break;

          default:
            element.scrollLeft = scrollLeft;
            break;
        }
      }
    }]);
    return DirHelper;
  }();

  _exports.DirHelper = DirHelper;
});